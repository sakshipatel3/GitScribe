"Index","Method Name","Method Signature","Commit Count","Change Types","Commit Message","Commit ID","Commit Author"
"1","onAttach","@Override
  public void onAttach(Context context)","0","-","-","-","-"
"2","androidInjector","@Override
  public AndroidInjector<Object> androidInjector()","0","-","-","-","-"
"3","DispatchingAndroidInjector","@Inject
  DispatchingAndroidInjector(
      Map<Class<?>, Provider<AndroidInjector.Factory<?>>> injectorFactoriesWithClassKeys,
      Map<String, Provider<AndroidInjector.Factory<?>>> injectorFactoriesWithStringKeys)","0","-","-","-","-"
"4","merge","/**
   * Merges the two maps into one by transforming the values of the","0","-","-","-","-"
"5","maybeInject","/**
   * Attempts to perform members-injection on","0","-","-","-","-"
"6","inject","/**
   * Performs members-injection on","0","-","-","-","-"
"7","InvalidInjectorBindingException","InvalidInjectorBindingException(String message, ClassCastException cause)","0","-","-","-","-"
"8","errorMessageSuggestions","/** Returns an error message with the class names that are supertypes of","0","-","-","-","-"
"9","onCreate","@CallSuper
  @Override
  public boolean onCreate()","0","-","-","-","-"
"10","of","/**
   * Accepts the fully qualified name of a class that is injected with","0","-","-","-","-"
"11","AndroidInjectionKeys","private AndroidInjectionKeys()","0","-","-","-","-"
"12","inject","/** Injects the members of","0","-","-","-","-"
"13","create","/**
     * Creates an","0","-","-","-","-"
"14","create","@Override
    public final AndroidInjector<T> create(T instance)","0","-","-","-","-"
"15","seedInstance","/**
     * Provides","0","-","-","-","-"
"16","build","/** Returns a newly-constructed","0","-","-","-","-"
"17","onCreate","@Override
  protected void onCreate(@Nullable Bundle savedInstanceState)","0","-","-","-","-"
"18","androidInjector","@Override
  public AndroidInjector<Object> androidInjector()","0","-","-","-","-"
"19","onAttach","@Override
  public void onAttach(Context context)","0","-","-","-","-"
"20","androidInjector","@Override
  public AndroidInjector<Object> androidInjector()","0","-","-","-","-"
"21","onCreate","@Override
  public void onCreate()","0","-","-","-","-"
"22","applicationInjector","/**
   * Implementations should return an","0","-","-","-","-"
"23","injectIfNecessary","/**
   * Lazily injects the","0","-","-","-","-"
"24","androidInjector","@Override
  public AndroidInjector<Object> androidInjector()","0","-","-","-","-"
"25","onReceive","@CallSuper
  @Override
  public void onReceive(Context context, Intent intent)","0","-","-","-","-"
"26","DaggerIntentService","public DaggerIntentService(String name)","0","-","-","-","-"
"27","onCreate","@Override
  public void onCreate()","0","-","-","-","-"
"28","onCreate","@Override
  public void onCreate()","0","-","-","-","-"
"29","inject","/**
   * Injects","0","-","-","-","-"
"30","inject","/**
   * Injects","0","-","-","-","-"
"31","findHasAndroidInjectorForFragment","private static HasAndroidInjector findHasAndroidInjectorForFragment(Fragment fragment)","0","-","-","-","-"
"32","inject","/**
   * Injects","0","-","-","-","-"
"33","inject","/**
   * Injects","0","-","-","-","-"
"34","inject","/**
   * Injects","0","-","-","-","-"
"35","inject","private static void inject(Object target, HasAndroidInjector hasAndroidInjector)","0","-","-","-","-"
"36","AndroidInjection","private AndroidInjection()","0","-","-","-","-"
"37","androidInjector","/** Returns an","0","-","-","-","-"
"38","classKeyedInjectorFactories","@Multibinds
  abstract Map<Class<?>, AndroidInjector.Factory<?>> classKeyedInjectorFactories();","0","-","-","-","-"
"39","stringKeyedInjectorFactories","@Multibinds
  abstract Map<String, AndroidInjector.Factory<?>> stringKeyedInjectorFactories();","0","-","-","-","-"
"40","AndroidInjectionModule","private AndroidInjectionModule()","0","-","-","-","-"
"41","assertThat","/** Starts a fluent assertion about a","0","-","-","-","-"
"42","BindingGraphSubject","private BindingGraphSubject(FailureMetadata metadata, @NullableDecl BindingGraph actual)","0","-","-","-","-"
"43","hasBindingWithKey","/**
   * Asserts that the graph has at least one binding with an unqualified key.
   *
   * @param type the canonical name of the type, as returned by","0","-","-","-","-"
"44","hasBindingWithKey","/**
   * Asserts that the graph has at least one binding with a qualified key.
   *
   * @param qualifier the canonical string form of the qualifier, as returned by","0","-","-","-","-"
"45","bindingWithKey","/**
   * Returns a subject for testing the binding for an unqualified key.
   *
   * @param type the canonical name of the type, as returned by","0","-","-","-","-"
"46","bindingWithKey","/**
   * Returns a subject for testing the binding for a qualified key.
   *
   * @param qualifier the canonical string form of the qualifier, as returned by","0","-","-","-","-"
"47","bindingWithKeyString","private BindingSubject bindingWithKeyString(String keyString)","0","-","-","-","-"
"48","getBindingNodes","private ImmutableSet<Binding> getBindingNodes(String keyString)","0","-","-","-","-"
"49","keyString","public static String keyString(Binding binding)","0","-","-","-","-"
"50","keyString","private static String keyString(String qualifier, String type)","0","-","-","-","-"
"51","formattedType","private static String formattedType(DaggerType type)","0","-","-","-","-"
"52","BindingSubject","BindingSubject(FailureMetadata metadata, @NullableDecl Binding actual)","0","-","-","-","-"
"53","dependsOnBindingWithKey","/**
     * Asserts that the binding depends on a binding with an unqualified key.
     *
     * @param type the canonical name of the type, as returned by","0","-","-","-","-"
"54","dependsOnBindingWithKey","/**
     * Asserts that the binding depends on a binding with a qualified key.
     *
     * @param qualifier the canonical string form of the qualifier, as returned by","0","-","-","-","-"
"55","dependsOnBindingWithKeyString","private void dependsOnBindingWithKeyString(String keyString)","0","-","-","-","-"
"56","actualBindingGraph","private BindingGraph actualBindingGraph()","0","-","-","-","-"
"57","assertThat","/** Starts a fluent assertion about a","0","-","-","-","-"
"58","BindingGraphSubject","private BindingGraphSubject(FailureMetadata metadata, @NullableDecl BindingGraph actual)","0","-","-","-","-"
"59","hasBindingWithKey","/**
   * Asserts that the graph has at least one binding with an unqualified key.
   *
   * @param type the canonical name of the type, as returned by","0","-","-","-","-"
"60","hasBindingWithKey","/**
   * Asserts that the graph has at least one binding with a qualified key.
   *
   * @param qualifier the canonical string form of the qualifier, as returned by","0","-","-","-","-"
"61","bindingWithKey","/**
   * Returns a subject for testing the binding for an unqualified key.
   *
   * @param type the canonical name of the type, as returned by","0","-","-","-","-"
"62","bindingWithKey","/**
   * Returns a subject for testing the binding for a qualified key.
   *
   * @param qualifier the canonical string form of the qualifier, as returned by","0","-","-","-","-"
"63","bindingWithKeyString","private BindingSubject bindingWithKeyString(String keyString)","0","-","-","-","-"
"64","getBindingNodes","private ImmutableSet<Binding> getBindingNodes(String keyString)","0","-","-","-","-"
"65","keyString","private static String keyString(String type)","0","-","-","-","-"
"66","keyString","private static String keyString(String qualifier, String type)","0","-","-","-","-"
"67","BindingSubject","BindingSubject(FailureMetadata metadata, @NullableDecl Binding actual)","0","-","-","-","-"
"68","dependsOnBindingWithKey","/**
     * Asserts that the binding depends on a binding with an unqualified key.
     *
     * @param type the canonical name of the type, as returned by","0","-","-","-","-"
"69","dependsOnBindingWithKey","/**
     * Asserts that the binding depends on a binding with a qualified key.
     *
     * @param qualifier the canonical string form of the qualifier, as returned by","0","-","-","-","-"
"70","dependsOnBindingWithKeyString","private void dependsOnBindingWithKeyString(String keyString)","0","-","-","-","-"
"71","actualBindingGraph","private BindingGraph actualBindingGraph()","0","-","-","-","-"
"72","optionalComparator","/**
   * A","0","-","-","-","-"
"73","emptiesLast","public static <T> Comparator<Optional<T>> emptiesLast(Comparator<? super T> valueComparator)","0","-","-","-","-"
"74","firstPresent","/** Returns the first argument that is present, or empty if none are. */
  @SafeVarargs
  public static <T> Optional<T> firstPresent(
      Optional<T> first, Optional<T> second, Optional<T>... rest)","0","-","-","-","-"
"75","rootmostValue","/**
   * Walks a chain of present optionals as defined by successive calls to","0","-","-","-","-"
"76","Optionals","private Optionals()","0","-","-","-","-"
"77","shortestPath","/**
   * Returns a shortest path from","0","-","-","-","-"
"78","unreachableNodes","/** Returns the nodes in a graph that are not reachable from a node. */
  public static <N> ImmutableSet<N> unreachableNodes(Graph<N> graph, N node)","0","-","-","-","-"
"79","DaggerGraphs","private DaggerGraphs()","0","-","-","-","-"
"80","toImmutableList","/**
   * Returns a","0","-","-","-","-"
"81","toImmutableSet","/**
   * Returns a","0","-","-","-","-"
"82","toImmutableMap","/**
   * Returns a","0","-","-","-","-"
"83","toImmutableSetMultimap","/**
   * Returns a","0","-","-","-","-"
"84","instancesOf","/**
   * Returns a function from","0","-","-","-","-"
"85","valuesOf","/** Returns a stream of all values of the given","0","-","-","-","-"
"86","presentValues","/**
   * A function that you can use to extract the present values from a stream of","0","-","-","-","-"
"87","stream","/**
   * Returns a sequential","0","-","-","-","-"
"88","DaggerStreams","private DaggerStreams()","0","-","-","-","-"
"89","toOptional","/**
   * A collector that converts a stream of zero or one elements to an","0","-","-","-","-"
"90","onlyElement","/**
   * A collector that takes a stream containing exactly one element and returns that element. The
   * returned collector throws an","0","-","-","-","-"
"91","ToOptionalState","ToOptionalState()","0","-","-","-","-"
"92","multiples","IllegalArgumentException multiples(boolean overflow)","0","-","-","-","-"
"93","add","void add(Object o)","0","-","-","-","-"
"94","combine","ToOptionalState combine(ToOptionalState other)","0","-","-","-","-"
"95","getOptional","Optional<Object> getOptional()","0","-","-","-","-"
"96","getElement","Object getElement()","0","-","-","-","-"
"97","DaggerCollectors","private DaggerCollectors()","0","-","-","-","-"
"98","reportComponent","/**
   * Reports a diagnostic for a component. For non-root components, includes information about the
   * path from the root component.
   */
  void reportComponent(Diagnostic.Kind diagnosticKind, ComponentNode componentNode, String message);","0","-","-","-","-"
"99","reportComponent","/**
   * Reports a diagnostic for a component. For non-root components, includes information about the
   * path from the root component.
   */
  @FormatMethod
  void reportComponent(
      Diagnostic.Kind diagnosticKind,
      ComponentNode componentNode,
      String messageFormat,
      Object firstArg,
      Object... moreArgs);","0","-","-","-","-"
"100","reportBinding","/**
   * Reports a diagnostic for a binding or missing binding. Includes information about how the
   * binding is reachable from entry points.
   */
  void reportBinding(Diagnostic.Kind diagnosticKind, MaybeBinding binding, String message);","0","-","-","-","-"
"101","reportBinding","/**
   * Reports a diagnostic for a binding or missing binding. Includes information about how the
   * binding is reachable from entry points.
   */
  @FormatMethod
  void reportBinding(
      Diagnostic.Kind diagnosticKind,
      MaybeBinding binding,
      String messageFormat,
      Object firstArg,
      Object... moreArgs);","0","-","-","-","-"
"102","reportDependency","/**
   * Reports a diagnostic for a dependency. Includes information about how the dependency is
   * reachable from entry points.
   */
  void reportDependency(
      Diagnostic.Kind diagnosticKind, DependencyEdge dependencyEdge, String message);","0","-","-","-","-"
"103","reportDependency","/**
   * Reports a diagnostic for a dependency. Includes information about how the dependency is
   * reachable from entry points.
   */
  @FormatMethod
  void reportDependency(
      Diagnostic.Kind diagnosticKind,
      DependencyEdge dependencyEdge,
      String messageFormat,
      Object firstArg,
      Object... moreArgs);","0","-","-","-","-"
"104","reportSubcomponentFactoryMethod","/** Reports a diagnostic for a subcomponent factory method. */
  void reportSubcomponentFactoryMethod(
      Diagnostic.Kind diagnosticKind,
      ChildFactoryMethodEdge childFactoryMethodEdge,
      String message);","0","-","-","-","-"
"105","reportSubcomponentFactoryMethod","/** Reports a diagnostic for a subcomponent factory method. */
  @FormatMethod
  void reportSubcomponentFactoryMethod(
      Diagnostic.Kind diagnosticKind,
      ChildFactoryMethodEdge childFactoryMethodEdge,
      String messageFormat,
      Object firstArg,
      Object... moreArgs);","0","-","-","-","-"
"106","visitGraph","/**
   * Called once for each valid root binding graph encountered by the Dagger processor. May report
   * diagnostics using","0","-","-","-","-"
"107","initFiler","/**
   * Initializes this plugin with a","0","-","-","-","-"
"108","initTypes","/**
   * Initializes this plugin with a","0","-","-","-","-"
"109","initElements","/**
   * Initializes this plugin with a","0","-","-","-","-"
"110","initOptions","/**
   * Initializes this plugin with a filtered view of the options passed on the","0","-","-","-","-"
"111","supportedOptions","/**
   * Returns the annotation-processing options that this plugin uses to configure behavior.
   *
   * @see javax.annotation.processing.Processor#getSupportedOptions()
   */
  default Set<String> supportedOptions()","0","-","-","-","-"
"112","pluginName","/**
   * A distinguishing name of the plugin that will be used in diagnostics printed to the","0","-","-","-","-"
"113","onPluginEnd","/**
   * Perform any extra work after the plugin finished all its visiting. This will be called once per
   * instance of this plugin, after all graphs were","0","-","-","-","-"
"114","reportComponent","/**
   * Reports a diagnostic for a component. For non-root components, includes information about the
   * path from the root component.
   */
  public abstract void reportComponent(
      Diagnostic.Kind diagnosticKind, ComponentNode componentNode, String message);","0","-","-","-","-"
"115","reportComponent","/**
   * Reports a diagnostic for a component. For non-root components, includes information about the
   * path from the root component.
   */
  @FormatMethod
  public final void reportComponent(
      Diagnostic.Kind diagnosticKind,
      ComponentNode componentNode,
      String messageFormat,
      Object firstArg,
      Object... moreArgs)","0","-","-","-","-"
"116","reportBinding","/**
   * Reports a diagnostic for a binding or missing binding. Includes information about how the
   * binding is reachable from entry points.
   */
  public abstract void reportBinding(
      Diagnostic.Kind diagnosticKind, MaybeBinding binding, String message);","0","-","-","-","-"
"117","reportBinding","/**
   * Reports a diagnostic for a binding or missing binding. Includes information about how the
   * binding is reachable from entry points.
   */
  @FormatMethod
  public final void reportBinding(
      Diagnostic.Kind diagnosticKind,
      MaybeBinding binding,
      String messageFormat,
      Object firstArg,
      Object... moreArgs)","0","-","-","-","-"
"118","reportDependency","/**
   * Reports a diagnostic for a dependency. Includes information about how the dependency is
   * reachable from entry points.
   */
  public abstract void reportDependency(
      Diagnostic.Kind diagnosticKind, DependencyEdge dependencyEdge, String message);","0","-","-","-","-"
"119","reportDependency","/**
   * Reports a diagnostic for a dependency. Includes information about how the dependency is
   * reachable from entry points.
   */
  @FormatMethod
  public final void reportDependency(
      Diagnostic.Kind diagnosticKind,
      DependencyEdge dependencyEdge,
      String messageFormat,
      Object firstArg,
      Object... moreArgs)","0","-","-","-","-"
"120","reportSubcomponentFactoryMethod","/** Reports a diagnostic for a subcomponent factory method. */
  public abstract void reportSubcomponentFactoryMethod(
      Diagnostic.Kind diagnosticKind,
      ChildFactoryMethodEdge childFactoryMethodEdge,
      String message);","0","-","-","-","-"
"121","reportSubcomponentFactoryMethod","/** Reports a diagnostic for a subcomponent factory method. */
  @FormatMethod
  public final void reportSubcomponentFactoryMethod(
      Diagnostic.Kind diagnosticKind,
      ChildFactoryMethodEdge childFactoryMethodEdge,
      String messageFormat,
      Object firstArg,
      Object... moreArgs)","0","-","-","-","-"
"122","formatMessage","private String formatMessage(String messageFormat, Object firstArg, Object[] moreArgs)","0","-","-","-","-"
"123","toStableString","/**
   * Returns a String rendering of an","0","-","-","-","-"
"124","stableAnnotationMirrorToString","/**
   * Returns a String rendering of an","0","-","-","-","-"
"125","stableAnnotationValueToString","private static String stableAnnotationValueToString(AnnotationValue annotationValue)","0","-","-","-","-"
"126","defaultAction","@Override
          protected String defaultAction(Object value, Void ignore)","0","-","-","-","-"
"127","visitString","@Override
          public String visitString(String value, Void ignore)","0","-","-","-","-"
"128","visitAnnotation","@Override
          public String visitAnnotation(AnnotationMirror value, Void ignore)","0","-","-","-","-"
"129","visitArray","@Override
          public String visitArray(List<? extends AnnotationValue> value, Void ignore)","0","-","-","-","-"
"130","MoreAnnotationMirrors","private MoreAnnotationMirrors()","0","-","-","-","-"
"131","javac","/**
   * Returns the Javac representation for the processing environment.
   *
   * @throws IllegalStateException if the current backend isn't Javac.
   */
  public abstract ProcessingEnvironment javac();","0","-","-","-","-"
"132","ksp","/**
   * Returns the KSP representation for the processing environment.
   *
   * @throws IllegalStateException if the current backend isn't KSP.
   */
  public abstract SymbolProcessorEnvironment ksp();","0","-","-","-","-"
"133","resolver","/**
   * Returns the KSP representation for the resolver.
   *
   * @throws IllegalStateException if the current backend isn't KSP.
   */
  public abstract Resolver resolver();","0","-","-","-","-"
"134","backend","/** Returns the backend used in this compilation. */
  public abstract DaggerProcessingEnv.Backend backend();","0","-","-","-","-"
"135","javac","/**
   * Returns the Javac representation for the element.
   *
   * @throws IllegalStateException if the current backend isn't Javac.
   */
  public abstract Element javac();","0","-","-","-","-"
"136","ksp","/**
   * Returns the KSP representation for the element.
   *
   * @throws IllegalStateException if the current backend isn't KSP.
   */
  public abstract KSAnnotated ksp();","0","-","-","-","-"
"137","backend","/** Returns the backend used in this compilation. */
  public abstract DaggerProcessingEnv.Backend backend();","0","-","-","-","-"
"138","network","/** Returns the graph in its","0","-","-","-","-"
"139","toString","@Override
  public String toString()","0","-","-","-","-"
"140","isModuleBindingGraph","/**
   * Returns ","0","-","-","-","-"
"141","isFullBindingGraph","/**
   * Returns","0","-","-","-","-"
"142","backend","public abstract DaggerProcessingEnv.Backend backend();","0","-","-","-","-"
"143","isPartialBindingGraph","/**
   * Returns","0","-","-","-","-"
"144","bindings","/** Returns the bindings. */
  public ImmutableSet<Binding> bindings()","0","-","-","-","-"
"145","bindings","/** Returns the bindings for a key. */
  public ImmutableSet<Binding> bindings(Key key)","0","-","-","-","-"
"146","missingBindings","/** Returns the nodes that represent missing bindings. */
  public ImmutableSet<MissingBinding> missingBindings()","0","-","-","-","-"
"147","componentNodes","/** Returns the component nodes. */
  public ImmutableSet<ComponentNode> componentNodes()","0","-","-","-","-"
"148","componentNode","/** Returns the component node for a component. */
  public Optional<ComponentNode> componentNode(ComponentPath component)","0","-","-","-","-"
"149","componentNodes","/** Returns the component nodes for a component. */
  public ImmutableSet<ComponentNode> componentNodes(DaggerTypeElement component)","0","-","-","-","-"
"150","rootComponentNode","/** Returns the component node for the root component. */
  public ComponentNode rootComponentNode()","0","-","-","-","-"
"151","dependencyEdges","/** Returns the dependency edges. */
  public ImmutableSet<DependencyEdge> dependencyEdges()","0","-","-","-","-"
"152","dependencyEdges","/**
   * Returns the dependency edges for the dependencies of a binding. For valid graphs, each","0","-","-","-","-"
"153","dependencyEdges","/** Returns the dependency edges for a dependency request. */
  public ImmutableSet<DependencyEdge> dependencyEdges(DependencyRequest dependencyRequest)","0","-","-","-","-"
"154","entryPointEdges","/**
   * Returns the dependency edges for the entry points of a given","0","-","-","-","-"
"155","dependencyEdgeStream","private Stream<DependencyEdge> dependencyEdgeStream(Node node)","0","-","-","-","-"
"156","entryPointEdges","/**
   * Returns the dependency edges for all entry points for all components and subcomponents. Each
   * edge's source node is a component node.
   */
  public ImmutableSet<DependencyEdge> entryPointEdges()","0","-","-","-","-"
"157","entryPointBindings","/** Returns the binding or missing binding nodes that directly satisfy entry points. */
  public ImmutableSet<MaybeBinding> entryPointBindings()","0","-","-","-","-"
"158","entryPointEdgesDependingOnBinding","/**
   * Returns the edges for entry points that transitively depend on a binding or missing binding for
   * a key.
   */
  public ImmutableSet<DependencyEdge> entryPointEdgesDependingOnBinding(
      MaybeBinding binding)","0","-","-","-","-"
"159","requestingBindings","/** Returns the bindings that directly request a given binding as a dependency. */
  public ImmutableSet<Binding> requestingBindings(MaybeBinding binding)","0","-","-","-","-"
"160","requestedBindings","/**
   * Returns the bindings that a given binding directly requests as a dependency. Does not include
   * any","0","-","-","-","-"
"161","requestedMaybeMissingBindings","/**
   * Returns the bindings or missing bindings that a given binding directly requests as a
   * dependency.
   *
   * @see #requestedBindings(Binding)
   */
  public ImmutableSet<MaybeBinding> requestedMaybeMissingBindings(Binding binding)","0","-","-","-","-"
"162","dependencyGraph","/** Returns a subnetwork that contains all nodes but only","0","-","-","-","-"
"163","nodes","@SuppressWarnings(","0","-","-","-","-"
"164","nodesByClass","protected ImmutableSetMultimap<Class<? extends Node>, ? extends Node> nodesByClass()","0","-","-","-","-"
"165","dependencyEdgeStream","private Stream<DependencyEdge> dependencyEdgeStream()","0","-","-","-","-"
"166","entryPointEdgeStream","private Stream<DependencyEdge> entryPointEdgeStream()","0","-","-","-","-"
"167","dependencyRequest","/** The dependency request. */
    DependencyRequest dependencyRequest();","0","-","-","-","-"
"168","isEntryPoint","/** Returns","0","-","-","-","-"
"169","factoryMethod","/** The subcomponent factory method element. */
    DaggerExecutableElement factoryMethod();","0","-","-","-","-"
"170","declaringModules","/**
     * The modules that","0","-","-","-","-"
"171","componentPath","/** The component this node belongs to. */
    ComponentPath componentPath();","0","-","-","-","-"
"172","componentPath","/** The component that owns the binding, or in which the binding is missing. */
    @Override
    ComponentPath componentPath();","0","-","-","-","-"
"173","key","/** The key of the binding, or for which there is no binding. */
    Key key();","0","-","-","-","-"
"174","binding","/** The binding, or empty if missing. */
    Optional<Binding> binding();","0","-","-","-","-"
"175","componentPath","/** The component in which the binding is missing. */
    @Override
    public abstract ComponentPath componentPath();","0","-","-","-","-"
"176","key","/** The key for which there is no binding. */
    @Override
    public abstract Key key();","0","-","-","-","-"
"177","binding","/** @deprecated This always returns","0","-","-","-","-"
"178","toString","@Override
    public String toString()","0","-","-","-","-"
"179","componentPath","/** The component represented by this node. */
    @Override
    ComponentPath componentPath();","0","-","-","-","-"
"180","isSubcomponent","/**
     * Returns","0","-","-","-","-"
"181","isRealComponent","/**
     * Returns","0","-","-","-","-"
"182","entryPoints","/** The entry points on this component. */
    ImmutableSet<DependencyRequest> entryPoints();","0","-","-","-","-"
"183","scopes","/** The scopes declared on this component. */
    ImmutableSet<Scope> scopes();","0","-","-","-","-"
"184","javac","/**
   * Returns the Javac representation for the type.
   *
   * @throws IllegalStateException if the current backend isn't Javac.
   */
  public abstract TypeMirror javac();","0","-","-","-","-"
"185","ksp","/**
   * Returns the KSP representation for the type.
   *
   * @throws IllegalStateException if the current backend isn't KSP.
   */
  public abstract KSType ksp();","0","-","-","-","-"
"186","backend","/** Returns the backend used in this compilation. */
  public abstract DaggerProcessingEnv.Backend backend();","0","-","-","-","-"
"187","visitGraph","/**
   * Called once for each valid root binding graph encountered by the Dagger processor. May report
   * diagnostics using","0","-","-","-","-"
"188","init","/**
   * Initializes this plugin with a","0","-","-","-","-"
"189","supportedOptions","/**
   * Returns the annotation-processing options that this plugin uses to configure behavior.
   *
   * @see javax.annotation.processing.Processor#getSupportedOptions()
   */
  default Set<String> supportedOptions()","0","-","-","-","-"
"190","pluginName","/**
   * A distinguishing name of the plugin that will be used in diagnostics printed to the messager.
   * By default, the","0","-","-","-","-"
"191","onProcessingRoundBegin","/**
   * Runs before each round of Dagger annotation processing.
   *
   * <p>If using the plugin to process elements that need resetting at the beginning of each
   * processing round, use this function to perform the setup.
   */
  default void onProcessingRoundBegin()","0","-","-","-","-"
"192","onPluginEnd","/**
   * Perform any extra work after the plugin finished all its visiting. This will be called once per
   * instance of this plugin, after all graphs were","0","-","-","-","-"
"193","javac","/**
   * Returns the Javac representation for the type element.
   *
   * @throws IllegalStateException if the current backend isn't Javac.
   */
  public abstract TypeElement javac();","0","-","-","-","-"
"194","ksp","/**
   * Returns the KSP representation for the type element.
   *
   * @throws IllegalStateException if the current backend isn't KSP.
   */
  public abstract KSClassDeclaration ksp();","0","-","-","-","-"
"195","backend","/** Returns the backend used in this compilation. */
  public abstract DaggerProcessingEnv.Backend backend();","0","-","-","-","-"
"196","create","/** Returns a new","0","-","-","-","-"
"197","components","/**
   * Returns the component types, starting from the","0","-","-","-","-"
"198","rootComponent","/**
   * Returns the root","0","-","-","-","-"
"199","currentComponent","/** Returns the component at the end of the path. */
  @Memoized
  public DaggerTypeElement currentComponent()","0","-","-","-","-"
"200","parentComponent","/**
   * Returns the parent of the","0","-","-","-","-"
"201","parent","/**
   * Returns this path's parent path.
   *
   * @throws IllegalStateException if the current graph is the","0","-","-","-","-"
"202","childPath","/** Returns the path from the root component to the","0","-","-","-","-"
"203","atRoot","/**
   * Returns","0","-","-","-","-"
"204","toString","@Override
  public final String toString()","0","-","-","-","-"
"205","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"206","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"207","scope","/**
   * Creates a","0","-","-","-","-"
"208","isScope","/**
   * Returns","0","-","-","-","-"
"209","isScope","/**
   * Returns","0","-","-","-","-"
"210","isScope","private boolean isScope(String annotationName)","0","-","-","-","-"
"211","scopeAnnotation","/** The","0","-","-","-","-"
"212","isSingleton","/** Returns","0","-","-","-","-"
"213","isReusable","/** Returns","0","-","-","-","-"
"214","isProductionScope","/**
   * Returns","0","-","-","-","-"
"215","toString","/** Returns a debug representation of the scope. */
  @Override
  public final String toString()","0","-","-","-","-"
"216","qualifier","/**
   * A","0","-","-","-","-"
"217","type","/** The type represented by this key. */
  public abstract DaggerType type();","0","-","-","-","-"
"218","multibindingContributionIdentifier","/**
   * Distinguishes keys for multibinding contributions that share a","0","-","-","-","-"
"219","toBuilder","/** Returns a","0","-","-","-","-"
"220","withType","/** Returns a copy of this key with the type replaced with the given type. */
  public Key withType(DaggerType newType)","0","-","-","-","-"
"221","withMultibindingContributionIdentifier","/**
   * Returns a copy of this key with the multibinding contribution identifier replaced with the
   * given multibinding contribution identifier.
   */
  public Key withMultibindingContributionIdentifier(
      DaggerTypeElement contributingModule, DaggerExecutableElement bindingMethod)","0","-","-","-","-"
"222","withoutMultibindingContributionIdentifier","/** Returns a copy of this key with the multibinding contribution identifier, if any, removed. */
  public Key withoutMultibindingContributionIdentifier()","0","-","-","-","-"
"223","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"224","equals","@Override
  public abstract boolean equals(Object o);","0","-","-","-","-"
"225","toString","@Override
  public final String toString()","0","-","-","-","-"
"226","builder","/** Returns a builder for","0","-","-","-","-"
"227","type","public abstract Builder type(DaggerType type);","0","-","-","-","-"
"228","qualifier","public abstract Builder qualifier(Optional<DaggerAnnotation> qualifier);","0","-","-","-","-"
"229","qualifier","public abstract Builder qualifier(DaggerAnnotation qualifier);","0","-","-","-","-"
"230","multibindingContributionIdentifier","public final Builder multibindingContributionIdentifier(
        DaggerTypeElement contributingModule, DaggerExecutableElement bindingMethod)","0","-","-","-","-"
"231","multibindingContributionIdentifier","abstract Builder multibindingContributionIdentifier(
        Optional<MultibindingContributionIdentifier> identifier);","0","-","-","-","-"
"232","build","public abstract Key build();","0","-","-","-","-"
"233","create","private static MultibindingContributionIdentifier create(
        DaggerTypeElement contributingModule, DaggerExecutableElement bindingMethod)","0","-","-","-","-"
"234","contributingModule","/** Returns the module containing the multibinding method. */
    public abstract String contributingModule();","0","-","-","-","-"
"235","bindingMethod","/** Returns the multibinding method that defines teh multibinding contribution. */
    public abstract String bindingMethod();","0","-","-","-","-"
"236","toString","/**
     *","0","-","-","-","-"
"237","qualifiedName","static String qualifiedName(DaggerTypeElement element)","0","-","-","-","-"
"238","simpleName","private static String simpleName(DaggerExecutableElement element)","0","-","-","-","-"
"239","kind","/** The kind of this request. */
  public abstract RequestKind kind();","0","-","-","-","-"
"240","key","/** The key of this request. */
  public abstract Key key();","0","-","-","-","-"
"241","requestElement","/**
   * The element that declares this dependency request. Absent for <a href=""#synthetic"">synthetic
   * </a> requests.
   */
  public abstract Optional<DaggerElement> requestElement();","0","-","-","-","-"
"242","isNullable","/**
   * Returns","0","-","-","-","-"
"243","builder","/** Returns a new builder of dependency requests. */
  public static DependencyRequest.Builder builder()","0","-","-","-","-"
"244","kind","public abstract Builder kind(RequestKind kind);","0","-","-","-","-"
"245","key","public abstract Builder key(Key key);","0","-","-","-","-"
"246","requestElement","public abstract Builder requestElement(DaggerElement element);","0","-","-","-","-"
"247","isNullable","public abstract Builder isNullable(boolean isNullable);","0","-","-","-","-"
"248","build","public abstract DependencyRequest build();","0","-","-","-","-"
"249","annotationTypeElement","public abstract DaggerTypeElement annotationTypeElement();","0","-","-","-","-"
"250","javac","/**
   * Returns the Javac representation for the annotation.
   *
   * @throws IllegalStateException if the current backend isn't Javac.
   */
  public abstract AnnotationMirror javac();","0","-","-","-","-"
"251","ksp","/**
   * Returns the KSP representation for the annotation.
   *
   * @throws IllegalStateException if the current backend isn't KSP.
   */
  public abstract KSAnnotation ksp();","0","-","-","-","-"
"252","backend","/** Returns the backend used in this compilation. */
  public abstract DaggerProcessingEnv.Backend backend();","0","-","-","-","-"
"253","componentPath","@Override
  ComponentPath componentPath();","0","-","-","-","-"
"254","binding","/** @deprecated This always returns","0","-","-","-","-"
"255","dependencies","/**
   * The dependencies of this binding. The order of the dependencies corresponds to the order in
   * which they will be injected when the binding is requested.
   */
  ImmutableSet<DependencyRequest> dependencies();","0","-","-","-","-"
"256","bindingElement","/**
   * The","0","-","-","-","-"
"257","contributingModule","/**
   * The","0","-","-","-","-"
"258","requiresModuleInstance","/**
   * Returns","0","-","-","-","-"
"259","scope","/** The scope of this binding if it has one. */
  Optional<Scope> scope();","0","-","-","-","-"
"260","isNullable","/**
   * Returns","0","-","-","-","-"
"261","isProduction","/** Returns","0","-","-","-","-"
"262","kind","/** The kind of binding this instance represents. */
  BindingKind kind();","0","-","-","-","-"
"263","javac","/**
   * Returns the Javac representation for the executable element.
   *
   * @throws IllegalStateException if the current backend isn't Javac.
   */
  public abstract ExecutableElement javac();","0","-","-","-","-"
"264","ksp","/**
   * Returns the KSP representation for the executable element. Can be either KSFunctionDeclaration
   * or KSPropertyDeclaration.
   *
   * @throws IllegalStateException if the current backend isn't KSP.
   */
  public abstract KSDeclaration ksp();","0","-","-","-","-"
"265","backend","/** Returns the backend used in this compilation. */
  public abstract DaggerProcessingEnv.Backend backend();","0","-","-","-","-"
"266","network","/** Returns the graph in its","0","-","-","-","-"
"267","toString","@Override
  public String toString()","0","-","-","-","-"
"268","isModuleBindingGraph","/**
   * Returns ","0","-","-","-","-"
"269","isFullBindingGraph","/**
   * Returns","0","-","-","-","-"
"270","isPartialBindingGraph","/**
   * Returns","0","-","-","-","-"
"271","bindings","/** Returns the bindings. */
  public ImmutableSet<Binding> bindings()","0","-","-","-","-"
"272","bindings","/** Returns the bindings for a key. */
  public ImmutableSet<Binding> bindings(Key key)","0","-","-","-","-"
"273","missingBindings","/** Returns the nodes that represent missing bindings. */
  public ImmutableSet<MissingBinding> missingBindings()","0","-","-","-","-"
"274","componentNodes","/** Returns the component nodes. */
  public ImmutableSet<ComponentNode> componentNodes()","0","-","-","-","-"
"275","componentNode","/** Returns the component node for a component. */
  public Optional<ComponentNode> componentNode(ComponentPath component)","0","-","-","-","-"
"276","componentNodes","/** Returns the component nodes for a component. */
  public ImmutableSet<ComponentNode> componentNodes(TypeElement component)","0","-","-","-","-"
"277","rootComponentNode","/** Returns the component node for the root component. */
  public ComponentNode rootComponentNode()","0","-","-","-","-"
"278","dependencyEdges","/** Returns the dependency edges. */
  public ImmutableSet<DependencyEdge> dependencyEdges()","0","-","-","-","-"
"279","dependencyEdges","/**
   * Returns the dependency edges for the dependencies of a binding. For valid graphs, each","0","-","-","-","-"
"280","dependencyEdges","/** Returns the dependency edges for a dependency request. */
  public ImmutableSet<DependencyEdge> dependencyEdges(DependencyRequest dependencyRequest)","0","-","-","-","-"
"281","entryPointEdges","/**
   * Returns the dependency edges for the entry points of a given","0","-","-","-","-"
"282","dependencyEdgeStream","private Stream<DependencyEdge> dependencyEdgeStream(Node node)","0","-","-","-","-"
"283","entryPointEdges","/**
   * Returns the dependency edges for all entry points for all components and subcomponents. Each
   * edge's source node is a component node.
   */
  public ImmutableSet<DependencyEdge> entryPointEdges()","0","-","-","-","-"
"284","entryPointBindings","/** Returns the binding or missing binding nodes that directly satisfy entry points. */
  public ImmutableSet<MaybeBinding> entryPointBindings()","0","-","-","-","-"
"285","entryPointEdgesDependingOnBinding","/**
   * Returns the edges for entry points that transitively depend on a binding or missing binding for
   * a key.
   */
  public ImmutableSet<DependencyEdge> entryPointEdgesDependingOnBinding(
      MaybeBinding binding)","0","-","-","-","-"
"286","requestingBindings","/** Returns the bindings that directly request a given binding as a dependency. */
  public ImmutableSet<Binding> requestingBindings(MaybeBinding binding)","0","-","-","-","-"
"287","requestedBindings","/**
   * Returns the bindings that a given binding directly requests as a dependency. Does not include
   * any","0","-","-","-","-"
"288","requestedMaybeMissingBindings","/**
   * Returns the bindings or missing bindings that a given binding directly requests as a
   * dependency.
   *
   * @see #requestedBindings(Binding)
   */
  public ImmutableSet<MaybeBinding> requestedMaybeMissingBindings(Binding binding)","0","-","-","-","-"
"289","dependencyGraph","/** Returns a subnetwork that contains all nodes but only","0","-","-","-","-"
"290","nodes","@SuppressWarnings(","0","-","-","-","-"
"291","nodesByClass","protected ImmutableSetMultimap<Class<? extends Node>, ? extends Node> nodesByClass()","0","-","-","-","-"
"292","dependencyEdgeStream","private Stream<DependencyEdge> dependencyEdgeStream()","0","-","-","-","-"
"293","entryPointEdgeStream","private Stream<DependencyEdge> entryPointEdgeStream()","0","-","-","-","-"
"294","dependencyRequest","/** The dependency request. */
    DependencyRequest dependencyRequest();","0","-","-","-","-"
"295","isEntryPoint","/** Returns","0","-","-","-","-"
"296","factoryMethod","/** The subcomponent factory method element. */
    ExecutableElement factoryMethod();","0","-","-","-","-"
"297","declaringModules","/**
     * The modules that","0","-","-","-","-"
"298","componentPath","/** The component this node belongs to. */
    ComponentPath componentPath();","0","-","-","-","-"
"299","componentPath","/** The component that owns the binding, or in which the binding is missing. */
    @Override
    ComponentPath componentPath();","0","-","-","-","-"
"300","key","/** The key of the binding, or for which there is no binding. */
    Key key();","0","-","-","-","-"
"301","binding","/** The binding, or empty if missing. */
    Optional<Binding> binding();","0","-","-","-","-"
"302","componentPath","/** The component in which the binding is missing. */
    @Override
    public abstract ComponentPath componentPath();","0","-","-","-","-"
"303","key","/** The key for which there is no binding. */
    @Override
    public abstract Key key();","0","-","-","-","-"
"304","binding","/** @deprecated This always returns","0","-","-","-","-"
"305","toString","@Override
    public String toString()","0","-","-","-","-"
"306","componentPath","/** The component represented by this node. */
    @Override
    ComponentPath componentPath();","0","-","-","-","-"
"307","isSubcomponent","/**
     * Returns","0","-","-","-","-"
"308","isRealComponent","/**
     * Returns","0","-","-","-","-"
"309","entryPoints","/** The entry points on this component. */
    ImmutableSet<DependencyRequest> entryPoints();","0","-","-","-","-"
"310","scopes","/** The scopes declared on this component. */
    ImmutableSet<Scope> scopes();","0","-","-","-","-"
"311","create","/** Returns a new","0","-","-","-","-"
"312","components","/**
   * Returns the component types, starting from the","0","-","-","-","-"
"313","rootComponent","/**
   * Returns the root","0","-","-","-","-"
"314","currentComponent","/** Returns the component at the end of the path. */
  @Memoized
  public TypeElement currentComponent()","0","-","-","-","-"
"315","parentComponent","/**
   * Returns the parent of the","0","-","-","-","-"
"316","parent","/**
   * Returns this path's parent path.
   *
   * @throws IllegalStateException if the current graph is the","0","-","-","-","-"
"317","childPath","/** Returns the path from the root component to the","0","-","-","-","-"
"318","atRoot","/**
   * Returns","0","-","-","-","-"
"319","toString","@Override
  public final String toString()","0","-","-","-","-"
"320","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"321","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"322","wrappedScopeAnnotation","abstract Equivalence.Wrapper<AnnotationMirror> wrappedScopeAnnotation();","0","-","-","-","-"
"323","scopeAnnotation","/** The","0","-","-","-","-"
"324","scopeAnnotationElement","/** The scope annotation element. */
  public final TypeElement scopeAnnotationElement()","0","-","-","-","-"
"325","scope","/**
   * Creates a","0","-","-","-","-"
"326","isScope","/**
   * Returns","0","-","-","-","-"
"327","isScope","/**
   * Returns","0","-","-","-","-"
"328","isSingleton","/** Returns","0","-","-","-","-"
"329","isReusable","/** Returns","0","-","-","-","-"
"330","isProductionScope","/** Returns","0","-","-","-","-"
"331","isScope","private boolean isScope(ClassName className)","0","-","-","-","-"
"332","toString","/** Returns a debug representation of the scope. */
  @Override
  public final String toString()","0","-","-","-","-"
"333","qualifier","/**
   * A","0","-","-","-","-"
"334","type","/**
   * The type represented by this key.
   */
  public final TypeMirror type()","0","-","-","-","-"
"335","wrappedQualifier","/**
   * A","0","-","-","-","-"
"336","wrappedType","/**
   * The type represented by this key.
   *
   * As documented in","0","-","-","-","-"
"337","multibindingContributionIdentifier","/**
   * Distinguishes keys for multibinding contributions that share a","0","-","-","-","-"
"338","toBuilder","/** Returns a","0","-","-","-","-"
"339","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"340","equals","@Override
  public abstract boolean equals(Object o);","0","-","-","-","-"
"341","stableAnnotationMirrorToString","/**
   * Returns a String rendering of an","0","-","-","-","-"
"342","stableAnnotationValueToString","private static String stableAnnotationValueToString(AnnotationValue annotationValue)","0","-","-","-","-"
"343","defaultAction","@Override
          protected String defaultAction(Object value, Void ignore)","0","-","-","-","-"
"344","visitString","@Override
          public String visitString(String value, Void ignore)","0","-","-","-","-"
"345","visitAnnotation","@Override
          public String visitAnnotation(AnnotationMirror value, Void ignore)","0","-","-","-","-"
"346","visitArray","@Override
          public String visitArray(List<? extends AnnotationValue> value, Void ignore)","0","-","-","-","-"
"347","toString","@Override
  public final String toString()","0","-","-","-","-"
"348","builder","/** Returns a builder for","0","-","-","-","-"
"349","wrappedType","abstract Builder wrappedType(Equivalence.Wrapper<TypeMirror> wrappedType);","0","-","-","-","-"
"350","type","@CanIgnoreReturnValue
    public final Builder type(TypeMirror type)","0","-","-","-","-"
"351","wrappedQualifier","abstract Builder wrappedQualifier(
        Optional<Equivalence.Wrapper<AnnotationMirror>> wrappedQualifier);","0","-","-","-","-"
"352","wrappedQualifier","abstract Builder wrappedQualifier(Equivalence.Wrapper<AnnotationMirror> wrappedQualifier);","0","-","-","-","-"
"353","qualifier","@CanIgnoreReturnValue
    public final Builder qualifier(AnnotationMirror qualifier)","0","-","-","-","-"
"354","qualifier","@CanIgnoreReturnValue
    public final Builder qualifier(Optional<AnnotationMirror> qualifier)","0","-","-","-","-"
"355","multibindingContributionIdentifier","public abstract Builder multibindingContributionIdentifier(
        Optional<MultibindingContributionIdentifier> identifier);","0","-","-","-","-"
"356","multibindingContributionIdentifier","public abstract Builder multibindingContributionIdentifier(
        MultibindingContributionIdentifier identifier);","0","-","-","-","-"
"357","build","public abstract Key build();","0","-","-","-","-"
"358","MultibindingContributionIdentifier","/**
     * @deprecated This is only meant to be called from code in","0","-","-","-","-"
"359","MultibindingContributionIdentifier","@Deprecated
    public MultibindingContributionIdentifier(String bindingElement, String module)","0","-","-","-","-"
"360","module","/**
     * @deprecated This is only meant to be called from code in","0","-","-","-","-"
"361","bindingElement","/**
     * @deprecated This is only meant to be called from code in","0","-","-","-","-"
"362","toString","/**
     *","0","-","-","-","-"
"363","equals","@Override
    public boolean equals(Object obj)","0","-","-","-","-"
"364","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"365","kind","/** The kind of this request. */
  public abstract RequestKind kind();","0","-","-","-","-"
"366","key","/** The key of this request. */
  public abstract Key key();","0","-","-","-","-"
"367","requestElement","/**
   * The element that declares this dependency request. Absent for <a href=""#synthetic"">synthetic
   * </a> requests.
   */
  public abstract Optional<Element> requestElement();","0","-","-","-","-"
"368","isNullable","/**
   * Returns","0","-","-","-","-"
"369","builder","/** Returns a new builder of dependency requests. */
  public static DependencyRequest.Builder builder()","0","-","-","-","-"
"370","kind","public abstract Builder kind(RequestKind kind);","0","-","-","-","-"
"371","key","public abstract Builder key(Key key);","0","-","-","-","-"
"372","requestElement","@CanIgnoreReturnValue // TODO(kak): remove this once open-source checkers understand AutoValue
    public abstract Builder requestElement(Element element);","0","-","-","-","-"
"373","isNullable","public abstract Builder isNullable(boolean isNullable);","0","-","-","-","-"
"374","build","public abstract DependencyRequest build();","0","-","-","-","-"
"375","componentPath","@Override
  ComponentPath componentPath();","0","-","-","-","-"
"376","binding","/** @deprecated This always returns","0","-","-","-","-"
"377","dependencies","/**
   * The dependencies of this binding. The order of the dependencies corresponds to the order in
   * which they will be injected when the binding is requested.
   */
  ImmutableSet<DependencyRequest> dependencies();","0","-","-","-","-"
"378","bindingElement","/**
   * The","0","-","-","-","-"
"379","contributingModule","/**
   * The","0","-","-","-","-"
"380","requiresModuleInstance","/**
   * Returns","0","-","-","-","-"
"381","scope","/** The scope of this binding if it has one. */
  Optional<Scope> scope();","0","-","-","-","-"
"382","isNullable","/**
   * Returns","0","-","-","-","-"
"383","isProduction","/** Returns","0","-","-","-","-"
"384","kind","/** The kind of binding this instance represents. */
  BindingKind kind();","0","-","-","-","-"
"385","HiltProcessingEnvConfigs","private HiltProcessingEnvConfigs()","0","-","-","-","-"
"386","BaseProcessingStep","public BaseProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"387","processingEnv","protected final XProcessingEnv processingEnv()","0","-","-","-","-"
"388","annotations","@Override
  public final ImmutableSet<String> annotations()","0","-","-","-","-"
"389","annotationClassNames","protected ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"390","processEach","protected void processEach(ClassName annotation, XElement element) throws Exception","0","-","-","-","-"
"391","preProcess","protected void preProcess(XProcessingEnv env, XRoundEnv round)","0","-","-","-","-"
"392","postProcess","protected void postProcess(XProcessingEnv env, XRoundEnv round) throws Exception","0","-","-","-","-"
"393","preRoundProcess","public final void preRoundProcess(XProcessingEnv env, XRoundEnv round)","0","-","-","-","-"
"394","postRoundProcess","public final void postRoundProcess(XProcessingEnv env, XRoundEnv round)","0","-","-","-","-"
"395","process","@Override
  public final ImmutableSet<XElement> process(
      XProcessingEnv env,
      Map<String, ? extends Set<? extends XElement>> elementsByAnnotation,
      boolean isLastRound)","0","-","-","-","-"
"396","builder","public static Builder builder()","0","-","-","-","-"
"397","component","/** Returns the","0","-","-","-","-"
"398","scopes","/** Returns the","0","-","-","-","-"
"399","creator","/** Returns the","0","-","-","-","-"
"400","parent","/** Returns the","0","-","-","-","-"
"401","isRoot","/** Returns","0","-","-","-","-"
"402","equals","/**
   * Returns","0","-","-","-","-"
"403","hashCode","@Override
  public final int hashCode()","0","-","-","-","-"
"404","component","Builder component(ClassName component);","0","-","-","-","-"
"405","scopes","Builder scopes(ImmutableSet<ClassName> scopes);","0","-","-","-","-"
"406","scopes","Builder scopes(ClassName... scopes);","0","-","-","-","-"
"407","creator","Builder creator(ClassName creator);","0","-","-","-","-"
"408","parent","Builder parent(ComponentDescriptor parent);","0","-","-","-","-"
"409","build","ComponentDescriptor build();","0","-","-","-","-"
"410","KspUninstallModulesProcessor","public KspUninstallModulesProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"411","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"412","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"413","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"414","AggregatedUninstallModulesGenerator","AggregatedUninstallModulesGenerator(
      XTypeElement testElement,
      ImmutableList<XTypeElement> uninstallModuleElements)","0","-","-","-","-"
"415","generate","void generate()","0","-","-","-","-"
"416","aggregatedUninstallModulesAnnotation","private AnnotationSpec aggregatedUninstallModulesAnnotation()","0","-","-","-","-"
"417","UninstallModulesProcessingStep","public UninstallModulesProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"418","annotationClassNames","@Override
  protected ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"419","processEach","@Override
  public void processEach(ClassName annotation, XElement element)","0","-","-","-","-"
"420","checkModulesHaveInstallIn","private void checkModulesHaveInstallIn(
      XTypeElement testElement, ImmutableList<XTypeElement> uninstallModules)","0","-","-","-","-"
"421","checkModulesDontOriginateFromTest","private void checkModulesDontOriginateFromTest(
      XTypeElement testElement, ImmutableList<XTypeElement> uninstallModules)","0","-","-","-","-"
"422","aggregatingElement","/** Returns the aggregating element */
  public abstract XTypeElement aggregatingElement();","0","-","-","-","-"
"423","testElement","/** Returns the test annotated with","0","-","-","-","-"
"424","uninstallModuleElements","/**
   * Returns the list of uninstall modules in","0","-","-","-","-"
"425","from","/** Returns metadata for all aggregated elements in the aggregating package. */
  public static ImmutableSet<AggregatedUninstallModulesMetadata> from(XProcessingEnv env)","0","-","-","-","-"
"426","from","/** Returns metadata for each aggregated element. */
  public static ImmutableSet<AggregatedUninstallModulesMetadata> from(
      ImmutableSet<XTypeElement> aggregatedElements)","0","-","-","-","-"
"427","toIr","public static AggregatedUninstallModulesIr toIr(AggregatedUninstallModulesMetadata metadata)","0","-","-","-","-"
"428","create","private static AggregatedUninstallModulesMetadata create(
      XTypeElement element, XProcessingEnv env)","0","-","-","-","-"
"429","KspOriginatingElementProcessor","private KspOriginatingElementProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"430","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"431","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"432","OriginatingElementProcessingStep","public OriginatingElementProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"433","annotationClassNames","@Override
  protected ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"434","processEach","@Override
  public void processEach(ClassName annotation, XElement element)","0","-","-","-","-"
"435","processingStep","@Override
  public OriginatingElementProcessingStep processingStep()","0","-","-","-","-"
"436","GeneratesRootInputProcessingStep","public GeneratesRootInputProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"437","annotationClassNames","@Override
  protected ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"438","processEach","@Override
  public void processEach(ClassName annotation, XElement element)","0","-","-","-","-"
"439","GeneratesRootInputs","public GeneratesRootInputs(XProcessingEnv processingEnvironment)","0","-","-","-","-"
"440","getElementsToWaitFor","public ImmutableSet<XElement> getElementsToWaitFor(XRoundEnv roundEnv)","0","-","-","-","-"
"441","getAnnotationList","private ImmutableList<ClassName> getAnnotationList()","0","-","-","-","-"
"442","KspGeneratesRootInputProcessor","public KspGeneratesRootInputProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"443","processingStep","@Override
  protected GeneratesRootInputProcessingStep processingStep()","0","-","-","-","-"
"444","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"445","processingStep","@Override
  public GeneratesRootInputProcessingStep processingStep()","0","-","-","-","-"
"446","GeneratesRootInputPropagatedDataGenerator","GeneratesRootInputPropagatedDataGenerator(XProcessingEnv processingEnv, XTypeElement element)","0","-","-","-","-"
"447","generate","void generate()","0","-","-","-","-"
"448","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"449","DefineComponentProcessingStep","public DefineComponentProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"450","preProcess","@Override
  public void preProcess(XProcessingEnv env, XRoundEnv round)","0","-","-","-","-"
"451","postProcess","@Override
  public void postProcess(XProcessingEnv env, XRoundEnv round)","0","-","-","-","-"
"452","annotationClassNames","@Override
  protected ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"453","processEach","@Override
  public void processEach(ClassName annotation, XElement element)","0","-","-","-","-"
"454","generateFile","private void generateFile(String member, XTypeElement typeElement)","0","-","-","-","-"
"455","create","static DefineComponentBuilderMetadatas create(DefineComponentMetadatas componentMetadatas)","0","-","-","-","-"
"456","DefineComponentBuilderMetadatas","private DefineComponentBuilderMetadatas(DefineComponentMetadatas componentMetadatas)","0","-","-","-","-"
"457","get","DefineComponentBuilderMetadata get(XElement element)","0","-","-","-","-"
"458","getUncached","private DefineComponentBuilderMetadata getUncached(XElement element)","0","-","-","-","-"
"459","builder","abstract XTypeElement builder();","0","-","-","-","-"
"460","buildMethod","abstract XMethodElement buildMethod();","0","-","-","-","-"
"461","componentMetadata","abstract DefineComponentMetadata componentMetadata();","0","-","-","-","-"
"462","create","static DefineComponentMetadatas create()","0","-","-","-","-"
"463","DefineComponentMetadatas","private DefineComponentMetadatas()","0","-","-","-","-"
"464","get","/** Returns the metadata for an element annotated with","0","-","-","-","-"
"465","get","private DefineComponentMetadata get(XElement element, LinkedHashSet<XElement> childPath)","0","-","-","-","-"
"466","getUncached","private DefineComponentMetadata getUncached(
      XElement element, LinkedHashSet<XElement> childPath)","0","-","-","-","-"
"467","component","/** Returns the component annotated with","0","-","-","-","-"
"468","scopes","/** Returns the scopes of the component. */
    abstract ImmutableList<XTypeElement> scopes();","0","-","-","-","-"
"469","parentMetadata","/** Returns the parent component, if one exists. */
    abstract Optional<DefineComponentMetadata> parentMetadata();","0","-","-","-","-"
"470","isRoot","boolean isRoot()","0","-","-","-","-"
"471","KspDefineComponentProcessor","public KspDefineComponentProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"472","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"473","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"474","aggregatingElement","/** Returns the aggregating element */
  public abstract XTypeElement aggregatingElement();","0","-","-","-","-"
"475","element","/**
   * Returns the element annotated with","0","-","-","-","-"
"476","isComponent","/** Returns","0","-","-","-","-"
"477","isComponentBuilder","/** Returns","0","-","-","-","-"
"478","from","/** Returns metadata for all aggregated elements in the aggregating package. */
  public static ImmutableSet<DefineComponentClassesMetadata> from(XProcessingEnv env)","0","-","-","-","-"
"479","from","/** Returns metadata for each aggregated element. */
  public static ImmutableSet<DefineComponentClassesMetadata> from(
      ImmutableSet<XTypeElement> aggregatedElements)","0","-","-","-","-"
"480","create","private static DefineComponentClassesMetadata create(XTypeElement element)","0","-","-","-","-"
"481","toIr","public static DefineComponentClassesIr toIr(DefineComponentClassesMetadata metadata)","0","-","-","-","-"
"482","create","public static DefineComponents create()","0","-","-","-","-"
"483","DefineComponents","private DefineComponents()","0","-","-","-","-"
"484","getComponentDescriptors","/** Returns the set of aggregated","0","-","-","-","-"
"485","toComponentDescriptor","private static ComponentDescriptor toComponentDescriptor(
      DefineComponentMetadata componentMetadata,
      Map<DefineComponentMetadata, DefineComponentBuilderMetadata> builderMap)","0","-","-","-","-"
"486","KspBaseProcessingStepProcessor","public KspBaseProcessingStepProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"487","initialize","@Override
  public void initialize(XProcessingEnv env)","0","-","-","-","-"
"488","processingStep","protected abstract BaseProcessingStep processingStep();","0","-","-","-","-"
"489","preRound","@Override
  public void preRound(XProcessingEnv env, XRoundEnv round)","0","-","-","-","-"
"490","processingSteps","@Override
  public final ImmutableList<XProcessingStep> processingSteps()","0","-","-","-","-"
"491","postRound","@Override
  public void postRound(XProcessingEnv env, XRoundEnv round)","0","-","-","-","-"
"492","withoutRenaming","/**
   * Returns an instance of","0","-","-","-","-"
"493","withRenaming","/**
   * Returns an instance of","0","-","-","-","-"
"494","ComponentNames","private ComponentNames(Function<ClassName, ClassName> rootRenamer)","0","-","-","-","-"
"495","generatedComponentTreeDeps","public ClassName generatedComponentTreeDeps(ClassName root)","0","-","-","-","-"
"496","generatedComponentsWrapper","/** Returns the name of the generated component wrapper. */
  public ClassName generatedComponentsWrapper(ClassName root)","0","-","-","-","-"
"497","generatedComponent","/** Returns the name of the generated component. */
  public ClassName generatedComponent(ClassName root, ClassName component)","0","-","-","-","-"
"498","componentName","/**
   * Returns the shortened component name by replacing the ending ""Component"" with ""C"" if it exists.
   *
   * <p>This is a hack because nested subcomponents in Dagger generate extremely long class names
   * that hit the 256 character limit.
   */
  // TODO(bcorso): See if this issue can be fixed in Dagger, e.g. by using static subcomponents.
  private static String componentName(ClassName component)","0","-","-","-","-"
"499","MethodSignature","MethodSignature()","0","-","-","-","-"
"500","name","abstract String name();","0","-","-","-","-"
"501","parameters","abstract ImmutableList<TypeName> parameters();","0","-","-","-","-"
"502","of","/** Creates a","0","-","-","-","-"
"503","of","/** Creates a","0","-","-","-","-"
"504","of","/** Creates a","0","-","-","-","-"
"505","ofDeclaredType","/**
   * Creates a","0","-","-","-","-"
"506","toString","/** Returns a string in the format: METHOD_NAME(PARAM_TYPE1,PARAM_TYPE2,...) */
  @Override
  public final String toString()","0","-","-","-","-"
"507","ErrorTypeException","public ErrorTypeException(String message, XElement badElement)","0","-","-","-","-"
"508","getBadElement","public XElement getBadElement()","0","-","-","-","-"
"509","JavacBaseProcessingStepProcessor","public JavacBaseProcessingStepProcessor()","0","-","-","-","-"
"510","initialize","@Override
  public void initialize(XProcessingEnv env)","0","-","-","-","-"
"511","getSupportedSourceVersion","@Override
  public final SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"512","getSupportedOptions","@Override
  public final ImmutableSet<String> getSupportedOptions()","0","-","-","-","-"
"513","processingSteps","@Override
  public final ImmutableList<XProcessingStep> processingSteps()","0","-","-","-","-"
"514","preRound","@Override
  public void preRound(XProcessingEnv env, XRoundEnv round)","0","-","-","-","-"
"515","processingStep","protected abstract BaseProcessingStep processingStep();","0","-","-","-","-"
"516","postRound","@Override
  public void postRound(XProcessingEnv env, XRoundEnv round)","0","-","-","-","-"
"517","additionalProcessingOptions","/** Returns additional processing options that should only be applied for a single processor. */
  protected Set<String> additionalProcessingOptions()","0","-","-","-","-"
"518","ProcessorErrorHandler","ProcessorErrorHandler(XProcessingEnv processingEnv)","0","-","-","-","-"
"519","recordError","/**
   * Records an error message for some exception to the messager. This can be used to handle
   * exceptions gracefully that would otherwise be propagated out of the","0","-","-","-","-"
"520","checkErrors","/** Checks for any recorded errors. This should be called at the end of process every round. */
  void checkErrors()","0","-","-","-","-"
"521","isEmpty","public boolean isEmpty()","0","-","-","-","-"
"522","of","static HiltError of(String message)","0","-","-","-","-"
"523","of","static HiltError of(String message, XElement element)","0","-","-","-","-"
"524","of","private static HiltError of(String message, Optional<XElement> element)","0","-","-","-","-"
"525","message","abstract String message();","0","-","-","-","-"
"526","element","abstract Optional<XElement> element();","0","-","-","-","-"
"527","getComponents","/** Returns the","0","-","-","-","-"
"528","getInstallInAnnotationSpec","public static AnnotationSpec getInstallInAnnotationSpec(ImmutableSet<ClassName> components)","0","-","-","-","-"
"529","getHiltInstallInComponents","private static ImmutableSet<ClassName> getHiltInstallInComponents(XElement element)","0","-","-","-","-"
"530","Components","private Components()","0","-","-","-","-"
"531","ClassNames","private ClassNames()","0","-","-","-","-"
"532","typeElement","abstract XTypeElement typeElement();","0","-","-","-","-"
"533","classMetadata","abstract ClassMetadata classMetadata();","0","-","-","-","-"
"534","methodDescriptors","@Memoized
  ImmutableMap<String, XMethodElement> methodDescriptors()","0","-","-","-","-"
"535","containsConstructorWithDefaultParam","/** Returns true if any constructor of the defined a default parameter. */
  @Memoized
  boolean containsConstructorWithDefaultParam()","0","-","-","-","-"
"536","getSyntheticAnnotationMethod","/** Gets the synthetic method for annotations of a given field element. */
  Optional<XMethodElement> getSyntheticAnnotationMethod(XFieldElement fieldElement)","0","-","-","-","-"
"537","getAnnotationMethod","private Optional<MethodForAnnotations> getAnnotationMethod(XFieldElement fieldElement)","0","-","-","-","-"
"538","getAnnotationMethodUncached","private Optional<MethodForAnnotations> getAnnotationMethodUncached(XFieldElement fieldElement)","0","-","-","-","-"
"539","getPropertyGetter","/** Gets the getter method of a given field element corresponding to a property. */
  Optional<XMethodElement> getPropertyGetter(XFieldElement fieldElement)","0","-","-","-","-"
"540","getPropertyGetterUncached","private Optional<XMethodElement> getPropertyGetterUncached(XFieldElement fieldElement)","0","-","-","-","-"
"541","findProperty","private PropertyMetadata findProperty(XFieldElement field)","0","-","-","-","-"
"542","getPropertyNameFromField","private static String getPropertyNameFromField(XFieldElement field)","0","-","-","-","-"
"543","from","/** Parse Kotlin class metadata from a given type element. */
  static KotlinMetadata from(XTypeElement typeElement)","0","-","-","-","-"
"544","create","static MethodForAnnotations create(XMethodElement method)","0","-","-","-","-"
"545","method","@Nullable
    abstract XMethodElement method();","0","-","-","-","-"
"546","get","KotlinMetadataUtil get();","0","-","-","-","-"
"547","getMetadataUtil","/** Gets the metadata util. */
  public static KotlinMetadataUtil getMetadataUtil()","0","-","-","-","-"
"548","KotlinMetadataUtils","private KotlinMetadataUtils()","0","-","-","-","-"
"549","KotlinMetadataUtil","@Inject
  KotlinMetadataUtil(KotlinMetadataFactory metadataFactory)","0","-","-","-","-"
"550","hasMetadata","/**
   * Returns","0","-","-","-","-"
"551","getAnnotationsAnnotatedWith","/**
   * Returns the annotations on the given","0","-","-","-","-"
"552","getAnnotationsAnnotatedWithAnyOf","/**
   * Returns the annotations on the given","0","-","-","-","-"
"553","getAnnotations","/**
   * Returns the annotations on the given","0","-","-","-","-"
"554","getSyntheticPropertyAnnotations","/**
   * Returns the synthetic annotations of a Kotlin property.
   *
   * <p>Note that this method only looks for additional annotations in the synthetic property
   * method, if any, of a Kotlin property and not for annotations in its backing field.
   */
  private ImmutableList<XAnnotation> getSyntheticPropertyAnnotations(XElement element)","0","-","-","-","-"
"555","containsConstructorWithDefaultParam","public boolean containsConstructorWithDefaultParam(XTypeElement typeElement)","0","-","-","-","-"
"556","KotlinMetadataFactory","@Inject
  KotlinMetadataFactory()","0","-","-","-","-"
"557","create","/**
   * Parses and returns the","0","-","-","-","-"
"558","PkgPrivateEntryPointGenerator","PkgPrivateEntryPointGenerator(XProcessingEnv env, PkgPrivateMetadata metadata)","0","-","-","-","-"
"559","generate","void generate() throws IOException","0","-","-","-","-"
"560","publicModule","/** Returns the public Hilt wrapped type or the type itself if it is already public. */
  public static XTypeElement publicModule(XTypeElement element)","0","-","-","-","-"
"561","publicEntryPoint","/** Returns the public Hilt wrapped type or the type itself if it is already public. */
  public static XTypeElement publicEntryPoint(XTypeElement element)","0","-","-","-","-"
"562","publicEarlyEntryPoint","/** Returns the public Hilt wrapped type or the type itself if it is already public. */
  public static XTypeElement publicEarlyEntryPoint(XTypeElement element)","0","-","-","-","-"
"563","publicDep","private static XTypeElement publicDep(XTypeElement element, ClassName annotation)","0","-","-","-","-"
"564","baseClassName","/** Returns the base class name of the elemenet. */
  TypeName baseClassName()","0","-","-","-","-"
"565","getTypeElement","/** Returns TypeElement for the module element the metadata object represents */
  abstract XTypeElement getTypeElement();","0","-","-","-","-"
"566","getOptionalInstallInAnnotation","/**
   * Returns an optional @InstallIn AnnotationMirror for the module element the metadata object
   * represents
   */
  abstract Optional<XAnnotation> getOptionalInstallInAnnotation();","0","-","-","-","-"
"567","getAnnotation","/** Return the Type of this package private element. */
  abstract ClassName getAnnotation();","0","-","-","-","-"
"568","generatedClassName","/** Returns the expected generated classname for the element the metadata object represents */
  final ClassName generatedClassName()","0","-","-","-","-"
"569","of","/**
   * Returns an Optional PkgPrivateMetadata requiring Hilt processing, otherwise returns an empty
   * Optional.
   */
  static Optional<PkgPrivateMetadata> of(XTypeElement element, ClassName annotation)","0","-","-","-","-"
"570","aggregatingElement","/** Returns the aggregating element */
  public abstract XTypeElement aggregatingElement();","0","-","-","-","-"
"571","testElement","public abstract Optional<XTypeElement> testElement();","0","-","-","-","-"
"572","componentElements","public abstract ImmutableSet<XTypeElement> componentElements();","0","-","-","-","-"
"573","dependencyType","abstract DependencyType dependencyType();","0","-","-","-","-"
"574","dependency","public abstract XTypeElement dependency();","0","-","-","-","-"
"575","replacedDependencies","public abstract ImmutableSet<XTypeElement> replacedDependencies();","0","-","-","-","-"
"576","isModule","public boolean isModule()","0","-","-","-","-"
"577","from","/** Returns metadata for all aggregated elements in the aggregating package. */
  public static ImmutableSet<AggregatedDepsMetadata> from(XProcessingEnv env)","0","-","-","-","-"
"578","from","/** Returns metadata for each aggregated element. */
  public static ImmutableSet<AggregatedDepsMetadata> from(
      ImmutableSet<XTypeElement> aggregatedElements)","0","-","-","-","-"
"579","toIr","public static AggregatedDepsIr toIr(AggregatedDepsMetadata metadata)","0","-","-","-","-"
"580","create","private static AggregatedDepsMetadata create(XTypeElement element, XProcessingEnv env)","0","-","-","-","-"
"581","getTestElement","private static Optional<XTypeElement> getTestElement(
      XAnnotationValue testValue, XProcessingEnv env)","0","-","-","-","-"
"582","getComponents","private static ImmutableSet<XTypeElement> getComponents(
      XAnnotationValue componentsValue, XProcessingEnv env)","0","-","-","-","-"
"583","getDependencyType","private static DependencyType getDependencyType(
      XAnnotationValue modulesValue,
      XAnnotationValue entryPointsValue,
      XAnnotationValue componentEntryPointsValue)","0","-","-","-","-"
"584","getDependency","private static XTypeElement getDependency(
      XAnnotationValue modulesValue,
      XAnnotationValue entryPointsValue,
      XAnnotationValue componentEntryPointsValue,
      XProcessingEnv env)","0","-","-","-","-"
"585","getReplacedDependencies","private static ImmutableSet<XTypeElement> getReplacedDependencies(
      XAnnotationValue replacedDependenciesValue, XProcessingEnv env)","0","-","-","-","-"
"586","getPublicDependency","/** Returns the public Hilt wrapper module, or the module itself if its already public. */
  private static XTypeElement getPublicDependency(XTypeElement dependency, XProcessingEnv env)","0","-","-","-","-"
"587","AggregatedDepsGenerator","AggregatedDepsGenerator(
      String dependencyType,
      XTypeElement dependency,
      Optional<ClassName> testName,
      ImmutableSet<ClassName> components,
      ImmutableSet<ClassName> replacedDependencies)","0","-","-","-","-"
"588","generate","void generate()","0","-","-","-","-"
"589","aggregatedDepsAnnotation","private AnnotationSpec aggregatedDepsAnnotation()","0","-","-","-","-"
"590","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"591","PkgPrivateModuleGenerator","PkgPrivateModuleGenerator(XProcessingEnv env, PkgPrivateMetadata metadata)","0","-","-","-","-"
"592","generate","void generate() throws IOException","0","-","-","-","-"
"593","builder","private static Builder builder()","0","-","-","-","-"
"594","modules","/** Returns the modules for a component, without any filtering. */
  public abstract ImmutableSetMultimap<ClassName, XTypeElement> modules();","0","-","-","-","-"
"595","entryPoints","/** Returns the entry points associated with the given a component. */
  public abstract ImmutableSetMultimap<ClassName, XTypeElement> entryPoints();","0","-","-","-","-"
"596","componentEntryPoints","/** Returns the component entry point associated with the given a component. */
  public abstract ImmutableSetMultimap<ClassName, XTypeElement> componentEntryPoints();","0","-","-","-","-"
"597","modulesBuilder","abstract ImmutableSetMultimap.Builder<ClassName, XTypeElement> modulesBuilder();","0","-","-","-","-"
"598","entryPointsBuilder","abstract ImmutableSetMultimap.Builder<ClassName, XTypeElement> entryPointsBuilder();","0","-","-","-","-"
"599","componentEntryPointsBuilder","abstract ImmutableSetMultimap.Builder<ClassName, XTypeElement> componentEntryPointsBuilder();","0","-","-","-","-"
"600","build","abstract ComponentDependencies build();","0","-","-","-","-"
"601","from","/** Returns the component dependencies for the given metadata. */
  public static ComponentDependencies from(
      ImmutableSet<ComponentDescriptor> descriptors,
      ImmutableSet<AggregatedDepsMetadata> aggregatedDepsMetadata,
      ImmutableSet<AggregatedUninstallModulesMetadata> aggregatedUninstallModulesMetadata,
      ImmutableSet<AggregatedEarlyEntryPointMetadata> aggregatedEarlyEntryPointMetadata,
      XProcessingEnv env)","0","-","-","-","-"
"602","AggregatedDepsProcessingStep","public AggregatedDepsProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"603","annotationClassNames","@Override
  protected ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"604","processEach","@Override
  public void processEach(ClassName annotation, XElement element) throws Exception","0","-","-","-","-"
"605","processModule","private void processModule(
      XElement element, Optional<ClassName> installInAnnotation, ClassName moduleAnnotation)
      throws Exception","0","-","-","-","-"
"606","processEntryPoint","private void processEntryPoint(
      XElement element, Optional<ClassName> installInAnnotation, ClassName entryPointAnnotation)
      throws Exception","0","-","-","-","-"
"607","generateAggregatedDeps","private void generateAggregatedDeps(
      String key,
      XTypeElement element,
      ClassName annotation,
      ImmutableSet<ClassName> replacedModules)
      throws Exception","0","-","-","-","-"
"608","getAnnotation","private static Optional<ClassName> getAnnotation(
      XElement element, ImmutableSet<ClassName> annotations)","0","-","-","-","-"
"609","isValidKind","private static boolean isValidKind(XElement element)","0","-","-","-","-"
"610","installInCheckDisabled","private boolean installInCheckDisabled(XElement element)","0","-","-","-","-"
"611","isDaggerGeneratedModule","/**
   * When using Dagger Producers, don't process generated modules. They will not have the expected
   * annotations.
   */
  private static boolean isDaggerGeneratedModule(XElement element)","0","-","-","-","-"
"612","isGenerated","private static boolean isGenerated(XAnnotation annotation)","0","-","-","-","-"
"613","KspAggregatedDepsProcessor","public KspAggregatedDepsProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"614","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"615","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"616","aggregatedElementProxyName","/** Returns the class name of the proxy or","0","-","-","-","-"
"617","unwrapProxies","/** Returns back the set of input","0","-","-","-","-"
"618","unwrapProxy","private static XTypeElement unwrapProxy(XTypeElement element)","0","-","-","-","-"
"619","from","/** Returns all aggregated elements in the aggregating package after validating them. */
  public static ImmutableSet<XTypeElement> from(
      String aggregatingPackage, ClassName aggregatingAnnotation, XProcessingEnv env)","0","-","-","-","-"
"620","AggregatedElements","private AggregatedElements()","0","-","-","-","-"
"621","processingStep","@Override
  public DisableInstallInCheckProcessingStep processingStep()","0","-","-","-","-"
"622","KspDisableInstallInCheckProcessor","public KspDisableInstallInCheckProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"623","processingStep","@Override
  public DisableInstallInCheckProcessingStep processingStep()","0","-","-","-","-"
"624","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"625","DisableInstallInCheckProcessingStep","public DisableInstallInCheckProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"626","annotationClassNames","@Override
  protected ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"627","processEach","@Override
  public void processEach(ClassName annotation, XElement element)","0","-","-","-","-"
"628","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"629","create","static RootMetadata create(
      Root root,
      ComponentTree componentTree,
      ComponentDependencies deps,
      AliasOfs aliasOfs,
      XProcessingEnv env)","0","-","-","-","-"
"630","copyWithNewTree","static RootMetadata copyWithNewTree(RootMetadata other, ComponentTree componentTree)","0","-","-","-","-"
"631","createInternal","private static RootMetadata createInternal(
      Root root,
      ComponentTree componentTree,
      ComponentDependencies deps,
      AliasOfs aliasOfs,
      XProcessingEnv env)","0","-","-","-","-"
"632","RootMetadata","private RootMetadata(
      Root root,
      ComponentTree componentTree,
      ComponentDependencies deps,
      AliasOfs aliasOfs,
      XProcessingEnv env)","0","-","-","-","-"
"633","root","public Root root()","0","-","-","-","-"
"634","componentTree","public ComponentTree componentTree()","0","-","-","-","-"
"635","deps","public ComponentDependencies deps()","0","-","-","-","-"
"636","modules","public ImmutableSet<XTypeElement> modules(ClassName componentName)","0","-","-","-","-"
"637","entryPoints","public ImmutableSet<TypeName> entryPoints(ClassName componentName)","0","-","-","-","-"
"638","scopes","public ImmutableSet<ClassName> scopes(ClassName componentName)","0","-","-","-","-"
"639","modulesThatDaggerCannotConstruct","/**
   * Returns all modules in the given component that do not have accessible default constructors.
   * Note that a non-static module nested in an outer class is considered to have no default
   * constructors, since an instance of the outer class is needed to construct the module. This also
   * filters out framework modules directly referenced by the codegen, since those are already known
   * about and are specifically handled in the codegen.
   */
  public ImmutableSet<XTypeElement> modulesThatDaggerCannotConstruct(ClassName componentName)","0","-","-","-","-"
"640","testRootMetadata","public TestRootMetadata testRootMetadata()","0","-","-","-","-"
"641","waitForBindValue","public boolean waitForBindValue()","0","-","-","-","-"
"642","testRootMetadataUncached","private TestRootMetadata testRootMetadataUncached()","0","-","-","-","-"
"643","validate","/**
   * Validates that the","0","-","-","-","-"
"644","getScopesByComponentUncached","private ImmutableSetMultimap<ClassName, ClassName> getScopesByComponentUncached()","0","-","-","-","-"
"645","daggerCanConstruct","private static boolean daggerCanConstruct(XTypeElement type)","0","-","-","-","-"
"646","hasVisibleEmptyConstructor","private static boolean hasVisibleEmptyConstructor(XTypeElement type)","0","-","-","-","-"
"647","TestComponentDataGenerator","public TestComponentDataGenerator(
      XProcessingEnv processingEnv,
      XTypeElement originatingElement,
      RootMetadata rootMetadata,
      ComponentNames componentNames)","0","-","-","-","-"
"648","generate","/**
   *
   *
   * <pre><code>","0","-","-","-","-"
"649","getMethod","private MethodSpec getMethod()","0","-","-","-","-"
"650","getAddModuleStatement","/**
   *
   *
   * <pre><code>
   * .testModule(modules.get(FooTest.TestModule.class))
   * </code></pre>
   *
   * <pre><code>
   * .testModule(autoAddModuleEnabled
   *     ? ((FooTest) testInstance).new TestModule()
   *     : (FooTest.TestModule) modules.get(FooTest.TestModule.class))
   * </code></pre>
   */
  private static String getAddModuleStatement(XTypeElement module, XTypeElement testElement)","0","-","-","-","-"
"651","canBeConstructedByHilt","private static boolean canBeConstructedByHilt(XTypeElement module, XTypeElement testElement)","0","-","-","-","-"
"652","hasOnlyAccessibleNoArgConstructor","private static boolean hasOnlyAccessibleNoArgConstructor(XTypeElement module)","0","-","-","-","-"
"653","getElementsListed","private static CodeBlock getElementsListed(ImmutableSet<XTypeElement> modules)","0","-","-","-","-"
"654","getTestInjectInternalMethod","private MethodSpec getTestInjectInternalMethod()","0","-","-","-","-"
"655","callInjectTest","private CodeBlock callInjectTest(XTypeElement testElement)","0","-","-","-","-"
"656","createDefaultRoot","/**
   * Creates the default root for this (test) build compilation.
   *
   * <p>A default root installs only the global","0","-","-","-","-"
"657","create","/** Creates a","0","-","-","-","-"
"658","element","/** Returns the root element that should be used with processing. */
  abstract XTypeElement element();","0","-","-","-","-"
"659","originatingRootElement","/**
   * Returns the originating root element. In most cases this will be the same as","0","-","-","-","-"
"660","isTestRoot","/** Returns","0","-","-","-","-"
"661","classname","/** Returns the class name of the root element. */
  ClassName classname()","0","-","-","-","-"
"662","originatingRootClassname","/** Returns the class name of the originating root element. */
  ClassName originatingRootClassname()","0","-","-","-","-"
"663","toString","@Override
  public final String toString()","0","-","-","-","-"
"664","isDefaultRoot","/** Returns","0","-","-","-","-"
"665","generate","static void generate(XProcessingEnv env)","0","-","-","-","-"
"666","EarlySingletonComponentCreatorGenerator","private EarlySingletonComponentCreatorGenerator()","0","-","-","-","-"
"667","aggregatingElement","/** Returns the aggregating element */
  public abstract XTypeElement aggregatingElement();","0","-","-","-","-"
"668","rootElements","/** Returns the processed root elements. */
  abstract ImmutableSet<XTypeElement> rootElements();","0","-","-","-","-"
"669","from","static ImmutableSet<ProcessedRootSentinelMetadata> from(XProcessingEnv env)","0","-","-","-","-"
"670","toIr","static ProcessedRootSentinelIr toIr(ProcessedRootSentinelMetadata metadata)","0","-","-","-","-"
"671","create","private static ProcessedRootSentinelMetadata create(XTypeElement element, XProcessingEnv env)","0","-","-","-","-"
"672","ComponentTreeDepsProcessingStep","public ComponentTreeDepsProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"673","annotationClassNames","@Override
  protected ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"674","processEach","@Override
  protected void processEach(ClassName annotation, XElement element)","0","-","-","-","-"
"675","postProcess","@Override
  public void postProcess(XProcessingEnv env, XRoundEnv roundEnv) throws Exception","0","-","-","-","-"
"676","processComponentTreeDeps","private void processComponentTreeDeps(
      ComponentTreeDepsMetadata metadata, DefineComponents defineComponents) throws IOException","0","-","-","-","-"
"677","setProcessingState","private void setProcessingState(ComponentTreeDepsMetadata metadata, Root root)","0","-","-","-","-"
"678","generateComponents","private void generateComponents(
      ComponentTreeDepsMetadata metadata, RootMetadata rootMetadata, ComponentNames componentNames)
      throws IOException","0","-","-","-","-"
"679","generateTestComponentData","private void generateTestComponentData(
      XTypeElement metadataElement,
      ImmutableList<RootMetadata> rootMetadatas,
      ComponentNames componentNames)
      throws IOException","0","-","-","-","-"
"680","generateApplication","private void generateApplication(XTypeElement rootElement) throws IOException","0","-","-","-","-"
"681","ComponentTreeDepsGenerator","ComponentTreeDepsGenerator(XProcessingEnv env, Mode mode)","0","-","-","-","-"
"682","generate","void generate(ComponentTreeDepsMetadata metadata) throws IOException","0","-","-","-","-"
"683","componentTreeDepsAnnotation","AnnotationSpec componentTreeDepsAnnotation(ComponentTreeDepsMetadata metadata)
      throws IOException","0","-","-","-","-"
"684","addDeps","private void addDeps(AnnotationSpec.Builder builder, ImmutableSet<XTypeElement> deps, String name)
      throws IOException","0","-","-","-","-"
"685","maybeWrapInPublicProxy","/**
   * This method will return the public proxy for","0","-","-","-","-"
"686","generateProxy","private void generateProxy(XTypeElement dep, ClassName proxyName)","0","-","-","-","-"
"687","from","/** Creates a new tree from a set of descriptors. */
  static ComponentTree from(Set<ComponentDescriptor> descriptors)","0","-","-","-","-"
"688","ComponentTree","private ComponentTree(ImmutableGraph<ComponentDescriptor> graph)","0","-","-","-","-"
"689","getComponentDescriptors","ImmutableSet<ComponentDescriptor> getComponentDescriptors()","0","-","-","-","-"
"690","childrenOf","ImmutableSet<ComponentDescriptor> childrenOf(ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"691","graph","ImmutableGraph<ComponentDescriptor> graph()","0","-","-","-","-"
"692","root","ComponentDescriptor root()","0","-","-","-","-"
"693","KspRootProcessor","public KspRootProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"694","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"695","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"696","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"697","additionalProcessingOptions","@Override
  public ImmutableSet<String> additionalProcessingOptions()","0","-","-","-","-"
"698","KspComponentTreeDepsProcessor","public KspComponentTreeDepsProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"699","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"700","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"701","aggregatingElement","/** Returns the aggregating element */
  public abstract XTypeElement aggregatingElement();","0","-","-","-","-"
"702","rootElement","/** Returns the element that was annotated with the root annotation. */
  abstract XTypeElement rootElement();","0","-","-","-","-"
"703","originatingRootElement","/**
   * Returns the originating root element. In most cases this will be the same as","0","-","-","-","-"
"704","rootAnnotation","/** Returns the root annotation as an element. */
  abstract XTypeElement rootAnnotation();","0","-","-","-","-"
"705","allowsSharingComponent","/** Returns whether this root can use a shared component. */
  abstract boolean allowsSharingComponent();","0","-","-","-","-"
"706","rootType","@Memoized
  RootType rootType()","0","-","-","-","-"
"707","from","static ImmutableSet<AggregatedRootMetadata> from(XProcessingEnv env)","0","-","-","-","-"
"708","from","/** Returns metadata for each aggregated element. */
  public static ImmutableSet<AggregatedRootMetadata> from(
      ImmutableSet<XTypeElement> aggregatedElements, XProcessingEnv env)","0","-","-","-","-"
"709","toIr","public static AggregatedRootIr toIr(AggregatedRootMetadata metadata)","0","-","-","-","-"
"710","create","private static AggregatedRootMetadata create(XTypeElement element, XProcessingEnv env)","0","-","-","-","-"
"711","ComponentGenerator","public ComponentGenerator(
      XProcessingEnv processingEnv,
      ClassName name,
      Optional<ClassName> superclass,
      Set<? extends ClassName> modules,
      Set<? extends TypeName> entryPoints,
      ImmutableCollection<ClassName> scopes,
      ImmutableList<AnnotationSpec> extraAnnotations,
      ClassName componentAnnotation,
      Optional<TypeSpec> componentBuilder)","0","-","-","-","-"
"712","typeSpecBuilder","public TypeSpec.Builder typeSpecBuilder() throws IOException","0","-","-","-","-"
"713","getComponentAnnotation","/** Returns the component annotation with the list of modules to install for the component. */
  private AnnotationSpec getComponentAnnotation()","0","-","-","-","-"
"714","addEntryPoints","/**
   * Adds entry points to the component.
   *
   * See b/140979968. If the entry points exceed 65763 bytes, we have to partition them to avoid the
   * limit. To be safe, we split at 60000 bytes.
   */
  private void addEntryPoints(TypeSpec.Builder builder) throws IOException","0","-","-","-","-"
"715","createPartitionInterface","private ClassName createPartitionInterface(List<TypeName> partition, int partitionIndex)
      throws IOException","0","-","-","-","-"
"716","write","/** Formats the","0","-","-","-","-"
"717","formatInterfaces","private static String formatInterfaces(String content, Pattern pattern)","0","-","-","-","-"
"718","formatInterfaces","private static String formatInterfaces(String prefixSpaces, String interfaces)","0","-","-","-","-"
"719","RootFileFormatter","private RootFileFormatter()","0","-","-","-","-"
"720","TestInjectorGenerator","TestInjectorGenerator(XProcessingEnv env, TestRootMetadata metadata)","0","-","-","-","-"
"721","generate","public void generate() throws IOException","0","-","-","-","-"
"722","installInComponent","private static ClassName installInComponent(XTypeElement testElement)","0","-","-","-","-"
"723","AggregatedRootGenerator","AggregatedRootGenerator(
      XTypeElement rootElement, XTypeElement originatingRootElement, XTypeElement rootAnnotation)","0","-","-","-","-"
"724","generate","void generate()","0","-","-","-","-"
"725","RootProcessingStep","public RootProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"726","getMode","private Mode getMode()","0","-","-","-","-"
"727","annotationClassNames","@Override
  protected ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"728","processEach","@Override
  public void processEach(ClassName annotation, XElement element) throws Exception","0","-","-","-","-"
"729","postProcess","@Override
  protected void postProcess(XProcessingEnv env, XRoundEnv roundEnv) throws Exception","0","-","-","-","-"
"730","rootsToProcess","private ImmutableSet<AggregatedRootIr> rootsToProcess()","0","-","-","-","-"
"731","componentTreeDepsMetadatas","private ImmutableSet<ComponentTreeDepsMetadata> componentTreeDepsMetadatas(
      ImmutableSet<AggregatedRootIr> aggregatedRoots)","0","-","-","-","-"
"732","ProcessedRootSentinelGenerator","ProcessedRootSentinelGenerator(XTypeElement processedRoot, Mode mode)","0","-","-","-","-"
"733","generate","void generate() throws IOException","0","-","-","-","-"
"734","generate","static void generate(
      ComponentTreeDepsMetadata componentTreeDepsMetadata,
      RootMetadata metadata,
      ComponentNames componentNames,
      XProcessingEnv env)
      throws IOException","0","-","-","-","-"
"735","RootGenerator","private RootGenerator(
      ComponentTreeDepsMetadata componentTreeDepsMetadata,
      RootMetadata metadata,
      ComponentNames componentNames,
      XProcessingEnv env)","0","-","-","-","-"
"736","generateComponents","private void generateComponents() throws IOException","0","-","-","-","-"
"737","filterDescriptors","private static ComponentTree filterDescriptors(ComponentTree componentTree)","0","-","-","-","-"
"738","subcomponentBuilderModules","private ImmutableMap<ComponentDescriptor, ClassName> subcomponentBuilderModules(
      TypeSpec.Builder componentsWrapper)","0","-","-","-","-"
"739","subcomponentBuilderModule","private TypeSpec subcomponentBuilderModule(
      ClassName componentName, ClassName builderName, ClassName moduleName)","0","-","-","-","-"
"740","componentBuilder","private Optional<TypeSpec> componentBuilder(ComponentDescriptor descriptor)","0","-","-","-","-"
"741","componentAnnotation","private ClassName componentAnnotation(ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"742","componentBuilderAnnotation","private ClassName componentBuilderAnnotation(ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"743","getPartialRootModuleClassName","private ClassName getPartialRootModuleClassName()","0","-","-","-","-"
"744","getComponentsWrapperClassName","private ClassName getComponentsWrapperClassName()","0","-","-","-","-"
"745","getComponentClassName","private ClassName getComponentClassName(ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"746","name","/**
   * Returns the name of the element annotated with","0","-","-","-","-"
"747","aggregatedRootDeps","/** Returns the","0","-","-","-","-"
"748","defineComponentDeps","/** Returns the","0","-","-","-","-"
"749","aliasOfDeps","/** Returns the","0","-","-","-","-"
"750","aggregatedDeps","/** Returns the","0","-","-","-","-"
"751","aggregatedUninstallModulesDeps","/** Returns the","0","-","-","-","-"
"752","aggregatedEarlyEntryPointDeps","/** Returns the","0","-","-","-","-"
"753","from","static ComponentTreeDepsMetadata from(XTypeElement element, XProcessingEnv env)","0","-","-","-","-"
"754","from","static ComponentTreeDepsMetadata from(ComponentTreeDepsIr ir, XProcessingEnv env)","0","-","-","-","-"
"755","modules","/** Returns all modules included in a component tree deps. */
  public ImmutableSet<XTypeElement> modules()","0","-","-","-","-"
"756","entrypoints","/** Returns all entry points included in a component tree deps. */
  public ImmutableSet<XTypeElement> entrypoints()","0","-","-","-","-"
"757","create","static ComponentTreeDepsMetadata create(
      ClassName name,
      ImmutableSet<XTypeElement> aggregatedRootDeps,
      ImmutableSet<XTypeElement> defineComponentDeps,
      ImmutableSet<XTypeElement> aliasOfDeps,
      ImmutableSet<XTypeElement> aggregatedDeps,
      ImmutableSet<XTypeElement> aggregatedUninstallModulesDeps,
      ImmutableSet<XTypeElement> aggregatedEarlyEntryPointDeps)","0","-","-","-","-"
"758","testElement","/** Returns the","0","-","-","-","-"
"759","baseElement","/** Returns the","0","-","-","-","-"
"760","testName","/** Returns the","0","-","-","-","-"
"761","baseAppName","/** Returns the","0","-","-","-","-"
"762","appName","/** The name of the generated Hilt test application class for the given test name. */
  ClassName appName()","0","-","-","-","-"
"763","testInjectorName","/** The name of the generated Hilt test application class for the given test name. */
  ClassName testInjectorName()","0","-","-","-","-"
"764","skipTestInjectionAnnotation","/**
   * Returns either the SkipTestInjection annotation or the first annotation that was annotated
   * with SkipTestInjection, if present.
   */
  Optional<XAnnotation> skipTestInjectionAnnotation()","0","-","-","-","-"
"765","of","static TestRootMetadata of(XProcessingEnv env, XElement element)","0","-","-","-","-"
"766","isAndroidSuperClassValidationDisabled","/**
   * Returns","0","-","-","-","-"
"767","isCrossCompilationRootValidationDisabled","/**
   * Returns","0","-","-","-","-"
"768","isModuleInstallInCheckDisabled","/** Returns","0","-","-","-","-"
"769","isSharedTestComponentsEnabled","/**
   * Returns","0","-","-","-","-"
"770","useAggregatingRootProcessor","/**
   * Returns","0","-","-","-","-"
"771","getGradleProjectType","/**
   * Returns project type or null if Hilt Gradle Plugin is not applied.
   *
   * <p>Note:This is for internal use only!
   */
  public static GradleProjectType getGradleProjectType(XProcessingEnv env)","0","-","-","-","-"
"772","isAssistedInjectViewModelsEnabled","public static boolean isAssistedInjectViewModelsEnabled(XTypeElement viewModelElement)","0","-","-","-","-"
"773","checkWrongAndDeprecatedOptions","public static void checkWrongAndDeprecatedOptions(XProcessingEnv env)","0","-","-","-","-"
"774","EnumOption","EnumOption(String name, E defaultValue)","0","-","-","-","-"
"775","getQualifiedName","String getQualifiedName()","0","-","-","-","-"
"776","get","E get(XProcessingEnv env)","0","-","-","-","-"
"777","getAllOptions","static Set<EnumOption<?>> getAllOptions()","0","-","-","-","-"
"778","getProcessorOptions","public static Set<String> getProcessorOptions()","0","-","-","-","-"
"779","generateAggregatingClass","/** Generates the aggregating metadata class for an aggregating annotation. */
  public static void generateAggregatingClass(
      String aggregatingPackage,
      AnnotationSpec aggregatingAnnotation,
      XTypeElement originatingElement,
      Class<?> generatorClass)","0","-","-","-","-"
"780","generateAggregatingClass","/** Generates the aggregating metadata class for an aggregating annotation. */
  public static void generateAggregatingClass(
      String aggregatingPackage,
      AnnotationSpec aggregatingAnnotation,
      XTypeElement originatingElement,
      Class<?> generatorClass,
      Mode mode)","0","-","-","-","-"
"781","getAnnotationValues","/** Returns a map from","0","-","-","-","-"
"782","getAnnotationClassValues","/** Returns a list of","0","-","-","-","-"
"783","getOptionalAnnotationClassValues","public static ImmutableList<XTypeElement> getOptionalAnnotationClassValues(
      XAnnotation annotation, String key)","0","-","-","-","-"
"784","getOptionalAnnotationValues","private static ImmutableList<XAnnotationValue> getOptionalAnnotationValues(
      XAnnotation annotation, String key)","0","-","-","-","-"
"785","getTopLevelType","public static XTypeElement getTopLevelType(XElement originalElement)","0","-","-","-","-"
"786","isTopLevel","public static boolean isTopLevel(XElement element)","0","-","-","-","-"
"787","hasAnnotation","/** Returns true if the given element has an annotation with the given class name. */
  public static boolean hasAnnotation(Element element, ClassName className)","0","-","-","-","-"
"788","hasErrorTypeAnnotation","/** Returns true if the given element has an annotation that is an error kind. */
  public static boolean hasErrorTypeAnnotation(XElement element)","0","-","-","-","-"
"789","getAnnotationMirrorOptional","/**
   * Returns the annotation mirror from the given element that corresponds to the given class.
   *
   * @throws IllegalArgumentException if 2 or more annotations are found.
   * @return","0","-","-","-","-"
"790","getEnclosedName","/**
   * Returns the name of a class, including prefixing with enclosing class names. i.e. for inner
   * class Foo enclosed by Bar, returns Bar_Foo instead of just Foo
   */
  public static String getEnclosedName(ClassName name)","0","-","-","-","-"
"791","getEnclosedClassName","/**
   * Returns an equivalent class name with the","0","-","-","-","-"
"792","getEnclosedClassName","/**
   * Returns an equivalent class name with the","0","-","-","-","-"
"793","getFullEnclosedName","/**
   * Returns the fully qualified class name, with _ instead of . For elements that are not type
   * elements, this continues to append the simple name of elements. For example,
   * foo_bar_Outer_Inner_fooMethod.
   */
  public static String getFullEnclosedName(XElement element)","0","-","-","-","-"
"794","append","/** Appends the given string to the end of the class name. */
  public static ClassName append(ClassName name, String suffix)","0","-","-","-","-"
"795","prepend","/** Prepends the given string to the beginning of the class name. */
  public static ClassName prepend(ClassName name, String prefix)","0","-","-","-","-"
"796","removeNameSuffix","/**
   * Removes the string","0","-","-","-","-"
"797","isAssignableFrom","/** Returns","0","-","-","-","-"
"798","isAssignableFromAnyOf","/** Returns","0","-","-","-","-"
"799","getMapKeyAnnotations","/** Returns MapKey annotated annotations found on an element. */
  public static ImmutableList<XAnnotation> getMapKeyAnnotations(XElement element)","0","-","-","-","-"
"800","isAnnotatedWithInject","/** Returns true if an element is annotated with","0","-","-","-","-"
"801","getQualifierAnnotations","/** Returns Qualifier annotated annotations found on an element. */
  public static ImmutableList<XAnnotation> getQualifierAnnotations(XElement element)","0","-","-","-","-"
"802","isAnnotatedWithScope","/** Returns true if an element is annotated with","0","-","-","-","-"
"803","getScopeAnnotations","/** Returns Scope annotated annotations found on an element. */
  public static ImmutableList<XAnnotation> getScopeAnnotations(XElement element)","0","-","-","-","-"
"804","upperToLowerCamel","/**
   * Shortcut for converting from upper camel to lower camel case
   *
   * <p>Example: ""SomeString"" => ""someString""
   */
  public static String upperToLowerCamel(String upperCamel)","0","-","-","-","-"
"805","copyMethodSpecWithoutBody","/** @return copy of the given MethodSpec as","0","-","-","-","-"
"806","hasDaggerAbstractMethodAnnotation","/**
   * Returns true if the given method is annotated with one of the annotations Dagger recognizes for
   * abstract methods (e.g. @Binds).
   */
  public static boolean hasDaggerAbstractMethodAnnotation(XExecutableElement method)","0","-","-","-","-"
"807","requiresModuleInstance","public static boolean requiresModuleInstance(XTypeElement module)","0","-","-","-","-"
"808","hasVisibleEmptyConstructor","public static boolean hasVisibleEmptyConstructor(XTypeElement type)","0","-","-","-","-"
"809","isBindingMethod","private static boolean isBindingMethod(XExecutableElement method)","0","-","-","-","-"
"810","addGeneratedAnnotation","public static void addGeneratedAnnotation(
      TypeSpec.Builder typeSpecBuilder, XProcessingEnv env, Class<?> generatorClass)","0","-","-","-","-"
"811","addGeneratedAnnotation","public static void addGeneratedAnnotation(
      TypeSpec.Builder typeSpecBuilder, XProcessingEnv env, String generatorClass)","0","-","-","-","-"
"812","getOriginatingElementAnnotation","public static AnnotationSpec getOriginatingElementAnnotation(XTypeElement element)","0","-","-","-","-"
"813","rawTypeName","/**
   * Returns the","0","-","-","-","-"
"814","getOriginatingTestElement","public static Optional<XTypeElement> getOriginatingTestElement(XElement element)","0","-","-","-","-"
"815","getOriginatingTopLevelType","private static XTypeElement getOriginatingTopLevelType(XElement element)","0","-","-","-","-"
"816","hasJavaPackagePrivateVisibility","public static boolean hasJavaPackagePrivateVisibility(XHasModifiers element)","0","-","-","-","-"
"817","Processors","private Processors()","0","-","-","-","-"
"818","aggregatingElement","/** Returns the aggregating element */
  public abstract XTypeElement aggregatingElement();","0","-","-","-","-"
"819","earlyEntryPoint","/** Returns the element annotated with","0","-","-","-","-"
"820","from","/** Returns metadata for all aggregated elements in the aggregating package. */
  public static ImmutableSet<AggregatedEarlyEntryPointMetadata> from(XProcessingEnv env)","0","-","-","-","-"
"821","from","/** Returns metadata for each aggregated element. */
  public static ImmutableSet<AggregatedEarlyEntryPointMetadata> from(
      ImmutableSet<XTypeElement> aggregatedElements)","0","-","-","-","-"
"822","toIr","public static AggregatedEarlyEntryPointIr toIr(AggregatedEarlyEntryPointMetadata metadata)","0","-","-","-","-"
"823","create","private static AggregatedEarlyEntryPointMetadata create(
      XTypeElement element, XProcessingEnv env)","0","-","-","-","-"
"824","processingStep","@Override
  public EarlyEntryPointProcessingStep processingStep()","0","-","-","-","-"
"825","EarlyEntryPointProcessingStep","public EarlyEntryPointProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"826","annotationClassNames","@Override
  public ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"827","processEach","@Override
  public void processEach(ClassName annotation, XElement element)","0","-","-","-","-"
"828","AggregatedEarlyEntryPointGenerator","AggregatedEarlyEntryPointGenerator(XTypeElement earlyEntryPoint)","0","-","-","-","-"
"829","generate","void generate()","0","-","-","-","-"
"830","KspEarlyEntryPointProcessor","public KspEarlyEntryPointProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"831","processingStep","@Override
  public EarlyEntryPointProcessingStep processingStep()","0","-","-","-","-"
"832","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"833","checkState","/**
   * Ensures the truth of an expression involving the state of the calling instance, but not
   * involving any parameters to the calling method.
   *
   * @param expression a boolean expression
   * @param errorMessage the exception message to use if the check fails; will be converted to a
   *     string using","0","-","-","-","-"
"834","checkState","/**
   * Ensures the truth of an expression involving the state of the calling instance, but not
   * involving any parameters to the calling method.
   *
   * @param expression a boolean expression
   * @param errorMessageTemplate a template for the exception message should the check fail. The
   *     message is formed by replacing each","0","-","-","-","-"
"835","checkState","/**
   * Ensures the truth of an expression involving the state of the calling instance, but not
   * involving any parameters to the calling method.
   *
   * @param expression a boolean expression
   * @param badElement the element that was at fault
   * @param errorMessage the exception message to use if the check fails; will be converted to a
   *     string using","0","-","-","-","-"
"836","checkState","/**
   * Ensures the truth of an expression involving the state of the calling instance, but not
   * involving any parameters to the calling method.
   *
   * <p>e.g. checkState(foo.isABar(), ""Failed because of %s is not a bar"", foo);
   *
   * @param expression a boolean expression
   * @param badElement the element that was at fault
   * @param errorMessageTemplate a template for the exception message should the check fail. The
   *     message is formed by replacing each","0","-","-","-","-"
"837","checkStateX","/**
   * Ensures the truth of an expression involving the state of the calling instance, but not
   * involving any parameters to the calling method.
   *
   * @param expression a boolean expression
   * @param badElements the elements that were at fault
   * @param errorMessageTemplate a template for the exception message should the check fail. The
   *     message is formed by replacing each","0","-","-","-","-"
"838","ProcessorErrors","private ProcessorErrors()","0","-","-","-","-"
"839","aggregatingElement","/** Returns the aggregating element */
  public abstract XTypeElement aggregatingElement();","0","-","-","-","-"
"840","defineComponentScopeElements","abstract ImmutableList<XTypeElement> defineComponentScopeElements();","0","-","-","-","-"
"841","aliasElement","abstract XTypeElement aliasElement();","0","-","-","-","-"
"842","from","/** Returns metadata for all aggregated elements in the aggregating package. */
  public static ImmutableSet<AliasOfPropagatedDataMetadata> from(XProcessingEnv env)","0","-","-","-","-"
"843","from","/** Returns metadata for each aggregated element. */
  public static ImmutableSet<AliasOfPropagatedDataMetadata> from(
      ImmutableSet<XTypeElement> aggregatedElements)","0","-","-","-","-"
"844","toIr","public static AliasOfPropagatedDataIr toIr(AliasOfPropagatedDataMetadata metadata)","0","-","-","-","-"
"845","create","private static AliasOfPropagatedDataMetadata create(XTypeElement element)","0","-","-","-","-"
"846","KspAliasOfProcessor","public KspAliasOfProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"847","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"848","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"849","create","public static AliasOfs create(
      ImmutableSet<AliasOfPropagatedDataMetadata> metadatas,
      ImmutableSet<ComponentDescriptor> componentDescriptors)","0","-","-","-","-"
"850","AliasOfs","private AliasOfs(ImmutableSetMultimap<ClassName, ClassName> defineComponentScopeToAliases)","0","-","-","-","-"
"851","getAliasesFor","public ImmutableSet<ClassName> getAliasesFor(ClassName defineComponentScope)","0","-","-","-","-"
"852","processingStep","@Override
  public AliasOfProcessingStep processingStep()","0","-","-","-","-"
"853","AliasOfProcessingStep","public AliasOfProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"854","annotationClassNames","@Override
  public ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"855","processEach","@Override
  public void processEach(ClassName annotation, XElement element)","0","-","-","-","-"
"856","AliasOfPropagatedDataGenerator","AliasOfPropagatedDataGenerator(
      XTypeElement aliasScope,
      ImmutableList<XTypeElement> defineComponentScopes)","0","-","-","-","-"
"857","generate","void generate()","0","-","-","-","-"
"858","propagatedDataAnnotation","private AnnotationSpec propagatedDataAnnotation()","0","-","-","-","-"
"859","BadInputException","public BadInputException(String message)","0","-","-","-","-"
"860","BadInputException","public BadInputException(String message, XElement badElement)","0","-","-","-","-"
"861","BadInputException","public BadInputException(String message, Iterable<? extends XElement> badElements)","0","-","-","-","-"
"862","getBadElements","public ImmutableList<XElement> getBadElements()","0","-","-","-","-"
"863","AndroidClassNames","private AndroidClassNames()","0","-","-","-","-"
"864","BroadcastReceiverGenerator","public BroadcastReceiverGenerator(XProcessingEnv env, AndroidEntryPointMetadata metadata)","0","-","-","-","-"
"865","generate","public void generate() throws IOException","0","-","-","-","-"
"866","isOnReceiveImplemented","private static boolean isOnReceiveImplemented(XTypeElement typeElement)","0","-","-","-","-"
"867","onReceiveMethod","private MethodSpec onReceiveMethod() throws IOException","0","-","-","-","-"
"868","findMethodBySubsignature","private Optional<XMethodElement> findMethodBySubsignature(
      XTypeElement typeElement, XMethodElement method)","0","-","-","-","-"
"869","findMethodsByName","private static ImmutableSet<XMethodElement> findMethodsByName(
      XTypeElement typeElement, String name)","0","-","-","-","-"
"870","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"871","ApplicationGenerator","public ApplicationGenerator(XProcessingEnv env, AndroidEntryPointMetadata metadata)","0","-","-","-","-"
"872","generate","public void generate() throws IOException","0","-","-","-","-"
"873","hasCustomInject","private boolean hasCustomInject()","0","-","-","-","-"
"874","componentManagerField","private FieldSpec componentManagerField()","0","-","-","-","-"
"875","componentManagerMethod","private MethodSpec componentManagerMethod()","0","-","-","-","-"
"876","creatorType","private TypeSpec creatorType()","0","-","-","-","-"
"877","componentBuilder","private CodeBlock componentBuilder()","0","-","-","-","-"
"878","onCreateMethod","private MethodSpec onCreateMethod()","0","-","-","-","-"
"879","injectionMethod","private MethodSpec injectionMethod()","0","-","-","-","-"
"880","injectedField","private static FieldSpec injectedField()","0","-","-","-","-"
"881","customInjectMethod","private MethodSpec customInjectMethod()","0","-","-","-","-"
"882","injectCodeBlock","private CodeBlock injectCodeBlock()","0","-","-","-","-"
"883","ActivityMethod","ActivityMethod(TypeName... parameterTypes)","0","-","-","-","-"
"884","ActivityGenerator","public ActivityGenerator(XProcessingEnv env, AndroidEntryPointMetadata metadata)","0","-","-","-","-"
"885","generate","public void generate() throws IOException","0","-","-","-","-"
"886","init","private MethodSpec init()","0","-","-","-","-"
"887","getDefaultViewModelProviderFactory","private MethodSpec getDefaultViewModelProviderFactory()","0","-","-","-","-"
"888","onCreateComponentActivity","private MethodSpec onCreateComponentActivity()","0","-","-","-","-"
"889","initSavedStateHandleHolderMethod","private static MethodSpec initSavedStateHandleHolderMethod()","0","-","-","-","-"
"890","isNullable","private static boolean isNullable(XExecutableParameterElement element)","0","-","-","-","-"
"891","hasNullableAnnotation","private static boolean hasNullableAnnotation(XAnnotated element)","0","-","-","-","-"
"892","onDestroyComponentActivity","private MethodSpec onDestroyComponentActivity()","0","-","-","-","-"
"893","requireNearestOverrideMethod","private static XMethodElement requireNearestOverrideMethod(
      ActivityMethod activityMethod, AndroidEntryPointMetadata metadata)","0","-","-","-","-"
"894","element","/** The class annotated with @AndroidEntryPoint. */
  public abstract XTypeElement element();","0","-","-","-","-"
"895","baseElement","/** The base class given to @AndroidEntryPoint. */
  public abstract XTypeElement baseElement();","0","-","-","-","-"
"896","generatedClassName","/** The name of the generated base class, beginning with 'Hilt_'. */
  public abstract ClassName generatedClassName();","0","-","-","-","-"
"897","requiresBytecodeInjection","/** Returns","0","-","-","-","-"
"898","androidType","/** Returns the","0","-","-","-","-"
"899","baseMetadata","/** Returns","0","-","-","-","-"
"900","installInComponents","/** Returns set of scopes that the component interface should be installed in. */
  public abstract ImmutableSet<ClassName> installInComponents();","0","-","-","-","-"
"901","componentManager","/** Returns the component manager this generated Hilt class should use. */
  public abstract TypeName componentManager();","0","-","-","-","-"
"902","componentManagerInitArgs","/** Returns the initialization arguments for the component manager. */
  public abstract Optional<CodeBlock> componentManagerInitArgs();","0","-","-","-","-"
"903","rootMetadata","/**
   * Returns the metadata for the root most class in the hierarchy.
   *
   * <p>If this is the only metadata in the class hierarchy, it returns this.
   */
  @Memoized
  public AndroidEntryPointMetadata rootMetadata()","0","-","-","-","-"
"904","isRootMetadata","boolean isRootMetadata()","0","-","-","-","-"
"905","allowsOptionalInjection","/** Returns true if this class allows optional injection. */
  public boolean allowsOptionalInjection()","0","-","-","-","-"
"906","baseAllowsOptionalInjection","/** Returns true if any base class (transitively) allows optional injection. */
  public boolean baseAllowsOptionalInjection()","0","-","-","-","-"
"907","overridesAndroidEntryPointClass","/** Returns true if any base class (transitively) uses @AndroidEntryPoint. */
  public boolean overridesAndroidEntryPointClass()","0","-","-","-","-"
"908","elementClassName","/** The name of the class annotated with @AndroidEntryPoint */
  public ClassName elementClassName()","0","-","-","-","-"
"909","baseClassName","/** The name of the base class given to @AndroidEntryPoint */
  public TypeName baseClassName()","0","-","-","-","-"
"910","injectorClassName","/** The name of the generated injector for the Hilt class. */
  public ClassName injectorClassName()","0","-","-","-","-"
"911","injectMethodName","/**
   * The name of inject method for this class. The format is: inject$CLASS. If the class is nested,
   * will return the full name deliminated with '_'. e.g. Foo.Bar.Baz -> injectFoo_Bar_Baz
   */
  public String injectMethodName()","0","-","-","-","-"
"912","injectorInstallInAnnotation","/** Returns the @InstallIn annotation for the module providing this class. */
  public final AnnotationSpec injectorInstallInAnnotation()","0","-","-","-","-"
"913","componentManagerParam","public ParameterSpec componentManagerParam()","0","-","-","-","-"
"914","generatedClassModifiers","/**
   * Modifiers that should be applied to the generated class.
   *
   * <p>Note that the generated class must have public visibility if used by a
   * public @AndroidEntryPoint-annotated kotlin class. See:
   * https://discuss.kotlinlang.org/t/why-does-kotlin-prohibit-exposing-restricted-visibility-types/7047
   */
  public Modifier[] generatedClassModifiers()","0","-","-","-","-"
"915","generatedClassName","private static ClassName generatedClassName(XTypeElement element)","0","-","-","-","-"
"916","hiltAnnotations","private static ImmutableSet<XAnnotation> hiltAnnotations(XElement element)","0","-","-","-","-"
"917","hasAndroidEntryPointMetadata","/** Returns true if the given element has Android Entry Point metadata. */
  public static boolean hasAndroidEntryPointMetadata(XElement element)","0","-","-","-","-"
"918","of","/** Returns the","0","-","-","-","-"
"919","manuallyConstruct","public static AndroidEntryPointMetadata manuallyConstruct(
      XTypeElement element,
      XTypeElement baseElement,
      ClassName generatedClassName,
      boolean requiresBytecodeInjection,
      AndroidType androidType,
      Optional<AndroidEntryPointMetadata> baseMetadata,
      ImmutableSet<ClassName> installInComponents,
      TypeName componentManager,
      Optional<CodeBlock> componentManagerInitArgs)","0","-","-","-","-"
"920","of","/**
   * Internal implementation for ""of"" method, checking inheritance cycle utilizing inheritanceTrace
   * along the way.
   */
  private static AndroidEntryPointMetadata of(
      XElement element, LinkedHashSet<XElement> inheritanceTrace)","0","-","-","-","-"
"921","baseMetadata","private static Optional<AndroidEntryPointMetadata> baseMetadata(
      XTypeElement element, XTypeElement baseElement, LinkedHashSet<XElement> inheritanceTrace)","0","-","-","-","-"
"922","cyclicInheritanceErrorMessage","private static String cyclicInheritanceErrorMessage(
      LinkedHashSet<XElement> inheritanceTrace, XTypeElement cycleEntryPoint)","0","-","-","-","-"
"923","Type","Type(
        ClassName component,
        AndroidType androidType,
        ClassName manager,
        CodeBlock componentManagerInitArgs)","0","-","-","-","-"
"924","of","private static Type of(XTypeElement element, XTypeElement baseElement)","0","-","-","-","-"
"925","forHiltAndroidApp","private static Type forHiltAndroidApp(XTypeElement element, XTypeElement baseElement)","0","-","-","-","-"
"926","forAndroidEntryPoint","private static Type forAndroidEntryPoint(XTypeElement element, XTypeElement baseElement)","0","-","-","-","-"
"927","checkConsistentAnnotations","private static void checkConsistentAnnotations(
      XTypeElement element, AndroidEntryPointMetadata baseMetadata)","0","-","-","-","-"
"928","checkAnnotationsMatch","private static void checkAnnotationsMatch(
      XTypeElement element, XTypeElement baseElement, ClassName annotationName)","0","-","-","-","-"
"929","InjectorEntryPointGenerator","public InjectorEntryPointGenerator(XProcessingEnv env, AndroidEntryPointMetadata metadata)","0","-","-","-","-"
"930","generate","public void generate() throws IOException","0","-","-","-","-"
"931","FragmentGenerator","public FragmentGenerator(
      XProcessingEnv env,
      AndroidEntryPointMetadata metadata )","0","-","-","-","-"
"932","generate","public void generate() throws IOException","0","-","-","-","-"
"933","createTypeSpec","TypeSpec createTypeSpec()","0","-","-","-","-"
"934","onAttachContextMethod","private static MethodSpec onAttachContextMethod()","0","-","-","-","-"
"935","onAttachActivityMethod","private static MethodSpec onAttachActivityMethod()","0","-","-","-","-"
"936","initializeComponentContextMethod","private MethodSpec initializeComponentContextMethod()","0","-","-","-","-"
"937","getContextMethod","private MethodSpec getContextMethod()","0","-","-","-","-"
"938","inflatorMethod","private MethodSpec inflatorMethod()","0","-","-","-","-"
"939","getDefaultViewModelProviderFactory","private MethodSpec getDefaultViewModelProviderFactory()","0","-","-","-","-"
"940","addGeneratedBaseClassJavadoc","static void addGeneratedBaseClassJavadoc(TypeSpec.Builder builder, ClassName annotation)","0","-","-","-","-"
"941","copyConstructors","/** Copies all constructors with arguments to the builder. */
  static void copyConstructors(
      XTypeElement baseClass, TypeSpec.Builder builder, XTypeElement subclassReference)","0","-","-","-","-"
"942","copyConstructors","/** Copies all constructors with arguments along with an appended body to the builder. */
  static void copyConstructors(
      XTypeElement baseClass,
      CodeBlock body,
      TypeSpec.Builder builder,
      XTypeElement subclassReference)","0","-","-","-","-"
"943","isConstructorVisibleToSubclass","/**
   * Returns true if the constructor is visible to a subclass in the same package as the reference.
   * A reference is used because usually for generators the subclass is being generated and so
   * doesn't actually exist.
   */
  static boolean isConstructorVisibleToSubclass(
      XConstructorElement constructor, XTypeElement subclassReference)","0","-","-","-","-"
"944","getNullableAnnotationSpec","/** Returns Optional with AnnotationSpec for Nullable if found on element, empty otherwise. */
  private static Optional<AnnotationSpec> getNullableAnnotationSpec(XElement element)","0","-","-","-","-"
"945","withAnyNullnessAnnotation","/** Returns a TypeName for the given type, including any @Nullable annotations on it. */
  private static TypeName withAnyNullnessAnnotation(XType type)","0","-","-","-","-"
"946","getParameterSpecWithNullable","/**
   * Returns a ParameterSpec of the input parameter, @Nullable annotated if existing in original.
   */
  private static ParameterSpec getParameterSpecWithNullable(XVariableElement parameter)","0","-","-","-","-"
"947","copyConstructor","/**
   * Returns a","0","-","-","-","-"
"948","copyConstructor","private static MethodSpec copyConstructor(XConstructorElement constructor, CodeBlock body)","0","-","-","-","-"
"949","copySuppressAnnotations","/** Copies SuppressWarnings annotations from the annotated element to the generated element. */
  static void copySuppressAnnotations(XElement element, TypeSpec.Builder builder)","0","-","-","-","-"
"950","copyLintAnnotations","/**
   * Copies the Android lint annotations from the annotated element to the generated element.
   *
   * <p>Note: For now we only copy over","0","-","-","-","-"
"951","addComponentOverride","static void addComponentOverride(AndroidEntryPointMetadata metadata, TypeSpec.Builder builder)","0","-","-","-","-"
"952","addInjectionMethods","/** Adds the inject() and optionally the componentManager() methods to allow for injection. */
  static void addInjectionMethods(AndroidEntryPointMetadata metadata, TypeSpec.Builder builder)","0","-","-","-","-"
"953","addComponentManagerMethods","private static void addComponentManagerMethods(
      AndroidEntryPointMetadata metadata, TypeSpec.Builder typeSpecBuilder)","0","-","-","-","-"
"954","createComponentManagerMethod","private static MethodSpec createComponentManagerMethod(AndroidEntryPointMetadata metadata)","0","-","-","-","-"
"955","componentManagerField","private static FieldSpec componentManagerField(AndroidEntryPointMetadata metadata)","0","-","-","-","-"
"956","componentManagerLockField","private static FieldSpec componentManagerLockField()","0","-","-","-","-"
"957","addInjectAndMaybeOptionalInjectMethod","private static void addInjectAndMaybeOptionalInjectMethod(
      AndroidEntryPointMetadata metadata, TypeSpec.Builder typeSpecBuilder)","0","-","-","-","-"
"958","getParentCodeBlock","private static CodeBlock getParentCodeBlock(AndroidEntryPointMetadata metadata)","0","-","-","-","-"
"959","generatedComponentCallBlock","/**
   * Returns the call to","0","-","-","-","-"
"960","componentManagerCallBlock","/**
   * Returns the call to","0","-","-","-","-"
"961","unsafeCastThisTo","static CodeBlock unsafeCastThisTo(ClassName castType)","0","-","-","-","-"
"962","ancestorExtendsGeneratedHiltClass","/** Returns","0","-","-","-","-"
"963","injectedField","private static FieldSpec injectedField(AndroidEntryPointMetadata metadata)","0","-","-","-","-"
"964","injectedLockField","private static FieldSpec injectedLockField()","0","-","-","-","-"
"965","Generators","private Generators()","0","-","-","-","-"
"966","AndroidEntryPointProcessingStep","public AndroidEntryPointProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"967","annotationClassNames","@Override
  protected ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"968","processEach","@Override
  public void processEach(ClassName annotation, XElement element) throws Exception","0","-","-","-","-"
"969","KspAndroidEntryPointProcessor","public KspAndroidEntryPointProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"970","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"971","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"972","ServiceGenerator","public ServiceGenerator(XProcessingEnv env, AndroidEntryPointMetadata metadata)","0","-","-","-","-"
"973","generate","public void generate() throws IOException","0","-","-","-","-"
"974","onCreateMethod","private MethodSpec onCreateMethod() throws IOException","0","-","-","-","-"
"975","ViewGenerator","public ViewGenerator(XProcessingEnv env, AndroidEntryPointMetadata metadata)","0","-","-","-","-"
"976","generate","public void generate()","0","-","-","-","-"
"977","constructorMethod","/**
   * Returns a pass-through constructor matching the base class's provided constructorElement. The
   * generated constructor simply calls super(), then inject().
   *
   * <p>Eg
   *
   * <pre>
   *   Hilt_$CLASS(Context context, ...)","0","-","-","-","-"
"978","isRestrictedApiConstructor","private boolean isRestrictedApiConstructor(XConstructorElement constructor)","0","-","-","-","-"
"979","isFourthRestrictedParameter","private static boolean isFourthRestrictedParameter(XType type)","0","-","-","-","-"
"980","isThirdRestrictedParameter","private static boolean isThirdRestrictedParameter(XType type)","0","-","-","-","-"
"981","isSecondRestrictedParameter","private static boolean isSecondRestrictedParameter(XType type)","0","-","-","-","-"
"982","isFirstRestrictedParameter","private static boolean isFirstRestrictedParameter(XType type)","0","-","-","-","-"
"983","KspBindValueProcessor","public KspBindValueProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"984","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"985","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment environment)","0","-","-","-","-"
"986","BindValueGenerator","BindValueGenerator(XProcessingEnv env, BindValueMetadata metadata)","0","-","-","-","-"
"987","generate","void generate() throws IOException","0","-","-","-","-"
"988","providesTestMethod","private MethodSpec providesTestMethod()","0","-","-","-","-"
"989","providesMethod","private MethodSpec providesMethod(BindValueElement bindValue)","0","-","-","-","-"
"990","processingStep","@Override
  protected BaseProcessingStep processingStep()","0","-","-","-","-"
"991","testElement","/**
   * @return the","0","-","-","-","-"
"992","bindValueElements","/** @return a","0","-","-","-","-"
"993","create","/**
   * @return a new BindValueMetadata instance.
   */
  static BindValueMetadata create(
      XTypeElement testElement, Collection<XElement> bindValueElements)","0","-","-","-","-"
"994","fieldElement","abstract XFieldElement fieldElement();","0","-","-","-","-"
"995","annotationName","abstract ClassName annotationName();","0","-","-","-","-"
"996","qualifier","abstract Optional<XAnnotation> qualifier();","0","-","-","-","-"
"997","mapKey","abstract Optional<XAnnotation> mapKey();","0","-","-","-","-"
"998","getterElement","abstract Optional<XMethodElement> getterElement();","0","-","-","-","-"
"999","create","static BindValueElement create(XElement element)","0","-","-","-","-"
"1000","BindValueProcessingStep","public BindValueProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"1001","annotationClassNames","@Override
  protected ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"1002","preProcess","@Override
  protected void preProcess(XProcessingEnv env, XRoundEnv round)","0","-","-","-","-"
"1003","processEach","@Override
  public void processEach(ClassName annotation, XElement element)","0","-","-","-","-"
"1004","postProcess","@Override
  protected void postProcess(XProcessingEnv env, XRoundEnv round) throws Exception","0","-","-","-","-"
"1005","getBindValueAnnotations","static ImmutableList<ClassName> getBindValueAnnotations(XElement element)","0","-","-","-","-"
"1006","CustomTestApplicationProcessingStep","public CustomTestApplicationProcessingStep(XProcessingEnv env)","0","-","-","-","-"
"1007","annotationClassNames","@Override
  protected ImmutableSet<ClassName> annotationClassNames()","0","-","-","-","-"
"1008","processEach","@Override
  public void processEach(ClassName annotation, XElement element) throws Exception","0","-","-","-","-"
"1009","CustomTestApplicationGenerator","public CustomTestApplicationGenerator(
      XProcessingEnv processingEnv, CustomTestApplicationMetadata metadata)","0","-","-","-","-"
"1010","generate","public void generate() throws IOException","0","-","-","-","-"
"1011","getComponentManagerField","/** private TestApplicationComponentManager componentManager; */
  private static FieldSpec getComponentManagerField()","0","-","-","-","-"
"1012","getComponentMethod","private static MethodSpec getComponentMethod()","0","-","-","-","-"
"1013","getComponentManagerMethod","private static MethodSpec getComponentManagerMethod()","0","-","-","-","-"
"1014","KspCustomTestApplicationProcessor","public KspCustomTestApplicationProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"1015","processingStep","@Override
  protected CustomTestApplicationProcessingStep processingStep()","0","-","-","-","-"
"1016","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"1017","processingStep","@Override
  protected CustomTestApplicationProcessingStep processingStep()","0","-","-","-","-"
"1018","element","/** Returns the annotated element. */
  abstract XTypeElement element();","0","-","-","-","-"
"1019","baseAppName","/** Returns the name of the base application. */
  abstract ClassName baseAppName();","0","-","-","-","-"
"1020","appName","/** Returns the name of the generated application */
  ClassName appName()","0","-","-","-","-"
"1021","of","static CustomTestApplicationMetadata of(XElement element)","0","-","-","-","-"
"1022","getBaseElement","private static XTypeElement getBaseElement(XElement element)","0","-","-","-","-"
"1023","initialize","public void initialize(
      XProcessingEnv env,
      Optional<ImmutableSet<BindingGraphPlugin>> testingPlugins,
      Optional<ImmutableSet<dagger.spi.BindingGraphPlugin>> legacyTestingPlugins)","0","-","-","-","-"
"1024","processingSteps","public Iterable<XProcessingStep> processingSteps()","0","-","-","-","-"
"1025","onProcessingRoundBegin","public void onProcessingRoundBegin()","0","-","-","-","-"
"1026","postRound","public void postRound(XProcessingEnv env, XRoundEnv roundEnv)","0","-","-","-","-"
"1027","inject","void inject(DelegateComponentProcessor processor);","0","-","-","-","-"
"1028","create","@CheckReturnValue
      Injector create(
          @BindsInstance XProcessingEnv processingEnv,
          @BindsInstance @External ImmutableSet<BindingGraphPlugin> externalPlugins,
          @BindsInstance @External
              ImmutableSet<dagger.spi.BindingGraphPlugin> legacyExternalPlugins);","0","-","-","-","-"
"1029","anyBindingMethodValidator","@Binds
    @IntoSet
    ClearableCache anyBindingMethodValidator(AnyBindingMethodValidator cache);","0","-","-","-","-"
"1030","injectValidator","@Binds
    @IntoSet
    ClearableCache injectValidator(InjectValidator cache);","0","-","-","-","-"
"1031","moduleDescriptorFactory","@Binds
    @IntoSet
    ClearableCache moduleDescriptorFactory(ModuleDescriptor.Factory cache);","0","-","-","-","-"
"1032","componentDescriptorFactory","@Binds
    @IntoSet
    ClearableCache componentDescriptorFactory(ComponentDescriptor.Factory cache);","0","-","-","-","-"
"1033","monitoringModules","@Binds
    @IntoSet
    ClearableCache monitoringModules(MonitoringModules cache);","0","-","-","-","-"
"1034","componentValidator","@Binds
    @IntoSet
    ClearableCache componentValidator(ComponentValidator cache);","0","-","-","-","-"
"1035","componentCreatorValidator","@Binds
    @IntoSet
    ClearableCache componentCreatorValidator(ComponentCreatorValidator cache);","0","-","-","-","-"
"1036","kotlinMetadata","@Binds
    @IntoSet
    ClearableCache kotlinMetadata(KotlinMetadataFactory cache);","0","-","-","-","-"
"1037","factoryGenerator","@Provides
    static SourceFileGenerator<ContributionBinding> factoryGenerator(
        FactoryGenerator generator,
        CompilerOptions compilerOptions,
        XProcessingEnv processingEnv)","0","-","-","-","-"
"1038","producerFactoryGenerator","@Provides
    static SourceFileGenerator<ProductionBinding> producerFactoryGenerator(
        ProducerFactoryGenerator generator,
        CompilerOptions compilerOptions,
        XProcessingEnv processingEnv)","0","-","-","-","-"
"1039","membersInjectorGenerator","@Provides
    static SourceFileGenerator<MembersInjectionBinding> membersInjectorGenerator(
        MembersInjectorGenerator generator,
        CompilerOptions compilerOptions,
        XProcessingEnv processingEnv)","0","-","-","-","-"
"1040","moduleConstructorProxyGenerator","@Provides
    @ModuleGenerator
    static SourceFileGenerator<XTypeElement> moduleConstructorProxyGenerator(
        ModuleConstructorProxyGenerator generator,
        CompilerOptions compilerOptions,
        XProcessingEnv processingEnv)","0","-","-","-","-"
"1041","hjarWrapper","private static <T> SourceFileGenerator<T> hjarWrapper(
      SourceFileGenerator<T> generator,
      CompilerOptions compilerOptions,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"1042","addSupertype","/**
   * If","0","-","-","-","-"
"1043","TypeSpecs","private TypeSpecs()","0","-","-","-","-"
"1044","Suppression","Suppression(String... values)","0","-","-","-","-"
"1045","suppressWarnings","/** Creates an","0","-","-","-","-"
"1046","suppressWarnings","/** Creates an","0","-","-","-","-"
"1047","AnnotationSpecs","private AnnotationSpecs()","0","-","-","-","-"
"1048","toParametersCodeBlock","/**
   * Joins","0","-","-","-","-"
"1049","toConcatenatedCodeBlock","/** Concatenates","0","-","-","-","-"
"1050","makeParametersCodeBlock","/** Returns a comma-separated version of","0","-","-","-","-"
"1051","parameterNames","/**
   * Returns a comma-separated","0","-","-","-","-"
"1052","concat","/**
   * Returns one unified","0","-","-","-","-"
"1053","anonymousLazy","/**
   * Returns an anonymous","0","-","-","-","-"
"1054","cast","/** Returns","0","-","-","-","-"
"1055","cast","/** Returns","0","-","-","-","-"
"1056","type","public static CodeBlock type(XType type)","0","-","-","-","-"
"1057","stringLiteral","public static CodeBlock stringLiteral(String toWrap)","0","-","-","-","-"
"1058","CodeBlocks","private CodeBlocks()","0","-","-","-","-"
"1059","bindCompilerOptions","@Binds
  @Reusable // to avoid parsing options more than once
  CompilerOptions bindCompilerOptions(
      ProcessingEnvironmentCompilerOptions processingEnvironmentCompilerOptions);","0","-","-","-","-"
"1060","processingOptions","@Provides
  @ProcessingOptions
  static Map<String, String> processingOptions(XProcessingEnv xProcessingEnv)","0","-","-","-","-"
"1061","messager","@Provides
  static XMessager messager(XProcessingEnv xProcessingEnv)","0","-","-","-","-"
"1062","filer","@Provides
  static XFiler filer(CompilerOptions compilerOptions, XProcessingEnv xProcessingEnv)","0","-","-","-","-"
"1063","typeElement","abstract XTypeElement typeElement();","0","-","-","-","-"
"1064","classMetadata","abstract ClassMetadata classMetadata();","0","-","-","-","-"
"1065","methodDescriptors","@Memoized
  ImmutableMap<String, XMethodElement> methodDescriptors()","0","-","-","-","-"
"1066","getSyntheticAnnotationMethod","/** Gets the synthetic method for annotations of a given field element. */
  Optional<XMethodElement> getSyntheticAnnotationMethod(XFieldElement fieldElement)","0","-","-","-","-"
"1067","isMissingSyntheticAnnotationMethod","/**
   * Returns true if the synthetic method for annotations is missing. This can occur when inspecting
   * the Kotlin metadata of a property from another compilation unit.
   */
  boolean isMissingSyntheticAnnotationMethod(XFieldElement fieldElement)","0","-","-","-","-"
"1068","getAnnotationMethod","private Optional<MethodForAnnotations> getAnnotationMethod(XFieldElement fieldElement)","0","-","-","-","-"
"1069","getAnnotationMethodUncached","private Optional<MethodForAnnotations> getAnnotationMethodUncached(XFieldElement fieldElement)","0","-","-","-","-"
"1070","getPropertyGetter","/** Gets the getter method of a given field element corresponding to a property. */
  Optional<XMethodElement> getPropertyGetter(XFieldElement fieldElement)","0","-","-","-","-"
"1071","getPropertyGetterUncached","private Optional<XMethodElement> getPropertyGetterUncached(XFieldElement fieldElement)","0","-","-","-","-"
"1072","findProperty","private PropertyMetadata findProperty(XFieldElement field)","0","-","-","-","-"
"1073","getPropertyNameFromField","private static String getPropertyNameFromField(XFieldElement field)","0","-","-","-","-"
"1074","from","/** Parse Kotlin class metadata from a given type element. */
  static KotlinMetadata from(XTypeElement typeElement)","0","-","-","-","-"
"1075","create","static MethodForAnnotations create(XMethodElement method)","0","-","-","-","-"
"1076","method","@Nullable
    abstract XMethodElement method();","0","-","-","-","-"
"1077","KotlinMetadataUtil","@Inject
  KotlinMetadataUtil(KotlinMetadataFactory metadataFactory)","0","-","-","-","-"
"1078","hasMetadata","/**
   * Returns","0","-","-","-","-"
"1079","getSyntheticPropertyAnnotations","/**
   * Returns the synthetic annotations of a Kotlin property.
   *
   * <p>Note that this method only looks for additional annotations in the synthetic property
   * method, if any, of a Kotlin property and not for annotations in its backing field.
   */
  public ImmutableSet<XAnnotation> getSyntheticPropertyAnnotations(
      XFieldElement fieldElement, XClassName annotationType)","0","-","-","-","-"
"1080","isMissingSyntheticPropertyForAnnotations","/**
   * Returns","0","-","-","-","-"
"1081","getPropertyGetter","public Optional<XMethodElement> getPropertyGetter(XFieldElement fieldElement)","0","-","-","-","-"
"1082","getAllMethodNamesBySignature","/**
   * Returns a map mapping all method signatures within the given class element, including methods
   * that it inherits from its ancestors, to their method names.
   */
  public ImmutableMap<String, String> getAllMethodNamesBySignature(XTypeElement element)","0","-","-","-","-"
"1083","KotlinMetadataFactory","@Inject
  KotlinMetadataFactory()","0","-","-","-","-"
"1084","create","/**
   * Parses and returns the","0","-","-","-","-"
"1085","clearCache","@Override
  public void clearCache()","0","-","-","-","-"
"1086","annotation","/** The annotation that specifies that","0","-","-","-","-"
"1087","typeElement","/**
   * The element that defines the component. This is the element to which the","0","-","-","-","-"
"1088","dependencies","/**
   * The set of component dependencies listed in","0","-","-","-","-"
"1089","modules","/**
   * The","0","-","-","-","-"
"1090","scopes","/** The scopes of the component. */
  public abstract ImmutableSet<Scope> scopes();","0","-","-","-","-"
"1091","childComponentsDeclaredByModules","/**
   * All","0","-","-","-","-"
"1092","childComponentsDeclaredByFactoryMethods","/**
   * All","0","-","-","-","-"
"1093","childComponentsDeclaredByBuilderEntryPoints","/**
   * All","0","-","-","-","-"
"1094","componentMethods","public abstract ImmutableSet<ComponentMethodDescriptor> componentMethods();","0","-","-","-","-"
"1095","creatorDescriptor","/** Returns a descriptor for the creator type for this component type, if the user defined one. */
  public abstract Optional<ComponentCreatorDescriptor> creatorDescriptor();","0","-","-","-","-"
"1096","isSubcomponent","/** Returns","0","-","-","-","-"
"1097","isProduction","/**
   * Returns","0","-","-","-","-"
"1098","isRealComponent","/**
   * Returns","0","-","-","-","-"
"1099","dependenciesAndConcreteModules","/** The non-abstract","0","-","-","-","-"
"1100","moduleTypes","/** The types of the","0","-","-","-","-"
"1101","requirements","/**
   * The types for which the component will need instances if all of its bindings are used. For the
   * types the component will need in a given binding graph, use","0","-","-","-","-"
"1102","dependenciesByDependencyMethod","/**
   * Returns this component's dependencies keyed by its provision/production method.
   *
   * <p>Note that the dependencies' types are not simply the enclosing type of the method; a method
   * may be declared by a supertype of the actual dependency.
   */
  @Memoized
  public ImmutableMap<XMethodElement, ComponentRequirement> dependenciesByDependencyMethod()","0","-","-","-","-"
"1103","getDependencyThatDefinesMethod","/** The","0","-","-","-","-"
"1104","childComponents","/**
   * All","0","-","-","-","-"
"1105","childComponentsByElement","/** Returns a map of","0","-","-","-","-"
"1106","getFactoryMethodForChildComponent","/** Returns the factory method that declares a child component. */
  final Optional<ComponentMethodDescriptor> getFactoryMethodForChildComponent(
      ComponentDescriptor childComponent)","0","-","-","-","-"
"1107","getChildComponentWithBuilderType","/** Returns the child component with the given builder type. */
  final ComponentDescriptor getChildComponentWithBuilderType(XTypeElement builderType)","0","-","-","-","-"
"1108","entryPointMethods","/** The entry point methods on the component type. Each has a","0","-","-","-","-"
"1109","hasCreator","/**
   * Returns","0","-","-","-","-"
"1110","cancellationPolicy","/**
   * Returns the","0","-","-","-","-"
"1111","bindings","/** Returns the bindings for the component. */
  @Memoized
  public ImmutableSet<ContributionBinding> bindings()","0","-","-","-","-"
"1112","componentBinding","/** Returns the binding for the component, itself, if this is a real component. */
  @Memoized
  Optional<ContributionBinding> componentBinding()","0","-","-","-","-"
"1113","componentDependencyBindings","/** Returns the bindings for the component dependency and those contributed by its methods. */
  @Memoized
  ImmutableSet<ContributionBinding> componentDependencyBindings()","0","-","-","-","-"
"1114","boundInstanceBindings","/** Returns the","0","-","-","-","-"
"1115","subcomponentCreatorBindings","/** Returns the subcomponent creator bindings for this component. */
  @Memoized
  ImmutableSet<ContributionBinding> subcomponentCreatorBindings()","0","-","-","-","-"
"1116","moduleBindings","@Memoized
  ImmutableSet<ContributionBinding> moduleBindings()","0","-","-","-","-"
"1117","delegateDeclarations","@Memoized
  public ImmutableSet<DelegateDeclaration> delegateDeclarations()","0","-","-","-","-"
"1118","multibindingDeclarations","@Memoized
  public ImmutableSet<MultibindingDeclaration> multibindingDeclarations()","0","-","-","-","-"
"1119","optionalBindingDeclarations","@Memoized
  public ImmutableSet<OptionalBindingDeclaration> optionalBindingDeclarations()","0","-","-","-","-"
"1120","subcomponentDeclarations","@Memoized
  public ImmutableSet<SubcomponentDeclaration> subcomponentDeclarations()","0","-","-","-","-"
"1121","hashCode","@Memoized
  @Override
  public int hashCode()","0","-","-","-","-"
"1122","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1123","methodElement","/** The method itself. Note that this may be declared on a supertype of the component. */
    public abstract XMethodElement methodElement();","0","-","-","-","-"
"1124","dependencyRequest","/**
     * The dependency request for production, provision, and subcomponent creator methods. Absent
     * for subcomponent factory methods.
     */
    public abstract Optional<DependencyRequest> dependencyRequest();","0","-","-","-","-"
"1125","subcomponent","/** The subcomponent for subcomponent factory methods and subcomponent creator methods. */
    public abstract Optional<ComponentDescriptor> subcomponent();","0","-","-","-","-"
"1126","builder","/** A","0","-","-","-","-"
"1127","methodElement","/** @see ComponentMethodDescriptor#methodElement() */
      Builder methodElement(XMethodElement methodElement);","0","-","-","-","-"
"1128","dependencyRequest","/**
       * @see ComponentMethodDescriptor#dependencyRequest()
       */
      @CanIgnoreReturnValue // TODO(kak): remove this once open-source checkers understand AutoValue
      Builder dependencyRequest(DependencyRequest dependencyRequest);","0","-","-","-","-"
"1129","subcomponent","/**
       * @see ComponentMethodDescriptor#subcomponent()
       */
      @CanIgnoreReturnValue // TODO(kak): remove this once open-source checkers understand AutoValue
      Builder subcomponent(ComponentDescriptor subcomponent);","0","-","-","-","-"
"1130","build","/** Builds the descriptor. */
      ComponentMethodDescriptor build();","0","-","-","-","-"
"1131","isComponentContributionMethod","/**
   * Returns","0","-","-","-","-"
"1132","isComponentProductionMethod","/** Returns","0","-","-","-","-"
"1133","Factory","@Inject
    Factory(
        XProcessingEnv processingEnv,
        BindingFactory bindingFactory,
        DependencyRequestFactory dependencyRequestFactory,
        ModuleDescriptor.Factory moduleDescriptorFactory,
        InjectionAnnotations injectionAnnotations,
        DaggerSuperficialValidation superficialValidation)","0","-","-","-","-"
"1134","rootComponentDescriptor","/** Returns a descriptor for a root component type. */
    public ComponentDescriptor rootComponentDescriptor(XTypeElement typeElement)","0","-","-","-","-"
"1135","subcomponentDescriptor","/** Returns a descriptor for a subcomponent type. */
    public ComponentDescriptor subcomponentDescriptor(XTypeElement typeElement)","0","-","-","-","-"
"1136","moduleComponentDescriptor","/**
     * Returns a descriptor for a fictional component based on a module type in order to validate
     * its bindings.
     */
    public ComponentDescriptor moduleComponentDescriptor(XTypeElement typeElement)","0","-","-","-","-"
"1137","create","private ComponentDescriptor create(
        XTypeElement typeElement, ComponentAnnotation componentAnnotation)","0","-","-","-","-"
"1138","createUncached","private ComponentDescriptor createUncached(
        XTypeElement typeElement, ComponentAnnotation componentAnnotation)","0","-","-","-","-"
"1139","getDescriptorForComponentMethod","private ComponentMethodDescriptor getDescriptorForComponentMethod(
        ComponentAnnotation componentAnnotation,
        XTypeElement componentElement,
        XMethodElement componentMethod)","0","-","-","-","-"
"1140","clearCache","@Override
    public void clearCache()","0","-","-","-","-"
"1141","getOrFindInjectionBinding","/**
   * Returns an injection binding for","0","-","-","-","-"
"1142","getOrFindMembersInjectionBinding","/**
   * Returns a","0","-","-","-","-"
"1143","getOrFindMembersInjectorBinding","/**
   * Returns a","0","-","-","-","-"
"1144","tryRegisterInjectConstructor","@CanIgnoreReturnValue
  Optional<ContributionBinding> tryRegisterInjectConstructor(
      XConstructorElement constructorElement);","0","-","-","-","-"
"1145","tryRegisterInjectField","@CanIgnoreReturnValue
  Optional<MembersInjectionBinding> tryRegisterInjectField(XFieldElement fieldElement);","0","-","-","-","-"
"1146","tryRegisterInjectMethod","@CanIgnoreReturnValue
  Optional<MembersInjectionBinding> tryRegisterInjectMethod(XMethodElement methodElement);","0","-","-","-","-"
"1147","generateSourcesForRequiredBindings","/**
   * This method ensures that sources for all registered","0","-","-","-","-"
"1148","create","public static ComponentNode create(
      ComponentPath componentPath, ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"1149","isSubcomponent","@Override
  public final boolean isSubcomponent()","0","-","-","-","-"
"1150","isRealComponent","@Override
  public boolean isRealComponent()","0","-","-","-","-"
"1151","entryPoints","@Override
  public final ImmutableSet<DependencyRequest> entryPoints()","0","-","-","-","-"
"1152","scopes","@Override
  public ImmutableSet<Scope> scopes()","0","-","-","-","-"
"1153","componentDescriptor","public abstract ComponentDescriptor componentDescriptor();","0","-","-","-","-"
"1154","toString","@Override
  public final String toString()","0","-","-","-","-"
"1155","DependencyRequestFormatter","@Inject
  DependencyRequestFormatter(XProcessingEnv processingEnv)","0","-","-","-","-"
"1156","formatEdges","public String formatEdges(ImmutableCollection<DependencyEdge> edges, BindingGraph graph)","0","-","-","-","-"
"1157","formatEdge","public String formatEdge(DependencyEdge edge, BindingGraph graph)","0","-","-","-","-"
"1158","format","@Override
  public String format(DependencyRequest request)","0","-","-","-","-"
"1159","format","private  String format(Optional<XTypeElement> optionalComponent, DependencyRequest request)","0","-","-","-","-"
"1160","formatQualifier","private static String formatQualifier(Optional<DaggerAnnotation> maybeQualifier)","0","-","-","-","-"
"1161","componentMethodRequestVerb","/**
   * Returns the verb for a component method dependency request. Returns ""produced"", ""provided"", or
   * ""injected"", depending on the kind of request.
   */
  private static String componentMethodRequestVerb(DependencyRequest request)","0","-","-","-","-"
"1162","isBoundInstance","public boolean isBoundInstance()","0","-","-","-","-"
"1163","isModule","public boolean isModule()","0","-","-","-","-"
"1164","kind","/** The kind of requirement. */
  public abstract Kind kind();","0","-","-","-","-"
"1165","isBoundInstance","/** Returns true if this is a","0","-","-","-","-"
"1166","typeName","/** The type of the instance the component must have. */
  abstract TypeName typeName();","0","-","-","-","-"
"1167","type","/** The type of the instance the component must have. */
  public XType type()","0","-","-","-","-"
"1168","typeElement","/** The element associated with the type of this requirement. */
  public XTypeElement typeElement()","0","-","-","-","-"
"1169","overrideNullPolicy","/**
   * An override for the requirement's null policy. If set, this is used as the null policy instead
   * of the default behavior in","0","-","-","-","-"
"1170","getNullability","/**
   * The nullability of the requirement. If set, this is used to determine the nullability of the
   * requirement's type.
   */
  public Nullability getNullability()","0","-","-","-","-"
"1171","nullPolicy","/** The requirement's null policy. */
  public NullPolicy nullPolicy()","0","-","-","-","-"
"1172","requiresAPassedInstance","/**
   * Returns true if the passed","0","-","-","-","-"
"1173","requiresModuleInstance","/**
   * Returns","0","-","-","-","-"
"1174","isBindingMethod","private boolean isBindingMethod(XMethodElement method)","0","-","-","-","-"
"1175","key","/** The key for this requirement, if one is available. */
  public abstract Optional<Key> key();","0","-","-","-","-"
"1176","variableName","/** Returns the name for this requirement that could be used as a variable. */
  public abstract String variableName();","0","-","-","-","-"
"1177","toParameterSpec","/** Returns a parameter spec for this requirement. */
  public ParameterSpec toParameterSpec()","0","-","-","-","-"
"1178","forDependency","public static ComponentRequirement forDependency(ComponentDependencyBinding binding)","0","-","-","-","-"
"1179","forDependency","public static ComponentRequirement forDependency(XType type)","0","-","-","-","-"
"1180","forModule","public static ComponentRequirement forModule(XType type)","0","-","-","-","-"
"1181","forBoundInstance","public static ComponentRequirement forBoundInstance(BoundInstanceBinding binding)","0","-","-","-","-"
"1182","forBoundInstance","static ComponentRequirement forBoundInstance(
      Key key, boolean nullable, XElement elementForVariableName, Nullability nullability)","0","-","-","-","-"
"1183","create","private static ComponentRequirement create(Kind kind, XType type)","0","-","-","-","-"
"1184","create","private static ComponentRequirement create(
      Kind kind,
      XType type,
      Optional<NullPolicy> overrideNullPolicy,
      Optional<Key> key,
      Nullability nullability,
      String variableName)","0","-","-","-","-"
"1185","componentCanMakeNewInstances","/**
   * Returns true if and only if a component can instantiate new instances (typically of a module)
   * rather than requiring that they be passed.
   */
  // TODO(bcorso): Should this method throw if its called knowing that an instance is not needed?
  public static boolean componentCanMakeNewInstances(XTypeElement typeElement)","0","-","-","-","-"
"1186","requiresEnclosingInstance","private static boolean requiresEnclosingInstance(XTypeElement typeElement)","0","-","-","-","-"
"1187","hasVisibleDefaultConstructor","private static boolean hasVisibleDefaultConstructor(XTypeElement typeElement)","0","-","-","-","-"
"1188","name","abstract String name();","0","-","-","-","-"
"1189","parameterTypes","abstract ImmutableList<TypeName> parameterTypes();","0","-","-","-","-"
"1190","thrownTypes","abstract ImmutableList<TypeName> thrownTypes();","0","-","-","-","-"
"1191","forComponentMethod","public static MethodSignature forComponentMethod(
      ComponentMethodDescriptor componentMethod,
      XType componentType,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"1192","delegate","public abstract Binding delegate();","0","-","-","-","-"
"1193","multibindingDeclarations","public abstract ImmutableSet<MultibindingDeclaration> multibindingDeclarations();","0","-","-","-","-"
"1194","optionalBindingDeclarations","public abstract ImmutableSet<OptionalBindingDeclaration> optionalBindingDeclarations();","0","-","-","-","-"
"1195","subcomponentDeclarations","public abstract ImmutableSet<SubcomponentDeclaration> subcomponentDeclarations();","0","-","-","-","-"
"1196","associatedDeclarations","/**
   * The elements (other than the binding's","0","-","-","-","-"
"1197","key","@Override
  public Key key()","0","-","-","-","-"
"1198","dependencies","@Override
  public ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1199","bindingElement","@Override
  public Optional<DaggerElement> bindingElement()","0","-","-","-","-"
"1200","contributingModule","@Override
  public Optional<DaggerTypeElement> contributingModule()","0","-","-","-","-"
"1201","requiresModuleInstance","@Override
  public boolean requiresModuleInstance()","0","-","-","-","-"
"1202","scope","@Override
  public Optional<Scope> scope()","0","-","-","-","-"
"1203","isNullable","@Override
  public boolean isNullable()","0","-","-","-","-"
"1204","isProduction","@Override
  public boolean isProduction()","0","-","-","-","-"
"1205","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1206","toString","@Override
  public final String toString()","0","-","-","-","-"
"1207","withBindingType","public BindingNode withBindingType(BindingType bindingType)","0","-","-","-","-"
"1208","Factory","@Inject
    Factory(DeclarationFormatter declarationFormatter)","0","-","-","-","-"
"1209","forContributionBindings","public BindingNode forContributionBindings(
        ComponentPath component,
        ContributionBinding delegate,
        Iterable<MultibindingDeclaration> multibindingDeclarations,
        Iterable<OptionalBindingDeclaration> optionalBindingDeclarations,
        Iterable<SubcomponentDeclaration> subcomponentDeclarations)","0","-","-","-","-"
"1210","forMembersInjectionBinding","public BindingNode forMembersInjectionBinding(
        ComponentPath component, MembersInjectionBinding delegate)","0","-","-","-","-"
"1211","create","private BindingNode create(
        ComponentPath component,
        Binding delegate,
        ImmutableSet<MultibindingDeclaration> multibindingDeclarations,
        ImmutableSet<OptionalBindingDeclaration> optionalBindingDeclarations,
        ImmutableSet<SubcomponentDeclaration> subcomponentDeclarations)","0","-","-","-","-"
"1212","create","private static BindingNode create(
      ComponentPath component,
      Binding delegate,
      ImmutableSet<MultibindingDeclaration> multibindingDeclarations,
      ImmutableSet<OptionalBindingDeclaration> optionalBindingDeclarations,
      ImmutableSet<SubcomponentDeclaration> subcomponentDeclarations,
      DeclarationFormatter declarationFormatter)","0","-","-","-","-"
"1213","getMapKey","/**
   * If","0","-","-","-","-"
"1214","getMapKeys","/** Returns all of the","0","-","-","-","-"
"1215","unwrapValue","/**
   * Returns the annotation value if","0","-","-","-","-"
"1216","mapKeyType","static XType mapKeyType(XAnnotation mapKey)","0","-","-","-","-"
"1217","getUnwrappedMapKeyType","/**
   * Returns the map key type for an unwrapped","0","-","-","-","-"
"1218","getMapKeyExpression","/**
   * Returns a code block for","0","-","-","-","-"
"1219","directMapKeyExpression","/**
   * Returns a code block for the map key annotation","0","-","-","-","-"
"1220","mapKeyProxyClassName","/**
   * Returns the","0","-","-","-","-"
"1221","mapKeyFactoryMethod","/**
   * A","0","-","-","-","-"
"1222","useLazyClassKey","/**
   * Returns if this binding is a map binding and uses @LazyClassKey for contributing class keys.
   *
   * <p>@LazyClassKey won't co-exist with @ClassKey in the graph, since the same binding type cannot
   * use more than one @MapKey annotation type and Dagger validation will fail.
   */
  public static boolean useLazyClassKey(Binding binding, BindingGraph graph)","0","-","-","-","-"
"1223","getLazyClassMapKeyExpression","public static XCodeBlock getLazyClassMapKeyExpression(ContributionBinding contributionBinding)","0","-","-","-","-"
"1224","lazyClassKeyProxyClassName","public static XClassName lazyClassKeyProxyClassName(XMethodElement methodElement)","0","-","-","-","-"
"1225","MapKeys","private MapKeys()","0","-","-","-","-"
"1226","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1227","optionalBindingType","@Override
  public Optional<BindingType> optionalBindingType()","0","-","-","-","-"
"1228","contributionType","@Override
  public ContributionType contributionType()","0","-","-","-","-"
"1229","nullability","@Override
  public Nullability nullability()","0","-","-","-","-"
"1230","dependencies","@Override
  public ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1231","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1232","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1233","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1234","builder","static Builder builder()","0","-","-","-","-"
"1235","requiresModuleInstance","/**
   * Returns","0","-","-","-","-"
"1236","isNullable","/**
   * Returns","0","-","-","-","-"
"1237","kind","/** The kind of binding this instance represents. */
  public abstract BindingKind kind();","0","-","-","-","-"
"1238","dependencies","/** The set of","0","-","-","-","-"
"1239","unresolved","/**
   * If this binding's key's type parameters are different from those of the","0","-","-","-","-"
"1240","scope","/** Returns the optional scope used on the binding. */
  public abstract Optional<Scope> scope();","0","-","-","-","-"
"1241","InjectionAnnotations","@Inject
  InjectionAnnotations(
      XProcessingEnv processingEnv,
      KotlinMetadataUtil kotlinMetadataUtil,
      DaggerSuperficialValidation superficialValidation,
      CompilerOptions compilerOptions)","0","-","-","-","-"
"1242","getScope","/**
   * Returns the scope on the given element if it exists.
   *
   * <p>The","0","-","-","-","-"
"1243","getScopes","/**
   * Returns the scopes on the given element, or an empty set if none exist.
   *
   * <p>Note: Use","0","-","-","-","-"
"1244","getScopesWithoutMetadata","private ImmutableSet<Scope> getScopesWithoutMetadata(XElement element)","0","-","-","-","-"
"1245","getScopesWithMetadata","private Optional<ImmutableSet<Scope>> getScopesWithMetadata(XElement element)","0","-","-","-","-"
"1246","getScopeMetadata","private Optional<XAnnotation> getScopeMetadata(XElement element)","0","-","-","-","-"
"1247","getGeneratedNameForScopeMetadata","private Optional<XClassName> getGeneratedNameForScopeMetadata(XElement element)","0","-","-","-","-"
"1248","getQualifier","/**
   * Returns the qualifier on the given element if it exists.
   *
   * <p>The","0","-","-","-","-"
"1249","getQualifiers","public ImmutableSet<XAnnotation> getQualifiers(XElement element)","0","-","-","-","-"
"1250","getQualifiersWithoutMetadata","private ImmutableSet<XAnnotation> getQualifiersWithoutMetadata(XElement element)","0","-","-","-","-"
"1251","getQualifiersWithMetadata","private Optional<ImmutableSet<XAnnotation>> getQualifiersWithMetadata(XElement element)","0","-","-","-","-"
"1252","getQualifierMetadata","/**
   * Returns","0","-","-","-","-"
"1253","getGeneratedNameForQualifierMetadata","private Optional<XClassName> getGeneratedNameForQualifierMetadata(XElement element)","0","-","-","-","-"
"1254","injectedConstructors","/** Returns the constructors in","0","-","-","-","-"
"1255","hasQualifierAnnotation","private static boolean hasQualifierAnnotation(XAnnotation annotation)","0","-","-","-","-"
"1256","hasScopeAnnotation","private static boolean hasScopeAnnotation(XAnnotation annotation)","0","-","-","-","-"
"1257","hasInjectAnnotation","/** Returns true if the given element is annotated with","0","-","-","-","-"
"1258","hasInjectOrAssistedInjectAnnotation","private static boolean hasInjectOrAssistedInjectAnnotation(XElement element)","0","-","-","-","-"
"1259","getQualifiersForKotlinProperty","/**
   * Gets the qualifiers annotation of a Kotlin Property. Finding these annotations involve finding
   * the synthetic method for annotations as described by the Kotlin metadata or finding the
   * corresponding MembersInjector method for the field, which also contains the qualifier
   * annotation.
   */
  private ImmutableSet<XAnnotation> getQualifiersForKotlinProperty(XFieldElement field)","0","-","-","-","-"
"1260","BindingFactory","@Inject
  BindingFactory(
      KeyFactory keyFactory,
      DependencyRequestFactory dependencyRequestFactory,
      InjectionSiteFactory injectionSiteFactory,
      InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"1261","injectionBinding","/**
   * Returns an","0","-","-","-","-"
"1262","assistedInjectionBinding","/**
   * Returns an","0","-","-","-","-"
"1263","assistedFactoryBinding","public AssistedFactoryBinding assistedFactoryBinding(
      XTypeElement factory, Optional<XType> resolvedFactoryType)","0","-","-","-","-"
"1264","providesMethodBinding","/**
   * Returns a","0","-","-","-","-"
"1265","producesMethodBinding","/**
   * Returns a","0","-","-","-","-"
"1266","multiboundMap","/**
   * Returns a","0","-","-","-","-"
"1267","multiboundSet","/**
   * Returns a","0","-","-","-","-"
"1268","multibindingBindingType","private Optional<BindingType> multibindingBindingType(
      Key key, Iterable<ContributionBinding> multibindingContributions)","0","-","-","-","-"
"1269","componentBinding","/**
   * Returns a","0","-","-","-","-"
"1270","componentDependencyBinding","/**
   * Returns a","0","-","-","-","-"
"1271","componentDependencyProvisionMethodBinding","/**
   * Returns a","0","-","-","-","-"
"1272","componentDependencyProductionMethodBinding","/**
   * Returns a","0","-","-","-","-"
"1273","boundInstanceBinding","/**
   * Returns a","0","-","-","-","-"
"1274","subcomponentCreatorBinding","/**
   * Returns a","0","-","-","-","-"
"1275","subcomponentCreatorBinding","/**
   * Returns a","0","-","-","-","-"
"1276","delegateBinding","/** Returns a","0","-","-","-","-"
"1277","delegateBinding","/**
   * Returns a","0","-","-","-","-"
"1278","delegateBinding","private DelegateBinding delegateBinding(
      DelegateDeclaration delegateDeclaration, Optional<BindingType> optionalBindingType)","0","-","-","-","-"
"1279","unresolvedDelegateBinding","/**
   * Returns a","0","-","-","-","-"
"1280","delegateBindingType","private Optional<BindingType> delegateBindingType(Optional<ContributionBinding> actualBinding)","0","-","-","-","-"
"1281","syntheticPresentOptionalDeclaration","/** Returns an","0","-","-","-","-"
"1282","presentOptionalBindingType","private Optional<BindingType> presentOptionalBindingType(
      Key key, ImmutableCollection<Binding> optionalContributions)","0","-","-","-","-"
"1283","syntheticAbsentOptionalDeclaration","/** Returns an","0","-","-","-","-"
"1284","membersInjectorBinding","/** Returns a","0","-","-","-","-"
"1285","membersInjectionBinding","/**
   * Returns a","0","-","-","-","-"
"1286","checkIsSameErasedType","private void checkIsSameErasedType(XType type1, XType type2)","0","-","-","-","-"
"1287","hasNonDefaultTypeParameters","private static boolean hasNonDefaultTypeParameters(XType type)","0","-","-","-","-"
"1288","componentMessagesFor","public static ComponentMessages componentMessagesFor(ComponentKind componentKind)","0","-","-","-","-"
"1289","componentMessagesFor","public static ComponentMessages componentMessagesFor(ComponentAnnotation componentAnnotation)","0","-","-","-","-"
"1290","creatorMessagesFor","public static ComponentCreatorMessages creatorMessagesFor(
      ComponentCreatorAnnotation creatorAnnotation)","0","-","-","-","-"
"1291","transformation","private static Function<String, String> transformation(
      boolean isProduction, boolean isSubcomponent)","0","-","-","-","-"
"1292","Messages","Messages(Function<String, String> transformation)","0","-","-","-","-"
"1293","process","protected final String process(String s)","0","-","-","-","-"
"1294","ComponentMessages","ComponentMessages(Function<String, String> transformation)","0","-","-","-","-"
"1295","moreThanOne","public final String moreThanOne()","0","-","-","-","-"
"1296","ComponentCreatorMessages","ComponentCreatorMessages(Function<String, String> transformation)","0","-","-","-","-"
"1297","builderMethodRequiresNoArgs","public static String builderMethodRequiresNoArgs()","0","-","-","-","-"
"1298","moreThanOneRefToSubcomponent","public static String moreThanOneRefToSubcomponent()","0","-","-","-","-"
"1299","invalidConstructor","public final String invalidConstructor()","0","-","-","-","-"
"1300","generics","public final String generics()","0","-","-","-","-"
"1301","mustBeInComponent","public final String mustBeInComponent()","0","-","-","-","-"
"1302","mustBeClassOrInterface","public final String mustBeClassOrInterface()","0","-","-","-","-"
"1303","isPrivate","public final String isPrivate()","0","-","-","-","-"
"1304","mustBeStatic","public final String mustBeStatic()","0","-","-","-","-"
"1305","mustBeAbstract","public final String mustBeAbstract()","0","-","-","-","-"
"1306","missingFactoryMethod","public abstract String missingFactoryMethod();","0","-","-","-","-"
"1307","multipleSettersForModuleOrDependencyType","public abstract String multipleSettersForModuleOrDependencyType();","0","-","-","-","-"
"1308","extraSetters","public abstract String extraSetters();","0","-","-","-","-"
"1309","missingSetters","public abstract String missingSetters();","0","-","-","-","-"
"1310","twoFactoryMethods","public abstract String twoFactoryMethods();","0","-","-","-","-"
"1311","inheritedTwoFactoryMethods","public abstract String inheritedTwoFactoryMethods();","0","-","-","-","-"
"1312","factoryMethodMustReturnComponentType","public abstract String factoryMethodMustReturnComponentType();","0","-","-","-","-"
"1313","inheritedFactoryMethodMustReturnComponentType","public final String inheritedFactoryMethodMustReturnComponentType()","0","-","-","-","-"
"1314","factoryMethodMayNotBeAnnotatedWithBindsInstance","public abstract String factoryMethodMayNotBeAnnotatedWithBindsInstance();","0","-","-","-","-"
"1315","inheritedFactoryMethodMayNotBeAnnotatedWithBindsInstance","public final String inheritedFactoryMethodMayNotBeAnnotatedWithBindsInstance()","0","-","-","-","-"
"1316","setterMethodsMustTakeOneArg","public final String setterMethodsMustTakeOneArg()","0","-","-","-","-"
"1317","inheritedSetterMethodsMustTakeOneArg","public final String inheritedSetterMethodsMustTakeOneArg()","0","-","-","-","-"
"1318","setterMethodsMustReturnVoidOrBuilder","public final String setterMethodsMustReturnVoidOrBuilder()","0","-","-","-","-"
"1319","inheritedSetterMethodsMustReturnVoidOrBuilder","public final String inheritedSetterMethodsMustReturnVoidOrBuilder()","0","-","-","-","-"
"1320","methodsMayNotHaveTypeParameters","public final String methodsMayNotHaveTypeParameters()","0","-","-","-","-"
"1321","inheritedMethodsMayNotHaveTypeParameters","public final String inheritedMethodsMayNotHaveTypeParameters()","0","-","-","-","-"
"1322","nonBindsInstanceParametersMayNotBePrimitives","public abstract String nonBindsInstanceParametersMayNotBePrimitives();","0","-","-","-","-"
"1323","inheritedNonBindsInstanceParametersMayNotBePrimitives","public final String inheritedNonBindsInstanceParametersMayNotBePrimitives()","0","-","-","-","-"
"1324","factoryMethodReturnsSupertypeWithMissingMethods","public final String factoryMethodReturnsSupertypeWithMissingMethods(
        XTypeElement component,
        XTypeElement componentBuilder,
        XType returnType,
        XMethodElement buildMethod,
        ImmutableCollection<XMethodElement> additionalMethods)","0","-","-","-","-"
"1325","bindsInstanceNotAllowedOnBothSetterMethodAndParameter","public final String bindsInstanceNotAllowedOnBothSetterMethodAndParameter()","0","-","-","-","-"
"1326","inheritedBindsInstanceNotAllowedOnBothSetterMethodAndParameter","public final String inheritedBindsInstanceNotAllowedOnBothSetterMethodAndParameter()","0","-","-","-","-"
"1327","BuilderMessages","BuilderMessages(Function<String, String> transformation)","0","-","-","-","-"
"1328","missingFactoryMethod","@Override
    public String missingFactoryMethod()","0","-","-","-","-"
"1329","multipleSettersForModuleOrDependencyType","@Override
    public String multipleSettersForModuleOrDependencyType()","0","-","-","-","-"
"1330","extraSetters","@Override
    public String extraSetters()","0","-","-","-","-"
"1331","missingSetters","@Override
    public String missingSetters()","0","-","-","-","-"
"1332","twoFactoryMethods","@Override
    public String twoFactoryMethods()","0","-","-","-","-"
"1333","inheritedTwoFactoryMethods","@Override
    public String inheritedTwoFactoryMethods()","0","-","-","-","-"
"1334","factoryMethodMustReturnComponentType","@Override
    public String factoryMethodMustReturnComponentType()","0","-","-","-","-"
"1335","factoryMethodMayNotBeAnnotatedWithBindsInstance","@Override
    public String factoryMethodMayNotBeAnnotatedWithBindsInstance()","0","-","-","-","-"
"1336","nonBindsInstanceParametersMayNotBePrimitives","@Override
    public String nonBindsInstanceParametersMayNotBePrimitives()","0","-","-","-","-"
"1337","FactoryMessages","FactoryMessages(Function<String, String> transformation)","0","-","-","-","-"
"1338","missingFactoryMethod","@Override
    public String missingFactoryMethod()","0","-","-","-","-"
"1339","multipleSettersForModuleOrDependencyType","@Override
    public String multipleSettersForModuleOrDependencyType()","0","-","-","-","-"
"1340","extraSetters","@Override
    public String extraSetters()","0","-","-","-","-"
"1341","missingSetters","@Override
    public String missingSetters()","0","-","-","-","-"
"1342","twoFactoryMethods","@Override
    public String twoFactoryMethods()","0","-","-","-","-"
"1343","inheritedTwoFactoryMethods","@Override
    public String inheritedTwoFactoryMethods()","0","-","-","-","-"
"1344","factoryMethodMustReturnComponentType","@Override
    public String factoryMethodMustReturnComponentType()","0","-","-","-","-"
"1345","factoryMethodMayNotBeAnnotatedWithBindsInstance","@Override
    public String factoryMethodMayNotBeAnnotatedWithBindsInstance()","0","-","-","-","-"
"1346","nonBindsInstanceParametersMayNotBePrimitives","@Override
    public String nonBindsInstanceParametersMayNotBePrimitives()","0","-","-","-","-"
"1347","ErrorMessages","private ErrorMessages()","0","-","-","-","-"
"1348","DependencyRequestFactory","@Inject
  DependencyRequestFactory(KeyFactory keyFactory, InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"1349","forRequiredResolvedVariables","ImmutableSet<DependencyRequest> forRequiredResolvedVariables(
      List<? extends XVariableElement> variables, List<XType> resolvedTypes)","0","-","-","-","-"
"1350","forMultibindingContributions","/**
   * Creates synthetic dependency requests for each individual multibinding contribution in","0","-","-","-","-"
"1351","forMultibindingContribution","/** Creates a synthetic dependency request for one individual","0","-","-","-","-"
"1352","multibindingContributionRequestKind","private RequestKind multibindingContributionRequestKind(
      Key multibindingKey, ContributionBinding multibindingContribution)","0","-","-","-","-"
"1353","forRequiredResolvedVariable","DependencyRequest forRequiredResolvedVariable(
      XVariableElement variableElement, XType resolvedType)","0","-","-","-","-"
"1354","forComponentProvisionMethod","public DependencyRequest forComponentProvisionMethod(
      XMethodElement provisionMethod, XMethodType provisionMethodType)","0","-","-","-","-"
"1355","forComponentProductionMethod","public DependencyRequest forComponentProductionMethod(
      XMethodElement productionMethod, XMethodType productionMethodType)","0","-","-","-","-"
"1356","forComponentMembersInjectionMethod","DependencyRequest forComponentMembersInjectionMethod(
      XMethodElement membersInjectionMethod, XMethodType membersInjectionMethodType)","0","-","-","-","-"
"1357","forProductionImplementationExecutor","DependencyRequest forProductionImplementationExecutor()","0","-","-","-","-"
"1358","forProductionComponentMonitor","DependencyRequest forProductionComponentMonitor()","0","-","-","-","-"
"1359","forSyntheticPresentOptionalBinding","/**
   * Returns a synthetic request for the present value of an optional binding generated from a
   *","0","-","-","-","-"
"1360","newDependencyRequest","private DependencyRequest newDependencyRequest(
      XElement requestElement, XType type, Optional<XAnnotation> qualifier)","0","-","-","-","-"
"1361","allowsNull","/**
   * Returns","0","-","-","-","-"
"1362","requestKindImplicitlyAllowsNull","private boolean requestKindImplicitlyAllowsNull(RequestKind kind)","0","-","-","-","-"
"1363","BindsTypeChecker","@Inject
  BindsTypeChecker(XProcessingEnv processingEnv)","0","-","-","-","-"
"1364","isAssignable","/**
   * Checks the assignability of","0","-","-","-","-"
"1365","isAssignable","/**
   * Checks the assignability of","0","-","-","-","-"
"1366","desiredAssignableType","private XType desiredAssignableType(XType leftHandSide, ContributionType contributionType)","0","-","-","-","-"
"1367","methodParameterTypes","private ImmutableList<XType> methodParameterTypes(XType type, String methodName)","0","-","-","-","-"
"1368","methodParameterType","private XType methodParameterType(XType type, String methodName)","0","-","-","-","-"
"1369","setElement","private XTypeElement setElement()","0","-","-","-","-"
"1370","mapElement","private XTypeElement mapElement()","0","-","-","-","-"
"1371","unboundedWildcard","private XType unboundedWildcard()","0","-","-","-","-"
"1372","ComponentDeclarations","private ComponentDeclarations(
      KeyFactory keyFactory,
      ImmutableSetMultimap<Key, ContributionBinding> bindings,
      ImmutableSetMultimap<Key, DelegateDeclaration> delegates,
      ImmutableSetMultimap<Key, OptionalBindingDeclaration> optionalBindings,
      ImmutableSetMultimap<Key, SubcomponentDeclaration> subcomponents,
      ImmutableSetMultimap<TypeNameKey, MultibindingDeclaration> multibindings,
      ImmutableSetMultimap<TypeNameKey, ContributionBinding> multibindingContributions,
      ImmutableSetMultimap<TypeNameKey, DelegateDeclaration> delegateMultibindingContributions)","0","-","-","-","-"
"1373","bindings","ImmutableSet<ContributionBinding> bindings(Key key)","0","-","-","-","-"
"1374","delegates","ImmutableSet<DelegateDeclaration> delegates(Key key)","0","-","-","-","-"
"1375","delegateMultibindingContributions","/**
   * Returns the delegate multibinding contributions (e.g.","0","-","-","-","-"
"1376","multibindings","/**
   * Returns the multibinding declarations (i.e.","0","-","-","-","-"
"1377","multibindingContributions","/**
   * Returns the multibinding contributions (e.g.","0","-","-","-","-"
"1378","optionalBindings","ImmutableSet<OptionalBindingDeclaration> optionalBindings(Key key)","0","-","-","-","-"
"1379","subcomponents","ImmutableSet<SubcomponentDeclaration> subcomponents(Key key)","0","-","-","-","-"
"1380","allDeclarations","ImmutableSet<Declaration> allDeclarations()","0","-","-","-","-"
"1381","Factory","@Inject
    Factory(
        XProcessingEnv processingEnv,
        KeyFactory keyFactory,
        ModuleDescriptor.Factory moduleDescriptorFactory)","0","-","-","-","-"
"1382","create","ComponentDeclarations create(
        Optional<ComponentDescriptor> parentDescriptor, ComponentDescriptor descriptor)","0","-","-","-","-"
"1383","implicitProductionModules","/**
     * Returns all the modules that should be installed in the component. For production components
     * and production subcomponents that have a parent that is not a production component or
     * subcomponent, also includes the production monitoring module for the component and the
     * production executor module.
     */
    private ImmutableSet<ModuleDescriptor> implicitProductionModules(
        ComponentDescriptor descriptor, Optional<ComponentDescriptor> parentDescriptor)","0","-","-","-","-"
"1384","shouldIncludeImplicitProductionModules","private static boolean shouldIncludeImplicitProductionModules(
        ComponentDescriptor descriptor, Optional<ComponentDescriptor> parentDescriptor)","0","-","-","-","-"
"1385","indexDeclarationsByKey","/** Indexes","0","-","-","-","-"
"1386","indexDeclarationsByUnwrappedMultibindingKey","/** Indexes","0","-","-","-","-"
"1387","multibindingContributions","private static <T extends Declaration> ImmutableSet<T> multibindingContributions(
        ImmutableSet<T> declarations)","0","-","-","-","-"
"1388","unwrapMultibindingKey","/**
   * Returns a","0","-","-","-","-"
"1389","unwrapMultibindingTypeName","private static TypeName unwrapMultibindingTypeName(TypeName typeName)","0","-","-","-","-"
"1390","isValidMapMultibindingTypeName","private static boolean isValidMapMultibindingTypeName(TypeName typeName)","0","-","-","-","-"
"1391","isValidSetMultibindingTypeName","private static boolean isValidSetMultibindingTypeName(TypeName typeName)","0","-","-","-","-"
"1392","unwrapFrameworkTypeName","private static TypeName unwrapFrameworkTypeName(
      TypeName typeName, ImmutableSet<XClassName> frameworkTypeNames)","0","-","-","-","-"
"1393","from","static TypeNameKey from(
        Optional<MultibindingContributionIdentifier> multibindingContributionIdentifier,
        Optional<DaggerAnnotation> qualifier,
        TypeName typeName)","0","-","-","-","-"
"1394","multibindingContributionIdentifier","abstract Optional<MultibindingContributionIdentifier> multibindingContributionIdentifier();","0","-","-","-","-"
"1395","qualifier","abstract Optional<DaggerAnnotation> qualifier();","0","-","-","-","-"
"1396","type","abstract TypeName type();","0","-","-","-","-"
"1397","MonitoringModules","@Inject
  MonitoringModules()","0","-","-","-","-"
"1398","add","public void add(XClassName module)","0","-","-","-","-"
"1399","isEmpty","public boolean isEmpty()","0","-","-","-","-"
"1400","clearCache","@Override
  public void clearCache()","0","-","-","-","-"
"1401","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1402","optionalBindingType","@Override
  public Optional<BindingType> optionalBindingType()","0","-","-","-","-"
"1403","contributionType","@Override
  public ContributionType contributionType()","0","-","-","-","-"
"1404","nullability","@Override
  public Nullability nullability()","0","-","-","-","-"
"1405","dependencies","@Override
  public ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1406","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1407","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1408","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1409","builder","static Builder builder()","0","-","-","-","-"
"1410","moduleElement","public abstract XTypeElement moduleElement();","0","-","-","-","-"
"1411","bindings","public abstract ImmutableSet<ContributionBinding> bindings();","0","-","-","-","-"
"1412","multibindingDeclarations","/** The multibinding declarations contained in this module. */
  abstract ImmutableSet<MultibindingDeclaration> multibindingDeclarations();","0","-","-","-","-"
"1413","subcomponentDeclarations","/** The","0","-","-","-","-"
"1414","delegateDeclarations","/** The","0","-","-","-","-"
"1415","optionalDeclarations","/** The","0","-","-","-","-"
"1416","kind","/** The kind of the module. */
  public abstract ModuleKind kind();","0","-","-","-","-"
"1417","isImplicitlyIncluded","/** Whether the module is implicitly included rather than directly referenced in annotation. */
  public abstract boolean isImplicitlyIncluded();","0","-","-","-","-"
"1418","allBindingDeclarations","/** Returns all of the bindings declared in this module. */
  @Memoized
  public ImmutableSet<Declaration> allBindingDeclarations()","0","-","-","-","-"
"1419","allBindingKeys","/** Returns the keys of all bindings declared by this module. */
  ImmutableSet<Key> allBindingKeys()","0","-","-","-","-"
"1420","Factory","@Inject
    Factory(
        XProcessingEnv processingEnv,
        BindingFactory bindingFactory,
        MultibindingDeclaration.Factory multibindingDeclarationFactory,
        DelegateDeclaration.Factory bindingDelegateDeclarationFactory,
        SubcomponentDeclaration.Factory subcomponentDeclarationFactory,
        OptionalBindingDeclaration.Factory optionalBindingDeclarationFactory,
        DaggerSuperficialValidation superficialValidation)","0","-","-","-","-"
"1421","create","public ModuleDescriptor create(XTypeElement moduleElement)","0","-","-","-","-"
"1422","createUncached","public ModuleDescriptor createUncached(XTypeElement moduleElement)","0","-","-","-","-"
"1423","collectCompanionModuleBindings","private void collectCompanionModuleBindings(
        XTypeElement companionModule, ImmutableSet.Builder<ContributionBinding> bindings)","0","-","-","-","-"
"1424","transitiveModules","/** Returns all the modules transitively included by given modules, including the arguments. */
    ImmutableSet<ModuleDescriptor> transitiveModules(Collection<XTypeElement> modules)","0","-","-","-","-"
"1425","includedModules","private ImmutableSet<XTypeElement> includedModules(ModuleDescriptor moduleDescriptor)","0","-","-","-","-"
"1426","collectIncludedModules","private Set<XTypeElement> collectIncludedModules(
        Set<XTypeElement> includedModules, XTypeElement moduleElement)","0","-","-","-","-"
"1427","implicitlyIncludedModules","private ImmutableSet<XTypeElement> implicitlyIncludedModules(XTypeElement module)","0","-","-","-","-"
"1428","implicitlyIncludedModuleName","private XClassName implicitlyIncludedModuleName(XTypeElement module, XMethodElement method)","0","-","-","-","-"
"1429","clearCache","@Override
    public void clearCache()","0","-","-","-","-"
"1430","key","/**
   * Key for the","0","-","-","-","-"
"1431","subcomponentType","/**
   * The type element that defines the","0","-","-","-","-"
"1432","moduleAnnotation","/** The module annotation. */
  public abstract ModuleAnnotation moduleAnnotation();","0","-","-","-","-"
"1433","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1434","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1435","Factory","@Inject
    Factory(KeyFactory keyFactory, DaggerSuperficialValidation superficialValidation)","0","-","-","-","-"
"1436","forModule","ImmutableSet<SubcomponentDeclaration> forModule(XTypeElement module)","0","-","-","-","-"
"1437","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1438","contributionType","@Override
  public ContributionType contributionType()","0","-","-","-","-"
"1439","nullability","@Override
  public Nullability nullability()","0","-","-","-","-"
"1440","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1441","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1442","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1443","builder","static Builder builder()","0","-","-","-","-"
"1444","dependencies","abstract Builder dependencies(ImmutableSet<DependencyRequest> dependencies);","0","-","-","-","-"
"1445","optionalBindingType","abstract Builder optionalBindingType(Optional<BindingType> optionalBindingType);","0","-","-","-","-"
"1446","DeclarationFormatter","@Inject
  DeclarationFormatter(MethodSignatureFormatter methodSignatureFormatter)","0","-","-","-","-"
"1447","canFormat","/**
   * Returns","0","-","-","-","-"
"1448","format","@Override
  public String format(Declaration declaration)","0","-","-","-","-"
"1449","formatSubcomponentDeclaration","private String formatSubcomponentDeclaration(SubcomponentDeclaration subcomponentDeclaration)","0","-","-","-","-"
"1450","create","private static TopLevelBindingGraph create(
        ImmutableNetwork<Node, Edge> network,
        boolean isFullBindingGraph)","0","-","-","-","-"
"1451","TopLevelBindingGraph","TopLevelBindingGraph()","0","-","-","-","-"
"1452","componentNode","@Override
    public Optional<ComponentNode> componentNode(ComponentPath componentPath)","0","-","-","-","-"
"1453","subcomponentNodes","/** Returns the set of subcomponent nodes of the given component node. */
    ImmutableSet<ComponentNode> subcomponentNodes(ComponentNode componentNode)","0","-","-","-","-"
"1454","nodesByClass","@Override
    @Memoized
    public ImmutableSetMultimap<Class<? extends Node>, ? extends Node> nodesByClass()","0","-","-","-","-"
"1455","dependencyGraph","@Override
    @Memoized
    protected ImmutableNetwork<Node, DependencyEdge> dependencyGraph()","0","-","-","-","-"
"1456","bindingsByComponent","/**
     * Returns an index of each","0","-","-","-","-"
"1457","nodeOrder","/** Returns a","0","-","-","-","-"
"1458","stronglyConnectedNodes","/** Returns the set of strongly connected nodes in this graph in reverse topological order. */
    @Memoized
    public ImmutableList<ImmutableSet<Node>> stronglyConnectedNodes()","0","-","-","-","-"
"1459","hasFrameworkRequest","public boolean hasFrameworkRequest(Binding binding)","0","-","-","-","-"
"1460","frameworkRequestBindingSet","private static ImmutableSet<Binding> frameworkRequestBindingSet(
        ImmutableNetwork<Node, Edge> network,
        ImmutableSet<dagger.internal.codegen.model.Binding> bindings)","0","-","-","-","-"
"1461","create","static BindingGraph create(
        ImmutableNetwork<Node, Edge> network,
        boolean isFullBindingGraph)","0","-","-","-","-"
"1462","create","private static BindingGraph create(
      Optional<BindingGraph> parent,
      ComponentNode componentNode,
      TopLevelBindingGraph topLevelBindingGraph)","0","-","-","-","-"
"1463","BindingGraph","BindingGraph()","0","-","-","-","-"
"1464","componentNode","/** Returns the","0","-","-","-","-"
"1465","componentPath","/** Returns the","0","-","-","-","-"
"1466","topLevelBindingGraph","/** Returns the","0","-","-","-","-"
"1467","componentDescriptor","/** Returns the","0","-","-","-","-"
"1468","entryPointMethods","/** Returns all entry point methods for this component. */
  @Memoized
  public ImmutableSet<ComponentMethodDescriptor> entryPointMethods()","0","-","-","-","-"
"1469","findFirstMatchingComponentMethod","public Optional<ComponentMethodDescriptor> findFirstMatchingComponentMethod(
      BindingRequest request)","0","-","-","-","-"
"1470","firstMatchingComponentMethods","@Memoized
  ImmutableMap<BindingRequest, ComponentMethodDescriptor> firstMatchingComponentMethods()","0","-","-","-","-"
"1471","localContributionBinding","/**
   * Returns the","0","-","-","-","-"
"1472","localMembersInjectionBinding","/**
   * Returns the","0","-","-","-","-"
"1473","contributionBinding","/** Returns the","0","-","-","-","-"
"1474","membersInjectionBinding","/**
   * Returns the","0","-","-","-","-"
"1475","componentTypeElement","/** Returns the","0","-","-","-","-"
"1476","ownedModuleTypes","/**
   * Returns the set of modules that are owned by this graph regardless of whether or not any of
   * their bindings are used in this graph. For graphs representing top-level","0","-","-","-","-"
"1477","factoryMethod","/**
   * Returns the factory method for this subcomponent, if it exists.
   *
   * <p>This factory method is the one defined in the parent component's interface.
   *
   * <p>In the example below, the","0","-","-","-","-"
"1478","factoryMethodParameters","/**
   * Returns a map between the","0","-","-","-","-"
"1479","componentRequirements","/**
   * The types for which the component needs instances.
   *
   * <ul>
   *   <li>component dependencies
   *   <li>owned modules with concrete instance bindings that are used in the graph
   *   <li>bound instances
   * </ul>
   */
  @Memoized
  public ImmutableSet<ComponentRequirement> componentRequirements()","0","-","-","-","-"
"1480","componentDescriptorsByPath","/**
   * Returns all","0","-","-","-","-"
"1481","subgraphs","@Memoized
  public ImmutableList<BindingGraph> subgraphs()","0","-","-","-","-"
"1482","localBindingNodes","/** Returns the list of all","0","-","-","-","-"
"1483","bindingNodes","public ImmutableSet<BindingNode> bindingNodes()","0","-","-","-","-"
"1484","SourceFiles","@Inject SourceFiles()","0","-","-","-","-"
"1485","generateBindingFieldsForDependencies","/**
   * Generates names and keys for the factory class fields needed to hold the framework classes for
   * all of the dependencies of","0","-","-","-","-"
"1486","frameworkTypeUsageStatement","public XCodeBlock frameworkTypeUsageStatement(
      XCodeBlock frameworkTypeMemberSelect, RequestKind dependencyKind)","0","-","-","-","-"
"1487","frameworkFieldUsages","/**
   * Returns a mapping of","0","-","-","-","-"
"1488","generatedProxyMethodName","public static String generatedProxyMethodName(ContributionBinding binding)","0","-","-","-","-"
"1489","generatedClassNameForBinding","/** Returns the generated factory or members injector name for a binding. */
  public static XClassName generatedClassNameForBinding(Binding binding)","0","-","-","-","-"
"1490","factoryNameForElement","/**
   * Returns the generated factory name for the given element.
   *
   * <p>This method is useful during validation before a","0","-","-","-","-"
"1491","elementBasedClassName","/**
   * Calculates an appropriate","0","-","-","-","-"
"1492","parameterizedGeneratedTypeNameForBinding","public static XTypeName parameterizedGeneratedTypeNameForBinding(Binding binding)","0","-","-","-","-"
"1493","membersInjectorNameForType","public static XClassName membersInjectorNameForType(XTypeElement typeElement)","0","-","-","-","-"
"1494","memberInjectedFieldSignatureForVariable","public static String memberInjectedFieldSignatureForVariable(XFieldElement field)","0","-","-","-","-"
"1495","membersInjectorMethodName","public static String membersInjectorMethodName(InjectionSite injectionSite)","0","-","-","-","-"
"1496","classFileName","public static String classFileName(XClassName className)","0","-","-","-","-"
"1497","generatedMonitoringModuleName","public static XClassName generatedMonitoringModuleName(XTypeElement componentElement)","0","-","-","-","-"
"1498","siblingClassName","private static XClassName siblingClassName(XTypeElement typeElement, String suffix)","0","-","-","-","-"
"1499","setFactoryClassName","/**
   * The","0","-","-","-","-"
"1500","mapFactoryClassName","/** The","0","-","-","-","-"
"1501","bindingTypeElementTypeVariableNames","public static ImmutableList<XTypeName> bindingTypeElementTypeVariableNames(Binding binding)","0","-","-","-","-"
"1502","simpleVariableName","/**
   * Returns a name to be used for variables of the given","0","-","-","-","-"
"1503","simpleVariableName","/**
   * Returns a name to be used for variables of the given","0","-","-","-","-"
"1504","protectAgainstKeywords","public static String protectAgainstKeywords(String candidateName)","0","-","-","-","-"
"1505","BindingGraphFactory","@Inject
  BindingGraphFactory(
      LegacyBindingGraphFactory legacyBindingGraphFactory,
      InjectBindingRegistry injectBindingRegistry,
      KeyFactory keyFactory,
      BindingFactory bindingFactory,
      BindingNode.Factory bindingNodeFactory,
      ComponentDeclarations.Factory componentDeclarationsFactory,
      CompilerOptions compilerOptions)","0","-","-","-","-"
"1506","create","/**
   * Creates a binding graph for a component.
   *
   * @param createFullBindingGraph if","0","-","-","-","-"
"1507","createBindingGraph","private BindingGraph createBindingGraph(
      ComponentDescriptor componentDescriptor, boolean createFullBindingGraph)","0","-","-","-","-"
"1508","Resolver","Resolver(ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"1509","Resolver","Resolver(Resolver parentResolver, ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"1510","Resolver","private Resolver(Optional<Resolver> parentResolver, ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"1511","resolve","void resolve(boolean createFullBindingGraph)","0","-","-","-","-"
"1512","lookUpBindings","/**
     * Returns the resolved contribution bindings for the given","0","-","-","-","-"
"1513","isCorrectlyScopedInSubcomponent","/**
     * Returns true if this binding graph resolution is for a subcomponent and the","0","-","-","-","-"
"1514","rootComponent","private ComponentDescriptor rootComponent()","0","-","-","-","-"
"1515","lookUpMembersInjectionBinding","/** Returns the resolved members injection bindings for the given","0","-","-","-","-"
"1516","addSubcomponentToOwningResolver","/**
     * When a binding is resolved for a","0","-","-","-","-"
"1517","createDelegateBindings","private ImmutableSet<ContributionBinding> createDelegateBindings(
        ImmutableSet<DelegateDeclaration> delegateDeclarations)","0","-","-","-","-"
"1518","getBindingNodeOwnedByAncestor","/**
     * Returns a","0","-","-","-","-"
"1519","canBeResolvedInParent","private boolean canBeResolvedInParent(Key requestKey, ContributionBinding binding)","0","-","-","-","-"
"1520","getOwningResolver","private Optional<Resolver> getOwningResolver(ContributionBinding binding)","0","-","-","-","-"
"1521","containsExplicitBinding","private boolean containsExplicitBinding(ContributionBinding binding)","0","-","-","-","-"
"1522","resolverContainsDelegateDeclarationForBinding","/** Returns true if","0","-","-","-","-"
"1523","getResolverLineage","/** Returns the resolver lineage from parent to child. */
    private ImmutableList<Resolver> getResolverLineage()","0","-","-","-","-"
"1524","getLocalExplicitBindings","/**
     * Returns the explicit","0","-","-","-","-"
"1525","getLocalMultibindingContributions","/**
     * Returns the explicit multibinding contributions that contribute to the map or set requested
     * by","0","-","-","-","-"
"1526","getOptionalBindingDeclarations","/**
     * Returns the","0","-","-","-","-"
"1527","getPreviouslyResolvedBindings","/**
     * Returns the","0","-","-","-","-"
"1528","resolveMembersInjectionKey","private ResolvedBindings resolveMembersInjectionKey(Key key)","0","-","-","-","-"
"1529","resolveContributionKey","@CanIgnoreReturnValue
    private ResolvedBindings resolveContributionKey(Key key)","0","-","-","-","-"
"1530","resolveDependencies","/** Resolves each of the dependencies of the bindings owned by this component. */
    private void resolveDependencies(ResolvedBindings resolvedBindings)","0","-","-","-","-"
"1531","addNodes","private void addNodes(ResolvedBindings resolvedBindings)","0","-","-","-","-"
"1532","addNode","private void addNode(Node node)","0","-","-","-","-"
"1533","addDependencyEdges","private void addDependencyEdges(
        Node parent, ResolvedBindings dependencies, DependencyRequest request)","0","-","-","-","-"
"1534","addDependencyEdge","private void addDependencyEdge(Node source, Node target, DependencyRequest request)","0","-","-","-","-"
"1535","addSubcomponentEdge","private void addSubcomponentEdge(BindingNode binding)","0","-","-","-","-"
"1536","addChildFactoryMethodEdge","private void addChildFactoryMethodEdge(Resolver subcomponentResolver)","0","-","-","-","-"
"1537","addEdge","private void addEdge(Node source, Node target, Edge edge)","0","-","-","-","-"
"1538","missingBinding","private MissingBinding missingBinding(Key key)","0","-","-","-","-"
"1539","rootResolver","private Resolver rootResolver()","0","-","-","-","-"
"1540","requiresResolution","boolean requiresResolution(BindingNode binding)","0","-","-","-","-"
"1541","isNotAllowedToFloat","private boolean isNotAllowedToFloat(BindingNode binding)","0","-","-","-","-"
"1542","dependsOnMissingBinding","private boolean dependsOnMissingBinding(BindingNode binding)","0","-","-","-","-"
"1543","dependsOnLocalBinding","private boolean dependsOnLocalBinding(BindingNode binding)","0","-","-","-","-"
"1544","visitUncachedDependencies","private void visitUncachedDependencies(BindingNode binding)","0","-","-","-","-"
"1545","stronglyConnectedNodes","/**
       * Returns a list of strongly connected components in reverse topological order, starting from
       * the given","0","-","-","-","-"
"1546","dependencyStream","private Stream<Node> dependencyStream(Node node)","0","-","-","-","-"
"1547","shouldCheckDependencies","private boolean shouldCheckDependencies(Node node)","0","-","-","-","-"
"1548","isScopedToComponent","private boolean isScopedToComponent(BindingNode binding)","0","-","-","-","-"
"1549","isMissingBinding","private boolean isMissingBinding(Node binding)","0","-","-","-","-"
"1550","hasLocalBindings","private boolean hasLocalBindings(Node node)","0","-","-","-","-"
"1551","hasLocalMultibindingContributions","/**
     * Returns","0","-","-","-","-"
"1552","hasLocalOptionalBindingContribution","/**
     * Returns","0","-","-","-","-"
"1553","hasLocalExplicitBindings","/**
     * Returns","0","-","-","-","-"
"1554","hasDuplicateExplicitBinding","/** Returns","0","-","-","-","-"
"1555","AnnotationExpression","AnnotationExpression(XAnnotation annotation)","0","-","-","-","-"
"1556","getAnnotationInstanceExpression","/**
   * Returns an expression that calls static methods on the annotation's creator class to create an
   * annotation instance equivalent the annotation passed to the constructor.
   */
  XCodeBlock getAnnotationInstanceExpression()","0","-","-","-","-"
"1557","getAnnotationInstanceExpression","private XCodeBlock getAnnotationInstanceExpression(XAnnotation annotation)","0","-","-","-","-"
"1558","getAnnotationCreatorClassName","/**
   * Returns the name of the generated class that contains the static","0","-","-","-","-"
"1559","createMethodName","public static String createMethodName(XTypeElement annotationType)","0","-","-","-","-"
"1560","getValueExpression","/**
   * Returns an expression that evaluates to a","0","-","-","-","-"
"1561","create","/**
   * Creates a framework field.
   *
   * @param fieldName the base name of the field. The name of the raw type of the field will be
   *     added as a suffix
   * @param frameworkClassName the framework class that wraps the type (e.g.,","0","-","-","-","-"
"1562","forBinding","/**
   * A framework field for a","0","-","-","-","-"
"1563","bindingName","private static String bindingName(ContributionBinding binding)","0","-","-","-","-"
"1564","bindingType","private static Optional<XType> bindingType(ContributionBinding binding)","0","-","-","-","-"
"1565","createInternal","private static FrameworkField createInternal(
      String fieldName,
      XClassName frameworkClassName,
      Optional<XType> type,
      Nullability nullability)","0","-","-","-","-"
"1566","frameworkFieldName","private static String frameworkFieldName(String fieldName, XClassName frameworkClassName)","0","-","-","-","-"
"1567","bindingElementName","private static String bindingElementName(XElement bindingElement)","0","-","-","-","-"
"1568","FrameworkField","FrameworkField(String name, XTypeName type)","0","-","-","-","-"
"1569","name","public String name()","0","-","-","-","-"
"1570","type","public XTypeName type()","0","-","-","-","-"
"1571","delegateRequest","abstract DependencyRequest delegateRequest();","0","-","-","-","-"
"1572","mapKey","abstract Optional<DaggerAnnotation> mapKey();","0","-","-","-","-"
"1573","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1574","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1575","Factory","@Inject
    Factory(
        KeyFactory keyFactory,
        DependencyRequestFactory dependencyRequestFactory)","0","-","-","-","-"
"1576","create","public DelegateDeclaration create(XMethodElement bindsMethod, XTypeElement contributingModule)","0","-","-","-","-"
"1577","SubcomponentCreatorBindingEdgeImpl","SubcomponentCreatorBindingEdgeImpl(
      ImmutableSet<SubcomponentDeclaration> subcomponentDeclarations)","0","-","-","-","-"
"1578","declaringModules","@Override
  public ImmutableSet<DaggerTypeElement> declaringModules()","0","-","-","-","-"
"1579","toString","@Override
  public String toString()","0","-","-","-","-"
"1580","InjectionSiteFactory","@Inject
  InjectionSiteFactory(DependencyRequestFactory dependencyRequestFactory)","0","-","-","-","-"
"1581","getInjectionSites","/** Returns the injection sites for a type. */
  ImmutableSortedSet<InjectionSite> getInjectionSites(XType type)","0","-","-","-","-"
"1582","visit","public Optional<InjectionSite> visit(XElement element, XType container)","0","-","-","-","-"
"1583","visitMethod","public Optional<InjectionSite> visitMethod(XMethodElement method, XType container)","0","-","-","-","-"
"1584","visitField","public Optional<InjectionSite> visitField(XFieldElement field, XType container)","0","-","-","-","-"
"1585","shouldBeInjected","private boolean shouldBeInjected(XElement injectionSite)","0","-","-","-","-"
"1586","create","/** Creates a","0","-","-","-","-"
"1587","create","/** Creates a","0","-","-","-","-"
"1588","create","/** Creates a","0","-","-","-","-"
"1589","key","/** The binding key for which the","0","-","-","-","-"
"1590","bindingNodes","/** All binding nodes for","0","-","-","-","-"
"1591","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1592","equals","@Override
  public abstract boolean equals(Object other);","0","-","-","-","-"
"1593","bindings","/** All bindings for","0","-","-","-","-"
"1594","isEmpty","/** Returns","0","-","-","-","-"
"1595","bindingNodesOwnedBy","/** All bindings for","0","-","-","-","-"
"1596","forBinding","/** Returns the binding node representing the given binding, or throws ISE if none exist. */
  final BindingNode forBinding(Binding binding)","0","-","-","-","-"
"1597","KeyVariableNamer","private KeyVariableNamer()","0","-","-","-","-"
"1598","name","public static String name(Key key)","0","-","-","-","-"
"1599","typeNamer","private static void typeNamer(XType type, StringBuilder builder)","0","-","-","-","-"
"1600","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1601","optionalBindingType","@Override
  public Optional<BindingType> optionalBindingType()","0","-","-","-","-"
"1602","contributionType","@Override
  public ContributionType contributionType()","0","-","-","-","-"
"1603","dependencies","@Override
  public ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1604","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1605","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1606","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1607","builder","static Builder builder()","0","-","-","-","-"
"1608","nullability","abstract Builder nullability(Nullability nullability);","0","-","-","-","-"
"1609","key","/**
   *","0","-","-","-","-"
"1610","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1611","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1612","Factory","@Inject
    Factory(KeyFactory keyFactory)","0","-","-","-","-"
"1613","forMethod","OptionalBindingDeclaration forMethod(XMethodElement method, XTypeElement contributingModule)","0","-","-","-","-"
"1614","getSubcomponentCreator","public static Optional<XTypeElement> getSubcomponentCreator(XTypeElement subcomponent)","0","-","-","-","-"
"1615","isSubcomponentCreator","static boolean isSubcomponentCreator(XElement element)","0","-","-","-","-"
"1616","enclosedAnnotatedTypes","/** Returns the enclosed types annotated with the given annotation. */
  public static ImmutableSet<XTypeElement> enclosedAnnotatedTypes(
      XTypeElement typeElement, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"1617","ConfigurationAnnotations","private ConfigurationAnnotations()","0","-","-","-","-"
"1618","bindingElement","@Override
  public final Optional<XElement> bindingElement()","0","-","-","-","-"
"1619","membersInjectedType","public final XTypeElement membersInjectedType()","0","-","-","-","-"
"1620","contributingModule","@Override
  public Optional<XTypeElement> contributingModule()","0","-","-","-","-"
"1621","injectionSites","/** The set of individual sites where","0","-","-","-","-"
"1622","optionalBindingType","@Override
  public Optional<BindingType> optionalBindingType()","0","-","-","-","-"
"1623","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1624","isNullable","@Override
  public boolean isNullable()","0","-","-","-","-"
"1625","dependencies","@Override
  public final ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1626","hasLocalInjectionSites","/**
   * Returns","0","-","-","-","-"
"1627","requiresModuleInstance","@Override
  public boolean requiresModuleInstance()","0","-","-","-","-"
"1628","scope","@Override
  public Optional<Scope> scope()","0","-","-","-","-"
"1629","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1630","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1631","builder","static Builder builder()","0","-","-","-","-"
"1632","key","abstract Builder key(Key key);","0","-","-","-","-"
"1633","unresolved","abstract Builder unresolved(Optional<? extends Binding> unresolved);","0","-","-","-","-"
"1634","injectionSites","abstract Builder injectionSites(ImmutableSortedSet<InjectionSite> injectionSites);","0","-","-","-","-"
"1635","build","abstract MembersInjectionBinding build();","0","-","-","-","-"
"1636","kind","public abstract Kind kind();","0","-","-","-","-"
"1637","element","public abstract XElement element();","0","-","-","-","-"
"1638","enclosingTypeElement","public abstract XTypeElement enclosingTypeElement();","0","-","-","-","-"
"1639","dependencies","public abstract ImmutableSet<DependencyRequest> dependencies();","0","-","-","-","-"
"1640","indexAmongAtInjectMembersWithSameSimpleName","/**
     * Returns the index of","0","-","-","-","-"
"1641","field","public static InjectionSite field(XFieldElement field, DependencyRequest dependency)","0","-","-","-","-"
"1642","method","public static InjectionSite method(
        XMethodElement method, Iterable<DependencyRequest> dependencies)","0","-","-","-","-"
"1643","create","private static InjectionSite create(
        Kind kind, XElement element, ImmutableSet<DependencyRequest> dependencies)","0","-","-","-","-"
"1644","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1645","optionalBindingType","@Override
  public Optional<BindingType> optionalBindingType()","0","-","-","-","-"
"1646","contributionType","@Override
  public ContributionType contributionType()","0","-","-","-","-"
"1647","nullability","@Override
  public Nullability nullability()","0","-","-","-","-"
"1648","dependencies","@Override
  public ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1649","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1650","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1651","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1652","builder","static Builder builder()","0","-","-","-","-"
"1653","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1654","optionalBindingType","@Override
  public Optional<BindingType> optionalBindingType()","0","-","-","-","-"
"1655","contributionType","@Override
  public ContributionType contributionType()","0","-","-","-","-"
"1656","nullability","@Override
  public Nullability nullability()","0","-","-","-","-"
"1657","dependencies","@Override
  @Memoized
  public ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1658","assistedInjectKey","/** Returns the key for the associated","0","-","-","-","-"
"1659","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1660","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1661","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1662","builder","static Builder builder()","0","-","-","-","-"
"1663","assistedInjectKey","abstract Builder assistedInjectKey(Key assistedInjectKey);","0","-","-","-","-"
"1664","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1665","optionalBindingType","@Override
  public Optional<BindingType> optionalBindingType()","0","-","-","-","-"
"1666","contributionType","@Override
  public ContributionType contributionType()","0","-","-","-","-"
"1667","nullability","@Override
  public Nullability nullability()","0","-","-","-","-"
"1668","dependencies","@Override
  public final ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1669","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1670","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1671","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1672","builder","static Builder builder()","0","-","-","-","-"
"1673","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1674","contributionType","@Override
  public ContributionType contributionType()","0","-","-","-","-"
"1675","nullability","@Override
  public Nullability nullability()","0","-","-","-","-"
"1676","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1677","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1678","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1679","builder","static Builder builder()","0","-","-","-","-"
"1680","dependencies","abstract Builder dependencies(ImmutableSet<DependencyRequest> dependencies);","0","-","-","-","-"
"1681","optionalBindingType","abstract Builder optionalBindingType(Optional<BindingType> optionalBindingType);","0","-","-","-","-"
"1682","key","/** The","0","-","-","-","-"
"1683","bindingElement","/**
   * The","0","-","-","-","-"
"1684","bindingTypeElement","/**
   * The type enclosing the","0","-","-","-","-"
"1685","contributingModule","/**
   * The installed module class that contributed the","0","-","-","-","-"
"1686","create","static MissingBinding create(ComponentPath component, Key key)","0","-","-","-","-"
"1687","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1688","equals","@Override
  public abstract boolean equals(Object o);","0","-","-","-","-"
"1689","bindingRequest","/** Creates a","0","-","-","-","-"
"1690","bindingRequest","/**
   * Creates a","0","-","-","-","-"
"1691","bindingRequest","/**
   * Creates a","0","-","-","-","-"
"1692","key","/** Returns the","0","-","-","-","-"
"1693","requestKind","/** Returns the request kind associated with this request. */
  public abstract RequestKind requestKind();","0","-","-","-","-"
"1694","frameworkType","/** Returns the framework type associated with this request, if any. */
  public abstract Optional<FrameworkType> frameworkType();","0","-","-","-","-"
"1695","isRequestKind","/** Returns whether this request is of the given kind. */
  public final boolean isRequestKind(RequestKind requestKind)","0","-","-","-","-"
"1696","requestedType","public final XType requestedType(XType contributedType, XProcessingEnv processingEnv)","0","-","-","-","-"
"1697","kindName","/** Returns a name that can be used for the kind of request this is. */
  public final String kindName()","0","-","-","-","-"
"1698","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1699","optionalBindingType","@Override
  public Optional<BindingType> optionalBindingType()","0","-","-","-","-"
"1700","contributionType","@Override
  public ContributionType contributionType()","0","-","-","-","-"
"1701","nullability","@Override
  public Nullability nullability()","0","-","-","-","-"
"1702","constructorDependencies","/** Dependencies necessary to invoke the","0","-","-","-","-"
"1703","injectionSites","/**","0","-","-","-","-"
"1704","dependencies","@Override
  @Memoized
  public ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1705","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1706","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1707","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1708","builder","static Builder builder()","0","-","-","-","-"
"1709","constructorDependencies","abstract Builder constructorDependencies(Iterable<DependencyRequest> constructorDependencies);","0","-","-","-","-"
"1710","injectionSites","abstract Builder injectionSites(ImmutableSortedSet<InjectionSite> injectionSites);","0","-","-","-","-"
"1711","annotation","/** Returns the annotation marking this creator. */
  public abstract ComponentCreatorAnnotation annotation();","0","-","-","-","-"
"1712","kind","/** The kind of this creator. */
  public final ComponentCreatorKind kind()","0","-","-","-","-"
"1713","typeElement","/** The annotated creator type. */
  public abstract XTypeElement typeElement();","0","-","-","-","-"
"1714","factoryMethod","/** The method that creates and returns a component instance. */
  public abstract XMethodElement factoryMethod();","0","-","-","-","-"
"1715","unvalidatedSetterMethods","/**
   * Multimap of component requirements to setter methods that set that requirement.
   *
   * <p>In a valid creator, there will be exactly one element per component requirement, so this
   * method should only be called when validating the descriptor.
   */
  abstract ImmutableSetMultimap<ComponentRequirement, XMethodElement> unvalidatedSetterMethods();","0","-","-","-","-"
"1716","unvalidatedFactoryParameters","/**
   * Multimap of component requirements to factory method parameters that set that requirement.
   *
   * <p>In a valid creator, there will be exactly one element per component requirement, so this
   * method should only be called when validating the descriptor.
   */
  abstract ImmutableSetMultimap<ComponentRequirement, XExecutableParameterElement>
      unvalidatedFactoryParameters();","0","-","-","-","-"
"1717","unvalidatedRequirementElements","/**
   * Multimap of component requirements to elements (methods or parameters) that set that
   * requirement.
   *
   * <p>In a valid creator, there will be exactly one element per component requirement, so this
   * method should only be called when validating the descriptor.
   */
  public final ImmutableSetMultimap<ComponentRequirement, XElement>
      unvalidatedRequirementElements()","0","-","-","-","-"
"1718","requirementElements","/**
   * Map of component requirements to elements (setter methods or factory method parameters) that
   * set them.
   */
  @Memoized
  ImmutableMap<ComponentRequirement, XElement> requirementElements()","0","-","-","-","-"
"1719","setterMethods","/** Map of component requirements to setter methods for those requirements. */
  @Memoized
  public ImmutableMap<ComponentRequirement, XMethodElement> setterMethods()","0","-","-","-","-"
"1720","factoryParameters","/** Map of component requirements to factory method parameters for those requirements. */
  @Memoized
  public ImmutableMap<ComponentRequirement, XExecutableParameterElement> factoryParameters()","0","-","-","-","-"
"1721","flatten","private static <K, V> ImmutableMap<K, V> flatten(Multimap<K, V> multimap)","0","-","-","-","-"
"1722","userSettableRequirements","/** Returns the set of component requirements this creator allows the user to set. */
  public final ImmutableSet<ComponentRequirement> userSettableRequirements()","0","-","-","-","-"
"1723","moduleAndDependencyRequirements","/** Returns the set of requirements for modules and component dependencies for this creator. */
  public final ImmutableSet<ComponentRequirement> moduleAndDependencyRequirements()","0","-","-","-","-"
"1724","boundInstanceRequirements","/** Returns the set of bound instance requirements for this creator. */
  final ImmutableSet<ComponentRequirement> boundInstanceRequirements()","0","-","-","-","-"
"1725","elementForRequirement","/** Returns the element in this creator that sets the given","0","-","-","-","-"
"1726","create","/** Creates a new","0","-","-","-","-"
"1727","requirement","private static ComponentRequirement requirement(
      XMethodElement method,
      XExecutableParameterElement parameter,
      XType parameterType,
      DependencyRequestFactory dependencyRequestFactory,
      XElement elementForVariableName)","0","-","-","-","-"
"1728","key","/**
   * The map or set key whose availability is declared. For maps, this will be","0","-","-","-","-"
"1729","contributionType","/**
   *","0","-","-","-","-"
"1730","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1731","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1732","Factory","@Inject
    Factory(KeyFactory keyFactory)","0","-","-","-","-"
"1733","forMultibindsMethod","/** A multibinding declaration for a","0","-","-","-","-"
"1734","forDeclaredMethod","private MultibindingDeclaration forDeclaredMethod(
        XMethodElement method, XMethodType methodType, XTypeElement contributingType)","0","-","-","-","-"
"1735","contributionType","private ContributionType contributionType(XType returnType)","0","-","-","-","-"
"1736","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1737","contributionType","@Override
  public ContributionType contributionType()","0","-","-","-","-"
"1738","nullability","@Override
  public Nullability nullability()","0","-","-","-","-"
"1739","dependencies","@Override
  @Memoized
  public ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1740","delegateRequest","/** Returns the delegate","0","-","-","-","-"
"1741","requiresModuleInstance","@Override
  public boolean requiresModuleInstance()","0","-","-","-","-"
"1742","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1743","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1744","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1745","builder","static Builder builder()","0","-","-","-","-"
"1746","delegateRequest","abstract Builder delegateRequest(DependencyRequest delegateRequest);","0","-","-","-","-"
"1747","optionalBindingType","abstract Builder optionalBindingType(Optional<BindingType> optionalBindingType);","0","-","-","-","-"
"1748","assistedFactoryMethod","/** Returns the factory method for the given factory","0","-","-","-","-"
"1749","assistedFactoryMethods","/** Returns the list of abstract factory methods for the given factory","0","-","-","-","-"
"1750","isAssistedInjectionType","/** Returns","0","-","-","-","-"
"1751","isAssistedFactoryType","/** Returns","0","-","-","-","-"
"1752","assistedParameterSpecs","/**
   * Returns the list of assisted parameters as","0","-","-","-","-"
"1753","assistedParameterSpecs","private static ImmutableList<ParameterSpec> assistedParameterSpecs(
      List<? extends XExecutableParameterElement> paramElements, List<XType> paramTypes)","0","-","-","-","-"
"1754","assistedFactoryParameterSpecs","/**
   * Returns the list of assisted factory parameters as","0","-","-","-","-"
"1755","assistedInjectedConstructors","/** Returns the constructors in","0","-","-","-","-"
"1756","assistedParameters","public static ImmutableList<XExecutableParameterElement> assistedParameters(Binding binding)","0","-","-","-","-"
"1757","isAssistedParameter","/** Returns","0","-","-","-","-"
"1758","create","public static AssistedFactoryMetadata create(XType factoryType)","0","-","-","-","-"
"1759","factory","public abstract XTypeElement factory();","0","-","-","-","-"
"1760","factoryType","public abstract XType factoryType();","0","-","-","-","-"
"1761","factoryMethod","public abstract XMethodElement factoryMethod();","0","-","-","-","-"
"1762","factoryMethodType","public abstract XMethodType factoryMethodType();","0","-","-","-","-"
"1763","assistedInjectElement","public abstract XTypeElement assistedInjectElement();","0","-","-","-","-"
"1764","assistedInjectType","public abstract XType assistedInjectType();","0","-","-","-","-"
"1765","assistedInjectAssistedParameters","public abstract ImmutableList<AssistedParameter> assistedInjectAssistedParameters();","0","-","-","-","-"
"1766","assistedFactoryAssistedParameters","public abstract ImmutableList<AssistedParameter> assistedFactoryAssistedParameters();","0","-","-","-","-"
"1767","assistedInjectAssistedParametersMap","@Memoized
    public ImmutableMap<AssistedParameter, XExecutableParameterElement>
        assistedInjectAssistedParametersMap()","0","-","-","-","-"
"1768","assistedFactoryAssistedParametersMap","@Memoized
    public ImmutableMap<AssistedParameter, XExecutableParameterElement>
        assistedFactoryAssistedParametersMap()","0","-","-","-","-"
"1769","create","public static AssistedParameter create(
        XExecutableParameterElement parameter, XType parameterType)","0","-","-","-","-"
"1770","qualifier","/** Returns the string qualifier from the","0","-","-","-","-"
"1771","typeName","/** Returns the type annotated with","0","-","-","-","-"
"1772","type","/** Returns the type annotated with","0","-","-","-","-"
"1773","element","public final XExecutableParameterElement element()","0","-","-","-","-"
"1774","toString","@Override
    public final String toString()","0","-","-","-","-"
"1775","assistedInjectAssistedParameters","public static ImmutableList<AssistedParameter> assistedInjectAssistedParameters(
      XType assistedInjectType)","0","-","-","-","-"
"1776","assistedFactoryAssistedParameters","private static ImmutableList<AssistedParameter> assistedFactoryAssistedParameters(
      XMethodElement factoryMethod, XMethodType factoryMethodType)","0","-","-","-","-"
"1777","AssistedInjectionAnnotations","private AssistedInjectionAnnotations()","0","-","-","-","-"
"1778","name","static String name(DependencyRequest dependency)","0","-","-","-","-"
"1779","toLowerCamel","private static String toLowerCamel(String name)","0","-","-","-","-"
"1780","LegacyBindingGraphConverter","@Inject
  LegacyBindingGraphConverter()","0","-","-","-","-"
"1781","convert","/**
   * Creates the external","0","-","-","-","-"
"1782","convertToNetwork","static MutableNetwork<Node, Edge> convertToNetwork(LegacyBindingGraph graph)","0","-","-","-","-"
"1783","visitRootComponent","private void visitRootComponent(LegacyBindingGraph graph)","0","-","-","-","-"
"1784","visitComponent","/**
     * Called once for each component in a component hierarchy.
     *
     * <p>This implementation does the following:
     *
     * <ol>
     *   <li>If this component is installed in its parent by a subcomponent factory method, adds
     *       an edge between the parent and child components.
     *   <li>For each entry point, adds an edge between the component and the entry point.
     *   <li>For each child component, calls","0","-","-","-","-"
"1785","componentPath","/**
     * Returns an immutable snapshot of the path from the root component to the currently visited
     * component.
     */
    private ComponentPath componentPath()","0","-","-","-","-"
"1786","graphForAncestor","/**
     * Returns the LegacyBindingGraph for","0","-","-","-","-"
"1787","addDependencyEdges","/**
     * Adds a","0","-","-","-","-"
"1788","addDependencyEdge","private void addDependencyEdge(
        Node source, DependencyRequest dependencyRequest, Node dependency)","0","-","-","-","-"
"1789","hasDependencyEdge","private boolean hasDependencyEdge(
        Node source, Node dependency, DependencyRequest dependencyRequest)","0","-","-","-","-"
"1790","resolvedDependencies","private LegacyResolvedBindings resolvedDependencies(
        Node source, DependencyRequest dependencyRequest)","0","-","-","-","-"
"1791","missingBindingNode","private MissingBinding missingBindingNode(LegacyResolvedBindings dependencies)","0","-","-","-","-"
"1792","subcomponentNode","private ComponentNode subcomponentNode(
        XType subcomponentBuilderType, LegacyBindingGraph graph)","0","-","-","-","-"
"1793","MethodSignatureFormatter","@Inject
  MethodSignatureFormatter(InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"1794","typedFormatter","/**
   * A formatter that uses the type where the method is declared for the annotations and name of the
   * method, but the method's resolved type as a member of","0","-","-","-","-"
"1795","format","@Override
      public String format(XMethodElement method)","0","-","-","-","-"
"1796","format","@Override
  public String format(XExecutableElement method)","0","-","-","-","-"
"1797","format","/**
   * Formats an ExecutableElement as if it were contained within the container, if the container is
   * present.
   */
  public String format(XExecutableElement method, Optional<XType> container)","0","-","-","-","-"
"1798","format","private String format(
      XExecutableElement method, Optional<XType> container, boolean includeReturnType)","0","-","-","-","-"
"1799","format","private String format(
      XExecutableElement method,
      XExecutableType methodType,
      XTypeElement container,
      boolean includeReturnType)","0","-","-","-","-"
"1800","formatWithoutReturnType","public String formatWithoutReturnType(XExecutableElement method)","0","-","-","-","-"
"1801","appendParameter","private void appendParameter(
      StringBuilder builder, XVariableElement parameter, XType parameterType)","0","-","-","-","-"
"1802","nameOfType","private static String nameOfType(XType type)","0","-","-","-","-"
"1803","formatedAnnotations","private static ImmutableList<String> formatedAnnotations(XExecutableElement executableElement)","0","-","-","-","-"
"1804","formatAnnotation","private static String formatAnnotation(XAnnotation annotation)","0","-","-","-","-"
"1805","optionalBindingType","/** Returns the optional","0","-","-","-","-"
"1806","bindingType","/** The","0","-","-","-","-"
"1807","frameworkType","/** The","0","-","-","-","-"
"1808","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1809","optionalBindingType","@Override
  public Optional<BindingType> optionalBindingType()","0","-","-","-","-"
"1810","contributionType","@Override
  @Memoized
  public ContributionType contributionType()","0","-","-","-","-"
"1811","requiresModuleInstance","@Memoized
  @Override
  public boolean requiresModuleInstance()","0","-","-","-","-"
"1812","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1813","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1814","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1815","builder","static Builder builder()","0","-","-","-","-"
"1816","nullability","abstract Builder nullability(Nullability nullability);","0","-","-","-","-"
"1817","dependencies","abstract Builder dependencies(Iterable<DependencyRequest> dependencies);","0","-","-","-","-"
"1818","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1819","optionalBindingType","@Override
  public Optional<BindingType> optionalBindingType()","0","-","-","-","-"
"1820","contributionType","@Override
  public ContributionType contributionType()","0","-","-","-","-"
"1821","nullability","@Override
  public Nullability nullability()","0","-","-","-","-"
"1822","dependencies","@Override
  @Memoized
  public ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1823","injectionSites","/**","0","-","-","-","-"
"1824","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1825","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1826","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1827","builder","static Builder builder()","0","-","-","-","-"
"1828","injectionSites","abstract Builder injectionSites(ImmutableSortedSet<InjectionSite> injectionSites);","0","-","-","-","-"
"1829","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1830","optionalBindingType","@Override
  public Optional<BindingType> optionalBindingType()","0","-","-","-","-"
"1831","contributionType","@Override
  @Memoized
  public ContributionType contributionType()","0","-","-","-","-"
"1832","nullability","@Override
  public Nullability nullability()","0","-","-","-","-"
"1833","explicitDependencies","/** Dependencies necessary to invoke the","0","-","-","-","-"
"1834","dependencies","@Override
  @Memoized
  public ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1835","executorRequest","public abstract DependencyRequest executorRequest();","0","-","-","-","-"
"1836","monitorRequest","public abstract DependencyRequest monitorRequest();","0","-","-","-","-"
"1837","requiresModuleInstance","@Memoized
  @Override
  public boolean requiresModuleInstance()","0","-","-","-","-"
"1838","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1839","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1840","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1841","builder","static Builder builder()","0","-","-","-","-"
"1842","executorRequest","abstract Builder executorRequest(DependencyRequest executorRequest);","0","-","-","-","-"
"1843","monitorRequest","abstract Builder monitorRequest(DependencyRequest monitorRequest);","0","-","-","-","-"
"1844","explicitDependencies","abstract Builder explicitDependencies(Iterable<DependencyRequest> explicitDependencies);","0","-","-","-","-"
"1845","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1846","dependencies","@Override
  @Memoized
  public ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1847","delegateRequest","/** Returns a request for the binding that this binding delegates to. */
  abstract DependencyRequest delegateRequest();","0","-","-","-","-"
"1848","requiresModuleInstance","@Override
  public boolean requiresModuleInstance()","0","-","-","-","-"
"1849","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1850","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1851","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1852","builder","static Builder builder()","0","-","-","-","-"
"1853","delegateRequest","abstract Builder delegateRequest(DependencyRequest delegateRequest);","0","-","-","-","-"
"1854","optionalBindingType","abstract Builder optionalBindingType(Optional<BindingType> bindingType);","0","-","-","-","-"
"1855","contributionType","abstract Builder contributionType(ContributionType contributionType);","0","-","-","-","-"
"1856","nullability","abstract Builder nullability(Nullability nullability);","0","-","-","-","-"
"1857","withFixedBindingTypes","/** Returns a network where","0","-","-","-","-"
"1858","withFixedBindingTypes","private static MutableNetwork<Node, Edge> withFixedBindingTypes(
      Network<Node, Edge> network, ImmutableSet<BindingNode> bindingsToFix)","0","-","-","-","-"
"1859","bindingsWithMissingBindingTypes","private static ImmutableSet<BindingNode> bindingsWithMissingBindingTypes(
      Network<Node, Edge> network)","0","-","-","-","-"
"1860","withReplacedBindings","private static MutableNetwork<Node, Edge> withReplacedBindings(
      Network<Node, Edge> network, ImmutableMap<? extends Node, ? extends Node> replacementNodes)","0","-","-","-","-"
"1861","BindingGraphTransformations","private BindingGraphTransformations()","0","-","-","-","-"
"1862","ChildFactoryMethodEdgeImpl","ChildFactoryMethodEdgeImpl(XMethodElement factoryMethod)","0","-","-","-","-"
"1863","factoryMethod","@Override
  public DaggerExecutableElement factoryMethod()","0","-","-","-","-"
"1864","toString","@Override
  public String toString()","0","-","-","-","-"
"1865","useLegacyBindingGraphFactory","static boolean useLegacyBindingGraphFactory(
      CompilerOptions compilerOptions, ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"1866","hasStrictMultibindingsExemption","static boolean hasStrictMultibindingsExemption(
      CompilerOptions compilerOptions, ContributionBinding binding)","0","-","-","-","-"
"1867","LegacyBindingGraphFactory","@Inject
  LegacyBindingGraphFactory(
      InjectBindingRegistry injectBindingRegistry,
      KeyFactory keyFactory,
      BindingFactory bindingFactory,
      BindingNode.Factory bindingNodeFactory,
      ComponentDeclarations.Factory componentDeclarationsFactory,
      LegacyBindingGraphConverter legacyBindingGraphConverter,
      CompilerOptions compilerOptions)","0","-","-","-","-"
"1868","create","/**
   * Creates a binding graph for a component.
   *
   * @param createFullBindingGraph if","0","-","-","-","-"
"1869","createLegacyBindingGraph","private LegacyBindingGraph createLegacyBindingGraph(
      Optional<Resolver> parentResolver,
      ComponentDescriptor componentDescriptor,
      boolean createFullBindingGraph)","0","-","-","-","-"
"1870","LegacyBindingGraph","LegacyBindingGraph(Resolver resolver, ImmutableList<LegacyBindingGraph> resolvedSubgraphs)","0","-","-","-","-"
"1871","componentNode","/** Returns the","0","-","-","-","-"
"1872","componentPath","/** Returns the","0","-","-","-","-"
"1873","componentDescriptor","/** Returns the","0","-","-","-","-"
"1874","resolvedBindings","/**
     * Returns the","0","-","-","-","-"
"1875","resolvedBindings","/**
     * Returns all","0","-","-","-","-"
"1876","subgraphs","/** Returns the resolved subgraphs. */
    public ImmutableList<LegacyBindingGraph> subgraphs()","0","-","-","-","-"
"1877","create","/**
     * Creates a","0","-","-","-","-"
"1878","create","/** Creates a","0","-","-","-","-"
"1879","create","/** Creates a","0","-","-","-","-"
"1880","key","/** The binding key for which the","0","-","-","-","-"
"1881","bindingNodes","/** All binding nodes for","0","-","-","-","-"
"1882","hashCode","@Memoized
    @Override
    public abstract int hashCode();","0","-","-","-","-"
"1883","equals","@Override
    public abstract boolean equals(Object other);","0","-","-","-","-"
"1884","bindings","/** All bindings for","0","-","-","-","-"
"1885","isEmpty","/** Returns","0","-","-","-","-"
"1886","bindingNodesOwnedBy","/** All bindings for","0","-","-","-","-"
"1887","forBinding","/** Returns the binding node representing the given binding, or throws ISE if none exist. */
    final BindingNode forBinding(Binding binding)","0","-","-","-","-"
"1888","Resolver","Resolver(Optional<Resolver> parentResolver, ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"1889","lookUpBindings","/**
     * Returns the resolved contribution bindings for the given","0","-","-","-","-"
"1890","isCorrectlyScopedInSubcomponent","/**
     * Returns true if this binding graph resolution is for a subcomponent and the","0","-","-","-","-"
"1891","rootComponent","private ComponentDescriptor rootComponent()","0","-","-","-","-"
"1892","lookUpMembersInjectionBinding","/** Returns the resolved members injection bindings for the given","0","-","-","-","-"
"1893","addSubcomponentToOwningResolver","/**
     * When a binding is resolved for a","0","-","-","-","-"
"1894","createDelegateBindings","private ImmutableSet<ContributionBinding> createDelegateBindings(
        ImmutableSet<DelegateDeclaration> delegateDeclarations)","0","-","-","-","-"
"1895","createDelegateBinding","/**
     * Creates one (and only one) delegate binding for a delegate declaration, based on the resolved
     * bindings of the right-hand-side of a","0","-","-","-","-"
"1896","getBindingNodeOwnedByAncestor","/**
     * Returns a","0","-","-","-","-"
"1897","canBeResolvedInParent","private boolean canBeResolvedInParent(Key requestKey, ContributionBinding binding)","0","-","-","-","-"
"1898","getOwningResolver","private Optional<Resolver> getOwningResolver(ContributionBinding binding)","0","-","-","-","-"
"1899","containsExplicitBinding","private boolean containsExplicitBinding(ContributionBinding binding)","0","-","-","-","-"
"1900","resolverContainsDelegateDeclarationForBinding","/** Returns true if","0","-","-","-","-"
"1901","getResolverLineage","/** Returns the resolver lineage from parent to child. */
    private ImmutableList<Resolver> getResolverLineage()","0","-","-","-","-"
"1902","getLocalExplicitBindings","/**
     * Returns the explicit","0","-","-","-","-"
"1903","getLocalMultibindingContributions","/**
     * Returns the explicit multibinding contributions that contribute to the map or set requested
     * by","0","-","-","-","-"
"1904","getOptionalBindingDeclarations","/**
     * Returns the","0","-","-","-","-"
"1905","getPreviouslyResolvedBindings","/**
     * Returns the","0","-","-","-","-"
"1906","resolveMembersInjection","private void resolveMembersInjection(Key key)","0","-","-","-","-"
"1907","resolve","void resolve(Key key)","0","-","-","-","-"
"1908","resolveDependencies","/**
     *","0","-","-","-","-"
"1909","getResolvedContributionBindings","private LegacyResolvedBindings getResolvedContributionBindings(Key key)","0","-","-","-","-"
"1910","getResolvedMembersInjectionBindings","private LegacyResolvedBindings getResolvedMembersInjectionBindings(Key key)","0","-","-","-","-"
"1911","requiresResolution","private boolean requiresResolution(Binding binding)","0","-","-","-","-"
"1912","requiresResolution","/**
       * Returns","0","-","-","-","-"
"1913","requiresResolution","/**
       * Returns","0","-","-","-","-"
"1914","requiresResolutionUncached","private boolean requiresResolutionUncached(Key key)","0","-","-","-","-"
"1915","requiresResolutionUncached","private boolean requiresResolutionUncached(Binding binding)","0","-","-","-","-"
"1916","hasLocalBindings","private boolean hasLocalBindings(LegacyResolvedBindings resolvedBindings)","0","-","-","-","-"
"1917","hasLocalMultibindingContributions","/**
     * Returns","0","-","-","-","-"
"1918","hasLocalOptionalBindingContribution","/**
     * Returns","0","-","-","-","-"
"1919","hasLocalOptionalBindingContribution","private boolean hasLocalOptionalBindingContribution(
          Key key, ImmutableSet<? extends Binding> previouslyResolvedBindings)","0","-","-","-","-"
"1920","hasLocalExplicitBindings","/**
     * Returns","0","-","-","-","-"
"1921","KeyFactory","@Inject
  KeyFactory(
      XProcessingEnv processingEnv,
      CompilerOptions compilerOptions,
      InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"1922","setOf","private XType setOf(XType elementType)","0","-","-","-","-"
"1923","mapOf","private XType mapOf(XType keyType, XType valueType)","0","-","-","-","-"
"1924","optionalOf","/**
   * If","0","-","-","-","-"
"1925","optionalOf","private XType optionalOf(XType type)","0","-","-","-","-"
"1926","mapOfFrameworkType","/** Returns","0","-","-","-","-"
"1927","forComponentMethod","Key forComponentMethod(XMethodElement componentMethod)","0","-","-","-","-"
"1928","forProductionComponentMethod","Key forProductionComponentMethod(XMethodElement componentMethod)","0","-","-","-","-"
"1929","forSubcomponentCreatorMethod","Key forSubcomponentCreatorMethod(
      XMethodElement subcomponentCreatorMethod, XType declaredContainer)","0","-","-","-","-"
"1930","forSubcomponentCreator","public Key forSubcomponentCreator(XType creatorType)","0","-","-","-","-"
"1931","forProvidesMethod","public Key forProvidesMethod(XMethodElement method, XTypeElement contributingModule)","0","-","-","-","-"
"1932","forProducesMethod","public Key forProducesMethod(XMethodElement method, XTypeElement contributingModule)","0","-","-","-","-"
"1933","forBindsMethod","/** Returns the key bound by a","0","-","-","-","-"
"1934","forBindsOptionalOfMethod","/** Returns the base key bound by a","0","-","-","-","-"
"1935","forBindingMethod","private Key forBindingMethod(
      XMethodElement method,
      XTypeElement contributingModule,
      Optional<XClassName> frameworkClassName)","0","-","-","-","-"
"1936","forMultibindsMethod","/**
   * Returns the key for a","0","-","-","-","-"
"1937","bindingMethodKeyType","private XType bindingMethodKeyType(
      XType returnType,
      XMethodElement method,
      ContributionType contributionType,
      Optional<XClassName> frameworkClassName)","0","-","-","-","-"
"1938","forDelegateBinding","/**
   * Returns the key for a binding associated with a","0","-","-","-","-"
"1939","forMethod","private Key forMethod(XMethodElement method, XType keyType)","0","-","-","-","-"
"1940","forInjectConstructorWithResolvedType","public Key forInjectConstructorWithResolvedType(XType type)","0","-","-","-","-"
"1941","forType","Key forType(XType type)","0","-","-","-","-"
"1942","forMembersInjectedType","public Key forMembersInjectedType(XType type)","0","-","-","-","-"
"1943","forQualifiedType","Key forQualifiedType(Optional<XAnnotation> qualifier, XType type)","0","-","-","-","-"
"1944","forProductionExecutor","public Key forProductionExecutor()","0","-","-","-","-"
"1945","forProductionImplementationExecutor","public Key forProductionImplementationExecutor()","0","-","-","-","-"
"1946","forProductionComponentMonitor","public Key forProductionComponentMonitor()","0","-","-","-","-"
"1947","unwrapMapValueType","/**
   * If","0","-","-","-","-"
"1948","wrapMapValue","/**
   * Returns a key with the type","0","-","-","-","-"
"1949","unwrapOptional","/**
   * If","0","-","-","-","-"
"1950","nullability","/** Returns the nullability of this binding. */
  public abstract Nullability nullability();","0","-","-","-","-"
"1951","shouldCheckForNull","public boolean shouldCheckForNull(CompilerOptions compilerOptions)","0","-","-","-","-"
"1952","mapKey","/** Returns the map key if this is a","0","-","-","-","-"
"1953","contributedPrimitiveType","/** If","0","-","-","-","-"
"1954","requiresModuleInstance","@Override
  public boolean requiresModuleInstance()","0","-","-","-","-"
"1955","isNullable","@Override
  public final boolean isNullable()","0","-","-","-","-"
"1956","isContributingModuleKotlinObject","/**
   * Returns","0","-","-","-","-"
"1957","contributedType","/**
   * The","0","-","-","-","-"
"1958","toBuilder","public abstract Builder<?, ?> toBuilder();","0","-","-","-","-"
"1959","withBindingType","/** Returns a new","0","-","-","-","-"
"1960","unresolved","@CanIgnoreReturnValue
    abstract B unresolved(Optional<? extends Binding> unresolved);","0","-","-","-","-"
"1961","bindingElement","@CanIgnoreReturnValue
    abstract B bindingElement(XElement bindingElement);","0","-","-","-","-"
"1962","bindingElement","@CanIgnoreReturnValue
    abstract B bindingElement(Optional<XElement> bindingElement);","0","-","-","-","-"
"1963","clearBindingElement","@CanIgnoreReturnValue
    final B clearBindingElement()","0","-","-","-","-"
"1964","contributingModule","@CanIgnoreReturnValue
    abstract B contributingModule(XTypeElement contributingModule);","0","-","-","-","-"
"1965","key","@CanIgnoreReturnValue
    abstract B key(Key key);","0","-","-","-","-"
"1966","scope","@CanIgnoreReturnValue
    abstract B scope(Optional<Scope> scope);","0","-","-","-","-"
"1967","build","abstract C build();","0","-","-","-","-"
"1968","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1969","optionalBindingType","@Override
  public Optional<BindingType> optionalBindingType()","0","-","-","-","-"
"1970","contributionType","@Override
  public ContributionType contributionType()","0","-","-","-","-"
"1971","nullability","@Override
  public Nullability nullability()","0","-","-","-","-"
"1972","constructorDependencies","/** Dependencies necessary to invoke the","0","-","-","-","-"
"1973","injectionSites","/**","0","-","-","-","-"
"1974","dependencies","@Override
  @Memoized
  public ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1975","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1976","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1977","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1978","builder","static Builder builder()","0","-","-","-","-"
"1979","constructorDependencies","abstract Builder constructorDependencies(Iterable<DependencyRequest> constructorDependencies);","0","-","-","-","-"
"1980","injectionSites","abstract Builder injectionSites(ImmutableSortedSet<InjectionSite> injectionSites);","0","-","-","-","-"
"1981","DependencyEdgeImpl","DependencyEdgeImpl(DependencyRequest dependencyRequest, boolean entryPoint)","0","-","-","-","-"
"1982","dependencyRequest","@Override
  public DependencyRequest dependencyRequest()","0","-","-","-","-"
"1983","isEntryPoint","@Override
  public boolean isEntryPoint()","0","-","-","-","-"
"1984","toString","@Override
  public String toString()","0","-","-","-","-"
"1985","kind","@Override
  public BindingKind kind()","0","-","-","-","-"
"1986","optionalBindingType","@Override
  public Optional<BindingType> optionalBindingType()","0","-","-","-","-"
"1987","contributionType","@Override
  public ContributionType contributionType()","0","-","-","-","-"
"1988","dependencies","@Override
  public final ImmutableSet<DependencyRequest> dependencies()","0","-","-","-","-"
"1989","toBuilder","@Override
  public abstract Builder toBuilder();","0","-","-","-","-"
"1990","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"1991","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"1992","builder","static Builder builder()","0","-","-","-","-"
"1993","nullability","abstract Builder nullability(Nullability nullability);","0","-","-","-","-"
"1994","ServiceLoaders","private ServiceLoaders()","0","-","-","-","-"
"1995","loadServices","/**
   * Returns the loaded services for the given class.
   */
  static <T> ImmutableSet<T> loadServices(XProcessingEnv processingEnv, Class<T> clazz)","0","-","-","-","-"
"1996","classLoaderFor","private static ClassLoader classLoaderFor(XProcessingEnv processingEnv, Class<?> clazz)","0","-","-","-","-"
"1997","javaClassLoader","private static ClassLoader javaClassLoader(
      ProcessingEnvironment javacProcessingEnv, Class<?> clazz)","0","-","-","-","-"
"1998","ProcessingEnvironmentCompilerOptions","@Inject
  ProcessingEnvironmentCompilerOptions(
      XProcessingEnv processingEnv,
      XMessager messager,
      @ProcessingOptions Map<String, String> options)","0","-","-","-","-"
"1999","headerCompilation","@Override
  public boolean headerCompilation()","0","-","-","-","-"
"2000","fastInit","@Override
  public boolean fastInit(XTypeElement component)","0","-","-","-","-"
"2001","fastInitInternal","private boolean fastInitInternal(XTypeElement component)","0","-","-","-","-"
"2002","formatGeneratedSource","@Override
  public boolean formatGeneratedSource()","0","-","-","-","-"
"2003","writeProducerNameInToken","@Override
  public boolean writeProducerNameInToken()","0","-","-","-","-"
"2004","nullableValidationKind","@Override
  public Diagnostic.Kind nullableValidationKind()","0","-","-","-","-"
"2005","privateMemberValidationKind","@Override
  public Diagnostic.Kind privateMemberValidationKind()","0","-","-","-","-"
"2006","staticMemberValidationKind","@Override
  public Diagnostic.Kind staticMemberValidationKind()","0","-","-","-","-"
"2007","includeStacktraceWithDeferredErrorMessages","@Override
  public boolean includeStacktraceWithDeferredErrorMessages()","0","-","-","-","-"
"2008","scopeCycleValidationType","@Override
  public ValidationType scopeCycleValidationType()","0","-","-","-","-"
"2009","validateTransitiveComponentDependencies","@Override
  public boolean validateTransitiveComponentDependencies()","0","-","-","-","-"
"2010","warnIfInjectionFactoryNotGeneratedUpstream","@Override
  public boolean warnIfInjectionFactoryNotGeneratedUpstream()","0","-","-","-","-"
"2011","fullBindingGraphValidationType","@Override
  public ValidationType fullBindingGraphValidationType()","0","-","-","-","-"
"2012","pluginsVisitFullBindingGraphs","@Override
  public boolean pluginsVisitFullBindingGraphs(XTypeElement component)","0","-","-","-","-"
"2013","moduleHasDifferentScopesDiagnosticKind","@Override
  public Diagnostic.Kind moduleHasDifferentScopesDiagnosticKind()","0","-","-","-","-"
"2014","explicitBindingConflictsWithInjectValidationType","@Override
  public ValidationType explicitBindingConflictsWithInjectValidationType()","0","-","-","-","-"
"2015","experimentalDaggerErrorMessages","@Override
  public boolean experimentalDaggerErrorMessages()","0","-","-","-","-"
"2016","useFrameworkTypeInMapMultibindingContributionKey","@Override
  public boolean useFrameworkTypeInMapMultibindingContributionKey()","0","-","-","-","-"
"2017","ignoreProvisionKeyWildcards","@Override
  public boolean ignoreProvisionKeyWildcards()","0","-","-","-","-"
"2018","strictMultibindingValidation","@Override
  public boolean strictMultibindingValidation()","0","-","-","-","-"
"2019","strictSuperficialValidation","@Override
  public boolean strictSuperficialValidation()","0","-","-","-","-"
"2020","generatedClassExtendsComponent","@Override
  public boolean generatedClassExtendsComponent()","0","-","-","-","-"
"2021","useBindingGraphFix","@Override
  public boolean useBindingGraphFix()","0","-","-","-","-"
"2022","keysPerComponentShard","@Override
  public int keysPerComponentShard(XTypeElement component)","0","-","-","-","-"
"2023","isEnabled","private boolean isEnabled(KeyOnlyOption keyOnlyOption)","0","-","-","-","-"
"2024","isEnabled","private boolean isEnabled(Feature feature)","0","-","-","-","-"
"2025","diagnosticKind","private Diagnostic.Kind diagnosticKind(Validation validation)","0","-","-","-","-"
"2026","checkValid","@SuppressWarnings(""CheckReturnValue"")
  private ProcessingEnvironmentCompilerOptions checkValid()","0","-","-","-","-"
"2027","noLongerRecognized","private void noLongerRecognized(CommandLineOption commandLineOption)","0","-","-","-","-"
"2028","toString","/** The key of the option (appears after ""-A""). */
    @Override
    String toString();","0","-","-","-","-"
"2029","aliases","/**
     * Returns all aliases besides","0","-","-","-","-"
"2030","allNames","/** All the command-line names for this option, in order of precedence. */
    default Stream<String> allNames()","0","-","-","-","-"
"2031","defaultValue","/** The default value for this option. */
    E defaultValue();","0","-","-","-","-"
"2032","validValues","/** The valid values for this option. */
    Set<E> validValues();","0","-","-","-","-"
"2033","toString","@Override
      public String toString()","0","-","-","-","-"
"2034","toString","@Override
      public String toString()","0","-","-","-","-"
"2035","EMIT_MODIFIABLE_METADATA_ANNOTATIONS","EMIT_MODIFIABLE_METADATA_ANNOTATIONS(ENABLED),

    PLUGINS_VISIT_FULL_BINDING_GRAPHS,

    FLOATING_BINDS_METHODS,

    EXPERIMENTAL_DAGGER_ERROR_MESSAGES,

    STRICT_MULTIBINDING_VALIDATION,

    STRICT_SUPERFICIAL_VALIDATION(ENABLED),

    GENERATED_CLASS_EXTENDS_COMPONENT,

    USE_BINDING_GRAPH_FIX,

    USE_FRAMEWORK_TYPE_IN_MAP_MULTIBINDING_CONTRIBUTION_KEY,

    IGNORE_PROVISION_KEY_WILDCARDS(ENABLED),

    VALIDATE_TRANSITIVE_COMPONENT_DEPENDENCIES(ENABLED)
    ;

    final FeatureStatus defaultValue;","0","-","-","-","-"
"2036","Feature","Feature()","0","-","-","-","-"
"2037","Feature","Feature(FeatureStatus defaultValue)","0","-","-","-","-"
"2038","defaultValue","@Override
    public FeatureStatus defaultValue()","0","-","-","-","-"
"2039","validValues","@Override
    public Set<FeatureStatus> validValues()","0","-","-","-","-"
"2040","toString","@Override
    public String toString()","0","-","-","-","-"
"2041","DISABLE_INTER_COMPONENT_SCOPE_VALIDATION","DISABLE_INTER_COMPONENT_SCOPE_VALIDATION(),

    NULLABLE_VALIDATION(ERROR, WARNING),

    PRIVATE_MEMBER_VALIDATION(ERROR, WARNING),

    STATIC_MEMBER_VALIDATION(ERROR, WARNING),

    /** Whether to validate full binding graphs for components, subcomponents, and modules. */
    FULL_BINDING_GRAPH_VALIDATION(NONE, ERROR, WARNING)","0","-","-","-","-"
"2042","aliases","@Override
      public ImmutableList<String> aliases()","0","-","-","-","-"
"2043","Validation","Validation()","0","-","-","-","-"
"2044","Validation","Validation(ValidationType defaultType, ValidationType... moreValidTypes)","0","-","-","-","-"
"2045","defaultValue","@Override
    public ValidationType defaultValue()","0","-","-","-","-"
"2046","validValues","@Override
    public Set<ValidationType> validValues()","0","-","-","-","-"
"2047","toString","@Override
    public String toString()","0","-","-","-","-"
"2048","optionName","private static String optionName(Enum<? extends EnumOption<?>> option)","0","-","-","-","-"
"2049","supportedOptions","/** The supported command-line options. */
  public static ImmutableSet<String> supportedOptions()","0","-","-","-","-"
"2050","parseOption","/**
   * Returns the value for the option as set on the command line by any name, or the default value
   * if not set.
   *
   * <p>If more than one name is used to set the value, but all names specify the same value,
   * reports a warning and returns that value.
   *
   * <p>If more than one name is used to set the value, and not all names specify the same value,
   * reports an error and returns the default value.
   */
  private <T extends Enum<T>> T parseOption(EnumOption<T> option)","0","-","-","-","-"
"2051","isSetOnCommandLine","private boolean isSetOnCommandLine(Feature feature)","0","-","-","-","-"
"2052","parseOptionUncached","private <T extends Enum<T>> T parseOptionUncached(EnumOption<T> option)","0","-","-","-","-"
"2053","reportUseOfDifferentNamesForOption","private void reportUseOfDifferentNamesForOption(
      Diagnostic.Kind diagnosticKind, EnumOption<?> option, ImmutableSet<String> usedNames)","0","-","-","-","-"
"2054","parseOptionWithAllNames","private <T extends Enum<T>> ImmutableMap<String, T> parseOptionWithAllNames(
      EnumOption<T> option)","0","-","-","-","-"
"2055","parseOptionWithAllNamesUncached","private <T extends Enum<T>> ImmutableMap<String, T> parseOptionWithAllNamesUncached(
      EnumOption<T> option)","0","-","-","-","-"
"2056","parseOptionWithName","private <T extends Enum<T>> Optional<T> parseOptionWithName(EnumOption<T> option, String key)","0","-","-","-","-"
"2057","getUsedNames","private Stream<String> getUsedNames(CommandLineOption option)","0","-","-","-","-"
"2058","fastInit","/**
   * Returns true if the fast initialization flag,","0","-","-","-","-"
"2059","formatGeneratedSource","public abstract boolean formatGeneratedSource();","0","-","-","-","-"
"2060","writeProducerNameInToken","public abstract boolean writeProducerNameInToken();","0","-","-","-","-"
"2061","nullableValidationKind","public abstract Diagnostic.Kind nullableValidationKind();","0","-","-","-","-"
"2062","doCheckForNulls","public final boolean doCheckForNulls()","0","-","-","-","-"
"2063","privateMemberValidationKind","public abstract Diagnostic.Kind privateMemberValidationKind();","0","-","-","-","-"
"2064","staticMemberValidationKind","public abstract Diagnostic.Kind staticMemberValidationKind();","0","-","-","-","-"
"2065","includeStacktraceWithDeferredErrorMessages","/**
   * Returns","0","-","-","-","-"
"2066","scopeCycleValidationType","public abstract ValidationType scopeCycleValidationType();","0","-","-","-","-"
"2067","validateTransitiveComponentDependencies","/**
   * If","0","-","-","-","-"
"2068","warnIfInjectionFactoryNotGeneratedUpstream","public abstract boolean warnIfInjectionFactoryNotGeneratedUpstream();","0","-","-","-","-"
"2069","headerCompilation","public abstract boolean headerCompilation();","0","-","-","-","-"
"2070","fullBindingGraphValidationType","public abstract ValidationType fullBindingGraphValidationType();","0","-","-","-","-"
"2071","pluginsVisitFullBindingGraphs","/**
   * If","0","-","-","-","-"
"2072","moduleHasDifferentScopesDiagnosticKind","public abstract Diagnostic.Kind moduleHasDifferentScopesDiagnosticKind();","0","-","-","-","-"
"2073","explicitBindingConflictsWithInjectValidationType","public abstract ValidationType explicitBindingConflictsWithInjectValidationType();","0","-","-","-","-"
"2074","experimentalDaggerErrorMessages","public abstract boolean experimentalDaggerErrorMessages();","0","-","-","-","-"
"2075","strictSuperficialValidation","/**
   * Returns","0","-","-","-","-"
"2076","generatedClassExtendsComponent","/**
   * Returns","0","-","-","-","-"
"2077","useBindingGraphFix","/**
   * Returns","0","-","-","-","-"
"2078","useFrameworkTypeInMapMultibindingContributionKey","/**
   * Returns","0","-","-","-","-"
"2079","keysPerComponentShard","/** Returns the number of bindings allowed per shard. */
  public int keysPerComponentShard(XTypeElement component)","0","-","-","-","-"
"2080","strictMultibindingValidation","/**
   * This option enables a fix to an issue where Dagger previously would erroneously allow
   * multibinding contributions in a component to have dependencies on child components. This will
   * eventually become the default and enforced.
   */
  public abstract boolean strictMultibindingValidation();","0","-","-","-","-"
"2081","ignoreProvisionKeyWildcards","/**
   * Returns","0","-","-","-","-"
"2082","compilerOptions","@Binds
    CompilerOptions compilerOptions(JavacPluginCompilerOptions compilerOptions);","0","-","-","-","-"
"2083","JavacPluginModule","public JavacPluginModule(Context context)","0","-","-","-","-"
"2084","JavacPluginModule","public JavacPluginModule(Elements elements, Types types)","0","-","-","-","-"
"2085","messager","@Provides
  XMessager messager()","0","-","-","-","-"
"2086","xProcessingEnv","@Provides
  XProcessingEnv xProcessingEnv()","0","-","-","-","-"
"2087","JavacPluginCompilerOptions","@Inject
  JavacPluginCompilerOptions()","0","-","-","-","-"
"2088","fastInit","@Override
  public boolean fastInit(XTypeElement element)","0","-","-","-","-"
"2089","formatGeneratedSource","@Override
  public boolean formatGeneratedSource()","0","-","-","-","-"
"2090","writeProducerNameInToken","@Override
  public boolean writeProducerNameInToken()","0","-","-","-","-"
"2091","nullableValidationKind","@Override
  public Diagnostic.Kind nullableValidationKind()","0","-","-","-","-"
"2092","privateMemberValidationKind","@Override
  public Diagnostic.Kind privateMemberValidationKind()","0","-","-","-","-"
"2093","staticMemberValidationKind","@Override
  public Diagnostic.Kind staticMemberValidationKind()","0","-","-","-","-"
"2094","includeStacktraceWithDeferredErrorMessages","@Override
  public boolean includeStacktraceWithDeferredErrorMessages()","0","-","-","-","-"
"2095","scopeCycleValidationType","@Override
  public ValidationType scopeCycleValidationType()","0","-","-","-","-"
"2096","validateTransitiveComponentDependencies","@Override
  public boolean validateTransitiveComponentDependencies()","0","-","-","-","-"
"2097","warnIfInjectionFactoryNotGeneratedUpstream","@Override
  public boolean warnIfInjectionFactoryNotGeneratedUpstream()","0","-","-","-","-"
"2098","headerCompilation","@Override
  public boolean headerCompilation()","0","-","-","-","-"
"2099","fullBindingGraphValidationType","@Override
  public ValidationType fullBindingGraphValidationType()","0","-","-","-","-"
"2100","pluginsVisitFullBindingGraphs","@Override
  public boolean pluginsVisitFullBindingGraphs(XTypeElement element)","0","-","-","-","-"
"2101","moduleHasDifferentScopesDiagnosticKind","@Override
  public Diagnostic.Kind moduleHasDifferentScopesDiagnosticKind()","0","-","-","-","-"
"2102","explicitBindingConflictsWithInjectValidationType","@Override
  public ValidationType explicitBindingConflictsWithInjectValidationType()","0","-","-","-","-"
"2103","experimentalDaggerErrorMessages","@Override
  public boolean experimentalDaggerErrorMessages()","0","-","-","-","-"
"2104","useBindingGraphFix","@Override
  public boolean useBindingGraphFix()","0","-","-","-","-"
"2105","useFrameworkTypeInMapMultibindingContributionKey","@Override
  public boolean useFrameworkTypeInMapMultibindingContributionKey()","0","-","-","-","-"
"2106","strictMultibindingValidation","@Override
  public boolean strictMultibindingValidation()","0","-","-","-","-"
"2107","strictSuperficialValidation","@Override
  public boolean strictSuperficialValidation()","0","-","-","-","-"
"2108","generatedClassExtendsComponent","@Override
  public boolean generatedClassExtendsComponent()","0","-","-","-","-"
"2109","ignoreProvisionKeyWildcards","@Override
  public boolean ignoreProvisionKeyWildcards()","0","-","-","-","-"
"2110","JavacPluginProcessingEnvironment","JavacPluginProcessingEnvironment(Elements elements, Types types)","0","-","-","-","-"
"2111","getElementUtils","@Override
  public Elements getElementUtils()","0","-","-","-","-"
"2112","getTypeUtils","@Override
  public Types getTypeUtils()","0","-","-","-","-"
"2113","getFiler","@Override
  public Filer getFiler()","0","-","-","-","-"
"2114","getLocale","@Override
  public Locale getLocale()","0","-","-","-","-"
"2115","getMessager","@Override
  public Messager getMessager()","0","-","-","-","-"
"2116","getOptions","@Override
  public ImmutableMap<String, String> getOptions()","0","-","-","-","-"
"2117","getSourceVersion","@Override
  public SourceVersion getSourceVersion()","0","-","-","-","-"
"2118","createClassFile","@Override
    public JavaFileObject createClassFile(CharSequence name, Element... originatingElements)","0","-","-","-","-"
"2119","createResource","@Override
    public FileObject createResource(
        Location location,
        CharSequence pkg,
        CharSequence relativeName,
        Element... originatingElements)","0","-","-","-","-"
"2120","createSourceFile","@Override
    public JavaFileObject createSourceFile(CharSequence name, Element... originatingElements)","0","-","-","-","-"
"2121","getResource","@Override
    public FileObject getResource(Location location, CharSequence pkg, CharSequence relativeName)","0","-","-","-","-"
"2122","printMessage","@Override
    public void printMessage(Diagnostic.Kind kind, CharSequence charSequence)","0","-","-","-","-"
"2123","printMessage","@Override
    public void printMessage(Diagnostic.Kind kind, CharSequence charSequence, Element element)","0","-","-","-","-"
"2124","printMessage","@Override
    public void printMessage(
        Diagnostic.Kind kind,
        CharSequence charSequence,
        Element element,
        AnnotationMirror annotationMirror)","0","-","-","-","-"
"2125","printMessage","@Override
    public void printMessage(
        Diagnostic.Kind kind,
        CharSequence charSequence,
        Element element,
        AnnotationMirror annotationMirror,
        AnnotationValue annotationValue)","0","-","-","-","-"
"2126","KspComponentProcessor","private KspComponentProcessor(
      SymbolProcessorEnvironment symbolProcessorEnvironment,
      Optional<ImmutableSet<BindingGraphPlugin>> testingPlugins)","0","-","-","-","-"
"2127","initialize","@Override
  public void initialize(XProcessingEnv env)","0","-","-","-","-"
"2128","processingSteps","@Override
  public Iterable<XProcessingStep> processingSteps()","0","-","-","-","-"
"2129","preRound","@Override
  public void preRound(XProcessingEnv env, XRoundEnv roundEnv)","0","-","-","-","-"
"2130","postRound","@Override
  public void postRound(XProcessingEnv env, XRoundEnv roundEnv)","0","-","-","-","-"
"2131","withTestPlugins","/**
     * Creates a component processor that uses given","0","-","-","-","-"
"2132","withTestPlugins","/**
     * Creates a component processor that uses given","0","-","-","-","-"
"2133","Provider","public Provider()","0","-","-","-","-"
"2134","Provider","private Provider(Optional<ImmutableSet<BindingGraphPlugin>> testingPlugins)","0","-","-","-","-"
"2135","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"2136","reportComponent","/**
   * Reports a diagnostic for a component. For non-root components, includes information about the
   * path from the root component.
   */
  public abstract void reportComponent(
      Diagnostic.Kind diagnosticKind, ComponentNode componentNode, String message);","0","-","-","-","-"
"2137","reportComponent","/**
   * Reports a diagnostic for a component. For non-root components, includes information about the
   * path from the root component.
   */
  @FormatMethod
  public final void reportComponent(
      Diagnostic.Kind diagnosticKind,
      ComponentNode componentNode,
      String messageFormat,
      Object firstArg,
      Object... moreArgs)","0","-","-","-","-"
"2138","reportBinding","/**
   * Reports a diagnostic for a binding or missing binding. Includes information about how the
   * binding is reachable from entry points.
   */
  public abstract void reportBinding(
      Diagnostic.Kind diagnosticKind, MaybeBinding binding, String message);","0","-","-","-","-"
"2139","reportBinding","/**
   * Reports a diagnostic for a binding or missing binding. Includes information about how the
   * binding is reachable from entry points.
   */
  @FormatMethod
  public final void reportBinding(
      Diagnostic.Kind diagnosticKind,
      MaybeBinding binding,
      String messageFormat,
      Object firstArg,
      Object... moreArgs)","0","-","-","-","-"
"2140","reportDependency","/**
   * Reports a diagnostic for a dependency. Includes information about how the dependency is
   * reachable from entry points.
   */
  public abstract void reportDependency(
      Diagnostic.Kind diagnosticKind, DependencyEdge dependencyEdge, String message);","0","-","-","-","-"
"2141","reportDependency","/**
   * Reports a diagnostic for a dependency. Includes information about how the dependency is
   * reachable from entry points.
   */
  @FormatMethod
  public final void reportDependency(
      Diagnostic.Kind diagnosticKind,
      DependencyEdge dependencyEdge,
      String messageFormat,
      Object firstArg,
      Object... moreArgs)","0","-","-","-","-"
"2142","reportSubcomponentFactoryMethod","/** Reports a diagnostic for a subcomponent factory method. */
  public abstract void reportSubcomponentFactoryMethod(
      Diagnostic.Kind diagnosticKind,
      ChildFactoryMethodEdge childFactoryMethodEdge,
      String message);","0","-","-","-","-"
"2143","reportSubcomponentFactoryMethod","/** Reports a diagnostic for a subcomponent factory method. */
  @FormatMethod
  public final void reportSubcomponentFactoryMethod(
      Diagnostic.Kind diagnosticKind,
      ChildFactoryMethodEdge childFactoryMethodEdge,
      String messageFormat,
      Object firstArg,
      Object... moreArgs)","0","-","-","-","-"
"2144","formatMessage","private String formatMessage(String messageFormat, Object firstArg, Object[] moreArgs)","0","-","-","-","-"
"2145","toStableString","/**
   * Returns a String rendering of an","0","-","-","-","-"
"2146","stableAnnotationMirrorToString","/**
   * Returns a String rendering of an","0","-","-","-","-"
"2147","stableAnnotationValueToString","private static String stableAnnotationValueToString(AnnotationValue annotationValue)","0","-","-","-","-"
"2148","defaultAction","@Override
          protected String defaultAction(Object value, Void ignore)","0","-","-","-","-"
"2149","visitString","@Override
          public String visitString(String value, Void ignore)","0","-","-","-","-"
"2150","visitAnnotation","@Override
          public String visitAnnotation(AnnotationMirror value, Void ignore)","0","-","-","-","-"
"2151","visitArray","@Override
          public String visitArray(List<? extends AnnotationValue> value, Void ignore)","0","-","-","-","-"
"2152","MoreAnnotationMirrors","private MoreAnnotationMirrors()","0","-","-","-","-"
"2153","from","public static DaggerProcessingEnv from(XProcessingEnv processingEnv)","0","-","-","-","-"
"2154","xprocessing","public abstract XProcessingEnv xprocessing();","0","-","-","-","-"
"2155","getBackend","/** Returns the backend used in this compilation. */
  public Backend getBackend()","0","-","-","-","-"
"2156","javac","public ProcessingEnvironment javac()","0","-","-","-","-"
"2157","from","public static DaggerElement from(XElement element)","0","-","-","-","-"
"2158","xprocessing","public abstract XElement xprocessing();","0","-","-","-","-"
"2159","javac","public Element javac()","0","-","-","-","-"
"2160","toString","@Override
  public final String toString()","0","-","-","-","-"
"2161","network","/** Returns the graph in its","0","-","-","-","-"
"2162","toString","@Override
  public String toString()","0","-","-","-","-"
"2163","isModuleBindingGraph","/**
   * Returns ","0","-","-","-","-"
"2164","isFullBindingGraph","/**
   * Returns","0","-","-","-","-"
"2165","isPartialBindingGraph","/**
   * Returns","0","-","-","-","-"
"2166","bindings","/** Returns the bindings. */
  public ImmutableSet<Binding> bindings()","0","-","-","-","-"
"2167","bindings","/** Returns the bindings for a key. */
  public ImmutableSet<Binding> bindings(Key key)","0","-","-","-","-"
"2168","missingBindings","/** Returns the nodes that represent missing bindings. */
  public ImmutableSet<MissingBinding> missingBindings()","0","-","-","-","-"
"2169","componentNodes","/** Returns the component nodes. */
  public ImmutableSet<ComponentNode> componentNodes()","0","-","-","-","-"
"2170","componentNode","/** Returns the component node for a component. */
  public Optional<ComponentNode> componentNode(ComponentPath component)","0","-","-","-","-"
"2171","componentNodes","/** Returns the component nodes for a component. */
  public ImmutableSet<ComponentNode> componentNodes(DaggerTypeElement component)","0","-","-","-","-"
"2172","rootComponentNode","/** Returns the component node for the root component. */
  public ComponentNode rootComponentNode()","0","-","-","-","-"
"2173","dependencyEdges","/** Returns the dependency edges. */
  public ImmutableSet<DependencyEdge> dependencyEdges()","0","-","-","-","-"
"2174","dependencyEdges","/**
   * Returns the dependency edges for the dependencies of a binding. For valid graphs, each","0","-","-","-","-"
"2175","dependencyEdges","/** Returns the dependency edges for a dependency request. */
  public ImmutableSet<DependencyEdge> dependencyEdges(DependencyRequest dependencyRequest)","0","-","-","-","-"
"2176","entryPointEdges","/**
   * Returns the dependency edges for the entry points of a given","0","-","-","-","-"
"2177","dependencyEdgeStream","private Stream<DependencyEdge> dependencyEdgeStream(Node node)","0","-","-","-","-"
"2178","entryPointEdges","/**
   * Returns the dependency edges for all entry points for all components and subcomponents. Each
   * edge's source node is a component node.
   */
  public ImmutableSet<DependencyEdge> entryPointEdges()","0","-","-","-","-"
"2179","entryPointBindings","/** Returns the binding or missing binding nodes that directly satisfy entry points. */
  public ImmutableSet<MaybeBinding> entryPointBindings()","0","-","-","-","-"
"2180","entryPointEdgesDependingOnBinding","/**
   * Returns the edges for entry points that transitively depend on a binding or missing binding for
   * a key.
   */
  public ImmutableSet<DependencyEdge> entryPointEdgesDependingOnBinding(
      MaybeBinding binding)","0","-","-","-","-"
"2181","requestingBindings","/** Returns the bindings that directly request a given binding as a dependency. */
  public ImmutableSet<Binding> requestingBindings(MaybeBinding binding)","0","-","-","-","-"
"2182","requestedBindings","/**
   * Returns the bindings that a given binding directly requests as a dependency. Does not include
   * any","0","-","-","-","-"
"2183","requestedMaybeMissingBindings","/**
   * Returns the bindings or missing bindings that a given binding directly requests as a
   * dependency.
   *
   * @see #requestedBindings(Binding)
   */
  public ImmutableSet<MaybeBinding> requestedMaybeMissingBindings(Binding binding)","0","-","-","-","-"
"2184","dependencyGraph","/** Returns a subnetwork that contains all nodes but only","0","-","-","-","-"
"2185","nodes","@SuppressWarnings(","0","-","-","-","-"
"2186","nodesByClass","protected ImmutableSetMultimap<Class<? extends Node>, ? extends Node> nodesByClass()","0","-","-","-","-"
"2187","dependencyEdgeStream","private Stream<DependencyEdge> dependencyEdgeStream()","0","-","-","-","-"
"2188","entryPointEdgeStream","private Stream<DependencyEdge> entryPointEdgeStream()","0","-","-","-","-"
"2189","dependencyRequest","/** The dependency request. */
    DependencyRequest dependencyRequest();","0","-","-","-","-"
"2190","isEntryPoint","/** Returns","0","-","-","-","-"
"2191","factoryMethod","/** The subcomponent factory method element. */
    DaggerExecutableElement factoryMethod();","0","-","-","-","-"
"2192","declaringModules","/**
     * The modules that","0","-","-","-","-"
"2193","componentPath","/** The component this node belongs to. */
    ComponentPath componentPath();","0","-","-","-","-"
"2194","componentPath","/** The component that owns the binding, or in which the binding is missing. */
    @Override
    ComponentPath componentPath();","0","-","-","-","-"
"2195","key","/** The key of the binding, or for which there is no binding. */
    Key key();","0","-","-","-","-"
"2196","binding","/** The binding, or empty if missing. */
    Optional<Binding> binding();","0","-","-","-","-"
"2197","componentPath","/** The component in which the binding is missing. */
    @Override
    public abstract ComponentPath componentPath();","0","-","-","-","-"
"2198","key","/** The key for which there is no binding. */
    @Override
    public abstract Key key();","0","-","-","-","-"
"2199","binding","/** @deprecated This always returns","0","-","-","-","-"
"2200","toString","@Override
    public String toString()","0","-","-","-","-"
"2201","componentPath","/** The component represented by this node. */
    @Override
    ComponentPath componentPath();","0","-","-","-","-"
"2202","isSubcomponent","/**
     * Returns","0","-","-","-","-"
"2203","isRealComponent","/**
     * Returns","0","-","-","-","-"
"2204","entryPoints","/** The entry points on this component. */
    ImmutableSet<DependencyRequest> entryPoints();","0","-","-","-","-"
"2205","scopes","/** The scopes declared on this component. */
    ImmutableSet<Scope> scopes();","0","-","-","-","-"
"2206","from","public static DaggerType from(XType type)","0","-","-","-","-"
"2207","equivalenceWrapper","abstract Equivalence.Wrapper<XType> equivalenceWrapper();","0","-","-","-","-"
"2208","xprocessing","public XType xprocessing()","0","-","-","-","-"
"2209","javac","public TypeMirror javac()","0","-","-","-","-"
"2210","toString","@Override
  public final String toString()","0","-","-","-","-"
"2211","visitGraph","/**
   * Called once for each valid root binding graph encountered by the Dagger processor. May report
   * diagnostics using","0","-","-","-","-"
"2212","init","/**
   * Initializes this plugin with a","0","-","-","-","-"
"2213","supportedOptions","/**
   * Returns the annotation-processing options that this plugin uses to configure behavior.
   *
   * @see javax.annotation.processing.Processor#getSupportedOptions()
   */
  default Set<String> supportedOptions()","0","-","-","-","-"
"2214","pluginName","/**
   * A distinguishing name of the plugin that will be used in diagnostics printed to the messager.
   * By default, the","0","-","-","-","-"
"2215","onPluginEnd","/**
   * Perform any extra work after the plugin finished all its visiting. This will be called once per
   * instance of this plugin, after all graphs were","0","-","-","-","-"
"2216","from","public static DaggerTypeElement from(XTypeElement typeElement)","0","-","-","-","-"
"2217","xprocessing","public abstract XTypeElement xprocessing();","0","-","-","-","-"
"2218","javac","public TypeElement javac()","0","-","-","-","-"
"2219","toString","@Override
  public final String toString()","0","-","-","-","-"
"2220","create","/** Returns a new","0","-","-","-","-"
"2221","components","/**
   * Returns the component types, starting from the","0","-","-","-","-"
"2222","rootComponent","/**
   * Returns the root","0","-","-","-","-"
"2223","currentComponent","/** Returns the component at the end of the path. */
  @Memoized
  public DaggerTypeElement currentComponent()","0","-","-","-","-"
"2224","parentComponent","/**
   * Returns the parent of the","0","-","-","-","-"
"2225","parent","/**
   * Returns this path's parent path.
   *
   * @throws IllegalStateException if the current graph is the","0","-","-","-","-"
"2226","childPath","/** Returns the path from the root component to the","0","-","-","-","-"
"2227","atRoot","/**
   * Returns","0","-","-","-","-"
"2228","toString","@Override
  public final String toString()","0","-","-","-","-"
"2229","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"2230","equals","@Override
  public abstract boolean equals(Object obj);","0","-","-","-","-"
"2231","scope","/**
   * Creates a","0","-","-","-","-"
"2232","isScope","/**
   * Returns","0","-","-","-","-"
"2233","isScope","/**
   * Returns","0","-","-","-","-"
"2234","scopeAnnotation","/** The","0","-","-","-","-"
"2235","isSingleton","/** Returns","0","-","-","-","-"
"2236","isReusable","/** Returns","0","-","-","-","-"
"2237","isProductionScope","/**
   * Returns","0","-","-","-","-"
"2238","isScope","private boolean isScope(XClassName annotation)","0","-","-","-","-"
"2239","toString","/** Returns a debug representation of the scope. */
  @Override
  public final String toString()","0","-","-","-","-"
"2240","qualifier","/**
   * A","0","-","-","-","-"
"2241","type","/** The type represented by this key. */
  public abstract DaggerType type();","0","-","-","-","-"
"2242","multibindingContributionIdentifier","/**
   * Distinguishes keys for multibinding contributions that share a","0","-","-","-","-"
"2243","toBuilder","/** Returns a","0","-","-","-","-"
"2244","withType","/** Returns a copy of this key with the type replaced with the given type. */
  public Key withType(DaggerType newType)","0","-","-","-","-"
"2245","withMultibindingContributionIdentifier","/**
   * Returns a copy of this key with the multibinding contribution identifier replaced with the
   * given multibinding contribution identifier.
   */
  public Key withMultibindingContributionIdentifier(
      DaggerTypeElement contributingModule, DaggerExecutableElement bindingMethod)","0","-","-","-","-"
"2246","withoutMultibindingContributionIdentifier","/** Returns a copy of this key with the multibinding contribution identifier, if any, removed. */
  public Key withoutMultibindingContributionIdentifier()","0","-","-","-","-"
"2247","hashCode","@Memoized
  @Override
  public abstract int hashCode();","0","-","-","-","-"
"2248","equals","@Override
  public abstract boolean equals(Object o);","0","-","-","-","-"
"2249","toString","@Override
  public final String toString()","0","-","-","-","-"
"2250","builder","/** Returns a builder for","0","-","-","-","-"
"2251","type","public abstract Builder type(DaggerType type);","0","-","-","-","-"
"2252","qualifier","public abstract Builder qualifier(Optional<DaggerAnnotation> qualifier);","0","-","-","-","-"
"2253","qualifier","public abstract Builder qualifier(DaggerAnnotation qualifier);","0","-","-","-","-"
"2254","multibindingContributionIdentifier","public final Builder multibindingContributionIdentifier(
        DaggerTypeElement contributingModule, DaggerExecutableElement bindingMethod)","0","-","-","-","-"
"2255","multibindingContributionIdentifier","abstract Builder multibindingContributionIdentifier(
        Optional<MultibindingContributionIdentifier> identifier);","0","-","-","-","-"
"2256","build","public abstract Key build();","0","-","-","-","-"
"2257","create","private static MultibindingContributionIdentifier create(
        DaggerTypeElement contributingModule, DaggerExecutableElement bindingMethod)","0","-","-","-","-"
"2258","contributingModule","/** Returns the module containing the multibinding method. */
    public abstract DaggerTypeElement contributingModule();","0","-","-","-","-"
"2259","bindingMethod","/** Returns the multibinding method that defines teh multibinding contribution. */
    public abstract DaggerExecutableElement bindingMethod();","0","-","-","-","-"
"2260","toString","/**
     *","0","-","-","-","-"
"2261","kind","/** The kind of this request. */
  public abstract RequestKind kind();","0","-","-","-","-"
"2262","key","/** The key of this request. */
  public abstract Key key();","0","-","-","-","-"
"2263","requestElement","/**
   * The element that declares this dependency request. Absent for <a href=""#synthetic"">synthetic
   * </a> requests.
   */
  public abstract Optional<DaggerElement> requestElement();","0","-","-","-","-"
"2264","isNullable","/**
   * Returns","0","-","-","-","-"
"2265","builder","/** Returns a new builder of dependency requests. */
  public static DependencyRequest.Builder builder()","0","-","-","-","-"
"2266","kind","public abstract Builder kind(RequestKind kind);","0","-","-","-","-"
"2267","key","public abstract Builder key(Key key);","0","-","-","-","-"
"2268","requestElement","public abstract Builder requestElement(DaggerElement element);","0","-","-","-","-"
"2269","isNullable","public abstract Builder isNullable(boolean isNullable);","0","-","-","-","-"
"2270","build","public abstract DependencyRequest build();","0","-","-","-","-"
"2271","from","public static DaggerAnnotation from(XAnnotation annotation)","0","-","-","-","-"
"2272","equivalenceWrapper","abstract Equivalence.Wrapper<XAnnotation> equivalenceWrapper();","0","-","-","-","-"
"2273","annotationTypeElement","public DaggerTypeElement annotationTypeElement()","0","-","-","-","-"
"2274","xprocessing","public XAnnotation xprocessing()","0","-","-","-","-"
"2275","javac","public AnnotationMirror javac()","0","-","-","-","-"
"2276","toString","@Override
  public final String toString()","0","-","-","-","-"
"2277","componentPath","@Override
  ComponentPath componentPath();","0","-","-","-","-"
"2278","binding","/** @deprecated This always returns","0","-","-","-","-"
"2279","dependencies","/**
   * The dependencies of this binding. The order of the dependencies corresponds to the order in
   * which they will be injected when the binding is requested.
   */
  ImmutableSet<DependencyRequest> dependencies();","0","-","-","-","-"
"2280","bindingElement","/**
   * The","0","-","-","-","-"
"2281","contributingModule","/**
   * The","0","-","-","-","-"
"2282","requiresModuleInstance","/**
   * Returns","0","-","-","-","-"
"2283","scope","/** The scope of this binding if it has one. */
  Optional<Scope> scope();","0","-","-","-","-"
"2284","isNullable","/**
   * Returns","0","-","-","-","-"
"2285","isProduction","/** Returns","0","-","-","-","-"
"2286","kind","/** The kind of binding this instance represents. */
  BindingKind kind();","0","-","-","-","-"
"2287","from","public static DaggerExecutableElement from(XExecutableElement executableElement)","0","-","-","-","-"
"2288","xprocessing","public abstract XExecutableElement xprocessing();","0","-","-","-","-"
"2289","javac","public ExecutableElement javac()","0","-","-","-","-"
"2290","toString","@Override
  public final String toString()","0","-","-","-","-"
"2291","LazyClassKeyProcessingStep","@Inject
  LazyClassKeyProcessingStep(LazyMapKeyProxyGenerator lazyMapKeyProxyGenerator)","0","-","-","-","-"
"2292","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"2293","process","@Override
  protected void process(XElement element, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"2294","isMapBinding","private static boolean isMapBinding(XElement element)","0","-","-","-","-"
"2295","isModuleOrProducerModule","private static boolean isModuleOrProducerModule(XElement element)","0","-","-","-","-"
"2296","processOver","@Override
  public void processOver(
      XProcessingEnv env, Map<String, ? extends Set<? extends XElement>> elementsByAnnotation)","0","-","-","-","-"
"2297","writeResource","private void writeResource(
      XFiler filer, XElement originatingElement, Path path, String contents)","0","-","-","-","-"
"2298","getFullyQualifiedEnclosedClassName","/** Returns the fully qualified class name, with _ instead of . */
  private static String getFullyQualifiedEnclosedClassName(XClassName className)","0","-","-","-","-"
"2299","MapKeyProcessingStep","@Inject
  MapKeyProcessingStep(
      MapKeyValidator mapKeyValidator,
      AnnotationCreatorGenerator annotationCreatorGenerator,
      UnwrappedMapKeyGenerator unwrappedMapKeyGenerator)","0","-","-","-","-"
"2300","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"2301","process","@Override
  protected void process(XTypeElement mapAnnotation, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"2302","isAnnotationType","private boolean isAnnotationType(XType type)","0","-","-","-","-"
"2303","BindsInstanceProcessingStep","@Inject
  BindsInstanceProcessingStep(
      BindsInstanceMethodValidator methodValidator,
      BindsInstanceParameterValidator parameterValidator)","0","-","-","-","-"
"2304","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"2305","process","@Override
  protected void process(XElement element, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"2306","annotations","@Override
  public final ImmutableSet<String> annotations()","0","-","-","-","-"
"2307","process","@SuppressWarnings(""unchecked"") // Subclass must ensure all annotated targets are of valid type.
  @Override
  public ImmutableSet<XElement> process(
      XProcessingEnv env, Map<String, ? extends Set<? extends XElement>> elementsByAnnotation)","0","-","-","-","-"
"2308","requiresPreValidation","/**
   * Returns","0","-","-","-","-"
"2309","processOver","@Override
  public void processOver(
      XProcessingEnv env, Map<String, ? extends Set<? extends XElement>> elementsByAnnotation)","0","-","-","-","-"
"2310","cacheErrorMessage","private void cacheErrorMessage(String errorMessage, Exception exception)","0","-","-","-","-"
"2311","typeNotPresentErrorMessage","private String typeNotPresentErrorMessage(XElement element, TypeNotPresentException exception)","0","-","-","-","-"
"2312","knownErrorTypeErrorMessage","private String knownErrorTypeErrorMessage(
      XElement element, ValidationException.KnownErrorType exception)","0","-","-","-","-"
"2313","unknownErrorTypeErrorMessage","private String unknownErrorTypeErrorMessage(
      XElement element, ValidationException.UnknownErrorType exception)","0","-","-","-","-"
"2314","process","/**
   * Processes one element. If this method throws","0","-","-","-","-"
"2315","inverse","private ImmutableMap<XElement, ImmutableSet<XClassName>> inverse(
      Map<String, ? extends Set<? extends XElement>> elementsByAnnotation)","0","-","-","-","-"
"2316","annotationClassNames","/** Returns the set of annotations processed by this processing step. */
  protected abstract Set<XClassName> annotationClassNames();","0","-","-","-","-"
"2317","AssistedInjectProcessingStep","@Inject
  AssistedInjectProcessingStep(InjectValidator injectValidator)","0","-","-","-","-"
"2318","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"2319","process","@Override
  protected void process(
      XConstructorElement assistedInjectElement, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"2320","validate","ValidationReport validate(XConstructorElement constructor)","0","-","-","-","-"
"2321","MonitoringModuleProcessingStep","@Inject
  MonitoringModuleProcessingStep(MonitoringModuleGenerator monitoringModuleGenerator)","0","-","-","-","-"
"2322","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"2323","process","@Override
  protected void process(XTypeElement productionComponent, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"2324","MultibindingAnnotationsProcessingStep","@Inject
  MultibindingAnnotationsProcessingStep(AnyBindingMethodValidator anyBindingMethodValidator)","0","-","-","-","-"
"2325","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"2326","process","@Override
  protected void process(XExecutableElement method, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"2327","AssistedProcessingStep","@Inject
  AssistedProcessingStep(InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"2328","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"2329","process","@Override
  protected void process(
      XExecutableParameterElement assisted, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"2330","validate","ValidationReport validate(XExecutableParameterElement assisted)","0","-","-","-","-"
"2331","isAssistedInjectConstructor","private boolean isAssistedInjectConstructor(XExecutableElement executableElement)","0","-","-","-","-"
"2332","isAssistedFactoryCreateMethod","private boolean isAssistedFactoryCreateMethod(XExecutableElement executableElement)","0","-","-","-","-"
"2333","isKotlinDataClassCopyMethod","private boolean isKotlinDataClassCopyMethod(XExecutableElement executableElement)","0","-","-","-","-"
"2334","ComponentProcessingStep","@Inject
  ComponentProcessingStep(
      ComponentValidator componentValidator,
      ComponentCreatorValidator creatorValidator,
      ComponentDescriptorValidator componentDescriptorValidator,
      ComponentDescriptor.Factory componentDescriptorFactory,
      BindingGraphFactory bindingGraphFactory,
      SourceFileGenerator<BindingGraph> componentGenerator,
      BindingGraphValidator bindingGraphValidator)","0","-","-","-","-"
"2335","annotationClassNames","@Override
  public Set<XClassName> annotationClassNames()","0","-","-","-","-"
"2336","process","@Override
  protected void process(XTypeElement element, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"2337","processRootComponent","private void processRootComponent(XTypeElement component)","0","-","-","-","-"
"2338","processSubcomponent","private void processSubcomponent(XTypeElement subcomponent)","0","-","-","-","-"
"2339","generateComponent","private void generateComponent(BindingGraph bindingGraph)","0","-","-","-","-"
"2340","processCreator","private void processCreator(XTypeElement creator)","0","-","-","-","-"
"2341","isComponentValid","private boolean isComponentValid(XTypeElement component)","0","-","-","-","-"
"2342","isValid","private boolean isValid(ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"2343","AssistedFactoryProcessingStep","@Inject
  AssistedFactoryProcessingStep(
      XProcessingEnv processingEnv,
      XMessager messager,
      XFiler filer,
      BindingFactory bindingFactory,
      MethodSignatureFormatter methodSignatureFormatter,
      SuperficialValidator superficialValidator)","0","-","-","-","-"
"2344","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"2345","process","@Override
  protected void process(XTypeElement factory, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"2346","validate","ValidationReport validate(XTypeElement factory)","0","-","-","-","-"
"2347","isAssistedInjectionType","private boolean isAssistedInjectionType(XType type)","0","-","-","-","-"
"2348","AssistedFactoryImplGenerator","AssistedFactoryImplGenerator()","0","-","-","-","-"
"2349","originatingElement","@Override
    public XElement originatingElement(AssistedFactoryBinding binding)","0","-","-","-","-"
"2350","topLevelTypes","@Override
    public ImmutableList<XTypeSpec> topLevelTypes(AssistedFactoryBinding binding)","0","-","-","-","-"
"2351","delegateFactoryTypeName","/** Returns the generated factory","0","-","-","-","-"
"2352","InjectProcessingStep","@Inject
  InjectProcessingStep(InjectBindingRegistry injectBindingRegistry)","0","-","-","-","-"
"2353","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"2354","requiresPreValidation","@Override
  protected boolean requiresPreValidation()","0","-","-","-","-"
"2355","process","@Override
  protected void process(XElement injectElement, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"2356","processingSteps","@Provides
  static ImmutableList<XProcessingStep> processingSteps(
      MapKeyProcessingStep mapKeyProcessingStep,
      InjectProcessingStep injectProcessingStep,
      AssistedInjectProcessingStep assistedInjectProcessingStep,
      AssistedFactoryProcessingStep assistedFactoryProcessingStep,
      AssistedProcessingStep assistedProcessingStep,
      MonitoringModuleProcessingStep monitoringModuleProcessingStep,
      MultibindingAnnotationsProcessingStep multibindingAnnotationsProcessingStep,
      BindsInstanceProcessingStep bindsInstanceProcessingStep,
      ModuleProcessingStep moduleProcessingStep,
      LazyClassKeyProcessingStep lazyClassKeyProcessingStep,
      ComponentProcessingStep componentProcessingStep,
      ComponentHjarProcessingStep componentHjarProcessingStep,
      BindingMethodProcessingStep bindingMethodProcessingStep,
      CompilerOptions compilerOptions)","0","-","-","-","-"
"2357","superficialValidator","@Binds
  @IntoSet
  ClearableCache superficialValidator(SuperficialValidator cache);","0","-","-","-","-"
"2358","SuperficialValidator","@Inject
  SuperficialValidator(DaggerSuperficialValidation superficialValidation)","0","-","-","-","-"
"2359","throwIfNearestEnclosingTypeNotValid","void throwIfNearestEnclosingTypeNotValid(XElement element)","0","-","-","-","-"
"2360","validationExceptionsUncached","private Optional<ValidationException> validationExceptionsUncached(XTypeElement element)","0","-","-","-","-"
"2361","clearCache","@Override
  public void clearCache()","0","-","-","-","-"
"2362","BindingMethodProcessingStep","@Inject
  BindingMethodProcessingStep(AnyBindingMethodValidator anyBindingMethodValidator)","0","-","-","-","-"
"2363","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"2364","process","@Override
  protected void process(XMethodElement method, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"2365","ComponentHjarProcessingStep","@Inject
  ComponentHjarProcessingStep(
      ComponentValidator componentValidator,
      ComponentCreatorValidator creatorValidator,
      ComponentDescriptor.Factory componentDescriptorFactory,
      SourceFileGenerator<ComponentDescriptor> componentGenerator)","0","-","-","-","-"
"2366","annotationClassNames","@Override
  public Set<XClassName> annotationClassNames()","0","-","-","-","-"
"2367","process","@Override
  protected void process(XTypeElement element, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"2368","processRootComponent","private void processRootComponent(XTypeElement element)","0","-","-","-","-"
"2369","processRootCreator","private void processRootCreator(XTypeElement creator)","0","-","-","-","-"
"2370","ModuleProcessingStep","@Inject
  ModuleProcessingStep(
      ModuleValidator moduleValidator,
      BindingFactory bindingFactory,
      SourceFileGenerator<ContributionBinding> factoryGenerator,
      SourceFileGenerator<ProductionBinding> producerFactoryGenerator,
      @ModuleGenerator SourceFileGenerator<XTypeElement> moduleConstructorProxyGenerator,
      InaccessibleMapKeyProxyGenerator inaccessibleMapKeyProxyGenerator,
      DelegateDeclaration.Factory delegateDeclarationFactory)","0","-","-","-","-"
"2371","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"2372","process","@Override
  public ImmutableSet<XElement> process(
      XProcessingEnv env, Map<String, ? extends Set<? extends XElement>> elementsByAnnotation)","0","-","-","-","-"
"2373","process","@Override
  protected void process(XTypeElement module, ImmutableSet<XClassName> annotations)","0","-","-","-","-"
"2374","generateForMethodsIn","private void generateForMethodsIn(XTypeElement module)","0","-","-","-","-"
"2375","generate","private <B extends ContributionBinding> void generate(
      SourceFileGenerator<B> generator, B binding)","0","-","-","-","-"
"2376","bindsMethodBinding","private ContributionBinding bindsMethodBinding(XTypeElement module, XMethodElement method)","0","-","-","-","-"
"2377","MonitoringModuleGenerator","@Inject
  MonitoringModuleGenerator(
      XFiler filer,
      XProcessingEnv processingEnv,
      MonitoringModules monitoringModules)","0","-","-","-","-"
"2378","originatingElement","@Override
  public XElement originatingElement(XTypeElement componentElement)","0","-","-","-","-"
"2379","topLevelTypes","@Override
  public ImmutableList<XTypeSpec> topLevelTypes(XTypeElement componentElement)","0","-","-","-","-"
"2380","privateConstructor","private XFunSpec privateConstructor()","0","-","-","-","-"
"2381","setOfFactories","private XFunSpec setOfFactories()","0","-","-","-","-"
"2382","monitor","private XFunSpec monitor(XTypeElement componentElement)","0","-","-","-","-"
"2383","withTestPlugins","/**
   * Creates a component processor that uses given","0","-","-","-","-"
"2384","withTestPlugins","/**
   * Creates a component processor that uses given","0","-","-","-","-"
"2385","forTesting","/**
   * Creates a component processor that uses given","0","-","-","-","-"
"2386","forTesting","/**
   * Creates a component processor that uses given","0","-","-","-","-"
"2387","ComponentProcessor","public ComponentProcessor()","0","-","-","-","-"
"2388","ComponentProcessor","private ComponentProcessor(
      Optional<ImmutableSet<BindingGraphPlugin>> testingPlugins,
      Optional<ImmutableSet<dagger.spi.BindingGraphPlugin>> legacyTestingPlugins)","0","-","-","-","-"
"2389","initialize","@Override
  public void initialize(XProcessingEnv env)","0","-","-","-","-"
"2390","getSupportedSourceVersion","@Override
  public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"2391","getSupportedOptions","@Override
  public ImmutableSet<String> getSupportedOptions()","0","-","-","-","-"
"2392","processingSteps","@Override
  public Iterable<XProcessingStep> processingSteps()","0","-","-","-","-"
"2393","preRound","@Override
  public void preRound(XProcessingEnv env, XRoundEnv roundEnv)","0","-","-","-","-"
"2394","postRound","@Override
  public void postRound(XProcessingEnv env, XRoundEnv roundEnv)","0","-","-","-","-"
"2395","DependencyCycleValidator","@Inject
  DependencyCycleValidator(DependencyRequestFormatter dependencyRequestFormatter)","0","-","-","-","-"
"2396","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"2397","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2398","cycleContainingEndpointPair","private Optional<Cycle<Node>> cycleContainingEndpointPair(
      EndpointPair<Node> endpoints,
      ImmutableNetwork<Node, DependencyEdge> dependencyGraph,
      Set<EndpointPair<Node>> visited)","0","-","-","-","-"
"2399","reportCycle","/**
   * Reports a dependency cycle at the dependency into the cycle that is closest to an entry point.
   *
   * <p>For cycles found in reachable binding graphs, looks for the shortest path from the component
   * that contains the cycle (all bindings in a cycle must be in the same component; see below) to
   * some binding in the cycle. Then looks for the last dependency in that path that is not in the
   * cycle; that is the dependency that will be reported, so that the dependency trace will end just
   * before the cycle.
   *
   * <p>For cycles found during full binding graph validation, just reports the component that
   * contains the cycle.
   *
   * <p>Proof (by counterexample) that all bindings in a cycle must be in the same component: Assume
   * one binding in the cycle is in a parent component. Bindings cannot depend on bindings in child
   * components, so that binding cannot depend on the next binding in the cycle.
   */
  private void reportCycle(
      Cycle<Node> cycle, BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2400","shortestPathToCycleFromAnEntryPoint","private ImmutableList<Node> shortestPathToCycleFromAnEntryPoint(
      Cycle<Node> cycle, BindingGraph bindingGraph)","0","-","-","-","-"
"2401","subpathToCycle","/**
   * Returns the subpath from the head of","0","-","-","-","-"
"2402","errorMessage","private String errorMessage(Cycle<Node> cycle, BindingGraph graph)","0","-","-","-","-"
"2403","cycleEdges","private ImmutableList<DependencyEdge> cycleEdges(Cycle<Node> cycle, BindingGraph graph)","0","-","-","-","-"
"2404","nonCycleBreakingEdge","/**
   * Returns one of the edges between two nodes that doesn't","0","-","-","-","-"
"2405","breaksCycle","private boolean breaksCycle(DependencyEdge edge, BindingGraph graph)","0","-","-","-","-"
"2406","breaksCycle","private boolean breaksCycle(XType requestedType, RequestKind requestKind)","0","-","-","-","-"
"2407","chooseDependencyEdgeConnecting","private DependencyEdge chooseDependencyEdgeConnecting(
      Node source, Node target, BindingGraph bindingGraph)","0","-","-","-","-"
"2408","nonCycleBreakingDependencyGraph","/** Returns the subgraph containing only","0","-","-","-","-"
"2409","endpointPairs","/**
     * The ordered set of endpoint pairs representing the edges in the cycle. The target of each
     * pair is the source of the next pair. The target of the last pair is the source of the first
     * pair.
     */
    abstract ImmutableSet<EndpointPair<N>> endpointPairs();","0","-","-","-","-"
"2410","nodes","/** Returns the nodes that participate in the cycle. */
    ImmutableSet<N> nodes()","0","-","-","-","-"
"2411","size","/** Returns the number of edges in the cycle. */
    int size()","0","-","-","-","-"
"2412","shift","/**
     * Shifts this cycle so that it starts with a specific node.
     *
     * @return a cycle equivalent to this one but whose first pair starts with","0","-","-","-","-"
"2413","toString","@Override
    public final String toString()","0","-","-","-","-"
"2414","fromPath","/**
     * Creates a","0","-","-","-","-"
"2415","ProvisionDependencyOnProducerBindingValidator","@Inject
  ProvisionDependencyOnProducerBindingValidator()","0","-","-","-","-"
"2416","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"2417","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2418","provisionDependenciesOnProductionBindings","private Stream<DependencyEdge> provisionDependenciesOnProductionBindings(
      BindingGraph bindingGraph)","0","-","-","-","-"
"2419","incomingDependencies","/** Returns the dependencies on","0","-","-","-","-"
"2420","bindingRequestingDependency","/**
   * Returns the binding that requests a dependency.
   *
   * @throws IllegalArgumentException if","0","-","-","-","-"
"2421","entryPointErrorMessage","private String entryPointErrorMessage(DependencyEdge entryPoint)","0","-","-","-","-"
"2422","dependencyErrorMessage","private String dependencyErrorMessage(
      DependencyEdge dependencyOnProduction, BindingGraph bindingGraph)","0","-","-","-","-"
"2423","NullableBindingValidator","@Inject
  NullableBindingValidator(CompilerOptions compilerOptions)","0","-","-","-","-"
"2424","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2425","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"2426","nullableBindings","private ImmutableList<Binding> nullableBindings(BindingGraph bindingGraph)","0","-","-","-","-"
"2427","nonNullableDependencies","private ImmutableSet<DependencyEdge> nonNullableDependencies(
      BindingGraph bindingGraph, Binding binding)","0","-","-","-","-"
"2428","nullableToNonNullable","@VisibleForTesting
  static String nullableToNonNullable(String key, String binding)","0","-","-","-","-"
"2429","providePlugins","@Provides
  @Validation
  static ImmutableSet<ValidationBindingGraphPlugin> providePlugins(
      CompositeBindingGraphPlugin.Factory factory,
      CompilerOptions compilerOptions,
      DependencyCycleValidator validation1,
      DependsOnProductionExecutorValidator validation2,
      DuplicateBindingsValidator validation3,
      IncompatiblyScopedBindingsValidator validation4,
      InjectBindingValidator validation5,
      MapMultibindingValidator validation6,
      MissingBindingValidator validation7,
      NullableBindingValidator validation8,
      ProvisionDependencyOnProducerBindingValidator validation9,
      InvalidProductionBindingScopeValidator validation10,
      SetMultibindingValidator validation11,
      SubcomponentFactoryMethodValidator validation12)","0","-","-","-","-"
"2430","SetMultibindingValidator","@Inject
  SetMultibindingValidator()","0","-","-","-","-"
"2431","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"2432","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2433","checkForDuplicateSetContributions","private void checkForDuplicateSetContributions(
      Binding binding, BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2434","dereferenceDelegateBinding","/**
   * Returns the dereferenced key of a delegate binding (going through other delegates as well).
   *
   * <p>If the binding cannot be dereferenced (because it leads to a missing binding or duplicate
   * bindings) then","0","-","-","-","-"
"2435","MissingBindingValidator","@Inject
  MissingBindingValidator(
      InjectBindingRegistry injectBindingRegistry,
      DiagnosticMessageGenerator.Factory diagnosticMessageGeneratorFactory)","0","-","-","-","-"
"2436","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"2437","visitGraph","@Override
  public void visitGraph(BindingGraph graph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2438","revisitFullGraph","@Override
  public void revisitFullGraph(
      BindingGraph prunedGraph, BindingGraph fullGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2439","reportMissingBinding","private void reportMissingBinding(
      MissingBinding missingBinding,
      BindingGraph graph,
      DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2440","getSimilarTypeBindings","private static ImmutableSet<Binding> getSimilarTypeBindings(
      BindingGraph graph, Key missingBindingKey)","0","-","-","-","-"
"2441","flattenBindingType","/**
   * Unwraps a parameterized type to a list of","0","-","-","-","-"
"2442","isSimilarType","private static boolean isSimilarType(DaggerType type, ImmutableList<TypeName> flatTypeNames)","0","-","-","-","-"
"2443","getBound","private static TypeName getBound(WildcardTypeName wildcardType)","0","-","-","-","-"
"2444","missingBindingErrorMessage","private String missingBindingErrorMessage(MissingBinding missingBinding, BindingGraph graph)","0","-","-","-","-"
"2445","alternativeBindingsMessage","private String alternativeBindingsMessage(
      MissingBinding missingBinding, BindingGraph graph)","0","-","-","-","-"
"2446","similarBindingsMessage","private String similarBindingsMessage(
      MissingBinding missingBinding, BindingGraph graph)","0","-","-","-","-"
"2447","asString","private String asString(Binding binding)","0","-","-","-","-"
"2448","allIncomingDependenciesCanUseProduction","private boolean allIncomingDependenciesCanUseProduction(
      MissingBinding missingBinding, BindingGraph graph)","0","-","-","-","-"
"2449","typeHasInjectionSites","private boolean typeHasInjectionSites(Key key)","0","-","-","-","-"
"2450","TypeDfsIterator","TypeDfsIterator(DaggerType root)","0","-","-","-","-"
"2451","hasNext","@Override
    public boolean hasNext()","0","-","-","-","-"
"2452","next","@Override
    public TypeName next()","0","-","-","-","-"
"2453","getBaseTypeName","private static TypeName getBaseTypeName(XType type)","0","-","-","-","-"
"2454","IncompatiblyScopedBindingsValidator","@Inject
  IncompatiblyScopedBindingsValidator(
      MethodSignatureFormatter methodSignatureFormatter,
      CompilerOptions compilerOptions,
      DiagnosticMessageGenerator.Factory diagnosticMessageGeneratorFactory)","0","-","-","-","-"
"2455","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"2456","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2457","hasIncompatibleScope","private static boolean hasIncompatibleScope(BindingGraph bindingGraph, Binding binding)","0","-","-","-","-"
"2458","isSubcomponentOrModuleRoot","private static boolean isSubcomponentOrModuleRoot(BindingGraph bindingGraph)","0","-","-","-","-"
"2459","owningComponent","private static ComponentNode owningComponent(BindingGraph bindingGraph, Binding binding)","0","-","-","-","-"
"2460","report","private void report(
      ComponentNode componentNode,
      List<Binding> bindings,
      DiagnosticReporter diagnosticReporter,
      DiagnosticMessageGenerator diagnosticMessageGenerator)","0","-","-","-","-"
"2461","DependsOnProductionExecutorValidator","@Inject
  DependsOnProductionExecutorValidator(XProcessingEnv processingEnv, KeyFactory keyFactory)","0","-","-","-","-"
"2462","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"2463","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2464","reportError","private void reportError(DiagnosticReporter diagnosticReporter, Binding binding)","0","-","-","-","-"
"2465","usesProducers","private boolean usesProducers()","0","-","-","-","-"
"2466","InvalidProductionBindingScopeValidator","@Inject
  InvalidProductionBindingScopeValidator()","0","-","-","-","-"
"2467","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"2468","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter reporter)","0","-","-","-","-"
"2469","errorMessage","private String errorMessage(Binding binding)","0","-","-","-","-"
"2470","MapMultibindingValidator","@Inject
  MapMultibindingValidator(
      DeclarationFormatter declarationFormatter, KeyFactory keyFactory)","0","-","-","-","-"
"2471","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"2472","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2473","mapMultibindings","/**
   * Returns the map multibindings in the binding graph. If a graph contains bindings for more than
   * one of the following for the same","0","-","-","-","-"
"2474","unwrappedKey","private Key unwrappedKey(Binding binding)","0","-","-","-","-"
"2475","mapBindingContributions","private ImmutableSet<ContributionBinding> mapBindingContributions(
      Binding binding, BindingGraph bindingGraph)","0","-","-","-","-"
"2476","checkForDuplicateMapKeys","private void checkForDuplicateMapKeys(
      Binding multiboundMapBinding,
      ImmutableSet<ContributionBinding> contributions,
      DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2477","checkForInconsistentMapKeyAnnotationTypes","private void checkForInconsistentMapKeyAnnotationTypes(
      Binding multiboundMapBinding,
      ImmutableSet<ContributionBinding> contributions,
      DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2478","inconsistentMapKeyAnnotationTypesErrorMessage","private String inconsistentMapKeyAnnotationTypesErrorMessage(
      ImmutableSetMultimap<XClassName, ContributionBinding> contributionsByMapKeyAnnotationType,
      Key mapBindingKey)","0","-","-","-","-"
"2479","duplicateMapKeyErrorMessage","private String duplicateMapKeyErrorMessage(
      Set<ContributionBinding> contributionsForOneMapKey, Key mapBindingKey)","0","-","-","-","-"
"2480","DuplicateBindingsValidator","@Inject
  DuplicateBindingsValidator(
      DeclarationFormatter declarationFormatter, CompilerOptions compilerOptions)","0","-","-","-","-"
"2481","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"2482","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2483","duplicateBindingSets","/**
   * Returns sets of duplicate bindings. Bindings are duplicates if they bind the same key and are
   * visible from the same component. Two bindings that differ only in the component that owns them
   * are not considered to be duplicates, because that means the same binding was ""copied"" down to a
   * descendant component because it depends on local multibindings or optional bindings. Hence each
   * ""set"" is represented as a multimap from binding element (ignoring component path) to binding.
   */
  private ImmutableSet<ImmutableSetMultimap<BindingWithoutComponent, Binding>> duplicateBindingSets(
      BindingGraph bindingGraph)","0","-","-","-","-"
"2484","groupBindingsByKey","private ImmutableSet<ImmutableSet<Binding>> groupBindingsByKey(BindingGraph bindingGraph)","0","-","-","-","-"
"2485","mutuallyVisibleSubsets","/**
   * Returns the subsets of the input set that contain bindings that are all visible from the same
   * component. A binding is visible from its component and all its descendants.
   */
  private static ImmutableSet<ImmutableSet<Binding>> mutuallyVisibleSubsets(
      Set<Binding> duplicateBindings)","0","-","-","-","-"
"2486","reportErrors","private void reportErrors(
      ImmutableSetMultimap<BindingWithoutComponent, Binding> duplicateBindings,
      BindingGraph bindingGraph,
      DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2487","explicitBindingConfictsWithInject","/**
   * Returns","0","-","-","-","-"
"2488","reportExplicitBindingConflictsWithInject","private void reportExplicitBindingConflictsWithInject(
      ImmutableCollection<Binding> duplicateBindings,
      DiagnosticReporter diagnosticReporter,
      Diagnostic.Kind diagnosticKind,
      ComponentNode rootComponent)","0","-","-","-","-"
"2489","formatWithComponentPath","private String formatWithComponentPath(Binding binding)","0","-","-","-","-"
"2490","reportDuplicateBindings","private void reportDuplicateBindings(
      ImmutableCollection<Binding> duplicateBindings,
      BindingGraph graph,
      DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2491","formatDeclarations","private void formatDeclarations(
      StringBuilder builder,
      int indentLevel,
      Iterable<? extends Declaration> bindingDeclarations)","0","-","-","-","-"
"2492","declarations","private ImmutableSet<Declaration> declarations(
      BindingGraph graph, ImmutableCollection<Binding> bindings)","0","-","-","-","-"
"2493","declarations","private ImmutableSet<Declaration> declarations(BindingGraph graph, Binding binding)","0","-","-","-","-"
"2494","multibindingTypeString","private String multibindingTypeString(Binding multibinding)","0","-","-","-","-"
"2495","valueSetsForEachKey","private static <E> ImmutableSet<ImmutableSet<E>> valueSetsForEachKey(Multimap<?, E> multimap)","0","-","-","-","-"
"2496","rootmostBindingWithKind","/** Returns the binding of the given kind that is closest to the root component. */
  private static Binding rootmostBindingWithKind(
      Predicate<BindingKind> bindingKindPredicate, ImmutableCollection<Binding> bindings)","0","-","-","-","-"
"2497","bindingKind","abstract BindingKind bindingKind();","0","-","-","-","-"
"2498","bindingKey","abstract Key bindingKey();","0","-","-","-","-"
"2499","bindingElement","abstract Optional<XElement> bindingElement();","0","-","-","-","-"
"2500","contributingModule","abstract Optional<XTypeElement> contributingModule();","0","-","-","-","-"
"2501","index","static ImmutableSetMultimap<BindingWithoutComponent, Binding> index(Set<Binding> bindings)","0","-","-","-","-"
"2502","forBinding","private static BindingWithoutComponent forBinding(Binding binding)","0","-","-","-","-"
"2503","qualifier","abstract Optional<DaggerAnnotation> qualifier();","0","-","-","-","-"
"2504","wrappedType","abstract Equivalence.Wrapper<XType> wrappedType();","0","-","-","-","-"
"2505","multibindingContributionIdentifier","abstract Optional<MultibindingContributionIdentifier> multibindingContributionIdentifier();","0","-","-","-","-"
"2506","forKey","private static KeyWithTypeEquivalence forKey(Key key, Equivalence<XType> typeEquivalence)","0","-","-","-","-"
"2507","SubcomponentFactoryMethodValidator","@Inject
  SubcomponentFactoryMethodValidator()","0","-","-","-","-"
"2508","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"2509","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2510","findMissingModules","private ImmutableSet<XTypeElement> findMissingModules(
      ChildFactoryMethodEdge edge, BindingGraph graph)","0","-","-","-","-"
"2511","subgraphFactoryMethodParameters","private ImmutableSet<XTypeElement> subgraphFactoryMethodParameters(
      ChildFactoryMethodEdge edge, BindingGraph bindingGraph)","0","-","-","-","-"
"2512","ownedModules","private SetView<XTypeElement> ownedModules(ComponentNode component, BindingGraph graph)","0","-","-","-","-"
"2513","inheritedModules","private Set<XTypeElement> inheritedModules(ComponentNode component, BindingGraph graph)","0","-","-","-","-"
"2514","uncachedInheritedModules","private Function<ComponentNode, Set<XTypeElement>> uncachedInheritedModules(BindingGraph graph)","0","-","-","-","-"
"2515","reportMissingModuleParameters","private void reportMissingModuleParameters(
      ChildFactoryMethodEdge edge,
      ImmutableSet<XTypeElement> missingModules,
      BindingGraph graph,
      DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2516","compressPackagesInMessage","/**
   * Compresses an error message by stripping the packages out of class names and adding them
   * to a legend at the bottom of the error.
   */
  static String compressPackagesInMessage(String input)","0","-","-","-","-"
"2517","shortenNames","/**
   * Returns a map from short name to full name after resolving conflicts. This resolves conflicts
   * by adding on segments of the package name until they are unique. For example, com.foo.Baz and
   * com.bar.Baz will conflict on Baz and then resolve with foo.Baz and bar.Baz as replacements.
   */
  private static Map<String, String> shortenNames(Collection<String> names)","0","-","-","-","-"
"2518","PackageNameCompressor","private PackageNameCompressor()","0","-","-","-","-"
"2519","create","CompositeBindingGraphPlugin create(ImmutableSet<ValidationBindingGraphPlugin> plugins);","0","-","-","-","-"
"2520","CompositeBindingGraphPlugin","@AssistedInject
  CompositeBindingGraphPlugin(
      @Assisted ImmutableSet<ValidationBindingGraphPlugin> plugins,
      DiagnosticMessageGenerator.Factory messageGeneratorFactory)","0","-","-","-","-"
"2521","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2522","revisitFullGraph","@Override
  public void revisitFullGraph(
      BindingGraph prunedGraph, BindingGraph fullGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2523","init","@Override
  public void init(DaggerProcessingEnv processingEnv, Map<String, String> options)","0","-","-","-","-"
"2524","onPluginEnd","@Override
  public void onPluginEnd()","0","-","-","-","-"
"2525","supportedOptions","@Override
  public Set<String> supportedOptions()","0","-","-","-","-"
"2526","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"2527","AggregatingDiagnosticReporter","AggregatingDiagnosticReporter(
        BindingGraph graph,
        DiagnosticReporter delegate,
        DiagnosticMessageGenerator messageGenerator)","0","-","-","-","-"
"2528","AggregatingDiagnosticReporter","AggregatingDiagnosticReporter(
        BindingGraph graph,
        DiagnosticReporter delegate,
        String baseMessage,
        DiagnosticMessageGenerator messageGenerator)","0","-","-","-","-"
"2529","setCurrentPlugin","/** Sets the currently running aggregated plugin. Used to add a diagnostic prefix. */
    void setCurrentPlugin(String pluginName)","0","-","-","-","-"
"2530","report","/** Reports all of the stored diagnostics. */
    void report()","0","-","-","-","-"
"2531","getMessage","String getMessage()","0","-","-","-","-"
"2532","reportComponent","@Override
    public void reportComponent(
        Diagnostic.Kind diagnosticKind, ComponentNode componentNode, String message)","0","-","-","-","-"
"2533","reportBinding","@Override
    public void reportBinding(
        Diagnostic.Kind diagnosticKind, MaybeBinding binding, String message)","0","-","-","-","-"
"2534","reportDependency","@Override
    public void reportDependency(
        Diagnostic.Kind diagnosticKind, DependencyEdge dependencyEdge, String message)","0","-","-","-","-"
"2535","reportSubcomponentFactoryMethod","@Override
    public void reportSubcomponentFactoryMethod(
        Diagnostic.Kind diagnosticKind,
        ChildFactoryMethodEdge childFactoryMethodEdge,
        String message)","0","-","-","-","-"
"2536","addMessage","/** Adds a message to the stored aggregated message. */
    private void addMessage(Diagnostic.Kind diagnosticKind, String message)","0","-","-","-","-"
"2537","mergeDiagnosticKind","private void mergeDiagnosticKind(Diagnostic.Kind diagnosticKind)","0","-","-","-","-"
"2538","InjectBindingValidator","@Inject
  InjectBindingValidator(InjectValidator injectValidator)","0","-","-","-","-"
"2539","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"2540","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2541","validateInjectionBinding","private void validateInjectionBinding(Binding node, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"2542","ComponentHjarGenerator","@Inject
  ComponentHjarGenerator(
      XFiler filer, XProcessingEnv processingEnv, CompilerOptions compilerOptions)","0","-","-","-","-"
"2543","originatingElement","@Override
  public XElement originatingElement(ComponentDescriptor input)","0","-","-","-","-"
"2544","topLevelTypes","@Override
  public ImmutableList<XTypeSpec> topLevelTypes(ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"2545","emptyComponentMethod","private MethodSpec emptyComponentMethod(XTypeElement typeElement, XMethodElement baseMethod)","0","-","-","-","-"
"2546","privateConstructor","private static MethodSpec privateConstructor()","0","-","-","-","-"
"2547","componentRequirements","/**
   * Returns the","0","-","-","-","-"
"2548","hasBindsInstanceMethods","private boolean hasBindsInstanceMethods(ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"2549","isBindsInstance","private static boolean isBindsInstance(XMethodElement method)","0","-","-","-","-"
"2550","builderSetterMethod","private static MethodSpec builderSetterMethod(
      XTypeElement componentRequirement, XClassName builderClass)","0","-","-","-","-"
"2551","builderBuildMethod","private static MethodSpec builderBuildMethod(ComponentDescriptor component)","0","-","-","-","-"
"2552","staticCreatorMethod","private static MethodSpec staticCreatorMethod(
      XTypeName creatorMethodReturnType, ComponentCreatorKind creatorKind)","0","-","-","-","-"
"2553","createMethod","private static MethodSpec createMethod(ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"2554","onProducerFutureCancelledMethod","private static MethodSpec onProducerFutureCancelledMethod()","0","-","-","-","-"
"2555","componentImplementation","ComponentImplementation componentImplementation();","0","-","-","-","-"
"2556","provideChildComponentImplementationFactory","@Provides
    static ChildComponentImplementationFactory provideChildComponentImplementationFactory(
        CurrentImplementationSubcomponent.Builder currentImplementationSubcomponentBuilder,
        Provider<ComponentImplementation> componentImplementation,
        Provider<ComponentRequestRepresentations> componentRequestRepresentations,
        Provider<ComponentRequirementExpressions> componentRequirementExpressions)","0","-","-","-","-"
"2557","provideTopLevelImplementation","@Provides
    @TopLevel
    static GeneratedImplementation provideTopLevelImplementation(
        ComponentImplementation componentImplementation,
        ComponentWrapperImplementation componentWrapperImplementation,
        CompilerOptions compilerOptions)","0","-","-","-","-"
"2558","bindingGraph","@BindsInstance
    Builder bindingGraph(BindingGraph bindingGraph);","0","-","-","-","-"
"2559","parentImplementation","@BindsInstance
    Builder parentImplementation(
        @ParentComponent Optional<ComponentImplementation> parentImplementation);","0","-","-","-","-"
"2560","parentRequestRepresentations","@BindsInstance
    Builder parentRequestRepresentations(
        @ParentComponent Optional<ComponentRequestRepresentations> parentRequestRepresentations);","0","-","-","-","-"
"2561","parentRequirementExpressions","@BindsInstance
    Builder parentRequirementExpressions(
        @ParentComponent Optional<ComponentRequirementExpressions> parentRequirementExpressions);","0","-","-","-","-"
"2562","build","CurrentImplementationSubcomponent build();","0","-","-","-","-"
"2563","componentGenerator","@Binds
  abstract SourceFileGenerator<BindingGraph> componentGenerator(ComponentGenerator generator);","0","-","-","-","-"
"2564","componentHjarGenerator","@Provides
  static SourceFileGenerator<ComponentDescriptor> componentHjarGenerator(
      XProcessingEnv processingEnv,
      ComponentHjarGenerator hjarGenerator)","0","-","-","-","-"
"2565","ComponentGenerator","@Inject
  ComponentGenerator(
      XFiler filer,
      XProcessingEnv processingEnv,
      TopLevelImplementationComponent.Factory topLevelImplementationComponentFactory)","0","-","-","-","-"
"2566","originatingElement","@Override
  public XElement originatingElement(BindingGraph input)","0","-","-","-","-"
"2567","topLevelTypes","@Override
  public ImmutableList<XTypeSpec> topLevelTypes(BindingGraph bindingGraph)","0","-","-","-","-"
"2568","currentImplementationSubcomponentBuilder","CurrentImplementationSubcomponent.Builder currentImplementationSubcomponentBuilder();","0","-","-","-","-"
"2569","create","TopLevelImplementationComponent create(@BindsInstance @TopLevel BindingGraph bindingGraph);","0","-","-","-","-"
"2570","getEnclosingTypeElement","/** Returns the type this method is enclosed in. */
  public static XTypeElement getEnclosingTypeElement(XMethodElement method)","0","-","-","-","-"
"2571","hasTypeParameters","/** Returns","0","-","-","-","-"
"2572","XMethodElements","private XMethodElements()","0","-","-","-","-"
"2573","of","/** Returns the visibility of the given","0","-","-","-","-"
"2574","typeVariableNames","/** Returns the type arguments for the given type as a list of","0","-","-","-","-"
"2575","isNested","/** Returns","0","-","-","-","-"
"2576","hasTypeParameters","/** Returns","0","-","-","-","-"
"2577","getAllUnimplementedMethods","/** Returns all non-private, non-static, abstract methods in","0","-","-","-","-"
"2578","getAllNonPrivateInstanceMethods","/** Returns all non-private, non-static methods in","0","-","-","-","-"
"2579","getAllMethods","public static ImmutableList<XMethodElement> getAllMethods(XTypeElement type)","0","-","-","-","-"
"2580","getAllMethodsIncludingPrivate","public static ImmutableList<XMethodElement> getAllMethodsIncludingPrivate(XTypeElement type)","0","-","-","-","-"
"2581","isAccessibleFrom","private static boolean isAccessibleFrom(XMethodElement method, XTypeElement type)","0","-","-","-","-"
"2582","isEffectivelyPublic","public static boolean isEffectivelyPublic(XTypeElement element)","0","-","-","-","-"
"2583","isEffectivelyPrivate","public static boolean isEffectivelyPrivate(XTypeElement element)","0","-","-","-","-"
"2584","isJvmClass","public static boolean isJvmClass(XTypeElement element)","0","-","-","-","-"
"2585","allVisibilities","/**
   * Returns a list of visibilities containing visibility of the given element and the visibility of
   * its enclosing elements.
   */
  private static ImmutableSet<Visibility> allVisibilities(XTypeElement element)","0","-","-","-","-"
"2586","XTypeElements","private XTypeElements()","0","-","-","-","-"
"2587","toXProcessing","public static XElement toXProcessing(
      DaggerElement element, DaggerProcessingEnv daggerProcessingEnv)","0","-","-","-","-"
"2588","toXProcessing","public static XType toXProcessing(DaggerType type, DaggerProcessingEnv daggerProcessingEnv)","0","-","-","-","-"
"2589","toXProcessing","public static XProcessingEnv toXProcessing(DaggerProcessingEnv processingEnv)","0","-","-","-","-"
"2590","DaggerElements","private DaggerElements()","0","-","-","-","-"
"2591","XTypeEquivalence","XTypeEquivalence(boolean ignoreVariance)","0","-","-","-","-"
"2592","doEquivalent","@Override
    protected boolean doEquivalent(XType left, XType right)","0","-","-","-","-"
"2593","doHash","@Override
    protected int doHash(XType type)","0","-","-","-","-"
"2594","toString","@Override
    public String toString()","0","-","-","-","-"
"2595","getTypeName","private TypeName getTypeName(XType type)","0","-","-","-","-"
"2596","stripVariances","public static TypeName stripVariances(TypeName typeName)","0","-","-","-","-"
"2597","equivalenceIgnoringVariance","/**
   * Returns an","0","-","-","-","-"
"2598","equivalence","/**
   * Returns an","0","-","-","-","-"
"2599","getEnclosingType","@SuppressWarnings(""ReturnMissingNullable"")
  public static XType getEnclosingType(XType type)","0","-","-","-","-"
"2600","isAssignableTo","/** Returns","0","-","-","-","-"
"2601","isSubtype","/** Returns","0","-","-","-","-"
"2602","erasedTypeName","/** Returns the erasure of the given","0","-","-","-","-"
"2603","erasedTypeName","private static TypeName erasedTypeName(TypeName typeName)","0","-","-","-","-"
"2604","checkTypePresent","/**
   * Throws","0","-","-","-","-"
"2605","isRawParameterizedType","/** Returns","0","-","-","-","-"
"2606","asArray","/** Returns the given","0","-","-","-","-"
"2607","asTypeVariable","/** Returns the given","0","-","-","-","-"
"2608","isTypeOf","/** Returns","0","-","-","-","-"
"2609","isNullType","/** Returns","0","-","-","-","-"
"2610","isNoType","/** Returns","0","-","-","-","-"
"2611","isWildcard","/** Returns","0","-","-","-","-"
"2612","isDeclared","/** Returns","0","-","-","-","-"
"2613","isTypeVariable","/** Returns","0","-","-","-","-"
"2614","areEquivalentTypes","/** Returns","0","-","-","-","-"
"2615","isPrimitive","/** Returns","0","-","-","-","-"
"2616","hasTypeParameters","/** Returns","0","-","-","-","-"
"2617","isMethod","public static boolean isMethod(XExecutableType type)","0","-","-","-","-"
"2618","isConstructor","public static boolean isConstructor(XExecutableType type)","0","-","-","-","-"
"2619","isFloat","public static boolean isFloat(XType type)","0","-","-","-","-"
"2620","isShort","public static boolean isShort(XType type)","0","-","-","-","-"
"2621","isChar","public static boolean isChar(XType type)","0","-","-","-","-"
"2622","isDouble","public static boolean isDouble(XType type)","0","-","-","-","-"
"2623","isBoolean","public static boolean isBoolean(XType type)","0","-","-","-","-"
"2624","nonObjectSuperclass","/**
   * Returns the non-","0","-","-","-","-"
"2625","objectElement","private static XTypeElement objectElement(XProcessingEnv processingEnv)","0","-","-","-","-"
"2626","unwrapType","/**
   * Returns","0","-","-","-","-"
"2627","unwrapTypeOrDefault","private static XType unwrapTypeOrDefault(XType type, XType defaultType)","0","-","-","-","-"
"2628","rewrapType","/**
   * Returns","0","-","-","-","-"
"2629","toStableString","/**
   * Returns a string representation of","0","-","-","-","-"
"2630","toStableString","private static String toStableString(TypeName typeName)","0","-","-","-","-"
"2631","getKindName","public static String getKindName(XType type)","0","-","-","-","-"
"2632","resolveIfNeeded","/**
   * Iterates through the various types referenced within the given","0","-","-","-","-"
"2633","visitDeclared","@Override
    public Void visitDeclared(DeclaredType t, Set<Element> visited)","0","-","-","-","-"
"2634","visitError","@Override
    public Void visitError(ErrorType t, Set<Element> visited)","0","-","-","-","-"
"2635","visitArray","@Override
    public Void visitArray(ArrayType t, Set<Element> visited)","0","-","-","-","-"
"2636","visitWildcard","@Override
    public Void visitWildcard(WildcardType t, Set<Element> visited)","0","-","-","-","-"
"2637","defaultAction","@Override
    protected Void defaultAction(TypeMirror e, Set<Element> visited)","0","-","-","-","-"
"2638","XTypes","private XTypes()","0","-","-","-","-"
"2639","parameterSpecOf","public static XParameterSpec parameterSpecOf(XExecutableParameterElement parameter)","0","-","-","-","-"
"2640","parameterSpecOf","public static XParameterSpec parameterSpecOf(
      XExecutableParameterElement parameter, XType parameterType)","0","-","-","-","-"
"2641","of","public static XParameterSpec of(String name, XTypeName typeName)","0","-","-","-","-"
"2642","builder","public static Builder builder(String name, XTypeName typeName)","0","-","-","-","-"
"2643","Builder","Builder(String name, XTypeName typeName)","0","-","-","-","-"
"2644","addAnnotations","/** Adds the given annotations to the method. */
    @CanIgnoreReturnValue
    public Builder addAnnotations(Collection<XAnnotationSpec> annotations)","0","-","-","-","-"
"2645","addJavaAnnotations","/**
     * Adds the given annotations to the method.
     *
     * @deprecated Use","0","-","-","-","-"
"2646","addAnnotationNames","/** Adds the given annotation names to the method. */
    @CanIgnoreReturnValue
    public Builder addAnnotationNames(Collection<XClassName> annotationNames)","0","-","-","-","-"
"2647","addAnnotation","/** Adds the given annotation to the method. */
    @CanIgnoreReturnValue
    public Builder addAnnotation(XAnnotationSpec annotation)","0","-","-","-","-"
"2648","addAnnotation","/** Adds the given annotation name to the method. */
    @CanIgnoreReturnValue
    public Builder addAnnotation(XClassName annotationName)","0","-","-","-","-"
"2649","addAnnotation","/**
     * Adds the given annotation to the method.
     *
     * @deprecated Use","0","-","-","-","-"
"2650","addAnnotation","/**
     * Adds the given annotation to the method.
     *
     * @deprecated Use","0","-","-","-","-"
"2651","build","/** Builds the method and returns an","0","-","-","-","-"
"2652","XParameterSpecs","private XParameterSpecs()","0","-","-","-","-"
"2653","toXPoet","/**
   * Returns an","0","-","-","-","-"
"2654","toParametersCodeBlock","/**
   * Joins","0","-","-","-","-"
"2655","toConcatenatedCodeBlock","/** Concatenates","0","-","-","-","-"
"2656","makeParametersCodeBlock","/** Returns a comma-separated version of","0","-","-","-","-"
"2657","parameterNames","/**
   * Returns a comma-separated","0","-","-","-","-"
"2658","concat","/**
   * Returns one unified","0","-","-","-","-"
"2659","anonymousProvider","/**
   * Returns an anonymous","0","-","-","-","-"
"2660","anonymousProvider","/**
   * Returns an anonymous","0","-","-","-","-"
"2661","cast","/** Returns","0","-","-","-","-"
"2662","type","public static XCodeBlock type(XType type)","0","-","-","-","-"
"2663","stringLiteral","public static XCodeBlock stringLiteral(String toWrap)","0","-","-","-","-"
"2664","join","public static XCodeBlock join(Iterable<XCodeBlock> codeBlocks, String separator)","0","-","-","-","-"
"2665","joining","public static Collector<XCodeBlock, ?, XCodeBlock> joining(String separator)","0","-","-","-","-"
"2666","joining","public static Collector<XCodeBlock, ?, XCodeBlock> joining(
      String separator, String prefix, String suffix)","0","-","-","-","-"
"2667","isEmpty","public static boolean isEmpty(XCodeBlock codeBlock)","0","-","-","-","-"
"2668","XCodeBlockJoiner","XCodeBlockJoiner(String delimiter, XCodeBlock.Builder builder)","0","-","-","-","-"
"2669","add","@CanIgnoreReturnValue
    XCodeBlockJoiner add(XCodeBlock codeBlock)","0","-","-","-","-"
"2670","merge","@CanIgnoreReturnValue
    XCodeBlockJoiner merge(XCodeBlockJoiner other)","0","-","-","-","-"
"2671","join","XCodeBlock join()","0","-","-","-","-"
"2672","XCodeBlocks","private XCodeBlocks()","0","-","-","-","-"
"2673","avoidClashesWithNestedClasses","/**
   * Configures the given","0","-","-","-","-"
"2674","toParameterSpec","public static ParameterSpec toParameterSpec(XExecutableParameterElement param)","0","-","-","-","-"
"2675","toParameterSpec","public static ParameterSpec toParameterSpec(
      XExecutableParameterElement parameter, XType parameterType)","0","-","-","-","-"
"2676","JavaPoetExt","private JavaPoetExt()","0","-","-","-","-"
"2677","isSubsignature","public static boolean isSubsignature(XExecutableElement method1, XExecutableElement method2)","0","-","-","-","-"
"2678","isSubsignatureKsp","private static boolean isSubsignatureKsp(XExecutableElement method1, XExecutableElement method2)","0","-","-","-","-"
"2679","getParameters","private static ImmutableList<TypeName> getParameters(XExecutableElement method)","0","-","-","-","-"
"2680","getTypeParameters","private static ImmutableList<TypeName> getTypeParameters(XExecutableElement method)","0","-","-","-","-"
"2681","isSubsignatureJavac","private static boolean isSubsignatureJavac(
      XExecutableElement method1, XExecutableElement method2, XProcessingEnv env)","0","-","-","-","-"
"2682","isConstructorType","public static boolean isConstructorType(XExecutableType executableType)","0","-","-","-","-"
"2683","isMethodType","public static boolean isMethodType(XExecutableType executableType)","0","-","-","-","-"
"2684","asMethodType","public static XMethodType asMethodType(XExecutableType executableType)","0","-","-","-","-"
"2685","getKindName","public static String getKindName(XExecutableType executableType)","0","-","-","-","-"
"2686","toStableString","/**
   * Returns a string representation of","0","-","-","-","-"
"2687","XExecutableTypes","private XExecutableTypes()","0","-","-","-","-"
"2688","getSimpleName","/** Returns the simple name of the member container. */
  public static String getSimpleName(XMemberContainer memberContainer)","0","-","-","-","-"
"2689","getSimpleName","/** Returns the simple name of the element. */
  public static String getSimpleName(XElement element)","0","-","-","-","-"
"2690","isSyntheticElement","private static boolean isSyntheticElement(XElement element)","0","-","-","-","-"
"2691","toKSAnnotated","@Nullable
  public static KSAnnotated toKSAnnotated(XElement element)","0","-","-","-","-"
"2692","closestEnclosingTypeElement","/**
   * Returns the closest enclosing element that is a","0","-","-","-","-"
"2693","transitivelyEncloses","/**
   * Returns","0","-","-","-","-"
"2694","optionalClosestEnclosingTypeElement","private static Optional<XTypeElement> optionalClosestEnclosingTypeElement(XElement element)","0","-","-","-","-"
"2695","isAbstract","public static boolean isAbstract(XElement element)","0","-","-","-","-"
"2696","isPublic","public static boolean isPublic(XElement element)","0","-","-","-","-"
"2697","isPrivate","public static boolean isPrivate(XElement element)","0","-","-","-","-"
"2698","isStatic","public static boolean isStatic(XElement element)","0","-","-","-","-"
"2699","asHasModifiers","private static XHasModifiers asHasModifiers(XElement element)","0","-","-","-","-"
"2700","isPackage","public static boolean isPackage(XElement element)","0","-","-","-","-"
"2701","isTypeParameter","public static boolean isTypeParameter(XElement element)","0","-","-","-","-"
"2702","asTypeParameter","public static XTypeParameterElement asTypeParameter(XElement element)","0","-","-","-","-"
"2703","isEnumEntry","public static boolean isEnumEntry(XElement element)","0","-","-","-","-"
"2704","isEnum","public static boolean isEnum(XElement element)","0","-","-","-","-"
"2705","isExecutable","public static boolean isExecutable(XElement element)","0","-","-","-","-"
"2706","asExecutable","public static XExecutableElement asExecutable(XElement element)","0","-","-","-","-"
"2707","asTypeElement","public static XTypeElement asTypeElement(XElement element)","0","-","-","-","-"
"2708","asMethodParameter","public static XExecutableParameterElement asMethodParameter(XElement element)","0","-","-","-","-"
"2709","asField","public static XFieldElement asField(XElement element)","0","-","-","-","-"
"2710","asEnumEntry","public static XEnumEntry asEnumEntry(XElement element)","0","-","-","-","-"
"2711","asVariable","public static XVariableElement asVariable(XElement element)","0","-","-","-","-"
"2712","asConstructor","public static XConstructorElement asConstructor(XElement element)","0","-","-","-","-"
"2713","asMethod","public static XMethodElement asMethod(XElement element)","0","-","-","-","-"
"2714","getAnnotatedAnnotations","public static ImmutableSet<XAnnotation> getAnnotatedAnnotations(
      XAnnotated annotated, XClassName annotationName)","0","-","-","-","-"
"2715","hasAnyAnnotation","/** Returns","0","-","-","-","-"
"2716","hasAnyAnnotation","/** Returns","0","-","-","-","-"
"2717","getAnyAnnotation","/**
   * Returns any annotation from","0","-","-","-","-"
"2718","getAnyAnnotation","/**
   * Returns any annotation from","0","-","-","-","-"
"2719","getAllAnnotations","/** Returns all annotations from","0","-","-","-","-"
"2720","toStableString","/**
   * Returns a string representation of","0","-","-","-","-"
"2721","getKindName","public static String getKindName(XElement element)","0","-","-","-","-"
"2722","packageName","public static String packageName(XElement element)","0","-","-","-","-"
"2723","isFinal","public static boolean isFinal(XExecutableElement element)","0","-","-","-","-"
"2724","getModifiers","public static ImmutableList<Modifier> getModifiers(XExecutableElement element)","0","-","-","-","-"
"2725","XElements","private XElements()","0","-","-","-","-"
"2726","isPreJava8SourceVersion","/** Returns","0","-","-","-","-"
"2727","javaSourceVersion","/**
   * Returns an optional containing the java source version if the current sources are being
   * compiled with javac, or else returns an empty optional.
   */
  private static Optional<SourceVersion> javaSourceVersion(XProcessingEnv processingEnv)","0","-","-","-","-"
"2728","javacOverrides","/**
   * Returns","0","-","-","-","-"
"2729","getUnboundedWildcardType","/** Returns a new unbounded wildcard type argument, i.e.","0","-","-","-","-"
"2730","unwrapType","/**
   * Returns","0","-","-","-","-"
"2731","unwrapTypeOrObject","/**
   * Returns","0","-","-","-","-"
"2732","unwrapTypeOrDefault","private static XType unwrapTypeOrDefault(XType type, XType defaultType)","0","-","-","-","-"
"2733","getPrimitiveIntType","/** Returns a primitive int","0","-","-","-","-"
"2734","wrapType","/** Returns the type this method is enclosed in. */
  public static XType wrapType(XClassName wrapper, XType type, XProcessingEnv processingEnv)","0","-","-","-","-"
"2735","XProcessingEnvs","private XProcessingEnvs()","0","-","-","-","-"
"2736","overriding","/** Returns a","0","-","-","-","-"
"2737","overridingWithoutParameters","/** Returns a","0","-","-","-","-"
"2738","methodBuilder","public static Builder methodBuilder(String name)","0","-","-","-","-"
"2739","constructorBuilder","public static Builder constructorBuilder()","0","-","-","-","-"
"2740","Builder","Builder(Kind kind)","0","-","-","-","-"
"2741","name","@CanIgnoreReturnValue
    private Builder name(String name)","0","-","-","-","-"
"2742","visibility","/** Sets the visibility of the method. */
    @CanIgnoreReturnValue
    public Builder visibility(VisibilityModifier visibility)","0","-","-","-","-"
"2743","isStatic","/** Sets the static modifier of the method. */
    @CanIgnoreReturnValue
    public Builder isStatic(boolean isStatic)","0","-","-","-","-"
"2744","isAbstract","/** Sets the abstract modifier of the method. */
    @CanIgnoreReturnValue
    public Builder isAbstract(boolean isAbstract)","0","-","-","-","-"
"2745","isOpen","/** Sets the final/open modifier of the method. */
    @CanIgnoreReturnValue
    public Builder isOpen(boolean isOpen)","0","-","-","-","-"
"2746","isOverride","/** Sets whether the method is an override. */
    @CanIgnoreReturnValue
    public Builder isOverride(boolean isOverride)","0","-","-","-","-"
"2747","addJavadoc","/** Sets the originating element of the type. */
    @CanIgnoreReturnValue
    public Builder addJavadoc(String format, Object... args)","0","-","-","-","-"
"2748","addModifiers","/**
     * Sets the modifiers of the method.
     *
     * <p>@deprecated Use the individual setter methods instead.
     */
    @Deprecated
    @CanIgnoreReturnValue
    public Builder addModifiers(Collection<Modifier> modifiers)","0","-","-","-","-"
"2749","addModifiers","/**
     * Sets the modifiers of the method.
     *
     * <p>@deprecated Use the individual setter methods instead.
     */
    @Deprecated
    @CanIgnoreReturnValue
    public Builder addModifiers(Modifier... modifiers)","0","-","-","-","-"
"2750","addTypeVariables","/** Adds the given type variables to the method. */
    @CanIgnoreReturnValue
    public Builder addTypeVariables(Collection<? extends XType> typeVariables)","0","-","-","-","-"
"2751","addTypeVariableNames","/** Adds the given type variable names to the method. */
    @CanIgnoreReturnValue
    public Builder addTypeVariableNames(Collection<XTypeName> typeVariableNames)","0","-","-","-","-"
"2752","addJavaTypeVariableNames","/**
     * Adds the given type variable names to the method.
     *
     * @deprecated Use","0","-","-","-","-"
"2753","addTypeVariable","/** Adds the given type variable to the method. */
    @CanIgnoreReturnValue
    public Builder addTypeVariable(XType type)","0","-","-","-","-"
"2754","addTypeVariable","/** Adds the given type variable name to the method. */
    @CanIgnoreReturnValue
    public Builder addTypeVariable(XTypeName typeName)","0","-","-","-","-"
"2755","addTypeVariable","/**
     * Adds the given type variable name to the method.
     *
     * <p>@deprecated Use","0","-","-","-","-"
"2756","addAnnotations","/** Adds the given annotations to the method. */
    @CanIgnoreReturnValue
    public Builder addAnnotations(Collection<XAnnotationSpec> annotations)","0","-","-","-","-"
"2757","addJavaAnnotations","/**
     * Adds the given annotations to the method.
     *
     * @deprecated Use","0","-","-","-","-"
"2758","addAnnotationNames","/** Adds the given annotation names to the method. */
    @CanIgnoreReturnValue
    public Builder addAnnotationNames(Collection<XClassName> annotationNames)","0","-","-","-","-"
"2759","addAnnotation","/** Adds the given annotation to the method. */
    @CanIgnoreReturnValue
    public Builder addAnnotation(XAnnotationSpec annotation)","0","-","-","-","-"
"2760","addAnnotation","/** Adds the given annotation name to the method. */
    @CanIgnoreReturnValue
    public Builder addAnnotation(XClassName annotationName)","0","-","-","-","-"
"2761","addAnnotation","/**
     * Adds the given annotation to the method.
     *
     * @deprecated Use","0","-","-","-","-"
"2762","addAnnotation","/**
     * Adds the given annotation to the method.
     *
     * @deprecated Use","0","-","-","-","-"
"2763","addParameters","/** Adds the given parameters to the method. */
    @CanIgnoreReturnValue
    public Builder addParameters(Collection<XParameterSpec> parameters)","0","-","-","-","-"
"2764","addJavaParameters","/**
     * Adds the given parameters to the method.
     *
     * @deprecated Use","0","-","-","-","-"
"2765","addParameter","/** Adds the given parameter to the method. */
    @CanIgnoreReturnValue
    public Builder addParameter(XParameterSpec parameter)","0","-","-","-","-"
"2766","addParameter","/** Adds the given parameter to the method. */
    @CanIgnoreReturnValue
    public Builder addParameter(String name, XTypeName typeName)","0","-","-","-","-"
"2767","addParameter","/**
     * Adds the given parameter to the method.
     *
     * @deprecated Use","0","-","-","-","-"
"2768","addParameter","/**
     * Adds the given parameter to the method.
     *
     * @deprecated Use","0","-","-","-","-"
"2769","addExceptions","/** Adds the given exceptions to the method. */
    @CanIgnoreReturnValue
    public Builder addExceptions(Collection<? extends XType> exceptions)","0","-","-","-","-"
"2770","addExceptionNames","/** Adds the given exception names to the method. */
    @CanIgnoreReturnValue
    public Builder addExceptionNames(Collection<XTypeName> exceptionNames)","0","-","-","-","-"
"2771","addJavaExceptionNames","/**
     * Adds the given exception names to the method.
     *
     * @deprecated Use","0","-","-","-","-"
"2772","addException","/** Adds the given exception to the method. */
    @CanIgnoreReturnValue
    public Builder addException(XType exception)","0","-","-","-","-"
"2773","addException","/** Adds the given exception name to the method. */
    @CanIgnoreReturnValue
    public Builder addException(XTypeName exceptionName)","0","-","-","-","-"
"2774","addException","/**
     * Adds the given exception name to the method.
     *
     * @deprecated Use","0","-","-","-","-"
"2775","addStatement","/** Adds the given statement to the method. */
    @CanIgnoreReturnValue
    public Builder addStatement(String format, Object... args)","0","-","-","-","-"
"2776","addStatement","/** Adds the given statement to the method. */
    @CanIgnoreReturnValue
    public Builder addStatement(XCodeBlock codeBlock)","0","-","-","-","-"
"2777","addCode","/** Adds the given code to the method. */
    @CanIgnoreReturnValue
    public Builder addCode(String format, Object... args)","0","-","-","-","-"
"2778","addCode","/** Adds the given code to the method. */
    @CanIgnoreReturnValue
    public Builder addCode(XCodeBlock codeBlock)","0","-","-","-","-"
"2779","beginControlFlow","/** Begins a control flow block. */
    @CanIgnoreReturnValue
    public Builder beginControlFlow(String controlFlow, Object... args)","0","-","-","-","-"
"2780","endControlFlow","/** Ends a control flow block. */
    @CanIgnoreReturnValue
    public Builder endControlFlow()","0","-","-","-","-"
"2781","varargs","/** Sets whether the method is varargs. */
    @CanIgnoreReturnValue
    public Builder varargs(boolean isVarArgs)","0","-","-","-","-"
"2782","returns","/** Sets the return type of the method. */
    @CanIgnoreReturnValue
    public Builder returns(XTypeName returnType)","0","-","-","-","-"
"2783","returns","/**
     * Sets the return type of the method.
     *
     * <p>@deprecated Use","0","-","-","-","-"
"2784","build","/** Builds the method and returns an","0","-","-","-","-"
"2785","XFunSpecs","private XFunSpecs()","0","-","-","-","-"
"2786","overriding","/** Returns a","0","-","-","-","-"
"2787","MethodSpecs","private MethodSpecs()","0","-","-","-","-"
"2788","Suppression","Suppression(String... values)","0","-","-","-","-"
"2789","suppressWarnings","/** Creates an","0","-","-","-","-"
"2790","suppressWarnings","/** Creates an","0","-","-","-","-"
"2791","XAnnotationSpecs","private XAnnotationSpecs()","0","-","-","-","-"
"2792","XExpression","private XExpression(XExpressionType type, XCodeBlock codeBlock)","0","-","-","-","-"
"2793","create","/** Creates a new","0","-","-","-","-"
"2794","create","/** Creates a new","0","-","-","-","-"
"2795","create","/** Creates a new","0","-","-","-","-"
"2796","create","/** Creates a new","0","-","-","-","-"
"2797","castTo","/** Returns a new expression that casts the current expression to","0","-","-","-","-"
"2798","castTo","/** Returns a new expression that casts the current expression to","0","-","-","-","-"
"2799","box","/**
   * Returns a new expression that","0","-","-","-","-"
"2800","type","/** The","0","-","-","-","-"
"2801","codeBlock","/** The code of the expression. */
  public XCodeBlock codeBlock()","0","-","-","-","-"
"2802","toString","@Override
  public String toString()","0","-","-","-","-"
"2803","create","public static XExpressionType create(XType type)","0","-","-","-","-"
"2804","create","static XExpressionType create(XRawType type, XProcessingEnv processingEnv)","0","-","-","-","-"
"2805","createRawType","public static XExpressionType createRawType(XType type)","0","-","-","-","-"
"2806","XExpressionType","private XExpressionType(
      Optional<XType> optionalType,
      Optional<XRawType> optionalRawType,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"2807","unwrapType","public XExpressionType unwrapType()","0","-","-","-","-"
"2808","wrapType","public XExpressionType wrapType(XClassName wrapper)","0","-","-","-","-"
"2809","rewrapType","public XExpressionType rewrapType(XClassName wrapper)","0","-","-","-","-"
"2810","getTypeName","public TypeName getTypeName()","0","-","-","-","-"
"2811","asTypeName","public XTypeName asTypeName()","0","-","-","-","-"
"2812","isSameType","public boolean isSameType(XType type)","0","-","-","-","-"
"2813","isSameType","public boolean isSameType(XRawType type)","0","-","-","-","-"
"2814","isAssignableTo","public boolean isAssignableTo(XType type)","0","-","-","-","-"
"2815","isAssignableTo","public boolean isAssignableTo(XRawType rawType)","0","-","-","-","-"
"2816","asType","Optional<XType> asType()","0","-","-","-","-"
"2817","asRawType","Optional<XRawType> asRawType()","0","-","-","-","-"
"2818","getProcessingEnv","XProcessingEnv getProcessingEnv()","0","-","-","-","-"
"2819","doEquivalent","@Override
        protected boolean doEquivalent(XAnnotationValue left, XAnnotationValue right)","0","-","-","-","-"
"2820","doHash","@Override
        protected int doHash(XAnnotationValue value)","0","-","-","-","-"
"2821","toString","@Override
        public String toString()","0","-","-","-","-"
"2822","equivalence","/** Returns an","0","-","-","-","-"
"2823","getKindName","public static String getKindName(XAnnotationValue value)","0","-","-","-","-"
"2824","toStableString","public static String toStableString(XAnnotationValue value)","0","-","-","-","-"
"2825","characterLiteralWithSingleQuotes","public static String characterLiteralWithSingleQuotes(char c)","0","-","-","-","-"
"2826","characterLiteralWithoutSingleQuotes","private static String characterLiteralWithoutSingleQuotes(char c)","0","-","-","-","-"
"2827","XAnnotationValues","private XAnnotationValues()","0","-","-","-","-"
"2828","getAnnotationSpec","/** Returns the","0","-","-","-","-"
"2829","toString","/** Returns the string representation of the given annotation. */
  public static String toString(XAnnotation annotation)","0","-","-","-","-"
"2830","getClassName","/** Returns the class name of the given annotation */
  public static ClassName getClassName(XAnnotation annotation)","0","-","-","-","-"
"2831","asClassName","/** Returns the class name of the given annotation */
  public static XClassName asClassName(XAnnotation annotation)","0","-","-","-","-"
"2832","doEquivalent","@Override
        protected boolean doEquivalent(XAnnotation left, XAnnotation right)","0","-","-","-","-"
"2833","doHash","@Override
        protected int doHash(XAnnotation annotation)","0","-","-","-","-"
"2834","toString","@Override
        public String toString()","0","-","-","-","-"
"2835","equivalence","/**
   * Returns an","0","-","-","-","-"
"2836","toStableString","/**
   * Returns a stable string representation of","0","-","-","-","-"
"2837","getAsTypeElement","/** Returns the value of the given [key] as a type element. */
  public static XTypeElement getAsTypeElement(XAnnotation annotation, String key)","0","-","-","-","-"
"2838","getAsTypeElementList","/** Returns the value of the given [key] as a list of type elements. */
  public static ImmutableList<XTypeElement> getAsTypeElementList(
      XAnnotation annotation, String key)","0","-","-","-","-"
"2839","XAnnotations","private XAnnotations()","0","-","-","-","-"
"2840","of","public static Nullability of(XElement element)","0","-","-","-","-"
"2841","getTypeNameWithNullableAnnotations","static TypeName getTypeNameWithNullableAnnotations(XType type)","0","-","-","-","-"
"2842","getAnnotatedTypeName","private static TypeName getAnnotatedTypeName(XType type, TypeName typeName)","0","-","-","-","-"
"2843","getNullableAnnotations","static ImmutableSet<XClassName> getNullableAnnotations(XAnnotated annotated)","0","-","-","-","-"
"2844","getType","private static Optional<XType> getType(XElement element)","0","-","-","-","-"
"2845","nonTypeUseNullableAnnotations","public abstract ImmutableSet<XClassName> nonTypeUseNullableAnnotations();","0","-","-","-","-"
"2846","typeUseNullableAnnotations","public abstract ImmutableSet<XClassName> typeUseNullableAnnotations();","0","-","-","-","-"
"2847","isKotlinTypeNullable","/**
   * Returns","0","-","-","-","-"
"2848","nullableAnnotations","public ImmutableSet<XClassName> nullableAnnotations()","0","-","-","-","-"
"2849","isNullable","public final boolean isNullable()","0","-","-","-","-"
"2850","Nullability","Nullability()","0","-","-","-","-"
"2851","classBuilder","public static Builder classBuilder(String name)","0","-","-","-","-"
"2852","classBuilder","public static Builder classBuilder(XClassName className)","0","-","-","-","-"
"2853","interfaceBuilder","public static Builder interfaceBuilder(String name)","0","-","-","-","-"
"2854","interfaceBuilder","public static Builder interfaceBuilder(XClassName className)","0","-","-","-","-"
"2855","objectBuilder","public static Builder objectBuilder(String name)","0","-","-","-","-"
"2856","anonymousClassBuilder","public static Builder anonymousClassBuilder()","0","-","-","-","-"
"2857","annotationBuilder","public static Builder annotationBuilder(String name)","0","-","-","-","-"
"2858","toBuilder","public static XTypeSpec.Builder toBuilder(XTypeSpec typeSpec)","0","-","-","-","-"
"2859","Builder","private Builder(Kind kind)","0","-","-","-","-"
"2860","name","@CanIgnoreReturnValue
    private Builder name(String name)","0","-","-","-","-"
"2861","isStatic","/** Sets the static modifier on the type. */
    @CanIgnoreReturnValue
    public Builder isStatic(boolean isStatic)","0","-","-","-","-"
"2862","isOpen","/** Sets the final/open modifier on the type. */
    @CanIgnoreReturnValue
    public Builder isOpen(boolean isOpen)","0","-","-","-","-"
"2863","isAbstract","/** Sets the abstract modifier on the type. */
    @CanIgnoreReturnValue
    public Builder isAbstract(boolean isAbstract)","0","-","-","-","-"
"2864","visibility","/** Sets the visibility of the type. */
    @CanIgnoreReturnValue
    public Builder visibility(VisibilityModifier visibility)","0","-","-","-","-"
"2865","addJavadoc","/** Sets the originating element of the type. */
    @CanIgnoreReturnValue
    public Builder addJavadoc(String format, Object... args)","0","-","-","-","-"
"2866","addOriginatingElement","/** Sets the originating element of the type. */
    @CanIgnoreReturnValue
    public Builder addOriginatingElement(XElement originatingElement)","0","-","-","-","-"
"2867","superType","/** Sets the super class/interface of the type and handles nested class name clashes. */
    @CanIgnoreReturnValue
    public Builder superType(XTypeElement superType)","0","-","-","-","-"
"2868","avoidClashesWithNestedClasses","/**
     * Configures the given","0","-","-","-","-"
"2869","alwaysQualify","/** Adds the name to the set of always-qualified names to avoid clashes. */
    @CanIgnoreReturnValue
    public Builder alwaysQualify(String name)","0","-","-","-","-"
"2870","superclass","/** Sets the super class of the type. */
    @CanIgnoreReturnValue
    public Builder superclass(XTypeName superclass)","0","-","-","-","-"
"2871","superclass","/**
     * Sets the super class of the type.
     *
     * <p>@deprecated Use","0","-","-","-","-"
"2872","addSuperinterfaces","/** Adds the super interfaces to the type. */
    @CanIgnoreReturnValue
    public Builder addSuperinterfaces(Collection<XTypeName> superinterfaces)","0","-","-","-","-"
"2873","addJavaSuperinterfaces","/**
     * Adds the super interfaces to the type.
     *
     * <p>@deprecated Use","0","-","-","-","-"
"2874","addSuperinterface","/** Adds the super interface to the type. */
    @CanIgnoreReturnValue
    public Builder addSuperinterface(XTypeName superInterface)","0","-","-","-","-"
"2875","addSuperinterface","/**
     * Adds the super interface to the type.
     *
     * <p>@deprecated Use","0","-","-","-","-"
"2876","addModifiers","/**
     * Sets the modifiers of the type.
     *
     * <p>@deprecated Use the individual setter methods instead.
     */
    @Deprecated
    @CanIgnoreReturnValue
    public Builder addModifiers(Modifier... modifiers)","0","-","-","-","-"
"2877","addTypeVariables","/** Adds the given type variables to the type. */
    @CanIgnoreReturnValue
    public Builder addTypeVariables(Collection<? extends XType> typeVariables)","0","-","-","-","-"
"2878","addTypeVariableNames","/** Adds the given type variable names to the type. */
    @CanIgnoreReturnValue
    public Builder addTypeVariableNames(Collection<XTypeName> typeVariableNames)","0","-","-","-","-"
"2879","addJavaTypeVariableNames","/**
     * Adds the given type variable names to the type.
     *
     * @deprecated Use","0","-","-","-","-"
"2880","addTypeVariable","/** Adds the given type variable to the type. */
    @CanIgnoreReturnValue
    public Builder addTypeVariable(XType type)","0","-","-","-","-"
"2881","addTypeVariable","/** Adds the given type variable name to the type. */
    @CanIgnoreReturnValue
    public Builder addTypeVariable(XTypeName typeName)","0","-","-","-","-"
"2882","addTypeVariable","/**
     * Adds the given type variable name to the type.
     *
     * <p>@deprecated Use","0","-","-","-","-"
"2883","addAnnotations","/** Adds the given annotations to the type. */
    @CanIgnoreReturnValue
    public Builder addAnnotations(Collection<XAnnotationSpec> annotations)","0","-","-","-","-"
"2884","addJavaAnnotations","/**
     * Adds the given annotations to the type.
     *
     * @deprecated Use","0","-","-","-","-"
"2885","addAnnotationNames","/** Adds the given annotation names to the type. */
    @CanIgnoreReturnValue
    public Builder addAnnotationNames(Collection<XClassName> annotationNames)","0","-","-","-","-"
"2886","addAnnotation","/** Adds the given annotation to the type. */
    @CanIgnoreReturnValue
    public Builder addAnnotation(XAnnotationSpec annotation)","0","-","-","-","-"
"2887","addAnnotation","/** Adds the given annotation name to the type. */
    @CanIgnoreReturnValue
    public Builder addAnnotation(XClassName annotationName)","0","-","-","-","-"
"2888","addAnnotation","/**
     * Adds the given annotation to the type.
     *
     * @deprecated Use","0","-","-","-","-"
"2889","addAnnotation","/**
     * Adds the given annotation to the type.
     *
     * @deprecated Use","0","-","-","-","-"
"2890","addTypes","/** Adds the given types to the type. */
    @CanIgnoreReturnValue
    public Builder addTypes(Collection<XTypeSpec> types)","0","-","-","-","-"
"2891","addJavaTypes","/**
     * Adds the given types to the type.
     *
     * @deprecated Use","0","-","-","-","-"
"2892","addType","/** Adds the given annotation name to the type. */
    @CanIgnoreReturnValue
    public Builder addType(XTypeSpec type)","0","-","-","-","-"
"2893","addType","/**
     * Adds the given annotation to the type.
     *
     * @deprecated Use","0","-","-","-","-"
"2894","addProperties","/** Adds the given properties to the type. */
    @CanIgnoreReturnValue
    public Builder addProperties(Collection<XPropertySpec> properties)","0","-","-","-","-"
"2895","addFields","/**
     * Adds the given fields to the type.
     *
     * @deprecated Use","0","-","-","-","-"
"2896","addProperty","/** Adds the given property to the type. */
    @CanIgnoreReturnValue
    public Builder addProperty(XPropertySpec property)","0","-","-","-","-"
"2897","addField","/**
     * Adds the given property to the type.
     *
     * @deprecated Use","0","-","-","-","-"
"2898","addField","/**
     * Adds the given field to the type.
     *
     * @deprecated Use","0","-","-","-","-"
"2899","addFunctions","/** Adds the given functions to the type. */
    @CanIgnoreReturnValue
    public Builder addFunctions(Collection<XFunSpec> functions)","0","-","-","-","-"
"2900","addFunction","/** Adds the given function to the type. */
    @CanIgnoreReturnValue
    public Builder addFunction(XFunSpec function)","0","-","-","-","-"
"2901","addMethods","/**
     * Adds the given methods to the type.
     *
     * @deprecated Use","0","-","-","-","-"
"2902","addMethod","/**
     * Adds the given method to the type.
     *
     * @deprecated Use","0","-","-","-","-"
"2903","build","/** Builds the type and returns an","0","-","-","-","-"
"2904","XTypeSpecs","private XTypeSpecs()","0","-","-","-","-"
"2905","from","/**
   * Returns a","0","-","-","-","-"
"2906","from","/**
   * Returns a","0","-","-","-","-"
"2907","SetType","private SetType(XType type)","0","-","-","-","-"
"2908","typeName","/** The set type itself. */
  XTypeName typeName()","0","-","-","-","-"
"2909","isRawType","/**","0","-","-","-","-"
"2910","elementType","/** Returns the element type. */
  public XType elementType()","0","-","-","-","-"
"2911","elementsAreTypeOf","/** Returns","0","-","-","-","-"
"2912","unwrappedElementType","/**
   *","0","-","-","-","-"
"2913","isSet","/**","0","-","-","-","-"
"2914","isSet","/**","0","-","-","-","-"
"2915","isProducerType","/** Returns true if the type represents a producer-related framework type. */
  public static boolean isProducerType(XType type)","0","-","-","-","-"
"2916","isFrameworkType","/** Returns true if the type represents a framework type. */
  public static boolean isFrameworkType(XType type)","0","-","-","-","-"
"2917","isSetValueFrameworkType","public static boolean isSetValueFrameworkType(XType type)","0","-","-","-","-"
"2918","isMapValueFrameworkType","public static boolean isMapValueFrameworkType(XType type)","0","-","-","-","-"
"2919","isDisallowedType","public static boolean isDisallowedType(XType type)","0","-","-","-","-"
"2920","typeIsOneOf","private static boolean typeIsOneOf(Set<XClassName> classNames, XType type)","0","-","-","-","-"
"2921","FrameworkTypes","private FrameworkTypes()","0","-","-","-","-"
"2922","reentrantComputeIfAbsent","/**
   * A version of","0","-","-","-","-"
"2923","Util","private Util()","0","-","-","-","-"
"2924","OptionalKind","OptionalKind(XClassName className, String absentMethodName)","0","-","-","-","-"
"2925","isOptionalKind","private static boolean isOptionalKind(XTypeElement type)","0","-","-","-","-"
"2926","of","private static OptionalKind of(XTypeElement type)","0","-","-","-","-"
"2927","className","/** Returns the","0","-","-","-","-"
"2928","of","/** Returns","0","-","-","-","-"
"2929","absentValueExpression","/** Returns an expression for the absent/empty value. */
    public XCodeBlock absentValueExpression()","0","-","-","-","-"
"2930","parameterizedAbsentValueExpression","/**
     * Returns an expression for the absent/empty value, parameterized with","0","-","-","-","-"
"2931","presentExpression","/** Returns an expression for the present","0","-","-","-","-"
"2932","presentObjectExpression","/**
     * Returns an expression for the present","0","-","-","-","-"
"2933","from","/**
   * Returns a","0","-","-","-","-"
"2934","from","/**
   * Returns a","0","-","-","-","-"
"2935","OptionalType","private OptionalType(XType type)","0","-","-","-","-"
"2936","typeName","/** The optional type itself. */
  XTypeName typeName()","0","-","-","-","-"
"2937","kind","/** Which","0","-","-","-","-"
"2938","valueType","/** The value type. */
  public XType valueType()","0","-","-","-","-"
"2939","isOptional","/** Returns","0","-","-","-","-"
"2940","isOptional","/** Returns","0","-","-","-","-"
"2941","isOptionalProviderType","public static boolean isOptionalProviderType(XType type)","0","-","-","-","-"
"2942","ElementFormatter","@Inject
  ElementFormatter()","0","-","-","-","-"
"2943","format","@Override
  public String format(XElement element)","0","-","-","-","-"
"2944","elementToString","/**
   * Returns a useful string form for an element.
   *
   * <p>Elements directly enclosed by a type are preceded by the enclosing type's qualified name.
   *
   * <p>If the element is a parameter, the returned string will include the enclosing executable,
   * with other parameters elided.
   */
  public static String elementToString(XElement element)","0","-","-","-","-"
"2945","elementToString","/**
   * Returns a useful string form for an element.
   *
   * <p>Elements directly enclosed by a type are preceded by the enclosing type's qualified name.
   *
   * <p>Parameters are given with their enclosing executable, with other parameters elided.
   */
  public static String elementToString(XElement element, boolean elideMethodParameterTypes)","0","-","-","-","-"
"2946","enclosingTypeAndMemberName","private static StringBuilder enclosingTypeAndMemberName(XElement element)","0","-","-","-","-"
"2947","compute","/** Returns the set of strongly connected components in reverse topological order. */
  public static <NodeT> ImmutableList<ImmutableSet<NodeT>> compute(
      ImmutableCollection<NodeT> nodes, SuccessorsFunction<NodeT> successorsFunction)","0","-","-","-","-"
"2948","TarjanSCC","TarjanSCC(ImmutableCollection<NodeT> nodes, SuccessorsFunction<NodeT> successorsFunction)","0","-","-","-","-"
"2949","compute","private ImmutableList<ImmutableSet<NodeT>> compute()","0","-","-","-","-"
"2950","stronglyConnect","private void stronglyConnect(NodeT node)","0","-","-","-","-"
"2951","TarjanSCCs","private TarjanSCCs()","0","-","-","-","-"
"2952","stripCommonTypePrefixes","/**
   * A method to strip out common packages and a few rare type prefixes from types' string
   * representation before being used in error messages.
   *
   * <p>This type assumes a String value that is a valid fully qualified (and possibly
   * parameterized) type, and should NOT be used with arbitrary text, especially prose error
   * messages.
   *
   * <p>TODO(cgruber): Tighten these to take type representations (mirrors and elements) to avoid
   * accidental mis-use by running errors through this method.
   */
  public static String stripCommonTypePrefixes(String type)","0","-","-","-","-"
"2953","DiagnosticFormatting","private DiagnosticFormatting()","0","-","-","-","-"
"2954","clearCache","/** Releases cached references. */
  void clearCache();","0","-","-","-","-"
"2955","isValidMembersInjectionKey","public static boolean isValidMembersInjectionKey(Key key)","0","-","-","-","-"
"2956","isValidImplicitProvisionKey","/**
   * Returns","0","-","-","-","-"
"2957","isValidImplicitProvisionKey","/**
   * Returns","0","-","-","-","-"
"2958","isComponentOrCreator","/**
   * Returns","0","-","-","-","-"
"2959","requireTypeElement","/**
   * Returns the type element with the given class name or throws","0","-","-","-","-"
"2960","requireTypeElement","/**
   * Returns the type element with the given class name or throws","0","-","-","-","-"
"2961","DaggerSuperficialValidation","@Inject
  DaggerSuperficialValidation(XProcessingEnv processingEnv, CompilerOptions compilerOptions)","0","-","-","-","-"
"2962","validateTypeOf","/**
   * Validates the","0","-","-","-","-"
"2963","validateSuperTypeOf","/**
   * Validates the","0","-","-","-","-"
"2964","validateThrownTypesOf","/**
   * Validates the","0","-","-","-","-"
"2965","validateAnnotationTypesOf","/**
   * Validates the annotation types of the given element.
   *
   * <p>Note: this method does not validate annotation values. This method is useful if you care
   * about the annotation's annotations (e.g. to check for","0","-","-","-","-"
"2966","validateAnnotationTypeOf","/**
   * Validates the type of the given annotation.
   *
   * <p>The annotation is assumed to be annotating the given element, but this is not checked. The
   * element is only in the error message if a","0","-","-","-","-"
"2967","validateAnnotationsOf","/** Validate the annotations of the given element. */
  public void validateAnnotationsOf(XElement element)","0","-","-","-","-"
"2968","validateAnnotationOf","public void validateAnnotationOf(XElement element, XAnnotation annotation)","0","-","-","-","-"
"2969","validateTypeHierarchyOf","/**
   * Validate the type hierarchy for the given type (with the given type description) within the
   * given element.
   *
   * <p>Validation includes all superclasses, interfaces, and type parameters of those types.
   */
  public void validateTypeHierarchyOf(String typeDescription, XElement element, XType type)","0","-","-","-","-"
"2970","validateTypeHierarchy","private void validateTypeHierarchy(String desc, XType type)","0","-","-","-","-"
"2971","validateElements","/**
   * Returns true if all of the given elements return true from","0","-","-","-","-"
"2972","validateElement","/**
   * Returns true if all types referenced by the given element are defined. The exact meaning of
   * this depends on the kind of element. For packages, it means that all annotations on the package
   * are fully defined. For other element kinds, it means that types referenced by the element,
   * anything it contains, and any of its annotations element are all defined.
   */
  public void validateElement(XElement element)","0","-","-","-","-"
"2973","validateTypes","private void validateTypes(String desc, Collection<? extends XType> types)","0","-","-","-","-"
"2974","validateType","/**
   * Returns true if the given type is fully defined. This means that the type itself is defined, as
   * are any types it references, such as any type arguments or type bounds.
   */
  private void validateType(String desc, XType type)","0","-","-","-","-"
"2975","isErrorKind","private boolean isErrorKind(XType type)","0","-","-","-","-"
"2976","validateExecutableType","/**
   * Returns true if the given type is fully defined. This means that the parameter and return types
   * must be fully defined, as must types declared in a","0","-","-","-","-"
"2977","getTypeVariables","private ImmutableList<XType> getTypeVariables(XExecutableType executableType)","0","-","-","-","-"
"2978","validateAnnotations","private void validateAnnotations(Collection<XAnnotation> annotations)","0","-","-","-","-"
"2979","validateAnnotation","private void validateAnnotation(XAnnotation annotation)","0","-","-","-","-"
"2980","getDefaultValues","private ImmutableList<XAnnotationValue> getDefaultValues(XAnnotation annotation)","0","-","-","-","-"
"2981","validateAnnotationValues","private void validateAnnotationValues(Collection<XAnnotationValue> values)","0","-","-","-","-"
"2982","validateAnnotationValue","private void validateAnnotationValue(XAnnotationValue value)","0","-","-","-","-"
"2983","validateIsTypeOf","private void validateIsTypeOf(XType expectedType, Class<?> clazz)","0","-","-","-","-"
"2984","validateIsEquivalentType","private void validateIsEquivalentType(XType type, XType expectedType)","0","-","-","-","-"
"2985","UnexpectedException","private UnexpectedException(Throwable throwable)","0","-","-","-","-"
"2986","KnownErrorType","private KnownErrorType(XType errorType)","0","-","-","-","-"
"2987","KnownErrorType","private KnownErrorType(String errorTypeName)","0","-","-","-","-"
"2988","getErrorTypeName","public String getErrorTypeName()","0","-","-","-","-"
"2989","from","private static ValidationException from(Throwable throwable)","0","-","-","-","-"
"2990","ValidationException","private ValidationException()","0","-","-","-","-"
"2991","ValidationException","private ValidationException(Throwable throwable)","0","-","-","-","-"
"2992","append","/**
     * Appends a message for the given element and returns this instance of","0","-","-","-","-"
"2993","append","/**
     * Appends a message for the given type and returns this instance of","0","-","-","-","-"
"2994","append","/**
     * Appends a message for the given executable type and returns this instance of","0","-","-","-","-"
"2995","append","/**
     * Appends a message for the given annotation and returns this instance of","0","-","-","-","-"
"2996","append","/** Appends the given message and returns this instance of","0","-","-","-","-"
"2997","append","/**
     * Appends a message for the given annotation value and returns this instance of","0","-","-","-","-"
"2998","getMessage","@Override
    public String getMessage()","0","-","-","-","-"
"2999","getTrace","public String getTrace()","0","-","-","-","-"
"3000","getMessageInternal","private ImmutableList<String> getMessageInternal()","0","-","-","-","-"
"3001","shouldAppendEnclosingElement","private static boolean shouldAppendEnclosingElement(XElement element)","0","-","-","-","-"
"3002","getMessageForElement","private String getMessageForElement(XElement element)","0","-","-","-","-"
"3003","productionImplementationQualifier","/** Returns a","0","-","-","-","-"
"3004","productionQualifier","/** Returns a","0","-","-","-","-"
"3005","productionScope","/** Returns a","0","-","-","-","-"
"3006","ProducerAnnotations","private ProducerAnnotations()","0","-","-","-","-"
"3007","from","/**
   * Returns a","0","-","-","-","-"
"3008","from","/**
   * Returns a","0","-","-","-","-"
"3009","MapType","private MapType(XType type)","0","-","-","-","-"
"3010","typeName","/** The map type itself. */
  XTypeName typeName()","0","-","-","-","-"
"3011","isRawType","/**","0","-","-","-","-"
"3012","keyType","/**
   * The map key type.
   *
   * @throws IllegalStateException if","0","-","-","-","-"
"3013","valueType","/**
   * The map value type.
   *
   * @throws IllegalStateException if","0","-","-","-","-"
"3014","valuesAreTypeOf","/** Returns","0","-","-","-","-"
"3015","valuesAreFrameworkType","/** Returns","0","-","-","-","-"
"3016","valuesAreProvider","/** Returns","0","-","-","-","-"
"3017","unwrappedFrameworkValueType","/**
   * Returns the map's","0","-","-","-","-"
"3018","valueRequestKind","/**
   * Returns the","0","-","-","-","-"
"3019","isMap","/** Returns","0","-","-","-","-"
"3020","isMap","/** Returns","0","-","-","-","-"
"3021","isMapOfProvider","/** Returns","0","-","-","-","-"
"3022","format","/**
   * Performs the transformation of an object into a string representation.
   */
  public abstract String format(T object);","0","-","-","-","-"
"3023","apply","/**
   * Performs the transformation of an object into a string representation in conformity with the
   *","0","-","-","-","-"
"3024","formatIndentedList","/** Formats","0","-","-","-","-"
"3025","appendIndent","private void appendIndent(StringBuilder builder, int indentLevel)","0","-","-","-","-"
"3026","formatArgumentInList","public static String formatArgumentInList(int index, int size, CharSequence name)","0","-","-","-","-"
"3027","annotation","/** The annotation itself. */
  public final XAnnotation annotation()","0","-","-","-","-"
"3028","className","/** Returns the","0","-","-","-","-"
"3029","simpleName","/** The simple name of the annotation. */
  public String simpleName()","0","-","-","-","-"
"3030","includes","/**
   * The types specified in the","0","-","-","-","-"
"3031","subcomponents","/**
   * The types specified in the","0","-","-","-","-"
"3032","isModuleAnnotation","/** Returns","0","-","-","-","-"
"3033","moduleAnnotations","/** The module annotation types. */
  public static ImmutableSet<XClassName> moduleAnnotations()","0","-","-","-","-"
"3034","create","private static ModuleAnnotation create(XAnnotation annotation)","0","-","-","-","-"
"3035","moduleAnnotation","/**
   * Returns an object representing the","0","-","-","-","-"
"3036","wrap","public static <T> SourceFileGenerator<T> wrap(
      SourceFileGenerator<T> delegate, XProcessingEnv processingEnv)","0","-","-","-","-"
"3037","SourceFileHjarGenerator","private SourceFileHjarGenerator(SourceFileGenerator<T> delegate, XProcessingEnv processingEnv)","0","-","-","-","-"
"3038","originatingElement","@Override
  public XElement originatingElement(T input)","0","-","-","-","-"
"3039","topLevelTypes","@Override
  public ImmutableList<XTypeSpec> topLevelTypes(T input)","0","-","-","-","-"
"3040","skeletonType","private XTypeSpec skeletonType(String packageName, TypeSpec completeType)","0","-","-","-","-"
"3041","skeletonMethod","private MethodSpec skeletonMethod(
      String packageName, TypeSpec completeType, MethodSpec completeMethod)","0","-","-","-","-"
"3042","getRequiredSuperCall","private Optional<CodeBlock> getRequiredSuperCall(String packageName, TypeSpec completeType)","0","-","-","-","-"
"3043","getDefaultValueCodeBlock","/**
   * Returns a","0","-","-","-","-"
"3044","skeletonField","private FieldSpec skeletonField(FieldSpec completeField)","0","-","-","-","-"
"3045","MapKeyAccessibility","private MapKeyAccessibility()","0","-","-","-","-"
"3046","checkAnnotation","private static boolean checkAnnotation(
      XAnnotation annotation, Predicate<XType> accessibilityChecker)","0","-","-","-","-"
"3047","checkValues","private static boolean checkValues(
      List<XAnnotationValue> values, Predicate<XType> accessibilityChecker)","0","-","-","-","-"
"3048","checkValue","private static boolean checkValue(XAnnotationValue value, Predicate<XType> accessibilityChecker)","0","-","-","-","-"
"3049","isMapKeyAccessibleFrom","public static boolean isMapKeyAccessibleFrom(XAnnotation annotation, String accessingPackage)","0","-","-","-","-"
"3050","isMapKeyPubliclyAccessible","public static boolean isMapKeyPubliclyAccessible(XAnnotation annotation)","0","-","-","-","-"
"3051","getUniqueName","/**
   * Generates a unique name using","0","-","-","-","-"
"3052","claim","/**
   * Adds","0","-","-","-","-"
"3053","contributionType","/** The contribution type of this object. */
    ContributionType contributionType();","0","-","-","-","-"
"3054","isMultibinding","/**","0","-","-","-","-"
"3055","fromBindingElement","/**
   * The contribution type from a binding element's annotations. Presumes a well-formed binding
   * element (at most one of @IntoSet, @IntoMap, and @ElementsIntoSet).","0","-","-","-","-"
"3056","annotation","/** The annotation itself. */
  public final XAnnotation annotation()","0","-","-","-","-"
"3057","className","/** Returns the","0","-","-","-","-"
"3058","simpleName","/** The simple name of the annotation type. */
  public final String simpleName()","0","-","-","-","-"
"3059","isSubcomponent","/**
   * Returns","0","-","-","-","-"
"3060","isProduction","/**
   * Returns","0","-","-","-","-"
"3061","isRealComponent","/**
   * Returns","0","-","-","-","-"
"3062","dependencyTypes","/** The types listed as","0","-","-","-","-"
"3063","dependencies","/**
   * The types listed as","0","-","-","-","-"
"3064","modules","/**
   * The types listed as","0","-","-","-","-"
"3065","isRootComponent","private final boolean isRootComponent()","0","-","-","-","-"
"3066","rootComponentAnnotation","/**
   * Returns an object representing a root component annotation, not a subcomponent annotation, if
   * one is present on","0","-","-","-","-"
"3067","subcomponentAnnotation","/**
   * Returns an object representing a subcomponent annotation, if one is present on","0","-","-","-","-"
"3068","anyComponentAnnotation","/**
   * Returns an object representing a root component or subcomponent annotation, if one is present
   * on","0","-","-","-","-"
"3069","anyComponentAnnotation","private static Optional<ComponentAnnotation> anyComponentAnnotation(
      XElement element,
      Collection<XClassName> annotations,
      DaggerSuperficialValidation superficialValidation)","0","-","-","-","-"
"3070","isComponentAnnotation","/** Returns","0","-","-","-","-"
"3071","fromModuleAnnotation","/** Creates a fictional component annotation representing a module. */
  public static ComponentAnnotation fromModuleAnnotation(ModuleAnnotation moduleAnnotation)","0","-","-","-","-"
"3072","create","private static ComponentAnnotation create(XAnnotation annotation)","0","-","-","-","-"
"3073","rootComponentAnnotations","/** The root component annotation types. */
  public static ImmutableSet<XClassName> rootComponentAnnotations()","0","-","-","-","-"
"3074","subcomponentAnnotations","/** The subcomponent annotation types. */
  public static ImmutableSet<XClassName> subcomponentAnnotations()","0","-","-","-","-"
"3075","allComponentAnnotations","/** All component annotation types. */
  public static ImmutableSet<XClassName> allComponentAnnotations()","0","-","-","-","-"
"3076","allComponentAndCreatorAnnotations","/** All component and creator annotation types. */
  public static ImmutableSet<XClassName> allComponentAndCreatorAnnotations()","0","-","-","-","-"
"3077","requestType","/** Returns the type of a request of this kind for a key with a given type. */
  public static XType requestType(
      RequestKind requestKind, XType type, XProcessingEnv processingEnv)","0","-","-","-","-"
"3078","requestTypeName","/** Returns the type of a request of this kind for a key with a given type. */
  public static XTypeName requestTypeName(RequestKind requestKind, XTypeName keyType)","0","-","-","-","-"
"3079","getRequestKind","/** Returns the","0","-","-","-","-"
"3080","extractKeyType","/**
   * Unwraps the framework class(es) of","0","-","-","-","-"
"3081","extractKeyType","private static XType extractKeyType(RequestKind requestKind, XType type)","0","-","-","-","-"
"3082","frameworkClassName","/**
   * A dagger- or","0","-","-","-","-"
"3083","canBeSatisfiedByProductionBinding","/**
   * Returns","0","-","-","-","-"
"3084","dependencyCanBeProduction","public static boolean dependencyCanBeProduction(DependencyEdge edge, BindingGraph graph)","0","-","-","-","-"
"3085","RequestKinds","private RequestKinds()","0","-","-","-","-"
"3086","productionScope","/** Returns a representation for","0","-","-","-","-"
"3087","getReadableSource","/**
   * Returns the readable source representation (name with @ prefix) of the scope's annotation type.
   *
   * <p>It's readable source because it has had common package prefixes removed, e.g.
   *","0","-","-","-","-"
"3088","SourceFileGenerator","public SourceFileGenerator(XFiler filer, XProcessingEnv processingEnv)","0","-","-","-","-"
"3089","SourceFileGenerator","public SourceFileGenerator(SourceFileGenerator<T> delegate)","0","-","-","-","-"
"3090","generate","/** Generates a source file to be compiled for","0","-","-","-","-"
"3091","generate","/** Generates a source file to be compiled for","0","-","-","-","-"
"3092","buildFile","private XFileSpec buildFile(T input, XTypeSpec.Builder typeSpecBuilder)","0","-","-","-","-"
"3093","findGeneratedAnnotation","private Optional<XTypeElement> findGeneratedAnnotation()","0","-","-","-","-"
"3094","originatingElement","/** Returns the originating element of the generating type. */
  public abstract XElement originatingElement(T input);","0","-","-","-","-"
"3095","topLevelTypes","/**
   * Returns","0","-","-","-","-"
"3096","warningSuppressions","/** Returns","0","-","-","-","-"
"3097","ExternalBindingGraphPlugins","@Inject
  ExternalBindingGraphPlugins(
      @External ImmutableSet<dagger.spi.BindingGraphPlugin> legacyPlugins,
      @External ImmutableSet<BindingGraphPlugin> plugins,
      DiagnosticReporterFactory diagnosticReporterFactory,
      XFiler filer,
      XProcessingEnv processingEnv,
      @ProcessingOptions Map<String, String> processingOptions)","0","-","-","-","-"
"3098","allSupportedOptions","/** Returns","0","-","-","-","-"
"3099","initializePlugins","/** Initializes the plugins. */
  // TODO(ronshapiro): Should we validate the uniqueness of plugin names?
  public void initializePlugins()","0","-","-","-","-"
"3100","initializePlugin","private void initializePlugin(BindingGraphPlugin plugin)","0","-","-","-","-"
"3101","onProcessingRoundBegin","public void onProcessingRoundBegin()","0","-","-","-","-"
"3102","initializeLegacyPlugin","private void initializeLegacyPlugin(dagger.spi.BindingGraphPlugin plugin)","0","-","-","-","-"
"3103","visit","/** Returns","0","-","-","-","-"
"3104","visitLegacyPlugins","private boolean visitLegacyPlugins(dagger.internal.codegen.model.BindingGraph graph)","0","-","-","-","-"
"3105","visitPlugins","private boolean visitPlugins(dagger.internal.codegen.model.BindingGraph graph)","0","-","-","-","-"
"3106","endPlugins","public void endPlugins()","0","-","-","-","-"
"3107","MapKeyValidator","@Inject
  MapKeyValidator(XProcessingEnv processingEnv)","0","-","-","-","-"
"3108","validate","public ValidationReport validate(XTypeElement element)","0","-","-","-","-"
"3109","autoAnnotationIsMissing","private boolean autoAnnotationIsMissing()","0","-","-","-","-"
"3110","ProducesMethodValidator","@Inject
  ProducesMethodValidator(
      XProcessingEnv processingEnv,
      DependencyRequestValidator dependencyRequestValidator,
      InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"3111","elementsIntoSetNotASetMessage","@Override
  protected String elementsIntoSetNotASetMessage()","0","-","-","-","-"
"3112","badTypeMessage","@Override
  protected String badTypeMessage()","0","-","-","-","-"
"3113","elementValidator","@Override
  protected ElementValidator elementValidator(XMethodElement method)","0","-","-","-","-"
"3114","Validator","Validator(XMethodElement method)","0","-","-","-","-"
"3115","checkAdditionalMethodProperties","@Override
    protected void checkAdditionalMethodProperties()","0","-","-","-","-"
"3116","checkNullable","/**
     * Adds a warning if a","0","-","-","-","-"
"3117","checkKeyType","/**
     *","0","-","-","-","-"
"3118","checkSetValuesType","/**
     *","0","-","-","-","-"
"3119","unwrapListenableFuture","private Optional<XType> unwrapListenableFuture(XType type)","0","-","-","-","-"
"3120","ComponentValidator","@Inject
  ComponentValidator(
      ModuleValidator moduleValidator,
      ComponentCreatorValidator creatorValidator,
      DependencyRequestValidator dependencyRequestValidator,
      MembersInjectionValidator membersInjectionValidator,
      MethodSignatureFormatter methodSignatureFormatter,
      DependencyRequestFactory dependencyRequestFactory,
      DaggerSuperficialValidation superficialValidation,
      KotlinMetadataUtil metadataUtil)","0","-","-","-","-"
"3121","clearCache","@Override
  public void clearCache()","0","-","-","-","-"
"3122","validate","/** Validates the given component. */
  public ValidationReport validate(XTypeElement component)","0","-","-","-","-"
"3123","validateUncached","private ValidationReport validateUncached(XTypeElement component)","0","-","-","-","-"
"3124","ElementValidator","ElementValidator(XTypeElement component)","0","-","-","-","-"
"3125","componentKind","private ComponentKind componentKind()","0","-","-","-","-"
"3126","componentAnnotation","private ComponentAnnotation componentAnnotation()","0","-","-","-","-"
"3127","validateElement","ValidationReport validateElement()","0","-","-","-","-"
"3128","moreThanOneComponentAnnotationError","private String moreThanOneComponentAnnotationError()","0","-","-","-","-"
"3129","validateUseOfCancellationPolicy","private void validateUseOfCancellationPolicy()","0","-","-","-","-"
"3130","validateIsAbstractType","private void validateIsAbstractType()","0","-","-","-","-"
"3131","invalidTypeError","private String invalidTypeError()","0","-","-","-","-"
"3132","validateFields","private void validateFields()","0","-","-","-","-"
"3133","validateCreators","private void validateCreators()","0","-","-","-","-"
"3134","validateNoReusableAnnotation","private void validateNoReusableAnnotation()","0","-","-","-","-"
"3135","validateComponentMethods","private void validateComponentMethods()","0","-","-","-","-"
"3136","validateClassMethodName","private void validateClassMethodName()","0","-","-","-","-"
"3137","ComponentMethodValidator","ComponentMethodValidator(XMethodElement method)","0","-","-","-","-"
"3138","validateMethod","void validateMethod()","0","-","-","-","-"
"3139","validateNoTypeVariables","private void validateNoTypeVariables()","0","-","-","-","-"
"3140","legalSubcomponentAnnotation","private Optional<ComponentAnnotation> legalSubcomponentAnnotation()","0","-","-","-","-"
"3141","legalSubcomponentAnnotations","private ImmutableSet<XClassName> legalSubcomponentAnnotations()","0","-","-","-","-"
"3142","subcomponentCreatorAnnotation","private Optional<XAnnotation> subcomponentCreatorAnnotation()","0","-","-","-","-"
"3143","validateSubcomponentFactoryMethod","private void validateSubcomponentFactoryMethod(ComponentAnnotation subcomponentAnnotation)","0","-","-","-","-"
"3144","getTransitiveModules","/**
       * Returns the full set of modules transitively included from the given seed modules, which
       * includes all transitive","0","-","-","-","-"
"3145","includesFromSuperclasses","/** Returns","0","-","-","-","-"
"3146","validateSubcomponentCreatorMethod","private void validateSubcomponentCreatorMethod()","0","-","-","-","-"
"3147","validateProvisionMethod","private void validateProvisionMethod()","0","-","-","-","-"
"3148","validateMembersInjectionMethod","private void validateMembersInjectionMethod()","0","-","-","-","-"
"3149","reportInvalidMethod","private void reportInvalidMethod()","0","-","-","-","-"
"3150","validateNoConflictingEntryPoints","private void validateNoConflictingEntryPoints()","0","-","-","-","-"
"3151","reportConflictingEntryPoints","private void reportConflictingEntryPoints(Collection<XMethodElement> methods)","0","-","-","-","-"
"3152","validateSubcomponentReferences","private void validateSubcomponentReferences()","0","-","-","-","-"
"3153","validateComponentDependencies","private void validateComponentDependencies()","0","-","-","-","-"
"3154","validateReferencedModules","private void validateReferencedModules()","0","-","-","-","-"
"3155","validateSubcomponents","private void validateSubcomponents()","0","-","-","-","-"
"3156","distinctKeys","private ImmutableSet<Key> distinctKeys(Set<XMethodElement> methods)","0","-","-","-","-"
"3157","dependencyRequest","private DependencyRequest dependencyRequest(XMethodElement method)","0","-","-","-","-"
"3158","isEntryPoint","private static boolean isEntryPoint(XMethodElement method, XMethodType methodType)","0","-","-","-","-"
"3159","addMethodUnlessOverridden","private void addMethodUnlessOverridden(XMethodElement method, Set<XMethodElement> methods)","0","-","-","-","-"
"3160","overridesAsDeclared","/**
   * Returns","0","-","-","-","-"
"3161","checkForAnnotations","private static Optional<XAnnotation> checkForAnnotations(
      XType type, Set<XClassName> annotations)","0","-","-","-","-"
"3162","BindsInstanceElementValidator","BindsInstanceElementValidator(InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"3163","bindingElements","@Override
  protected final String bindingElements()","0","-","-","-","-"
"3164","bindingElementTypeVerb","@Override
  protected final String bindingElementTypeVerb()","0","-","-","-","-"
"3165","indexValidators","@Provides
  static ImmutableMap<XClassName, BindingMethodValidator> indexValidators(
      ProvidesMethodValidator providesMethodValidator,
      ProducesMethodValidator producesMethodValidator,
      BindsMethodValidator bindsMethodValidator,
      MultibindsMethodValidator multibindsMethodValidator,
      BindsOptionalOfMethodValidator bindsOptionalOfMethodValidator)","0","-","-","-","-"
"3166","SpiModelBindingGraphConverter","private SpiModelBindingGraphConverter()","0","-","-","-","-"
"3167","toSpiModel","public static DiagnosticReporter toSpiModel(
      dagger.internal.codegen.model.DiagnosticReporter reporter)","0","-","-","-","-"
"3168","toSpiModel","public static BindingGraph toSpiModel(
      dagger.internal.codegen.model.BindingGraph graph, XProcessingEnv env)","0","-","-","-","-"
"3169","toSpiModel","private static ImmutableNetwork<Node, Edge> toSpiModel(
      Network<
              dagger.internal.codegen.model.BindingGraph.Node,
              dagger.internal.codegen.model.BindingGraph.Edge>
          internalNetwork,
      XProcessingEnv env)","0","-","-","-","-"
"3170","toSpiModel","private static Node toSpiModel(
      dagger.internal.codegen.model.BindingGraph.Node node, XProcessingEnv env)","0","-","-","-","-"
"3171","toSpiModel","private static Edge toSpiModel(
      dagger.internal.codegen.model.BindingGraph.Edge edge, XProcessingEnv env)","0","-","-","-","-"
"3172","toSpiModel","private static Key toSpiModel(dagger.internal.codegen.model.Key key)","0","-","-","-","-"
"3173","toSpiModel","private static BindingKind toSpiModel(dagger.internal.codegen.model.BindingKind bindingKind)","0","-","-","-","-"
"3174","toSpiModel","private static RequestKind toSpiModel(dagger.internal.codegen.model.RequestKind requestKind)","0","-","-","-","-"
"3175","toSpiModel","@SuppressWarnings(""CheckReturnValue"")
  private static DependencyRequest toSpiModel(
      dagger.internal.codegen.model.DependencyRequest request)","0","-","-","-","-"
"3176","toSpiModel","private static Scope toSpiModel(dagger.internal.codegen.model.Scope scope)","0","-","-","-","-"
"3177","toSpiModel","private static ComponentPath toSpiModel(dagger.internal.codegen.model.ComponentPath path)","0","-","-","-","-"
"3178","toSpiModel","private static DaggerTypeElement toSpiModel(XTypeElement typeElement)","0","-","-","-","-"
"3179","toSpiModel","private static DaggerType toSpiModel(XType type)","0","-","-","-","-"
"3180","toSpiModel","static DaggerAnnotation toSpiModel(XAnnotation annotation)","0","-","-","-","-"
"3181","toSpiModel","private static DaggerElement toSpiModel(XElement element)","0","-","-","-","-"
"3182","toSpiModel","private static DaggerExecutableElement toSpiModel(XExecutableElement executableElement)","0","-","-","-","-"
"3183","toSpiModel","static DaggerProcessingEnv toSpiModel(XProcessingEnv env)","0","-","-","-","-"
"3184","toInternal","private static dagger.internal.codegen.model.BindingGraph.ComponentNode toInternal(
      ComponentNode componentNode)","0","-","-","-","-"
"3185","toInternal","private static dagger.internal.codegen.model.BindingGraph.MaybeBinding toInternal(
      MaybeBinding maybeBinding)","0","-","-","-","-"
"3186","toInternal","private static dagger.internal.codegen.model.BindingGraph.DependencyEdge toInternal(
      DependencyEdge dependencyEdge)","0","-","-","-","-"
"3187","toInternal","private static dagger.internal.codegen.model.BindingGraph.ChildFactoryMethodEdge toInternal(
      ChildFactoryMethodEdge childFactoryMethodEdge)","0","-","-","-","-"
"3188","create","static ComponentNode create(
        dagger.internal.codegen.model.BindingGraph.ComponentNode componentNode,
        XProcessingEnv env)","0","-","-","-","-"
"3189","internalDelegate","abstract dagger.internal.codegen.model.BindingGraph.ComponentNode internalDelegate();","0","-","-","-","-"
"3190","toString","@Override
    public final String toString()","0","-","-","-","-"
"3191","create","static Binding create(dagger.internal.codegen.model.Binding binding, XProcessingEnv env)","0","-","-","-","-"
"3192","internalDelegate","abstract dagger.internal.codegen.model.Binding internalDelegate();","0","-","-","-","-"
"3193","toString","@Override
    public final String toString()","0","-","-","-","-"
"3194","create","static MissingBinding create(
        dagger.internal.codegen.model.BindingGraph.MissingBinding missingBinding,
        XProcessingEnv env)","0","-","-","-","-"
"3195","internalDelegate","abstract dagger.internal.codegen.model.BindingGraph.MissingBinding internalDelegate();","0","-","-","-","-"
"3196","hashCode","@Memoized
    @Override
    public abstract int hashCode();","0","-","-","-","-"
"3197","equals","@Override
    public abstract boolean equals(Object o);","0","-","-","-","-"
"3198","create","static DependencyEdge create(
        dagger.internal.codegen.model.BindingGraph.DependencyEdge dependencyEdge,
        XProcessingEnv env)","0","-","-","-","-"
"3199","internalDelegate","abstract dagger.internal.codegen.model.BindingGraph.DependencyEdge internalDelegate();","0","-","-","-","-"
"3200","toString","@Override
    public final String toString()","0","-","-","-","-"
"3201","create","static ChildFactoryMethodEdge create(
        dagger.internal.codegen.model.BindingGraph.ChildFactoryMethodEdge childFactoryMethodEdge,
        XProcessingEnv env)","0","-","-","-","-"
"3202","internalDelegate","abstract dagger.internal.codegen.model.BindingGraph.ChildFactoryMethodEdge internalDelegate();","0","-","-","-","-"
"3203","toString","@Override
    public final String toString()","0","-","-","-","-"
"3204","create","static SubcomponentCreatorBindingEdge create(
        dagger.internal.codegen.model.BindingGraph.SubcomponentCreatorBindingEdge
            subcomponentCreatorBindingEdge,
        XProcessingEnv env)","0","-","-","-","-"
"3205","internalDelegate","abstract dagger.internal.codegen.model.BindingGraph.SubcomponentCreatorBindingEdge
        internalDelegate();","0","-","-","-","-"
"3206","toString","@Override
    public final String toString()","0","-","-","-","-"
"3207","create","static BindingGraph create(
        dagger.internal.codegen.model.BindingGraph bindingGraph, XProcessingEnv env)","0","-","-","-","-"
"3208","componentNode","@Override
    public Optional<ComponentNode> componentNode(ComponentPath componentPath)","0","-","-","-","-"
"3209","nodesByClass","@Override
    @Memoized
    public ImmutableSetMultimap<Class<? extends Node>, ? extends Node> nodesByClass()","0","-","-","-","-"
"3210","dependencyGraph","@Override
    @Memoized
    protected ImmutableNetwork<Node, DependencyEdge> dependencyGraph()","0","-","-","-","-"
"3211","from","public static DaggerElement from(XElement element)","0","-","-","-","-"
"3212","element","abstract XElement element();","0","-","-","-","-"
"3213","javac","@Override
    public Element javac()","0","-","-","-","-"
"3214","ksp","@Override
    public KSAnnotated ksp()","0","-","-","-","-"
"3215","backend","@Override
    public DaggerProcessingEnv.Backend backend()","0","-","-","-","-"
"3216","toString","@Override
    public final String toString()","0","-","-","-","-"
"3217","from","public static DaggerTypeElement from(XTypeElement element)","0","-","-","-","-"
"3218","element","abstract XTypeElement element();","0","-","-","-","-"
"3219","javac","@Override
    public TypeElement javac()","0","-","-","-","-"
"3220","ksp","@Override
    public KSClassDeclaration ksp()","0","-","-","-","-"
"3221","backend","@Override
    public DaggerProcessingEnv.Backend backend()","0","-","-","-","-"
"3222","toString","@Override
    public final String toString()","0","-","-","-","-"
"3223","from","public static DaggerType from(XType type)","0","-","-","-","-"
"3224","type","abstract Equivalence.Wrapper<XType> type();","0","-","-","-","-"
"3225","javac","@Override
    public TypeMirror javac()","0","-","-","-","-"
"3226","ksp","@Override
    public KSType ksp()","0","-","-","-","-"
"3227","backend","@Override
    public DaggerProcessingEnv.Backend backend()","0","-","-","-","-"
"3228","toString","@Override
    public final String toString()","0","-","-","-","-"
"3229","from","public static DaggerAnnotation from(XAnnotation annotation)","0","-","-","-","-"
"3230","annotation","abstract Equivalence.Wrapper<XAnnotation> annotation();","0","-","-","-","-"
"3231","annotationTypeElement","@Override
    public DaggerTypeElement annotationTypeElement()","0","-","-","-","-"
"3232","javac","@Override
    public AnnotationMirror javac()","0","-","-","-","-"
"3233","ksp","@Override
    public KSAnnotation ksp()","0","-","-","-","-"
"3234","backend","@Override
    public DaggerProcessingEnv.Backend backend()","0","-","-","-","-"
"3235","toString","@Override
    public final String toString()","0","-","-","-","-"
"3236","from","public static DaggerExecutableElement from(XExecutableElement executableElement)","0","-","-","-","-"
"3237","executableElement","abstract XExecutableElement executableElement();","0","-","-","-","-"
"3238","javac","@Override
    public ExecutableElement javac()","0","-","-","-","-"
"3239","ksp","@Override
    public KSDeclaration ksp()","0","-","-","-","-"
"3240","backend","@Override
    public DaggerProcessingEnv.Backend backend()","0","-","-","-","-"
"3241","toString","@Override
    public final String toString()","0","-","-","-","-"
"3242","from","public static DaggerProcessingEnv from(XProcessingEnv env)","0","-","-","-","-"
"3243","DaggerProcessingEnvImpl","DaggerProcessingEnvImpl(XProcessingEnv env)","0","-","-","-","-"
"3244","javac","@Override
    public ProcessingEnvironment javac()","0","-","-","-","-"
"3245","ksp","@Override
    public SymbolProcessorEnvironment ksp()","0","-","-","-","-"
"3246","resolver","@Override
    public Resolver resolver()","0","-","-","-","-"
"3247","backend","@Override
    public DaggerProcessingEnv.Backend backend()","0","-","-","-","-"
"3248","checkIsJavac","private static void checkIsJavac(DaggerProcessingEnv.Backend backend)","0","-","-","-","-"
"3249","checkIsKsp","private static void checkIsKsp(DaggerProcessingEnv.Backend backend)","0","-","-","-","-"
"3250","getBackend","private static DaggerProcessingEnv.Backend getBackend(XProcessingEnv env)","0","-","-","-","-"
"3251","create","static DiagnosticReporterImpl create(
        dagger.internal.codegen.model.DiagnosticReporter reporter)","0","-","-","-","-"
"3252","DiagnosticReporterImpl","DiagnosticReporterImpl(dagger.internal.codegen.model.DiagnosticReporter delegate)","0","-","-","-","-"
"3253","reportComponent","@Override
    public void reportComponent(
        Diagnostic.Kind diagnosticKind, ComponentNode componentNode, String message)","0","-","-","-","-"
"3254","reportBinding","@Override
    public void reportBinding(
        Diagnostic.Kind diagnosticKind, MaybeBinding binding, String message)","0","-","-","-","-"
"3255","reportDependency","@Override
    public void reportDependency(
        Diagnostic.Kind diagnosticKind, DependencyEdge dependencyEdge, String message)","0","-","-","-","-"
"3256","reportSubcomponentFactoryMethod","@Override
    public void reportSubcomponentFactoryMethod(
        Diagnostic.Kind diagnosticKind,
        ChildFactoryMethodEdge childFactoryMethodEdge,
        String message)","0","-","-","-","-"
"3257","ValidationReport","private ValidationReport(
      XElement subject,
      ImmutableSet<Item> items,
      ImmutableSet<ValidationReport> subreports,
      boolean markedDirty)","0","-","-","-","-"
"3258","allItems","/** Returns the items from this report and all transitive subreports. */
  public ImmutableSet<Item> allItems()","0","-","-","-","-"
"3259","isClean","/**
   * Returns","0","-","-","-","-"
"3260","printMessagesTo","/**
   * Prints all messages to","0","-","-","-","-"
"3261","message","public abstract String message();","0","-","-","-","-"
"3262","kind","public abstract Kind kind();","0","-","-","-","-"
"3263","element","public abstract XElement element();","0","-","-","-","-"
"3264","annotation","public abstract Optional<XAnnotation> annotation();","0","-","-","-","-"
"3265","annotationValue","abstract Optional<XAnnotationValue> annotationValue();","0","-","-","-","-"
"3266","about","public static Builder about(XElement subject)","0","-","-","-","-"
"3267","Builder","private Builder(XElement subject)","0","-","-","-","-"
"3268","addItems","@CanIgnoreReturnValue
    Builder addItems(Iterable<Item> newItems)","0","-","-","-","-"
"3269","addError","@CanIgnoreReturnValue
    public Builder addError(String message)","0","-","-","-","-"
"3270","addError","@CanIgnoreReturnValue
    public Builder addError(String message, XElement element)","0","-","-","-","-"
"3271","addError","@CanIgnoreReturnValue
    public Builder addError(String message, XElement element, XAnnotation annotation)","0","-","-","-","-"
"3272","addError","@CanIgnoreReturnValue
    public Builder addError(
        String message,
        XElement element,
        XAnnotation annotation,
        XAnnotationValue annotationValue)","0","-","-","-","-"
"3273","addWarning","@CanIgnoreReturnValue
    Builder addWarning(String message)","0","-","-","-","-"
"3274","addWarning","@CanIgnoreReturnValue
    Builder addWarning(String message, XElement element)","0","-","-","-","-"
"3275","addWarning","@CanIgnoreReturnValue
    Builder addWarning(String message, XElement element, XAnnotation annotation)","0","-","-","-","-"
"3276","addWarning","@CanIgnoreReturnValue
    Builder addWarning(
        String message,
        XElement element,
        XAnnotation annotation,
        XAnnotationValue annotationValue)","0","-","-","-","-"
"3277","addNote","@CanIgnoreReturnValue
    Builder addNote(String message)","0","-","-","-","-"
"3278","addNote","@CanIgnoreReturnValue
    Builder addNote(String message, XElement element)","0","-","-","-","-"
"3279","addNote","@CanIgnoreReturnValue
    Builder addNote(String message, XElement element, XAnnotation annotation)","0","-","-","-","-"
"3280","addNote","@CanIgnoreReturnValue
    Builder addNote(
        String message,
        XElement element,
        XAnnotation annotation,
        XAnnotationValue annotationValue)","0","-","-","-","-"
"3281","addItem","@CanIgnoreReturnValue
    Builder addItem(String message, Kind kind, XElement element)","0","-","-","-","-"
"3282","addItem","@CanIgnoreReturnValue
    Builder addItem(String message, Kind kind, XElement element, XAnnotation annotation)","0","-","-","-","-"
"3283","addItem","@CanIgnoreReturnValue
    Builder addItem(
        String message,
        Kind kind,
        XElement element,
        XAnnotation annotation,
        XAnnotationValue annotationValue)","0","-","-","-","-"
"3284","addItem","@CanIgnoreReturnValue
    private Builder addItem(
        String message,
        Kind kind,
        XElement element,
        Optional<XAnnotation> annotation,
        Optional<XAnnotationValue> annotationValue)","0","-","-","-","-"
"3285","markDirty","/**
     * If called, then","0","-","-","-","-"
"3286","addSubreport","@CanIgnoreReturnValue
    public Builder addSubreport(ValidationReport subreport)","0","-","-","-","-"
"3287","build","public ValidationReport build()","0","-","-","-","-"
"3288","ComponentHierarchyValidator","@Inject
  ComponentHierarchyValidator(
      CompilerOptions compilerOptions, InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"3289","validate","ValidationReport validate(ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"3290","validateSubcomponentMethods","private void validateSubcomponentMethods(
      ValidationReport.Builder report,
      ComponentDescriptor componentDescriptor,
      ImmutableMap<XTypeElement, XTypeElement> existingModuleToOwners)","0","-","-","-","-"
"3291","validateFactoryMethodParameters","private void validateFactoryMethodParameters(
      ValidationReport.Builder report,
      ComponentMethodDescriptor subcomponentMethodDescriptor,
      ImmutableMap<XTypeElement, XTypeElement> existingModuleToOwners)","0","-","-","-","-"
"3292","validateScopeHierarchy","/**
   * Checks that components do not have any scopes that are also applied on any of their ancestors.
   */
  private void validateScopeHierarchy(
      ValidationReport.Builder report,
      ComponentDescriptor subject,
      SetMultimap<ComponentDescriptor, Scope> scopesByComponent)","0","-","-","-","-"
"3293","validateProductionModuleUniqueness","private void validateProductionModuleUniqueness(
      ValidationReport.Builder report,
      ComponentDescriptor componentDescriptor,
      SetMultimap<ComponentDescriptor, ModuleDescriptor> producerModulesByComponent)","0","-","-","-","-"
"3294","validateRepeatedScopedDeclarations","private void validateRepeatedScopedDeclarations(
      ValidationReport.Builder report,
      ComponentDescriptor component,
      // TODO(ronshapiro): optimize ModuleDescriptor.hashCode()/equals. Otherwise this could be
      // quite costly
      SetMultimap<ComponentDescriptor, ModuleDescriptor> modulesWithScopes)","0","-","-","-","-"
"3295","hasScopedDeclarations","private boolean hasScopedDeclarations(ModuleDescriptor module)","0","-","-","-","-"
"3296","repeatedModulesWithScopeError","private String repeatedModulesWithScopeError(
      ComponentDescriptor component,
      ImmutableSetMultimap<ComponentDescriptor, ModuleDescriptor> repeatedModules)","0","-","-","-","-"
"3297","moduleScopes","private ImmutableSet<Scope> moduleScopes(ModuleDescriptor module)","0","-","-","-","-"
"3298","DiagnosticReporterFactory","@Inject
  DiagnosticReporterFactory(
      XMessager messager, DiagnosticMessageGenerator.Factory diagnosticMessageGeneratorFactory)","0","-","-","-","-"
"3299","reporter","/** Creates a reporter for a binding graph and a plugin. */
  DiagnosticReporterImpl reporter(BindingGraph graph, String pluginName)","0","-","-","-","-"
"3300","reporterWithErrorAsWarnings","/** Creates a reporter for a binding graph and a plugin that treats errors as warnings. */
  DiagnosticReporterImpl reporterWithErrorAsWarnings(BindingGraph graph, String pluginName)","0","-","-","-","-"
"3301","DiagnosticReporterImpl","DiagnosticReporterImpl(BindingGraph graph, String plugin, boolean reportErrorsAsWarnings)","0","-","-","-","-"
"3302","reportedDiagnosticKinds","/** Returns which","0","-","-","-","-"
"3303","reportComponent","@Override
    public void reportComponent(
        Diagnostic.Kind diagnosticKind, ComponentNode componentNode, String messageFormat)","0","-","-","-","-"
"3304","reportBinding","@Override
    public void reportBinding(
        Diagnostic.Kind diagnosticKind, MaybeBinding binding, String message)","0","-","-","-","-"
"3305","reportDependency","@Override
    public void reportDependency(
        Diagnostic.Kind diagnosticKind, DependencyEdge dependencyEdge, String message)","0","-","-","-","-"
"3306","reportSubcomponentFactoryMethod","@Override
    public void reportSubcomponentFactoryMethod(
        Diagnostic.Kind diagnosticKind,
        ChildFactoryMethodEdge childFactoryMethodEdge,
        String message)","0","-","-","-","-"
"3307","printMessage","private void printMessage(
        Diagnostic.Kind diagnosticKind,
        CharSequence message,
        @NullableDecl XElement elementToReport)","0","-","-","-","-"
"3308","appendBracketPrefix","private void appendBracketPrefix(StringBuilder message, String prefix)","0","-","-","-","-"
"3309","BindsMethodValidator","@Inject
  BindsMethodValidator(
      BindsTypeChecker bindsTypeChecker,
      DaggerSuperficialValidation superficialValidation,
      XProcessingEnv processingEnv,
      DependencyRequestValidator dependencyRequestValidator,
      InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"3310","elementValidator","@Override
  protected ElementValidator elementValidator(XMethodElement method)","0","-","-","-","-"
"3311","Validator","Validator(XMethodElement method)","0","-","-","-","-"
"3312","checkParameters","@Override
    protected void checkParameters()","0","-","-","-","-"
"3313","checkParameter","@Override
    protected void checkParameter(XVariableElement parameter)","0","-","-","-","-"
"3314","boxIfNecessary","private XType boxIfNecessary(XType maybePrimitive)","0","-","-","-","-"
"3315","Factory","@Inject
    Factory(
        DependencyRequestFormatter dependencyRequestFormatter,
        ElementFormatter elementFormatter)","0","-","-","-","-"
"3316","create","/** Creates a","0","-","-","-","-"
"3317","memoize","private static <K, V> Function<K, V> memoize(Function<K, V> uncached)","0","-","-","-","-"
"3318","DiagnosticMessageGenerator","private DiagnosticMessageGenerator(
      BindingGraph graph,
      DependencyRequestFormatter dependencyRequestFormatter,
      ElementFormatter elementFormatter)","0","-","-","-","-"
"3319","getMessage","public String getMessage(MaybeBinding binding)","0","-","-","-","-"
"3320","getMessage","public String getMessage(DependencyEdge dependencyEdge)","0","-","-","-","-"
"3321","getMessageInternal","private String getMessageInternal(
      ImmutableList<DependencyEdge> dependencyTrace,
      ImmutableSet<DependencyEdge> requests,
      ImmutableSet<DependencyEdge> entryPoints)","0","-","-","-","-"
"3322","getRequestsNotInTrace","public String getRequestsNotInTrace(
      ImmutableList<DependencyEdge> dependencyTrace,
      ImmutableSet<DependencyEdge> requests,
      ImmutableSet<DependencyEdge> entryPoints)","0","-","-","-","-"
"3323","appendComponentPathUnlessAtRoot","public void appendComponentPathUnlessAtRoot(StringBuilder message, Node node)","0","-","-","-","-"
"3324","format","@Override
        public String format(DependencyEdge object)","0","-","-","-","-"
"3325","isTracedRequest","private boolean isTracedRequest(
      ImmutableList<DependencyEdge> dependencyTrace, DependencyEdge request)","0","-","-","-","-"
"3326","dependencyTrace","/**
   * Returns the dependency trace from one of the","0","-","-","-","-"
"3327","requests","/** Returns all the nonsynthetic dependency requests for a binding. */
  public ImmutableSet<DependencyEdge> requests(MaybeBinding binding)","0","-","-","-","-"
"3328","rootComponentFirst","/**
   * Returns a comparator that sorts entry points in components whose paths from the root are
   * shorter first.
   */
  private Comparator<DependencyEdge> rootComponentFirst()","0","-","-","-","-"
"3329","shortestDependencyPathFirst","/**
   * Returns a comparator that puts entry points whose shortest dependency path to","0","-","-","-","-"
"3330","shortestPathFromEntryPoint","private ImmutableList<Node> shortestPathFromEntryPoint(
      DependencyEdge entryPoint, MaybeBinding binding)","0","-","-","-","-"
"3331","nearestComponentSupertypeFirst","/**
   * Returns a comparator that sorts entry points in by the distance of the type that declares them
   * from the type of the component that contains them.
   *
   * <p>For instance, an entry point declared directly in the component type would sort before one
   * declared in a direct supertype, which would sort before one declared in a supertype of a
   * supertype.
   */
  private Comparator<DependencyEdge> nearestComponentSupertypeFirst()","0","-","-","-","-"
"3332","componentContainingEntryPoint","private XTypeElement componentContainingEntryPoint(DependencyEdge entryPoint)","0","-","-","-","-"
"3333","typeDeclaringEntryPoint","private XTypeElement typeDeclaringEntryPoint(DependencyEdge entryPoint)","0","-","-","-","-"
"3334","requestEnclosingTypeName","/**
   * Returns a comparator that sorts dependency edges lexicographically by the qualified name of the
   * type that contains them. Only appropriate for edges with request elements.
   */
  private Comparator<DependencyEdge> requestEnclosingTypeName()","0","-","-","-","-"
"3335","requestElementDeclarationOrder","/**
   * Returns a comparator that sorts edges in the order in which their request elements were
   * declared in their declaring type.
   *
   * <p>Only useful to compare edges whose request elements were declared in the same type.
   */
  private Comparator<DependencyEdge> requestElementDeclarationOrder()","0","-","-","-","-"
"3336","source","private Node source(Edge edge)","0","-","-","-","-"
"3337","MembersInjectionValidator","@Inject
  MembersInjectionValidator(InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"3338","validateMembersInjectionRequest","/** Reports errors if a request for a","0","-","-","-","-"
"3339","validateMembersInjectionMethod","/**
   * Reports errors if a members injection method on a component is invalid.
   *
   * @throws IllegalArgumentException if the method doesn't have exactly one parameter
   */
  ValidationReport validateMembersInjectionMethod(
      XMethodElement method, XType membersInjectedType)","0","-","-","-","-"
"3340","checkQualifiers","private void checkQualifiers(ValidationReport.Builder report, XElement element)","0","-","-","-","-"
"3341","checkMembersInjectedType","private void checkMembersInjectedType(ValidationReport.Builder report, XType type)","0","-","-","-","-"
"3342","isResolvableTypeArgument","private boolean isResolvableTypeArgument(XType type)","0","-","-","-","-"
"3343","isResolvableArrayComponentType","private boolean isResolvableArrayComponentType(XType type)","0","-","-","-","-"
"3344","ModuleValidator","@Inject
  ModuleValidator(
      AnyBindingMethodValidator anyBindingMethodValidator,
      MethodSignatureFormatter methodSignatureFormatter,
      ComponentDescriptor.Factory componentDescriptorFactory,
      BindingGraphFactory bindingGraphFactory,
      BindingGraphValidator bindingGraphValidator,
      InjectionAnnotations injectionAnnotations,
      DaggerSuperficialValidation superficialValidation,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"3345","addKnownModules","/**
   * Adds","0","-","-","-","-"
"3346","validate","/** Returns a validation report for a module type. */
  public ValidationReport validate(XTypeElement module)","0","-","-","-","-"
"3347","validate","private ValidationReport validate(XTypeElement module, Set<XTypeElement> visitedModules)","0","-","-","-","-"
"3348","validateUncached","private ValidationReport validateUncached(XTypeElement module, Set<XTypeElement> visitedModules)","0","-","-","-","-"
"3349","validateDaggerAndroidProcessorRequirements","private void validateDaggerAndroidProcessorRequirements(
      XTypeElement module, ValidationReport.Builder builder)","0","-","-","-","-"
"3350","validateKotlinObjectDoesNotInheritInstanceBindingMethods","private void validateKotlinObjectDoesNotInheritInstanceBindingMethods(
      XTypeElement module, ModuleKind moduleKind, ValidationReport.Builder builder)","0","-","-","-","-"
"3351","validateReferencedSubcomponents","private void validateReferencedSubcomponents(
      XTypeElement subject, ModuleKind moduleKind, ValidationReport.Builder builder)","0","-","-","-","-"
"3352","moduleSubcomponentsIncludesNonSubcomponent","private static String moduleSubcomponentsIncludesNonSubcomponent(XTypeElement notSubcomponent)","0","-","-","-","-"
"3353","moduleSubcomponentsIncludesCreator","private String moduleSubcomponentsIncludesCreator(XTypeElement moduleSubcomponentsAttribute)","0","-","-","-","-"
"3354","validateSubcomponentHasBuilder","private void validateSubcomponentHasBuilder(
      XTypeElement subject,
      XTypeElement subcomponentAttribute,
      XAnnotation moduleAnnotation,
      ValidationReport.Builder builder)","0","-","-","-","-"
"3355","moduleSubcomponentsDoesntHaveCreator","private String moduleSubcomponentsDoesntHaveCreator(
      XTypeElement subcomponent, XAnnotation moduleAnnotation)","0","-","-","-","-"
"3356","ofMethod","static ModuleMethodKind ofMethod(XMethodElement moduleMethod)","0","-","-","-","-"
"3357","validateModifiers","private void validateModifiers(XTypeElement subject, ValidationReport.Builder builder)","0","-","-","-","-"
"3358","validateMethodsWithSameName","private void validateMethodsWithSameName(
      ValidationReport.Builder builder, ListMultimap<String, XMethodElement> bindingMethodsByName)","0","-","-","-","-"
"3359","validateReferencedModules","private void validateReferencedModules(
      XTypeElement subject,
      ModuleKind moduleKind,
      Set<XTypeElement> visitedModules,
      ValidationReport.Builder builder)","0","-","-","-","-"
"3360","validateReferencedModules","/**
   * Validates modules included in a given module or installed in a given component.
   *
   * <p>Checks that the referenced modules are non-generic types annotated with","0","-","-","-","-"
"3361","getModules","private static ImmutableList<XAnnotationValue> getModules(XAnnotation annotation)","0","-","-","-","-"
"3362","validateBindingMethodOverrides","private void validateBindingMethodOverrides(
      XTypeElement subject,
      ValidationReport.Builder builder,
      ImmutableListMultimap<String, XMethodElement> moduleMethodsByName,
      ImmutableListMultimap<String, XMethodElement> bindingMethodsByName)","0","-","-","-","-"
"3363","validateModuleVisibility","private void validateModuleVisibility(
      XTypeElement moduleElement, ModuleKind moduleKind, ValidationReport.Builder reportBuilder)","0","-","-","-","-"
"3364","getModuleIncludesWithInvalidVisibility","private ImmutableSet<XTypeElement> getModuleIncludesWithInvalidVisibility(
      XAnnotation moduleAnnotation)","0","-","-","-","-"
"3365","requiresModuleInstance","/**
   * Returns","0","-","-","-","-"
"3366","validateNoScopeAnnotationsOnModuleElement","private void validateNoScopeAnnotationsOnModuleElement(
      XTypeElement module, ModuleKind moduleKind, ValidationReport.Builder report)","0","-","-","-","-"
"3367","validateSelfCycles","private void validateSelfCycles(
      XTypeElement module, ModuleKind moduleKind, ValidationReport.Builder builder)","0","-","-","-","-"
"3368","validateCompanionModule","private void validateCompanionModule(
      XTypeElement companionModule, ValidationReport.Builder builder)","0","-","-","-","-"
"3369","validateModuleBindings","private void validateModuleBindings(XTypeElement module, ValidationReport.Builder report)","0","-","-","-","-"
"3370","formatListForErrorMessage","private static String formatListForErrorMessage(List<?> things)","0","-","-","-","-"
"3371","MultibindsMethodValidator","/** Creates a validator for","0","-","-","-","-"
"3372","elementValidator","@Override
  protected ElementValidator elementValidator(XMethodElement method)","0","-","-","-","-"
"3373","Validator","Validator(XMethodElement method)","0","-","-","-","-"
"3374","checkParameters","@Override
    protected void checkParameters()","0","-","-","-","-"
"3375","checkType","/** Adds an error unless the method returns a","0","-","-","-","-"
"3376","checkMapType","private void checkMapType(MapType mapType)","0","-","-","-","-"
"3377","checkSetType","private void checkSetType(SetType setType)","0","-","-","-","-"
"3378","AnyBindingMethodValidator","@Inject
  AnyBindingMethodValidator(ImmutableMap<XClassName, BindingMethodValidator> validators)","0","-","-","-","-"
"3379","clearCache","@Override
  public void clearCache()","0","-","-","-","-"
"3380","methodAnnotations","/** Returns the binding method annotations considered by this validator. */
  public ImmutableSet<XClassName> methodAnnotations()","0","-","-","-","-"
"3381","isBindingMethod","/**
   * Returns","0","-","-","-","-"
"3382","validate","/**
   * Returns a validation report for a method.
   *
   * <ul>
   *   <li>Reports an error if","0","-","-","-","-"
"3383","wasAlreadyValidated","/**
   * Returns","0","-","-","-","-"
"3384","validateUncached","private ValidationReport validateUncached(XMethodElement method)","0","-","-","-","-"
"3385","ModelBindingGraphConverter","private ModelBindingGraphConverter()","0","-","-","-","-"
"3386","toModel","/** Returns a","0","-","-","-","-"
"3387","toModel","/** Returns a","0","-","-","-","-"
"3388","toModel","private static ImmutableNetwork<Node, Edge> toModel(
      Network<
              dagger.internal.codegen.model.BindingGraph.Node,
              dagger.internal.codegen.model.BindingGraph.Edge>
          internalNetwork)","0","-","-","-","-"
"3389","toModel","private static Node toModel(dagger.internal.codegen.model.BindingGraph.Node node)","0","-","-","-","-"
"3390","toModel","private static Edge toModel(dagger.internal.codegen.model.BindingGraph.Edge edge)","0","-","-","-","-"
"3391","toModel","private static MultibindingContributionIdentifier toModel(
      dagger.internal.codegen.model.Key.MultibindingContributionIdentifier identifier)","0","-","-","-","-"
"3392","toModel","private static Key toModel(dagger.internal.codegen.model.Key key)","0","-","-","-","-"
"3393","toModel","private static BindingKind toModel(dagger.internal.codegen.model.BindingKind bindingKind)","0","-","-","-","-"
"3394","toModel","private static RequestKind toModel(dagger.internal.codegen.model.RequestKind requestKind)","0","-","-","-","-"
"3395","toModel","private static DependencyRequest toModel(
      dagger.internal.codegen.model.DependencyRequest request)","0","-","-","-","-"
"3396","toModel","private static Scope toModel(dagger.internal.codegen.model.Scope scope)","0","-","-","-","-"
"3397","toModel","private static ComponentPath toModel(dagger.internal.codegen.model.ComponentPath path)","0","-","-","-","-"
"3398","toInternal","private static dagger.internal.codegen.model.BindingGraph.ComponentNode toInternal(
      ComponentNode componentNode)","0","-","-","-","-"
"3399","toInternal","private static dagger.internal.codegen.model.BindingGraph.MaybeBinding toInternal(
      MaybeBinding maybeBinding)","0","-","-","-","-"
"3400","toInternal","private static dagger.internal.codegen.model.BindingGraph.DependencyEdge toInternal(
      DependencyEdge dependencyEdge)","0","-","-","-","-"
"3401","toInternal","private static dagger.internal.codegen.model.BindingGraph.ChildFactoryMethodEdge toInternal(
      ChildFactoryMethodEdge childFactoryMethodEdge)","0","-","-","-","-"
"3402","create","static ComponentNode create(
        dagger.internal.codegen.model.BindingGraph.ComponentNode componentNode)","0","-","-","-","-"
"3403","delegate","abstract dagger.internal.codegen.model.BindingGraph.ComponentNode delegate();","0","-","-","-","-"
"3404","toString","@Override
    public final String toString()","0","-","-","-","-"
"3405","create","static Binding create(dagger.internal.codegen.model.Binding binding)","0","-","-","-","-"
"3406","delegate","abstract dagger.internal.codegen.model.Binding delegate();","0","-","-","-","-"
"3407","toString","@Override
    public final String toString()","0","-","-","-","-"
"3408","create","static MissingBinding create(
        dagger.internal.codegen.model.BindingGraph.MissingBinding missingBinding)","0","-","-","-","-"
"3409","delegate","abstract dagger.internal.codegen.model.BindingGraph.MissingBinding delegate();","0","-","-","-","-"
"3410","hashCode","@Memoized
    @Override
    public abstract int hashCode();","0","-","-","-","-"
"3411","equals","@Override
    public abstract boolean equals(Object o);","0","-","-","-","-"
"3412","create","static DependencyEdge create(
        dagger.internal.codegen.model.BindingGraph.DependencyEdge dependencyEdge)","0","-","-","-","-"
"3413","delegate","abstract dagger.internal.codegen.model.BindingGraph.DependencyEdge delegate();","0","-","-","-","-"
"3414","toString","@Override
    public final String toString()","0","-","-","-","-"
"3415","create","static ChildFactoryMethodEdge create(
        dagger.internal.codegen.model.BindingGraph.ChildFactoryMethodEdge childFactoryMethodEdge)","0","-","-","-","-"
"3416","delegate","abstract dagger.internal.codegen.model.BindingGraph.ChildFactoryMethodEdge delegate();","0","-","-","-","-"
"3417","toString","@Override
    public final String toString()","0","-","-","-","-"
"3418","create","static SubcomponentCreatorBindingEdge create(
        dagger.internal.codegen.model.BindingGraph.SubcomponentCreatorBindingEdge
            subcomponentCreatorBindingEdge)","0","-","-","-","-"
"3419","delegate","abstract dagger.internal.codegen.model.BindingGraph.SubcomponentCreatorBindingEdge delegate();","0","-","-","-","-"
"3420","toString","@Override
    public final String toString()","0","-","-","-","-"
"3421","create","static BindingGraph create(dagger.internal.codegen.model.BindingGraph bindingGraph)","0","-","-","-","-"
"3422","componentNode","@Override
    public Optional<ComponentNode> componentNode(ComponentPath componentPath)","0","-","-","-","-"
"3423","nodesByClass","@Override
    @Memoized
    public ImmutableSetMultimap<Class<? extends Node>, ? extends Node> nodesByClass()","0","-","-","-","-"
"3424","create","static DiagnosticReporterImpl create(
        dagger.internal.codegen.model.DiagnosticReporter reporter)","0","-","-","-","-"
"3425","DiagnosticReporterImpl","DiagnosticReporterImpl(dagger.internal.codegen.model.DiagnosticReporter delegate)","0","-","-","-","-"
"3426","reportComponent","@Override
    public void reportComponent(
        Diagnostic.Kind diagnosticKind, ComponentNode componentNode, String message)","0","-","-","-","-"
"3427","reportComponent","@Override
    @FormatMethod
    public void reportComponent(
        Diagnostic.Kind diagnosticKind,
        ComponentNode componentNode,
        String messageFormat,
        Object firstArg,
        Object... moreArgs)","0","-","-","-","-"
"3428","reportBinding","@Override
    public void reportBinding(
        Diagnostic.Kind diagnosticKind, MaybeBinding binding, String message)","0","-","-","-","-"
"3429","reportBinding","@Override
    @FormatMethod
    public void reportBinding(
        Diagnostic.Kind diagnosticKind,
        MaybeBinding binding,
        String messageFormat,
        Object firstArg,
        Object... moreArgs)","0","-","-","-","-"
"3430","reportDependency","@Override
    public void reportDependency(
        Diagnostic.Kind diagnosticKind, DependencyEdge dependencyEdge, String message)","0","-","-","-","-"
"3431","reportDependency","@Override
    @FormatMethod
    public void reportDependency(
        Diagnostic.Kind diagnosticKind,
        DependencyEdge dependencyEdge,
        String messageFormat,
        Object firstArg,
        Object... moreArgs)","0","-","-","-","-"
"3432","reportSubcomponentFactoryMethod","@Override
    public void reportSubcomponentFactoryMethod(
        Diagnostic.Kind diagnosticKind,
        ChildFactoryMethodEdge childFactoryMethodEdge,
        String message)","0","-","-","-","-"
"3433","reportSubcomponentFactoryMethod","@Override
    @FormatMethod
    public void reportSubcomponentFactoryMethod(
        Diagnostic.Kind diagnosticKind,
        ChildFactoryMethodEdge childFactoryMethodEdge,
        String messageFormat,
        Object firstArg,
        Object... moreArgs)","0","-","-","-","-"
"3434","BindingsCollection","BindingsCollection(XClassName factoryClass)","0","-","-","-","-"
"3435","generateBindings","void generateBindings(SourceFileGenerator<B> generator)","0","-","-","-","-"
"3436","getBinding","/** Returns a previously cached binding. */
    B getBinding(Key key)","0","-","-","-","-"
"3437","tryRegisterBinding","/** Caches the binding and generates it if it needs generation. */
    void tryRegisterBinding(B binding, boolean isCalledFromInjectProcessor)","0","-","-","-","-"
"3438","tryToGenerateBinding","/**
     * Tries to generate a binding, not generating if it already is generated. For resolved
     * bindings, this will try to generate the unresolved version of the binding.
     */
    void tryToGenerateBinding(B binding, boolean isCalledFromInjectProcessor)","0","-","-","-","-"
"3439","shouldGenerateBinding","/** Returns true if the binding needs to be generated. */
    private boolean shouldGenerateBinding(B binding)","0","-","-","-","-"
"3440","tryToCacheBinding","/** Caches the binding for future lookups by key. */
    private void tryToCacheBinding(B binding)","0","-","-","-","-"
"3441","InjectBindingRegistryImpl","@Inject
  InjectBindingRegistryImpl(
      XProcessingEnv processingEnv,
      XMessager messager,
      InjectValidator injectValidator,
      KeyFactory keyFactory,
      BindingFactory bindingFactory,
      CompilerOptions compilerOptions)","0","-","-","-","-"
"3442","generateSourcesForRequiredBindings","@Override
  public void generateSourcesForRequiredBindings(
      SourceFileGenerator<ContributionBinding> factoryGenerator,
      SourceFileGenerator<MembersInjectionBinding> membersInjectorGenerator)","0","-","-","-","-"
"3443","tryRegisterInjectConstructor","@Override
  public Optional<ContributionBinding> tryRegisterInjectConstructor(
      XConstructorElement constructorElement)","0","-","-","-","-"
"3444","tryRegisterConstructor","@CanIgnoreReturnValue
  private Optional<ContributionBinding> tryRegisterConstructor(
      XConstructorElement constructorElement,
      Optional<XType> resolvedType,
      boolean isCalledFromInjectProcessor)","0","-","-","-","-"
"3445","tryRegisterInjectField","@Override
  public Optional<MembersInjectionBinding> tryRegisterInjectField(XFieldElement fieldElement)","0","-","-","-","-"
"3446","tryRegisterInjectMethod","@Override
  public Optional<MembersInjectionBinding> tryRegisterInjectMethod(XMethodElement methodElement)","0","-","-","-","-"
"3447","tryRegisterMembersInjectedType","@CanIgnoreReturnValue
  private Optional<MembersInjectionBinding> tryRegisterMembersInjectedType(
      XTypeElement typeElement,
      Optional<XType> resolvedType,
      boolean isCalledFromInjectProcessor)","0","-","-","-","-"
"3448","getOrFindInjectionBinding","@CanIgnoreReturnValue
  @Override
  public Optional<ContributionBinding> getOrFindInjectionBinding(Key key)","0","-","-","-","-"
"3449","getOrFindMembersInjectionBinding","@CanIgnoreReturnValue
  @Override
  public Optional<MembersInjectionBinding> getOrFindMembersInjectionBinding(Key key)","0","-","-","-","-"
"3450","getOrFindMembersInjectorBinding","@Override
  public Optional<MembersInjectorBinding> getOrFindMembersInjectorBinding(Key key)","0","-","-","-","-"
"3451","InjectValidator","@Inject
  InjectValidator(
      XProcessingEnv processingEnv,
      DependencyRequestValidator dependencyRequestValidator,
      CompilerOptions compilerOptions,
      InjectionAnnotations injectionAnnotations,
      DaggerSuperficialValidation superficialValidation,
      MethodSignatureFormatter methodSignatureFormatter)","0","-","-","-","-"
"3452","clearCache","@Override
  public void clearCache()","0","-","-","-","-"
"3453","validate","public ValidationReport validate(XTypeElement typeElement)","0","-","-","-","-"
"3454","validateForMembersInjection","public ValidationReport validateForMembersInjection(XTypeElement typeElement)","0","-","-","-","-"
"3455","validateWhenGeneratingCode","/**
   * Validates","0","-","-","-","-"
"3456","InternalValidator","InternalValidator(
        Diagnostic.Kind privateMemberDiagnosticKind, Diagnostic.Kind staticMemberDiagnosticKind)","0","-","-","-","-"
"3457","clearCache","void clearCache()","0","-","-","-","-"
"3458","validate","ValidationReport validate(XTypeElement typeElement)","0","-","-","-","-"
"3459","validateUncached","private ValidationReport validateUncached(XTypeElement typeElement)","0","-","-","-","-"
"3460","validateConstructor","private ValidationReport validateConstructor(XConstructorElement constructorElement)","0","-","-","-","-"
"3461","validateField","private ValidationReport validateField(XFieldElement fieldElement)","0","-","-","-","-"
"3462","validateMethod","private ValidationReport validateMethod(XMethodElement methodElement)","0","-","-","-","-"
"3463","validateDependencyRequest","private void validateDependencyRequest(
        ValidationReport.Builder builder, XVariableElement parameter)","0","-","-","-","-"
"3464","validateForMembersInjection","public ValidationReport validateForMembersInjection(XTypeElement typeElement)","0","-","-","-","-"
"3465","validateForMembersInjectionInternal","private ValidationReport validateForMembersInjectionInternal(XTypeElement typeElement)","0","-","-","-","-"
"3466","validateForMembersInjectionInternalUncached","private ValidationReport validateForMembersInjectionInternalUncached(XTypeElement typeElement)","0","-","-","-","-"
"3467","throwsCheckedExceptions","/** Returns true if the given method element declares a checked exception. */
    private boolean throwsCheckedExceptions(XConstructorElement constructorElement)","0","-","-","-","-"
"3468","checkInjectIntoPrivateClass","private void checkInjectIntoPrivateClass(XElement element, ValidationReport.Builder builder)","0","-","-","-","-"
"3469","checkInjectIntoKotlinObject","private void checkInjectIntoKotlinObject(
        XTypeElement element, ValidationReport.Builder builder)","0","-","-","-","-"
"3470","processedInPreviousRoundOrCompilationUnit","private boolean processedInPreviousRoundOrCompilationUnit(
        XConstructorElement injectConstructor)","0","-","-","-","-"
"3471","processedInPreviousRoundOrCompilationUnit","private boolean processedInPreviousRoundOrCompilationUnit(XTypeElement membersInjectedType)","0","-","-","-","-"
"3472","BindsInstanceMethodValidator","@Inject
  BindsInstanceMethodValidator(
      InjectionAnnotations injectionAnnotations,
      DaggerSuperficialValidation superficialValidation)","0","-","-","-","-"
"3473","elementValidator","@Override
  protected ElementValidator elementValidator(XMethodElement method)","0","-","-","-","-"
"3474","Validator","Validator(XMethodElement method)","0","-","-","-","-"
"3475","checkAdditionalProperties","@Override
    protected void checkAdditionalProperties()","0","-","-","-","-"
"3476","bindingElementType","@Override
    protected Optional<XType> bindingElementType()","0","-","-","-","-"
"3477","didYouMeanBinds","private static String didYouMeanBinds(ModuleAnnotation moduleAnnotation)","0","-","-","-","-"
"3478","BindingElementValidator","/** Creates a validator object. */
  // TODO(bcorso): Consider reworking BindingElementValidator and all subclasses to use composition
  // rather than inheritance. The web of inheritance makes it difficult to track what implementation
  // of a method is actually being used.
  protected BindingElementValidator(
      AllowsMultibindings allowsMultibindings,
      AllowsScoping allowsScoping,
      InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"3479","validate","/** Returns a","0","-","-","-","-"
"3480","validateUncached","private ValidationReport validateUncached(E element)","0","-","-","-","-"
"3481","bindingElements","/**
   * Returns an error message of the form ""&lt;","0","-","-","-","-"
"3482","bindingElements","/**
   * The kind of elements that this validator validates. Should be plural. Used for error reporting.
   */
  protected abstract String bindingElements();","0","-","-","-","-"
"3483","bindingElementTypeVerb","/** The verb describing the","0","-","-","-","-"
"3484","badTypeMessage","/** The error message when a binding element has a bad type. */
  protected String badTypeMessage()","0","-","-","-","-"
"3485","elementsIntoSetNotASetMessage","/**
   * The error message when a the type for a binding element with","0","-","-","-","-"
"3486","elementsIntoSetRawSetMessage","/**
   * The error message when a the type for a binding element with","0","-","-","-","-"
"3487","elementValidator","/*** Returns an","0","-","-","-","-"
"3488","ElementValidator","protected ElementValidator(E element)","0","-","-","-","-"
"3489","validate","/** Checks the element for validity. */
    private ValidationReport validate()","0","-","-","-","-"
"3490","checkAdditionalProperties","/** Check any additional properties of the element. Does nothing by default. */
    protected void checkAdditionalProperties()","0","-","-","-","-"
"3491","bindingElementType","/**
     * The type declared by this binding element. This may differ from a binding's","0","-","-","-","-"
"3492","checkType","/**
     * Adds an error if the","0","-","-","-","-"
"3493","checkKeyType","/**
     * Adds an error if","0","-","-","-","-"
"3494","checkAssistedType","/** Adds errors for unqualified assisted types. */
    private void checkAssistedType()","0","-","-","-","-"
"3495","checkSetValuesType","/**
     * Adds an error if the type for an element with","0","-","-","-","-"
"3496","checkSetValuesType","/** Adds an error if","0","-","-","-","-"
"3497","checkQualifiers","/**
     * Adds an error if the element has more than one","0","-","-","-","-"
"3498","checkMapKeys","/**
     * Adds an error if an","0","-","-","-","-"
"3499","checkMultibindingAnnotations","/**
     * Adds errors if:
     *
     * <ul>
     *   <li>the element doesn't allow","0","-","-","-","-"
"3500","checkScopes","/**
     * Adds an error if the element has a scope but doesn't allow scoping, or if it has more than
     * one","0","-","-","-","-"
"3501","checkFrameworkType","/**
     * Adds an error if the","0","-","-","-","-"
"3502","checkSetValueFrameworkType","private void checkSetValueFrameworkType(XType bindingType)","0","-","-","-","-"
"3503","checkMapValueFrameworkType","private void checkMapValueFrameworkType(XType bindingType)","0","-","-","-","-"
"3504","checkDisallowedType","private void checkDisallowedType(XType bindingType)","0","-","-","-","-"
"3505","allowsMultibindings","private boolean allowsMultibindings()","0","-","-","-","-"
"3506","ProvidesMethodValidator","@Inject
  ProvidesMethodValidator(
      XProcessingEnv processingEnv,
      DependencyRequestValidator dependencyRequestValidator,
      InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"3507","elementValidator","@Override
  protected ElementValidator elementValidator(XMethodElement method)","0","-","-","-","-"
"3508","Validator","Validator(XMethodElement method)","0","-","-","-","-"
"3509","checkParameter","/** Adds an error if a","0","-","-","-","-"
"3510","ValidationBindingGraphPlugins","@Inject
  ValidationBindingGraphPlugins(
      @Validation ImmutableSet<ValidationBindingGraphPlugin> plugins,
      DiagnosticReporterFactory diagnosticReporterFactory,
      XProcessingEnv processingEnv,
      CompilerOptions compilerOptions,
      @ProcessingOptions Map<String, String> processingOptions)","0","-","-","-","-"
"3511","allSupportedOptions","/** Returns","0","-","-","-","-"
"3512","initializePlugins","/** Initializes the plugins. */
  // TODO(ronshapiro): Should we validate the uniqueness of plugin names?
  public void initializePlugins()","0","-","-","-","-"
"3513","pluginOptions","/** Returns the filtered map of processing options supported by the given plugin. */
  private ImmutableMap<String, String> pluginOptions(BindingGraphPlugin plugin)","0","-","-","-","-"
"3514","visit","/** Returns","0","-","-","-","-"
"3515","createReporter","private DiagnosticReporterImpl createReporter(String pluginName, BindingGraph graph)","0","-","-","-","-"
"3516","endPlugins","public void endPlugins()","0","-","-","-","-"
"3517","BindingMethodValidator","/**
   * Creates a validator object.
   *
   * @param methodAnnotation the annotation on a method that identifies it as a binding method
   * @param enclosingElementAnnotation the method must be declared in a class or interface annotated
   *     with this annotation
   */
  protected BindingMethodValidator(
      XClassName methodAnnotation,
      XClassName enclosingElementAnnotation,
      Abstractness abstractness,
      ExceptionSuperclass exceptionSuperclass,
      AllowsMultibindings allowsMultibindings,
      AllowsScoping allowsScoping,
      XProcessingEnv processingEnv,
      DependencyRequestValidator dependencyRequestValidator,
      InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"3518","BindingMethodValidator","/**
   * Creates a validator object.
   *
   * @param methodAnnotation the annotation on a method that identifies it as a binding method
   * @param enclosingElementAnnotations the method must be declared in a class or interface
   *     annotated with one of these annotations
   */
  protected BindingMethodValidator(
      XClassName methodAnnotation,
      Iterable<XClassName> enclosingElementAnnotations,
      Abstractness abstractness,
      ExceptionSuperclass exceptionSuperclass,
      AllowsMultibindings allowsMultibindings,
      AllowsScoping allowsScoping,
      XProcessingEnv processingEnv,
      DependencyRequestValidator dependencyRequestValidator,
      InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"3519","methodAnnotation","/** The annotation that identifies binding methods validated by this object. */
  final XClassName methodAnnotation()","0","-","-","-","-"
"3520","bindingMethods","/**
   * Returns an error message of the form ""@<i>annotation</i> methods <i>rule</i>"", where
   * <i>rule</i> comes from calling","0","-","-","-","-"
"3521","bindingElements","@Override
  protected final String bindingElements()","0","-","-","-","-"
"3522","bindingElementTypeVerb","@Override
  protected final String bindingElementTypeVerb()","0","-","-","-","-"
"3523","MethodValidator","protected MethodValidator(XMethodElement method)","0","-","-","-","-"
"3524","bindingElementType","@Override
    protected final Optional<XType> bindingElementType()","0","-","-","-","-"
"3525","checkAdditionalProperties","@Override
    protected final void checkAdditionalProperties()","0","-","-","-","-"
"3526","checkAdditionalMethodProperties","/** Checks additional properties of the binding method. */
    protected void checkAdditionalMethodProperties()","0","-","-","-","-"
"3527","checkNotExtensionFunction","private void checkNotExtensionFunction()","0","-","-","-","-"
"3528","checkEnclosingElement","/**
     * Adds an error if the method is not declared in a class or interface annotated with one of the
     *","0","-","-","-","-"
"3529","checkTypeParameters","/** Adds an error if the method is generic. */
    private void checkTypeParameters()","0","-","-","-","-"
"3530","checkNotPrivate","/** Adds an error if the method is private. */
    private void checkNotPrivate()","0","-","-","-","-"
"3531","checkAbstractness","/** Adds an error if the method is abstract but must not be, or is not and must be. */
    private void checkAbstractness()","0","-","-","-","-"
"3532","checkThrows","/**
     * Adds an error if the method declares throws anything but an","0","-","-","-","-"
"3533","checkParameters","/** Adds errors for the method parameters. */
    protected void checkParameters()","0","-","-","-","-"
"3534","checkParameter","/**
     * Adds errors for a method parameter. This implementation reports an error if the parameter has
     * more than one qualifier.
     */
    protected void checkParameter(XVariableElement parameter)","0","-","-","-","-"
"3535","errorMessage","@Override
      protected String errorMessage(BindingMethodValidator validator)","0","-","-","-","-"
"3536","checkThrows","@Override
      protected void checkThrows(
          BindingMethodValidator validator,
          XExecutableElement element,
          ValidationReport.Builder report)","0","-","-","-","-"
"3537","errorMessage","@Override
      protected String errorMessage(BindingMethodValidator validator)","0","-","-","-","-"
"3538","errorMessage","@Override
      protected String errorMessage(BindingMethodValidator validator)","0","-","-","-","-"
"3539","ExceptionSuperclass","ExceptionSuperclass()","0","-","-","-","-"
"3540","ExceptionSuperclass","ExceptionSuperclass(XClassName superclass)","0","-","-","-","-"
"3541","checkThrows","/**
     * Adds an error if the method declares throws anything but an","0","-","-","-","-"
"3542","errorMessage","protected abstract String errorMessage(BindingMethodValidator validator);","0","-","-","-","-"
"3543","injectBindingRegistry","@Binds InjectBindingRegistry injectBindingRegistry(InjectBindingRegistryImpl impl);","0","-","-","-","-"
"3544","BindsInstanceParameterValidator","@Inject
  BindsInstanceParameterValidator(InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"3545","elementValidator","@Override
  protected ElementValidator elementValidator(XExecutableParameterElement parameter)","0","-","-","-","-"
"3546","Validator","Validator(XExecutableParameterElement parameter)","0","-","-","-","-"
"3547","checkAdditionalProperties","@Override
    protected void checkAdditionalProperties()","0","-","-","-","-"
"3548","bindingElementType","@Override
    protected Optional<XType> bindingElementType()","0","-","-","-","-"
"3549","ComponentDescriptorValidator","@Inject
  ComponentDescriptorValidator(
      CompilerOptions compilerOptions,
      MethodSignatureFormatter methodSignatureFormatter,
      ComponentHierarchyValidator componentHierarchyValidator,
      InjectionAnnotations injectionAnnotations,
      DaggerSuperficialValidation superficialValidation)","0","-","-","-","-"
"3550","validate","public ValidationReport validate(ComponentDescriptor component)","0","-","-","-","-"
"3551","ComponentValidation","ComponentValidation(ComponentDescriptor rootComponent)","0","-","-","-","-"
"3552","buildReport","/** Returns a report that contains all validation messages found during traversal. */
    ValidationReport buildReport()","0","-","-","-","-"
"3553","report","/** Returns the report builder for a (sub)component. */
    private ValidationReport.Builder report(ComponentDescriptor component)","0","-","-","-","-"
"3554","reportComponentItem","private void reportComponentItem(
        Diagnostic.Kind kind, ComponentDescriptor component, String message)","0","-","-","-","-"
"3555","reportComponentError","private void reportComponentError(ComponentDescriptor component, String error)","0","-","-","-","-"
"3556","visitComponent","void visitComponent(ComponentDescriptor component)","0","-","-","-","-"
"3557","validateComponentDependencyHierarchy","/** Validates that component dependencies do not form a cycle. */
    private void validateComponentDependencyHierarchy(ComponentDescriptor component)","0","-","-","-","-"
"3558","validateComponentDependencyHierarchy","/** Recursive method to validate that component dependencies do not form a cycle. */
    private void validateComponentDependencyHierarchy(
        ComponentDescriptor component,
        XTypeElement dependency,
        Deque<XTypeElement> dependencyStack)","0","-","-","-","-"
"3559","validateDependencyScopes","/**
     * Validates that among the dependencies there are no cycles within the scoping chain, and that
     * singleton components have no scoped dependencies.
     */
    private void validateDependencyScopes(ComponentDescriptor component)","0","-","-","-","-"
"3560","validateModules","private void validateModules(ComponentDescriptor component)","0","-","-","-","-"
"3561","abstractModuleHasInstanceBindingMethodsError","private String abstractModuleHasInstanceBindingMethodsError(ModuleDescriptor module)","0","-","-","-","-"
"3562","validateCreators","private void validateCreators(ComponentDescriptor component)","0","-","-","-","-"
"3563","formatElement","private String formatElement(XElement element, XType container)","0","-","-","-","-"
"3564","formatParameter","private String formatParameter(XExecutableParameterElement parameter, XType container)","0","-","-","-","-"
"3565","resolveParameterType","private XType resolveParameterType(XExecutableParameterElement parameter, XType container)","0","-","-","-","-"
"3566","validateDependencyScopeHierarchy","/**
     * Validates that scopes do not participate in a scoping cycle - that is to say, scoped
     * components are in a hierarchical relationship terminating with Singleton.
     *
     * <p>As a side-effect, this means scoped components cannot have a dependency cycle between
     * themselves, since a component's presence within its own dependency path implies a cyclical
     * relationship between scopes. However, cycles in component dependencies are explicitly checked
     * in","0","-","-","-","-"
"3567","stackOverlaps","private <T> boolean stackOverlaps(Deque<ImmutableSet<T>> stack, ImmutableSet<T> set)","0","-","-","-","-"
"3568","appendIndentedComponentsList","/** Appends and formats a list of indented component types (with their scope annotations). */
    private void appendIndentedComponentsList(StringBuilder message, Iterable<XTypeElement> types)","0","-","-","-","-"
"3569","scopedTypesIn","/**
     * Returns a set of type elements containing only those found in the input set that have a
     * scoping annotation.
     */
    private ImmutableSet<XTypeElement> scopedTypesIn(Collection<XTypeElement> types)","0","-","-","-","-"
"3570","BindsOptionalOfMethodValidator","@Inject
  BindsOptionalOfMethodValidator(
      XProcessingEnv processingEnv,
      DependencyRequestValidator dependencyRequestValidator,
      InjectionAnnotations injectionAnnotations)","0","-","-","-","-"
"3571","elementValidator","@Override
  protected ElementValidator elementValidator(XMethodElement method)","0","-","-","-","-"
"3572","Validator","Validator(XMethodElement method)","0","-","-","-","-"
"3573","checkKeyType","@Override
    protected void checkKeyType(XType keyType)","0","-","-","-","-"
"3574","checkParameters","@Override
    protected void checkParameters()","0","-","-","-","-"
"3575","DependencyRequestValidator","@Inject
  DependencyRequestValidator(
      XProcessingEnv processingEnv,
      MembersInjectionValidator membersInjectionValidator,
      InjectionAnnotations injectionAnnotations,
      KotlinMetadataUtil metadataUtil)","0","-","-","-","-"
"3576","validateDependencyRequest","/**
   * Adds an error if the given dependency request has more than one qualifier annotation or is a
   * non-instance request with a wildcard type.
   */
  void validateDependencyRequest(
      ValidationReport.Builder report, XElement requestElement, XType requestType)","0","-","-","-","-"
"3577","missingQualifierMetadata","/**
   * Returns","0","-","-","-","-"
"3578","Validator","Validator(ValidationReport.Builder report, XElement requestElement, XType requestType)","0","-","-","-","-"
"3579","validate","void validate()","0","-","-","-","-"
"3580","checkQualifiers","private void checkQualifiers()","0","-","-","-","-"
"3581","checkType","private void checkType()","0","-","-","-","-"
"3582","checkNotProducer","/**
   * Adds an error if the given dependency request is for a","0","-","-","-","-"
"3583","visitFullGraphRequested","public final boolean visitFullGraphRequested(BindingGraph graph)","0","-","-","-","-"
"3584","requestVisitFullGraph","/**
   * Request revisit full binding graph for the given pruned graph.
   *
   * <p>If called from revisitFullGraph then no-op.
   */
  public final void requestVisitFullGraph(BindingGraph graph)","0","-","-","-","-"
"3585","revisitFullGraph","public void revisitFullGraph(
      BindingGraph prunedGraph, BindingGraph fullGraph, DiagnosticReporter diagReporter)","0","-","-","-","-"
"3586","BindingGraphValidator","@Inject
  BindingGraphValidator(
      ValidationBindingGraphPlugins validationPlugins,
      ExternalBindingGraphPlugins externalPlugins,
      CompilerOptions compilerOptions)","0","-","-","-","-"
"3587","shouldDoFullBindingGraphValidation","/** Returns","0","-","-","-","-"
"3588","requiresFullBindingGraphValidation","private boolean requiresFullBindingGraphValidation()","0","-","-","-","-"
"3589","isValid","/** Returns","0","-","-","-","-"
"3590","isValid","public boolean isValid(BindingGraph prunedGraph, Supplier<BindingGraph> fullGraphSupplier)","0","-","-","-","-"
"3591","visitValidationPlugins","/** Returns","0","-","-","-","-"
"3592","visitExternalPlugins","/** Returns","0","-","-","-","-"
"3593","ComponentCreatorValidator","@Inject
  ComponentCreatorValidator(
      MethodSignatureFormatter methodSignatureFormatter, KotlinMetadataUtil metadataUtil)","0","-","-","-","-"
"3594","clearCache","@Override
  public void clearCache()","0","-","-","-","-"
"3595","validate","/** Validates that the given","0","-","-","-","-"
"3596","validateUncached","private ValidationReport validateUncached(XTypeElement type)","0","-","-","-","-"
"3597","validateOnlyOneCreatorAnnotation","private boolean validateOnlyOneCreatorAnnotation(
      ImmutableSet<ComponentCreatorAnnotation> creatorAnnotations,
      ValidationReport.Builder report)","0","-","-","-","-"
"3598","ElementValidator","private ElementValidator(
        XTypeElement creator,
        ValidationReport.Builder report,
        ComponentCreatorAnnotation annotation)","0","-","-","-","-"
"3599","validate","/** Validates the creator type. */
    final ValidationReport validate()","0","-","-","-","-"
"3600","validateIsClassOrInterface","/** Validates that the type is a class or interface type and returns true if it is. */
    private boolean validateIsClassOrInterface()","0","-","-","-","-"
"3601","validateConstructor","private void validateConstructor()","0","-","-","-","-"
"3602","validateTypeRequirements","/** Validates basic requirements about the type that are common to both creator kinds. */
    private boolean validateTypeRequirements()","0","-","-","-","-"
"3603","validateBuilder","private void validateBuilder()","0","-","-","-","-"
"3604","validateClassMethodName","private void validateClassMethodName()","0","-","-","-","-"
"3605","validateSetterMethod","private void validateSetterMethod(XMethodElement method)","0","-","-","-","-"
"3606","validateFactory","private void validateFactory()","0","-","-","-","-"
"3607","validateFactoryMethod","/** Validates that the given","0","-","-","-","-"
"3608","validateFactoryMethodReturnType","/**
     * Validates that the factory method that actually returns a new component instance. Returns
     * true if the return type was valid.
     */
    private boolean validateFactoryMethodReturnType(XMethodElement method)","0","-","-","-","-"
"3609","error","/**
     * Generates one of two error messages. If the method is enclosed in the subject, we target the
     * error to the method itself. Otherwise we target the error to the subject and list the method
     * as an argument. (Otherwise we have no way of knowing if the method is being compiled in this
     * pass too, so javac might not be able to pinpoint it's line of code.)
     */
    /*
     * For Component.Builder, the prototypical example would be if someone had:
     *    libfoo: interface SharedBuilder","0","-","-","-","-"
"3610","validateNotGeneric","/** Validates that the given","0","-","-","-","-"
"3611","isTypePubliclyAccessible","/** Returns true if the given type can be referenced from any package. */
  public static boolean isTypePubliclyAccessible(XType type)","0","-","-","-","-"
"3612","isTypeAccessibleFrom","/** Returns true if the given type can be referenced from code in the given package. */
  public static boolean isTypeAccessibleFrom(XType type, String packageName)","0","-","-","-","-"
"3613","isTypeAccessibleFrom","private static boolean isTypeAccessibleFrom(XType type, Optional<String> packageName)","0","-","-","-","-"
"3614","isElementPubliclyAccessible","/** Returns true if the given element can be referenced from any package. */
  public static boolean isElementPubliclyAccessible(XElement element)","0","-","-","-","-"
"3615","isElementAccessibleFromOwnPackage","/** Returns true if the given element can be referenced from other code in its own package. */
  public static boolean isElementAccessibleFromOwnPackage(XElement element)","0","-","-","-","-"
"3616","isElementAccessibleFrom","/** Returns true if the given element can be referenced from code in the given package. */
  // TODO(gak): account for protected
  // TODO(bcorso): account for kotlin srcs (package-private doesn't exist, internal does exist).
  public static boolean isElementAccessibleFrom(XElement element, String packageName)","0","-","-","-","-"
"3617","isElementAccessibleFrom","private static boolean isElementAccessibleFrom(XElement element, Optional<String> packageName)","0","-","-","-","-"
"3618","accessibleMember","private static boolean accessibleMember(XElement element, Optional<String> packageName)","0","-","-","-","-"
"3619","accessibleModifiers","private static boolean accessibleModifiers(XElement element, Optional<String> packageName)","0","-","-","-","-"
"3620","isRawTypeAccessible","/** Returns true if the raw type of","0","-","-","-","-"
"3621","isRawTypePubliclyAccessible","/** Returns true if the raw type of","0","-","-","-","-"
"3622","accessibleTypeName","/**
   * Returns an accessible type in","0","-","-","-","-"
"3623","Accessibility","private Accessibility()","0","-","-","-","-"
"3624","ImmediateFutureRequestRepresentation","@AssistedInject
  ImmediateFutureRequestRepresentation(
      @Assisted RequestRepresentation instanceRequestRepresentation,
      @Assisted XType type,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"3625","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"3626","instanceExpression","private XCodeBlock instanceExpression(XClassName requestingClass)","0","-","-","-","-"
"3627","create","ImmediateFutureRequestRepresentation create(
        RequestRepresentation instanceRequestRepresentation, XType type);","0","-","-","-","-"
"3628","ProducerFromProviderCreationExpression","@AssistedInject
  ProducerFromProviderCreationExpression(
      @Assisted RequestRepresentation providerRequestRepresentation,
      @Assisted XClassName requestingClass)","0","-","-","-","-"
"3629","creationExpression","@Override
  public XCodeBlock creationExpression()","0","-","-","-","-"
"3630","alternativeFrameworkClass","@Override
  public Optional<XClassName> alternativeFrameworkClass()","0","-","-","-","-"
"3631","create","ProducerFromProviderCreationExpression create(
        RequestRepresentation providerRequestRepresentation, XClassName requestingClass);","0","-","-","-","-"
"3632","UnscopedFrameworkInstanceCreationExpressionFactory","@Inject
  UnscopedFrameworkInstanceCreationExpressionFactory(
      ComponentImplementation componentImplementation,
      ComponentRequirementExpressions componentRequirementExpressions,
      AnonymousProviderCreationExpression.Factory anonymousProviderCreationExpressionFactory,
      DelegatingFrameworkInstanceCreationExpression.Factory
          delegatingFrameworkInstanceCreationExpressionFactory,
      DependencyMethodProducerCreationExpression.Factory
          dependencyMethodProducerCreationExpressionFactory,
      DependencyMethodProviderCreationExpression.Factory
          dependencyMethodProviderCreationExpressionFactory,
      InjectionOrProvisionProviderCreationExpression.Factory
          injectionOrProvisionProviderCreationExpressionFactory,
      MapFactoryCreationExpression.Factory mapFactoryCreationExpressionFactory,
      MembersInjectorProviderCreationExpression.Factory
          membersInjectorProviderCreationExpressionFactory,
      OptionalFactoryInstanceCreationExpression.Factory
          optionalFactoryInstanceCreationExpressionFactory,
      ProducerCreationExpression.Factory producerCreationExpressionFactory,
      SetFactoryCreationExpression.Factory setFactoryCreationExpressionFactory)","0","-","-","-","-"
"3633","create","/**
   * Returns an unscoped creation expression for a","0","-","-","-","-"
"3634","instanceFactoryCreationExpression","private InstanceFactoryCreationExpression instanceFactoryCreationExpression(
      ContributionBinding binding, ComponentRequirement componentRequirement)","0","-","-","-","-"
"3635","ProviderInstanceSupplier","@AssistedInject
  ProviderInstanceSupplier(
      @Assisted ContributionBinding binding,
      ComponentImplementation componentImplementation,
      UnscopedFrameworkInstanceCreationExpressionFactory
          unscopedFrameworkInstanceCreationExpressionFactory,
      BindingRepresentations bindingRepresentations)","0","-","-","-","-"
"3636","memberSelect","@Override
  public MemberSelect memberSelect()","0","-","-","-","-"
"3637","create","ProviderInstanceSupplier create(ContributionBinding binding);","0","-","-","-","-"
"3638","SwitchingProviders","SwitchingProviders(ShardImplementation shardImplementation, XProcessingEnv processingEnv)","0","-","-","-","-"
"3639","newFrameworkInstanceCreationExpression","/** Returns the framework instance creation expression for an inner switching provider class. */
  FrameworkInstanceCreationExpression newFrameworkInstanceCreationExpression(
      ContributionBinding binding, RequestRepresentation unscopedInstanceRequestRepresentation)","0","-","-","-","-"
"3640","creationExpression","@Override
      public XCodeBlock creationExpression()","0","-","-","-","-"
"3641","getSwitchingProviderBuilder","private SwitchingProviderBuilder getSwitchingProviderBuilder()","0","-","-","-","-"
"3642","SwitchingProviderBuilder","SwitchingProviderBuilder(XClassName switchingProviderType)","0","-","-","-","-"
"3643","getNewInstanceCodeBlock","private XCodeBlock getNewInstanceCodeBlock(
        ContributionBinding binding, RequestRepresentation unscopedInstanceRequestRepresentation)","0","-","-","-","-"
"3644","createSwitchCaseCodeBlock","private XCodeBlock createSwitchCaseCodeBlock(
        Key key, RequestRepresentation unscopedInstanceRequestRepresentation)","0","-","-","-","-"
"3645","build","private XTypeSpec build()","0","-","-","-","-"
"3646","getMethods","private ImmutableList<XFunSpec> getMethods()","0","-","-","-","-"
"3647","switchCodeBlockPartitions","private ImmutableList<XCodeBlock> switchCodeBlockPartitions()","0","-","-","-","-"
"3648","MapRequestRepresentation","@AssistedInject
  MapRequestRepresentation(
      @Assisted MultiboundMapBinding binding,
      XProcessingEnv processingEnv,
      BindingGraph graph,
      ComponentImplementation componentImplementation,
      ComponentRequestRepresentations componentRequestRepresentations)","0","-","-","-","-"
"3649","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"3650","getUnderlyingMapExpression","private XExpression getUnderlyingMapExpression(XClassName requestingClass)","0","-","-","-","-"
"3651","immutableMapType","private XType immutableMapType()","0","-","-","-","-"
"3652","keyAndValueExpression","private XCodeBlock keyAndValueExpression(
      DependencyRequest dependency, XClassName requestingClass)","0","-","-","-","-"
"3653","collectionsStaticFactoryInvocation","private XExpression collectionsStaticFactoryInvocation(
      XClassName requestingClass, XCodeBlock methodInvocation)","0","-","-","-","-"
"3654","maybeTypeParameters","private XCodeBlock maybeTypeParameters(XClassName requestingClass)","0","-","-","-","-"
"3655","isImmutableMapBuilderWithExpectedSizeAvailable","private boolean isImmutableMapBuilderWithExpectedSizeAvailable()","0","-","-","-","-"
"3656","isImmutableMapAvailable","private boolean isImmutableMapAvailable()","0","-","-","-","-"
"3657","create","MapRequestRepresentation create(MultiboundMapBinding binding);","0","-","-","-","-"
"3658","ComponentMethodRequestRepresentation","@AssistedInject
  ComponentMethodRequestRepresentation(
      @Assisted RequestRepresentation wrappedRequestRepresentation,
      @Assisted ComponentMethodDescriptor componentMethod,
      ComponentImplementation componentImplementation,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"3659","getDependencyExpressionForComponentMethod","@Override
  protected XExpression getDependencyExpressionForComponentMethod(
      ComponentMethodDescriptor componentMethod, ComponentImplementation component)","0","-","-","-","-"
"3660","methodCall","@Override
  protected XCodeBlock methodCall()","0","-","-","-","-"
"3661","returnType","@Override
  protected XExpressionType returnType()","0","-","-","-","-"
"3662","create","ComponentMethodRequestRepresentation create(
        RequestRepresentation wrappedRequestRepresentation,
        ComponentMethodDescriptor componentMethod);","0","-","-","-","-"
"3663","AnnotationCreatorGenerator","@Inject
  AnnotationCreatorGenerator(XFiler filer, XProcessingEnv processingEnv)","0","-","-","-","-"
"3664","originatingElement","@Override
  public XElement originatingElement(XTypeElement annotationType)","0","-","-","-","-"
"3665","topLevelTypes","@Override
  public ImmutableList<XTypeSpec> topLevelTypes(XTypeElement annotationType)","0","-","-","-","-"
"3666","buildCreateMethod","private XFunSpec buildCreateMethod(XClassName generatedTypeName, XTypeElement annotationElement)","0","-","-","-","-"
"3667","annotationsToCreate","/**
   * Returns the annotation types for which","0","-","-","-","-"
"3668","nestedAnnotationElements","@CanIgnoreReturnValue
  private static Set<XTypeElement> nestedAnnotationElements(
      XTypeElement annotationElement, Set<XTypeElement> annotationElements)","0","-","-","-","-"
"3669","maybeRewrapKClass","private XType maybeRewrapKClass(XType type)","0","-","-","-","-"
"3670","getTopLevelClassName","/** Returns the class name for the top-level generated class. */
  public static XClassName getTopLevelClassName(ComponentDescriptor componentDescriptor)","0","-","-","-","-"
"3671","ComponentNames","@Inject
  ComponentNames(
      CompilerOptions compilerOptions, @TopLevel BindingGraph graph, KeyFactory keyFactory)","0","-","-","-","-"
"3672","get","/** Returns the simple component name for the given","0","-","-","-","-"
"3673","getSubcomponentCreatorName","/**
   * Returns the component descriptor for the component with the given subcomponent creator","0","-","-","-","-"
"3674","getCreatorName","/**
   * Returns the simple name for the subcomponent creator implementation for the given","0","-","-","-","-"
"3675","creatorNamesByPath","private static ImmutableMap<ComponentPath, String> creatorNamesByPath(
      ImmutableMap<ComponentPath, String> namesByPath, BindingGraph graph)","0","-","-","-","-"
"3676","namesByPath","private static ImmutableMap<ComponentPath, String> namesByPath(BindingGraph graph)","0","-","-","-","-"
"3677","pathsByCreatorKey","private static ImmutableMultimap<Key, ComponentPath> pathsByCreatorKey(
      KeyFactory keyFactory, BindingGraph graph)","0","-","-","-","-"
"3678","disambiguateConflictingSimpleNames","private static ImmutableMap<ComponentPath, String> disambiguateConflictingSimpleNames(
      Collection<ComponentPath> componentsWithConflictingNames)","0","-","-","-","-"
"3679","simpleName","private static String simpleName(ComponentPath componentPath)","0","-","-","-","-"
"3680","uniquingPrefix","/** Returns a prefix that could make the component's simple name more unique. */
  private static String uniquingPrefix(ComponentPath componentPath)","0","-","-","-","-"
"3681","MapFactoryCreationExpression","@AssistedInject
  MapFactoryCreationExpression(
      @Assisted MultiboundMapBinding binding,
      XProcessingEnv processingEnv,
      ComponentImplementation componentImplementation,
      ComponentRequestRepresentations componentRequestRepresentations,
      BindingGraph graph)","0","-","-","-","-"
"3682","creationExpression","@Override
  public XCodeBlock creationExpression()","0","-","-","-","-"
"3683","lazyMapFactoryClassName","private static XClassName lazyMapFactoryClassName(MultiboundMapBinding binding)","0","-","-","-","-"
"3684","create","MapFactoryCreationExpression create(MultiboundMapBinding binding);","0","-","-","-","-"
"3685","DelegatingFrameworkInstanceCreationExpression","@AssistedInject
  DelegatingFrameworkInstanceCreationExpression(
      @Assisted DelegateBinding binding,
      ComponentImplementation componentImplementation,
      ComponentRequestRepresentations componentRequestRepresentations,
      CompilerOptions compilerOptions)","0","-","-","-","-"
"3686","creationExpression","@Override
  public XCodeBlock creationExpression()","0","-","-","-","-"
"3687","create","DelegatingFrameworkInstanceCreationExpression create(DelegateBinding binding);","0","-","-","-","-"
"3688","ComponentWrapperImplementation","@Inject
  ComponentWrapperImplementation(@TopLevel BindingGraph graph)","0","-","-","-","-"
"3689","name","@Override
  public XClassName name()","0","-","-","-","-"
"3690","getUniqueClassName","@Override
  public String getUniqueClassName(String name)","0","-","-","-","-"
"3691","addField","@Override
  public void addField(FieldSpecKind fieldKind, FieldSpec fieldSpec)","0","-","-","-","-"
"3692","addMethod","@Override
  public void addMethod(MethodSpecKind methodKind, XFunSpec methodSpec)","0","-","-","-","-"
"3693","addType","@Override
  public void addType(TypeSpecKind typeKind, XTypeSpec typeSpec)","0","-","-","-","-"
"3694","addTypeSupplier","@Override
  public void addTypeSupplier(Supplier<XTypeSpec> typeSpecSupplier)","0","-","-","-","-"
"3695","generate","@Override
  public XTypeSpec generate()","0","-","-","-","-"
"3696","MembersInjectorGenerator","@Inject
  MembersInjectorGenerator(
      XFiler filer,
      SourceFiles sourceFiles,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"3697","originatingElement","@Override
  public XElement originatingElement(MembersInjectionBinding binding)","0","-","-","-","-"
"3698","topLevelTypes","@Override
  public ImmutableList<XTypeSpec> topLevelTypes(MembersInjectionBinding binding)","0","-","-","-","-"
"3699","membersInjectionMethod","private static XFunSpec membersInjectionMethod(InjectionSite injectionSite)","0","-","-","-","-"
"3700","methodInjectionMethod","private static XFunSpec methodInjectionMethod(XMethodElement method, String methodName)","0","-","-","-","-"
"3701","fieldInjectionMethod","private static XFunSpec fieldInjectionMethod(
      XFieldElement field, String methodName, Optional<XAnnotation> qualifier)","0","-","-","-","-"
"3702","copyInstance","private static XCodeBlock copyInstance(
      XFunSpecs.Builder methodBuilder, UniqueNameSet parameterNameSet, XType type)","0","-","-","-","-"
"3703","constructor","private XFunSpec constructor(ImmutableMap<DependencyRequest, XPropertySpec> frameworkFields)","0","-","-","-","-"
"3704","createMethod","private XFunSpec createMethod(
      MembersInjectionBinding binding,
      ImmutableMap<DependencyRequest, XPropertySpec> frameworkFields)","0","-","-","-","-"
"3705","injectMembersMethod","private XFunSpec injectMembersMethod(
      MembersInjectionBinding binding,
      ImmutableMap<DependencyRequest, XPropertySpec> frameworkFields)","0","-","-","-","-"
"3706","qualifierMetadataAnnotation","private XAnnotationSpec qualifierMetadataAnnotation(MembersInjectionBinding binding)","0","-","-","-","-"
"3707","frameworkFields","private static ImmutableMap<DependencyRequest, XPropertySpec> frameworkFields(
      MembersInjectionBinding binding)","0","-","-","-","-"
"3708","SimpleMethodRequestRepresentation","@AssistedInject
  SimpleMethodRequestRepresentation(
      @Assisted ContributionBinding binding,
      MembersInjectionMethods membersInjectionMethods,
      CompilerOptions compilerOptions,
      XProcessingEnv processingEnv,
      ComponentRequestRepresentations componentRequestRepresentations,
      ComponentRequirementExpressions componentRequirementExpressions,
      ComponentImplementation componentImplementation)","0","-","-","-","-"
"3709","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"3710","invokeMethod","private XExpression invokeMethod(XClassName requestingClass)","0","-","-","-","-"
"3711","constructorTypeName","private XTypeName constructorTypeName(XClassName requestingClass)","0","-","-","-","-"
"3712","invokeInjectionMethod","private XExpression invokeInjectionMethod(XClassName requestingClass)","0","-","-","-","-"
"3713","dependencyArgument","private XExpression dependencyArgument(DependencyRequest dependency, XClassName requestingClass)","0","-","-","-","-"
"3714","injectMembers","private XExpression injectMembers(XCodeBlock instance, XClassName requestingClass)","0","-","-","-","-"
"3715","moduleReference","private Optional<XCodeBlock> moduleReference(XClassName requestingClass)","0","-","-","-","-"
"3716","simpleMethodReturnType","private XType simpleMethodReturnType()","0","-","-","-","-"
"3717","requiresInjectionMethod","private boolean requiresInjectionMethod(XClassName requestingClass)","0","-","-","-","-"
"3718","hasInjectionSites","private static boolean hasInjectionSites(ContributionBinding binding)","0","-","-","-","-"
"3719","create","SimpleMethodRequestRepresentation create(ContributionBinding binding);","0","-","-","-","-"
"3720","ProductionBindingRepresentation","@AssistedInject
  ProductionBindingRepresentation(
      @Assisted ContributionBinding binding,
      ComponentImplementation componentImplementation,
      DerivedFromFrameworkInstanceRequestRepresentation.Factory
          derivedFromFrameworkInstanceRequestRepresentationFactory,
      ProducerNodeInstanceRequestRepresentation.Factory
          producerNodeInstanceRequestRepresentationFactory,
      UnscopedFrameworkInstanceCreationExpressionFactory
          unscopedFrameworkInstanceCreationExpressionFactory,
      BindingRepresentations bindingRepresentations)","0","-","-","-","-"
"3721","getRequestRepresentation","@Override
  public RequestRepresentation getRequestRepresentation(BindingRequest request)","0","-","-","-","-"
"3722","getRequestRepresentationUncached","private RequestRepresentation getRequestRepresentationUncached(BindingRequest request)","0","-","-","-","-"
"3723","staticFactoryCreation","/**
   * If","0","-","-","-","-"
"3724","create","ProductionBindingRepresentation create(ContributionBinding binding);","0","-","-","-","-"
"3725","ProducerNodeInstanceRequestRepresentation","@AssistedInject
  ProducerNodeInstanceRequestRepresentation(
      @Assisted ContributionBinding binding,
      @Assisted FrameworkInstanceSupplier frameworkInstanceSupplier,
      XProcessingEnv processingEnv,
      ComponentImplementation componentImplementation)","0","-","-","-","-"
"3726","frameworkType","@Override
  protected FrameworkType frameworkType()","0","-","-","-","-"
"3727","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"3728","getDependencyExpressionForComponentMethod","@Override
  XExpression getDependencyExpressionForComponentMethod(
      ComponentMethodDescriptor componentMethod, ComponentImplementation component)","0","-","-","-","-"
"3729","create","ProducerNodeInstanceRequestRepresentation create(
        ContributionBinding binding, FrameworkInstanceSupplier frameworkInstanceSupplier);","0","-","-","-","-"
"3730","ProviderInstanceRequestRepresentation","@AssistedInject
  ProviderInstanceRequestRepresentation(
      @Assisted ContributionBinding binding,
      SwitchingProviderInstanceSupplier.Factory switchingProviderInstanceSupplierFactory,
      StaticFactoryInstanceSupplier.Factory staticFactoryInstanceSupplierFactory,
      ProviderInstanceSupplier.Factory providerInstanceSupplierFactory,
      ComponentImplementation componentImplementation,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"3731","frameworkType","@Override
  protected FrameworkType frameworkType()","0","-","-","-","-"
"3732","frameworkInstanceSupplier","private static FrameworkInstanceSupplier frameworkInstanceSupplier(
      ContributionBinding binding,
      SwitchingProviderInstanceSupplier.Factory switchingProviderInstanceSupplierFactory,
      StaticFactoryInstanceSupplier.Factory staticFactoryInstanceSupplierFactory,
      ProviderInstanceSupplier.Factory providerInstanceSupplierFactory,
      ComponentImplementation componentImplementation)","0","-","-","-","-"
"3733","create","ProviderInstanceRequestRepresentation create(ContributionBinding binding);","0","-","-","-","-"
"3734","create","/** Creates a new","0","-","-","-","-"
"3735","spec","/** The type spec for the creator implementation. */
  public abstract XTypeSpec spec();","0","-","-","-","-"
"3736","name","/** The name of the creator implementation class. */
  public abstract XClassName name();","0","-","-","-","-"
"3737","fields","/** All fields that are present in this implementation. */
  abstract ImmutableMap<ComponentRequirement, FieldSpec> fields();","0","-","-","-","-"
"3738","MembersInjectionMethods","@Inject
  MembersInjectionMethods(
      ComponentImplementation componentImplementation,
      ComponentRequestRepresentations bindingExpressions,
      BindingGraph graph,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"3739","getInjectExpression","/**
   * Returns the members injection","0","-","-","-","-"
"3740","injectMethodExpression","private XExpression injectMethodExpression(Binding binding)","0","-","-","-","-"
"3741","injectionSites","private static ImmutableSet<InjectionSite> injectionSites(Binding binding)","0","-","-","-","-"
"3742","DerivedFromFrameworkInstanceRequestRepresentation","@AssistedInject
  DerivedFromFrameworkInstanceRequestRepresentation(
      @Assisted ContributionBinding binding,
      @Assisted RequestRepresentation frameworkRequestRepresentation,
      @Assisted RequestKind requestKind,
      @Assisted FrameworkType frameworkType,
      XProcessingEnv processingEnv,
      BindsTypeChecker bindsTypeChecker)","0","-","-","-","-"
"3743","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"3744","getDependencyExpressionForComponentMethod","@Override
  XExpression getDependencyExpressionForComponentMethod(
      ComponentMethodDescriptor componentMethod, ComponentImplementation component)","0","-","-","-","-"
"3745","getDependencyExpressionFromFrameworkExpression","private XExpression getDependencyExpressionFromFrameworkExpression(
      XExpression frameworkExpression, XClassName requestingClass)","0","-","-","-","-"
"3746","castMapOfProvider","private XExpression castMapOfProvider(XExpression expression, ContributionBinding binding)","0","-","-","-","-"
"3747","requiresTypeCast","private boolean requiresTypeCast(XExpression expression, XClassName requestingClass)","0","-","-","-","-"
"3748","create","DerivedFromFrameworkInstanceRequestRepresentation create(
        ContributionBinding binding,
        RequestRepresentation frameworkRequestRepresentation,
        RequestKind requestKind,
        FrameworkType frameworkType);","0","-","-","-","-"
"3749","InstanceFactoryCreationExpression","InstanceFactoryCreationExpression(Supplier<XCodeBlock> instanceExpression)","0","-","-","-","-"
"3750","InstanceFactoryCreationExpression","InstanceFactoryCreationExpression(boolean nullable, Supplier<XCodeBlock> instanceExpression)","0","-","-","-","-"
"3751","creationExpression","@Override
  public XCodeBlock creationExpression()","0","-","-","-","-"
"3752","PerGeneratedFileCache","@Inject
    PerGeneratedFileCache()","0","-","-","-","-"
"3753","OptionalFactories","@Inject
  OptionalFactories(
      PerGeneratedFileCache perGeneratedFileCache,
      @TopLevel GeneratedImplementation topLevelImplementation)","0","-","-","-","-"
"3754","absentOptionalProvider","/**
   * Returns an expression that calls a static method that returns a","0","-","-","-","-"
"3755","absentOptionalProviderMethod","/**
   * Creates a method specification for a","0","-","-","-","-"
"3756","absentOptionalProviderField","/**
   * Creates a field specification for a","0","-","-","-","-"
"3757","frameworkType","/** Whether the factory is a","0","-","-","-","-"
"3758","optionalKind","/** What kind of","0","-","-","-","-"
"3759","valueKind","/** The kind of request satisfied by the value of the","0","-","-","-","-"
"3760","typeVariable","/** The type variable for the factory class. */
    XTypeName typeVariable()","0","-","-","-","-"
"3761","valueType","/** The type contained by the","0","-","-","-","-"
"3762","optionalType","/** The type provided or produced by the factory. */
    XTypeName optionalType()","0","-","-","-","-"
"3763","factoryType","/** The type of the factory. */
    ParameterizedTypeName factoryType()","0","-","-","-","-"
"3764","delegateType","/** The type of the delegate provider or producer. */
    ParameterizedTypeName delegateType()","0","-","-","-","-"
"3765","superclass","/** Returns the superclass the generated factory should have, if any. */
    Optional<XTypeName> superclass()","0","-","-","-","-"
"3766","superinterface","/** Returns the superinterface the generated factory should have, if any. */
    Optional<ParameterizedTypeName> superinterface()","0","-","-","-","-"
"3767","factoryMethodName","/** Returns the name of the factory method to generate. */
    String factoryMethodName()","0","-","-","-","-"
"3768","factoryClassName","/** The name of the factory class. */
    String factoryClassName()","0","-","-","-","-"
"3769","of","private static PresentFactorySpec of(OptionalBinding binding)","0","-","-","-","-"
"3770","presentOptionalFactory","/**
   * Returns an expression for an instance of a nested class that implements","0","-","-","-","-"
"3771","presentOptionalFactoryClass","private XTypeSpec presentOptionalFactoryClass(PresentFactorySpec spec)","0","-","-","-","-"
"3772","presentOptionalFactoryGetMethod","private XFunSpec presentOptionalFactoryGetMethod(
      PresentFactorySpec spec, FieldSpec delegateField)","0","-","-","-","-"
"3773","transformFutureToOptional","/**
   * An expression that uses","0","-","-","-","-"
"3774","invoke","/**
     * Invokes the injection method for","0","-","-","-","-"
"3775","invokeArguments","static ImmutableList<XCodeBlock> invokeArguments(
        ContributionBinding binding,
        Function<DependencyRequest, XCodeBlock> dependencyUsage,
        Function<XExecutableParameterElement, String> uniqueAssistedParameterName)","0","-","-","-","-"
"3776","provisionDependencies","private static ImmutableSet<DependencyRequest> provisionDependencies(
        ContributionBinding binding)","0","-","-","-","-"
"3777","invokeAll","/**
     * Invokes each of the injection methods for","0","-","-","-","-"
"3778","invoke","/**
     * Invokes the injection method for","0","-","-","-","-"
"3779","invokeMethod","private static XCodeBlock invokeMethod(
      String methodName,
      ImmutableList<XCodeBlock> parameters,
      XClassName enclosingClass,
      XClassName requestingClass)","0","-","-","-","-"
"3780","copyParameters","static XCodeBlock copyParameters(
      XFunSpecs.Builder methodBuilder,
      UniqueNameSet parameterNameSet,
      List<? extends XVariableElement> parameters)","0","-","-","-","-"
"3781","copyParameter","static XCodeBlock copyParameter(
      XFunSpecs.Builder methodBuilder,
      XType type,
      String name,
      boolean useObject,
      Nullability nullability)","0","-","-","-","-"
"3782","ProducerCreationExpression","@AssistedInject
  ProducerCreationExpression(
      @Assisted ProductionBinding binding,
      ComponentImplementation componentImplementation,
      ComponentRequestRepresentations componentRequestRepresentations)","0","-","-","-","-"
"3783","creationExpression","@Override
  public XCodeBlock creationExpression()","0","-","-","-","-"
"3784","create","ProducerCreationExpression create(ProductionBinding binding);","0","-","-","-","-"
"3785","create","/** Creates a","0","-","-","-","-"
"3786","isFastInit","public boolean isFastInit()","0","-","-","-","-"
"3787","createShardsByBinding","/**
   * Returns the","0","-","-","-","-"
"3788","bindingPartitions","private static ImmutableList<ImmutableList<Binding>> bindingPartitions(
      BindingGraph graph, CompilerOptions compilerOptions)","0","-","-","-","-"
"3789","ComponentImplementation","@Inject
  ComponentImplementation(
      @ParentComponent Optional<ComponentImplementation> parent,
      ChildComponentImplementationFactory childComponentImplementationFactory,
      // Inject as Provider<> to prevent a cycle.
      @TopLevel Provider<GeneratedImplementation> topLevelImplementationProvider,
      Provider<ComponentRequestRepresentations> componentRequestRepresentationsProvider,
      Provider<ComponentCreatorImplementationFactory> componentCreatorImplementationFactoryProvider,
      BindingGraph graph,
      ComponentNames componentNames,
      CompilerOptions compilerOptions,
      XMessager messager,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"3790","shardImplementation","/**
   * Returns the shard for a given","0","-","-","-","-"
"3791","topLevelImplementation","/** Returns the","0","-","-","-","-"
"3792","rootComponentImplementation","/** Returns the root","0","-","-","-","-"
"3793","componentFieldReference","/** Returns a reference to this implementation when called from a different class. */
  public XCodeBlock componentFieldReference()","0","-","-","-","-"
"3794","componentFields","/** Returns the fields for all components in the component path. */
  public ImmutableList<FieldSpec> componentFields()","0","-","-","-","-"
"3795","creatorComponentFields","/** Returns the fields for all components in the component path except the current component. */
  public ImmutableList<FieldSpec> creatorComponentFields()","0","-","-","-","-"
"3796","createComponentFieldsByImplementation","private static ImmutableMap<ComponentImplementation, FieldSpec>
      createComponentFieldsByImplementation(
          ComponentImplementation componentImplementation, CompilerOptions compilerOptions)","0","-","-","-","-"
"3797","getComponentShard","/** Returns the shard representing the","0","-","-","-","-"
"3798","graph","/** Returns the binding graph for the component being generated. */
  public BindingGraph graph()","0","-","-","-","-"
"3799","componentDescriptor","/** Returns the descriptor for the component being generated. */
  public ComponentDescriptor componentDescriptor()","0","-","-","-","-"
"3800","name","/** Returns the name of the component. */
  public XClassName name()","0","-","-","-","-"
"3801","compilerMode","/** Returns if the current compile mode is fast init. */
  public CompilerMode compilerMode()","0","-","-","-","-"
"3802","isNested","/** Returns whether or not the implementation is nested within another class. */
  private boolean isNested()","0","-","-","-","-"
"3803","getCreatorName","/**
   * Returns the name of the creator class for this component. It will be a sibling of this
   * generated class unless this is a top-level component, in which case it will be nested.
   */
  public XClassName getCreatorName()","0","-","-","-","-"
"3804","generate","/** Generates the component and returns the resulting","0","-","-","-","-"
"3805","ShardImplementation","private ShardImplementation(XClassName name)","0","-","-","-","-"
"3806","createShard","private ShardImplementation createShard()","0","-","-","-","-"
"3807","getSwitchingProviders","/** Returns the","0","-","-","-","-"
"3808","getComponentImplementation","/** Returns the","0","-","-","-","-"
"3809","isComponentShard","/**
     * Returns","0","-","-","-","-"
"3810","componentFieldsByImplementation","/** Returns the fields for all components in the component path by component implementation. */
    public ImmutableMap<ComponentImplementation, FieldSpec> componentFieldsByImplementation()","0","-","-","-","-"
"3811","shardFieldReference","/** Returns a reference to this implementation when called from a different class. */
    public XCodeBlock shardFieldReference()","0","-","-","-","-"
"3812","graph","/** Returns the binding graph for the component being generated. */
    public BindingGraph graph()","0","-","-","-","-"
"3813","componentDescriptor","/** Returns the descriptor for the component being generated. */
    public ComponentDescriptor componentDescriptor()","0","-","-","-","-"
"3814","name","@Override
    public XClassName name()","0","-","-","-","-"
"3815","getSubcomponentCreatorSimpleName","/**
     * Returns the name of the creator implementation class for the given subcomponent creator
     *","0","-","-","-","-"
"3816","accessibleTypeName","/**
     * Returns an accessible type for this shard implementation, returns Object if the type is not
     * accessible.
     *
     * <p>This method checks accessibility for public types and package private types.
     */
    XTypeName accessibleTypeName(XType type)","0","-","-","-","-"
"3817","isTypeAccessible","/**
     * Returns","0","-","-","-","-"
"3818","addField","/** Adds the given field to the component. */
    @Override
    public void addField(FieldSpecKind fieldKind, FieldSpec fieldSpec)","0","-","-","-","-"
"3819","addMethod","/** Adds the given method to the component. */
    @Override
    public void addMethod(MethodSpecKind methodKind, XFunSpec methodSpec)","0","-","-","-","-"
"3820","addType","/** Adds the given type to the component. */
    @Override
    public void addType(TypeSpecKind typeKind, XTypeSpec typeSpec)","0","-","-","-","-"
"3821","addTypeSupplier","/** Adds a","0","-","-","-","-"
"3822","addInitialization","/** Adds the given code block to the initialize methods of the component. */
    void addInitialization(XCodeBlock codeBlock)","0","-","-","-","-"
"3823","addComponentRequirementInitialization","/** Adds the given code block that initializes a","0","-","-","-","-"
"3824","addCancellation","/**
     * Adds the given cancellation statement to the cancellation listener method of the component.
     */
    void addCancellation(Key key, XCodeBlock codeBlock)","0","-","-","-","-"
"3825","getUniqueFieldName","/** Returns a new, unique field name for the component based on the given name. */
    String getUniqueFieldName(String name)","0","-","-","-","-"
"3826","getUniqueAssistedParamName","String getUniqueAssistedParamName(String name)","0","-","-","-","-"
"3827","getUniqueFieldNameForAssistedParam","public String getUniqueFieldNameForAssistedParam(XExecutableParameterElement parameter)","0","-","-","-","-"
"3828","getUniqueMethodName","/** Returns a new, unique nested class name for the component based on the given name. */
    public String getUniqueMethodName(String name)","0","-","-","-","-"
"3829","getUniqueMethodName","/** Returns a new, unique method name for a getter method for the given request. */
    String getUniqueMethodName(BindingRequest request)","0","-","-","-","-"
"3830","getUniqueClassName","@Override
    public String getUniqueClassName(String name)","0","-","-","-","-"
"3831","uniqueMethodName","private String uniqueMethodName(BindingRequest request, String bindingName)","0","-","-","-","-"
"3832","getParameterName","/**
     * Gets the parameter name to use for the given requirement for this component, starting with
     * the given base name if no parameter name has already been selected for the requirement.
     */
    public String getParameterName(ComponentRequirement requirement)","0","-","-","-","-"
"3833","claimMethodName","/** Claims a new method name for the component. Does nothing if method name already exists. */
    public void claimMethodName(CharSequence name)","0","-","-","-","-"
"3834","isShardClassPrivate","public boolean isShardClassPrivate()","0","-","-","-","-"
"3835","generate","@Override
    public XTypeSpec generate()","0","-","-","-","-"
"3836","modifiers","private ImmutableSet<Modifier> modifiers()","0","-","-","-","-"
"3837","addCreator","private void addCreator()","0","-","-","-","-"
"3838","addFactoryMethods","private void addFactoryMethods()","0","-","-","-","-"
"3839","createRootComponentFactoryMethod","private void createRootComponentFactoryMethod()","0","-","-","-","-"
"3840","validateMethodNameDoesNotOverrideGeneratedCreator","private void validateMethodNameDoesNotOverrideGeneratedCreator(String creatorName)","0","-","-","-","-"
"3841","canInstantiateAllRequirements","/**","0","-","-","-","-"
"3842","createSubcomponentFactoryMethod","private void createSubcomponentFactoryMethod(XMethodElement factoryMethod)","0","-","-","-","-"
"3843","addInterfaceMethods","private void addInterfaceMethods()","0","-","-","-","-"
"3844","addChildComponents","private void addChildComponents()","0","-","-","-","-"
"3845","addShards","private void addShards()","0","-","-","-","-"
"3846","addConstructorAndInitializationMethods","/** Creates and adds the constructor and methods needed for initializing the component. */
    private void addConstructorAndInitializationMethods()","0","-","-","-","-"
"3847","addCancellationListenerImplementation","private void addCancellationListenerImplementation()","0","-","-","-","-"
"3848","cancelParentStatement","private Optional<XCodeBlock> cancelParentStatement()","0","-","-","-","-"
"3849","shouldPropagateCancellationToParent","private boolean shouldPropagateCancellationToParent()","0","-","-","-","-"
"3850","createPartitionedMethods","/**
     * Creates one or more methods, all taking the given","0","-","-","-","-"
"3851","constructorRequirements","private static ImmutableList<ComponentRequirement> constructorRequirements(BindingGraph graph)","0","-","-","-","-"
"3852","makeFinal","private static ImmutableList<ParameterSpec> makeFinal(List<ParameterSpec> parameters)","0","-","-","-","-"
"3853","emptyMapFactory","/** A","0","-","-","-","-"
"3854","emptySetFactory","/**
   * A static member select for an empty set factory. Calls","0","-","-","-","-"
"3855","factoryCreateNoArgumentMethod","/**
   * Returns a","0","-","-","-","-"
"3856","StaticMethod","StaticMethod(XClassName owningClass, XCodeBlock methodCodeBlock)","0","-","-","-","-"
"3857","getExpressionFor","@Override
    XCodeBlock getExpressionFor(XClassName usingClass)","0","-","-","-","-"
"3858","ParameterizedStaticMethod","ParameterizedStaticMethod(
        XClassName owningClass,
        ImmutableList<XType> typeParameters,
        XCodeBlock methodCodeBlock,
        XClassName rawReturnType)","0","-","-","-","-"
"3859","getExpressionFor","@Override
    XCodeBlock getExpressionFor(XClassName usingClass)","0","-","-","-","-"
"3860","StaticMemberSelects","private StaticMemberSelects()","0","-","-","-","-"
"3861","creationExpression","/** Returns the expression to use to assign to the component field for the binding. */
    XCodeBlock creationExpression();","0","-","-","-","-"
"3862","alternativeFrameworkClass","/**
     * Returns the framework class to use for the field, if different from the one implied by the
     * binding. This implementation returns","0","-","-","-","-"
"3863","FrameworkFieldInitializer","FrameworkFieldInitializer(
      ComponentImplementation componentImplementation,
      ContributionBinding binding,
      FrameworkInstanceCreationExpression frameworkInstanceCreationExpression)","0","-","-","-","-"
"3864","memberSelect","/**
   * Returns the","0","-","-","-","-"
"3865","initializeField","/** Adds the field and its initialization code to the component. */
  private void initializeField()","0","-","-","-","-"
"3866","getOrCreateField","/**
   * Adds a field representing the resolved bindings, optionally forcing it to use a particular
   * binding type (instead of the type the resolved bindings would typically use).
   */
  private FieldSpec getOrCreateField()","0","-","-","-","-"
"3867","delegateType","private XClassName delegateType()","0","-","-","-","-"
"3868","isProvider","private boolean isProvider()","0","-","-","-","-"
"3869","SwitchingProviderInstanceSupplier","@AssistedInject
  SwitchingProviderInstanceSupplier(
      @Assisted ContributionBinding binding,
      BindingGraph graph,
      ComponentImplementation componentImplementation,
      UnscopedDirectInstanceRequestRepresentationFactory
          unscopedDirectInstanceRequestRepresentationFactory)","0","-","-","-","-"
"3870","memberSelect","@Override
  public MemberSelect memberSelect()","0","-","-","-","-"
"3871","scope","private FrameworkInstanceCreationExpression scope(
      Binding binding, FrameworkInstanceCreationExpression unscoped)","0","-","-","-","-"
"3872","create","SwitchingProviderInstanceSupplier create(ContributionBinding binding);","0","-","-","-","-"
"3873","ComponentProvisionRequestRepresentation","@AssistedInject
  ComponentProvisionRequestRepresentation(
      @Assisted ComponentDependencyProvisionBinding binding,
      BindingGraph bindingGraph,
      ComponentImplementation componentImplementation,
      ComponentRequirementExpressions componentRequirementExpressions,
      CompilerOptions compilerOptions)","0","-","-","-","-"
"3874","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"3875","getComponentRequirementExpression","private XCodeBlock getComponentRequirementExpression(XClassName requestingClass)","0","-","-","-","-"
"3876","componentRequirement","private ComponentRequirement componentRequirement()","0","-","-","-","-"
"3877","maybeCheckForNull","static XCodeBlock maybeCheckForNull(
      ComponentDependencyProvisionBinding binding,
      CompilerOptions compilerOptions,
      XCodeBlock invocation)","0","-","-","-","-"
"3878","create","ComponentProvisionRequestRepresentation create(ComponentDependencyProvisionBinding binding);","0","-","-","-","-"
"3879","AnonymousProviderCreationExpression","@AssistedInject
  AnonymousProviderCreationExpression(
      @Assisted ContributionBinding binding,
      ComponentRequestRepresentations componentRequestRepresentations,
      ComponentImplementation componentImplementation)","0","-","-","-","-"
"3880","creationExpression","@Override
  public XCodeBlock creationExpression()","0","-","-","-","-"
"3881","create","AnonymousProviderCreationExpression create(ContributionBinding binding);","0","-","-","-","-"
"3882","SetFactoryCreationExpression","@AssistedInject
  SetFactoryCreationExpression(
      @Assisted MultiboundSetBinding binding,
      ComponentImplementation componentImplementation,
      ComponentRequestRepresentations componentRequestRepresentations,
      BindingGraph graph)","0","-","-","-","-"
"3883","creationExpression","@Override
  public XCodeBlock creationExpression()","0","-","-","-","-"
"3884","create","SetFactoryCreationExpression create(MultiboundSetBinding binding);","0","-","-","-","-"
"3885","MembersInjectorProviderCreationExpression","@AssistedInject
  MembersInjectorProviderCreationExpression(
      @Assisted MembersInjectorBinding binding,
      ComponentImplementation componentImplementation,
      ComponentRequestRepresentations componentRequestRepresentations)","0","-","-","-","-"
"3886","creationExpression","@Override
  public XCodeBlock creationExpression()","0","-","-","-","-"
"3887","hasLocalInjectionSites","private boolean hasLocalInjectionSites(XTypeElement injectedTypeElement)","0","-","-","-","-"
"3888","create","MembersInjectorProviderCreationExpression create(MembersInjectorBinding binding);","0","-","-","-","-"
"3889","MultibindingFactoryCreationExpression","MultibindingFactoryCreationExpression(
      ContributionBinding binding,
      ComponentImplementation componentImplementation,
      ComponentRequestRepresentations componentRequestRepresentations)","0","-","-","-","-"
"3890","multibindingDependencyExpression","/** Returns the expression for a dependency of this multibinding. */
  protected final XCodeBlock multibindingDependencyExpression(DependencyRequest dependency)","0","-","-","-","-"
"3891","bindingRequest","/** The binding request for this framework instance. */
  protected final BindingRequest bindingRequest()","0","-","-","-","-"
"3892","useRawType","/**
   * Returns true if the","0","-","-","-","-"
"3893","OptionalFactoryInstanceCreationExpression","@AssistedInject
  OptionalFactoryInstanceCreationExpression(
      @Assisted OptionalBinding binding,
      OptionalFactories optionalFactories,
      ComponentImplementation componentImplementation,
      ComponentRequestRepresentations componentRequestRepresentations)","0","-","-","-","-"
"3894","creationExpression","@Override
  public XCodeBlock creationExpression()","0","-","-","-","-"
"3895","create","OptionalFactoryInstanceCreationExpression create(OptionalBinding binding);","0","-","-","-","-"
"3896","StaticFactoryInstanceSupplier","@AssistedInject
  StaticFactoryInstanceSupplier(
      @Assisted ContributionBinding binding,
      FrameworkInstanceBindingRepresentation.Factory
          frameworkInstanceBindingRepresentationFactory)","0","-","-","-","-"
"3897","memberSelect","@Override
  public MemberSelect memberSelect()","0","-","-","-","-"
"3898","staticFactoryCreation","private MemberSelect staticFactoryCreation(ContributionBinding binding)","0","-","-","-","-"
"3899","create","StaticFactoryInstanceSupplier create(ContributionBinding binding);","0","-","-","-","-"
"3900","LazyMapKeyProxyGenerator","@Inject
  LazyMapKeyProxyGenerator(XFiler filer, XProcessingEnv processingEnv)","0","-","-","-","-"
"3901","originatingElement","@Override
  public XElement originatingElement(XMethodElement input)","0","-","-","-","-"
"3902","topLevelTypes","@Override
  public ImmutableList<XTypeSpec> topLevelTypes(XMethodElement input)","0","-","-","-","-"
"3903","lazyClassKeyProxyTypeSpec","private XTypeSpec lazyClassKeyProxyTypeSpec(XMethodElement element)","0","-","-","-","-"
"3904","lazyClassKeyFields","private static ImmutableList<FieldSpec> lazyClassKeyFields(XMethodElement element)","0","-","-","-","-"
"3905","InjectionOrProvisionProviderCreationExpression","@AssistedInject
  InjectionOrProvisionProviderCreationExpression(
      @Assisted ContributionBinding binding,
      ComponentImplementation componentImplementation,
      ComponentRequestRepresentations componentRequestRepresentations,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"3906","creationExpression","@Override
  public XCodeBlock creationExpression()","0","-","-","-","-"
"3907","create","InjectionOrProvisionProviderCreationExpression create(ContributionBinding binding);","0","-","-","-","-"
"3908","MembersInjectionBindingRepresentation","@AssistedInject
  MembersInjectionBindingRepresentation(
      @Assisted MembersInjectionBinding binding,
      MembersInjectionRequestRepresentation.Factory membersInjectionRequestRepresentationFactory)","0","-","-","-","-"
"3909","getRequestRepresentation","@Override
  public RequestRepresentation getRequestRepresentation(BindingRequest request)","0","-","-","-","-"
"3910","create","MembersInjectionBindingRepresentation create(MembersInjectionBinding binding);","0","-","-","-","-"
"3911","getRequestRepresentation","RequestRepresentation getRequestRepresentation(BindingRequest request);","0","-","-","-","-"
"3912","FrameworkInstanceRequestRepresentation","FrameworkInstanceRequestRepresentation(
      ContributionBinding binding,
      FrameworkInstanceSupplier frameworkInstanceSupplier,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"3913","getDependencyExpression","/**
   * The expression for the framework instance for this binding. The field will be initialized and
   * added to the component the first time this method is invoked.
   */
  @Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"3914","frameworkType","/** Returns the framework type for the binding. */
  protected abstract FrameworkType frameworkType();","0","-","-","-","-"
"3915","isInlinedFactoryCreation","/**
   * Returns","0","-","-","-","-"
"3916","BindingRepresentations","@Inject BindingRepresentations()","0","-","-","-","-"
"3917","scope","FrameworkInstanceCreationExpression scope(
      Binding binding, FrameworkInstanceCreationExpression unscoped)","0","-","-","-","-"
"3918","ComponentRequirementExpressions","@Inject
  ComponentRequirementExpressions(
      @ParentComponent Optional<ComponentRequirementExpressions> parent,
      BindingGraph graph,
      ComponentImplementation componentImplementation)","0","-","-","-","-"
"3919","getExpression","/**
   * Returns an expression for the","0","-","-","-","-"
"3920","getExpression","private ComponentRequirementExpression getExpression(ComponentRequirement componentRequirement)","0","-","-","-","-"
"3921","getExpressionDuringInitialization","/**
   * Returns an expression for the","0","-","-","-","-"
"3922","createExpression","/** Returns a field for a","0","-","-","-","-"
"3923","AbstractField","private AbstractField(ComponentRequirement componentRequirement)","0","-","-","-","-"
"3924","getExpression","@Override
    public XCodeBlock getExpression(XClassName requestingClass)","0","-","-","-","-"
"3925","createField","private MemberSelect createField()","0","-","-","-","-"
"3926","fieldInitialization","/** Returns the","0","-","-","-","-"
"3927","InstantiableModuleField","InstantiableModuleField(ComponentRequirement module)","0","-","-","-","-"
"3928","fieldInitialization","@Override
    XCodeBlock fieldInitialization(FieldSpec componentField)","0","-","-","-","-"
"3929","ComponentParameterField","ComponentParameterField(ComponentRequirement module)","0","-","-","-","-"
"3930","getExpressionDuringInitialization","@Override
    public XCodeBlock getExpressionDuringInitialization(XClassName requestingClass)","0","-","-","-","-"
"3931","fieldInitialization","@Override
    XCodeBlock fieldInitialization(FieldSpec componentField)","0","-","-","-","-"
"3932","gwtIncompatibleAnnotation","/**
   * Returns a","0","-","-","-","-"
"3933","isGwtIncompatible","private static boolean isGwtIncompatible(XAnnotation annotation)","0","-","-","-","-"
"3934","MethodRequestRepresentation","protected MethodRequestRepresentation(
      ShardImplementation shardImplementation, XProcessingEnv processingEnv)","0","-","-","-","-"
"3935","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"3936","getDependencyExpressionForComponentMethod","@Override
  XExpression getDependencyExpressionForComponentMethod(
      ComponentMethodDescriptor componentMethod, ComponentImplementation component)","0","-","-","-","-"
"3937","returnType","/** Returns the return type for the dependency request. */
  protected abstract XExpressionType returnType();","0","-","-","-","-"
"3938","methodCall","/** Returns the method call. */
  protected abstract XCodeBlock methodCall();","0","-","-","-","-"
"3939","name","/** Returns the name of the component. */
  XClassName name();","0","-","-","-","-"
"3940","getUniqueClassName","/** Returns a new, unique method name for the component based on the given name. */
  String getUniqueClassName(String name);","0","-","-","-","-"
"3941","addField","/** Adds the given field to the generated implementation. */
  void addField(FieldSpecKind fieldKind, FieldSpec fieldSpec);","0","-","-","-","-"
"3942","addMethod","/** Adds the given method to the generated implementation. */
  void addMethod(MethodSpecKind methodKind, XFunSpec methodSpec);","0","-","-","-","-"
"3943","addType","/** Adds the given type to the generated implementation. */
  void addType(TypeSpecKind typeKind, XTypeSpec typeSpec);","0","-","-","-","-"
"3944","addTypeSupplier","/** Adds a","0","-","-","-","-"
"3945","generate","/** Returns the","0","-","-","-","-"
"3946","DependencyMethodProducerCreationExpression","@AssistedInject
  DependencyMethodProducerCreationExpression(
      @Assisted ComponentDependencyProductionBinding binding,
      ComponentImplementation componentImplementation,
      ComponentRequirementExpressions componentRequirementExpressions,
      BindingGraph graph)","0","-","-","-","-"
"3947","creationExpression","@Override
  public XCodeBlock creationExpression()","0","-","-","-","-"
"3948","create","DependencyMethodProducerCreationExpression create(ComponentDependencyProductionBinding binding);","0","-","-","-","-"
"3949","ProducerFactoryGenerator","@Inject
  ProducerFactoryGenerator(
      XFiler filer,
      XProcessingEnv processingEnv,
      CompilerOptions compilerOptions,
      SourceFiles sourceFiles)","0","-","-","-","-"
"3950","originatingElement","@Override
  public XElement originatingElement(ProductionBinding binding)","0","-","-","-","-"
"3951","topLevelTypes","@Override
  public ImmutableList<XTypeSpec> topLevelTypes(ProductionBinding binding)","0","-","-","-","-"
"3952","constructorMethod","private XFunSpec constructorMethod(ProductionBinding binding, FactoryFields factoryFields)","0","-","-","-","-"
"3953","staticCreateMethod","private XFunSpec staticCreateMethod(ProductionBinding binding, FactoryFields factoryFields)","0","-","-","-","-"
"3954","collectDependenciesMethod","public XFunSpec collectDependenciesMethod(
      ProductionBinding binding, FactoryFields factoryFields)","0","-","-","-","-"
"3955","producedCodeBlock","private XCodeBlock producedCodeBlock(DependencyRequest request, XPropertySpec field)","0","-","-","-","-"
"3956","callProducesMethod","private XFunSpec callProducesMethod(ProductionBinding binding, FactoryFields factoryFields)","0","-","-","-","-"
"3957","callProducesMethodParameter","private XParameterSpec callProducesMethodParameter(ProductionBinding binding)","0","-","-","-","-"
"3958","asyncDependencies","private static ImmutableList<DependencyRequest> asyncDependencies(ProductionBinding binding)","0","-","-","-","-"
"3959","producerTokenConstruction","private XCodeBlock producerTokenConstruction(
      XClassName generatedTypeName, ProductionBinding binding)","0","-","-","-","-"
"3960","dependencyFutureName","/** Returns a name of the variable representing this dependency's future. */
  private static String dependencyFutureName(DependencyRequest dependency)","0","-","-","-","-"
"3961","isAsyncDependency","private static boolean isAsyncDependency(DependencyRequest dependency)","0","-","-","-","-"
"3962","asyncDependencyType","private static XTypeName asyncDependencyType(DependencyRequest dependency)","0","-","-","-","-"
"3963","create","static FactoryFields create(ProductionBinding binding)","0","-","-","-","-"
"3964","createField","private static XPropertySpec createField(XTypeName type, String name)","0","-","-","-","-"
"3965","FactoryFields","private FactoryFields(
        ProductionBinding binding,
        Optional<XPropertySpec> moduleField,
        ImmutableMap<DependencyRequest, XPropertySpec> frameworkFields)","0","-","-","-","-"
"3966","get","XPropertySpec get(DependencyRequest request)","0","-","-","-","-"
"3967","getAll","ImmutableList<XPropertySpec> getAll()","0","-","-","-","-"
"3968","warningSuppressions","@Override
  protected ImmutableSet<Suppression> warningSuppressions()","0","-","-","-","-"
"3969","fromProducesMethod","/** Returns the kind of object a","0","-","-","-","-"
"3970","OptionalRequestRepresentation","@AssistedInject
  OptionalRequestRepresentation(
      @Assisted OptionalBinding binding,
      ComponentImplementation componentImplementation,
      ComponentRequestRepresentations componentRequestRepresentations,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"3971","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"3972","create","OptionalRequestRepresentation create(OptionalBinding binding);","0","-","-","-","-"
"3973","getExpression","/**
   * Returns an expression for the","0","-","-","-","-"
"3974","getExpressionDuringInitialization","/**
   * Returns an expression for the","0","-","-","-","-"
"3975","getModifiableModuleMethodExpression","/**
   * Returns the expression for the","0","-","-","-","-"
"3976","PrivateMethodRequestRepresentation","@AssistedInject
  PrivateMethodRequestRepresentation(
      @Assisted BindingRequest request,
      @Assisted ContributionBinding binding,
      @Assisted RequestRepresentation wrappedRequestRepresentation,
      ComponentImplementation componentImplementation,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"3977","methodCall","@Override
  protected XCodeBlock methodCall()","0","-","-","-","-"
"3978","returnType","@Override
  protected XExpressionType returnType()","0","-","-","-","-"
"3979","methodName","private String methodName()","0","-","-","-","-"
"3980","create","PrivateMethodRequestRepresentation create(
        BindingRequest request,
        ContributionBinding binding,
        RequestRepresentation wrappedRequestRepresentation);","0","-","-","-","-"
"3981","assistedFactoryParameterSpecs","/**
   * Returns the list of assisted factory parameters as","0","-","-","-","-"
"3982","assistedParameterSpecs","/**
   * Returns the list of assisted parameters as","0","-","-","-","-"
"3983","assistedParameterSpecs","private static ImmutableList<ParameterSpec> assistedParameterSpecs(
      List<XExecutableParameterElement> paramElements,
      List<XType> paramTypes,
      ShardImplementation shardImplementation)","0","-","-","-","-"
"3984","AssistedInjectionParameters","private AssistedInjectionParameters()","0","-","-","-","-"
"3985","DelegateRequestRepresentation","@AssistedInject
  DelegateRequestRepresentation(
      @Assisted DelegateBinding binding,
      @Assisted RequestKind requestKind,
      ComponentRequestRepresentations componentRequestRepresentations,
      BindsTypeChecker bindsTypeChecker,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"3986","isBindsScopeStrongerThanDependencyScope","/**
   * Returns","0","-","-","-","-"
"3987","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"3988","instanceRequiresCast","static boolean instanceRequiresCast(
      DelegateBinding binding,
      XExpression delegateExpression,
      XClassName requestingClass,
      BindsTypeChecker bindsTypeChecker)","0","-","-","-","-"
"3989","castToRawTypeIfNecessary","/**
   * If","0","-","-","-","-"
"3990","get","static ScopeKind get(Binding binding)","0","-","-","-","-"
"3991","AssistedFactoryRequestRepresentation","@AssistedInject
  AssistedFactoryRequestRepresentation(
      @Assisted AssistedFactoryBinding binding,
      BindingGraph graph,
      ComponentImplementation componentImplementation,
      SimpleMethodRequestRepresentation.Factory simpleMethodRequestRepresentationFactory)","0","-","-","-","-"
"3992","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"3993","anonymousfactoryImpl","private XTypeSpec anonymousfactoryImpl(
      Binding assistedBinding, XExpression assistedInjectionExpression)","0","-","-","-","-"
"3994","create","AssistedFactoryRequestRepresentation create(AssistedFactoryBinding binding);","0","-","-","-","-"
"3995","ProducerEntryPointView","ProducerEntryPointView(ShardImplementation shardImplementation, XProcessingEnv processingEnv)","0","-","-","-","-"
"3996","getProducerEntryPointField","/**
   * Returns an expression for an","0","-","-","-","-"
"3997","createField","private MemberSelect createField(
      RequestRepresentation producerExpression, ComponentMethodDescriptor componentMethod)","0","-","-","-","-"
"3998","fieldType","private XType fieldType(ComponentMethodDescriptor componentMethod)","0","-","-","-","-"
"3999","DirectInstanceBindingRepresentation","@AssistedInject
  DirectInstanceBindingRepresentation(
      @Assisted ContributionBinding binding,
      BindingGraph graph,
      ComponentImplementation componentImplementation,
      ComponentMethodRequestRepresentation.Factory componentMethodRequestRepresentationFactory,
      ImmediateFutureRequestRepresentation.Factory immediateFutureRequestRepresentationFactory,
      PrivateMethodRequestRepresentation.Factory privateMethodRequestRepresentationFactory,
      UnscopedDirectInstanceRequestRepresentationFactory
          unscopedDirectInstanceRequestRepresentationFactory)","0","-","-","-","-"
"4000","getRequestRepresentation","public RequestRepresentation getRequestRepresentation(BindingRequest request)","0","-","-","-","-"
"4001","getRequestRepresentationUncached","private RequestRepresentation getRequestRepresentationUncached(BindingRequest request)","0","-","-","-","-"
"4002","wrapInMethod","/**
   * Returns a binding expression that uses a given one as the body of a method that users call. If
   * a component provision method matches it, it will be the method implemented. If it does not
   * match a component provision method and the binding is modifiable, then a new public modifiable
   * binding method will be written. If the binding doesn't match a component method and is not
   * modifiable, then a new private method will be written.
   */
  RequestRepresentation wrapInMethod(RequestRepresentation bindingExpression)","0","-","-","-","-"
"4003","requiresMethodEncapsulation","private static boolean requiresMethodEncapsulation(ContributionBinding binding)","0","-","-","-","-"
"4004","create","DirectInstanceBindingRepresentation create(ContributionBinding binding);","0","-","-","-","-"
"4005","UnwrappedMapKeyGenerator","@Inject
  UnwrappedMapKeyGenerator(XFiler filer, XProcessingEnv processingEnv)","0","-","-","-","-"
"4006","annotationsToCreate","@Override
  protected Set<XTypeElement> annotationsToCreate(XTypeElement annotationElement)","0","-","-","-","-"
"4007","SubcomponentCreatorRequestRepresentation","@AssistedInject
  SubcomponentCreatorRequestRepresentation(
      @Assisted SubcomponentCreatorBinding binding,
      ComponentImplementation componentImplementation)","0","-","-","-","-"
"4008","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"4009","getDependencyExpressionArguments","XCodeBlock getDependencyExpressionArguments()","0","-","-","-","-"
"4010","create","SubcomponentCreatorRequestRepresentation create(SubcomponentCreatorBinding binding);","0","-","-","-","-"
"4011","SetRequestRepresentation","@AssistedInject
  SetRequestRepresentation(
      @Assisted MultiboundSetBinding binding,
      BindingGraph graph,
      ComponentImplementation componentImplementation,
      ComponentRequestRepresentations componentRequestRepresentations,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"4012","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"4013","immutableSetType","private XType immutableSetType()","0","-","-","-","-"
"4014","getContributionExpression","private XCodeBlock getContributionExpression(
      DependencyRequest dependency, XClassName requestingClass)","0","-","-","-","-"
"4015","collectionsStaticFactoryInvocation","private XExpression collectionsStaticFactoryInvocation(
      XClassName requestingClass, XCodeBlock methodInvocation)","0","-","-","-","-"
"4016","maybeTypeParameter","private XCodeBlock maybeTypeParameter(XClassName requestingClass)","0","-","-","-","-"
"4017","isSingleValue","private boolean isSingleValue(DependencyRequest dependency)","0","-","-","-","-"
"4018","isImmutableSetBuilderWithExpectedSizeAvailable","private boolean isImmutableSetBuilderWithExpectedSizeAvailable()","0","-","-","-","-"
"4019","isImmutableSetAvailable","private boolean isImmutableSetAvailable()","0","-","-","-","-"
"4020","create","SetRequestRepresentation create(MultiboundSetBinding binding);","0","-","-","-","-"
"4021","ComponentRequirementRequestRepresentation","@AssistedInject
  ComponentRequirementRequestRepresentation(
      @Assisted ContributionBinding binding,
      @Assisted ComponentRequirement componentRequirement,
      ComponentRequirementExpressions componentRequirementExpressions)","0","-","-","-","-"
"4022","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"4023","create","abstract ComponentRequirementRequestRepresentation create(
        ContributionBinding binding, ComponentRequirement componentRequirement);","0","-","-","-","-"
"4024","create","final ComponentRequirementRequestRepresentation create(BoundInstanceBinding binding)","0","-","-","-","-"
"4025","create","final ComponentRequirementRequestRepresentation create(ComponentDependencyBinding binding)","0","-","-","-","-"
"4026","ProvisionBindingRepresentation","@AssistedInject
  ProvisionBindingRepresentation(
      @Assisted ContributionBinding binding,
      DirectInstanceBindingRepresentation.Factory directInstanceBindingRepresentationFactory,
      FrameworkInstanceBindingRepresentation.Factory frameworkInstanceBindingRepresentationFactory,
      BindingGraph graph,
      ComponentImplementation componentImplementation)","0","-","-","-","-"
"4027","getRequestRepresentation","@Override
  public RequestRepresentation getRequestRepresentation(BindingRequest request)","0","-","-","-","-"
"4028","usesDirectInstanceExpression","private boolean usesDirectInstanceExpression(RequestKind requestKind)","0","-","-","-","-"
"4029","needsCaching","/**
   * Returns","0","-","-","-","-"
"4030","create","ProvisionBindingRepresentation create(ContributionBinding binding);","0","-","-","-","-"
"4031","localField","/**
   * Returns a","0","-","-","-","-"
"4032","LocalField","LocalField(ShardImplementation owningShard, String fieldName)","0","-","-","-","-"
"4033","getExpressionFor","@Override
    XCodeBlock getExpressionFor(XClassName usingClass)","0","-","-","-","-"
"4034","MemberSelect","MemberSelect(XClassName owningClass, boolean staticMemeber)","0","-","-","-","-"
"4035","owningClass","/** Returns the class that owns the member being selected. */
  XClassName owningClass()","0","-","-","-","-"
"4036","staticMember","/**
   * Returns true if the member being selected is static and does not require an instance of
   *","0","-","-","-","-"
"4037","getExpressionFor","/**
   * Returns a","0","-","-","-","-"
"4038","ComponentInstanceRequestRepresentation","@AssistedInject
  ComponentInstanceRequestRepresentation(
      @Assisted ComponentBinding binding, ComponentImplementation componentImplementation)","0","-","-","-","-"
"4039","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"4040","create","ComponentInstanceRequestRepresentation create(ComponentBinding binding);","0","-","-","-","-"
"4041","FrameworkInstanceBindingRepresentation","@AssistedInject
  FrameworkInstanceBindingRepresentation(
      @Assisted ContributionBinding binding,
      BindingGraph graph,
      ComponentImplementation componentImplementation,
      DelegateRequestRepresentation.Factory delegateRequestRepresentationFactory,
      DerivedFromFrameworkInstanceRequestRepresentation.Factory
          derivedFromFrameworkInstanceRequestRepresentationFactory,
      ImmediateFutureRequestRepresentation.Factory immediateFutureRequestRepresentationFactory,
      ProducerNodeInstanceRequestRepresentation.Factory
          producerNodeInstanceRequestRepresentationFactory,
      ProviderInstanceRequestRepresentation.Factory providerInstanceRequestRepresentationFactory,
      ProducerFromProviderCreationExpression.Factory
          producerFromProviderCreationExpressionFactory)","0","-","-","-","-"
"4042","getRequestRepresentation","public RequestRepresentation getRequestRepresentation(BindingRequest request)","0","-","-","-","-"
"4043","getRequestRepresentationUncached","private RequestRepresentation getRequestRepresentationUncached(BindingRequest request)","0","-","-","-","-"
"4044","create","FrameworkInstanceBindingRepresentation create(ContributionBinding binding);","0","-","-","-","-"
"4045","FactoryGenerator","@Inject
  FactoryGenerator(
      XFiler filer,
      CompilerOptions compilerOptions,
      SourceFiles sourceFiles,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"4046","originatingElement","@Override
  public XElement originatingElement(ContributionBinding binding)","0","-","-","-","-"
"4047","topLevelTypes","@Override
  public ImmutableList<XTypeSpec> topLevelTypes(ContributionBinding binding)","0","-","-","-","-"
"4048","factoryBuilder","private XTypeSpec factoryBuilder(ContributionBinding binding)","0","-","-","-","-"
"4049","staticInstanceHolderType","private XTypeSpec staticInstanceHolderType(ContributionBinding binding)","0","-","-","-","-"
"4050","instanceHolderClassName","private static XClassName instanceHolderClassName(ContributionBinding binding)","0","-","-","-","-"
"4051","constructorMethod","private XFunSpec constructorMethod(FactoryFields factoryFields)","0","-","-","-","-"
"4052","staticCreateMethod","private XFunSpec staticCreateMethod(ContributionBinding binding, FactoryFields factoryFields)","0","-","-","-","-"
"4053","getMethod","private XFunSpec getMethod(ContributionBinding binding, FactoryFields factoryFields)","0","-","-","-","-"
"4054","staticProxyMethod","private XFunSpec staticProxyMethod(ContributionBinding binding)","0","-","-","-","-"
"4055","staticProxyMethodForInjection","private static XFunSpec staticProxyMethodForInjection(ContributionBinding binding)","0","-","-","-","-"
"4056","staticProxyMethodForProvision","private XFunSpec staticProxyMethodForProvision(ProvisionBinding binding)","0","-","-","-","-"
"4057","maybeWrapInCheckForNull","private XCodeBlock maybeWrapInCheckForNull(ProvisionBinding binding, XCodeBlock codeBlock)","0","-","-","-","-"
"4058","copyInstance","private static XCodeBlock copyInstance(
      XFunSpecs.Builder methodBuilder, UniqueNameSet parameterNameSet, XType type)","0","-","-","-","-"
"4059","scopeMetadataAnnotation","private XAnnotationSpec scopeMetadataAnnotation(ContributionBinding binding)","0","-","-","-","-"
"4060","qualifierMetadataAnnotation","private XAnnotationSpec qualifierMetadataAnnotation(ContributionBinding binding)","0","-","-","-","-"
"4061","provisionDependencies","private ImmutableSet<DependencyRequest> provisionDependencies(ContributionBinding binding)","0","-","-","-","-"
"4062","injectionSites","private ImmutableSet<InjectionSite> injectionSites(ContributionBinding binding)","0","-","-","-","-"
"4063","providedTypeName","private static XTypeName providedTypeName(ContributionBinding binding)","0","-","-","-","-"
"4064","factoryTypeName","private static Optional<XTypeName> factoryTypeName(ContributionBinding binding)","0","-","-","-","-"
"4065","create","static FactoryFields create(ContributionBinding binding)","0","-","-","-","-"
"4066","createField","private static XPropertySpec createField(XTypeName typeName, String name)","0","-","-","-","-"
"4067","FactoryFields","private FactoryFields(
        Optional<XPropertySpec> moduleField,
        ImmutableMap<DependencyRequest, XPropertySpec> frameworkFields)","0","-","-","-","-"
"4068","get","XPropertySpec get(DependencyRequest request)","0","-","-","-","-"
"4069","getAll","ImmutableList<XPropertySpec> getAll()","0","-","-","-","-"
"4070","isEmpty","boolean isEmpty()","0","-","-","-","-"
"4071","getDependencyExpression","/**
   * Returns an expression that evaluates to the value of a request based on the given requesting
   * class.
   *
   * @param requestingClass the class that will contain the expression
   */
  abstract XExpression getDependencyExpression(XClassName requestingClass);","0","-","-","-","-"
"4072","getDependencyExpressionForComponentMethod","/**
   * Equivalent to","0","-","-","-","-"
"4073","MembersInjectionRequestRepresentation","@AssistedInject
  MembersInjectionRequestRepresentation(
      @Assisted MembersInjectionBinding binding, MembersInjectionMethods membersInjectionMethods)","0","-","-","-","-"
"4074","getDependencyExpression","@Override
  XExpression getDependencyExpression(XClassName requestingClass)","0","-","-","-","-"
"4075","getDependencyExpressionForComponentMethod","@Override
  protected XExpression getDependencyExpressionForComponentMethod(
      ComponentMethodDescriptor componentMethod, ComponentImplementation component)","0","-","-","-","-"
"4076","binding","/** Returns the binding associated with this","0","-","-","-","-"
"4077","create","MembersInjectionRequestRepresentation create(MembersInjectionBinding binding);","0","-","-","-","-"
"4078","memberSelect","/** Returns a","0","-","-","-","-"
"4079","DependencyMethodProviderCreationExpression","@AssistedInject
  DependencyMethodProviderCreationExpression(
      @Assisted ComponentDependencyProvisionBinding binding,
      ComponentImplementation componentImplementation,
      ComponentRequirementExpressions componentRequirementExpressions,
      CompilerOptions compilerOptions,
      BindingGraph graph)","0","-","-","-","-"
"4080","creationExpression","@Override
  public XCodeBlock creationExpression()","0","-","-","-","-"
"4081","dependency","private ComponentRequirement dependency()","0","-","-","-","-"
"4082","create","DependencyMethodProviderCreationExpression create(ComponentDependencyProvisionBinding binding);","0","-","-","-","-"
"4083","ModuleProxies","private ModuleProxies()","0","-","-","-","-"
"4084","ModuleConstructorProxyGenerator","@Inject
    ModuleConstructorProxyGenerator(XFiler filer, XProcessingEnv processingEnv)","0","-","-","-","-"
"4085","originatingElement","@Override
    public XElement originatingElement(XTypeElement moduleElement)","0","-","-","-","-"
"4086","topLevelTypes","@Override
    public ImmutableList<XTypeSpec> topLevelTypes(XTypeElement moduleElement)","0","-","-","-","-"
"4087","buildProxy","private XTypeSpec buildProxy(XTypeElement moduleElement)","0","-","-","-","-"
"4088","constructorProxyTypeName","/** The name of the class that hosts the module constructor proxy method. */
  private static XClassName constructorProxyTypeName(XTypeElement moduleElement)","0","-","-","-","-"
"4089","nonPublicNullaryConstructor","/**
   * The module constructor being proxied. A proxy is generated if it is not publicly accessible and
   * has no arguments. If an implicit reference to the enclosing class exists, or the module is
   * abstract, no proxy method can be generated.
   */
  private static Optional<XConstructorElement> nonPublicNullaryConstructor(
      XTypeElement moduleElement)","0","-","-","-","-"
"4090","newModuleInstance","/**
   * Returns a code block that creates a new module instance, either by invoking the nullary
   * constructor if it's accessible from","0","-","-","-","-"
"4091","UnscopedDirectInstanceRequestRepresentationFactory","@Inject
  UnscopedDirectInstanceRequestRepresentationFactory(
      AssistedFactoryRequestRepresentation.Factory assistedFactoryRequestRepresentationFactory,
      ComponentInstanceRequestRepresentation.Factory componentInstanceRequestRepresentationFactory,
      ComponentProvisionRequestRepresentation.Factory
          componentProvisionRequestRepresentationFactory,
      ComponentRequirementRequestRepresentation.Factory
          componentRequirementRequestRepresentationFactory,
      DelegateRequestRepresentation.Factory delegateRequestRepresentationFactory,
      MapRequestRepresentation.Factory mapRequestRepresentationFactory,
      OptionalRequestRepresentation.Factory optionalRequestRepresentationFactory,
      SetRequestRepresentation.Factory setRequestRepresentationFactory,
      SimpleMethodRequestRepresentation.Factory simpleMethodRequestRepresentationFactory,
      SubcomponentCreatorRequestRepresentation.Factory
          subcomponentCreatorRequestRepresentationFactory)","0","-","-","-","-"
"4092","create","/** Returns a direct, unscoped binding expression for a","0","-","-","-","-"
"4093","ComponentRequestRepresentations","@Inject
  ComponentRequestRepresentations(
      @ParentComponent Optional<ComponentRequestRepresentations> parent,
      BindingGraph graph,
      ComponentImplementation componentImplementation,
      ComponentRequirementExpressions componentRequirementExpressions,
      MembersInjectionBindingRepresentation.Factory membersInjectionBindingRepresentationFactory,
      ProvisionBindingRepresentation.Factory provisionBindingRepresentationFactory,
      ProductionBindingRepresentation.Factory productionBindingRepresentationFactory,
      XProcessingEnv processingEnv)","0","-","-","-","-"
"4094","getDependencyExpression","/**
   * Returns an expression that evaluates to the value of a binding request for a binding owned by
   * this component or an ancestor.
   *
   * @param requestingClass the class that will contain the expression
   * @throws IllegalStateException if there is no binding expression that satisfies the request
   */
  public XExpression getDependencyExpression(BindingRequest request, XClassName requestingClass)","0","-","-","-","-"
"4095","getDependencyExpressionForComponentMethod","/**
   * Equivalent to","0","-","-","-","-"
"4096","getCreateMethodArgumentsCodeBlock","/**
   * Returns the","0","-","-","-","-"
"4097","getCreateMethodArgumentsCodeBlocks","private ImmutableList<XCodeBlock> getCreateMethodArgumentsCodeBlocks(
      ContributionBinding binding, XClassName requestingClass)","0","-","-","-","-"
"4098","frameworkRequest","private static BindingRequest frameworkRequest(
      ContributionBinding binding, DependencyRequest dependency)","0","-","-","-","-"
"4099","getDependencyArgumentExpression","/**
   * Returns an expression that evaluates to the value of a dependency request, for passing to a
   * binding method, an","0","-","-","-","-"
"4100","getComponentMethod","/** Returns the implementation of a component method. */
  public XFunSpec getComponentMethod(ComponentMethodDescriptor componentMethod)","0","-","-","-","-"
"4101","getComponentMethodCodeBlock","private XCodeBlock getComponentMethodCodeBlock(ComponentMethodDescriptor componentMethod)","0","-","-","-","-"
"4102","getComponentMethodExpression","private XExpression getComponentMethodExpression(ComponentMethodDescriptor componentMethod)","0","-","-","-","-"
"4103","getRequestRepresentation","/** Returns the","0","-","-","-","-"
"4104","getBindingRepresentation","private BindingRepresentation getBindingRepresentation(Binding binding)","0","-","-","-","-"
"4105","getBindingRepresentationUncached","private BindingRepresentation getBindingRepresentationUncached(Binding binding)","0","-","-","-","-"
"4106","ComponentCreatorImplementationFactory","@Inject
  ComponentCreatorImplementationFactory(
      CompilerOptions compilerOptions, ComponentImplementation componentImplementation)","0","-","-","-","-"
"4107","create","/** Returns a new creator implementation for the given component, if necessary. */
  Optional<ComponentCreatorImplementation> create()","0","-","-","-","-"
"4108","build","/** Builds the","0","-","-","-","-"
"4109","componentDescriptor","/** Returns the descriptor for the component. */
    final ComponentDescriptor componentDescriptor()","0","-","-","-","-"
"4110","componentConstructorRequirements","/**
     * The set of requirements that must be passed to the component's constructor in the order
     * they must be passed.
     */
    final ImmutableSet<ComponentRequirement> componentConstructorRequirements()","0","-","-","-","-"
"4111","setterMethods","/** Returns the requirements that have setter methods on the creator type. */
    abstract ImmutableSet<ComponentRequirement> setterMethods();","0","-","-","-","-"
"4112","factoryMethodParameters","/**
     * Returns the component requirements that have factory method parameters, mapped to the name
     * for that parameter.
     */
    abstract ImmutableMap<ComponentRequirement, String> factoryMethodParameters();","0","-","-","-","-"
"4113","userSettableRequirements","/**
     * The","0","-","-","-","-"
"4114","neededUserSettableRequirements","/**
     * Component requirements that are both settable by the creator and needed to construct the
     * component.
     */
    private Set<ComponentRequirement> neededUserSettableRequirements()","0","-","-","-","-"
"4115","setModifiers","private void setModifiers()","0","-","-","-","-"
"4116","visibility","/** Returns the visibility modifier the generated class should have, if any. */
    protected abstract Optional<Modifier> visibility();","0","-","-","-","-"
"4117","setSupertype","/** Sets the superclass being extended or interface being implemented for this creator. */
    protected abstract void setSupertype();","0","-","-","-","-"
"4118","addConstructor","/** Adds a constructor for the creator type, if needed. */
    protected void addConstructor()","0","-","-","-","-"
"4119","addFields","private ImmutableMap<ComponentRequirement, FieldSpec> addFields()","0","-","-","-","-"
"4120","addSetterMethods","private void addSetterMethods()","0","-","-","-","-"
"4121","setterMethodBuilder","/** Creates a new setter method builder, with no method body, for the given requirement. */
    protected abstract XFunSpecs.Builder setterMethodBuilder(ComponentRequirement requirement);","0","-","-","-","-"
"4122","createSetterMethod","private Optional<XFunSpec> createSetterMethod(
        ComponentRequirement requirement, RequirementStatus status)","0","-","-","-","-"
"4123","normalSetterMethod","private XFunSpec normalSetterMethod(ComponentRequirement requirement)","0","-","-","-","-"
"4124","noopSetterMethod","private XFunSpec noopSetterMethod(ComponentRequirement requirement)","0","-","-","-","-"
"4125","repeatedModuleSetterMethod","private XFunSpec repeatedModuleSetterMethod(ComponentRequirement requirement)","0","-","-","-","-"
"4126","parameter","private ParameterSpec parameter(XFunSpec method)","0","-","-","-","-"
"4127","maybeReturnThis","private XFunSpec maybeReturnThis(XFunSpecs.Builder method)","0","-","-","-","-"
"4128","addFactoryMethod","private void addFactoryMethod()","0","-","-","-","-"
"4129","factoryMethod","XFunSpec factoryMethod()","0","-","-","-","-"
"4130","InaccessibleMapKeyProxyGenerator","@Inject
  InaccessibleMapKeyProxyGenerator(XProcessingEnv processingEnv, XFiler filer)","0","-","-","-","-"
"4131","originatingElement","@Override
  public XElement originatingElement(ContributionBinding binding)","0","-","-","-","-"
"4132","topLevelTypes","@Override
  public ImmutableList<XTypeSpec> topLevelTypes(ContributionBinding binding)","0","-","-","-","-"
"4133","lazyClassKeyField","private Optional<FieldSpec> lazyClassKeyField(ContributionBinding binding)","0","-","-","-","-"
"4134","get","/**
   * Returns the result of a production.
   *
   * @throws ExecutionException if the production threw an exception
   */
  public abstract T get() throws ExecutionException;","0","-","-","-","-"
"4135","equals","/**
   * Two","0","-","-","-","-"
"4136","hashCode","/** Returns an appropriate hash code to match","0","-","-","-","-"
"4137","successful","/** Returns a successful","0","-","-","-","-"
"4138","failed","/**
   * Returns a failed","0","-","-","-","-"
"4139","Successful","private Successful(@NullableDecl T value)","0","-","-","-","-"
"4140","get","@Override
    @NullableDecl
    public T get()","0","-","-","-","-"
"4141","equals","@Override
    public boolean equals(Object o)","0","-","-","-","-"
"4142","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"4143","toString","@Override
    public String toString()","0","-","-","-","-"
"4144","Failed","private Failed(Throwable throwable)","0","-","-","-","-"
"4145","get","@Override
    public T get() throws ExecutionException","0","-","-","-","-"
"4146","equals","@Override
    public boolean equals(Object o)","0","-","-","-","-"
"4147","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"4148","toString","@Override
    public String toString()","0","-","-","-","-"
"4149","Produced","private Produced()","0","-","-","-","-"
"4150","onProducerFutureCancelled","/** Called when the future for a producer this listener has been added to is cancelled. */
  // Note that this name is intentionally a bit verbose to make it unlikely that it will conflict
  // with any user-defined methods on a component.
  void onProducerFutureCancelled(boolean mayInterruptIfRunning);","0","-","-","-","-"
"4151","AnnotationUsages","private AnnotationUsages()","0","-","-","-","-"
"4152","AbstractMapProducer","AbstractMapProducer(ImmutableMap<K, Producer<V>> contributingMap)","0","-","-","-","-"
"4153","contributingMap","/** The map of","0","-","-","-","-"
"4154","Builder","Builder(int size)","0","-","-","-","-"
"4155","put","/** Associates","0","-","-","-","-"
"4156","put","/** Associates","0","-","-","-","-"
"4157","put","/**
     * Legacy javax version of the method to support libraries compiled with an older version of
     * Dagger. Do not use directly.
     */
    @Deprecated
    Builder<K, V, V2> put(K key, javax.inject.Provider<V> providerOfValue)","0","-","-","-","-"
"4158","putAll","/** Adds contributions from a super-implementation of a component into this builder. */
    Builder<K, V, V2> putAll(Producer<Map<K, V2>> mapOfProducers)","0","-","-","-","-"
"4159","of","public static <V> LazyMapOfProducedProducer<V> of(
      AbstractProducer<Map<String, Produced<V>>> delegate)","0","-","-","-","-"
"4160","LazyMapOfProducedProducer","private LazyMapOfProducedProducer(AbstractProducer<Map<String, Produced<V>>> delegate)","0","-","-","-","-"
"4161","compute","@Override
  public ListenableFuture<Map<Class<?>, Produced<V>>> compute()","0","-","-","-","-"
"4162","apply","@Override
          public Map<Class<?>, Produced<V>> apply(Map<String, Produced<V>> classMap)","0","-","-","-","-"
"4163","empty","public static <T> Producer<Set<T>> empty()","0","-","-","-","-"
"4164","builder","/**
   * Constructs a new","0","-","-","-","-"
"4165","Builder","private Builder(int individualProducerSize, int collectionProducerSize)","0","-","-","-","-"
"4166","addProducer","@SuppressWarnings(""unchecked"")
    public Builder<T> addProducer(Producer<? extends T> individualProducer)","0","-","-","-","-"
"4167","addCollectionProducer","@SuppressWarnings(""unchecked"")
    public Builder<T> addCollectionProducer(
        Producer<? extends Collection<? extends T>> multipleProducer)","0","-","-","-","-"
"4168","build","public SetOfProducedProducer<T> build()","0","-","-","-","-"
"4169","SetOfProducedProducer","private SetOfProducedProducer(
      List<Producer<T>> individualProducers, List<Producer<Collection<T>>> collectionProducers)","0","-","-","-","-"
"4170","compute","/**
   * Returns a future","0","-","-","-","-"
"4171","apply","@Override
          public Set<Produced<T>> apply(
              List<Produced<? extends Collection<T>>> producedCollections)","0","-","-","-","-"
"4172","callDependencyMethod","/** Calls a method on a component dependency to get a future. */
  protected abstract ListenableFuture<T> callDependencyMethod();","0","-","-","-","-"
"4173","get","@Override
  public final ListenableFuture<T> get()","0","-","-","-","-"
"4174","run","@Override
              public void run()","0","-","-","-","-"
"4175","cancel","@Override
  public final void cancel(boolean mayInterruptIfRunning)","0","-","-","-","-"
"4176","newDependencyView","@Override
  public final Producer<T> newDependencyView()","0","-","-","-","-"
"4177","newEntryPointView","@Override
  public final Producer<T> newEntryPointView(final CancellationListener cancellationListener)","0","-","-","-","-"
"4178","get","@Override
      public ListenableFuture<T> get()","0","-","-","-","-"
"4179","run","@Override
                public void run()","0","-","-","-","-"
"4180","builder","/** Returns a new","0","-","-","-","-"
"4181","MapOfProducerProducer","private MapOfProducerProducer(ImmutableMap<K, Producer<V>> contributingMap)","0","-","-","-","-"
"4182","compute","@Override
  public ListenableFuture<Map<K, Producer<V>>> compute()","0","-","-","-","-"
"4183","Builder","private Builder(int size)","0","-","-","-","-"
"4184","put","@Override
    public Builder<K, V> put(K key, Producer<V> producerOfValue)","0","-","-","-","-"
"4185","put","@Override
    public Builder<K, V> put(K key, Provider<V> providerOfValue)","0","-","-","-","-"
"4186","put","/**
     * Legacy javax version of the method to support libraries compiled with an older version of
     * Dagger. Do not use directly.
     */
    @Deprecated
    public Builder<K, V> put(K key, javax.inject.Provider<V> providerOfValue)","0","-","-","-","-"
"4187","putAll","@Override
    public Builder<K, V> putAll(Producer<Map<K, Producer<V>>> mapOfProducerProducer)","0","-","-","-","-"
"4188","build","/** Returns a new","0","-","-","-","-"
"4189","newDependencyView","@Override
  public Producer<Map<K, Producer<V>>> newDependencyView()","0","-","-","-","-"
"4190","newEntryPointView","@Override
  public Producer<Map<K, Producer<V>>> newEntryPointView(
      CancellationListener cancellationListener)","0","-","-","-","-"
"4191","newTransformedValuesView","private Producer<Map<K, Producer<V>>> newTransformedValuesView(
      Function<Producer<V>, Producer<V>> valueTransformationFunction)","0","-","-","-","-"
"4192","toDependencyView","@SuppressWarnings(""unchecked"")
  private static <T> Function<Producer<T>, Producer<T>> toDependencyView()","0","-","-","-","-"
"4193","toEntryPointView","private static <T> Function<Producer<T>, Producer<T>> toEntryPointView(
      final CancellationListener cancellationListener)","0","-","-","-","-"
"4194","apply","@Override
      public Producer<T> apply(Producer<T> input)","0","-","-","-","-"
"4195","apply","@Override
        public Producer<?> apply(Producer<?> input)","0","-","-","-","-"
"4196","get","@Override
  public ListenableFuture<T> get()","0","-","-","-","-"
"4197","setDelegatedProducer","@Deprecated
  public void setDelegatedProducer(Producer<T> delegate)","0","-","-","-","-"
"4198","setDelegate","/**
   * Sets","0","-","-","-","-"
"4199","getDelegate","/**
   * Returns the factory's delegate.
   *
   * @throws NullPointerException if the delegate has not been set
   */
  CancellableProducer<T> getDelegate()","0","-","-","-","-"
"4200","cancel","@Override
  public void cancel(boolean mayInterruptIfRunning)","0","-","-","-","-"
"4201","newDependencyView","@Override
  public Producer<T> newDependencyView()","0","-","-","-","-"
"4202","createDelegate","@Override
      Producer<T> createDelegate()","0","-","-","-","-"
"4203","newEntryPointView","@Override
  public Producer<T> newEntryPointView(final CancellationListener cancellationListener)","0","-","-","-","-"
"4204","createDelegate","@Override
      Producer<T> createDelegate()","0","-","-","-","-"
"4205","get","@Override
              public Producer<T> get()","0","-","-","-","-"
"4206","createDelegate","abstract Producer<T> createDelegate();","0","-","-","-","-"
"4207","get","@Override
    public ListenableFuture<T> get()","0","-","-","-","-"
"4208","of","public static <V> LazyMapProducer<V> of(AbstractProducer<Map<String, V>> delegate)","0","-","-","-","-"
"4209","LazyMapProducer","private LazyMapProducer(AbstractProducer<Map<String, V>> delegate)","0","-","-","-","-"
"4210","compute","@Override
  public ListenableFuture<Map<Class<?>, V>> compute()","0","-","-","-","-"
"4211","apply","@Override
          public Map<Class<?>, V> apply(Map<String, V> classMap)","0","-","-","-","-"
"4212","of","public static <V> LazyMapOfProducerProducer<V> of(
      AbstractProducer<Map<String, Producer<V>>> delegate)","0","-","-","-","-"
"4213","LazyMapOfProducerProducer","private LazyMapOfProducerProducer(AbstractProducer<Map<String, Producer<V>>> delegate)","0","-","-","-","-"
"4214","compute","@Override
  public ListenableFuture<Map<Class<?>, Producer<V>>> compute()","0","-","-","-","-"
"4215","apply","@Override
          public Map<Class<?>, Producer<V>> apply(Map<String, Producer<V>> classMap)","0","-","-","-","-"
"4216","AbstractProducesMethodProducer","protected AbstractProducesMethodProducer(
      Provider<ProductionComponentMonitor> monitorProvider,
      @NullableDecl ProducerToken token,
      Provider<Executor> executorProvider)","0","-","-","-","-"
"4217","AbstractProducesMethodProducer","/**
   * Legacy javax version of the method to support libraries compiled with an older version of
   * Dagger. Do not use directly.
   */
  @Deprecated
  protected AbstractProducesMethodProducer(
      javax.inject.Provider<ProductionComponentMonitor> monitorProvider,
      @NullableDecl ProducerToken token,
      javax.inject.Provider<Executor> executorProvider)","0","-","-","-","-"
"4218","compute","@Override
  protected final ListenableFuture<T> compute()","0","-","-","-","-"
"4219","collectDependencies","/**
   * Collects the asynchronous dependencies to be passed to","0","-","-","-","-"
"4220","apply","/** @deprecated this may only be called from the internal","0","-","-","-","-"
"4221","callProducesMethod","/**
   * Calls the","0","-","-","-","-"
"4222","execute","/** @deprecated this may only be called from the internal","0","-","-","-","-"
"4223","MapProducer","private MapProducer(ImmutableMap<K, Producer<V>> contributingMap)","0","-","-","-","-"
"4224","builder","/** Returns a new","0","-","-","-","-"
"4225","Builder","private Builder(int size)","0","-","-","-","-"
"4226","put","@Override
    public Builder<K, V> put(K key, Producer<V> producerOfValue)","0","-","-","-","-"
"4227","put","@Override
    public Builder<K, V> put(K key, Provider<V> providerOfValue)","0","-","-","-","-"
"4228","put","/**
     * Legacy javax version of the method to support libraries compiled with an older version of
     * Dagger. Do not use directly.
     */
    @Deprecated
    public Builder<K, V> put(K key, javax.inject.Provider<V> providerOfValue)","0","-","-","-","-"
"4229","putAll","@Override
    public Builder<K, V> putAll(Producer<Map<K, V>> mapProducer)","0","-","-","-","-"
"4230","build","/** Returns a new","0","-","-","-","-"
"4231","compute","@Override
  protected ListenableFuture<Map<K, V>> compute()","0","-","-","-","-"
"4232","apply","@Override
                public Entry<K, V> apply(V computedValue)","0","-","-","-","-"
"4233","apply","@Override
          public Map<K, V> apply(List<Map.Entry<K, V>> entries)","0","-","-","-","-"
"4234","productionImplementationExecutor","@Binds
  @ProductionScope
  @ProductionImplementation
  abstract Executor productionImplementationExecutor(@Production Executor executor);","0","-","-","-","-"
"4235","ProductionExecutorModule","private ProductionExecutorModule()","0","-","-","-","-"
"4236","cancel","/**
   * Cancels this producer. If","0","-","-","-","-"
"4237","newDependencyView","/** Returns a new view of this producer for use as a dependency of another node. */
  Producer<T> newDependencyView();","0","-","-","-","-"
"4238","newEntryPointView","/**
   * Returns a new view of this producer for use as an entry point.
   *
   * <p>When the view's future is cancelled, the given","0","-","-","-","-"
"4239","createFutureProduced","/**
   * Returns a future of","0","-","-","-","-"
"4240","apply","@Override
        public Produced<Object> apply(Object result)","0","-","-","-","-"
"4241","resultToProduced","@SuppressWarnings(","0","-","-","-","-"
"4242","apply","@Override
        public ListenableFuture<Produced<Object>> apply(Throwable t) throws Exception","0","-","-","-","-"
"4243","futureFallbackForProduced","@SuppressWarnings(","0","-","-","-","-"
"4244","createFutureSingletonSet","/**
   * Returns a future of a","0","-","-","-","-"
"4245","apply","@Override
          public Set<T> apply(T value)","0","-","-","-","-"
"4246","allAsSet","/**
   * Creates a new","0","-","-","-","-"
"4247","apply","@Override
          public Set<T> apply(List<T> values)","0","-","-","-","-"
"4248","producerFromProvider","/**
   * Returns a producer that immediately executes the binding logic for the given provider every
   * time it is called.
   */
  public static <T> Producer<T> producerFromProvider(final Provider<T> provider)","0","-","-","-","-"
"4249","get","@Override
      public ListenableFuture<T> get()","0","-","-","-","-"
"4250","producerFromProvider","/**
   * Legacy javax version of the method to support libraries compiled with an older version of
   * Dagger. Do not use directly.
   */
  @Deprecated
  public static <T> Producer<T> producerFromProvider(final javax.inject.Provider<T> provider)","0","-","-","-","-"
"4251","immediateProducer","/**
   * Returns a producer that succeeds with the given value.
   *
   * @deprecated Prefer the non-internal version of this method:","0","-","-","-","-"
"4252","immediateFailedProducer","/**
   * Returns a producer that fails with the given exception.
   *
   * @deprecated Prefer the non-internal version of this method:","0","-","-","-","-"
"4253","nonCancellationPropagatingViewOf","/**
   * Returns a new view of the given","0","-","-","-","-"
"4254","entryPointViewOf","/**
   * Returns a new view of the given","0","-","-","-","-"
"4255","cancel","/**
   * Calls","0","-","-","-","-"
"4256","emptyMapProducer","@SuppressWarnings(""unchecked"") // safe contravariant cast
  public static <K, V> Producer<Map<K, V>> emptyMapProducer()","0","-","-","-","-"
"4257","cancel","@Override
    public void cancel(boolean mayInterruptIfRunning)","0","-","-","-","-"
"4258","newDependencyView","@Override
    public Producer<T> newDependencyView()","0","-","-","-","-"
"4259","newEntryPointView","@Override
    public Producer<T> newEntryPointView(CancellationListener cancellationListener)","0","-","-","-","-"
"4260","Producers","private Producers()","0","-","-","-","-"
"4261","MapOfProducedProducer","private MapOfProducedProducer(ImmutableMap<K, Producer<V>> contributingMap)","0","-","-","-","-"
"4262","compute","@Override
  public ListenableFuture<Map<K, Produced<V>>> compute()","0","-","-","-","-"
"4263","apply","@Override
          public Map<K, Produced<V>> apply(List<Map.Entry<K, Produced<V>>> entries)","0","-","-","-","-"
"4264","apply","@Override
            public ListenableFuture<Map.Entry<Object, Produced<Object>>> apply(
                final Map.Entry<Object, Producer<Object>> entry)","0","-","-","-","-"
"4265","apply","@Override
                    public Map.Entry<Object, Produced<Object>> apply(Produced<Object> value)","0","-","-","-","-"
"4266","entryUnwrapper","@SuppressWarnings(","0","-","-","-","-"
"4267","builder","/** Returns a new","0","-","-","-","-"
"4268","Builder","private Builder(int size)","0","-","-","-","-"
"4269","put","@Override
    public Builder<K, V> put(K key, Producer<V> producerOfValue)","0","-","-","-","-"
"4270","put","@Override
    public Builder<K, V> put(K key, Provider<V> providerOfValue)","0","-","-","-","-"
"4271","put","/**
     * Legacy javax version of the method to support libraries compiled with an older version of
     * Dagger. Do not use directly.
     */
    @Deprecated
    public Builder<K, V> put(K key, javax.inject.Provider<V> providerOfValue)","0","-","-","-","-"
"4272","putAll","@Override
    public Builder<K, V> putAll(Producer<Map<K, Produced<V>>> mapOfProducedProducer)","0","-","-","-","-"
"4273","build","/** Returns a new","0","-","-","-","-"
"4274","empty","@SuppressWarnings(","0","-","-","-","-"
"4275","builder","/**
   * Constructs a new","0","-","-","-","-"
"4276","Builder","private Builder(int individualProducerSize, int collectionProducerSize)","0","-","-","-","-"
"4277","addProducer","@SuppressWarnings(""unchecked"")
    public Builder<T> addProducer(Producer<? extends T> individualProducer)","0","-","-","-","-"
"4278","addCollectionProducer","@SuppressWarnings(""unchecked"")
    public Builder<T> addCollectionProducer(
        Producer<? extends Collection<? extends T>> multipleProducer)","0","-","-","-","-"
"4279","build","public SetProducer<T> build()","0","-","-","-","-"
"4280","SetProducer","private SetProducer(
      List<Producer<T>> individualProducers, List<Producer<Collection<T>>> collectionProducers)","0","-","-","-","-"
"4281","compute","/**
   * Returns a future","0","-","-","-","-"
"4282","apply","@Override
          public Set<T> apply(List<Collection<T>> sets)","0","-","-","-","-"
"4283","AbstractProducer","protected AbstractProducer()","0","-","-","-","-"
"4284","compute","/** Computes this producer's future, which is then cached in","0","-","-","-","-"
"4285","get","@Override
  public final ListenableFuture<T> get()","0","-","-","-","-"
"4286","cancel","@Override
  public final void cancel(boolean mayInterruptIfRunning)","0","-","-","-","-"
"4287","newDependencyView","@Override
  public Producer<T> newDependencyView()","0","-","-","-","-"
"4288","newEntryPointView","@Override
  public Producer<T> newEntryPointView(CancellationListener cancellationListener)","0","-","-","-","-"
"4289","get","@SuppressWarnings(""FutureReturnValueIgnored"")
    @Override
    public ListenableFuture<T> get()","0","-","-","-","-"
"4290","addCancellationListener","void addCancellationListener(final CancellationListener cancellationListener)","0","-","-","-","-"
"4291","run","@Override
            public void run()","0","-","-","-","-"
"4292","setFuture","@Override
    public boolean setFuture(ListenableFuture<? extends T> future)","0","-","-","-","-"
"4293","cancel","@Override
    public boolean cancel(boolean mayInterruptIfRunning)","0","-","-","-","-"
"4294","doCancel","/** Actually cancels this future. */
    void doCancel(boolean mayInterruptIfRunning)","0","-","-","-","-"
"4295","nonCancellationPropagating","private static <T> ListenableFuture<T> nonCancellationPropagating(ListenableFuture<T> future)","0","-","-","-","-"
"4296","NonCancellationPropagatingFuture","NonCancellationPropagatingFuture(final ListenableFuture<T> delegate)","0","-","-","-","-"
"4297","run","@Override
    public void run()","0","-","-","-","-"
"4298","pendingToString","@Override
    protected String pendingToString()","0","-","-","-","-"
"4299","afterDone","@Override
    protected void afterDone()","0","-","-","-","-"
"4300","interrupted","public boolean interrupted()","0","-","-","-","-"
"4301","get","/**
   * Returns a future representing a running task that produces a value. Calling this method will
   * trigger the submission of this task to the executor, if it has not already been triggered. In
   * order to trigger this task's submission, the transitive dependencies required to produce the
   *","0","-","-","-","-"
"4302","immediateProducer","/** Returns a producer that succeeds with the given value. */
  public static <T> Producer<T> immediateProducer(final T value)","0","-","-","-","-"
"4303","immediateFailedProducer","/** Returns a producer that fails with the given exception. */
  public static <T> Producer<T> immediateFailedProducer(final Throwable throwable)","0","-","-","-","-"
"4304","ImmediateProducer","ImmediateProducer(ListenableFuture<T> future)","0","-","-","-","-"
"4305","get","@Override
    public ListenableFuture<T> get()","0","-","-","-","-"
"4306","cancel","@Override
    public void cancel(boolean mayInterruptIfRunning)","0","-","-","-","-"
"4307","newDependencyView","@Override
    public Producer<T> newDependencyView()","0","-","-","-","-"
"4308","newEntryPointView","@Override
    public Producer<T> newEntryPointView(CancellationListener cancellationListener)","0","-","-","-","-"
"4309","Producers","private Producers()","0","-","-","-","-"
"4310","producerTimingRecorderFor","/** Returns a timing recorder for an individual","0","-","-","-","-"
"4311","create","/** Creates a component-specific timing recorder when the component is created. */
    ProductionComponentTimingRecorder create(Object component);","0","-","-","-","-"
"4312","producerMonitorFor","/** Returns a monitor for an individual","0","-","-","-","-"
"4313","producerMonitorFor","@Override
        public ProducerMonitor producerMonitorFor(ProducerToken token)","0","-","-","-","-"
"4314","noOp","/** Returns a monitor that does no monitoring. */
  public static ProductionComponentMonitor noOp()","0","-","-","-","-"
"4315","create","/** Creates a component-specific monitor when the component is created. */
    public abstract ProductionComponentMonitor create(Object component);","0","-","-","-","-"
"4316","create","@Override
          public ProductionComponentMonitor create(Object component)","0","-","-","-","-"
"4317","noOp","/** Returns a factory that returns no-op monitors. */
    public static Factory noOp()","0","-","-","-","-"
"4318","TimingProductionComponentMonitor","TimingProductionComponentMonitor(ProductionComponentTimingRecorder recorder, Ticker ticker)","0","-","-","-","-"
"4319","producerMonitorFor","@Override
  public ProducerMonitor producerMonitorFor(ProducerToken token)","0","-","-","-","-"
"4320","Factory","public Factory(ProductionComponentTimingRecorder.Factory recorderFactory)","0","-","-","-","-"
"4321","Factory","Factory(ProductionComponentTimingRecorder.Factory recorderFactory, Ticker ticker)","0","-","-","-","-"
"4322","create","@Override
    public ProductionComponentMonitor create(Object component)","0","-","-","-","-"
"4323","delegatingProductionComponentMonitorFactory","/**
   * Returns a monitor factory that delegates to the given factories, and ensures that any method
   * called on this object, even transitively, does not throw a","0","-","-","-","-"
"4324","createMonitorForComponent","/**
   * Creates a new monitor for the given component, from a set of monitor factories. This will not
   * throw a","0","-","-","-","-"
"4325","NonThrowingProductionComponentMonitor","NonThrowingProductionComponentMonitor(ProductionComponentMonitor delegate)","0","-","-","-","-"
"4326","producerMonitorFor","@Override
    public ProducerMonitor producerMonitorFor(ProducerToken token)","0","-","-","-","-"
"4327","Factory","Factory(ProductionComponentMonitor.Factory delegate)","0","-","-","-","-"
"4328","create","@Override
      public ProductionComponentMonitor create(Object component)","0","-","-","-","-"
"4329","NonThrowingProducerMonitor","NonThrowingProducerMonitor(ProducerMonitor delegate)","0","-","-","-","-"
"4330","requested","@Override
    public void requested()","0","-","-","-","-"
"4331","ready","@Override
    public void ready()","0","-","-","-","-"
"4332","methodStarting","@Override
    public void methodStarting()","0","-","-","-","-"
"4333","methodFinished","@Override
    public void methodFinished()","0","-","-","-","-"
"4334","succeeded","@Override
    public void succeeded(Object o)","0","-","-","-","-"
"4335","failed","@Override
    public void failed(Throwable t)","0","-","-","-","-"
"4336","DelegatingProductionComponentMonitor","DelegatingProductionComponentMonitor(ImmutableList<ProductionComponentMonitor> delegates)","0","-","-","-","-"
"4337","producerMonitorFor","@Override
    public ProducerMonitor producerMonitorFor(ProducerToken token)","0","-","-","-","-"
"4338","Factory","Factory(Iterable<? extends ProductionComponentMonitor.Factory> delegates)","0","-","-","-","-"
"4339","create","@Override
      public ProductionComponentMonitor create(Object component)","0","-","-","-","-"
"4340","DelegatingProducerMonitor","DelegatingProducerMonitor(ImmutableList<ProducerMonitor> delegates)","0","-","-","-","-"
"4341","requested","@Override
    public void requested()","0","-","-","-","-"
"4342","ready","@Override
    public void ready()","0","-","-","-","-"
"4343","methodStarting","@Override
    public void methodStarting()","0","-","-","-","-"
"4344","methodFinished","@Override
    public void methodFinished()","0","-","-","-","-"
"4345","succeeded","@Override
    public void succeeded(Object o)","0","-","-","-","-"
"4346","failed","@Override
    public void failed(Throwable t)","0","-","-","-","-"
"4347","noOpProductionComponentMonitorProvider","/** Returns a provider of a no-op component monitor. */
  public static Provider<ProductionComponentMonitor> noOpProductionComponentMonitorProvider()","0","-","-","-","-"
"4348","get","@Override
            public ProductionComponentMonitor get()","0","-","-","-","-"
"4349","logCreateException","private static void logCreateException(
      RuntimeException e, ProductionComponentMonitor.Factory factory, Object component)","0","-","-","-","-"
"4350","logProducerMonitorForException","private static void logProducerMonitorForException(
      RuntimeException e, ProductionComponentMonitor monitor, ProducerToken token)","0","-","-","-","-"
"4351","logProducerMonitorMethodException","private static void logProducerMonitorMethodException(
      RuntimeException e, ProducerMonitor monitor, String method)","0","-","-","-","-"
"4352","logProducerMonitorArgMethodException","private static void logProducerMonitorArgMethodException(
      RuntimeException e, ProducerMonitor monitor, String method, Object arg)","0","-","-","-","-"
"4353","Monitors","private Monitors()","0","-","-","-","-"
"4354","ProducerToken","private ProducerToken(@NullableDecl Class<?> classToken, @NullableDecl String methodName)","0","-","-","-","-"
"4355","create","/**
   * Creates a token for a class token that represents the generated factory for a producer method.
   *
   * <p><b>Do not use this!</b> This is intended to be called by generated code only, and its
   * signature may change at any time.
   */
  public static ProducerToken create(Class<?> classToken)","0","-","-","-","-"
"4356","create","/**
   * Creates a token for a producer method.
   *
   * <p><b>Do not use this!</b> This is intended to be called by generated code only, and its
   * signature may change at any time.
   */
  public static ProducerToken create(String methodName)","0","-","-","-","-"
"4357","equals","/** Two tokens are equal if they represent the same method. */
  @Override
  public boolean equals(Object o)","0","-","-","-","-"
"4358","hashCode","/** Returns an appropriate hash code to match","0","-","-","-","-"
"4359","toString","/** Returns a representation of the method. */
  @Override
  public String toString()","0","-","-","-","-"
"4360","requested","/**
   * Called when the producer's output is requested; that is, when the first method is called that
   * requires the production of this producer's output.
   *
   * <p>Note that if a method depends on","0","-","-","-","-"
"4361","ready","/**
   * Called when all of the producer's inputs are available. This is called regardless of whether
   * the inputs have succeeded or not; when the inputs have succeeded, this is called prior to
   * scheduling the method on the executor, and if an input has failed and the producer will be
   * skipped, this method will be called before","0","-","-","-","-"
"4362","methodStarting","/**
   * Called when the producer method is about to start executing. This will be called from the same
   * thread as the producer method itself.
   *
   * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
   * calls to","0","-","-","-","-"
"4363","methodFinished","/**
   * Called when the producer method has finished executing. This will be called from the same
   * thread as","0","-","-","-","-"
"4364","succeeded","/**
   * Called when the producer’s future has completed successfully with a value.
   *
   * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
   * calls to","0","-","-","-","-"
"4365","failed","/**
   * Called when the producer's future has failed with an exception.
   *
   * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
   * calls to","0","-","-","-","-"
"4366","addCallbackTo","/**
   * Adds this monitor's completion methods as a callback to the future. This is only intended to be
   * overridden in the framework!
   */
  public <T> void addCallbackTo(ListenableFuture<T> future)","0","-","-","-","-"
"4367","onSuccess","@Override
          public void onSuccess(T value)","0","-","-","-","-"
"4368","onFailure","@Override
          public void onFailure(Throwable t)","0","-","-","-","-"
"4369","addCallbackTo","@Override
        public <T> void addCallbackTo(ListenableFuture<T> future)","0","-","-","-","-"
"4370","noOp","/** Returns a monitor that does no monitoring. */
  public static ProducerMonitor noOp()","0","-","-","-","-"
"4371","recordMethod","/**
   * Reports that the producer method has finished executing with the given statistics.
   *
   * <p>If the producer was skipped due to any of its inputs failing, then this will not be called.
   *
   * @param startedNanos the wall-clock time, in nanoseconds, when the producer method started
   *     executing, measured from when the first method on the","0","-","-","-","-"
"4372","recordSuccess","/**
   * Reports that the producer's future has succeeded with the given statistics.
   *
   * <p>If the producer was skipped due to any of its inputs failing, then this will not be called.
   *
   * @param latencyNanos the wall-clock time, in nanoseconds, of the producer's latency, measured
   *     from when the producer method started to when the future finished.
   */
  @SuppressWarnings(""GoodTime"") // should accept a java.time.Duration
  public void recordSuccess(long latencyNanos)","0","-","-","-","-"
"4373","recordFailure","/**
   * Reports that the producer's future has failed with the given statistics.
   *
   * @param exception the exception that the future failed with.
   * @param latencyNanos the wall-clock time, in nanoseconds, of the producer's latency, measured
   *     from when the producer method started to when the future finished.
   */
  @SuppressWarnings(""GoodTime"") // should accept a java.time.Duration
  public void recordFailure(Throwable exception, long latencyNanos)","0","-","-","-","-"
"4374","recordSkip","/**
   * Reports that the producer was skipped because one of its inputs failed.
   *
   * @param exception the exception that its input failed with. If multiple inputs failed, this
   *    exception will be chosen arbitrarily from the input failures.
   */
  public void recordSkip(Throwable exception)","0","-","-","-","-"
"4375","noOp","/** Returns a producer recorder that does nothing. */
  public static ProducerTimingRecorder noOp()","0","-","-","-","-"
"4376","delegatingProductionComponentTimingRecorderFactory","/**
   * Returns a timing recorder factory that delegates to the given factories, and ensures that any
   * method called on this object, even transitively, does not throw a","0","-","-","-","-"
"4377","NonThrowingProductionComponentTimingRecorder","NonThrowingProductionComponentTimingRecorder(ProductionComponentTimingRecorder delegate)","0","-","-","-","-"
"4378","producerTimingRecorderFor","@Override
    public ProducerTimingRecorder producerTimingRecorderFor(ProducerToken token)","0","-","-","-","-"
"4379","Factory","Factory(ProductionComponentTimingRecorder.Factory delegate)","0","-","-","-","-"
"4380","create","@Override
      public ProductionComponentTimingRecorder create(Object component)","0","-","-","-","-"
"4381","NonThrowingProducerTimingRecorder","NonThrowingProducerTimingRecorder(ProducerTimingRecorder delegate)","0","-","-","-","-"
"4382","recordMethod","@Override
    public void recordMethod(long startedNanos, long durationNanos)","0","-","-","-","-"
"4383","recordSuccess","@Override
    public void recordSuccess(long latencyNanos)","0","-","-","-","-"
"4384","recordFailure","@Override
    public void recordFailure(Throwable exception, long latencyNanos)","0","-","-","-","-"
"4385","recordSkip","@Override
    public void recordSkip(Throwable exception)","0","-","-","-","-"
"4386","DelegatingProductionComponentTimingRecorder","DelegatingProductionComponentTimingRecorder(
        ImmutableList<ProductionComponentTimingRecorder> delegates)","0","-","-","-","-"
"4387","producerTimingRecorderFor","@Override
    public ProducerTimingRecorder producerTimingRecorderFor(ProducerToken token)","0","-","-","-","-"
"4388","Factory","Factory(Iterable<? extends ProductionComponentTimingRecorder.Factory> delegates)","0","-","-","-","-"
"4389","create","@Override
      public ProductionComponentTimingRecorder create(Object component)","0","-","-","-","-"
"4390","DelegatingProducerTimingRecorder","DelegatingProducerTimingRecorder(ImmutableList<ProducerTimingRecorder> delegates)","0","-","-","-","-"
"4391","recordMethod","@Override
    public void recordMethod(long startedNanos, long durationNanos)","0","-","-","-","-"
"4392","recordSuccess","@Override
    public void recordSuccess(long latencyNanos)","0","-","-","-","-"
"4393","recordFailure","@Override
    public void recordFailure(Throwable exception, long latencyNanos)","0","-","-","-","-"
"4394","recordSkip","@Override
    public void recordSkip(Throwable exception)","0","-","-","-","-"
"4395","noOpProductionComponentTimingRecorderFactory","/** Returns a recorder factory that returns no-op component recorders. */
  public static ProductionComponentTimingRecorder.Factory
      noOpProductionComponentTimingRecorderFactory()","0","-","-","-","-"
"4396","noOpProductionComponentTimingRecorder","/** Returns a component recorder that returns no-op producer recorders. */
  public static ProductionComponentTimingRecorder noOpProductionComponentTimingRecorder()","0","-","-","-","-"
"4397","create","@Override
            public ProductionComponentTimingRecorder create(Object component)","0","-","-","-","-"
"4398","producerTimingRecorderFor","@Override
            public ProducerTimingRecorder producerTimingRecorderFor(ProducerToken token)","0","-","-","-","-"
"4399","logCreateException","private static void logCreateException(
      RuntimeException e, ProductionComponentTimingRecorder.Factory factory, Object component)","0","-","-","-","-"
"4400","logProducerTimingRecorderForException","private static void logProducerTimingRecorderForException(
      RuntimeException e, ProductionComponentTimingRecorder recorder, ProducerToken token)","0","-","-","-","-"
"4401","logProducerTimingRecorderMethodException","private static void logProducerTimingRecorderMethodException(
      RuntimeException e, ProducerTimingRecorder recorder, String method)","0","-","-","-","-"
"4402","TimingRecorders","private TimingRecorders()","0","-","-","-","-"
"4403","TimingProducerMonitor","TimingProducerMonitor(
      ProducerTimingRecorder recorder, Ticker ticker, Stopwatch componentStopwatch)","0","-","-","-","-"
"4404","methodStarting","@Override
  public void methodStarting()","0","-","-","-","-"
"4405","methodFinished","@Override
  public void methodFinished()","0","-","-","-","-"
"4406","succeeded","@Override
  public void succeeded(Object o)","0","-","-","-","-"
"4407","failed","@Override
  public void failed(Throwable t)","0","-","-","-","-"
"4408","helloWorld","@Binds
  @IntoMap
  @StringKey(""hello"")
  Command helloWorld(HelloWorldCommand command);","0","-","-","-","-"
"4409","login","@Binds
  @IntoMap
  @StringKey(""login"")
  Command login(LoginCommand command);","0","-","-","-","-"
"4410","loggedInAccount","/**
   * Declare an optional binding for","0","-","-","-","-"
"4411","WithdrawalLimiter","@Inject
  WithdrawalLimiter(@MaximumWithdrawal BigDecimal maximumWithdrawal)","0","-","-","-","-"
"4412","recordDeposit","void recordDeposit(BigDecimal amount)","0","-","-","-","-"
"4413","recordWithdrawal","void recordWithdrawal(BigDecimal amount)","0","-","-","-","-"
"4414","remainingWithdrawalLimit","BigDecimal remainingWithdrawalLimit()","0","-","-","-","-"
"4415","minimumBalance","@Provides
  @MinimumBalance
  static BigDecimal minimumBalance()","0","-","-","-","-"
"4416","maximumWithdrawal","@Provides
  @MaximumWithdrawal
  static BigDecimal maximumWithdrawal()","0","-","-","-","-"
"4417","output","void output(String output);","0","-","-","-","-"
"4418","account","@Provides
  static Account account(Database database, @Username String username)","0","-","-","-","-"
"4419","CommandRouter","@Inject
  CommandRouter(Map<String, Command> commands, Outputter outputter)","0","-","-","-","-"
"4420","route","/**
   * Calls","0","-","-","-","-"
"4421","invalidCommand","private Result invalidCommand(String input)","0","-","-","-","-"
"4422","split","private static List<String> split(String input)","0","-","-","-","-"
"4423","BigDecimalCommand","protected BigDecimalCommand(Outputter outputter)","0","-","-","-","-"
"4424","handleArg","@Override
  protected final Result handleArg(String arg)","0","-","-","-","-"
"4425","tryParse","private static BigDecimal tryParse(String arg)","0","-","-","-","-"
"4426","handleAmount","/** Handles the given (positive)","0","-","-","-","-"
"4427","LoginCommand","@Inject
  LoginCommand(
      Outputter outputter,
      Optional<Account> account,
      UserCommandsRouter.Factory userCommandsFactory)","0","-","-","-","-"
"4428","handleArg","@Override
  public Result handleArg(String username)","0","-","-","-","-"
"4429","getAccount","Account getAccount(String username);","0","-","-","-","-"
"4430","username","String username();","0","-","-","-","-"
"4431","deposit","void deposit(BigDecimal amount);","0","-","-","-","-"
"4432","withdraw","void withdraw(BigDecimal amount);","0","-","-","-","-"
"4433","balance","BigDecimal balance();","0","-","-","-","-"
"4434","HelloWorldCommand","@Inject
  HelloWorldCommand(Outputter outputter)","0","-","-","-","-"
"4435","handleInput","@Override
  public Result handleInput(List<String> args)","0","-","-","-","-"
"4436","handleInput","/**
   * Processes and optionally acts upon the given","0","-","-","-","-"
"4437","Result","private Result(Status status, Optional<CommandRouter> nestedCommandRouter)","0","-","-","-","-"
"4438","invalid","static Result invalid()","0","-","-","-","-"
"4439","handled","static Result handled()","0","-","-","-","-"
"4440","inputCompleted","static Result inputCompleted()","0","-","-","-","-"
"4441","enterNestedCommandSet","static Result enterNestedCommandSet(CommandRouter nestedCommandRouter)","0","-","-","-","-"
"4442","status","Status status()","0","-","-","-","-"
"4443","nestedCommandRouter","Optional<CommandRouter> nestedCommandRouter()","0","-","-","-","-"
"4444","InMemoryDatabase","@Inject
  InMemoryDatabase()","0","-","-","-","-"
"4445","getAccount","@Override
  public Account getAccount(String username)","0","-","-","-","-"
"4446","InMemoryAccount","InMemoryAccount(String username)","0","-","-","-","-"
"4447","username","@Override
    public String username()","0","-","-","-","-"
"4448","deposit","@Override
    public void deposit(BigDecimal amount)","0","-","-","-","-"
"4449","withdraw","@Override
    public void withdraw(BigDecimal amount)","0","-","-","-","-"
"4450","checkNonNegative","private void checkNonNegative(BigDecimal amount, String action)","0","-","-","-","-"
"4451","balance","@Override
    public BigDecimal balance()","0","-","-","-","-"
"4452","textOutputter","@Provides
  static Outputter textOutputter()","0","-","-","-","-"
"4453","WithdrawCommand","@Inject
  WithdrawCommand(
      Outputter outputter,
      Account account,
      @MinimumBalance BigDecimal minimumBalance,
      WithdrawalLimiter withdrawalLimiter)","0","-","-","-","-"
"4454","handleAmount","@Override
  protected void handleAmount(BigDecimal amount)","0","-","-","-","-"
"4455","router","CommandRouter router();","0","-","-","-","-"
"4456","create","UserCommandsRouter create(@BindsInstance @Username String username);","0","-","-","-","-"
"4457","inMemory","@Binds
  Database inMemory(InMemoryDatabase database);","0","-","-","-","-"
"4458","CommandProcessor","@Inject
  CommandProcessor(CommandRouter firstCommandRouter)","0","-","-","-","-"
"4459","process","Status process(String input)","0","-","-","-","-"
"4460","commandProcessor","CommandProcessor commandProcessor();","0","-","-","-","-"
"4461","create","static CommandProcessorFactory create()","0","-","-","-","-"
"4462","LogoutCommand","@Inject
  LogoutCommand(Outputter outputter, Account account)","0","-","-","-","-"
"4463","handleInput","@Override
  public Result handleInput(List<String> input)","0","-","-","-","-"
"4464","DepositCommand","@Inject
  DepositCommand(Outputter outputter, Account account, WithdrawalLimiter withdrawalLimiter)","0","-","-","-","-"
"4465","handleAmount","@Override
  protected void handleAmount(BigDecimal amount)","0","-","-","-","-"
"4466","deposit","@Binds
  @IntoMap
  @StringKey(""deposit"")
  Command deposit(DepositCommand command);","0","-","-","-","-"
"4467","withdraw","@Binds
  @IntoMap
  @StringKey(""withdraw"")
  Command withdraw(WithdrawCommand command);","0","-","-","-","-"
"4468","logout","@Binds
  @IntoMap
  @StringKey(""logout"")
  Command logout(LogoutCommand command);","0","-","-","-","-"
"4469","handleInput","@Override
  public final Result handleInput(List<String> input)","0","-","-","-","-"
"4470","handleArg","/** Handles the single argument to the command. */
  protected abstract Result handleArg(String arg);","0","-","-","-","-"
"4471","main","public static void main(String[] args)","0","-","-","-","-"
"4472","initFiler","@Override
  public void initFiler(Filer filer)","0","-","-","-","-"
"4473","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"4474","write","abstract void write(int level, PrintWriter writer);","0","-","-","-","-"
"4475","indent","@CanIgnoreReturnValue
    PrintWriter indent(int level, PrintWriter writer)","0","-","-","-","-"
"4476","DotGraph","DotGraph(String header)","0","-","-","-","-"
"4477","add","@CanIgnoreReturnValue
    DotGraph add(Indented element)","0","-","-","-","-"
"4478","write","@Override
    void write(int level, PrintWriter writer)","0","-","-","-","-"
"4479","DotStatement","DotStatement(String base)","0","-","-","-","-"
"4480","addAttribute","@SuppressWarnings(""unchecked"")
    @CanIgnoreReturnValue
    S addAttribute(String name, Object value)","0","-","-","-","-"
"4481","addAttributeFormat","@CanIgnoreReturnValue
    S addAttributeFormat(String name, String format, Object... args)","0","-","-","-","-"
"4482","write","@Override
    void write(int level, PrintWriter writer)","0","-","-","-","-"
"4483","quote","private static String quote(String string)","0","-","-","-","-"
"4484","DotNode","DotNode(Object nodeName)","0","-","-","-","-"
"4485","DotEdge","DotEdge(Object leftNode, Object rightNode)","0","-","-","-","-"
"4486","NodesGraph","NodesGraph(BindingGraph bindingGraph)","0","-","-","-","-"
"4487","graph","DotGraph graph()","0","-","-","-","-"
"4488","subgraph","DotGraph subgraph(ComponentPath component)","0","-","-","-","-"
"4489","nodeId","UUID nodeId(Node node)","0","-","-","-","-"
"4490","dotEdge","Optional<DotEdge> dotEdge(Edge edge)","0","-","-","-","-"
"4491","dotNode","DotNode dotNode(Node node)","0","-","-","-","-"
"4492","label","private String label(Binding binding)","0","-","-","-","-"
"4493","clusterName","private static String clusterName(ComponentPath owningComponentPath)","0","-","-","-","-"
"4494","matchMemberSelect","@Override
  public Description matchMemberSelect(MemberSelectTree tree, VisitorState state)","0","-","-","-","-"
"4495","isBeforeJava9","private static boolean isBeforeJava9()","0","-","-","-","-"
"4496","apply","@Override
  public Statement apply(Statement base, Description description)","0","-","-","-","-"
"4497","goldenSource","/**
   * Returns the golden file as a","0","-","-","-","-"
"4498","goldenFile","/**
   * Returns the golden file as a","0","-","-","-","-"
"4499","goldenFileContent","/**
   * Returns the golden file content.
   *
   * If the golden file does not exist, the returned content contains an error message pointing
   * to the location of the missing golden file. This can be used with scripting tools to output
   * the correct golden file in the proper location.
   */
  public String goldenFileContent(String qualifiedName) throws IOException","0","-","-","-","-"
"4500","getFormattedMethodName","/**
   * Returns the formatted method name for the given description.
   *
   * <p>If this is not a parameterized test, we return the method name as is. If it is a
   * parameterized test, we format it from","0","-","-","-","-"
"4501","backend","/** Returns the","0","-","-","-","-"
"4502","kotlinSource","/** Returns a","0","-","-","-","-"
"4503","kotlinSource","/** Returns a","0","-","-","-","-"
"4504","javaSource","/** Returns a","0","-","-","-","-"
"4505","javaSource","/** Returns a","0","-","-","-","-"
"4506","transformContent","/** Returns a new","0","-","-","-","-"
"4507","daggerCompiler","/** Returns a","0","-","-","-","-"
"4508","daggerCompiler","/** Returns a","0","-","-","-","-"
"4509","invocationCompiler","/**
   * Used to compile regular java or kotlin sources and inspect the elements processed in the test
   * processing environment.
   */
  public static InvocationCompiler invocationCompiler(Source... sources)","0","-","-","-","-"
"4510","libraryCompiler","/**
   * Used to compile regular java or kotlin sources and use its compiled artifacts as inputs for
   * further compilation or processing.
   *
   * @see DaggerCompiler#withAdditionalClasspath(ImmutableList)
   */
  public static LibraryCompiler libraryCompiler(Source... sources)","0","-","-","-","-"
"4511","sources","/** Returns the sources being compiled */
    abstract ImmutableList<Source> sources();","0","-","-","-","-"
"4512","processorOptions","/** Returns the annotation processor options */
    abstract ImmutableMap<String, String> processorOptions();","0","-","-","-","-"
"4513","compile","public void compile(Consumer<XTestInvocation> onInvocation)","0","-","-","-","-"
"4514","sources","/** Returns the sources being compiled */
    abstract ImmutableList<Source> sources();","0","-","-","-","-"
"4515","compile","public ImmutableList<File> compile()","0","-","-","-","-"
"4516","builder","static Builder builder()","0","-","-","-","-"
"4517","sources","/** Returns the sources being compiled */
    abstract ImmutableCollection<Source> sources();","0","-","-","-","-"
"4518","processorOptions","/** Returns the annotation processor options */
    abstract ImmutableMap<String, String> processorOptions();","0","-","-","-","-"
"4519","additionalClasspath","/** Returns extra files for the classpath. */
    abstract ImmutableList<File> additionalClasspath();","0","-","-","-","-"
"4520","additionalJavacProcessors","/** Returns the extra Javac processors. */
    abstract ImmutableCollection<Processor> additionalJavacProcessors();","0","-","-","-","-"
"4521","additionalKspProcessors","/** Returns the extra KSP processors. */
    abstract ImmutableCollection<SymbolProcessorProvider> additionalKspProcessors();","0","-","-","-","-"
"4522","processingStepSuppliers","/** Returns the processing steps suppliers. */
    abstract ImmutableCollection<Supplier<XProcessingStep>> processingStepSuppliers();","0","-","-","-","-"
"4523","processingSteps","/** Returns the processing steps. */
    private ImmutableList<XProcessingStep> processingSteps()","0","-","-","-","-"
"4524","bindingGraphPluginSuppliers","/** Returns the","0","-","-","-","-"
"4525","bindingGraphPlugins","/** Returns the","0","-","-","-","-"
"4526","toBuilder","/** Returns a builder with the current values of this","0","-","-","-","-"
"4527","withProcessingOptions","/**
     * Returns a new","0","-","-","-","-"
"4528","withAdditionalJavacProcessors","/** Returns a new","0","-","-","-","-"
"4529","withAdditionalKspProcessors","/** Returns a new","0","-","-","-","-"
"4530","withProcessingSteps","/** Returns a new","0","-","-","-","-"
"4531","withBindingGraphPlugins","public DaggerCompiler withBindingGraphPlugins(Supplier<BindingGraphPlugin>... suppliers)","0","-","-","-","-"
"4532","withAdditionalClasspath","/** Returns a new","0","-","-","-","-"
"4533","compile","public void compile(Consumer<CompilationResultSubject> onCompilationResult)","0","-","-","-","-"
"4534","compileInternal","private void compileInternal(
        Consumer<CompilationResultSubject> onCompilationResult,
        ImmutableList<String> kotlincArguments)","0","-","-","-","-"
"4535","mergeProcessors","private static <T> ImmutableList<T> mergeProcessors(
        Collection<T> defaultProcessors, Collection<T> extraProcessors)","0","-","-","-","-"
"4536","sources","abstract Builder sources(ImmutableCollection<Source> sources);","0","-","-","-","-"
"4537","processorOptions","abstract Builder processorOptions(Map<String, String> processorOptions);","0","-","-","-","-"
"4538","additionalClasspath","abstract Builder additionalClasspath(ImmutableList<File> libs);","0","-","-","-","-"
"4539","additionalJavacProcessors","abstract Builder additionalJavacProcessors(ImmutableCollection<Processor> processors);","0","-","-","-","-"
"4540","additionalKspProcessors","abstract Builder additionalKspProcessors(
          ImmutableCollection<SymbolProcessorProvider> processors);","0","-","-","-","-"
"4541","processingStepSuppliers","abstract Builder processingStepSuppliers(
          ImmutableCollection<Supplier<XProcessingStep>> processingStepSuppliers);","0","-","-","-","-"
"4542","bindingGraphPluginSuppliers","abstract Builder bindingGraphPluginSuppliers(
          ImmutableCollection<Supplier<BindingGraphPlugin>> bindingGraphPluginSuppliers);","0","-","-","-","-"
"4543","build","abstract DaggerCompiler build();","0","-","-","-","-"
"4544","compilerDepsJar","/** Returns the","0","-","-","-","-"
"4545","compiler","/** Returns a","0","-","-","-","-"
"4546","compileWithKapt","public static void compileWithKapt(
      List<Source> sources,
      TemporaryFolder tempFolder,
      Consumer<TestCompilationResult> onCompilationResult)","0","-","-","-","-"
"4547","compileWithKapt","public static void compileWithKapt(
      List<Source> sources,
      Map<String, String> processorOptions,
      TemporaryFolder tempFolder,
      Consumer<TestCompilationResult> onCompilationResult)","0","-","-","-","-"
"4548","getRunfilesDir","private static File getRunfilesDir()","0","-","-","-","-"
"4549","getRunfilesPath","private static Path getRunfilesPath()","0","-","-","-","-"
"4550","getRunfilesPath","private static Path getRunfilesPath(Map<?, ?> map)","0","-","-","-","-"
"4551","CompilerTests","private CompilerTests()","0","-","-","-","-"
"4552","JavacProcessor","JavacProcessor(ImmutableCollection<XProcessingStep> processingSteps)","0","-","-","-","-"
"4553","initialize","@Override
    public void initialize(XProcessingEnv env)","0","-","-","-","-"
"4554","getSupportedSourceVersion","@Override
    public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"4555","getSupportedOptions","@Override
    public ImmutableSet<String> getSupportedOptions()","0","-","-","-","-"
"4556","processingSteps","@Override
    public ImmutableCollection<XProcessingStep> processingSteps()","0","-","-","-","-"
"4557","postRound","@Override
    public void postRound(XProcessingEnv env, XRoundEnv roundEnv)","0","-","-","-","-"
"4558","KspProcessor","private KspProcessor(
        SymbolProcessorEnvironment symbolProcessorEnvironment,
        ImmutableCollection<XProcessingStep> processingSteps)","0","-","-","-","-"
"4559","initialize","@Override
    public void initialize(XProcessingEnv env)","0","-","-","-","-"
"4560","processingSteps","@Override
    public ImmutableCollection<XProcessingStep> processingSteps()","0","-","-","-","-"
"4561","postRound","@Override
    public void postRound(XProcessingEnv env, XRoundEnv roundEnv)","0","-","-","-","-"
"4562","Provider","Provider(ImmutableCollection<XProcessingStep> processingSteps)","0","-","-","-","-"
"4563","create","@Override
      public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"4564","CompilerProcessors","private CompilerProcessors()","0","-","-","-","-"
"4565","LibraryA","@Inject
  public LibraryA(LibraryBProvided b)","0","-","-","-","-"
"4566","emptyTest","@Test
  public void emptyTest()","0","-","-","-","-"
"4567","provideDouble","@Provides
    public static double provideDouble()","0","-","-","-","-"
"4568","emptyTest","@Test
  public void emptyTest()","0","-","-","-","-"
"4569","provideDouble","@Provides
    public static double provideDouble()","0","-","-","-","-"
"4570","provideData","@Provides
  static String provideData()","0","-","-","-","-"
"4571","provideData","@Provides
  static int provideData()","0","-","-","-","-"
"4572","LibraryA","@Inject
  public LibraryA(LibraryB b, LibraryC c)","0","-","-","-","-"
"4573","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"4574","LibraryB","@Inject
  public LibraryB()","0","-","-","-","-"
"4575","provideB","@Provides
  public static LibraryBProvided provideB()","0","-","-","-","-"
"4576","LibraryC","@Inject
  public LibraryC()","0","-","-","-","-"
"4577","onReceive","@Override
  public void onReceive(Context context, Intent intent)","0","-","-","-","-"
"4578","annotations","@Override
  public final ImmutableSet<String> annotations()","0","-","-","-","-"
"4579","process","@Override
  public ImmutableSet<XElement> process(
      XProcessingEnv env, Map<String, ? extends Set<? extends XElement>> elementsByAnnotation)","0","-","-","-","-"
"4580","process","/**
   * Processes one element. If this method throws","0","-","-","-","-"
"4581","inverse","private ImmutableMap<XElement, ImmutableSet<XClassName>> inverse(
      Map<String, ? extends Set<? extends XElement>> elementsByAnnotation)","0","-","-","-","-"
"4582","annotationClassNames","/** Returns the set of annotations processed by this processing step. */
  protected abstract Set<XClassName> annotationClassNames();","0","-","-","-","-"
"4583","injectedTypeFromMapKey","/**
   * If","0","-","-","-","-"
"4584","init","@Override
  public void init(DaggerProcessingEnv processingEnv, Map<String, String> options)","0","-","-","-","-"
"4585","visitGraph","@Override
  public void visitGraph(BindingGraph graph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"4586","isDispatchingAndroidInjector","private boolean isDispatchingAndroidInjector(Binding binding)","0","-","-","-","-"
"4587","validateMapKeyUniqueness","private void validateMapKeyUniqueness(
      Binding dispatchingAndroidInjector,
      BindingGraph graph,
      DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"4588","injectorMapDependencies","/**
   * Returns a stream of the dependencies of","0","-","-","-","-"
"4589","mapKey","private Optional<XAnnotation> mapKey(Binding binding)","0","-","-","-","-"
"4590","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"4591","AndroidMapKeyProcessingStep","AndroidMapKeyProcessingStep(XProcessingEnv processingEnv)","0","-","-","-","-"
"4592","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"4593","process","@Override
  public void process(XElement element, ImmutableSet<XClassName> annotationNames)","0","-","-","-","-"
"4594","validateMethod","private void validateMethod(XClassName annotation, XMethodElement method)","0","-","-","-","-"
"4595","validateReturnType","/** Report an error if the method's return type is not","0","-","-","-","-"
"4596","validateMapKeyMatchesBindsParameter","/**
   * A valid @Binds method could bind an","0","-","-","-","-"
"4597","injectorFactoryOf","/** Returns a","0","-","-","-","-"
"4598","factoryElement","private XTypeElement factoryElement()","0","-","-","-","-"
"4599","initialize","public void initialize(XProcessingEnv env)","0","-","-","-","-"
"4600","processingSteps","public ImmutableList<XProcessingStep> processingSteps()","0","-","-","-","-"
"4601","inject","void inject(DelegateAndroidProcessor delegateAndroidProcessor);","0","-","-","-","-"
"4602","create","Injector create(@BindsInstance XProcessingEnv env);","0","-","-","-","-"
"4603","KspAndroidProcessor","private KspAndroidProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"4604","initialize","@Override
  public void initialize(XProcessingEnv env)","0","-","-","-","-"
"4605","processingSteps","@Override
  public Iterable<XProcessingStep> processingSteps()","0","-","-","-","-"
"4606","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"4607","injectedType","/** The type to be injected; the return type of the","0","-","-","-","-"
"4608","scopes","/** Scopes to apply to the generated","0","-","-","-","-"
"4609","modules","/** See","0","-","-","-","-"
"4610","enclosingModule","/** The","0","-","-","-","-"
"4611","method","/** The method annotated with","0","-","-","-","-"
"4612","injectedType","abstract Builder injectedType(ClassName injectedType);","0","-","-","-","-"
"4613","scopesBuilder","abstract ImmutableSet.Builder<AnnotationSpec> scopesBuilder();","0","-","-","-","-"
"4614","modulesBuilder","abstract ImmutableSet.Builder<ClassName> modulesBuilder();","0","-","-","-","-"
"4615","enclosingModule","abstract Builder enclosingModule(ClassName enclosingModule);","0","-","-","-","-"
"4616","method","abstract Builder method(XExecutableElement method);","0","-","-","-","-"
"4617","build","abstract AndroidInjectorDescriptor build();","0","-","-","-","-"
"4618","Validator","Validator(XMessager messager)","0","-","-","-","-"
"4619","createIfValid","/**
     * Validates a","0","-","-","-","-"
"4620","getTypeList","private static ImmutableList<XType> getTypeList(XAnnotationValue annotationValue)","0","-","-","-","-"
"4621","ErrorReporter","ErrorReporter(XElement subject, XMessager messager)","0","-","-","-","-"
"4622","reportError","void reportError(String error)","0","-","-","-","-"
"4623","reportError","void reportError(String error, XAnnotation annotation)","0","-","-","-","-"
"4624","XTypeNames","private XTypeNames()","0","-","-","-","-"
"4625","initialize","@Override
  public void initialize(XProcessingEnv env)","0","-","-","-","-"
"4626","processingSteps","@Override
  public Iterable<XProcessingStep> processingSteps()","0","-","-","-","-"
"4627","getSupportedOptions","@Override
  public final ImmutableSet<String> getSupportedOptions()","0","-","-","-","-"
"4628","getSupportedSourceVersion","@Override
  public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"4629","ContributesAndroidInjectorProcessingStep","ContributesAndroidInjectorProcessingStep(XProcessingEnv processingEnv)","0","-","-","-","-"
"4630","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"4631","process","@Override
  public void process(XElement element, ImmutableSet<XClassName> annotationNames)","0","-","-","-","-"
"4632","generate","private void generate(AndroidInjectorDescriptor descriptor)","0","-","-","-","-"
"4633","useStringKeys","private static boolean useStringKeys(XProcessingEnv processingEnv)","0","-","-","-","-"
"4634","bindAndroidInjectorFactory","private MethodSpec bindAndroidInjectorFactory(
      AndroidInjectorDescriptor descriptor, ClassName subcomponentBuilderName)","0","-","-","-","-"
"4635","androidInjectorMapKey","private AnnotationSpec androidInjectorMapKey(AndroidInjectorDescriptor descriptor)","0","-","-","-","-"
"4636","subcomponent","private TypeSpec subcomponent(
      AndroidInjectorDescriptor descriptor,
      ClassName subcomponentName,
      ClassName subcomponentFactoryName)","0","-","-","-","-"
"4637","subcomponentFactory","private TypeSpec subcomponentFactory(
      AndroidInjectorDescriptor descriptor, ClassName subcomponentFactoryName)","0","-","-","-","-"
"4638","currentContext","@Provides
  static Context currentContext()","0","-","-","-","-"
"4639","provideServer","@Provides
  @Singleton
  static Server provideServer(
      ServerBuilder<?> serverBuilder, Set<ServerServiceDefinition> serviceDefinitions)","0","-","-","-","-"
"4640","NettyServerModule","private NettyServerModule(SocketAddress socketAddress)","0","-","-","-","-"
"4641","bindingToPort","/**
   * A module that binds to","0","-","-","-","-"
"4642","bindingTo","/**
   * A module that binds to","0","-","-","-","-"
"4643","serverBuilder","@Provides
  ServerBuilder<?> serverBuilder()","0","-","-","-","-"
"4644","InProcessServerModule","private InProcessServerModule(String name)","0","-","-","-","-"
"4645","serverNamed","/**
   * Creates a module that provides a server that binds to a given name
   *
   * @param name the identity of the server for clients to connect to
   */
  public static InProcessServerModule serverNamed(String name)","0","-","-","-","-"
"4646","serverBuilder","@Provides
  ServerBuilder<?> serverBuilder()","0","-","-","-","-"
"4647","getServiceDefinition","/**
     * Returns a service definition that contains a","0","-","-","-","-"
"4648","proxyMethod","/**
   * Returns a proxy method definition for","0","-","-","-","-"
"4649","ProxyServerCallHandler","ProxyServerCallHandler(
      MethodDescriptor<RequestT, ResponseT> delegateMethodDescriptor,
      ServiceDefinitionFactory delegateServiceDefinitionFactory)","0","-","-","-","-"
"4650","startCall","@Override
  public Listener<InputStream> startCall(
      ServerCall<InputStream, InputStream> call,
      Metadata headers)","0","-","-","-","-"
"4651","getMethodDefinition","@SuppressWarnings(""unchecked"") // Method definition is the correct type.
  private ServerMethodDefinition<RequestT, ResponseT> getMethodDefinition(Metadata headers)","0","-","-","-","-"
"4652","stream","@Override
        public InputStream stream(InputStream value)","0","-","-","-","-"
"4653","parse","@Override
        public InputStream parse(InputStream stream)","0","-","-","-","-"
"4654","ServerCallListenerAdapter","public ServerCallListenerAdapter(Listener<RequestT> delegate)","0","-","-","-","-"
"4655","onMessage","@Override
    public void onMessage(InputStream message)","0","-","-","-","-"
"4656","onHalfClose","@Override
    public void onHalfClose()","0","-","-","-","-"
"4657","onCancel","@Override
    public void onCancel()","0","-","-","-","-"
"4658","onComplete","@Override
    public void onComplete()","0","-","-","-","-"
"4659","ServerCallAdapter","ServerCallAdapter(ServerCall<InputStream, InputStream> delegate,
        MethodDescriptor<RequestT, ResponseT> method)","0","-","-","-","-"
"4660","getMethodDescriptor","@Override
    public MethodDescriptor<RequestT, ResponseT> getMethodDescriptor()","0","-","-","-","-"
"4661","request","@Override
    public void request(int numMessages)","0","-","-","-","-"
"4662","sendHeaders","@Override
    public void sendHeaders(Metadata headers)","0","-","-","-","-"
"4663","sendMessage","@Override
    public void sendMessage(ResponseT message)","0","-","-","-","-"
"4664","close","@Override
    public void close(Status status, Metadata trailers)","0","-","-","-","-"
"4665","isCancelled","@Override
    public boolean isCancelled()","0","-","-","-","-"
"4666","GrpcCallMetadataModule","public GrpcCallMetadataModule(Metadata metadata)","0","-","-","-","-"
"4667","provideHeaders","@Provides
  Metadata provideHeaders()","0","-","-","-","-"
"4668","initialize","@Override
  public void initialize(XProcessingEnv env)","0","-","-","-","-"
"4669","processingSteps","@Override
  public Iterable<XProcessingStep> processingSteps()","0","-","-","-","-"
"4670","getSupportedSourceVersion","@Override
  public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"4671","KspProguardProcessor","private KspProguardProcessor(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"4672","initialize","@Override
  public void initialize(XProcessingEnv env)","0","-","-","-","-"
"4673","processingSteps","@Override
  public Iterable<XProcessingStep> processingSteps()","0","-","-","-","-"
"4674","create","@Override
    public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"4675","ProguardProcessingStep","ProguardProcessingStep(XProcessingEnv processingEnv)","0","-","-","-","-"
"4676","annotationClassNames","@Override
  public ImmutableSet<XClassName> annotationClassNames()","0","-","-","-","-"
"4677","process","@Override
  public void process(XElement element, ImmutableSet<XClassName> annotationNames)","0","-","-","-","-"
"4678","writeFile","private void writeFile(XFiler filer, String intermediatePath, String contents)","0","-","-","-","-"
"4679","CoffeeMaker","@Inject
  CoffeeMaker(CoffeeLogger logger, Lazy<Heater> heater, Pump pump)","0","-","-","-","-"
"4680","brew","public void brew()","0","-","-","-","-"
"4681","CoffeeLogger","@Inject
  CoffeeLogger()","0","-","-","-","-"
"4682","log","public void log(String msg)","0","-","-","-","-"
"4683","logs","public List<String> logs()","0","-","-","-","-"
"4684","bindHeater","@Binds
  @Singleton
  Heater bindHeater(ElectricHeater impl);","0","-","-","-","-"
"4685","on","void on();","0","-","-","-","-"
"4686","off","void off();","0","-","-","-","-"
"4687","isHot","boolean isHot();","0","-","-","-","-"
"4688","maker","CoffeeMaker maker();","0","-","-","-","-"
"4689","logger","CoffeeLogger logger();","0","-","-","-","-"
"4690","main","public static void main(String[] args)","0","-","-","-","-"
"4691","Thermosiphon","@Inject
  Thermosiphon(CoffeeLogger logger, Heater heater)","0","-","-","-","-"
"4692","pump","@Override
  public void pump()","0","-","-","-","-"
"4693","ElectricHeater","@Inject
  ElectricHeater(CoffeeLogger logger)","0","-","-","-","-"
"4694","on","@Override
  public void on()","0","-","-","-","-"
"4695","off","@Override
  public void off()","0","-","-","-","-"
"4696","isHot","@Override
  public boolean isHot()","0","-","-","-","-"
"4697","pump","void pump();","0","-","-","-","-"
"4698","providePump","@Binds
  abstract Pump providePump(Thermosiphon pump);","0","-","-","-","-"
"4699","bindHeater","@Binds
  @Singleton
  Heater bindHeater(ElectricHeater impl);","0","-","-","-","-"
"4700","maker","CoffeeMaker maker();","0","-","-","-","-"
"4701","logger","CoffeeLogger logger();","0","-","-","-","-"
"4702","main","public static void main(String[] args)","0","-","-","-","-"
"4703","providePump","@Binds
  abstract Pump providePump(Thermosiphon pump);","0","-","-","-","-"
"4704","CoffeeMaker","@Inject
  CoffeeMaker(CoffeeLogger logger, Lazy<Heater> heater, Pump pump)","0","-","-","-","-"
"4705","brew","public void brew()","0","-","-","-","-"
"4706","CoffeeLogger","@Inject
  CoffeeLogger()","0","-","-","-","-"
"4707","log","public void log(String msg)","0","-","-","-","-"
"4708","logs","public List<String> logs()","0","-","-","-","-"
"4709","on","void on();","0","-","-","-","-"
"4710","off","void off();","0","-","-","-","-"
"4711","isHot","boolean isHot();","0","-","-","-","-"
"4712","Thermosiphon","@Inject
  Thermosiphon(CoffeeLogger logger, Heater heater)","0","-","-","-","-"
"4713","pump","@Override
  public void pump()","0","-","-","-","-"
"4714","ElectricHeater","@Inject
  ElectricHeater(CoffeeLogger logger)","0","-","-","-","-"
"4715","on","@Override
  public void on()","0","-","-","-","-"
"4716","off","@Override
  public void off()","0","-","-","-","-"
"4717","isHot","@Override
  public boolean isHot()","0","-","-","-","-"
"4718","pump","void pump();","0","-","-","-","-"
"4719","bindHeater","@Binds
  @Singleton
  Heater bindHeater(ElectricHeater impl);","0","-","-","-","-"
"4720","onCreate","@Override
  public void onCreate()","0","-","-","-","-"
"4721","providePump","@Binds
  abstract Pump providePump(Thermosiphon pump);","0","-","-","-","-"
"4722","on","@Override
    public void on()","0","-","-","-","-"
"4723","off","@Override
    public void off()","0","-","-","-","-"
"4724","isHot","@Override
    public boolean isHot()","0","-","-","-","-"
"4725","testApplicationClass","@Test
  public void testApplicationClass() throws Exception","0","-","-","-","-"
"4726","testLogs","@Test
  public void testLogs() throws Exception","0","-","-","-","-"
"4727","testApplicationClass","@Test
  public void testApplicationClass() throws Exception","0","-","-","-","-"
"4728","testLogs","@Test
  public void testLogs() throws Exception","0","-","-","-","-"
"4729","DaggerFragment","public DaggerFragment()","0","-","-","-","-"
"4730","DaggerFragment","@ContentView
  public DaggerFragment(@LayoutRes int contentLayoutId)","0","-","-","-","-"
"4731","onAttach","@Override
  public void onAttach(Context context)","0","-","-","-","-"
"4732","androidInjector","@Override
  public AndroidInjector<Object> androidInjector()","0","-","-","-","-"
"4733","onAttach","@Override
  public void onAttach(Context context)","0","-","-","-","-"
"4734","androidInjector","@Override
  public AndroidInjector<Object> androidInjector()","0","-","-","-","-"
"4735","onAttach","@Override
  public void onAttach(Context context)","0","-","-","-","-"
"4736","androidInjector","@Override
  public AndroidInjector<Object> androidInjector()","0","-","-","-","-"
"4737","DaggerAppCompatActivity","public DaggerAppCompatActivity()","0","-","-","-","-"
"4738","DaggerAppCompatActivity","@ContentView
  public DaggerAppCompatActivity(@LayoutRes int contentLayoutId)","0","-","-","-","-"
"4739","onCreate","@Override
  protected void onCreate(@Nullable Bundle savedInstanceState)","0","-","-","-","-"
"4740","androidInjector","@Override
  public AndroidInjector<Object> androidInjector()","0","-","-","-","-"
"4741","applicationInjector","@Override
  protected abstract AndroidInjector<? extends DaggerApplication> applicationInjector();","0","-","-","-","-"
"4742","inject","/**
   * Injects","0","-","-","-","-"
"4743","inject","private static void inject(Object target, HasAndroidInjector hasAndroidInjector)","0","-","-","-","-"
"4744","findHasAndroidInjectorForFragment","private static HasAndroidInjector findHasAndroidInjectorForFragment(Fragment fragment)","0","-","-","-","-"
"4745","AndroidSupportInjection","private AndroidSupportInjection()","0","-","-","-","-"
"4746","AndroidSupportInjectionModule","private AndroidSupportInjectionModule()","0","-","-","-","-"
"4747","testActivityInject","@Test
  public void testActivityInject() throws Exception","0","-","-","-","-"
"4748","verifyApplicationInstance","@Test
  public void verifyApplicationInstance()","0","-","-","-","-"
"4749","onCreate","@Override
  public void onCreate()","0","-","-","-","-"
"4750","applicationInjector","@Override
  protected AndroidInjector<SimpleApplication> applicationInjector()","0","-","-","-","-"
"4751","bind","@Binds
    @IntoMap
    @ClassKey(SimpleActivity.class)
    abstract AndroidInjector.Factory<?> bind(SimpleActivityComponent.Factory factory);","0","-","-","-","-"
"4752","onCreate","@Override
  protected void onCreate(Bundle savedInstanceState)","0","-","-","-","-"
"4753","provideUserName","@UserName
  @Provides
  static String provideUserName()","0","-","-","-","-"
"4754","UserNameModule","private UserNameModule()","0","-","-","-","-"
"4755","provideModel","@Provides
  @Model
  static String provideModel()","0","-","-","-","-"
"4756","scopedQualifiedProvidesType","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Provides
  @Singleton
  @MyQualifier
  ScopedQualifiedProvidesType scopedQualifiedProvidesType(
      @MyQualifier
          @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          Dep dep)","0","-","-","-","-"
"4757","scopedUnqualifiedProvidesType","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Provides
  @Singleton
  ScopedUnqualifiedProvidesType scopedUnqualifiedProvidesType(
      @MyQualifier
          @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          Dep dep)","0","-","-","-","-"
"4758","unscopedQualifiedProvidesType","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Provides
  @MyQualifier
  UnscopedQualifiedProvidesType unscopedQualifiedProvidesType(
      @MyQualifier
          @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          Dep dep)","0","-","-","-","-"
"4759","unscopedUnqualifiedProvidesType","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Provides
  UnscopedUnqualifiedProvidesType unscopedUnqualifiedProvidesType(
      @MyQualifier
          @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          Dep dep)","0","-","-","-","-"
"4760","scopedQualifiedBindsType","@MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    @Binds
    @Singleton
    @MyQualifier
    ScopedQualifiedBindsType scopedQualifiedBindsType(
        // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
        @MyQualifier
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            ScopedQualifiedProvidesType scopedQualifiedProvidesType);","0","-","-","-","-"
"4761","scopedUnqualifiedBindsType","@MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    @Binds
    @Singleton
    ScopedUnqualifiedBindsType scopedUnqualifiedBindsType(
        // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
        @MyAnnotation(MyTransitiveType.VALUE) @MyOtherAnnotation(MyTransitiveType.class)
            ScopedUnqualifiedProvidesType scopedUnqualifiedProvidesType);","0","-","-","-","-"
"4762","unscopedQualifiedBindsType","@MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    @Binds
    @MyQualifier
    UnscopedQualifiedBindsType unscopedQualifiedBindsType(
        // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
        @MyQualifier
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            UnscopedQualifiedProvidesType unscopedQualifiedProvidesType);","0","-","-","-","-"
"4763","unscopedUnqualifiedBindsType","@MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    @Binds
    UnscopedUnqualifiedBindsType unscopedUnqualifiedBindsType(
        // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
        @MyAnnotation(MyTransitiveType.VALUE) @MyOtherAnnotation(MyTransitiveType.class)
            UnscopedUnqualifiedProvidesType unscopedUnqualifiedProvidesType);","0","-","-","-","-"
"4764","provideQualifiedDep","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Provides
  @MyQualifier
  Dep provideQualifiedDep()","0","-","-","-","-"
"4765","provideDep","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Provides
  Dep provideDep()","0","-","-","-","-"
"4766","MyComponentModule","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyComponentModule(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          Dep dep)","0","-","-","-","-"
"4767","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4768","nonDaggerStaticMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  static MyTransitiveType nonDaggerStaticMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4769","qualifiedMySubcomponentBinding","@MyQualifier
  // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract MySubcomponentBinding qualifiedMySubcomponentBinding();","0","-","-","-","-"
"4770","unqualifiedMySubcomponentBinding","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract MySubcomponentBinding unqualifiedMySubcomponentBinding();","0","-","-","-","-"
"4771","injectFoo","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract void injectFoo(
      // TODO(b/219587431): Support @MyTransitiveAnnotation (We shouldn't need scope/qualifier here)
      @MyAnnotation(MyTransitiveType.VALUE) @MyOtherAnnotation(MyTransitiveType.class) Foo foo);","0","-","-","-","-"
"4772","mySubcomponentModule","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public abstract Builder mySubcomponentModule(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MySubcomponentModule mySubcomponentModule);","0","-","-","-","-"
"4773","qualifiedMySubcomponentBinding","@BindsInstance
    @MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public abstract Builder qualifiedMySubcomponentBinding(
        @MyQualifier
            // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MySubcomponentBinding subcomponentBinding);","0","-","-","-","-"
"4774","unqualifiedMySubcomponentBinding","@BindsInstance
    @MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public abstract Builder unqualifiedMySubcomponentBinding(
        // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
        @MyAnnotation(MyTransitiveType.VALUE) @MyOtherAnnotation(MyTransitiveType.class)
            MySubcomponentBinding subcomponentBinding);","0","-","-","-","-"
"4775","build","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public abstract MySubcomponentWithBuilder build();","0","-","-","-","-"
"4776","nonDaggerMethod","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public void nonDaggerMethod(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            String str)","0","-","-","-","-"
"4777","nonDaggerStaticMethod","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public static void nonDaggerStaticMethod(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            String str)","0","-","-","-","-"
"4778","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4779","nonDaggerStaticMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public static MyTransitiveType nonDaggerStaticMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4780","FooBase","@MyTransitiveBaseAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  FooBase(
      @MyTransitiveBaseAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4781","FooBase","@MyTransitiveBaseAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Inject
  FooBase(
      @MyTransitiveBaseAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @MyQualifier
          Dep dep)","0","-","-","-","-"
"4782","baseNonDaggerMethod","@MyTransitiveBaseAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  void baseNonDaggerMethod(
      @MyTransitiveBaseAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          int i)","0","-","-","-","-"
"4783","baseDaggerMethod","@MyTransitiveBaseAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Inject
  void baseDaggerMethod(
      @MyTransitiveBaseAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @MyQualifier
          Dep dep)","0","-","-","-","-"
"4784","AssistedFoo","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  AssistedFoo(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4785","AssistedFoo","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @AssistedInject
  AssistedFoo(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @Assisted
          int i,
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @MyQualifier
          Dep dep)","0","-","-","-","-"
"4786","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4787","daggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Inject
  void daggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @MyQualifier
          Dep dep)","0","-","-","-","-"
"4788","create","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    AssistedFoo create(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            int i);","0","-","-","-","-"
"4789","qualifiedMySubcomponentBinding","@MyQualifier
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract MySubcomponentBinding qualifiedMySubcomponentBinding();","0","-","-","-","-"
"4790","unqualifiedMySubcomponentBinding","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract MySubcomponentBinding unqualifiedMySubcomponentBinding();","0","-","-","-","-"
"4791","injectFoo","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract void injectFoo(
      // TODO(b/219587431): Support @MyTransitiveAnnotation (We shouldn't need scope/qualifier here)
      @MyAnnotation(MyTransitiveType.VALUE) @MyOtherAnnotation(MyTransitiveType.class) Foo foo);","0","-","-","-","-"
"4792","create","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public abstract MySubcomponentWithFactory create(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MySubcomponentModule mySubcomponentModule,
        @BindsInstance
            @MyQualifier
            // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MySubcomponentBinding qualifiedSubcomponentBinding,
        @BindsInstance
            // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MySubcomponentBinding unqualifiedSubcomponentBinding);","0","-","-","-","-"
"4793","nonDaggerMethod","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public MyTransitiveType nonDaggerMethod(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4794","nonDaggerStaticMethod","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public static MyTransitiveType nonDaggerStaticMethod(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4795","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4796","nonDaggerStaticMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public static MyTransitiveType nonDaggerStaticMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4797","Foo","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  Foo(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4798","Foo","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Inject
  Foo(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @MyQualifier
          Dep dep)","0","-","-","-","-"
"4799","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4800","daggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Inject
  void daggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @MyQualifier
          Dep dep)","0","-","-","-","-"
"4801","unscopedQualifiedBindsTypeBase","@MyQualifier
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract MyComponentModule.UnscopedQualifiedBindsType unscopedQualifiedBindsTypeBase();","0","-","-","-","-"
"4802","unscopedUnqualifiedBindsTypeBase","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract MyComponentModule.UnscopedUnqualifiedBindsType unscopedUnqualifiedBindsTypeBase();","0","-","-","-","-"
"4803","injectFooBase","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract void injectFooBase(
      // TODO(b/219587431): Support @MyTransitiveAnnotation (We shouldn't need scope/qualifier here)
      @MyAnnotation(MyTransitiveType.VALUE) @MyOtherAnnotation(MyTransitiveType.class) Foo binding);","0","-","-","-","-"
"4804","create","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public abstract MyBaseComponent create(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MyComponentModule myComponentModule,
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MyComponentDependency myComponentDependency);","0","-","-","-","-"
"4805","nonDaggerMethod","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public MyTransitiveType nonDaggerMethod(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4806","nonDaggerStaticMethod","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public static MyTransitiveType nonDaggerStaticMethod(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4807","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4808","nonDaggerStaticMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public static MyTransitiveType nonDaggerStaticMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4809","MyComponentDependency","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyComponentDependency()","0","-","-","-","-"
"4810","qualifiedMyComponentDependencyBinding","@MyQualifier
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyComponentDependencyBinding qualifiedMyComponentDependencyBinding()","0","-","-","-","-"
"4811","unqualifiedMyComponentDependencyBinding","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyComponentDependencyBinding unqualifiedMyComponentDependencyBinding()","0","-","-","-","-"
"4812","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4813","nonDaggerStaticMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public static MyTransitiveType nonDaggerStaticMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4814","MySubcomponentModule","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MySubcomponentModule(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          int i)","0","-","-","-","-"
"4815","setup","@Before
  public void setup()","0","-","-","-","-"
"4816","testMySubcomponentBinding","@Test
  public void testMySubcomponentBinding()","0","-","-","-","-"
"4817","setup","@Before
  public void setup()","0","-","-","-","-"
"4818","testMySubcomponentBinding","@Test
  public void testMySubcomponentBinding()","0","-","-","-","-"
"4819","setup","@Before
  public void setup()","0","-","-","-","-"
"4820","testFooIsScoped","@Test
  public void testFooIsScoped()","0","-","-","-","-"
"4821","testAssistedFoo","@Test
  public void testAssistedFoo()","0","-","-","-","-"
"4822","testScopedQualifiedBindsTypeIsScoped","@Test
  public void testScopedQualifiedBindsTypeIsScoped()","0","-","-","-","-"
"4823","testScopedUnqualifiedBindsTypeIsScoped","@Test
  public void testScopedUnqualifiedBindsTypeIsScoped()","0","-","-","-","-"
"4824","testUnscopedQualifiedBindsTypeIsNotScoped","@Test
  public void testUnscopedQualifiedBindsTypeIsNotScoped()","0","-","-","-","-"
"4825","testUnscopedUnqualifiedBindsTypeIsNotScoped","@Test
  public void testUnscopedUnqualifiedBindsTypeIsNotScoped()","0","-","-","-","-"
"4826","testScopedQualifiedProvidesTypeIsScoped","@Test
  public void testScopedQualifiedProvidesTypeIsScoped()","0","-","-","-","-"
"4827","testScopedUnqualifiedProvidesTypeIsScoped","@Test
  public void testScopedUnqualifiedProvidesTypeIsScoped()","0","-","-","-","-"
"4828","testUnscopedQualifiedProvidesTypeIsNotScoped","@Test
  public void testUnscopedQualifiedProvidesTypeIsNotScoped()","0","-","-","-","-"
"4829","testUnscopedUnqualifiedProvidesTypeIsNotScoped","@Test
  public void testUnscopedUnqualifiedProvidesTypeIsNotScoped()","0","-","-","-","-"
"4830","testMyComponentDependencyBinding","@Test
  public void testMyComponentDependencyBinding()","0","-","-","-","-"
"4831","foo","abstract Foo foo();","0","-","-","-","-"
"4832","assistedFooFactory","abstract AssistedFoo.Factory assistedFooFactory();","0","-","-","-","-"
"4833","scopedQualifiedBindsType","@MyQualifier
  abstract MyComponentModule.ScopedQualifiedBindsType scopedQualifiedBindsType();","0","-","-","-","-"
"4834","scopedUnqualifiedBindsType","abstract MyComponentModule.ScopedUnqualifiedBindsType scopedUnqualifiedBindsType();","0","-","-","-","-"
"4835","unscopedQualifiedBindsType","@MyQualifier
  abstract MyComponentModule.UnscopedQualifiedBindsType unscopedQualifiedBindsType();","0","-","-","-","-"
"4836","unscopedUnqualifiedBindsType","abstract MyComponentModule.UnscopedUnqualifiedBindsType unscopedUnqualifiedBindsType();","0","-","-","-","-"
"4837","scopedQualifiedProvidesType","@MyQualifier
  abstract MyComponentModule.ScopedQualifiedProvidesType scopedQualifiedProvidesType();","0","-","-","-","-"
"4838","scopedUnqualifiedProvidesType","abstract MyComponentModule.ScopedUnqualifiedProvidesType scopedUnqualifiedProvidesType();","0","-","-","-","-"
"4839","unscopedQualifiedProvidesType","@MyQualifier
  abstract MyComponentModule.UnscopedQualifiedProvidesType unscopedQualifiedProvidesType();","0","-","-","-","-"
"4840","unscopedUnqualifiedProvidesType","abstract MyComponentModule.UnscopedUnqualifiedProvidesType unscopedUnqualifiedProvidesType();","0","-","-","-","-"
"4841","mySubcomponentWithFactory","abstract MySubcomponentWithFactory.Factory mySubcomponentWithFactory();","0","-","-","-","-"
"4842","mySubcomponentWithBuilder","abstract MySubcomponentWithBuilder.Builder mySubcomponentWithBuilder();","0","-","-","-","-"
"4843","qualifiedMyComponentDependencyBinding","@MyQualifier
  abstract MyComponentDependencyBinding qualifiedMyComponentDependencyBinding();","0","-","-","-","-"
"4844","unqualifiedMyComponentDependencyBinding","abstract MyComponentDependencyBinding unqualifiedMyComponentDependencyBinding();","0","-","-","-","-"
"4845","create","public abstract MyComponent create(
        MyComponentModule myComponentModule,
        MyComponentDependency myComponentDependency);","0","-","-","-","-"
"4846","testFlowerAppWithR8DoesNotCrash","@Test
  public void testFlowerAppWithR8DoesNotCrash()","0","-","-","-","-"
"4847","getFlowerMap","Map<Class<?>, Integer> getFlowerMap();","0","-","-","-","-"
"4848","lilyPrice","@IntoMap
  @LazyClassKey(Lily.class)
  @Provides
  static int lilyPrice()","0","-","-","-","-"
"4849","rosePrice","@IntoMap
  @LazyClassKey(Rose.class)
  @Provides
  static int rosePrice()","0","-","-","-","-"
"4850","onCreate","public void onCreate(Bundle savedInstanceState)","0","-","-","-","-"
"4851","parameters","@Parameters(name = ""transitiveDependencyType =","0","-","-","-","-"
"4852","TransitiveQualifierTest","public TransitiveQualifierTest(
      String transitiveDependencyType, String strictSuperficialValidationMode)","0","-","-","-","-"
"4853","testQualifierOnInjectConstructorParameter","@Test
  public void testQualifierOnInjectConstructorParameter() throws IOException","0","-","-","-","-"
"4854","testQualifierOnInjectField","@Test
  public void testQualifierOnInjectField() throws IOException","0","-","-","-","-"
"4855","testQualifierOnInjectMethodParameter","@Test
  public void testQualifierOnInjectMethodParameter() throws IOException","0","-","-","-","-"
"4856","setupRunnerWith","private GradleRunner setupRunnerWith(GradleFile qualifierUsage) throws IOException","0","-","-","-","-"
"4857","parameters","@Parameters(name = ""","0","-","-","-","-"
"4858","TransitiveProvidesScopeTest","public TransitiveProvidesScopeTest(String transitiveDependencyType)","0","-","-","-","-"
"4859","testScopeOnProvidesMethod","@Test
  public void testScopeOnProvidesMethod() throws IOException","0","-","-","-","-"
"4860","setupRunner","private GradleRunner setupRunner() throws IOException","0","-","-","-","-"
"4861","testTransitiveScope_WithImplementation","@Test
  public void testTransitiveScope_WithImplementation() throws IOException","0","-","-","-","-"
"4862","testTransitiveScope_WithApi","@Test
  public void testTransitiveScope_WithApi() throws IOException","0","-","-","-","-"
"4863","setupRunnerWith","private GradleRunner setupRunnerWith(String dependencyType) throws IOException","0","-","-","-","-"
"4864","parameters","@Parameters(name = ""","0","-","-","-","-"
"4865","TransitiveBindsQualifierTest","public TransitiveBindsQualifierTest(String transitiveDependencyType)","0","-","-","-","-"
"4866","testQualifierOnBindsMethod","@Test
  public void testQualifierOnBindsMethod() throws IOException","0","-","-","-","-"
"4867","setupRunner","private GradleRunner setupRunner() throws IOException","0","-","-","-","-"
"4868","parameters","@Parameters(name = ""","0","-","-","-","-"
"4869","TransitiveComponentDependenciesTest","public TransitiveComponentDependenciesTest(String transitiveDependencyType)","0","-","-","-","-"
"4870","testsComponentDependencies","@Test
  public void testsComponentDependencies() throws IOException","0","-","-","-","-"
"4871","setupRunner","private GradleRunner setupRunner() throws IOException","0","-","-","-","-"
"4872","parameters","@Parameters(name = ""","0","-","-","-","-"
"4873","TransitiveSubcomponentModulesTest","public TransitiveSubcomponentModulesTest(String transitiveDependencyType)","0","-","-","-","-"
"4874","testSubcomponentAnnotationWithTransitiveModule","@Test
  public void testSubcomponentAnnotationWithTransitiveModule() throws IOException","0","-","-","-","-"
"4875","testSubcomponentAnnotationWithModuleIncludesTransitiveModuleDependencies","@Test
  public void testSubcomponentAnnotationWithModuleIncludesTransitiveModuleDependencies()
      throws IOException","0","-","-","-","-"
"4876","setupRunner","private GradleRunner setupRunner(GradleFile subcomponent) throws IOException","0","-","-","-","-"
"4877","parameters","@Parameters(name = ""","0","-","-","-","-"
"4878","TransitiveBindsScopeTest","public TransitiveBindsScopeTest(String transitiveDependencyType)","0","-","-","-","-"
"4879","testScopeOnBindsMethod","@Test
  public void testScopeOnBindsMethod() throws IOException","0","-","-","-","-"
"4880","setupRunner","private GradleRunner setupRunner() throws IOException","0","-","-","-","-"
"4881","testBuild","@Test
  public void testBuild() throws IOException","0","-","-","-","-"
"4882","setupRunner","private GradleRunner setupRunner() throws IOException","0","-","-","-","-"
"4883","parameters","@Parameters(name = ""","0","-","-","-","-"
"4884","TransitiveSubcomponentScopeTest","public TransitiveSubcomponentScopeTest(String transitiveDependencyType)","0","-","-","-","-"
"4885","testScopeWithSubcomponent","@Test
  public void testScopeWithSubcomponent() throws IOException","0","-","-","-","-"
"4886","setupRunner","private GradleRunner setupRunner() throws IOException","0","-","-","-","-"
"4887","testIncrementalProcessing","@Test
  public void testIncrementalProcessing() throws IOException","0","-","-","-","-"
"4888","build","private static BuildResult build(File projectDir)","0","-","-","-","-"
"4889","getAllKspGeneratedFileNames","private static Set<String> getAllKspGeneratedFileNames(Path moduleDir) throws IOException","0","-","-","-","-"
"4890","getAllFileNames","private static Set<String> getAllFileNames(Path dir) throws IOException","0","-","-","-","-"
"4891","testTransitiveMapKey_WithImplementation","@Test
  public void testTransitiveMapKey_WithImplementation() throws IOException","0","-","-","-","-"
"4892","testTransitiveMapKey_WithApi","@Test
  public void testTransitiveMapKey_WithApi() throws IOException","0","-","-","-","-"
"4893","setupRunnerWith","private GradleRunner setupRunnerWith(String dependencyType) throws IOException","0","-","-","-","-"
"4894","parameters","@Parameters(name = ""","0","-","-","-","-"
"4895","TransitiveSubcomponentQualifierTest","public TransitiveSubcomponentQualifierTest(String transitiveDependencyType)","0","-","-","-","-"
"4896","testQualifierWithFactory","@Test
  public void testQualifierWithFactory() throws IOException","0","-","-","-","-"
"4897","testQualifierOnBaseClassWithFactory","@Test
  public void testQualifierOnBaseClassWithFactory() throws IOException","0","-","-","-","-"
"4898","testQualifierWithBuilder","@Test
  public void testQualifierWithBuilder() throws IOException","0","-","-","-","-"
"4899","testQualifierOnBaseClassWithBuilder","@Test
  public void testQualifierOnBaseClassWithBuilder() throws IOException","0","-","-","-","-"
"4900","setupRunnerWith","private GradleRunner setupRunnerWith(GradleFile... library1Files) throws IOException","0","-","-","-","-"
"4901","testInjectMethod","@Test
  public void testInjectMethod() throws IOException","0","-","-","-","-"
"4902","testNonInjectMethod","@Test
  public void testNonInjectMethod() throws IOException","0","-","-","-","-"
"4903","setupRunner","private GradleRunner setupRunner(boolean useInject) throws IOException","0","-","-","-","-"
"4904","parameters","@Parameters(name = ""","0","-","-","-","-"
"4905","TransitiveProvidesParameterizedTypeTest","public TransitiveProvidesParameterizedTypeTest(String transitiveDependencyType)","0","-","-","-","-"
"4906","testQualifierOnProvidesMethodParameter","@Test
  public void testQualifierOnProvidesMethodParameter() throws IOException","0","-","-","-","-"
"4907","setupRunner","private GradleRunner setupRunner() throws IOException","0","-","-","-","-"
"4908","parameters","@Parameters(name = ""","0","-","-","-","-"
"4909","TransitiveProvidesQualifierTest","public TransitiveProvidesQualifierTest(String transitiveDependencyType)","0","-","-","-","-"
"4910","testQualifierOnProvidesMethodParameter","@Test
  public void testQualifierOnProvidesMethodParameter() throws IOException","0","-","-","-","-"
"4911","setupRunner","private GradleRunner setupRunner() throws IOException","0","-","-","-","-"
"4912","testBuild","@Test
  public void testBuild() throws IOException","0","-","-","-","-"
"4913","setupRunner","private GradleRunner setupRunner() throws IOException","0","-","-","-","-"
"4914","create","/** Creates a","0","-","-","-","-"
"4915","GradleFile","GradleFile(String fileName, String... fileContent)","0","-","-","-","-"
"4916","fileName","String fileName()","0","-","-","-","-"
"4917","fileContent","String[] fileContent()","0","-","-","-","-"
"4918","create","public static GradleModule create(File moduleDir)","0","-","-","-","-"
"4919","create","public static GradleModule create(File projectDir, String moduleName)","0","-","-","-","-"
"4920","GradleModule","private GradleModule(File moduleDir)","0","-","-","-","-"
"4921","getDir","public Path getDir()","0","-","-","-","-"
"4922","addBuildFile","public GradleModule addBuildFile(String... content) throws IOException","0","-","-","-","-"
"4923","addSettingsFile","public GradleModule addSettingsFile(String... content) throws IOException","0","-","-","-","-"
"4924","addFile","public GradleModule addFile(GradleFile gradleFile) throws IOException","0","-","-","-","-"
"4925","addFile","public GradleModule addFile(String fileName, String... content) throws IOException","0","-","-","-","-"
"4926","addSrcFiles","public GradleModule addSrcFiles(GradleFile... gradleFiles) throws IOException","0","-","-","-","-"
"4927","addSrcFile","public GradleModule addSrcFile(GradleFile gradleFile) throws IOException","0","-","-","-","-"
"4928","addSrcFile","public GradleModule addSrcFile(String fileName, String... content) throws IOException","0","-","-","-","-"
"4929","createFile","private static File createFile(File dir, String fileName)","0","-","-","-","-"
"4930","writeFile","private static void writeFile(File destination, String... content) throws IOException","0","-","-","-","-"
"4931","setUp","@Before
  public void setUp()","0","-","-","-","-"
"4932","testFoo","@Test
  public void testFoo()","0","-","-","-","-"
"4933","testParameterizedFoo","@Test
  public void testParameterizedFoo()","0","-","-","-","-"
"4934","setUp","@Before
  public void setUp()","0","-","-","-","-"
"4935","fooTest","@Test
  public void fooTest()","0","-","-","-","-"
"4936","scopedFooTest","@Test
  public void scopedFooTest()","0","-","-","-","-"
"4937","providedFooTest","@Test
  public void providedFooTest()","0","-","-","-","-"
"4938","scopedProvidedFooTest","@Test
  public void scopedProvidedFooTest()","0","-","-","-","-"
"4939","Foo","@Inject
    Foo()","0","-","-","-","-"
"4940","ScopedFoo","@Inject
    ScopedFoo()","0","-","-","-","-"
"4941","ProvidedFoo","ProvidedFoo()","0","-","-","-","-"
"4942","ScopedProvidedFoo","ScopedProvidedFoo()","0","-","-","-","-"
"4943","provideFoo","@Provides
    static ProvidedFoo provideFoo()","0","-","-","-","-"
"4944","provideScopedFoo","@Provides
    @Singleton
    static ScopedProvidedFoo provideScopedFoo()","0","-","-","-","-"
"4945","foo","Foo foo();","0","-","-","-","-"
"4946","scopedFoo","ScopedFoo scopedFoo();","0","-","-","-","-"
"4947","providedFoo","ProvidedFoo providedFoo();","0","-","-","-","-"
"4948","scopedProvidedFoo","ScopedProvidedFoo scopedProvidedFoo();","0","-","-","-","-"
"4949","scopedFooProvider","Provider<ScopedFoo> scopedFooProvider();","0","-","-","-","-"
"4950","scopedProvidedFooProvider","Provider<ScopedProvidedFoo> scopedProvidedFooProvider();","0","-","-","-","-"
"4951","fooFactory","FooFactory fooFactory();","0","-","-","-","-"
"4952","parameterizedFooFactory","ParameterizedFooFactory<Bar, String> parameterizedFooFactory();","0","-","-","-","-"
"4953","Bar","@Inject
    Bar()","0","-","-","-","-"
"4954","Foo","@AssistedInject
    Foo(Bar bar, @Assisted String assistedStr)","0","-","-","-","-"
"4955","create","Foo create(String str);","0","-","-","-","-"
"4956","ParameterizedFoo","@AssistedInject
    ParameterizedFoo(T1 t1, @Assisted T2 assistedT2)","0","-","-","-","-"
"4957","create","ParameterizedFoo<T1, T2> create(T2 t2);","0","-","-","-","-"
"4958","scopedQualifiedProvidesType","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Provides
  @Singleton
  @MyQualifier
  ScopedQualifiedProvidesType scopedQualifiedProvidesType(
      @MyQualifier
          @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          Dep dep)","0","-","-","-","-"
"4959","scopedUnqualifiedProvidesType","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Provides
  @Singleton
  ScopedUnqualifiedProvidesType scopedUnqualifiedProvidesType(
      @MyQualifier
          @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          Dep dep)","0","-","-","-","-"
"4960","unscopedQualifiedProvidesType","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Provides
  @MyQualifier
  UnscopedQualifiedProvidesType unscopedQualifiedProvidesType(
      @MyQualifier
          @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          Dep dep)","0","-","-","-","-"
"4961","unscopedUnqualifiedProvidesType","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Provides
  UnscopedUnqualifiedProvidesType unscopedUnqualifiedProvidesType(
      @MyQualifier
          @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          Dep dep)","0","-","-","-","-"
"4962","scopedQualifiedBindsType","@MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    @Binds
    @Singleton
    @MyQualifier
    ScopedQualifiedBindsType scopedQualifiedBindsType(
        // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
        @MyQualifier
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            ScopedQualifiedProvidesType scopedQualifiedProvidesType);","0","-","-","-","-"
"4963","scopedUnqualifiedBindsType","@MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    @Binds
    @Singleton
    ScopedUnqualifiedBindsType scopedUnqualifiedBindsType(
        // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
        @MyAnnotation(MyTransitiveType.VALUE) @MyOtherAnnotation(MyTransitiveType.class)
            ScopedUnqualifiedProvidesType scopedUnqualifiedProvidesType);","0","-","-","-","-"
"4964","unscopedQualifiedBindsType","@MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    @Binds
    @MyQualifier
    UnscopedQualifiedBindsType unscopedQualifiedBindsType(
        // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
        @MyQualifier
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            UnscopedQualifiedProvidesType unscopedQualifiedProvidesType);","0","-","-","-","-"
"4965","unscopedUnqualifiedBindsType","@MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    @Binds
    UnscopedUnqualifiedBindsType unscopedUnqualifiedBindsType(
        // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
        @MyAnnotation(MyTransitiveType.VALUE) @MyOtherAnnotation(MyTransitiveType.class)
            UnscopedUnqualifiedProvidesType unscopedUnqualifiedProvidesType);","0","-","-","-","-"
"4966","provideQualifiedDep","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Provides
  @MyQualifier
  Dep provideQualifiedDep()","0","-","-","-","-"
"4967","provideDep","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Provides
  Dep provideDep()","0","-","-","-","-"
"4968","MyComponentModule","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyComponentModule(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          Dep dep)","0","-","-","-","-"
"4969","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4970","nonDaggerStaticMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  static MyTransitiveType nonDaggerStaticMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4971","qualifiedMySubcomponentBinding","@MyQualifier
  // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract MySubcomponentBinding qualifiedMySubcomponentBinding();","0","-","-","-","-"
"4972","unqualifiedMySubcomponentBinding","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract MySubcomponentBinding unqualifiedMySubcomponentBinding();","0","-","-","-","-"
"4973","injectFoo","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract void injectFoo(
      // TODO(b/219587431): Support @MyTransitiveAnnotation (We shouldn't need scope/qualifier here)
      @MyAnnotation(MyTransitiveType.VALUE) @MyOtherAnnotation(MyTransitiveType.class) Foo foo);","0","-","-","-","-"
"4974","mySubcomponentModule","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public abstract Builder mySubcomponentModule(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MySubcomponentModule mySubcomponentModule);","0","-","-","-","-"
"4975","qualifiedMySubcomponentBinding","@BindsInstance
    @MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public abstract Builder qualifiedMySubcomponentBinding(
        @MyQualifier
            // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MySubcomponentBinding subcomponentBinding);","0","-","-","-","-"
"4976","unqualifiedMySubcomponentBinding","@BindsInstance
    @MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public abstract Builder unqualifiedMySubcomponentBinding(
        // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
        @MyAnnotation(MyTransitiveType.VALUE) @MyOtherAnnotation(MyTransitiveType.class)
            MySubcomponentBinding subcomponentBinding);","0","-","-","-","-"
"4977","build","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public abstract MySubcomponentWithBuilder build();","0","-","-","-","-"
"4978","nonDaggerMethod","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public void nonDaggerMethod(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            String str)","0","-","-","-","-"
"4979","nonDaggerStaticMethod","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public static void nonDaggerStaticMethod(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            String str)","0","-","-","-","-"
"4980","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4981","nonDaggerStaticMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public static MyTransitiveType nonDaggerStaticMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4982","FooBase","@MyTransitiveBaseAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  FooBase(
      @MyTransitiveBaseAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4983","FooBase","@MyTransitiveBaseAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Inject
  FooBase(
      @MyTransitiveBaseAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @MyQualifier
          Dep dep)","0","-","-","-","-"
"4984","baseNonDaggerMethod","@MyTransitiveBaseAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  void baseNonDaggerMethod(
      @MyTransitiveBaseAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          int i)","0","-","-","-","-"
"4985","baseDaggerMethod","@MyTransitiveBaseAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Inject
  void baseDaggerMethod(
      @MyTransitiveBaseAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @MyQualifier
          Dep dep)","0","-","-","-","-"
"4986","AssistedFoo","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  AssistedFoo(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4987","AssistedFoo","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @AssistedInject
  AssistedFoo(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @Assisted
          int i,
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @MyQualifier
          Dep dep)","0","-","-","-","-"
"4988","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4989","daggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Inject
  void daggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @MyQualifier
          Dep dep)","0","-","-","-","-"
"4990","create","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    AssistedFoo create(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            int i);","0","-","-","-","-"
"4991","qualifiedMySubcomponentBinding","@MyQualifier
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract MySubcomponentBinding qualifiedMySubcomponentBinding();","0","-","-","-","-"
"4992","unqualifiedMySubcomponentBinding","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract MySubcomponentBinding unqualifiedMySubcomponentBinding();","0","-","-","-","-"
"4993","injectFoo","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract void injectFoo(
      // TODO(b/219587431): Support @MyTransitiveAnnotation (We shouldn't need scope/qualifier here)
      @MyAnnotation(MyTransitiveType.VALUE) @MyOtherAnnotation(MyTransitiveType.class) Foo foo);","0","-","-","-","-"
"4994","create","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public abstract MySubcomponentWithFactory create(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MySubcomponentModule mySubcomponentModule,
        @BindsInstance
            @MyQualifier
            // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MySubcomponentBinding qualifiedSubcomponentBinding,
        @BindsInstance
            // TODO(b/219587431): Support @MyTransitiveAnnotation (Requires generating metadata).
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MySubcomponentBinding unqualifiedSubcomponentBinding);","0","-","-","-","-"
"4995","nonDaggerMethod","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public MyTransitiveType nonDaggerMethod(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4996","nonDaggerStaticMethod","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public static MyTransitiveType nonDaggerStaticMethod(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4997","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4998","nonDaggerStaticMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public static MyTransitiveType nonDaggerStaticMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"4999","Foo","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  Foo(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"5000","Foo","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Inject
  Foo(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @MyQualifier
          Dep dep)","0","-","-","-","-"
"5001","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"5002","daggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  @Inject
  void daggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          @MyQualifier
          Dep dep)","0","-","-","-","-"
"5003","unscopedQualifiedBindsTypeBase","@MyQualifier
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract MyComponentModule.UnscopedQualifiedBindsType unscopedQualifiedBindsTypeBase();","0","-","-","-","-"
"5004","unscopedUnqualifiedBindsTypeBase","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract MyComponentModule.UnscopedUnqualifiedBindsType unscopedUnqualifiedBindsTypeBase();","0","-","-","-","-"
"5005","injectFooBase","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public abstract void injectFooBase(
      // TODO(b/219587431): Support @MyTransitiveAnnotation (We shouldn't need scope/qualifier here)
      @MyAnnotation(MyTransitiveType.VALUE) @MyOtherAnnotation(MyTransitiveType.class) Foo binding);","0","-","-","-","-"
"5006","create","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public abstract MyBaseComponent create(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MyComponentModule myComponentModule,
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MyComponentDependency myComponentDependency);","0","-","-","-","-"
"5007","nonDaggerMethod","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public MyTransitiveType nonDaggerMethod(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"5008","nonDaggerStaticMethod","@MyTransitiveAnnotation
    @MyAnnotation(MyTransitiveType.VALUE)
    @MyOtherAnnotation(MyTransitiveType.class)
    public static MyTransitiveType nonDaggerStaticMethod(
        @MyTransitiveAnnotation
            @MyAnnotation(MyTransitiveType.VALUE)
            @MyOtherAnnotation(MyTransitiveType.class)
            MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"5009","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"5010","nonDaggerStaticMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public static MyTransitiveType nonDaggerStaticMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"5011","MyComponentDependency","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyComponentDependency()","0","-","-","-","-"
"5012","qualifiedMyComponentDependencyBinding","@MyQualifier
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyComponentDependencyBinding qualifiedMyComponentDependencyBinding()","0","-","-","-","-"
"5013","unqualifiedMyComponentDependencyBinding","@MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyComponentDependencyBinding unqualifiedMyComponentDependencyBinding()","0","-","-","-","-"
"5014","nonDaggerMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MyTransitiveType nonDaggerMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"5015","nonDaggerStaticMethod","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public static MyTransitiveType nonDaggerStaticMethod(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          MyTransitiveType nonDaggerParameter)","0","-","-","-","-"
"5016","MySubcomponentModule","@MyTransitiveAnnotation
  @MyAnnotation(MyTransitiveType.VALUE)
  @MyOtherAnnotation(MyTransitiveType.class)
  public MySubcomponentModule(
      @MyTransitiveAnnotation
          @MyAnnotation(MyTransitiveType.VALUE)
          @MyOtherAnnotation(MyTransitiveType.class)
          int i)","0","-","-","-","-"
"5017","setup","@Before
  public void setup()","0","-","-","-","-"
"5018","testMySubcomponentBinding","@Test
  public void testMySubcomponentBinding()","0","-","-","-","-"
"5019","setup","@Before
  public void setup()","0","-","-","-","-"
"5020","testMySubcomponentBinding","@Test
  public void testMySubcomponentBinding()","0","-","-","-","-"
"5021","setup","@Before
  public void setup()","0","-","-","-","-"
"5022","testFooIsScoped","@Test
  public void testFooIsScoped()","0","-","-","-","-"
"5023","testAssistedFoo","@Test
  public void testAssistedFoo()","0","-","-","-","-"
"5024","testScopedQualifiedBindsTypeIsScoped","@Test
  public void testScopedQualifiedBindsTypeIsScoped()","0","-","-","-","-"
"5025","testScopedUnqualifiedBindsTypeIsScoped","@Test
  public void testScopedUnqualifiedBindsTypeIsScoped()","0","-","-","-","-"
"5026","testUnscopedQualifiedBindsTypeIsNotScoped","@Test
  public void testUnscopedQualifiedBindsTypeIsNotScoped()","0","-","-","-","-"
"5027","testUnscopedUnqualifiedBindsTypeIsNotScoped","@Test
  public void testUnscopedUnqualifiedBindsTypeIsNotScoped()","0","-","-","-","-"
"5028","testScopedQualifiedProvidesTypeIsScoped","@Test
  public void testScopedQualifiedProvidesTypeIsScoped()","0","-","-","-","-"
"5029","testScopedUnqualifiedProvidesTypeIsScoped","@Test
  public void testScopedUnqualifiedProvidesTypeIsScoped()","0","-","-","-","-"
"5030","testUnscopedQualifiedProvidesTypeIsNotScoped","@Test
  public void testUnscopedQualifiedProvidesTypeIsNotScoped()","0","-","-","-","-"
"5031","testUnscopedUnqualifiedProvidesTypeIsNotScoped","@Test
  public void testUnscopedUnqualifiedProvidesTypeIsNotScoped()","0","-","-","-","-"
"5032","testMyComponentDependencyBinding","@Test
  public void testMyComponentDependencyBinding()","0","-","-","-","-"
"5033","foo","abstract Foo foo();","0","-","-","-","-"
"5034","assistedFooFactory","abstract AssistedFoo.Factory assistedFooFactory();","0","-","-","-","-"
"5035","scopedQualifiedBindsType","@MyQualifier
  abstract MyComponentModule.ScopedQualifiedBindsType scopedQualifiedBindsType();","0","-","-","-","-"
"5036","scopedUnqualifiedBindsType","abstract MyComponentModule.ScopedUnqualifiedBindsType scopedUnqualifiedBindsType();","0","-","-","-","-"
"5037","unscopedQualifiedBindsType","@MyQualifier
  abstract MyComponentModule.UnscopedQualifiedBindsType unscopedQualifiedBindsType();","0","-","-","-","-"
"5038","unscopedUnqualifiedBindsType","abstract MyComponentModule.UnscopedUnqualifiedBindsType unscopedUnqualifiedBindsType();","0","-","-","-","-"
"5039","scopedQualifiedProvidesType","@MyQualifier
  abstract MyComponentModule.ScopedQualifiedProvidesType scopedQualifiedProvidesType();","0","-","-","-","-"
"5040","scopedUnqualifiedProvidesType","abstract MyComponentModule.ScopedUnqualifiedProvidesType scopedUnqualifiedProvidesType();","0","-","-","-","-"
"5041","unscopedQualifiedProvidesType","@MyQualifier
  abstract MyComponentModule.UnscopedQualifiedProvidesType unscopedQualifiedProvidesType();","0","-","-","-","-"
"5042","unscopedUnqualifiedProvidesType","abstract MyComponentModule.UnscopedUnqualifiedProvidesType unscopedUnqualifiedProvidesType();","0","-","-","-","-"
"5043","mySubcomponentWithFactory","abstract MySubcomponentWithFactory.Factory mySubcomponentWithFactory();","0","-","-","-","-"
"5044","mySubcomponentWithBuilder","abstract MySubcomponentWithBuilder.Builder mySubcomponentWithBuilder();","0","-","-","-","-"
"5045","qualifiedMyComponentDependencyBinding","@MyQualifier
  abstract MyComponentDependencyBinding qualifiedMyComponentDependencyBinding();","0","-","-","-","-"
"5046","unqualifiedMyComponentDependencyBinding","abstract MyComponentDependencyBinding unqualifiedMyComponentDependencyBinding();","0","-","-","-","-"
"5047","create","public abstract MyComponent create(
        MyComponentModule myComponentModule,
        MyComponentDependency myComponentDependency);","0","-","-","-","-"
"5048","setUp","@Before
  public void setUp()","0","-","-","-","-"
"5049","testFoo","@Test
  public void testFoo()","0","-","-","-","-"
"5050","testParameterizedFoo","@Test
  public void testParameterizedFoo()","0","-","-","-","-"
"5051","setUp","@Before
  public void setUp()","0","-","-","-","-"
"5052","fooTest","@Test
  public void fooTest()","0","-","-","-","-"
"5053","scopedFooTest","@Test
  public void scopedFooTest()","0","-","-","-","-"
"5054","providedFooTest","@Test
  public void providedFooTest()","0","-","-","-","-"
"5055","scopedProvidedFooTest","@Test
  public void scopedProvidedFooTest()","0","-","-","-","-"
"5056","Foo","@Inject
    Foo()","0","-","-","-","-"
"5057","ScopedFoo","@Inject
    ScopedFoo()","0","-","-","-","-"
"5058","ProvidedFoo","ProvidedFoo()","0","-","-","-","-"
"5059","ScopedProvidedFoo","ScopedProvidedFoo()","0","-","-","-","-"
"5060","provideFoo","@Provides
    static ProvidedFoo provideFoo()","0","-","-","-","-"
"5061","provideScopedFoo","@Provides
    @Singleton
    static ScopedProvidedFoo provideScopedFoo()","0","-","-","-","-"
"5062","foo","Foo foo();","0","-","-","-","-"
"5063","scopedFoo","ScopedFoo scopedFoo();","0","-","-","-","-"
"5064","providedFoo","ProvidedFoo providedFoo();","0","-","-","-","-"
"5065","scopedProvidedFoo","ScopedProvidedFoo scopedProvidedFoo();","0","-","-","-","-"
"5066","scopedFooProvider","Provider<ScopedFoo> scopedFooProvider();","0","-","-","-","-"
"5067","scopedProvidedFooProvider","Provider<ScopedProvidedFoo> scopedProvidedFooProvider();","0","-","-","-","-"
"5068","fooFactory","FooFactory fooFactory();","0","-","-","-","-"
"5069","parameterizedFooFactory","ParameterizedFooFactory<Bar, String> parameterizedFooFactory();","0","-","-","-","-"
"5070","Bar","@Inject
    Bar()","0","-","-","-","-"
"5071","Foo","@AssistedInject
    Foo(Bar bar, @Assisted String assistedStr)","0","-","-","-","-"
"5072","create","Foo create(String str);","0","-","-","-","-"
"5073","ParameterizedFoo","@AssistedInject
    ParameterizedFoo(T1 t1, @Assisted T2 assistedT2)","0","-","-","-","-"
"5074","create","ParameterizedFoo<T1, T2> create(T2 t2);","0","-","-","-","-"
"5075","testHiltViewModelWithR8DoesNotCrash","@Test
    public void testHiltViewModelWithR8DoesNotCrash()","0","-","-","-","-"
"5076","SimpleViewModel","@Inject
  SimpleViewModel(@UserName String userName)","0","-","-","-","-"
"5077","onCreate","@Override
  protected void onCreate(Bundle savedInstanceState)","0","-","-","-","-"
"5078","provideUserName","@UserName
  @Provides
  static String provideUserName()","0","-","-","-","-"
"5079","UserNameModule","private UserNameModule()","0","-","-","-","-"
"5080","testFlowerAppWithR8DoesNotCrash","@Test
  public void testFlowerAppWithR8DoesNotCrash()","0","-","-","-","-"
"5081","lilyPrice","@IntoMap
  @LazyClassKey(Lily.class)
  @Provides
  static int lilyPrice()","0","-","-","-","-"
"5082","rosePrice","@IntoMap
  @LazyClassKey(Rose.class)
  @Provides
  static int rosePrice()","0","-","-","-","-"
"5083","onCreate","@Override
  public void onCreate(Bundle savedInstanceState)","0","-","-","-","-"
"5084","getDeepInstance","DeepLib getDeepInstance();","0","-","-","-","-"
"5085","DeepLib","@Inject
  public DeepLib()","0","-","-","-","-"
"5086","getInstance","public static DeepLib getInstance(Object componentManager)","0","-","-","-","-"
"5087","testApplicationBaseClass","@Test
  public void testApplicationBaseClass() throws Exception","0","-","-","-","-"
"5088","testEarlyEntryPoint","@Test
  public void testEarlyEntryPoint() throws Exception","0","-","-","-","-"
"5089","newApplication","@Override
  public Application newApplication(ClassLoader cl, String className, Context context)
      throws ClassNotFoundException, IllegalAccessException, InstantiationException","0","-","-","-","-"
"5090","testApplicationBaseClass","@Test
  public void testApplicationBaseClass() throws Exception","0","-","-","-","-"
"5091","testEarlyEntryPoint","@Test
  public void testEarlyEntryPoint() throws Exception","0","-","-","-","-"
"5092","testEntryPoint","@Test
  public void testEntryPoint()","0","-","-","-","-"
"5093","provideString","@Provides
    @Named(APPLICATION_QUALIFIER)
    static String provideString()","0","-","-","-","-"
"5094","provideString","@Provides
    @Named(ACTIVITY_QUALIFIER)
    static String provideString()","0","-","-","-","-"
"5095","testApplicationInjection","@Test
  public void testApplicationInjection() throws Exception","0","-","-","-","-"
"5096","testActivityInjection","@Test
  public void testActivityInjection() throws Exception","0","-","-","-","-"
"5097","build","CustomComponent build();","0","-","-","-","-"
"5098","unscopedDep","@Provides
    static UnscopedDep unscopedDep()","0","-","-","-","-"
"5099","activityScopedDep","@Provides
    @ActivityScoped
    static ActivityScopedDep activityScopedDep()","0","-","-","-","-"
"5100","aliasScopedDep","@Provides
    @AliasScoped
    static AliasScopedDep aliasScopedDep()","0","-","-","-","-"
"5101","customScopedDep","@Provides
    @CustomScoped
    static CustomScopedDep customScopedDep()","0","-","-","-","-"
"5102","aliasScopedDep","@Provides
    @AliasScoped
    static AliasScopedDep aliasScopedDep()","0","-","-","-","-"
"5103","customComponentBuilder","CustomComponent.Builder customComponentBuilder();","0","-","-","-","-"
"5104","unscopedDep","Provider<UnscopedDep> unscopedDep();","0","-","-","-","-"
"5105","customScopedDep","Provider<CustomScopedDep> customScopedDep();","0","-","-","-","-"
"5106","aliasScopedDep","Provider<AliasScopedDep> aliasScopedDep();","0","-","-","-","-"
"5107","setUp","@Before
  public void setUp()","0","-","-","-","-"
"5108","testActivityScoped","@Test
  public void testActivityScoped()","0","-","-","-","-"
"5109","testCustomScoped","@Test
  public void testCustomScoped()","0","-","-","-","-"
"5110","earlyFoo","Foo earlyFoo();","0","-","-","-","-"
"5111","lazyFoo","Foo lazyFoo();","0","-","-","-","-"
"5112","Foo","@Inject
    Foo()","0","-","-","-","-"
"5113","onCreate","@Override
  public void onCreate()","0","-","-","-","-"
"5114","earlyFoo","public Foo earlyFoo()","0","-","-","-","-"
"5115","lazyEarlyFoo","public Foo lazyEarlyFoo()","0","-","-","-","-"
"5116","lazyFoo","public Foo lazyFoo()","0","-","-","-","-"
"5117","constructorCallOfOldSuperclass","@Test
  public void constructorCallOfOldSuperclass()","0","-","-","-","-"
"5118","onCreate","@Override
    protected void onCreate(@Nullable Bundle savedInstanceState)","0","-","-","-","-"
"5119","CustomView","public CustomView(@NonNull Context context)","0","-","-","-","-"
"5120","createBrother","FrameLayout createBrother()","0","-","-","-","-"
"5121","foo","String foo();","0","-","-","-","-"
"5122","testLateBindValue","@Test
  public void testLateBindValue() throws Exception","0","-","-","-","-"
"5123","testUnitializedBindValue_fails","@Test
  public void testUnitializedBindValue_fails() throws Exception","0","-","-","-","-"
"5124","testDoubleComponentReady_fails","@Test
  public void testDoubleComponentReady_fails() throws Exception","0","-","-","-","-"
"5125","testMissingComponentReady_fails","@Test
  public void testMissingComponentReady_fails() throws Exception","0","-","-","-","-"
"5126","testDelayComponentReadyAfterStart_fails","@Test
  public void testDelayComponentReadyAfterStart_fails() throws Exception","0","-","-","-","-"
"5127","bindValueString","@Named(TEST_QUALIFIER)
    String bindValueString();","0","-","-","-","-"
"5128","getStringSet","Set<String> getStringSet();","0","-","-","-","-"
"5129","testBindValueFieldIsProvided","@Test
  public void testBindValueFieldIsProvided() throws Exception","0","-","-","-","-"
"5130","testBindValueIsMutable","@Test
  public void testBindValueIsMutable() throws Exception","0","-","-","-","-"
"5131","testElementsIntoSet","@Test
  public void testElementsIntoSet() throws Exception","0","-","-","-","-"
"5132","testBindValueIntoMap","@Test
  public void testBindValueIntoMap() throws Exception","0","-","-","-","-"
"5133","testBindValueIntoSet","@Test
  public void testBindValueIntoSet() throws Exception","0","-","-","-","-"
"5134","getBinding","private static String getBinding()","0","-","-","-","-"
"5135","testInjectedUserName","@Test
  public void testInjectedUserName() throws Exception","0","-","-","-","-"
"5136","testInjectedModel","@Test
  public void testInjectedModel() throws Exception","0","-","-","-","-"
"5137","testActivityInject","@Test
  public void testActivityInject() throws Exception","0","-","-","-","-"
"5138","verifyMainActivity","@Test
  public void verifyMainActivity()","0","-","-","-","-"
"5139","verifyThing","@Test
  public void verifyThing()","0","-","-","-","-"
"5140","testState","@Test
  public void testState()","0","-","-","-","-"
"5141","testInjection","@Test
  public void testInjection()","0","-","-","-","-"
"5142","verifyMainActivity","@Test
  public void verifyMainActivity()","0","-","-","-","-"
"5143","provideString","@Provides
    @TestQualifier(1)
    String provideString()","0","-","-","-","-"
"5144","provideString","@Provides
    @TestQualifier(2)
    static String provideString()","0","-","-","-","-"
"5145","StaticModuleStaticProvides","private StaticModuleStaticProvides()","0","-","-","-","-"
"5146","provideString","@Provides
    @TestQualifier(3)
    String provideString()","0","-","-","-","-"
"5147","provideString","@Provides
    @TestQualifier(4)
    static String provideString()","0","-","-","-","-"
"5148","AbstractModuleStaticProvides","private AbstractModuleStaticProvides()","0","-","-","-","-"
"5149","foo","@Binds
    abstract Foo foo(FooImpl fooImpl);","0","-","-","-","-"
"5150","FooImpl","@Inject
    FooImpl()","0","-","-","-","-"
"5151","testInjection","@Test
  public void testInjection() throws Exception","0","-","-","-","-"
"5152","provideString","@Provides
    @Named(APPLICATION_QUALIFIER)
    static String provideString()","0","-","-","-","-"
"5153","provideString","@Provides
    @Named(ACTIVITY_QUALIFIER)
    static String provideString()","0","-","-","-","-"
"5154","testApplicationInjection","@Test
  public void testApplicationInjection() throws Exception","0","-","-","-","-"
"5155","testActivityInjection","@Test
  public void testActivityInjection() throws Exception","0","-","-","-","-"
"5156","testSuperClassTransformation","@Test
  public void testSuperClassTransformation()","0","-","-","-","-"
"5157","onCreate","@Override
  public void onCreate()","0","-","-","-","-"
"5158","onCreate","@Override
  protected void onCreate(Bundle savedInstanceState)","0","-","-","-","-"
"5159","provideUserName","@UserName
  @Provides
  static String provideUserName()","0","-","-","-","-"
"5160","UserNameModule","private UserNameModule()","0","-","-","-","-"
"5161","provideModel","@Provides
  @Model
  static String provideModel()","0","-","-","-","-"
"5162","ModelModule","private ModelModule()","0","-","-","-","-"
"5163","getDeepAndroidInstance","DeepAndroidLib getDeepAndroidInstance();","0","-","-","-","-"
"5164","DeepAndroidLib","@Inject
  public DeepAndroidLib()","0","-","-","-","-"
"5165","getInstance","public static DeepAndroidLib getInstance(Context context)","0","-","-","-","-"
"5166","useAppContext","@Test
  public void useAppContext()","0","-","-","-","-"
"5167","provideString","@Provides
    static String provideString()","0","-","-","-","-"
"5168","getString","String getString();","0","-","-","-","-"
"5169","getStringEntryPoint","public String getStringEntryPoint()","0","-","-","-","-"
"5170","ThingImpl","@Inject
  ThingImpl()","0","-","-","-","-"
"5171","bind","@Binds Thing bind(ThingImpl impl);","0","-","-","-","-"
"5172","emptyTest","@Test
  public void emptyTest()","0","-","-","-","-"
"5173","newApplication","@Override
  public Application newApplication(ClassLoader cl, String className, Context context)
      throws ClassNotFoundException, IllegalAccessException, InstantiationException","0","-","-","-","-"
"5174","emptyTest","@Test
  public void emptyTest()","0","-","-","-","-"
"5175","invokeEntryPoints","public static void invokeEntryPoints(Context context)","0","-","-","-","-"
"5176","FeatureEntryPoints","private FeatureEntryPoints()","0","-","-","-","-"
"5177","foo","Foo foo();","0","-","-","-","-"
"5178","testBindValue","@Test
  public void testBindValue() throws Exception","0","-","-","-","-"
"5179","testEarlyEntryPoint","@Test
  public void testEarlyEntryPoint() throws Exception","0","-","-","-","-"
"5180","EarlyEntryPointWithBindValueObjects","private EarlyEntryPointWithBindValueObjects()","0","-","-","-","-"
"5181","Foo","@Inject
    Foo()","0","-","-","-","-"
"5182","getEarlyFoo","Foo getEarlyFoo();","0","-","-","-","-"
"5183","successfulProduced","@Test public void successfulProduced() throws ExecutionException","0","-","-","-","-"
"5184","failedProduced","@Test public void failedProduced()","0","-","-","-","-"
"5185","producedEquivalence","@Test public void producedEquivalence()","0","-","-","-","-"
"5186","createFutureProduced_success","@Test public void createFutureProduced_success() throws Exception","0","-","-","-","-"
"5187","createFutureProduced_failure","@Test public void createFutureProduced_failure() throws Exception","0","-","-","-","-"
"5188","createFutureProduced_cancelPropagatesBackwards","@Test public void createFutureProduced_cancelPropagatesBackwards() throws Exception","0","-","-","-","-"
"5189","createFutureProduced_cancelDoesNotPropagateForwards","@Test public void createFutureProduced_cancelDoesNotPropagateForwards() throws Exception","0","-","-","-","-"
"5190","getProducedException","private <T> ExecutionException getProducedException(Produced<T> produced)","0","-","-","-","-"
"5191","createFutureSingletonSet_success","@Test public void createFutureSingletonSet_success() throws Exception","0","-","-","-","-"
"5192","createFutureSingletonSet_failure","@Test public void createFutureSingletonSet_failure() throws Exception","0","-","-","-","-"
"5193","allAsSet_success","@Test
  public void allAsSet_success() throws Exception","0","-","-","-","-"
"5194","allAsSet_failure","@Test
  public void allAsSet_failure() throws Exception","0","-","-","-","-"
"5195","producerFromProvider_doesntCache","@Test public void producerFromProvider_doesntCache() throws Exception","0","-","-","-","-"
"5196","get","@Override public Integer get()","0","-","-","-","-"
"5197","success","@Test
  public void success() throws Exception","0","-","-","-","-"
"5198","failingContribution","@Test
  public void failingContribution() throws Exception","0","-","-","-","-"
"5199","success","@Test
  public void success() throws Exception","0","-","-","-","-"
"5200","failure","@Test
  public void failure() throws Exception","0","-","-","-","-"
"5201","delegateNpe","@Test
  public void delegateNpe() throws Exception","0","-","-","-","-"
"5202","delegateSetNpe","@Test
  public void delegateSetNpe() throws Exception","0","-","-","-","-"
"5203","delegateElementNpe","@Test
  public void delegateElementNpe() throws Exception","0","-","-","-","-"
"5204","oneOfDelegateElementNpe","@Test
  public void oneOfDelegateElementNpe() throws Exception","0","-","-","-","-"
"5205","Results","private Results(ImmutableSet<T> successes, ImmutableSet<ExecutionException> failures)","0","-","-","-","-"
"5206","create","static <T> Results<T> create(Set<Produced<T>> setOfProduced)","0","-","-","-","-"
"5207","initMocks","@Before
  public void initMocks()","0","-","-","-","-"
"5208","get","@Override
          public ProductionComponentMonitor get()","0","-","-","-","-"
"5209","monitor_success","@Test
  public void monitor_success() throws Exception","0","-","-","-","-"
"5210","monitor_failure","@Test
  public void monitor_failure() throws Exception","0","-","-","-","-"
"5211","anyListenableFuture","private ListenableFuture<?> anyListenableFuture()","0","-","-","-","-"
"5212","monitor_null","@Test
  public void monitor_null() throws Exception","0","-","-","-","-"
"5213","DelegateProducer","DelegateProducer(
        Provider<ProductionComponentMonitor> componentMonitorProvider,
        ListenableFuture<T> delegate)","0","-","-","-","-"
"5214","get","@Override
            public Executor get()","0","-","-","-","-"
"5215","collectDependencies","@Override
    protected ListenableFuture<Void> collectDependencies()","0","-","-","-","-"
"5216","callProducesMethod","@Override
    protected ListenableFuture<T> callProducesMethod(Void asyncDependencies)","0","-","-","-","-"
"5217","success","@Test
  public void success() throws Exception","0","-","-","-","-"
"5218","delegateNpe","@Test
  public void delegateNpe() throws Exception","0","-","-","-","-"
"5219","delegateSetNpe","@Test
  public void delegateSetNpe() throws Exception","0","-","-","-","-"
"5220","delegateElementNpe","@Test
  public void delegateElementNpe() throws Exception","0","-","-","-","-"
"5221","get_nullPointerException","@Test
  @SuppressWarnings(""CheckReturnValue"")
  public void get_nullPointerException()","0","-","-","-","-"
"5222","get","@Test public void get() throws Exception","0","-","-","-","-"
"5223","compute","@Override
          public ListenableFuture<Integer> compute()","0","-","-","-","-"
"5224","DelegateProducer","DelegateProducer(ListenableFuture<T> delegate)","0","-","-","-","-"
"5225","compute","@Override
    public ListenableFuture<T> compute()","0","-","-","-","-"
"5226","success","@Test
  public void success() throws Exception","0","-","-","-","-"
"5227","failingContributionDoesNotFailMap","@Test
  public void failingContributionDoesNotFailMap() throws Exception","0","-","-","-","-"
"5228","initMocks","@Before
  public void initMocks()","0","-","-","-","-"
"5229","zeroMonitorsReturnsNoOp","@Test
  public void zeroMonitorsReturnsNoOp()","0","-","-","-","-"
"5230","singleMonitor_nullProductionComponentMonitor","@Test
  public void singleMonitor_nullProductionComponentMonitor()","0","-","-","-","-"
"5231","singleMonitor_throwingProductionComponentMonitorFactory","@Test
  public void singleMonitor_throwingProductionComponentMonitorFactory()","0","-","-","-","-"
"5232","singleMonitor_nullProducerMonitor","@Test
  public void singleMonitor_nullProducerMonitor()","0","-","-","-","-"
"5233","singleMonitor_throwingProductionComponentMonitor","@Test
  public void singleMonitor_throwingProductionComponentMonitor()","0","-","-","-","-"
"5234","singleMonitor_normalProducerMonitorSuccess","@Test
  public void singleMonitor_normalProducerMonitorSuccess()","0","-","-","-","-"
"5235","singleMonitor_normalProducerMonitorFailure","@Test
  public void singleMonitor_normalProducerMonitorFailure()","0","-","-","-","-"
"5236","singleMonitor_throwingProducerMonitorSuccess","@Test
  public void singleMonitor_throwingProducerMonitorSuccess()","0","-","-","-","-"
"5237","singleMonitor_throwingProducerMonitorFailure","@Test
  public void singleMonitor_throwingProducerMonitorFailure()","0","-","-","-","-"
"5238","multipleMonitors_nullProductionComponentMonitors","@Test
  public void multipleMonitors_nullProductionComponentMonitors()","0","-","-","-","-"
"5239","multipleMonitors_throwingProductionComponentMonitorFactories","@Test
  public void multipleMonitors_throwingProductionComponentMonitorFactories()","0","-","-","-","-"
"5240","multipleMonitors_someNullProductionComponentMonitors","@Test
  public void multipleMonitors_someNullProductionComponentMonitors()","0","-","-","-","-"
"5241","multipleMonitors_someThrowingProductionComponentMonitorFactories","@Test
  public void multipleMonitors_someThrowingProductionComponentMonitorFactories()","0","-","-","-","-"
"5242","multipleMonitors_normalProductionComponentMonitorSuccess","@Test
  public void multipleMonitors_normalProductionComponentMonitorSuccess()","0","-","-","-","-"
"5243","multipleMonitors_normalProductionComponentMonitorFailure","@Test
  public void multipleMonitors_normalProductionComponentMonitorFailure()","0","-","-","-","-"
"5244","multipleMonitors_someThrowingProducerMonitorsSuccess","@Test
  public void multipleMonitors_someThrowingProducerMonitorsSuccess()","0","-","-","-","-"
"5245","multipleMonitors_someThrowingProducerMonitorsFailure","@Test
  public void multipleMonitors_someThrowingProducerMonitorsFailure()","0","-","-","-","-"
"5246","setUpNormalSingleMonitor","private void setUpNormalSingleMonitor()","0","-","-","-","-"
"5247","setUpNormalMultipleMonitors","private void setUpNormalMultipleMonitors()","0","-","-","-","-"
"5248","initMocks","@Before
  public void initMocks()","0","-","-","-","-"
"5249","zeroRecordersReturnsNoOp","@Test
  public void zeroRecordersReturnsNoOp()","0","-","-","-","-"
"5250","singleRecorder_nullProductionComponentTimingRecorder","@Test
  public void singleRecorder_nullProductionComponentTimingRecorder()","0","-","-","-","-"
"5251","singleRecorder_throwingProductionComponentTimingRecorderFactory","@Test
  public void singleRecorder_throwingProductionComponentTimingRecorderFactory()","0","-","-","-","-"
"5252","singleRecorder_nullProducerTimingRecorder","@Test
  public void singleRecorder_nullProducerTimingRecorder()","0","-","-","-","-"
"5253","singleRecorder_throwingProductionComponentTimingRecorder","@Test
  public void singleRecorder_throwingProductionComponentTimingRecorder()","0","-","-","-","-"
"5254","singleRecorder_normalProducerTimingRecorderSuccess","@Test
  public void singleRecorder_normalProducerTimingRecorderSuccess()","0","-","-","-","-"
"5255","singleRecorder_normalProducerTimingRecorderFailure","@Test
  public void singleRecorder_normalProducerTimingRecorderFailure()","0","-","-","-","-"
"5256","singleRecorder_throwingProducerTimingRecorderSuccess","@Test
  public void singleRecorder_throwingProducerTimingRecorderSuccess()","0","-","-","-","-"
"5257","multipleRecorders_nullProductionComponentTimingRecorders","@Test
  public void multipleRecorders_nullProductionComponentTimingRecorders()","0","-","-","-","-"
"5258","multipleRecorders_throwingProductionComponentTimingRecorderFactories","@Test
  public void multipleRecorders_throwingProductionComponentTimingRecorderFactories()","0","-","-","-","-"
"5259","multipleRecorders_someNullProductionComponentTimingRecorders","@Test
  public void multipleRecorders_someNullProductionComponentTimingRecorders()","0","-","-","-","-"
"5260","multipleRecorders_someThrowingProductionComponentTimingRecorderFactories","@Test
  public void multipleRecorders_someThrowingProductionComponentTimingRecorderFactories()","0","-","-","-","-"
"5261","multipleRecorders_normalProductionComponentTimingRecorderSuccess","@Test
  public void multipleRecorders_normalProductionComponentTimingRecorderSuccess()","0","-","-","-","-"
"5262","multipleRecorders_someThrowingProducerTimingRecordersSuccess","@Test
  public void multipleRecorders_someThrowingProducerTimingRecordersSuccess()","0","-","-","-","-"
"5263","setUpNormalSingleRecorder","private void setUpNormalSingleRecorder()","0","-","-","-","-"
"5264","setUpNormalMultipleRecorders","private void setUpNormalMultipleRecorders()","0","-","-","-","-"
"5265","setUp","@Before
  public void setUp()","0","-","-","-","-"
"5266","normalExecution_success","@Test
  public void normalExecution_success()","0","-","-","-","-"
"5267","normalExecution_failure","@Test
  public void normalExecution_failure()","0","-","-","-","-"
"5268","responses","List<CoffeeResponse> responses()","0","-","-","-","-"
"5269","onNext","@Override
    public void onNext(CoffeeResponse value)","0","-","-","-","-"
"5270","onError","@Override
    public void onError(Throwable t)","0","-","-","-","-"
"5271","onCompleted","@Override
    public void onCompleted()","0","-","-","-","-"
"5272","coffeeServers","@Parameters(name = ""","0","-","-","-","-"
"5273","BaristaTest","public BaristaTest(CoffeeServerResource coffeeServer)","0","-","-","-","-"
"5274","setUp","@Before
  public void setUp()","0","-","-","-","-"
"5275","testUnaryGetCoffee","@Test
  public void testUnaryGetCoffee()","0","-","-","-","-"
"5276","testClientStreamingGetCoffee","@Test
  public void testClientStreamingGetCoffee()","0","-","-","-","-"
"5277","testServerStreamingGetCoffee","@Test
  public void testServerStreamingGetCoffee()","0","-","-","-","-"
"5278","testBidiStreamingGetCoffee","@Test
  public void testBidiStreamingGetCoffee()","0","-","-","-","-"
"5279","request","private CoffeeRequest request(CoffeeType... types)","0","-","-","-","-"
"5280","response","private CoffeeResponse response(String message, CoffeeType... types)","0","-","-","-","-"
"5281","VerifyInterceptor","VerifyInterceptor(CoffeeServerResource coffeeServer)","0","-","-","-","-"
"5282","apply","@Override
  public Statement apply(final Statement base, Description description)","0","-","-","-","-"
"5283","evaluate","@Override
      public void evaluate() throws Throwable","0","-","-","-","-"
"5284","friendlyBaristaServiceDefinition","@Binds
    abstract FriendlyBaristaServiceDefinition friendlyBaristaServiceDefinition(
        CoffeeServerWithUnscopedService testServer);","0","-","-","-","-"
"5285","CoffeeServerResource","CoffeeServerResource(String name, CoffeeServer.Builder<?> coffeeServerBuilder)","0","-","-","-","-"
"5286","name","public String name()","0","-","-","-","-"
"5287","methodCount","public int methodCount(String methodName)","0","-","-","-","-"
"5288","before","@Override
  protected void before() throws IOException, InterruptedException","0","-","-","-","-"
"5289","after","@Override
  protected void after()","0","-","-","-","-"
"5290","toString","@Override
  public String toString()","0","-","-","-","-"
"5291","baristaCallScope","abstract BaristaCallScope baristaCallScope(GrpcCallMetadataModule callMetadataModule);","0","-","-","-","-"
"5292","friendlyBaristaServiceDefinitionFactory","@Provides
    static FriendlyBaristaServiceDefinition.Factory friendlyBaristaServiceDefinitionFactory(
        final CoffeeServerWithCallScopeService testServer)","0","-","-","-","-"
"5293","grpcService","@Override
        public FriendlyBaristaServiceDefinition grpcService(
            GrpcCallMetadataModule grpcCallMetadataModule)","0","-","-","-","-"
"5294","FriendlyBarista","@Inject
  FriendlyBarista()","0","-","-","-","-"
"5295","unaryGetCoffee","@Override
  public void unaryGetCoffee(
      CoffeeRequest request, StreamObserver<CoffeeResponse> responseObserver)","0","-","-","-","-"
"5296","clientStreamingGetCoffee","@Override
  public StreamObserver<CoffeeRequest> clientStreamingGetCoffee(
      final StreamObserver<CoffeeResponse> responseObserver)","0","-","-","-","-"
"5297","onNext","@Override
      public void onNext(CoffeeRequest value)","0","-","-","-","-"
"5298","onError","@Override
      public void onError(Throwable t)","0","-","-","-","-"
"5299","onCompleted","@Override
      public void onCompleted()","0","-","-","-","-"
"5300","serverStreamingGetCoffee","@Override
  public void serverStreamingGetCoffee(
      CoffeeRequest request, StreamObserver<CoffeeResponse> responseObserver)","0","-","-","-","-"
"5301","bidiStreamingGetCoffee","@Override
  public StreamObserver<CoffeeRequest> bidiStreamingGetCoffee(
      final StreamObserver<CoffeeResponse> responseObserver)","0","-","-","-","-"
"5302","onNext","@Override
      public void onNext(CoffeeRequest value)","0","-","-","-","-"
"5303","onError","@Override
      public void onError(Throwable t)","0","-","-","-","-"
"5304","onCompleted","@Override
      public void onCompleted()","0","-","-","-","-"
"5305","response","private CoffeeResponse response(String message, List<CoffeeType> types)","0","-","-","-","-"
"5306","CountingInterceptor","@Inject
  CountingInterceptor()","0","-","-","-","-"
"5307","interceptCall","@Override
  public <RequestT, ResponseT> Listener<RequestT> interceptCall(
      ServerCall<RequestT, ResponseT> call,
      Metadata headers,
      ServerCallHandler<RequestT, ResponseT> next)","0","-","-","-","-"
"5308","countCalls","public int countCalls(String methodName)","0","-","-","-","-"
"5309","testServiceInterceptors","@Provides
    @ForGrpcService(BaristaGrpc.class)
    static List<? extends ServerInterceptor> testServiceInterceptors(
        CountingInterceptor countingInterceptor)","0","-","-","-","-"
"5310","server","protected abstract Server server();","0","-","-","-","-"
"5311","start","public void start() throws IOException","0","-","-","-","-"
"5312","shutdown","public void shutdown()","0","-","-","-","-"
"5313","countingInterceptor","abstract CountingInterceptor countingInterceptor();","0","-","-","-","-"
"5314","inProcessServerModule","Builder<T> inProcessServerModule(InProcessServerModule serverModule);","0","-","-","-","-"
"5315","build","T build();","0","-","-","-","-"
"5316","data","@Parameters(name = ""","0","-","-","-","-"
"5317","BindsOptionalOfMethodValidationTest","public BindsOptionalOfMethodValidationTest(Class<? extends Annotation> moduleAnnotation)","0","-","-","-","-"
"5318","nonAbstract","@Test
  public void nonAbstract()","0","-","-","-","-"
"5319","hasParameters","@Test
  public void hasParameters()","0","-","-","-","-"
"5320","typeParameters","@Test
  public void typeParameters()","0","-","-","-","-"
"5321","notInModule","@Test
  public void notInModule()","0","-","-","-","-"
"5322","throwsException","@Test
  public void throwsException()","0","-","-","-","-"
"5323","returnsVoid","@Test
  public void returnsVoid()","0","-","-","-","-"
"5324","returnsMembersInjector","@Test
  public void returnsMembersInjector()","0","-","-","-","-"
"5325","tooManyQualifiers","@Test
  public void tooManyQualifiers()","0","-","-","-","-"
"5326","intoSet","@Test
  public void intoSet()","0","-","-","-","-"
"5327","elementsIntoSet","@Test
  public void elementsIntoSet()","0","-","-","-","-"
"5328","intoMap","@Test
  public void intoMap()","0","-","-","-","-"
"5329","intoMapWithComponent","/**
   * Tests that @BindsOptionalOf @IntoMap actually causes module validation to fail.
   *
   * @see <a href=""http://b/118434447"">bug 118434447</a>
   */
  @Test
  public void intoMapWithComponent()","0","-","-","-","-"
"5330","Thing","@Inject
    Thing()","0","-","-","-","-"
"5331","implicitlyProvidedType","@Test
  public void implicitlyProvidedType()","0","-","-","-","-"
"5332","hasScope","@Test
  public void hasScope()","0","-","-","-","-"
"5333","assertThatMethod","private DaggerModuleMethodSubject assertThatMethod(String method)","0","-","-","-","-"
"5334","parameters","@Parameters(name = ""","0","-","-","-","-"
"5335","OptionalBindingTest","public OptionalBindingTest(CompilerMode compilerMode)","0","-","-","-","-"
"5336","provideExplicitOptionalInParent_AndBindsOptionalOfInChild","@Test
  public void provideExplicitOptionalInParent_AndBindsOptionalOfInChild()","0","-","-","-","-"
"5337","cachedInParent_succeeds","@Test
  public void cachedInParent_succeeds()","0","-","-","-","-"
"5338","setUp","@Before
  public void setUp()","0","-","-","-","-"
"5339","multiValueAnnotationTest","@Test
  public void multiValueAnnotationTest()","0","-","-","-","-"
"5340","singleValueAnnotationTest","@Test
  public void singleValueAnnotationTest()","0","-","-","-","-"
"5341","singleValueWithDefaultAnnotationTest","@Test
  public void singleValueWithDefaultAnnotationTest()","0","-","-","-","-"
"5342","singleValueWithCustomNameAnnotationTest","@Test
  public void singleValueWithCustomNameAnnotationTest()","0","-","-","-","-"
"5343","create","static TestComponent create(Elements elements, Types types)","0","-","-","-","-"
"5344","inject","void inject(XAnnotationsToStableStringTest test);","0","-","-","-","-"
"5345","parameters","@Parameters(name = ""sourceKind=","0","-","-","-","-"
"5346","DaggerSuperficialValidationTest","public DaggerSuperficialValidationTest(SourceKind sourceKind)","0","-","-","-","-"
"5347","missingReturnType","@Test
  public void missingReturnType()","0","-","-","-","-"
"5348","missingGenericReturnType","@Test
  public void missingGenericReturnType()","0","-","-","-","-"
"5349","missingReturnTypeTypeParameter","@Test
  public void missingReturnTypeTypeParameter()","0","-","-","-","-"
"5350","missingTypeParameter","@Test
  public void missingTypeParameter()","0","-","-","-","-"
"5351","missingParameterType","@Test
  public void missingParameterType()","0","-","-","-","-"
"5352","missingAnnotation","@org.junit.Ignore // TODO(b/394093156): This is a known issue with JDK17.
  @Test
  public void missingAnnotation()","0","-","-","-","-"
"5353","handlesRecursiveTypeParams","@Test
  public void handlesRecursiveTypeParams()","0","-","-","-","-"
"5354","handlesRecursiveType","@Test
  public void handlesRecursiveType()","0","-","-","-","-"
"5355","missingWildcardBound","@Test
  public void missingWildcardBound()","0","-","-","-","-"
"5356","missingIntersection","@Test
  public void missingIntersection()","0","-","-","-","-"
"5357","invalidAnnotationValue","@Test
  public void invalidAnnotationValue()","0","-","-","-","-"
"5358","invalidAnnotationValueOnParameter","@Test
  public void invalidAnnotationValueOnParameter()","0","-","-","-","-"
"5359","invalidSuperclassInTypeHierarchy","@Test
  public void invalidSuperclassInTypeHierarchy()","0","-","-","-","-"
"5360","invalidSuperclassTypeParameterInTypeHierarchy","@Test
  public void invalidSuperclassTypeParameterInTypeHierarchy()","0","-","-","-","-"
"5361","runTest","private void runTest(
      Source.JavaSource javaSource,
      Source.KotlinSource kotlinSource,
      AssertionHandler assertionHandler)","0","-","-","-","-"
"5362","runSuccessfulTest","private void runSuccessfulTest(
      Source.JavaSource javaSource,
      Source.KotlinSource kotlinSource,
      AssertionHandler assertionHandler)","0","-","-","-","-"
"5363","isKAPT","private boolean isKAPT(XProcessingEnv processingEnv)","0","-","-","-","-"
"5364","runAssertions","void runAssertions(
        XProcessingEnv processingEnv, DaggerSuperficialValidation superficialValidation);","0","-","-","-","-"
"5365","AssertingStep","AssertingStep(AssertionHandler assertionHandler)","0","-","-","-","-"
"5366","annotations","@Override
    public final ImmutableSet<String> annotations()","0","-","-","-","-"
"5367","process","@Override
    public ImmutableSet<XElement> process(
        XProcessingEnv env, Map<String, ? extends Set<? extends XElement>> elementsByAnnotation)","0","-","-","-","-"
"5368","processOver","@Override
    public void processOver(
        XProcessingEnv env, Map<String, ? extends Set<? extends XElement>> elementsByAnnotation)","0","-","-","-","-"
"5369","superficialValidation","DaggerSuperficialValidation superficialValidation();","0","-","-","-","-"
"5370","create","TestComponent create(@BindsInstance XProcessingEnv processingEnv);","0","-","-","-","-"
"5371","parameters","@Parameters(name = ""","0","-","-","-","-"
"5372","DependencyCycleValidationTest","public DependencyCycleValidationTest(CompilerMode compilerMode)","0","-","-","-","-"
"5373","cyclicDependency","@Test
  public void cyclicDependency()","0","-","-","-","-"
"5374","cyclicDependencyWithModuleBindingValidation","@Test
  public void cyclicDependencyWithModuleBindingValidation()","0","-","-","-","-"
"5375","cyclicDependencyNotIncludingEntryPoint","@Test public void cyclicDependencyNotIncludingEntryPoint()","0","-","-","-","-"
"5376","cyclicDependencyNotBrokenByMapBinding","@Test
  public void cyclicDependencyNotBrokenByMapBinding()","0","-","-","-","-"
"5377","cyclicDependencyWithSetBinding","@Test
  public void cyclicDependencyWithSetBinding()","0","-","-","-","-"
"5378","falsePositiveCyclicDependencyIndirectionDetected","@Test
  public void falsePositiveCyclicDependencyIndirectionDetected()","0","-","-","-","-"
"5379","cyclicDependencyInSubcomponents","@Test
  public void cyclicDependencyInSubcomponents()","0","-","-","-","-"
"5380","cyclicDependencyInSubcomponentsWithChildren","@Test
  public void cyclicDependencyInSubcomponentsWithChildren()","0","-","-","-","-"
"5381","circularBindsMethods","@Test
  public void circularBindsMethods()","0","-","-","-","-"
"5382","selfReferentialBinds","@Test
  public void selfReferentialBinds()","0","-","-","-","-"
"5383","cycleFromMembersInjectionMethod_WithSameKeyAsMembersInjectionMethod","@Test
  public void cycleFromMembersInjectionMethod_WithSameKeyAsMembersInjectionMethod()","0","-","-","-","-"
"5384","longCycleMaskedByShortBrokenCycles","@Test
  public void longCycleMaskedByShortBrokenCycles()","0","-","-","-","-"
"5385","componentOnConcreteClass","@Test
  public void componentOnConcreteClass()","0","-","-","-","-"
"5386","componentOnOverridingBuilder_failsWhenMethodNameConflictsWithStaticCreatorName","@Test
  public void componentOnOverridingBuilder_failsWhenMethodNameConflictsWithStaticCreatorName()","0","-","-","-","-"
"5387","componentOnOverridingCreate_failsWhenGeneratedCreateMethod","@Test
  public void componentOnOverridingCreate_failsWhenGeneratedCreateMethod()","0","-","-","-","-"
"5388","subcomponentMethodNameBuilder_succeeds","@Test
  public void subcomponentMethodNameBuilder_succeeds()","0","-","-","-","-"
"5389","componentOnEnum","@Test public void componentOnEnum()","0","-","-","-","-"
"5390","componentOnAnnotation","@Test public void componentOnAnnotation()","0","-","-","-","-"
"5391","nonModuleModule","@Test public void nonModuleModule()","0","-","-","-","-"
"5392","componentWithInvalidModule","@Test
  public void componentWithInvalidModule()","0","-","-","-","-"
"5393","attemptToInjectWildcardGenerics","@Test
  public void attemptToInjectWildcardGenerics()","0","-","-","-","-"
"5394","invalidComponentDependencies","@Test
  public void invalidComponentDependencies()","0","-","-","-","-"
"5395","invalidComponentModules","@Test
  public void invalidComponentModules()","0","-","-","-","-"
"5396","moduleInDependencies","@Test
  public void moduleInDependencies()","0","-","-","-","-"
"5397","componentDependencyMustNotCycle_Direct","@Test
  public void componentDependencyMustNotCycle_Direct()","0","-","-","-","-"
"5398","componentDependencyMustNotCycle_Indirect","@Test
  public void componentDependencyMustNotCycle_Indirect()","0","-","-","-","-"
"5399","abstractModuleWithInstanceMethod","@Test
  public void abstractModuleWithInstanceMethod()","0","-","-","-","-"
"5400","abstractModuleWithInstanceMethod_subclassedIsAllowed","@Test
  public void abstractModuleWithInstanceMethod_subclassedIsAllowed()","0","-","-","-","-"
"5401","parameters","@Parameters(name = ""","0","-","-","-","-"
"5402","MissingBindingValidationTest","public MissingBindingValidationTest(CompilerMode compilerMode)","0","-","-","-","-"
"5403","dependOnInterface","@Test
  public void dependOnInterface()","0","-","-","-","-"
"5404","entryPointDependsOnInterface","@Test
  public void entryPointDependsOnInterface()","0","-","-","-","-"
"5405","entryPointDependsOnQualifiedInterface","@Test
  public void entryPointDependsOnQualifiedInterface()","0","-","-","-","-"
"5406","constructorInjectionWithoutAnnotation","@Test public void constructorInjectionWithoutAnnotation()","0","-","-","-","-"
"5407","membersInjectWithoutProvision","@Test public void membersInjectWithoutProvision()","0","-","-","-","-"
"5408","missingBindingWithSameKeyAsMembersInjectionMethod","@Test
  public void missingBindingWithSameKeyAsMembersInjectionMethod()","0","-","-","-","-"
"5409","genericInjectClassWithWildcardDependencies","@Test
  public void genericInjectClassWithWildcardDependencies()","0","-","-","-","-"
"5410","longChainOfDependencies","@Test public void longChainOfDependencies()","0","-","-","-","-"
"5411","bindsMethodAppearsInTrace","@Test
  public void bindsMethodAppearsInTrace()","0","-","-","-","-"
"5412","resolvedParametersInDependencyTrace","@Test public void resolvedParametersInDependencyTrace()","0","-","-","-","-"
"5413","resolvedVariablesInDependencyTrace","@Test public void resolvedVariablesInDependencyTrace()","0","-","-","-","-"
"5414","bindingUsedOnlyInSubcomponentDependsOnBindingOnlyInSubcomponent","@Test
  public void bindingUsedOnlyInSubcomponentDependsOnBindingOnlyInSubcomponent()","0","-","-","-","-"
"5415","multibindingContributionBetweenAncestorComponentAndEntrypointComponent","@Test
  public void multibindingContributionBetweenAncestorComponentAndEntrypointComponent()","0","-","-","-","-"
"5416","manyDependencies","@Test
  public void manyDependencies()","0","-","-","-","-"
"5417","tooManyRequests","@Test
  public void tooManyRequests()","0","-","-","-","-"
"5418","tooManyEntryPoints","@Test
  public void tooManyEntryPoints()","0","-","-","-","-"
"5419","missingBindingInAllComponentsAndEntryPoints","@Test
  public void missingBindingInAllComponentsAndEntryPoints()","0","-","-","-","-"
"5420","sameSubcomponentUsedInDifferentHierarchies","@Test
  public void sameSubcomponentUsedInDifferentHierarchies()","0","-","-","-","-"
"5421","requestUnusedBindingInDifferentComponent","@Test
  public void requestUnusedBindingInDifferentComponent()","0","-","-","-","-"
"5422","sameSubcomponentUsedInDifferentHierarchiesMissingBindingFromOneSide","@Test
  public void sameSubcomponentUsedInDifferentHierarchiesMissingBindingFromOneSide()","0","-","-","-","-"
"5423","differentComponentPkgSameSimpleNameMissingBinding","@Test
  public void differentComponentPkgSameSimpleNameMissingBinding()","0","-","-","-","-"
"5424","requestWildcardTypeWithNonWildcardTypeBindingProvided_failsWithMissingBinding","@Test
  public void requestWildcardTypeWithNonWildcardTypeBindingProvided_failsWithMissingBinding()","0","-","-","-","-"
"5425","injectParameterDoesNotSuppressWildcardGeneration_conflictsWithNonWildcardTypeBinding","@Test
  public void
      injectParameterDoesNotSuppressWildcardGeneration_conflictsWithNonWildcardTypeBinding()","0","-","-","-","-"
"5426","injectWildcardTypeWithNonWildcardTypeBindingProvided_failsWithMissingBinding","@Test
  public void injectWildcardTypeWithNonWildcardTypeBindingProvided_failsWithMissingBinding()","0","-","-","-","-"
"5427","requestFinalClassWithWildcardAnnotation_missingWildcardTypeBinding","@Test
  public void requestFinalClassWithWildcardAnnotation_missingWildcardTypeBinding()","0","-","-","-","-"
"5428","multipleTypeParameters_notSuppressWildcardType_failsWithMissingBinding","@Test
  public void multipleTypeParameters_notSuppressWildcardType_failsWithMissingBinding()","0","-","-","-","-"
"5429","missingBindingWithoutQualifier_warnAboutSimilarTypeWithQualifierExists","@Test
  public void missingBindingWithoutQualifier_warnAboutSimilarTypeWithQualifierExists()","0","-","-","-","-"
"5430","missingWildcardTypeWithObjectBound_providedRawType_warnAboutSimilarTypeExists","@Test
  public void missingWildcardTypeWithObjectBound_providedRawType_warnAboutSimilarTypeExists()","0","-","-","-","-"
"5431","missingWildcardType_providedRawType_warnAboutSimilarTypeExists","@Test
  public void missingWildcardType_providedRawType_warnAboutSimilarTypeExists()","0","-","-","-","-"
"5432","failsWithMissingBindingInGrandchild","@Test
  public void failsWithMissingBindingInGrandchild()","0","-","-","-","-"
"5433","failsWithMissingBindingInGrandchild_dependencyTracePresent","@Test
  public void failsWithMissingBindingInGrandchild_dependencyTracePresent()","0","-","-","-","-"
"5434","parameters","@Parameters(name = ""","0","-","-","-","-"
"5435","MapBindingComponentProcessorTest","public MapBindingComponentProcessorTest(CompilerMode compilerMode)","0","-","-","-","-"
"5436","mapBindingsWithEnumKey","@Test
  public void mapBindingsWithEnumKey() throws Exception","0","-","-","-","-"
"5437","mapBindingsWithInaccessibleKeys","@Test
  public void mapBindingsWithInaccessibleKeys() throws Exception","0","-","-","-","-"
"5438","mapBindingsWithStringKey","@Test
  public void mapBindingsWithStringKey() throws Exception","0","-","-","-","-"
"5439","mapBindingsWithWrappedKey","@Test
  public void mapBindingsWithWrappedKey() throws Exception","0","-","-","-","-"
"5440","mapBindingsWithNonProviderValue","@Test
  public void mapBindingsWithNonProviderValue() throws Exception","0","-","-","-","-"
"5441","injectMapWithoutMapBinding","@Test
  public void injectMapWithoutMapBinding() throws Exception","0","-","-","-","-"
"5442","setUp","@Before public void setUp()","0","-","-","-","-"
"5443","forInjectConstructorWithResolvedType","@Test
  public void forInjectConstructorWithResolvedType()","0","-","-","-","-"
"5444","InjectedClass","@SuppressWarnings(""unused"")
    @Inject InjectedClass(String s, int i)","0","-","-","-","-"
"5445","forProvidesMethod","@Test
  public void forProvidesMethod()","0","-","-","-","-"
"5446","provideString","@Provides String provideString()","0","-","-","-","-"
"5447","forProvidesMethod_qualified","@Test
  public void forProvidesMethod_qualified()","0","-","-","-","-"
"5448","qualifiedKeyEquivalents","@Test
  public void qualifiedKeyEquivalents()","0","-","-","-","-"
"5449","provideQualifiedString","@Provides
    @TestQualifier(","0","-","-","-","-"
"5450","forProvidesMethod_sets","@Test
  public void forProvidesMethod_sets()","0","-","-","-","-"
"5451","provideString","@Provides @IntoSet String provideString()","0","-","-","-","-"
"5452","provideStrings","@Provides @ElementsIntoSet Set<String> provideStrings()","0","-","-","-","-"
"5453","foo","@Provides int foo()","0","-","-","-","-"
"5454","foo","@Provides Integer foo()","0","-","-","-","-"
"5455","primitiveKeysMatchBoxedKeys","@Test public void primitiveKeysMatchBoxedKeys()","0","-","-","-","-"
"5456","forProducesMethod","@Test public void forProducesMethod()","0","-","-","-","-"
"5457","produceString","@Produces String produceString()","0","-","-","-","-"
"5458","produceFutureString","@Produces ListenableFuture<String> produceFutureString()","0","-","-","-","-"
"5459","forProducesMethod_sets","@Test public void forProducesMethod_sets()","0","-","-","-","-"
"5460","produceString","@Produces @IntoSet String produceString()","0","-","-","-","-"
"5461","produceFutureString","@Produces @IntoSet ListenableFuture<String> produceFutureString()","0","-","-","-","-"
"5462","produceStrings","@Produces @ElementsIntoSet Set<String> produceStrings()","0","-","-","-","-"
"5463","produceFutureStrings","@Produces @ElementsIntoSet
    ListenableFuture<Set<String>> produceFutureStrings()","0","-","-","-","-"
"5464","inject","void inject(KeyFactoryTest test);","0","-","-","-","-"
"5465","parameters","@Parameters(name = ""","0","-","-","-","-"
"5466","AssistedFactoryErrorsTest","public AssistedFactoryErrorsTest(CompilerMode compilerMode)","0","-","-","-","-"
"5467","testFactoryNotAbstract","@Test
  public void testFactoryNotAbstract()","0","-","-","-","-"
"5468","testNestedFactoryNotStatic","@Test
  public void testNestedFactoryNotStatic()","0","-","-","-","-"
"5469","testFactoryMissingAbstractMethod","@Test
  public void testFactoryMissingAbstractMethod()","0","-","-","-","-"
"5470","testFactoryReturnsNonDeclaredType","@Test
  public void testFactoryReturnsNonDeclaredType()","0","-","-","-","-"
"5471","testFactoryMultipleAbstractMethods","@Test
  public void testFactoryMultipleAbstractMethods()","0","-","-","-","-"
"5472","testFactoryMismatchingParameter","@Test
  public void testFactoryMismatchingParameter()","0","-","-","-","-"
"5473","testFactoryMismatchingGenericParameter","@Test
  public void testFactoryMismatchingGenericParameter()","0","-","-","-","-"
"5474","testFactoryDuplicateGenericParameter","@Test
  public void testFactoryDuplicateGenericParameter()","0","-","-","-","-"
"5475","testAssistedInjectionRequest","@Test
  public void testAssistedInjectionRequest()","0","-","-","-","-"
"5476","testProvidesAssistedBindings","@Test
  public void testProvidesAssistedBindings()","0","-","-","-","-"
"5477","testProvidesAssistedBindingsAsFactoryBindsInstance","@Test
  public void testProvidesAssistedBindingsAsFactoryBindsInstance()","0","-","-","-","-"
"5478","testProvidesAssistedBindingsAsBuilderBindsInstance","@Test
  public void testProvidesAssistedBindingsAsBuilderBindsInstance()","0","-","-","-","-"
"5479","testProvidesAssistedBindingsAsOptional","@Test
  public void testProvidesAssistedBindingsAsOptional()","0","-","-","-","-"
"5480","testInjectsLazyOfAssistedFactory","@Test
  public void testInjectsLazyOfAssistedFactory()","0","-","-","-","-"
"5481","testScopedAssistedInjection","@Test
  public void testScopedAssistedInjection()","0","-","-","-","-"
"5482","testMultipleInjectAnnotations","@Test
  public void testMultipleInjectAnnotations()","0","-","-","-","-"
"5483","testAssistedInjectWithNoAssistedParametersIsNotInjectable","@Test
  public void testAssistedInjectWithNoAssistedParametersIsNotInjectable()","0","-","-","-","-"
"5484","testInaccessibleFoo","@Test
  public void testInaccessibleFoo()","0","-","-","-","-"
"5485","testAssistedFactoryMethodWithTypeParametersFails","@Test
  public void testAssistedFactoryMethodWithTypeParametersFails()","0","-","-","-","-"
"5486","testAssistedFactoryMethod_withNullableReturnType_withJavaSource_succeeds","@Test
  public void testAssistedFactoryMethod_withNullableReturnType_withJavaSource_succeeds()","0","-","-","-","-"
"5487","testAssistedFactoryMethod_withNullableReturnType_withKotlinSource_succeeds","@Test
  public void testAssistedFactoryMethod_withNullableReturnType_withKotlinSource_succeeds()","0","-","-","-","-"
"5488","message","/**
   * Returns the lines joined by","0","-","-","-","-"
"5489","endsWithMessage","/**
   * Returns a pattern that matches strings that end with the lines joined by","0","-","-","-","-"
"5490","parameters","@Parameters(name = ""","0","-","-","-","-"
"5491","ConflictingEntryPointsTest","public ConflictingEntryPointsTest(CompilerMode compilerMode)","0","-","-","-","-"
"5492","covariantType","@Test
  public void covariantType()","0","-","-","-","-"
"5493","covariantTypeFromGenericSupertypes","@Test
  public void covariantTypeFromGenericSupertypes()","0","-","-","-","-"
"5494","differentQualifier","@Test
  public void differentQualifier()","0","-","-","-","-"
"5495","sameKey","@Test
  public void sameKey()","0","-","-","-","-"
"5496","sameQualifiedKey","@Test
  public void sameQualifiedKey()","0","-","-","-","-"
"5497","GeneratingProcessingStep","GeneratingProcessingStep(String pkgName, XTypeSpec typeSpec)","0","-","-","-","-"
"5498","annotations","@Override
  public final ImmutableSet<String> annotations()","0","-","-","-","-"
"5499","process","@Override
  public ImmutableSet<XElement> process(
      XProcessingEnv env, Map<String, ? extends Set<? extends XElement>> elementsByAnnotation)","0","-","-","-","-"
"5500","processOver","@Override
  public void processOver(
      XProcessingEnv env, Map<String, ? extends Set<? extends XElement>> elementsByAnnotation)","0","-","-","-","-"
"5501","componentWithoutScopeIncludesScopedBindings_Fail","@Test
  public void componentWithoutScopeIncludesScopedBindings_Fail()","0","-","-","-","-"
"5502","bindsWithChildScope_inParentModule_notAllowed","@Test // b/79859714
  public void bindsWithChildScope_inParentModule_notAllowed()","0","-","-","-","-"
"5503","componentWithScopeIncludesIncompatiblyScopedBindings_Fail","@Test
  public void componentWithScopeIncludesIncompatiblyScopedBindings_Fail()","0","-","-","-","-"
"5504","fullBindingGraphValidationDoesNotReportForOneScope","@Test
  public void fullBindingGraphValidationDoesNotReportForOneScope()","0","-","-","-","-"
"5505","fullBindingGraphValidationDoesNotReportInjectBindings","@Test
  public void fullBindingGraphValidationDoesNotReportInjectBindings()","0","-","-","-","-"
"5506","componentWithScopeCanDependOnMultipleScopedComponents","@Test
  public void componentWithScopeCanDependOnMultipleScopedComponents()","0","-","-","-","-"
"5507","componentWithScopeCanDependOnMultipleScopedComponentsEvenDoingADiamond","@Test
  public void componentWithScopeCanDependOnMultipleScopedComponentsEvenDoingADiamond()","0","-","-","-","-"
"5508","componentWithoutScopeCannotDependOnScopedComponent","@Test
  public void componentWithoutScopeCannotDependOnScopedComponent()","0","-","-","-","-"
"5509","componentWithSingletonScopeMayNotDependOnOtherScope","@Test
  public void componentWithSingletonScopeMayNotDependOnOtherScope()","0","-","-","-","-"
"5510","componentScopeWithMultipleScopedDependenciesMustNotCycle","@Test
  public void componentScopeWithMultipleScopedDependenciesMustNotCycle()","0","-","-","-","-"
"5511","componentScopeAncestryMustNotCycle","@Test
  public void componentScopeAncestryMustNotCycle()","0","-","-","-","-"
"5512","reusableNotAllowedOnComponent","@Test
  public void reusableNotAllowedOnComponent()","0","-","-","-","-"
"5513","reusableNotAllowedOnSubcomponent","@Test
  public void reusableNotAllowedOnSubcomponent()","0","-","-","-","-"
"5514","setUp","@Before
  public void setUp()","0","-","-","-","-"
"5515","frameworkType","@Test public void frameworkType()","0","-","-","-","-"
"5516","nameSuffix","@Test public void nameSuffix()","0","-","-","-","-"
"5517","X","@Inject X()","0","-","-","-","-"
"5518","inject","void inject(FrameworkFieldTest test);","0","-","-","-","-"
"5519","parameters","@Parameters(name = ""","0","-","-","-","-"
"5520","DelegateRequestRepresentationTest","public DelegateRequestRepresentationTest(CompilerMode compilerMode)","0","-","-","-","-"
"5521","toDoubleCheck","@Test
  public void toDoubleCheck() throws Exception","0","-","-","-","-"
"5522","toSingleCheck","@Test
  public void toSingleCheck() throws Exception","0","-","-","-","-"
"5523","toUnscoped","@Test
  public void toUnscoped() throws Exception","0","-","-","-","-"
"5524","castNeeded_rawTypes_Provider_get","@Test
  public void castNeeded_rawTypes_Provider_get() throws Exception","0","-","-","-","-"
"5525","noCast_rawTypes_Provider_get_toInaccessibleType","@Test
  public void noCast_rawTypes_Provider_get_toInaccessibleType() throws Exception","0","-","-","-","-"
"5526","castedToRawType","@Test
  public void castedToRawType() throws Exception","0","-","-","-","-"
"5527","doubleBinds","@Test
  public void doubleBinds() throws Exception","0","-","-","-","-"
"5528","inlineFactoryOfInacessibleType","@Test
  public void inlineFactoryOfInacessibleType() throws Exception","0","-","-","-","-"
"5529","providerWhenBindsScopeGreaterThanDependencyScope","@Test
  public void providerWhenBindsScopeGreaterThanDependencyScope() throws Exception","0","-","-","-","-"
"5530","parameters","@Parameters(name = ""","0","-","-","-","-"
"5531","SubcomponentValidationTest","public SubcomponentValidationTest(CompilerMode compilerMode)","0","-","-","-","-"
"5532","factoryMethod_missingModulesWithParameters","@Test public void factoryMethod_missingModulesWithParameters()","0","-","-","-","-"
"5533","factoryMethod_grandchild","@Test
  public void factoryMethod_grandchild()","0","-","-","-","-"
"5534","factoryMethod_nonModuleParameter","@Test public void factoryMethod_nonModuleParameter()","0","-","-","-","-"
"5535","factoryMethod_duplicateParameter","@Test public void factoryMethod_duplicateParameter()","0","-","-","-","-"
"5536","factoryMethod_superflouousModule","@Test public void factoryMethod_superflouousModule()","0","-","-","-","-"
"5537","missingBinding","@Test public void missingBinding()","0","-","-","-","-"
"5538","subcomponentOnConcreteType","@Test public void subcomponentOnConcreteType()","0","-","-","-","-"
"5539","scopeMismatch","@Test public void scopeMismatch()","0","-","-","-","-"
"5540","delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent","@Test
  public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
      throws Exception","0","-","-","-","-"
"5541","multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent","@Test
  public void multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent() throws Exception","0","-","-","-","-"
"5542","subcomponentSimpleNamesDisambiguated","@Test
  public void subcomponentSimpleNamesDisambiguated() throws Exception","0","-","-","-","-"
"5543","subcomponentSimpleNamesDisambiguatedInRoot","@Test
  public void subcomponentSimpleNamesDisambiguatedInRoot() throws Exception","0","-","-","-","-"
"5544","subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary","@Test
  public void subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary() throws Exception","0","-","-","-","-"
"5545","subcomponentNamesShouldNotConflictWithParent","@Test
  public void subcomponentNamesShouldNotConflictWithParent()
      throws Exception","0","-","-","-","-"
"5546","subcomponentBuilderNamesShouldNotConflict","@Test
  public void subcomponentBuilderNamesShouldNotConflict() throws Exception","0","-","-","-","-"
"5547","duplicateBindingWithSubcomponentDeclaration","@Test
  public void duplicateBindingWithSubcomponentDeclaration()","0","-","-","-","-"
"5548","subcomponentDependsOnGeneratedType","@Test
  public void subcomponentDependsOnGeneratedType()","0","-","-","-","-"
"5549","basicReport","@Test
  public void basicReport()","0","-","-","-","-"
"5550","test","@Override
              void test()","0","-","-","-","-"
"5551","messageOnDifferentElement","@Test
  public void messageOnDifferentElement()","0","-","-","-","-"
"5552","test","@Override
              void test()","0","-","-","-","-"
"5553","subreport","@Test
  public void subreport()","0","-","-","-","-"
"5554","test","@Override
              void test()","0","-","-","-","-"
"5555","annotations","@Override
    public final ImmutableSet<String> annotations()","0","-","-","-","-"
"5556","process","@Override
    public ImmutableSet<XElement> process(
        XProcessingEnv env, Map<String, ? extends Set<? extends XElement>> elementsByAnnotation)","0","-","-","-","-"
"5557","processOver","@Override
    public void processOver(
        XProcessingEnv env, Map<String, ? extends Set<? extends XElement>> elementsByAnnotation)","0","-","-","-","-"
"5558","getTypeElement","protected final XTypeElement getTypeElement(Class<?> clazz)","0","-","-","-","-"
"5559","getTypeElement","protected final XTypeElement getTypeElement(String canonicalName)","0","-","-","-","-"
"5560","test","abstract void test();","0","-","-","-","-"
"5561","producesMethodNotInModule","@Test public void producesMethodNotInModule()","0","-","-","-","-"
"5562","producesMethodAbstract","@Test public void producesMethodAbstract()","0","-","-","-","-"
"5563","producesMethodPrivate","@Test public void producesMethodPrivate()","0","-","-","-","-"
"5564","producesMethodReturnVoid","@Test public void producesMethodReturnVoid()","0","-","-","-","-"
"5565","producesProvider","@Test
  public void producesProvider()","0","-","-","-","-"
"5566","producesLazy","@Test
  public void producesLazy()","0","-","-","-","-"
"5567","producesMembersInjector","@Test
  public void producesMembersInjector()","0","-","-","-","-"
"5568","producesProducer","@Test
  public void producesProducer()","0","-","-","-","-"
"5569","producesProduced","@Test
  public void producesProduced()","0","-","-","-","-"
"5570","producesMethodReturnRawFuture","@Test public void producesMethodReturnRawFuture()","0","-","-","-","-"
"5571","producesMethodReturnWildcardFuture","@Test public void producesMethodReturnWildcardFuture()","0","-","-","-","-"
"5572","producesMethodWithTypeParameter","@Test public void producesMethodWithTypeParameter()","0","-","-","-","-"
"5573","producesMethodSetValuesWildcard","@Test public void producesMethodSetValuesWildcard()","0","-","-","-","-"
"5574","producesMethodSetValuesRawSet","@Test public void producesMethodSetValuesRawSet()","0","-","-","-","-"
"5575","producesMethodSetValuesNotASet","@Test public void producesMethodSetValuesNotASet()","0","-","-","-","-"
"5576","producesMethodSetValuesWildcardInFuture","@Test public void producesMethodSetValuesWildcardInFuture()","0","-","-","-","-"
"5577","producesMethodSetValuesFutureRawSet","@Test public void producesMethodSetValuesFutureRawSet()","0","-","-","-","-"
"5578","producesMethodSetValuesFutureNotASet","@Test public void producesMethodSetValuesFutureNotASet()","0","-","-","-","-"
"5579","multipleProducesMethodsWithSameName","@Test public void multipleProducesMethodsWithSameName()","0","-","-","-","-"
"5580","producesMethodThrowsThrowable","@Test
  public void producesMethodThrowsThrowable()","0","-","-","-","-"
"5581","producesMethodWithScope","@Test public void producesMethodWithScope()","0","-","-","-","-"
"5582","privateModule","@Test
  public void privateModule()","0","-","-","-","-"
"5583","enclosedInPrivateModule","@Test
  public void enclosedInPrivateModule()","0","-","-","-","-"
"5584","includesNonModule","@Test
  public void includesNonModule()","0","-","-","-","-"
"5585","publicModuleNonPublicIncludes","@Test
  public void publicModuleNonPublicIncludes()","0","-","-","-","-"
"5586","argumentNamedModuleCompiles","@Test public void argumentNamedModuleCompiles()","0","-","-","-","-"
"5587","singleProducesMethodNoArgsFuture","@Test public void singleProducesMethodNoArgsFuture()","0","-","-","-","-"
"5588","singleProducesMethodNoArgsFutureWithProducerName","@Test
  public void singleProducesMethodNoArgsFutureWithProducerName()","0","-","-","-","-"
"5589","producesMethodMultipleQualifiersOnMethod","@Test
  public void producesMethodMultipleQualifiersOnMethod()","0","-","-","-","-"
"5590","producesMethodMultipleQualifiersOnParameter","@Test
  public void producesMethodMultipleQualifiersOnParameter()","0","-","-","-","-"
"5591","producesMethodWildcardDependency","@Test
  public void producesMethodWildcardDependency()","0","-","-","-","-"
"5592","parameters","@Parameters(name = ""","0","-","-","-","-"
"5593","ComponentDependenciesTest","public ComponentDependenciesTest(CompilerMode compilerMode)","0","-","-","-","-"
"5594","dependenciesWithTwoOfSameMethodOnDifferentInterfaces_fail","@Test
  public void dependenciesWithTwoOfSameMethodOnDifferentInterfaces_fail()","0","-","-","-","-"
"5595","dependenciesWithTwoOfSameMethodOnDifferentInterfaces_producers_fail","@Test
  public void dependenciesWithTwoOfSameMethodOnDifferentInterfaces_producers_fail()","0","-","-","-","-"
"5596","dependenciesWithTwoOfSameMethodButDifferentNullability_fail","@Test
  public void dependenciesWithTwoOfSameMethodButDifferentNullability_fail()","0","-","-","-","-"
"5597","parameters","@Parameters(name = ""creatorKind=","0","-","-","-","-"
"5598","SubcomponentCreatorValidationTest","public SubcomponentCreatorValidationTest(ComponentCreatorAnnotation componentCreatorAnnotation)","0","-","-","-","-"
"5599","testRefSubcomponentAndSubCreatorFails","@Test
  public void testRefSubcomponentAndSubCreatorFails()","0","-","-","-","-"
"5600","testRefSubCreatorTwiceFails","@Test
  public void testRefSubCreatorTwiceFails()","0","-","-","-","-"
"5601","testMoreThanOneCreatorFails","@Test
  public void testMoreThanOneCreatorFails()","0","-","-","-","-"
"5602","testMoreThanOneCreatorFails_differentTypes","@Test
  public void testMoreThanOneCreatorFails_differentTypes()","0","-","-","-","-"
"5603","testCreatorGenericsFails","@Test
  public void testCreatorGenericsFails()","0","-","-","-","-"
"5604","testCreatorNotInComponentFails","@Test
  public void testCreatorNotInComponentFails()","0","-","-","-","-"
"5605","testCreatorMissingFactoryMethodFails","@Test
  public void testCreatorMissingFactoryMethodFails()","0","-","-","-","-"
"5606","testPrivateCreatorFails","@Test
  public void testPrivateCreatorFails()","0","-","-","-","-"
"5607","testNonStaticCreatorFails","@Test
  public void testNonStaticCreatorFails()","0","-","-","-","-"
"5608","testNonAbstractCreatorFails","@Test
  public void testNonAbstractCreatorFails()","0","-","-","-","-"
"5609","testCreatorOneConstructorWithArgsFails","@Test
  public void testCreatorOneConstructorWithArgsFails()","0","-","-","-","-"
"5610","testCreatorMoreThanOneConstructorFails","@Test
  public void testCreatorMoreThanOneConstructorFails()","0","-","-","-","-"
"5611","testCreatorEnumFails","@Test
  public void testCreatorEnumFails()","0","-","-","-","-"
"5612","testCreatorFactoryMethodReturnsWrongTypeFails","@Test
  public void testCreatorFactoryMethodReturnsWrongTypeFails()","0","-","-","-","-"
"5613","testInheritedCreatorFactoryMethodReturnsWrongTypeFails","@Test
  public void testInheritedCreatorFactoryMethodReturnsWrongTypeFails()","0","-","-","-","-"
"5614","testTwoFactoryMethodsFails","@Test
  public void testTwoFactoryMethodsFails()","0","-","-","-","-"
"5615","testInheritedTwoFactoryMethodsFails","@Test
  public void testInheritedTwoFactoryMethodsFails()","0","-","-","-","-"
"5616","testMultipleSettersPerTypeFails","@Test
  public void testMultipleSettersPerTypeFails()","0","-","-","-","-"
"5617","testMultipleSettersPerTypeIncludingResolvedGenericsFails","@Test
  public void testMultipleSettersPerTypeIncludingResolvedGenericsFails()","0","-","-","-","-"
"5618","testMultipleSettersPerBoundInstanceTypeFails","@Test
  public void testMultipleSettersPerBoundInstanceTypeFails()","0","-","-","-","-"
"5619","testExtraSettersFails","@Test
  public void testExtraSettersFails()","0","-","-","-","-"
"5620","testMissingSettersFail","@Test
  public void testMissingSettersFail()","0","-","-","-","-"
"5621","covariantFactoryMethodReturnType","@Test
  public void covariantFactoryMethodReturnType()","0","-","-","-","-"
"5622","covariantFactoryMethodReturnType_hasNewMethod","@Test
  public void covariantFactoryMethodReturnType_hasNewMethod()","0","-","-","-","-"
"5623","covariantFactoryMethodReturnType_hasNewMethod_buildMethodInherited","@Test
  public void covariantFactoryMethodReturnType_hasNewMethod_buildMethodInherited()","0","-","-","-","-"
"5624","formattedList","private static String formattedList(
      CompilationResultSubject subject, String element1, String element2)","0","-","-","-","-"
"5625","parameters","@Parameters(name = ""","0","-","-","-","-"
"5626","MembersInjectionTest","public MembersInjectionTest(CompilerMode compilerMode)","0","-","-","-","-"
"5627","injectKotlinProtectField_fails","@Test
  public void injectKotlinProtectField_fails()","0","-","-","-","-"
"5628","injectJavaProtectField_succeeds","@Test
  public void injectJavaProtectField_succeeds()","0","-","-","-","-"
"5629","parentClass_noInjectedMembers","@Test
  public void parentClass_noInjectedMembers() throws Exception","0","-","-","-","-"
"5630","parentClass_injectedMembersInSupertype","@Test
  public void parentClass_injectedMembersInSupertype() throws Exception","0","-","-","-","-"
"5631","fieldAndMethodGenerics","@Test public void fieldAndMethodGenerics()","0","-","-","-","-"
"5632","subclassedGenericMembersInjectors","@Test public void subclassedGenericMembersInjectors()","0","-","-","-","-"
"5633","fieldInjection","@Test public void fieldInjection()","0","-","-","-","-"
"5634","typeUseNullableFieldInjection","@Test
  public void typeUseNullableFieldInjection()","0","-","-","-","-"
"5635","nonTypeUseNullableFieldInjection","@Test
  public void nonTypeUseNullableFieldInjection()","0","-","-","-","-"
"5636","fieldInjectionWithQualifier","@Test
  public void fieldInjectionWithQualifier()","0","-","-","-","-"
"5637","methodInjection","@Test public void methodInjection()","0","-","-","-","-"
"5638","mixedMemberInjection","@Test
  public void mixedMemberInjection()","0","-","-","-","-"
"5639","injectConstructorAndMembersInjection","@Test public void injectConstructorAndMembersInjection()","0","-","-","-","-"
"5640","supertypeMembersInjection","@Test public void supertypeMembersInjection()","0","-","-","-","-"
"5641","simpleComponentWithNesting","@Test
  public void simpleComponentWithNesting()","0","-","-","-","-"
"5642","componentWithNestingAndGeneratedType","@Test
  public void componentWithNestingAndGeneratedType()","0","-","-","-","-"
"5643","lowerCaseNamedMembersInjector_forLowerCaseType","@Test
  public void lowerCaseNamedMembersInjector_forLowerCaseType()","0","-","-","-","-"
"5644","fieldInjectionForShadowedMember","@Test
  public void fieldInjectionForShadowedMember()","0","-","-","-","-"
"5645","privateNestedClassError","@Test public void privateNestedClassError()","0","-","-","-","-"
"5646","privateNestedClassWarning","@Test public void privateNestedClassWarning()","0","-","-","-","-"
"5647","privateSuperclassIsOkIfNotInjectedInto","@Test public void privateSuperclassIsOkIfNotInjectedInto()","0","-","-","-","-"
"5648","throwExceptionInjectedMethod","@Test
  public void throwExceptionInjectedMethod()","0","-","-","-","-"
"5649","rawFrameworkTypeField","@Test
  public void rawFrameworkTypeField()","0","-","-","-","-"
"5650","rawFrameworkMethodTypeParameter","@Test
  public void rawFrameworkMethodTypeParameter()","0","-","-","-","-"
"5651","rawFrameworkConstructorTypeParameter","@Test
  public void rawFrameworkConstructorTypeParameter()","0","-","-","-","-"
"5652","rawMapFrameworkConstructorTypeParameter","@Test
  public void rawMapFrameworkConstructorTypeParameter()","0","-","-","-","-"
"5653","daggerProviderField","@Test
  public void daggerProviderField()","0","-","-","-","-"
"5654","daggerProviderMethodTypeParameter","@Test
  public void daggerProviderMethodTypeParameter()","0","-","-","-","-"
"5655","daggerProviderConstructorTypeParameter","@Test
  public void daggerProviderConstructorTypeParameter()","0","-","-","-","-"
"5656","rawDaggerProviderConstructorTypeParameter","@Test
  public void rawDaggerProviderConstructorTypeParameter()","0","-","-","-","-"
"5657","daggerMapProviderField","@Test
  public void daggerMapProviderField()","0","-","-","-","-"
"5658","daggerMapProviderMethodTypeParameter","@Test
  public void daggerMapProviderMethodTypeParameter()","0","-","-","-","-"
"5659","daggerMapProviderConstructorTypeParameter","@Test
  public void daggerMapProviderConstructorTypeParameter()","0","-","-","-","-"
"5660","rawDaggerMapProviderConstructorTypeParameter","@Test
  public void rawDaggerMapProviderConstructorTypeParameter()","0","-","-","-","-"
"5661","injectsPrimitive","@Test
  public void injectsPrimitive() throws Exception","0","-","-","-","-"
"5662","accessibility","@Test
  public void accessibility() throws Exception","0","-","-","-","-"
"5663","accessibleRawType_ofInaccessibleType","@Test
  public void accessibleRawType_ofInaccessibleType() throws Exception","0","-","-","-","-"
"5664","publicSupertypeHiddenSubtype","@Test
  public void publicSupertypeHiddenSubtype() throws Exception","0","-","-","-","-"
"5665","middleClassNoFieldInjection","@Test
  public void middleClassNoFieldInjection() throws Exception","0","-","-","-","-"
"5666","testConstructorInjectedFieldInjection","@Test
  public void testConstructorInjectedFieldInjection() throws Exception","0","-","-","-","-"
"5667","testMembersInjectionBindingExistsInParentComponent","@Test
  public void testMembersInjectionBindingExistsInParentComponent() throws Exception","0","-","-","-","-"
"5668","testMembersInjectionBindingSharesInjectMethodsWithProvisionBinding","@Test
  public void testMembersInjectionBindingSharesInjectMethodsWithProvisionBinding()
      throws Exception","0","-","-","-","-"
"5669","kotlinNullableFieldInjection","@Test
  public void kotlinNullableFieldInjection()","0","-","-","-","-"
"5670","testMembersInjectionBindingWithNoInjectionSites","@Test
  public void testMembersInjectionBindingWithNoInjectionSites() throws Exception","0","-","-","-","-"
"5671","stripJetbrainsNullable","private Source stripJetbrainsNullable(Source source)","0","-","-","-","-"
"5672","parameters","@Parameters(name = ""","0","-","-","-","-"
"5673","AssistedErrorsTest","public AssistedErrorsTest(CompilerMode compilerMode)","0","-","-","-","-"
"5674","testAssistedNotWithAssistedInjectionConstructor","@Test
  public void testAssistedNotWithAssistedInjectionConstructor()","0","-","-","-","-"
"5675","testNestedFactoryNotStatic","@Test
  public void testNestedFactoryNotStatic()","0","-","-","-","-"
"5676","parameters","@Parameters(name = ""","0","-","-","-","-"
"5677","MapMultibindingValidationTest","public MapMultibindingValidationTest(CompilerMode compilerMode)","0","-","-","-","-"
"5678","duplicateMapKeys_UnwrappedMapKey","@Test
  public void duplicateMapKeys_UnwrappedMapKey()","0","-","-","-","-"
"5679","duplicateMapKeys_WrappedMapKey","@Test
  public void duplicateMapKeys_WrappedMapKey()","0","-","-","-","-"
"5680","inconsistentMapKeyAnnotations","@Test
  public void inconsistentMapKeyAnnotations()","0","-","-","-","-"
"5681","mapBindingOfProvider_provides","@Test
  public void mapBindingOfProvider_provides()","0","-","-","-","-"
"5682","mapBindingOfProvider_binds","@Test
  public void mapBindingOfProvider_binds()","0","-","-","-","-"
"5683","component","private static Source component(String... entryPoints)","0","-","-","-","-"
"5684","moduleWithErrors_validationTypeNone","@Test
  public void moduleWithErrors_validationTypeNone()","0","-","-","-","-"
"5685","moduleWithErrors_validationTypeError","@Test
  public void moduleWithErrors_validationTypeError()","0","-","-","-","-"
"5686","moduleWithErrors_validationTypeWarning","@Test
  public void moduleWithErrors_validationTypeWarning()","0","-","-","-","-"
"5687","includesModuleWithErrors_validationTypeNone","@Test
  public void includesModuleWithErrors_validationTypeNone()","0","-","-","-","-"
"5688","includesModuleWithErrors_validationTypeError","@Test
  public void includesModuleWithErrors_validationTypeError()","0","-","-","-","-"
"5689","includesModuleWithErrors_validationTypeWarning","@Test
  public void includesModuleWithErrors_validationTypeWarning()","0","-","-","-","-"
"5690","moduleIncludingModuleWithCombinedErrors_validationTypeNone","@Test
  public void moduleIncludingModuleWithCombinedErrors_validationTypeNone()","0","-","-","-","-"
"5691","moduleIncludingModuleWithCombinedErrors_validationTypeError","@Test
  public void moduleIncludingModuleWithCombinedErrors_validationTypeError()","0","-","-","-","-"
"5692","moduleIncludingModuleWithCombinedErrors_validationTypeWarning","@Test
  public void moduleIncludingModuleWithCombinedErrors_validationTypeWarning()","0","-","-","-","-"
"5693","subcomponentWithErrors_validationTypeNone","@Test
  public void subcomponentWithErrors_validationTypeNone()","0","-","-","-","-"
"5694","subcomponentWithErrors_validationTypeError","@Test
  public void subcomponentWithErrors_validationTypeError()","0","-","-","-","-"
"5695","subcomponentWithErrors_validationTypeWarning","@Test
  public void subcomponentWithErrors_validationTypeWarning()","0","-","-","-","-"
"5696","moduleWithSubcomponentWithErrors_validationTypeNone","@Test
  public void moduleWithSubcomponentWithErrors_validationTypeNone()","0","-","-","-","-"
"5697","moduleWithSubcomponentWithErrors_validationTypeError","@Test
  public void moduleWithSubcomponentWithErrors_validationTypeError()","0","-","-","-","-"
"5698","moduleWithSubcomponentWithErrors_validationTypeWarning","@Test
  public void moduleWithSubcomponentWithErrors_validationTypeWarning()","0","-","-","-","-"
"5699","moduleWithSubcomponentWithCombinedErrors_validationTypeNone","@Test
  public void moduleWithSubcomponentWithCombinedErrors_validationTypeNone()","0","-","-","-","-"
"5700","moduleWithSubcomponentWithCombinedErrors_validationTypeError","@Test
  public void moduleWithSubcomponentWithCombinedErrors_validationTypeError()","0","-","-","-","-"
"5701","moduleWithSubcomponentWithCombinedErrors_validationTypeWarning","@Test
  public void moduleWithSubcomponentWithCombinedErrors_validationTypeWarning()","0","-","-","-","-"
"5702","bothAliasesDifferentValues","@Test
  public void bothAliasesDifferentValues()","0","-","-","-","-"
"5703","bothAliasesSameValue","@Test
  public void bothAliasesSameValue()","0","-","-","-","-"
"5704","parameters","@Parameters(name = ""","0","-","-","-","-"
"5705","GenericMethodsTest","public GenericMethodsTest(CompilerMode compilerMode)","0","-","-","-","-"
"5706","parameterizedComponentMethods","@Test
  public void parameterizedComponentMethods()","0","-","-","-","-"
"5707","parameters","@Parameters(name = ""","0","-","-","-","-"
"5708","AssistedInjectErrorsTest","public AssistedInjectErrorsTest(CompilerMode compilerMode)","0","-","-","-","-"
"5709","testAssistedInjectWithDuplicateTypesFails","@Test
  public void testAssistedInjectWithDuplicateTypesFails()","0","-","-","-","-"
"5710","testAssistedInjectWithDuplicateTypesEmptyQualifierFails","@Test
  public void testAssistedInjectWithDuplicateTypesEmptyQualifierFails()","0","-","-","-","-"
"5711","testAssistedInjectWithDuplicateQualifiedTypesFails","@Test
  public void testAssistedInjectWithDuplicateQualifiedTypesFails()","0","-","-","-","-"
"5712","testAssistedInjectWithDuplicateGenericTypesFails","@Test
  public void testAssistedInjectWithDuplicateGenericTypesFails()","0","-","-","-","-"
"5713","testAssistedInjectWithDuplicateParameterizedTypesFails","@Test
  public void testAssistedInjectWithDuplicateParameterizedTypesFails()","0","-","-","-","-"
"5714","testAssistedInjectWithUniqueParameterizedTypesPasses","@Test
  public void testAssistedInjectWithUniqueParameterizedTypesPasses()","0","-","-","-","-"
"5715","testAssistedInjectWithUniqueGenericTypesPasses","@Test
  public void testAssistedInjectWithUniqueGenericTypesPasses()","0","-","-","-","-"
"5716","testAssistedInjectWithUniqueQualifiedTypesPasses","@Test
  public void testAssistedInjectWithUniqueQualifiedTypesPasses()","0","-","-","-","-"
"5717","testMultipleInjectedConstructors","@Test
  public void testMultipleInjectedConstructors()","0","-","-","-","-"
"5718","testMultipleAssistedInjectedConstructors","@Test
  public void testMultipleAssistedInjectedConstructors()","0","-","-","-","-"
"5719","JavaFileBuilder","/** Creates a builder for a file whose top level type has a given qualified name. */
  JavaFileBuilder(String qualifiedName)","0","-","-","-","-"
"5720","JavaFileBuilder","/** Creates a builder for a file whose top level type has a given qualified name. */
  JavaFileBuilder(CompilerMode compilerMode, String qualifiedName)","0","-","-","-","-"
"5721","withSetting","/** Adds the given setting as one that code should be generated for. */
  JavaFileBuilder withSetting(Object setting)","0","-","-","-","-"
"5722","withSettings","/** Adds the given settings as one that code should be generated for. */
  JavaFileBuilder withSettings(Object s1, Object s2, Object... more)","0","-","-","-","-"
"5723","addLines","/** Adds lines no matter what the","0","-","-","-","-"
"5724","addLinesIn","/** Adds lines if in the given mode. */
  JavaFileBuilder addLinesIn(CompilerMode mode, String... lines)","0","-","-","-","-"
"5725","addLinesIf","/** Adds lines if in the given setting is set. */
  JavaFileBuilder addLinesIf(Object setting, String... lines)","0","-","-","-","-"
"5726","buildSource","/** Builds the","0","-","-","-","-"
"5727","setUp","@Before
  public void setUp()","0","-","-","-","-"
"5728","castTo","@Test
  public void castTo()","0","-","-","-","-"
"5729","box","@Test
  public void box()","0","-","-","-","-"
"5730","type","private XType type(Class<?> clazz)","0","-","-","-","-"
"5731","inject","void inject(ExpressionTest test);","0","-","-","-","-"
"5732","fooExtendsBar","@Test
  public void fooExtendsBar()","0","-","-","-","-"
"5733","fooSuperBar","@Test
  public void fooSuperBar()","0","-","-","-","-"
"5734","multipleParameters","@Test
  public void multipleParameters()","0","-","-","-","-"
"5735","multipleParametersSameArgument","@Test
  public void multipleParametersSameArgument()","0","-","-","-","-"
"5736","multipleParametersCrossReferencing","@Test
  public void multipleParametersCrossReferencing()","0","-","-","-","-"
"5737","selfReferencing","@Test
  public void selfReferencing()","0","-","-","-","-"
"5738","arrayType","@Test
  public void arrayType()","0","-","-","-","-"
"5739","typeVariableSameVariableName","@Test
  public void typeVariableSameVariableName()","0","-","-","-","-"
"5740","assertStrippedWildcardTypeNameEquals","private static void assertStrippedWildcardTypeNameEquals(Source source, String strippedTypeName)","0","-","-","-","-"
"5741","getDeclaredMethod","private static XMethodElement getDeclaredMethod(XTypeElement typeElement, String jvmName)","0","-","-","-","-"
"5742","parameters","@Parameters(name = ""","0","-","-","-","-"
"5743","MapRequestRepresentationTest","public MapRequestRepresentationTest(CompilerMode compilerMode)","0","-","-","-","-"
"5744","mapBindings","@Test
  public void mapBindings() throws Exception","0","-","-","-","-"
"5745","inaccessible","@Test
  public void inaccessible() throws Exception","0","-","-","-","-"
"5746","subcomponentOmitsInheritedBindings","@Test
  public void subcomponentOmitsInheritedBindings() throws Exception","0","-","-","-","-"
"5747","daggerCompilerWithoutGuava","private Compiler daggerCompilerWithoutGuava()","0","-","-","-","-"
"5748","multipleRequests_constructor","@Test public void multipleRequests_constructor()","0","-","-","-","-"
"5749","multipleRequests_field","@Test public void multipleRequests_field()","0","-","-","-","-"
"5750","multipleRequests_providesMethod","@Test public void multipleRequests_providesMethod()","0","-","-","-","-"
"5751","parameters","@Parameters(name = ""","0","-","-","-","-"
"5752","SetBindingRequestFulfillmentWithGuavaTest","public SetBindingRequestFulfillmentWithGuavaTest(CompilerMode compilerMode)","0","-","-","-","-"
"5753","setBindings","@Test
  public void setBindings() throws Exception","0","-","-","-","-"
"5754","inaccessible","@Test
  public void inaccessible() throws Exception","0","-","-","-","-"
"5755","subcomponentOmitsInheritedBindings","@Test
  public void subcomponentOmitsInheritedBindings() throws Exception","0","-","-","-","-"
"5756","productionComponents","@Test
  public void productionComponents() throws Exception","0","-","-","-","-"
"5757","injectOnPrivateConstructor","@Test public void injectOnPrivateConstructor()","0","-","-","-","-"
"5758","injectConstructorOnInnerClass","@Test public void injectConstructorOnInnerClass()","0","-","-","-","-"
"5759","injectConstructorOnAbstractClass","@Test public void injectConstructorOnAbstractClass()","0","-","-","-","-"
"5760","injectConstructorOnGenericClass","@Test public void injectConstructorOnGenericClass()","0","-","-","-","-"
"5761","fieldAndMethodGenerics","@Test public void fieldAndMethodGenerics()","0","-","-","-","-"
"5762","genericClassWithNoDependencies","@Test public void genericClassWithNoDependencies()","0","-","-","-","-"
"5763","twoGenericTypes","@Test public void twoGenericTypes()","0","-","-","-","-"
"5764","boundedGenerics","@Test public void boundedGenerics()","0","-","-","-","-"
"5765","multipleSameTypesWithGenericsAndQualifiersAndLazies","@Test public void multipleSameTypesWithGenericsAndQualifiersAndLazies()","0","-","-","-","-"
"5766","multipleInjectConstructors","@Test public void multipleInjectConstructors()","0","-","-","-","-"
"5767","multipleQualifiersOnInjectConstructorParameter","@Test public void multipleQualifiersOnInjectConstructorParameter()","0","-","-","-","-"
"5768","injectConstructorOnClassWithMultipleScopes","@Test public void injectConstructorOnClassWithMultipleScopes()","0","-","-","-","-"
"5769","injectConstructorWithQualifier","@Test public void injectConstructorWithQualifier()","0","-","-","-","-"
"5770","injectConstructorWithCheckedExceptionsError","@Test public void injectConstructorWithCheckedExceptionsError()","0","-","-","-","-"
"5771","injectConstructorWithCheckedExceptionsWarning","@Test public void injectConstructorWithCheckedExceptionsWarning()","0","-","-","-","-"
"5772","privateInjectClassError","@Test public void privateInjectClassError()","0","-","-","-","-"
"5773","privateInjectClassWarning","@Test public void privateInjectClassWarning()","0","-","-","-","-"
"5774","nestedInPrivateInjectClassError","@Test public void nestedInPrivateInjectClassError()","0","-","-","-","-"
"5775","nestedInPrivateInjectClassWarning","@Test public void nestedInPrivateInjectClassWarning()","0","-","-","-","-"
"5776","finalInjectField","@Test public void finalInjectField()","0","-","-","-","-"
"5777","privateInjectFieldError","@Test public void privateInjectFieldError()","0","-","-","-","-"
"5778","privateInjectFieldWarning","@Test public void privateInjectFieldWarning()","0","-","-","-","-"
"5779","staticInjectFieldError","@Test public void staticInjectFieldError()","0","-","-","-","-"
"5780","staticInjectFieldWarning","@Test public void staticInjectFieldWarning()","0","-","-","-","-"
"5781","multipleQualifiersOnField","@Test public void multipleQualifiersOnField()","0","-","-","-","-"
"5782","abstractInjectMethod","@Test public void abstractInjectMethod()","0","-","-","-","-"
"5783","privateInjectMethodError","@Test public void privateInjectMethodError()","0","-","-","-","-"
"5784","privateInjectMethodWarning","@Test public void privateInjectMethodWarning()","0","-","-","-","-"
"5785","staticInjectMethodError","@Test public void staticInjectMethodError()","0","-","-","-","-"
"5786","staticInjectMethodWarning","@Test public void staticInjectMethodWarning()","0","-","-","-","-"
"5787","genericInjectMethod","@Test public void genericInjectMethod()","0","-","-","-","-"
"5788","multipleQualifiersOnInjectMethodParameter","@Test public void multipleQualifiersOnInjectMethodParameter()","0","-","-","-","-"
"5789","injectConstructorDependsOnProduced","@Test public void injectConstructorDependsOnProduced()","0","-","-","-","-"
"5790","injectConstructorDependsOnProducer","@Test public void injectConstructorDependsOnProducer()","0","-","-","-","-"
"5791","injectFieldDependsOnProduced","@Test public void injectFieldDependsOnProduced()","0","-","-","-","-"
"5792","injectFieldDependsOnProducer","@Test public void injectFieldDependsOnProducer()","0","-","-","-","-"
"5793","injectMethodDependsOnProduced","@Test public void injectMethodDependsOnProduced()","0","-","-","-","-"
"5794","injectMethodDependsOnProducer","@Test public void injectMethodDependsOnProducer()","0","-","-","-","-"
"5795","injectConstructor","@Test public void injectConstructor()","0","-","-","-","-"
"5796","injectConstructorAndMembersInjection","@Test public void injectConstructorAndMembersInjection()","0","-","-","-","-"
"5797","wildcardDependency","@Test
  public void wildcardDependency()","0","-","-","-","-"
"5798","basicNameCollision","@Test
  public void basicNameCollision()","0","-","-","-","-"
"5799","nestedNameCollision","@Test
  public void nestedNameCollision()","0","-","-","-","-"
"5800","samePackageNameCollision","@Test
  public void samePackageNameCollision()","0","-","-","-","-"
"5801","noDeps","@Test
  public void noDeps()","0","-","-","-","-"
"5802","simpleComponentWithNesting","@Test public void simpleComponentWithNesting()","0","-","-","-","-"
"5803","testScopedMetadata","@Test
  public void testScopedMetadata() throws Exception","0","-","-","-","-"
"5804","testScopedMetadataWithCustomScope","@Test
  public void testScopedMetadataWithCustomScope() throws Exception","0","-","-","-","-"
"5805","testQualifierMetadata","@Test
  public void testQualifierMetadata() throws Exception","0","-","-","-","-"
"5806","testComplexQualifierMetadata","@Test
  public void testComplexQualifierMetadata() throws Exception","0","-","-","-","-"
"5807","testBaseClassQualifierMetadata","@Test
  public void testBaseClassQualifierMetadata() throws Exception","0","-","-","-","-"
"5808","GeneratingProcessor","GeneratingProcessor(String generatedClassName, String... source)","0","-","-","-","-"
"5809","getSupportedSourceVersion","@Override
  public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"5810","getSupportedAnnotationTypes","@Override
  public Set<String> getSupportedAnnotationTypes()","0","-","-","-","-"
"5811","process","@Override
  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"5812","daggerCompiler","/** Returns a","0","-","-","-","-"
"5813","componentTest","@Test
  public void componentTest()","0","-","-","-","-"
"5814","moduleTest","@Test
  public void moduleTest()","0","-","-","-","-"
"5815","producerModuleTest","@Test
  public void producerModuleTest()","0","-","-","-","-"
"5816","cycleTest","@Test
  public void cycleTest()","0","-","-","-","-"
"5817","visitGraph","@Override
              public void visitGraph(BindingGraph graph, DiagnosticReporter reporter)","0","-","-","-","-"
"5818","parameters","@Parameterized.Parameters(name = ""","0","-","-","-","-"
"5819","ModuleType","ModuleType(Class<? extends Annotation> annotation)","0","-","-","-","-"
"5820","annotationWithSubcomponent","String annotationWithSubcomponent(String subcomponent)","0","-","-","-","-"
"5821","importStatement","String importStatement()","0","-","-","-","-"
"5822","simpleName","String simpleName()","0","-","-","-","-"
"5823","ModuleValidationTest","public ModuleValidationTest(ModuleType moduleType)","0","-","-","-","-"
"5824","moduleSubcomponents_notASubcomponent","@Test
  public void moduleSubcomponents_notASubcomponent()","0","-","-","-","-"
"5825","moduleSubcomponents_listsSubcomponentBuilder","@Test
  public void moduleSubcomponents_listsSubcomponentBuilder()","0","-","-","-","-"
"5826","moduleSubcomponents_listsSubcomponentFactory","@Test
  public void moduleSubcomponents_listsSubcomponentFactory()","0","-","-","-","-"
"5827","moduleSubcomponents_listsProductionSubcomponentBuilder","@Test
  public void moduleSubcomponents_listsProductionSubcomponentBuilder()","0","-","-","-","-"
"5828","moduleSubcomponents_listsProductionSubcomponentFactory","@Test
  public void moduleSubcomponents_listsProductionSubcomponentFactory()","0","-","-","-","-"
"5829","moduleSubcomponents_noSubcomponentCreator","@Test
  public void moduleSubcomponents_noSubcomponentCreator()","0","-","-","-","-"
"5830","moduleSubcomponents_noProductionSubcomponentCreator","@Test
  public void moduleSubcomponents_noProductionSubcomponentCreator()","0","-","-","-","-"
"5831","moduleSubcomponentsAreTypes","@Test
  public void moduleSubcomponentsAreTypes()","0","-","-","-","-"
"5832","tooManyAnnotations","@Test
  public void tooManyAnnotations()","0","-","-","-","-"
"5833","invalidIncludedModule","@Test
  public void invalidIncludedModule()","0","-","-","-","-"
"5834","scopeOnModule","@Test
  public void scopeOnModule()","0","-","-","-","-"
"5835","moduleIncludesSelfCycle","@Test
  public void moduleIncludesSelfCycle()","0","-","-","-","-"
"5836","objectModuleInheritsInstanceBindingFails","@Test
  public void objectModuleInheritsInstanceBindingFails()","0","-","-","-","-"
"5837","objectModuleInheritsNonInstanceBindingSucceeds","@Test
  public void objectModuleInheritsNonInstanceBindingSucceeds()","0","-","-","-","-"
"5838","daggerCompiler","/**
   * Returns a compiler that runs the Dagger and","0","-","-","-","-"
"5839","compilerWithOptions","public static Compiler compilerWithOptions(CompilerMode... compilerModes)","0","-","-","-","-"
"5840","compilerWithOptions","public static Compiler compilerWithOptions(String... options)","0","-","-","-","-"
"5841","compilerWithOptions","public static Compiler compilerWithOptions(Iterable<String> options)","0","-","-","-","-"
"5842","Compilers","private Compilers()","0","-","-","-","-"
"5843","testToParametersCodeBlock","@Test
  public void testToParametersCodeBlock()","0","-","-","-","-"
"5844","testToParametersCodeBlock_empty","@Test
  public void testToParametersCodeBlock_empty()","0","-","-","-","-"
"5845","testToParametersCodeBlock_oneElement","@Test
  public void testToParametersCodeBlock_oneElement()","0","-","-","-","-"
"5846","emptyComponentTest","@Test
  public void emptyComponentTest() throws Exception","0","-","-","-","-"
"5847","testComponentReferencingGeneratedTypeInCompanionObject_successfullyGeneratedComponent","@Test
  public void
      testComponentReferencingGeneratedTypeInCompanionObject_successfullyGeneratedComponent()
          throws Exception","0","-","-","-","-"
"5848","injectBindingComponentTest","@Test
  public void injectBindingComponentTest() throws Exception","0","-","-","-","-"
"5849","injectBindingWithProvidersComponentTest","@Test
  public void injectBindingWithProvidersComponentTest() throws Exception","0","-","-","-","-"
"5850","moduleProvidesBindingTest","@Test
  public void moduleProvidesBindingTest() throws Exception","0","-","-","-","-"
"5851","membersInjectionMethodTest","@Test
  public void membersInjectionMethodTest() throws Exception","0","-","-","-","-"
"5852","membersInjectionTest","@Test
  public void membersInjectionTest() throws Exception","0","-","-","-","-"
"5853","creatorMethodNameIsJavaKeyword_compilationError","@Test
  public void creatorMethodNameIsJavaKeyword_compilationError()","0","-","-","-","-"
"5854","componentMethodNameIsJavaKeyword_compilationError","@Test
  public void componentMethodNameIsJavaKeyword_compilationError()","0","-","-","-","-"
"5855","membersInjectDependsOnUnboundedType","@Test
  public void membersInjectDependsOnUnboundedType()","0","-","-","-","-"
"5856","membersInjectPrimitive","@Test
  public void membersInjectPrimitive()","0","-","-","-","-"
"5857","membersInjectArray","@Test
  public void membersInjectArray()","0","-","-","-","-"
"5858","membersInjectorOfArray","@Test
  public void membersInjectorOfArray()","0","-","-","-","-"
"5859","membersInjectRawType","@Test
  public void membersInjectRawType()","0","-","-","-","-"
"5860","qualifiedMembersInjector","@Test
  public void qualifiedMembersInjector()","0","-","-","-","-"
"5861","qualifiedMembersInjectionMethod","@Test
  public void qualifiedMembersInjectionMethod()","0","-","-","-","-"
"5862","qualifiedMembersInjectionMethodParameter","@Test
  public void qualifiedMembersInjectionMethodParameter()","0","-","-","-","-"
"5863","staticFieldInjection","@Test
  public void staticFieldInjection()","0","-","-","-","-"
"5864","missingMembersInjectorForKotlinProperty","@Test
  public void missingMembersInjectorForKotlinProperty()","0","-","-","-","-"
"5865","memberInjectionForKotlinObjectFails","@Test
  public void memberInjectionForKotlinObjectFails()","0","-","-","-","-"
"5866","setterMemberInjectionForKotlinObjectFails","@Test
  public void setterMemberInjectionForKotlinObjectFails()","0","-","-","-","-"
"5867","memberInjectionForKotlinClassWithCompanionObjectFails","@Test
  public void memberInjectionForKotlinClassWithCompanionObjectFails()","0","-","-","-","-"
"5868","setterMemberInjectionForKotlinClassWithCompanionObjectFails","@Test
  public void setterMemberInjectionForKotlinClassWithCompanionObjectFails()","0","-","-","-","-"
"5869","memberInjectionForKotlinClassWithNamedCompanionObjectFails","@Test
  public void memberInjectionForKotlinClassWithNamedCompanionObjectFails()","0","-","-","-","-"
"5870","setterMemberInjectionForKotlinClassWithNamedCompanionObjectFails","@Test
  public void setterMemberInjectionForKotlinClassWithNamedCompanionObjectFails()","0","-","-","-","-"
"5871","parameters","@Parameters(name = ""","0","-","-","-","-"
"5872","ComponentRequirementFieldTest","public ComponentRequirementFieldTest(CompilerMode compilerMode)","0","-","-","-","-"
"5873","bindsInstance","@Test
  public void bindsInstance() throws Exception","0","-","-","-","-"
"5874","testBindsNullableInstance","@Test
  public void testBindsNullableInstance() throws Exception","0","-","-","-","-"
"5875","instanceModuleMethod","@Test
  public void instanceModuleMethod() throws Exception","0","-","-","-","-"
"5876","componentInstances","@Test
  public void componentInstances() throws Exception","0","-","-","-","-"
"5877","componentRequirementNeededInFactoryCreationOfSubcomponent","@Test
  public void componentRequirementNeededInFactoryCreationOfSubcomponent() throws Exception","0","-","-","-","-"
"5878","parameters","@Parameters(name = ""","0","-","-","-","-"
"5879","SubcomponentBuilderValidationTest","public SubcomponentBuilderValidationTest(CompilerMode compilerMode)","0","-","-","-","-"
"5880","testMoreThanOneArgFails","@Test
  public void testMoreThanOneArgFails()","0","-","-","-","-"
"5881","testInheritedMoreThanOneArgFails","@Test
  public void testInheritedMoreThanOneArgFails()","0","-","-","-","-"
"5882","testSetterReturningNonVoidOrBuilderFails","@Test
  public void testSetterReturningNonVoidOrBuilderFails()","0","-","-","-","-"
"5883","testInheritedSetterReturningNonVoidOrBuilderFails","@Test
  public void testInheritedSetterReturningNonVoidOrBuilderFails()","0","-","-","-","-"
"5884","testGenericsOnSetterMethodFails","@Test
  public void testGenericsOnSetterMethodFails()","0","-","-","-","-"
"5885","testGenericsOnInheritedSetterMethodFails","@Test
  public void testGenericsOnInheritedSetterMethodFails()","0","-","-","-","-"
"5886","parameters","@Parameters(name = ""","0","-","-","-","-"
"5887","OptionalBindingRequestFulfillmentTest","public OptionalBindingRequestFulfillmentTest(CompilerMode compilerMode)","0","-","-","-","-"
"5888","inlinedOptionalBindings","@Test
  public void inlinedOptionalBindings() throws Exception","0","-","-","-","-"
"5889","requestForFuture","@Test
  public void requestForFuture() throws Exception","0","-","-","-","-"
"5890","testSimpleVariableName_typeCollisions","@Test
  public void testSimpleVariableName_typeCollisions()","0","-","-","-","-"
"5891","testSimpleVariableName_randomKeywords","@Test
  public void testSimpleVariableName_randomKeywords()","0","-","-","-","-"
"5892","testSimpleVariableName","@Test
  public void testSimpleVariableName()","0","-","-","-","-"
"5893","simpleVariableName","private static String simpleVariableName(Class<?> clazz)","0","-","-","-","-"
"5894","stripCommonTypePrefixes","@Test public void stripCommonTypePrefixes()","0","-","-","-","-"
"5895","parameters","@Parameters(name = ""","0","-","-","-","-"
"5896","MultibindsValidationTest","public MultibindsValidationTest(Class<? extends Annotation> moduleAnnotation)","0","-","-","-","-"
"5897","notWithinModule","@Test
  public void notWithinModule()","0","-","-","-","-"
"5898","voidMethod","@Test
  public void voidMethod()","0","-","-","-","-"
"5899","primitiveMethod","@Test
  public void primitiveMethod()","0","-","-","-","-"
"5900","rawMap","@Test
  public void rawMap()","0","-","-","-","-"
"5901","wildcardMapValue","@Test
  public void wildcardMapValue()","0","-","-","-","-"
"5902","wildcardMapValueWithBounds","@Test
  public void wildcardMapValueWithBounds()","0","-","-","-","-"
"5903","wildcardMapKey","@Test
  public void wildcardMapKey()","0","-","-","-","-"
"5904","wildcardMapKeyWithBounds","@Test
  public void wildcardMapKeyWithBounds()","0","-","-","-","-"
"5905","providerMap","@Test
  public void providerMap()","0","-","-","-","-"
"5906","producerMap","@Test
  public void producerMap()","0","-","-","-","-"
"5907","producedMap","@Test
  public void producedMap()","0","-","-","-","-"
"5908","rawSet","@Test
  public void rawSet()","0","-","-","-","-"
"5909","wildcardSet","@Test
  public void wildcardSet()","0","-","-","-","-"
"5910","wildcardSetWithBounds","@Test
  public void wildcardSetWithBounds()","0","-","-","-","-"
"5911","producedSet","@Test
  public void producedSet()","0","-","-","-","-"
"5912","overqualifiedSet","@Test
  public void overqualifiedSet()","0","-","-","-","-"
"5913","overqualifiedMap","@Test
  public void overqualifiedMap()","0","-","-","-","-"
"5914","hasParameters","@Test
  public void hasParameters()","0","-","-","-","-"
"5915","parameters","@Parameters(name = ""","0","-","-","-","-"
"5916","MapKeyProcessorTest","public MapKeyProcessorTest(CompilerMode compilerMode)","0","-","-","-","-"
"5917","mapKeyCreatorFile","@Test
  public void mapKeyCreatorFile()","0","-","-","-","-"
"5918","nestedMapKeyCreatorFile","@Test
  public void nestedMapKeyCreatorFile()","0","-","-","-","-"
"5919","nestedComplexMapKey_buildSuccessfully","@Test
  public void nestedComplexMapKey_buildSuccessfully()","0","-","-","-","-"
"5920","parameters","@Parameters(name = ""compilerMode=","0","-","-","-","-"
"5921","SubcomponentCreatorRequestFulfillmentTest","public SubcomponentCreatorRequestFulfillmentTest(
      CompilerMode compilerMode, ComponentCreatorAnnotation componentCreatorAnnotation)","0","-","-","-","-"
"5922","testInlinedSubcomponentCreators_componentMethod","@Test
  public void testInlinedSubcomponentCreators_componentMethod() throws Exception","0","-","-","-","-"
"5923","forProvider","@Test public void forProvider()","0","-","-","-","-"
"5924","forProducer","@Test public void forProducer()","0","-","-","-","-"
"5925","parameters","@Parameters(name = ""","0","-","-","-","-"
"5926","SetMultibindingValidationTest","public SetMultibindingValidationTest(CompilerMode compilerMode)","0","-","-","-","-"
"5927","setBindingOfProduced_provides","@Test
  public void setBindingOfProduced_provides()","0","-","-","-","-"
"5928","setBindingOfProduced_binds","@Test
  public void setBindingOfProduced_binds()","0","-","-","-","-"
"5929","elementsIntoSetBindingOfProduced_provides","@Test
  public void elementsIntoSetBindingOfProduced_provides()","0","-","-","-","-"
"5930","elementsIntoSetBindingOfProduced_binds","@Test
  public void elementsIntoSetBindingOfProduced_binds()","0","-","-","-","-"
"5931","component","private static Source component(String... entryPoints)","0","-","-","-","-"
"5932","parameters","@Parameters(name = ""compilerMode=","0","-","-","-","-"
"5933","ComponentCreatorTest","public ComponentCreatorTest(
      CompilerMode compilerMode,
      ComponentCreatorAnnotation componentCreatorAnnotation,
      CompilerType compilerType)","0","-","-","-","-"
"5934","testEmptyCreator","@Test
  public void testEmptyCreator() throws Exception","0","-","-","-","-"
"5935","testCanInstantiateModulesUserCannotSet","@Test
  public void testCanInstantiateModulesUserCannotSet() throws Exception","0","-","-","-","-"
"5936","testMoreThanOneCreatorOfSameTypeFails","@Test
  public void testMoreThanOneCreatorOfSameTypeFails()","0","-","-","-","-"
"5937","testBothBuilderAndFactoryFails","@Test
  public void testBothBuilderAndFactoryFails()","0","-","-","-","-"
"5938","testGenericCreatorTypeFails","@Test
  public void testGenericCreatorTypeFails()","0","-","-","-","-"
"5939","testCreatorNotInComponentFails","@Test
  public void testCreatorNotInComponentFails()","0","-","-","-","-"
"5940","testCreatorMissingFactoryMethodFails","@Test
  public void testCreatorMissingFactoryMethodFails()","0","-","-","-","-"
"5941","testCreatorWithBindsInstanceNoStaticCreateGenerated","@Test
  public void testCreatorWithBindsInstanceNoStaticCreateGenerated() throws Exception","0","-","-","-","-"
"5942","testCreatorWithPrimitiveBindsInstance","@Test
  public void testCreatorWithPrimitiveBindsInstance() throws Exception","0","-","-","-","-"
"5943","testPrivateCreatorFails","@Test
  public void testPrivateCreatorFails()","0","-","-","-","-"
"5944","testNonStaticCreatorFails","@Test
  public void testNonStaticCreatorFails()","0","-","-","-","-"
"5945","testNonAbstractCreatorFails","@Test
  public void testNonAbstractCreatorFails()","0","-","-","-","-"
"5946","testCreatorOneConstructorWithArgsFails","@Test
  public void testCreatorOneConstructorWithArgsFails()","0","-","-","-","-"
"5947","testCreatorMoreThanOneConstructorFails","@Test
  public void testCreatorMoreThanOneConstructorFails()","0","-","-","-","-"
"5948","testCreatorEnumFails","@Test
  public void testCreatorEnumFails()","0","-","-","-","-"
"5949","testCreatorFactoryMethodReturnsWrongTypeFails","@Test
  public void testCreatorFactoryMethodReturnsWrongTypeFails()","0","-","-","-","-"
"5950","testCreatorSetterForNonBindsInstancePrimitiveFails","@Test
  public void testCreatorSetterForNonBindsInstancePrimitiveFails()","0","-","-","-","-"
"5951","testInheritedBuilderBuildReturnsWrongTypeFails","@Test
  public void testInheritedBuilderBuildReturnsWrongTypeFails()","0","-","-","-","-"
"5952","testTwoFactoryMethodsFails","@Test
  public void testTwoFactoryMethodsFails()","0","-","-","-","-"
"5953","testInheritedTwoFactoryMethodsFails","@Test
  public void testInheritedTwoFactoryMethodsFails()","0","-","-","-","-"
"5954","testMultipleSettersPerTypeFails","@Test
  public void testMultipleSettersPerTypeFails()","0","-","-","-","-"
"5955","testMultipleSettersPerTypeIncludingResolvedGenericsFails","@Test
  public void testMultipleSettersPerTypeIncludingResolvedGenericsFails()","0","-","-","-","-"
"5956","testExtraSettersFails","@Test
  public void testExtraSettersFails()","0","-","-","-","-"
"5957","testMissingSettersFail","@Test
  public void testMissingSettersFail()","0","-","-","-","-"
"5958","covariantFactoryMethodReturnType","@Test
  public void covariantFactoryMethodReturnType()","0","-","-","-","-"
"5959","covariantFactoryMethodReturnType_hasNewMethod","@Test
  public void covariantFactoryMethodReturnType_hasNewMethod()","0","-","-","-","-"
"5960","covariantFactoryMethodReturnType_hasNewMethod_factoryMethodInherited","@Test
  public void covariantFactoryMethodReturnType_hasNewMethod_factoryMethodInherited()","0","-","-","-","-"
"5961","testGenericsOnFactoryMethodFails","@Test
  public void testGenericsOnFactoryMethodFails()","0","-","-","-","-"
"5962","testGenericsOnInheritedFactoryMethodFails","@Test
  public void testGenericsOnInheritedFactoryMethodFails()","0","-","-","-","-"
"5963","formattedList","private static String formattedList(
      CompilationResultSubject subject, String element1, String element2)","0","-","-","-","-"
"5964","ComponentCreatorTestHelper","ComponentCreatorTestHelper(
      CompilerMode compilerMode, ComponentCreatorAnnotation componentCreatorAnnotation)","0","-","-","-","-"
"5965","process","/**
   * Processes the given lines, replacing builder-related names with factory-related names if the
   * creator kind is","0","-","-","-","-"
"5966","preprocessedJavaSource","/**
   * Returns a Java source with the","0","-","-","-","-"
"5967","javaFileBuilder","/** Returns a file builder for the current creator kind. */
  JavaFileBuilder javaFileBuilder(String qualifiedName)","0","-","-","-","-"
"5968","multibindingContributedWithKotlinProperty_compilesSucessfully","@Test
  public void multibindingContributedWithKotlinProperty_compilesSucessfully()","0","-","-","-","-"
"5969","providesWithTwoMultibindingAnnotations_failsToCompile","@Test
  public void providesWithTwoMultibindingAnnotations_failsToCompile()","0","-","-","-","-"
"5970","appliedOnInvalidMethods_failsToCompile","@Test
  public void appliedOnInvalidMethods_failsToCompile()","0","-","-","-","-"
"5971","concreteBindingForMultibindingAlias","@Test
  public void concreteBindingForMultibindingAlias()","0","-","-","-","-"
"5972","produceConcreteSet_andRequestSetOfProduced","@Test
  public void produceConcreteSet_andRequestSetOfProduced()","0","-","-","-","-"
"5973","provideExplicitSetInParent_AndMultibindingContributionInChild","@Test
  public void provideExplicitSetInParent_AndMultibindingContributionInChild()","0","-","-","-","-"
"5974","testMultibindingMapWithKotlinSource","@Test
  public void testMultibindingMapWithKotlinSource()","0","-","-","-","-"
"5975","testMultibindingMapWithOutVarianceKotlinSource_succeeds","@Test
  public void testMultibindingMapWithOutVarianceKotlinSource_succeeds()","0","-","-","-","-"
"5976","testMultibindingMapWithJvmWildcardsKotlinSource_succeeds","@Test
  public void testMultibindingMapWithJvmWildcardsKotlinSource_succeeds()","0","-","-","-","-"
"5977","testMultibindingMapProviderWithKotlinSource","@Test
  public void testMultibindingMapProviderWithKotlinSource()","0","-","-","-","-"
"5978","testMultibindingSetWithKotlinSource","@Test
  public void testMultibindingSetWithKotlinSource()","0","-","-","-","-"
"5979","testMultibindingSetProviderWithKotlinSource","@Test
  public void testMultibindingSetProviderWithKotlinSource()","0","-","-","-","-"
"5980","referencesUnresolvableDependency","@Test
  public void referencesUnresolvableDependency()","0","-","-","-","-"
"5981","referencesUnresolvableAnnotationOnType","@org.junit.Ignore // TODO(bcorso): This is a known issue with JDK17.
  @Test
  public void referencesUnresolvableAnnotationOnType()","0","-","-","-","-"
"5982","referencesUnresolvableAnnotationOnTypeOnParameter","@org.junit.Ignore // TODO(b/394093156): This is a known issue with JDK17.
  @Test
  public void referencesUnresolvableAnnotationOnTypeOnParameter()","0","-","-","-","-"
"5983","parameters","@Parameters(name = ""","0","-","-","-","-"
"5984","ComponentHierarchyValidationTest","public ComponentHierarchyValidationTest(CompilerMode compilerMode)","0","-","-","-","-"
"5985","singletonSubcomponent","@Test
  public void singletonSubcomponent()","0","-","-","-","-"
"5986","productionComponents_productionScopeImplicitOnBoth","@Test
  public void productionComponents_productionScopeImplicitOnBoth()","0","-","-","-","-"
"5987","producerModuleRepeated","@Test
  public void producerModuleRepeated()","0","-","-","-","-"
"5988","factoryMethodForSubcomponentWithBuilder_isNotAllowed","@Test
  public void factoryMethodForSubcomponentWithBuilder_isNotAllowed()","0","-","-","-","-"
"5989","repeatedModulesWithScopes","@Test
  public void repeatedModulesWithScopes()","0","-","-","-","-"
"5990","repeatedModulesWithReusableScope","@Test
  public void repeatedModulesWithReusableScope()","0","-","-","-","-"
"5991","parameters","@Parameters(name = ""","0","-","-","-","-"
"5992","BindsInstanceValidationTest","public BindsInstanceValidationTest(CompilerMode compilerMode)","0","-","-","-","-"
"5993","bindsInstanceInModule","@Test
  public void bindsInstanceInModule()","0","-","-","-","-"
"5994","bindsInstanceInComponent","@Test
  public void bindsInstanceInComponent()","0","-","-","-","-"
"5995","bindsInstanceNotAbstract","@Test
  public void bindsInstanceNotAbstract()","0","-","-","-","-"
"5996","bindsInstanceNoParameters","@Test
  public void bindsInstanceNoParameters()","0","-","-","-","-"
"5997","bindsInstanceManyParameters","@Test
  public void bindsInstanceManyParameters()","0","-","-","-","-"
"5998","bindsInstanceFrameworkType","@Test
  public void bindsInstanceFrameworkType()","0","-","-","-","-"
"5999","bindsInstanceDaggerProvider","@Test
  public void bindsInstanceDaggerProvider()","0","-","-","-","-"
"6000","parameters","@Parameters(name = ""fullBindingGraphValidation=","0","-","-","-","-"
"6001","DuplicateBindingsValidationTest","public DuplicateBindingsValidationTest(boolean fullBindingGraphValidation)","0","-","-","-","-"
"6002","duplicateExplicitBindings_ProvidesAndComponentProvision","@Test public void duplicateExplicitBindings_ProvidesAndComponentProvision()","0","-","-","-","-"
"6003","duplicateExplicitBindings_TwoProvidesMethods","@Test public void duplicateExplicitBindings_TwoProvidesMethods()","0","-","-","-","-"
"6004","duplicateExplicitBindings_ProvidesVsBinds","@Test
  public void duplicateExplicitBindings_ProvidesVsBinds()","0","-","-","-","-"
"6005","duplicateExplicitBindings_multibindingsAndExplicitSets","@Test
  public void duplicateExplicitBindings_multibindingsAndExplicitSets()","0","-","-","-","-"
"6006","duplicateExplicitBindings_multibindingsAndExplicitMaps","@Test
  public void duplicateExplicitBindings_multibindingsAndExplicitMaps()","0","-","-","-","-"
"6007","duplicateExplicitBindings_UniqueBindingAndMultibindingDeclaration_Set","@Test
  public void duplicateExplicitBindings_UniqueBindingAndMultibindingDeclaration_Set()","0","-","-","-","-"
"6008","duplicateExplicitBindings_UniqueBindingAndMultibindingDeclaration_Map","@Test
  public void duplicateExplicitBindings_UniqueBindingAndMultibindingDeclaration_Map()","0","-","-","-","-"
"6009","duplicateBindings_TruncateAfterLimit","@Test public void duplicateBindings_TruncateAfterLimit()","0","-","-","-","-"
"6010","childBindingConflictsWithParent","@Test
  public void childBindingConflictsWithParent()","0","-","-","-","-"
"6011","grandchildBindingConflictsWithGrandparent","@Test
  public void grandchildBindingConflictsWithGrandparent()","0","-","-","-","-"
"6012","grandchildBindingConflictsWithChild","@Test
  public void grandchildBindingConflictsWithChild()","0","-","-","-","-"
"6013","childProvidesConflictsWithParentInjects","@Test
  public void childProvidesConflictsWithParentInjects()","0","-","-","-","-"
"6014","grandchildBindingConflictsWithParentWithNullableViolationAsWarning","@Test
  public void grandchildBindingConflictsWithParentWithNullableViolationAsWarning()","0","-","-","-","-"
"6015","fullBindingGraphValidationOption","private ImmutableMap<String, String> fullBindingGraphValidationOption()","0","-","-","-","-"
"6016","reportedInParentAndChild","@Test
  public void reportedInParentAndChild()","0","-","-","-","-"
"6017","formatTest","@Test
  public void formatTest()","0","-","-","-","-"
"6018","parameters","@Parameters(name = ""","0","-","-","-","-"
"6019","ComponentFactoryTest","public ComponentFactoryTest(CompilerMode compilerMode)","0","-","-","-","-"
"6020","testUsesParameterNames","@Test
  public void testUsesParameterNames() throws Exception","0","-","-","-","-"
"6021","testSetterMethodFails","@Test
  public void testSetterMethodFails()","0","-","-","-","-"
"6022","testInheritedSetterMethodFails","@Test
  public void testInheritedSetterMethodFails()","0","-","-","-","-"
"6023","assertThatModuleMethod","/** Starts a clause testing a Dagger","0","-","-","-","-"
"6024","assertThatProductionModuleMethod","/** Starts a clause testing a Dagger","0","-","-","-","-"
"6025","assertThatMethodInUnannotatedClass","/** Starts a clause testing a method in an unannotated class. */
    static DaggerModuleMethodSubject assertThatMethodInUnannotatedClass(String method)","0","-","-","-","-"
"6026","Factory","private Factory()","0","-","-","-","-"
"6027","createSubject","@Override
    public DaggerModuleMethodSubject createSubject(FailureMetadata failureMetadata, String that)","0","-","-","-","-"
"6028","DaggerModuleMethodSubject","private DaggerModuleMethodSubject(FailureMetadata failureMetadata, String subject)","0","-","-","-","-"
"6029","importing","/**
   * Imports classes and interfaces. Note that all types in the following packages are already
   * imported:<ul>
   * <li>","0","-","-","-","-"
"6030","importing","/**
   * Imports classes and interfaces. Note that all types in the following packages are already
   * imported:<ul>
   * <li>","0","-","-","-","-"
"6031","withDeclaration","/**
   * Sets the declaration of the module. Must be a string with two","0","-","-","-","-"
"6032","withAdditionalSources","/** Additional source files that must be compiled with the module. */
  DaggerModuleMethodSubject withAdditionalSources(Source... sources)","0","-","-","-","-"
"6033","hasError","/**
   * Fails if compiling the module with the method doesn't report an error at the method
   * declaration whose message contains","0","-","-","-","-"
"6034","methodLine","private int methodLine(String source)","0","-","-","-","-"
"6035","moduleSource","private String moduleSource()","0","-","-","-","-"
"6036","parameters","@Parameters(name = ""","0","-","-","-","-"
"6037","ComponentProtectedTypeTest","public ComponentProtectedTypeTest(CompilerMode compilerMode)","0","-","-","-","-"
"6038","componentAccessesProtectedType_succeeds","@Test
  public void componentAccessesProtectedType_succeeds() throws Exception","0","-","-","-","-"
"6039","data","@Parameters
  public static Collection<Object[]> data()","0","-","-","-","-"
"6040","BindsMethodValidationTest","public BindsMethodValidationTest(Class<? extends Annotation> moduleAnnotation)","0","-","-","-","-"
"6041","noExtensionForBinds","@Test
  public void noExtensionForBinds()","0","-","-","-","-"
"6042","noExtensionForProvides","@Test
  public void noExtensionForProvides()","0","-","-","-","-"
"6043","nonAbstract","@Test
  public void nonAbstract()","0","-","-","-","-"
"6044","notAssignable","@Test
  public void notAssignable()","0","-","-","-","-"
"6045","moreThanOneParameter","@Test
  public void moreThanOneParameter()","0","-","-","-","-"
"6046","typeParameters","@Test
  public void typeParameters()","0","-","-","-","-"
"6047","notInModule","@Test
  public void notInModule()","0","-","-","-","-"
"6048","throwsException","@Test
  public void throwsException()","0","-","-","-","-"
"6049","returnsVoid","@Test
  public void returnsVoid()","0","-","-","-","-"
"6050","tooManyQualifiersOnMethod","@Test
  public void tooManyQualifiersOnMethod()","0","-","-","-","-"
"6051","tooManyQualifiersOnParameter","@Test
  public void tooManyQualifiersOnParameter()","0","-","-","-","-"
"6052","noParameters","@Test
  public void noParameters()","0","-","-","-","-"
"6053","setElementsNotAssignable","@Test
  public void setElementsNotAssignable()","0","-","-","-","-"
"6054","setElements_primitiveArgument","@Test
  public void setElements_primitiveArgument()","0","-","-","-","-"
"6055","elementsIntoSet_withRawSets","@Test
  public void elementsIntoSet_withRawSets()","0","-","-","-","-"
"6056","intoMap_noMapKey","@Test
  public void intoMap_noMapKey()","0","-","-","-","-"
"6057","intoMap_multipleMapKeys","@Test
  public void intoMap_multipleMapKeys()","0","-","-","-","-"
"6058","bindsMissingTypeInParameterHierarchy","@Test
  public void bindsMissingTypeInParameterHierarchy()","0","-","-","-","-"
"6059","bindsMissingTypeInReturnTypeHierarchy","@Test
  public void bindsMissingTypeInReturnTypeHierarchy()","0","-","-","-","-"
"6060","bindsNullableToNonNullable_fails","@Test
  public void bindsNullableToNonNullable_fails()","0","-","-","-","-"
"6061","bindsNonNullableToNullable_fails","@Test
  public void bindsNonNullableToNullable_fails()","0","-","-","-","-"
"6062","bindsMapKVAndRequestMapKProviderV_failsWithMissingBindingError","@Test
  public void bindsMapKVAndRequestMapKProviderV_failsWithMissingBindingError()","0","-","-","-","-"
"6063","assertThatMethod","private DaggerModuleMethodSubject assertThatMethod(String method)","0","-","-","-","-"
"6064","parameters","@Parameters(name = ""","0","-","-","-","-"
"6065","MissingAndroidProcessorTest","public MissingAndroidProcessorTest(CompilerMode compilerMode)","0","-","-","-","-"
"6066","missingProcessor","@Test
  public void missingProcessor()","0","-","-","-","-"
"6067","parameters","@Parameters(name = ""","0","-","-","-","-"
"6068","ComponentProcessorTest","public ComponentProcessorTest(CompilerMode compilerMode)","0","-","-","-","-"
"6069","doubleBindingFromResolvedModules","@Test
  public void doubleBindingFromResolvedModules()","0","-","-","-","-"
"6070","privateNestedClassWithWarningThatIsAnErrorInComponent","@Test
  public void privateNestedClassWithWarningThatIsAnErrorInComponent()","0","-","-","-","-"
"6071","simpleComponent","@Test
  public void simpleComponent() throws Exception","0","-","-","-","-"
"6072","componentWithScope","@Test
  public void componentWithScope() throws Exception","0","-","-","-","-"
"6073","simpleComponentWithNesting","@Test
  public void simpleComponentWithNesting() throws Exception","0","-","-","-","-"
"6074","componentWithModule","@Test
  public void componentWithModule() throws Exception","0","-","-","-","-"
"6075","componentWithAbstractModule","@Test
  public void componentWithAbstractModule() throws Exception","0","-","-","-","-"
"6076","transitiveModuleDeps","@Test
  public void transitiveModuleDeps() throws Exception","0","-","-","-","-"
"6077","generatedTransitiveModule","@Test
  public void generatedTransitiveModule()","0","-","-","-","-"
"6078","generatedModuleInSubcomponent","@Test
  public void generatedModuleInSubcomponent()","0","-","-","-","-"
"6079","subcomponentNotGeneratedIfNotUsedInGraph","@Test
  public void subcomponentNotGeneratedIfNotUsedInGraph() throws Exception","0","-","-","-","-"
"6080","testDefaultPackage","@Test
  public void testDefaultPackage()","0","-","-","-","-"
"6081","membersInjection","@Test
  public void membersInjection() throws Exception","0","-","-","-","-"
"6082","componentInjection","@Test
  public void componentInjection() throws Exception","0","-","-","-","-"
"6083","membersInjectionInsideProvision","@Test
  public void membersInjectionInsideProvision() throws Exception","0","-","-","-","-"
"6084","componentDependency","@Test
  public void componentDependency() throws Exception","0","-","-","-","-"
"6085","componentWithNullableDependency","@Test
  public void componentWithNullableDependency() throws Exception","0","-","-","-","-"
"6086","primitiveComponentDependency","@Test
  public void primitiveComponentDependency() throws Exception","0","-","-","-","-"
"6087","arrayComponentDependency","@Test
  public void arrayComponentDependency() throws Exception","0","-","-","-","-"
"6088","dependencyNameCollision","@Test
  public void dependencyNameCollision() throws Exception","0","-","-","-","-"
"6089","moduleNameCollision","@Test
  public void moduleNameCollision() throws Exception","0","-","-","-","-"
"6090","ignoresDependencyMethodsFromObject","@Test
  public void ignoresDependencyMethodsFromObject() throws Exception","0","-","-","-","-"
"6091","resolutionOrder","@Test
  public void resolutionOrder() throws Exception","0","-","-","-","-"
"6092","simpleComponent_redundantComponentMethod","@Test
  public void simpleComponent_redundantComponentMethod() throws Exception","0","-","-","-","-"
"6093","simpleComponent_inheritedComponentMethodDep","@Test
  public void simpleComponent_inheritedComponentMethodDep() throws Exception","0","-","-","-","-"
"6094","wildcardGenericsRequiresAtProvides","@Test
  public void wildcardGenericsRequiresAtProvides()","0","-","-","-","-"
"6095","arrayKeyRequiresAtProvides","@Test
  public void arrayKeyRequiresAtProvides()","0","-","-","-","-"
"6096","componentImplicitlyDependsOnGeneratedType","@Test
  public void componentImplicitlyDependsOnGeneratedType()","0","-","-","-","-"
"6097","componentSupertypeDependsOnGeneratedType","@Test
  public void componentSupertypeDependsOnGeneratedType()","0","-","-","-","-"
"6098","unprocessedMembersInjectorNotes","/**
   * We warn when generating a","0","-","-","-","-"
"6099","assertFileNotGenerated","private void assertFileNotGenerated(CompilationResultSubject subject, String filePath)","0","-","-","-","-"
"6100","assertDoesNotHaveNoteContaining","private void assertDoesNotHaveNoteContaining(CompilationResultSubject subject, String content)","0","-","-","-","-"
"6101","scopeAnnotationOnInjectConstructorNotValid","@Test
  public void scopeAnnotationOnInjectConstructorNotValid()","0","-","-","-","-"
"6102","unusedSubcomponents_dontResolveExtraBindingsInParentComponents","@Test
  public void unusedSubcomponents_dontResolveExtraBindingsInParentComponents() throws Exception","0","-","-","-","-"
"6103","bindsToDuplicateBinding_bindsKeyIsNotDuplicated","@Test
  public void bindsToDuplicateBinding_bindsKeyIsNotDuplicated()","0","-","-","-","-"
"6104","nullIncorrectlyReturnedFromNonNullableInlinedProvider","@Test
  public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() throws Exception","0","-","-","-","-"
"6105","nullCheckingIgnoredWhenProviderReturnsPrimitive","@Test
  public void nullCheckingIgnoredWhenProviderReturnsPrimitive() throws Exception","0","-","-","-","-"
"6106","privateMethodUsedOnlyInChildDoesNotUseQualifiedThis","@Test
  public void privateMethodUsedOnlyInChildDoesNotUseQualifiedThis() throws Exception","0","-","-","-","-"
"6107","componentMethodInChildCallsComponentMethodInParent","@Test
  public void componentMethodInChildCallsComponentMethodInParent() throws Exception","0","-","-","-","-"
"6108","justInTimeAtInjectConstructor_hasGeneratedQualifier","@org.junit.Ignore // TODO(b/394093156): This is a known issue with JDK17.
  @Test
  public void justInTimeAtInjectConstructor_hasGeneratedQualifier() throws Exception","0","-","-","-","-"
"6109","moduleHasGeneratedQualifier","@org.junit.Ignore // TODO(b/394093156): This is a known issue with JDK17.
  @Test
  public void moduleHasGeneratedQualifier() throws Exception","0","-","-","-","-"
"6110","publicComponentType","@Test
  public void publicComponentType() throws Exception","0","-","-","-","-"
"6111","componentFactoryInterfaceTest","@Test
  public void componentFactoryInterfaceTest()","0","-","-","-","-"
"6112","providerComponentType","@Test
  public void providerComponentType() throws Exception","0","-","-","-","-"
"6113","injectedTypeHasGeneratedParam","@Test
  public void injectedTypeHasGeneratedParam()","0","-","-","-","-"
"6114","abstractVarFieldInComponent_failsValidation","@Test
  public void abstractVarFieldInComponent_failsValidation()","0","-","-","-","-"
"6115","nonAbstractVarFieldInComponent_passesValidation","@Test
  public void nonAbstractVarFieldInComponent_passesValidation()","0","-","-","-","-"
"6116","parameters","@Parameters(name = ""","0","-","-","-","-"
"6117","ProductionComponentProcessorTest","public ProductionComponentProcessorTest(CompilerMode compilerMode)","0","-","-","-","-"
"6118","componentOnConcreteClass","@Test public void componentOnConcreteClass()","0","-","-","-","-"
"6119","componentOnEnum","@Test public void componentOnEnum()","0","-","-","-","-"
"6120","componentOnAnnotation","@Test public void componentOnAnnotation()","0","-","-","-","-"
"6121","nonModuleModule","@Test public void nonModuleModule()","0","-","-","-","-"
"6122","dependsOnProductionExecutor","@Test
  public void dependsOnProductionExecutor() throws Exception","0","-","-","-","-"
"6123","dependsOnProductionSubcomponentWithPluginsVisitFullBindingGraphs","@Test
  public void dependsOnProductionSubcomponentWithPluginsVisitFullBindingGraphs() throws Exception","0","-","-","-","-"
"6124","simpleComponent","@Test
  public void simpleComponent() throws Exception","0","-","-","-","-"
"6125","nullableProducersAreNotErrors","@Test public void nullableProducersAreNotErrors()","0","-","-","-","-"
"6126","productionScope_injectConstructor","@Test
  public void productionScope_injectConstructor() throws Exception","0","-","-","-","-"
"6127","requestProducerNodeWithProvider_failsWithNotSupportedError","@Test
  public void requestProducerNodeWithProvider_failsWithNotSupportedError()","0","-","-","-","-"
"6128","productionBindingKind_failsIfScoped","@Test
  public void productionBindingKind_failsIfScoped()","0","-","-","-","-"
"6129","delegateToProductionBindingKind_failsIfScoped","@Test
  public void delegateToProductionBindingKind_failsIfScoped()","0","-","-","-","-"
"6130","multipleDelegatesToProductionBindingKind_failsIfScoped","@Test
  public void multipleDelegatesToProductionBindingKind_failsIfScoped()","0","-","-","-","-"
"6131","parameters","@Parameters(name = ""","0","-","-","-","-"
"6132","SetBindingRequestFulfillmentTest","public SetBindingRequestFulfillmentTest(CompilerMode compilerMode)","0","-","-","-","-"
"6133","setBindings","@Test
  public void setBindings() throws Exception","0","-","-","-","-"
"6134","inaccessible","@Test
  public void inaccessible() throws Exception","0","-","-","-","-"
"6135","subcomponentOmitsInheritedBindings","@Test
  public void subcomponentOmitsInheritedBindings() throws Exception","0","-","-","-","-"
"6136","daggerCompilerWithoutGuava","private Compiler daggerCompilerWithoutGuava()","0","-","-","-","-"
"6137","parameters","@Parameters(name = ""","0","-","-","-","-"
"6138","SwitchingProviderTest","public SwitchingProviderTest(CompilerMode compilerMode)","0","-","-","-","-"
"6139","switchingProviderTest","@Test
  public void switchingProviderTest() throws Exception","0","-","-","-","-"
"6140","unscopedBinds","@Test
  public void unscopedBinds() throws Exception","0","-","-","-","-"
"6141","scopedBinds","@Test
  public void scopedBinds() throws Exception","0","-","-","-","-"
"6142","emptyMultibindings_avoidSwitchProviders","@Test
  public void emptyMultibindings_avoidSwitchProviders() throws Exception","0","-","-","-","-"
"6143","memberInjectors","@Test
  public void memberInjectors() throws Exception","0","-","-","-","-"
"6144","optionals","@Test
  public void optionals() throws Exception","0","-","-","-","-"
"6145","subsignatureMethodNamesAreIgnored","@Test
  public void subsignatureMethodNamesAreIgnored()","0","-","-","-","-"
"6146","subsignatureReturnTypesAreIgnored","@Test
  public void subsignatureReturnTypesAreIgnored()","0","-","-","-","-"
"6147","subsignatureStaticIsIgnored","@Test
  public void subsignatureStaticIsIgnored()","0","-","-","-","-"
"6148","subsignatureWithAndWithoutTypeArguments","@Test
  public void subsignatureWithAndWithoutTypeArguments()","0","-","-","-","-"
"6149","subsignatureDifferentNumberOfTypeArguments","@Test
  public void subsignatureDifferentNumberOfTypeArguments()","0","-","-","-","-"
"6150","subsignatureDifferentTypeArgumentBounds","@Test
  public void subsignatureDifferentTypeArgumentBounds()","0","-","-","-","-"
"6151","subsignatureWithGenericClasses","@Test
  public void subsignatureWithGenericClasses()","0","-","-","-","-"
"6152","subsignatureSameSignature","@Test
  public void subsignatureSameSignature()","0","-","-","-","-"
"6153","subsignatureSameSignatureUnrelatedClasses","@Test
  public void subsignatureSameSignatureUnrelatedClasses()","0","-","-","-","-"
"6154","subsignatureWildcards","@Test
  public void subsignatureWildcards()","0","-","-","-","-"
"6155","subsignatureBounded","@Test
  public void subsignatureBounded()","0","-","-","-","-"
"6156","subsignatureGenericMethodAndWildcard","@Test
  public void subsignatureGenericMethodAndWildcard()","0","-","-","-","-"
"6157","parameters","@Parameters(name = ""","0","-","-","-","-"
"6158","BindsMissingDelegateValidationTest","public BindsMissingDelegateValidationTest(CompilerMode compilerMode)","0","-","-","-","-"
"6159","bindsMissingDelegate","@Test
  public void bindsMissingDelegate()","0","-","-","-","-"
"6160","bindsMissingDelegate_duplicateBinding","@Test
  public void bindsMissingDelegate_duplicateBinding()","0","-","-","-","-"
"6161","bindsMissingDelegate_setBinding","@Test
  public void bindsMissingDelegate_setBinding()","0","-","-","-","-"
"6162","bindsMissingDelegate_mapBinding","@Test
  public void bindsMissingDelegate_mapBinding()","0","-","-","-","-"
"6163","bindsMissingDelegate_mapBinding_sameKey","@Test
  public void bindsMissingDelegate_mapBinding_sameKey()","0","-","-","-","-"
"6164","parameters","@Parameters(name = ""","0","-","-","-","-"
"6165","InvalidInjectConstructorTest","public InvalidInjectConstructorTest(CompilerMode compilerMode)","0","-","-","-","-"
"6166","usedInvalidConstructorFails","@Test
  public void usedInvalidConstructorFails()","0","-","-","-","-"
"6167","unusedInvalidConstructorFails","@Test
  public void unusedInvalidConstructorFails()","0","-","-","-","-"
"6168","getInvalidInjectConstructorLib","private ImmutableList<File> getInvalidInjectConstructorLib()","0","-","-","-","-"
"6169","testNoFlags","@Test
  public void testNoFlags()","0","-","-","-","-"
"6170","testWithVisitPlugins","@Test
  public void testWithVisitPlugins()","0","-","-","-","-"
"6171","testWithValidationNone","@Test
  public void testWithValidationNone()","0","-","-","-","-"
"6172","testWithValidationError","@Test
  public void testWithValidationError()","0","-","-","-","-"
"6173","testWithValidationErrorAndVisitPlugins","@Test
  public void testWithValidationErrorAndVisitPlugins()","0","-","-","-","-"
"6174","visitGraph","@Override
    public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"6175","parameters","@Parameters(name = ""","0","-","-","-","-"
"6176","MapRequestRepresentationWithGuavaTest","public MapRequestRepresentationWithGuavaTest(CompilerMode compilerMode)","0","-","-","-","-"
"6177","mapBindings","@Test
  public void mapBindings() throws Exception","0","-","-","-","-"
"6178","inaccessible","@Test
  public void inaccessible() throws Exception","0","-","-","-","-"
"6179","subcomponentOmitsInheritedBindings","@Test
  public void subcomponentOmitsInheritedBindings() throws Exception","0","-","-","-","-"
"6180","productionComponents","@Test
  public void productionComponents() throws Exception","0","-","-","-","-"
"6181","foo","Foo foo();","0","-","-","-","-"
"6182","parameterizedType","ParameterizedType<Foo> parameterizedType();","0","-","-","-","-"
"6183","parameterizedTypeWithWildcard","ParameterizedType<? extends Foo> parameterizedTypeWithWildcard();","0","-","-","-","-"
"6184","parameterizedTypeWithTypeVariable","<T extends Foo> ParameterizedType<T> parameterizedTypeWithTypeVariable();","0","-","-","-","-"
"6185","parameterizedTypeWithSelfReference","<T extends ParameterizedType<T>> ParameterizedType<T> parameterizedTypeWithSelfReference();","0","-","-","-","-"
"6186","multiParameterizedType","MultiParameterizedType<Foo, ParameterizedType<Foo>> multiParameterizedType();","0","-","-","-","-"
"6187","setUp","@Before
  public void setUp()","0","-","-","-","-"
"6188","simpleTypeTest","@Test
  public void simpleTypeTest()","0","-","-","-","-"
"6189","parameterizedTypeTest","@Test
  public void parameterizedTypeTest()","0","-","-","-","-"
"6190","parameterizedTypeWithWildcardTest","@Test
  public void parameterizedTypeWithWildcardTest()","0","-","-","-","-"
"6191","parameterizedTypeWithTypeVariableTest","@Test
  public void parameterizedTypeWithTypeVariableTest()","0","-","-","-","-"
"6192","parameterizedTypeWithSelfReferenceTest","@Test
  public void parameterizedTypeWithSelfReferenceTest()","0","-","-","-","-"
"6193","multiParameterizedTypeTest","@Test
  public void multiParameterizedTypeTest()","0","-","-","-","-"
"6194","getDeclaredMethod","private XMethodElement getDeclaredMethod(XTypeElement typeElement, String methodName)","0","-","-","-","-"
"6195","create","static TestComponent create(Elements elements, Types types)","0","-","-","-","-"
"6196","inject","void inject(XTypesToStableStringTest test);","0","-","-","-","-"
"6197","parameters","@Parameters(name = ""","0","-","-","-","-"
"6198","NullableBindingValidationKotlinTest","public NullableBindingValidationKotlinTest(CompilerMode compilerMode)","0","-","-","-","-"
"6199","nullCheckForConstructorParameters","@Test
  public void nullCheckForConstructorParameters()","0","-","-","-","-"
"6200","nullCheckForMembersInjectParam","@Test
  public void nullCheckForMembersInjectParam()","0","-","-","-","-"
"6201","nullCheckForVariable","@Test
  public void nullCheckForVariable()","0","-","-","-","-"
"6202","nullCheckForComponentReturn","@Test public void nullCheckForComponentReturn()","0","-","-","-","-"
"6203","nullCheckForOptionalInstance","@Test
  public void nullCheckForOptionalInstance()","0","-","-","-","-"
"6204","nullCheckForOptionalProvider","@Test
  public void nullCheckForOptionalProvider()","0","-","-","-","-"
"6205","nullCheckForOptionalLazy","@Test
  public void nullCheckForOptionalLazy()","0","-","-","-","-"
"6206","nullCheckForOptionalProviderOfLazy","@Test
  public void nullCheckForOptionalProviderOfLazy()","0","-","-","-","-"
"6207","moduleValidation","@Test
  public void moduleValidation()","0","-","-","-","-"
"6208","parameters","@Parameters(name = ""","0","-","-","-","-"
"6209","SetMultibindingValidationTest","public SetMultibindingValidationTest(CompilerMode compilerMode)","0","-","-","-","-"
"6210","testMultipleSetBindingsToSameFoo","@Test public void testMultipleSetBindingsToSameFoo()","0","-","-","-","-"
"6211","testSetBindingsToDuplicateBinding","@Test public void testSetBindingsToDuplicateBinding()","0","-","-","-","-"
"6212","testSetBindingsToMissingBinding","@Test public void testSetBindingsToMissingBinding()","0","-","-","-","-"
"6213","testMultipleSetBindingsToSameFooThroughMultipleBinds","@Test public void testMultipleSetBindingsToSameFooThroughMultipleBinds()","0","-","-","-","-"
"6214","testMultipleSetBindingsViaElementsIntoSet","@Test public void testMultipleSetBindingsViaElementsIntoSet()","0","-","-","-","-"
"6215","testMultipleSetBindingsToSameFooSubcomponents","@Test public void testMultipleSetBindingsToSameFooSubcomponents()","0","-","-","-","-"
"6216","testMultipleSetBindingsToSameKeyButDifferentBindings","@Test public void testMultipleSetBindingsToSameKeyButDifferentBindings()","0","-","-","-","-"
"6217","testSimple","@Test
  public void testSimple()","0","-","-","-","-"
"6218","testSameSimpleNames","@Test
  public void testSameSimpleNames()","0","-","-","-","-"
"6219","testMethodNames","@Test
  public void testMethodNames()","0","-","-","-","-"
"6220","testMultipleLevelsOfConflicts","@Test
  public void testMultipleLevelsOfConflicts()","0","-","-","-","-"
"6221","testInnerClassesKeepOuterClassNameToo","@Test
  public void testInnerClassesKeepOuterClassNameToo()","0","-","-","-","-"
"6222","testThreeMultiLevelConflicts","@Test
  public void testThreeMultiLevelConflicts()","0","-","-","-","-"
"6223","testDoesNotCompressSubstringsOfClasses","@Test
  public void testDoesNotCompressSubstringsOfClasses()","0","-","-","-","-"
"6224","testNoClassNamesDoNotPutInLegend","@Test
  public void testNoClassNamesDoNotPutInLegend()","0","-","-","-","-"
"6225","testFullConflictsDoNotPutInLegend","@Test
  public void testFullConflictsDoNotPutInLegend()","0","-","-","-","-"
"6226","testLegendDoesNotIncludeJavaLang","@Test
  public void testLegendDoesNotIncludeJavaLang()","0","-","-","-","-"
"6227","testOnlyExcludedPrefixesDoesNotPutInLegend","@Test
  public void testOnlyExcludedPrefixesDoesNotPutInLegend()","0","-","-","-","-"
"6228","parameters","@Parameters(name = ""","0","-","-","-","-"
"6229","NullableBindingValidationTest","public NullableBindingValidationTest(CompilerMode compilerMode)","0","-","-","-","-"
"6230","nullCheckForConstructorParameters","@Test public void nullCheckForConstructorParameters()","0","-","-","-","-"
"6231","nullCheckForMembersInjectParam","@Test public void nullCheckForMembersInjectParam()","0","-","-","-","-"
"6232","nullCheckForVariable","@Test public void nullCheckForVariable()","0","-","-","-","-"
"6233","nullCheckForComponentReturn","@Test public void nullCheckForComponentReturn()","0","-","-","-","-"
"6234","nullCheckForOptionalInstance","@Test
  public void nullCheckForOptionalInstance()","0","-","-","-","-"
"6235","nullCheckForOptionalProvider","@Test
  public void nullCheckForOptionalProvider()","0","-","-","-","-"
"6236","nullCheckForOptionalLazy","@Test
  public void nullCheckForOptionalLazy()","0","-","-","-","-"
"6237","nullCheckForOptionalProviderOfLazy","@Test
  public void nullCheckForOptionalProviderOfLazy()","0","-","-","-","-"
"6238","moduleValidation","@Test
  public void moduleValidation()","0","-","-","-","-"
"6239","providesMethodNotInModule","@Test public void providesMethodNotInModule()","0","-","-","-","-"
"6240","providesMethodAbstract","@Test public void providesMethodAbstract()","0","-","-","-","-"
"6241","providesMethodPrivate","@Test public void providesMethodPrivate()","0","-","-","-","-"
"6242","providesMethodReturnVoid","@Test public void providesMethodReturnVoid()","0","-","-","-","-"
"6243","providesMethodReturnsProvider","@Test
  public void providesMethodReturnsProvider()","0","-","-","-","-"
"6244","providesMethodReturnsJakartaProvider","@Test
  public void providesMethodReturnsJakartaProvider()","0","-","-","-","-"
"6245","providesMethodReturnsDaggerInternalProvider","@Test
  public void providesMethodReturnsDaggerInternalProvider()","0","-","-","-","-"
"6246","providesIntoSetMethodReturnsDaggerInternalProvider","@Test
  public void providesIntoSetMethodReturnsDaggerInternalProvider()","0","-","-","-","-"
"6247","providesMethodReturnsLazy","@Test
  public void providesMethodReturnsLazy()","0","-","-","-","-"
"6248","providesMethodReturnsMembersInjector","@Test
  public void providesMethodReturnsMembersInjector()","0","-","-","-","-"
"6249","providesMethodReturnsProducer","@Test
  public void providesMethodReturnsProducer()","0","-","-","-","-"
"6250","providesMethodReturnsProduced","@Test
  public void providesMethodReturnsProduced()","0","-","-","-","-"
"6251","providesMethodWithTypeParameter","@Test public void providesMethodWithTypeParameter()","0","-","-","-","-"
"6252","providesMethodSetValuesWildcard","@Test public void providesMethodSetValuesWildcard()","0","-","-","-","-"
"6253","providesMethodSetValuesRawSet","@Test public void providesMethodSetValuesRawSet()","0","-","-","-","-"
"6254","providesElementsIntoSetMethodReturnsSetDaggerProvider","@Test public void providesElementsIntoSetMethodReturnsSetDaggerProvider()","0","-","-","-","-"
"6255","providesMethodSetValuesNotASet","@Test public void providesMethodSetValuesNotASet()","0","-","-","-","-"
"6256","bindsMethodReturnsProvider","@Test
  public void bindsMethodReturnsProvider()","0","-","-","-","-"
"6257","bindsMethodReturnsDaggerProvider","@Test
  public void bindsMethodReturnsDaggerProvider()","0","-","-","-","-"
"6258","modulesWithTypeParamsMustBeAbstract","@Test public void modulesWithTypeParamsMustBeAbstract()","0","-","-","-","-"
"6259","provideOverriddenByNoProvide","@Test public void provideOverriddenByNoProvide()","0","-","-","-","-"
"6260","provideOverriddenByProvide","@Test public void provideOverriddenByProvide()","0","-","-","-","-"
"6261","providesOverridesNonProvides","@Test public void providesOverridesNonProvides()","0","-","-","-","-"
"6262","validatesIncludedModules","@Test public void validatesIncludedModules()","0","-","-","-","-"
"6263","singleProvidesMethodNoArgs","@Test public void singleProvidesMethodNoArgs()","0","-","-","-","-"
"6264","singleProvidesMethodNoArgs_disableNullable","@Test public void singleProvidesMethodNoArgs_disableNullable()","0","-","-","-","-"
"6265","nonTypeUseNullableProvides","@Test
  public void nonTypeUseNullableProvides()","0","-","-","-","-"
"6266","kotlinNullableProvides","@Test
  public void kotlinNullableProvides()","0","-","-","-","-"
"6267","multipleProvidesMethods","@Test public void multipleProvidesMethods()","0","-","-","-","-"
"6268","providesSetElement","@Test
  public void providesSetElement()","0","-","-","-","-"
"6269","providesSetElementWildcard","@Test public void providesSetElementWildcard()","0","-","-","-","-"
"6270","providesSetValues","@Test public void providesSetValues()","0","-","-","-","-"
"6271","multipleProvidesMethodsWithSameName","@Test public void multipleProvidesMethodsWithSameName()","0","-","-","-","-"
"6272","providesMethodThrowsChecked","@Test
  public void providesMethodThrowsChecked()","0","-","-","-","-"
"6273","providedTypes","@Test
  public void providedTypes()","0","-","-","-","-"
"6274","privateModule","@Test
  public void privateModule()","0","-","-","-","-"
"6275","privateModule_kotlin","@Test
  public void privateModule_kotlin()","0","-","-","-","-"
"6276","enclosedInPrivateModule","@Test
  public void enclosedInPrivateModule()","0","-","-","-","-"
"6277","publicModuleNonPublicIncludes","@Test
  public void publicModuleNonPublicIncludes()","0","-","-","-","-"
"6278","genericSubclassedModule","@Test
  public void genericSubclassedModule()","0","-","-","-","-"
"6279","parameterizedModuleWithStaticProvidesMethodOfGenericType","@Test public void parameterizedModuleWithStaticProvidesMethodOfGenericType()","0","-","-","-","-"
"6280","providesMethodMultipleQualifiersOnMethod","@Test
  public void providesMethodMultipleQualifiersOnMethod()","0","-","-","-","-"
"6281","providesMethodMultipleQualifiersOnParameter","@Test
  public void providesMethodMultipleQualifiersOnParameter()","0","-","-","-","-"
"6282","providesMethodWildcardDependency","@Test
  public void providesMethodWildcardDependency()","0","-","-","-","-"
"6283","providesMethodMultipleScopes","@Test
  public void providesMethodMultipleScopes()","0","-","-","-","-"
"6284","providerDependsOnProduced","@Test public void providerDependsOnProduced()","0","-","-","-","-"
"6285","providerDependsOnProducer","@Test public void providerDependsOnProducer()","0","-","-","-","-"
"6286","proxyMethodsConflictWithOtherFactoryMethods","@Test
  public void proxyMethodsConflictWithOtherFactoryMethods() throws Exception","0","-","-","-","-"
"6287","testScopedMetadataOnStaticProvides","@Test
  public void testScopedMetadataOnStaticProvides() throws Exception","0","-","-","-","-"
"6288","testScopedMetadataOnNonStaticProvides","@Test
  public void testScopedMetadataOnNonStaticProvides() throws Exception","0","-","-","-","-"
"6289","testScopeMetadataWithCustomScope","@Test
  public void testScopeMetadataWithCustomScope() throws Exception","0","-","-","-","-"
"6290","testQualifierMetadataOnProvides","@Test
  public void testQualifierMetadataOnProvides() throws Exception","0","-","-","-","-"
"6291","bindsWithInstanceProvides","@Test
  public void bindsWithInstanceProvides()","0","-","-","-","-"
"6292","multibindsWithInstanceProvides","@Test
  public void multibindsWithInstanceProvides()","0","-","-","-","-"
"6293","bindsWithStaticProvides","@Test
  public void bindsWithStaticProvides()","0","-","-","-","-"
"6294","bindsWithMultibinds","@Test
  public void bindsWithMultibinds()","0","-","-","-","-"
"6295","multibindsWithStaticProvides","@Test
  public void multibindsWithStaticProvides()","0","-","-","-","-"
"6296","instanceProvidesWithAbstractMethod","@Test
  public void instanceProvidesWithAbstractMethod()","0","-","-","-","-"
"6297","compileMethodCombination","private CompilerTests.DaggerCompiler compileMethodCombination(String... methodLines)","0","-","-","-","-"
"6298","parameters","@Parameters(name = ""","0","-","-","-","-"
"6299","ComponentBuilderTest","public ComponentBuilderTest(CompilerMode compilerMode)","0","-","-","-","-"
"6300","testUsesBuildAndSetterNames","@Test
  public void testUsesBuildAndSetterNames() throws Exception","0","-","-","-","-"
"6301","testSetterMethodWithMoreThanOneArgFails","@Test
  public void testSetterMethodWithMoreThanOneArgFails()","0","-","-","-","-"
"6302","testInheritedSetterMethodWithMoreThanOneArgFails","@Test
  public void testInheritedSetterMethodWithMoreThanOneArgFails()","0","-","-","-","-"
"6303","testSetterReturningNonVoidOrBuilderFails","@Test
  public void testSetterReturningNonVoidOrBuilderFails()","0","-","-","-","-"
"6304","testInheritedSetterReturningNonVoidOrBuilderFails","@Test
  public void testInheritedSetterReturningNonVoidOrBuilderFails()","0","-","-","-","-"
"6305","testGenericsOnSetterMethodFails","@Test
  public void testGenericsOnSetterMethodFails()","0","-","-","-","-"
"6306","testGenericsOnInheritedSetterMethodFails","@Test
  public void testGenericsOnInheritedSetterMethodFails()","0","-","-","-","-"
"6307","testBindsInstanceNotAllowedOnBothSetterAndParameter","@Test
  public void testBindsInstanceNotAllowedOnBothSetterAndParameter()","0","-","-","-","-"
"6308","testBindsInstanceNotAllowedOnBothSetterAndParameter_inherited","@Test
  public void testBindsInstanceNotAllowedOnBothSetterAndParameter_inherited()","0","-","-","-","-"
"6309","rawEntryPointTest","@Test
  public void rawEntryPointTest()","0","-","-","-","-"
"6310","rawProvidesRequestTest","@Test
  public void rawProvidesRequestTest()","0","-","-","-","-"
"6311","rawInjectConstructorRequestTest","@Test
  public void rawInjectConstructorRequestTest()","0","-","-","-","-"
"6312","rawProvidesReturnTest","@Test
  public void rawProvidesReturnTest()","0","-","-","-","-"
"6313","parameters","@Parameters(name = ""","0","-","-","-","-"
"6314","AssistedFactoryTest","public AssistedFactoryTest(CompilerMode compilerMode)","0","-","-","-","-"
"6315","testAssistedFactory","@Test
  public void testAssistedFactory() throws Exception","0","-","-","-","-"
"6316","testAssistedFactoryCycle","@Test
  public void testAssistedFactoryCycle() throws Exception","0","-","-","-","-"
"6317","assistedParamConflictsWithComponentFieldName_successfulyDeduped","@Test
  public void assistedParamConflictsWithComponentFieldName_successfulyDeduped() throws Exception","0","-","-","-","-"
"6318","testFactoryGeneratorDuplicatedParamNames","@Test
  public void testFactoryGeneratorDuplicatedParamNames() throws Exception","0","-","-","-","-"
"6319","testParameterizedAssistParam","@Test
  public void testParameterizedAssistParam() throws Exception","0","-","-","-","-"
"6320","testMultipleAssistedFactoryInDifferentComponents","@Test
  public void testMultipleAssistedFactoryInDifferentComponents() throws Exception","0","-","-","-","-"
"6321","parameters","@Parameters(name = ""","0","-","-","-","-"
"6322","ComponentShardTest","public ComponentShardTest(CompilerMode compilerMode)","0","-","-","-","-"
"6323","testNewShardCreated","@Test
  public void testNewShardCreated() throws Exception","0","-","-","-","-"
"6324","testNewShardCreatedWithDependencies","@Test
  public void testNewShardCreatedWithDependencies() throws Exception","0","-","-","-","-"
"6325","testNewShardSubcomponentCreated","@Test
  public void testNewShardSubcomponentCreated() throws Exception","0","-","-","-","-"
"6326","createBinding","private static Source createBinding(String bindingName, String... deps)","0","-","-","-","-"
"6327","compilerOptions","private ImmutableMap<String, String> compilerOptions()","0","-","-","-","-"
"6328","parameters","@Parameters(name = ""sourceKind=","0","-","-","-","-"
"6329","IgnoreProvisionKeyWildcardsTest","public IgnoreProvisionKeyWildcardsTest(
      SourceKind sourceKind,
      boolean isIgnoreProvisionKeyWildcardsEnabled)","0","-","-","-","-"
"6330","testProvidesUniqueBindingsWithDifferentTypeVariances","@Test
  public void testProvidesUniqueBindingsWithDifferentTypeVariances()","0","-","-","-","-"
"6331","testProvidesUniqueBindingsWithMatchingWildcardArguments","@Test
  public void testProvidesUniqueBindingsWithMatchingWildcardArguments()","0","-","-","-","-"
"6332","testProvidesMultibindsSetDeclarationsWithDifferentTypeVariances","@Test
  public void testProvidesMultibindsSetDeclarationsWithDifferentTypeVariances()","0","-","-","-","-"
"6333","testProvidesMultibindsSetContributionsWithDifferentTypeVariances","@Test
  public void testProvidesMultibindsSetContributionsWithDifferentTypeVariances()","0","-","-","-","-"
"6334","testProvidesMultibindsSetContributionAndMultibindsWithDifferentVariances","@Test
  public void testProvidesMultibindsSetContributionAndMultibindsWithDifferentVariances()","0","-","-","-","-"
"6335","testProvidesIntoSetAndElementsIntoSetContributionsWithDifferentVariances","@Test
  public void testProvidesIntoSetAndElementsIntoSetContributionsWithDifferentVariances()","0","-","-","-","-"
"6336","testProvidesMultibindsSetContributionsWithSameTypeVariances","@Test
  public void testProvidesMultibindsSetContributionsWithSameTypeVariances()","0","-","-","-","-"
"6337","testProvidesMultibindsMapDeclarationValuesWithDifferentTypeVariances","@Test
  public void testProvidesMultibindsMapDeclarationValuesWithDifferentTypeVariances()","0","-","-","-","-"
"6338","testProvidesMultibindsMapDeclarationKeysWithDifferentTypeVariances","@Test
  public void testProvidesMultibindsMapDeclarationKeysWithDifferentTypeVariances()","0","-","-","-","-"
"6339","testProvidesMultibindsMapContributionsWithDifferentTypeVariances","@Test
  public void testProvidesMultibindsMapContributionsWithDifferentTypeVariances()","0","-","-","-","-"
"6340","testProvidesOptionalDeclarationWithDifferentTypeVariances","@Test
  public void testProvidesOptionalDeclarationWithDifferentTypeVariances()","0","-","-","-","-"
"6341","compile","private void compile(
      String javaComponentClass,
      String kotlinComponentClass,
      Consumer<CompilationResultSubject> onCompilationResult)","0","-","-","-","-"
"6342","compileInternal","private void compileInternal(
      String javaComponentClass,
      String kotlinComponentClass,
      Consumer<CompilationResultSubject> onCompilationResult)","0","-","-","-","-"
"6343","moduleRepeatedInSubcomponentFactoryMethod","@Test
  public void moduleRepeatedInSubcomponentFactoryMethod()","0","-","-","-","-"
"6344","moduleRepeatedInSubcomponentBuilderMethod","@Test
  public void moduleRepeatedInSubcomponentBuilderMethod()","0","-","-","-","-"
"6345","moduleRepeatedButNotPassed","@Test
  public void moduleRepeatedButNotPassed()","0","-","-","-","-"
"6346","parameters","@Parameters(name = ""","0","-","-","-","-"
"6347","ProductionGraphValidationTest","public ProductionGraphValidationTest(CompilerMode compilerMode)","0","-","-","-","-"
"6348","componentWithUnprovidedInput","@Test public void componentWithUnprovidedInput()","0","-","-","-","-"
"6349","componentProductionWithNoDependencyChain","@Test public void componentProductionWithNoDependencyChain()","0","-","-","-","-"
"6350","provisionDependsOnProduction","@Test public void provisionDependsOnProduction()","0","-","-","-","-"
"6351","provisionEntryPointDependsOnProduction","@Test public void provisionEntryPointDependsOnProduction()","0","-","-","-","-"
"6352","providingMultibindingWithProductions","@Test
  public void providingMultibindingWithProductions()","0","-","-","-","-"
"6353","monitoringDependsOnUnboundType","@Test
  public void monitoringDependsOnUnboundType()","0","-","-","-","-"
"6354","monitoringDependsOnProduction","@Test
  public void monitoringDependsOnProduction()","0","-","-","-","-"
"6355","cycleNotBrokenByMap","@Test
  public void cycleNotBrokenByMap()","0","-","-","-","-"
"6356","cycleNotBrokenByProducerMap","@Test
  public void cycleNotBrokenByProducerMap()","0","-","-","-","-"
"6357","componentWithBadModule","@Test
  public void componentWithBadModule()","0","-","-","-","-"
"6358","parameters","@Parameters(name = ""","0","-","-","-","-"
"6359","InaccessibleTypeBindsTest","public InaccessibleTypeBindsTest(CompilerMode compilerMode)","0","-","-","-","-"
"6360","scopedInaccessibleTypeBound","@Test
  public void scopedInaccessibleTypeBound() throws Exception","0","-","-","-","-"
"6361","inaccessibleTypeBoundInALoop","@Test
  public void inaccessibleTypeBoundInALoop() throws Exception","0","-","-","-","-"
"6362","inaccessibleTypeBoundInALoopScoped","@Test
  public void inaccessibleTypeBoundInALoopScoped() throws Exception","0","-","-","-","-"
"6363","parameters","@Parameters(name = ""","0","-","-","-","-"
"6364","ElidedFactoriesTest","public ElidedFactoriesTest(CompilerMode compilerMode)","0","-","-","-","-"
"6365","simpleComponent","@Test
  public void simpleComponent() throws Exception","0","-","-","-","-"
"6366","simpleComponent_injectsProviderOf_dependsOnScoped","@Test
  public void simpleComponent_injectsProviderOf_dependsOnScoped() throws Exception","0","-","-","-","-"
"6367","scopedBinding_onlyUsedInSubcomponent","@Test
  public void scopedBinding_onlyUsedInSubcomponent() throws Exception","0","-","-","-","-"
"6368","parameters","@Parameters(name = ""","0","-","-","-","-"
"6369","BindsDependsOnSubcomponentValidationTest","public BindsDependsOnSubcomponentValidationTest(CompilerMode compilerMode)","0","-","-","-","-"
"6370","testBinds","@Test
  public void testBinds()","0","-","-","-","-"
"6371","testSetBindings","@Test
  public void testSetBindings()","0","-","-","-","-"
"6372","testSetValueBindings","@Test
  public void testSetValueBindings()","0","-","-","-","-"
"6373","testMapBindings","@Test
  public void testMapBindings()","0","-","-","-","-"
"6374","generatedImports","/** Returns a","0","-","-","-","-"
"6375","generatedAnnotations","/** Returns the annotations for a generated class. */
  public static String generatedAnnotations()","0","-","-","-","-"
"6376","generatedAnnotationsWithoutSuppressWarnings","/** Returns the annotations for a generated class without","0","-","-","-","-"
"6377","isBeforeJava9","private static boolean isBeforeJava9()","0","-","-","-","-"
"6378","GeneratedLines","private GeneratedLines()","0","-","-","-","-"
"6379","AccessibilityTest","public AccessibilityTest()","0","-","-","-","-"
"6380","AccessibilityTest","protected AccessibilityTest(Object o)","0","-","-","-","-"
"6381","AccessibilityTest","AccessibilityTest(Object o1, Object o2)","0","-","-","-","-"
"6382","AccessibilityTest","private AccessibilityTest(Object o1, Object o2, Object o3)","0","-","-","-","-"
"6383","publicMethod","public void publicMethod()","0","-","-","-","-"
"6384","protectedMethod","protected void protectedMethod()","0","-","-","-","-"
"6385","packagePrivateMethod","void packagePrivateMethod()","0","-","-","-","-"
"6386","privateMethod","private void privateMethod()","0","-","-","-","-"
"6387","setUp","@Before
  public void setUp()","0","-","-","-","-"
"6388","isElementAccessibleFrom_publicType","@Test
  public void isElementAccessibleFrom_publicType()","0","-","-","-","-"
"6389","isElementAccessibleFrom_publicMethod","@Test
  public void isElementAccessibleFrom_publicMethod()","0","-","-","-","-"
"6390","isElementAccessibleFrom_protectedMethod","@Test
  public void isElementAccessibleFrom_protectedMethod()","0","-","-","-","-"
"6391","isElementAccessibleFrom_packagePrivateMethod","@Test
  public void isElementAccessibleFrom_packagePrivateMethod()","0","-","-","-","-"
"6392","isElementAccessibleFrom_privateMethod","@Test
  public void isElementAccessibleFrom_privateMethod()","0","-","-","-","-"
"6393","isElementAccessibleFrom_publicField","@Test
  public void isElementAccessibleFrom_publicField()","0","-","-","-","-"
"6394","isElementAccessibleFrom_protectedField","@Test
  public void isElementAccessibleFrom_protectedField()","0","-","-","-","-"
"6395","isElementAccessibleFrom_packagePrivateField","@Test
  public void isElementAccessibleFrom_packagePrivateField()","0","-","-","-","-"
"6396","isElementAccessibleFrom_privateField","@Test
  public void isElementAccessibleFrom_privateField()","0","-","-","-","-"
"6397","getMemberNamed","private Element getMemberNamed(String memberName)","0","-","-","-","-"
"6398","supportedOptions","@Override
  public Set<String> supportedOptions()","0","-","-","-","-"
"6399","initFiler","@Override
  public void initFiler(Filer filer)","0","-","-","-","-"
"6400","initOptions","@Override
  public void initOptions(Map<String, String> options)","0","-","-","-","-"
"6401","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"6402","pluginName","@Override
  public String pluginName()","0","-","-","-","-"
"6403","onPluginEnd","@Override
  public void onPluginEnd()","0","-","-","-","-"
"6404","moduleBinding","@Test
  public void moduleBinding()","0","-","-","-","-"
"6405","dependencyTraceAtBinding","@Test
  public void dependencyTraceAtBinding()","0","-","-","-","-"
"6406","dependencyTraceAtDependencyRequest","@Test
  public void dependencyTraceAtDependencyRequest()","0","-","-","-","-"
"6407","dependencyTraceAtDependencyRequest_subcomponents","@Test
  public void dependencyTraceAtDependencyRequest_subcomponents()","0","-","-","-","-"
"6408","errorOnComponent","@Test
  public void errorOnComponent()","0","-","-","-","-"
"6409","errorOnSubcomponent","@Test
  public void errorOnSubcomponent()","0","-","-","-","-"
"6410","shortestPathToBindingExistsThroughSubcomponentBuilder","@Test
  public void shortestPathToBindingExistsThroughSubcomponentBuilder()","0","-","-","-","-"
"6411","onPluginEnd","@Test
  public void onPluginEnd()","0","-","-","-","-"
"6412","CompilationFactory","CompilationFactory(JavaFileObject... javaFileObjects)","0","-","-","-","-"
"6413","compilationWithErrorOnDependency","private Compilation compilationWithErrorOnDependency(String dependencySimpleName)","0","-","-","-","-"
"6414","message","private static String message(String... lines)","0","-","-","-","-"
"6415","notAbstract","@Test
  public void notAbstract()","0","-","-","-","-"
"6416","hasParameters","@Test
  public void hasParameters()","0","-","-","-","-"
"6417","notInAModule","@Test
  public void notInAModule()","0","-","-","-","-"
"6418","parameterizedReturnType","@Test
  public void parameterizedReturnType()","0","-","-","-","-"
"6419","moduleIsntModule","@Test
  public void moduleIsntModule()","0","-","-","-","-"
"6420","hasQualifier","@Test
  public void hasQualifier()","0","-","-","-","-"
"6421","compile","private static DaggerCompiler compile(Source... sources)","0","-","-","-","-"
"6422","moduleWithMethod","private static Source moduleWithMethod(String... lines)","0","-","-","-","-"
"6423","rawFactoryType","@Test
  public void rawFactoryType()","0","-","-","-","-"
"6424","wildCardFactoryType","@Test
  public void wildCardFactoryType()","0","-","-","-","-"
"6425","rawBuilderType","@Test
  public void rawBuilderType()","0","-","-","-","-"
"6426","bindsToBuilderNotFactory","@Test
  public void bindsToBuilderNotFactory()","0","-","-","-","-"
"6427","providesToBuilderNotFactory","@Test
  public void providesToBuilderNotFactory()","0","-","-","-","-"
"6428","bindsToConcreteTypeInsteadOfWildcard","@Test
  public void bindsToConcreteTypeInsteadOfWildcard()","0","-","-","-","-"
"6429","bindsToBaseTypeInsteadOfWildcard","@Test
  public void bindsToBaseTypeInsteadOfWildcard()","0","-","-","-","-"
"6430","bindsCorrectType","@Test
  public void bindsCorrectType()","0","-","-","-","-"
"6431","bindsCorrectType_AndroidInjectionKey","@Test
  public void bindsCorrectType_AndroidInjectionKey()","0","-","-","-","-"
"6432","bindsCorrectType_AndroidInjectionKey_unbounded","@Test
  public void bindsCorrectType_AndroidInjectionKey_unbounded()","0","-","-","-","-"
"6433","bindsWithScope","@Test
  public void bindsWithScope()","0","-","-","-","-"
"6434","bindsWithScope_suppressWarnings","@Test
  public void bindsWithScope_suppressWarnings()","0","-","-","-","-"
"6435","mismatchedMapKey_bindsFactory","@Test
  public void mismatchedMapKey_bindsFactory()","0","-","-","-","-"
"6436","mismatchedMapKey_bindsBuilder","@Test
  public void mismatchedMapKey_bindsBuilder()","0","-","-","-","-"
"6437","mismatchedMapKey_bindsBuilder_androidInjectionKey","@Test
  public void mismatchedMapKey_bindsBuilder_androidInjectionKey()","0","-","-","-","-"
"6438","mismatchedMapKey_providesBuilder","@Test
  public void mismatchedMapKey_providesBuilder()","0","-","-","-","-"
"6439","bindsQualifier_ignoresChecks","@Test
  public void bindsQualifier_ignoresChecks()","0","-","-","-","-"
"6440","bindToPrimitive","@Test
  public void bindToPrimitive()","0","-","-","-","-"
"6441","bindToNonFrameworkClass","@Test
  public void bindToNonFrameworkClass()","0","-","-","-","-"
"6442","invalidBindsMethod","@Test
  public void invalidBindsMethod()","0","-","-","-","-"
"6443","compile","private DaggerCompiler compile(Source... files)","0","-","-","-","-"
"6444","conflictingMapKeys","@Test
  public void conflictingMapKeys()","0","-","-","-","-"
"6445","withClassKeys","@Test
  public void withClassKeys()","0","-","-","-","-"
"6446","withStringKeys","@Test
  public void withStringKeys()","0","-","-","-","-"
"6447","withMixedKeys","@Test
  public void withMixedKeys()","0","-","-","-","-"
"6448","maybeInject_returnsFalse_ifNoMatchingInjectorExists","@Test
  public void maybeInject_returnsFalse_ifNoMatchingInjectorExists()","0","-","-","-","-"
"6449","throwsIfFactoryCreateReturnsNull","@Test
  public void throwsIfFactoryCreateReturnsNull()","0","-","-","-","-"
"6450","throwsIfClassMismatched","@Test
  public void throwsIfClassMismatched()","0","-","-","-","-"
"6451","newDispatchingAndroidInjector","private static <T> DispatchingAndroidInjector<T> newDispatchingAndroidInjector(
      Map<Class<?>, Provider<Factory<?>>> injectorFactoriesWithClassKeys,
      Map<String, Provider<AndroidInjector.Factory<?>>>
          injectorFactoriesWithStringKeys)","0","-","-","-","-"
"6452","inject","@Override
    public void inject(FooActivity instance)","0","-","-","-","-"
"6453","create","@Override
      public AndroidInjector<FooActivity> create(FooActivity activity)","0","-","-","-","-"
"6454","inject","@Override
    public void inject(BarActivity instance)","0","-","-","-","-"
"6455","create","@Override
      public AndroidInjector<BarActivity> create(BarActivity activity)","0","-","-","-","-"
"6456","checkLegacyProguardRules","@Test
  public void checkLegacyProguardRules()","0","-","-","-","-"
"6457","checkProguardRules","@Test
  public void checkProguardRules()","0","-","-","-","-"
"6458","checkR8Rules","@Test
  public void checkR8Rules()","0","-","-","-","-"
"6459","fakeFragmentInjector","private static AndroidInjector<Object> fakeFragmentInjector(String tag)","0","-","-","-","-"
"6460","androidInjector","@Override
    public AndroidInjector<Object> androidInjector()","0","-","-","-","-"
"6461","fragmentInjectedByApplication","@Config(application = ApplicationInjectsFragment.class)
  @Test
  public void fragmentInjectedByApplication()","0","-","-","-","-"
"6462","androidInjector","@Override
    public AndroidInjector<Object> androidInjector()","0","-","-","-","-"
"6463","fragmentInjectedByActivity","@Config(application = ApplicationInjectsFragment.class)
  @Test
  public void fragmentInjectedByActivity()","0","-","-","-","-"
"6464","androidInjector","@Override
    public AndroidInjector<Object> androidInjector()","0","-","-","-","-"
"6465","fragmentInjectedByParentFragment","@Config(application = ApplicationInjectsFragment.class)
  @Test
  public void fragmentInjectedByParentFragment()","0","-","-","-","-"
"6466","injectActivity_applicationDoesntImplementHasAndroidInjector","@Test
  public void injectActivity_applicationDoesntImplementHasAndroidInjector()","0","-","-","-","-"
"6467","injectFragment_hasFragmentInjectorNotFound","@Test
  public void injectFragment_hasFragmentInjectorNotFound()","0","-","-","-","-"
"6468","androidInjector","@Override
    public AndroidInjector<Object> androidInjector()","0","-","-","-","-"
"6469","activityInjector_returnsNull","@Test
  @Config(application = ApplicationReturnsNull.class)
  public void activityInjector_returnsNull()","0","-","-","-","-"
"6470","fragmentInjector_returnsNull","@Test
  @Config(application = ApplicationReturnsNull.class)
  public void fragmentInjector_returnsNull()","0","-","-","-","-"
"6471","injectActivity_nullInput","@Test
  public void injectActivity_nullInput()","0","-","-","-","-"
"6472","injectFragment_nullInput","@Test
  public void injectFragment_nullInput()","0","-","-","-","-"
"6473","injectFragment_simpleApplication","@Test
  public void injectFragment_simpleApplication()","0","-","-","-","-"
"6474","androidInjector","@Override
    public AndroidInjector<Object> androidInjector()","0","-","-","-","-"
"6475","fragmentInjector_returnsNull","@Test
  @Config(application = ApplicationReturnsNull.class)
  public void fragmentInjector_returnsNull()","0","-","-","-","-"
"6476","injectFragment_nullInput","@Test
  public void injectFragment_nullInput()","0","-","-","-","-"
"6477","startFragment","void startFragment(Fragment fragment)","0","-","-","-","-"
"6478","setUp","@Before
  public void setUp()","0","-","-","-","-"
"6479","componentStructureFollowsControllerStructure","@Test
  @Config(application = ComponentStructureFollowsControllerStructureApplication.class)
  public void componentStructureFollowsControllerStructure()","0","-","-","-","-"
"6480","allControllersAreDirectChildrenOfApplication","@Test
  @Config(application = AllControllersAreDirectChildrenOfApplication.class)
  public void allControllersAreDirectChildrenOfApplication()","0","-","-","-","-"
"6481","usesGeneratedModules","@Test
  @Config(application = UsesGeneratedModulesApplication.class)
  public void usesGeneratedModules()","0","-","-","-","-"
"6482","changeConfiguration","private void changeConfiguration()","0","-","-","-","-"
"6483","applicationInjector","@Override
  protected AndroidInjector<? extends DaggerApplication> applicationInjector()","0","-","-","-","-"
"6484","addToComponentHierarchy","@Provides
      @IntoSet
      static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6485","bindFactoryForTestActivity","@Binds
      @IntoMap
      @ClassKey(TestActivity.class)
      abstract AndroidInjector.Factory<?> bindFactoryForTestActivity(
          ActivitySubcomponent.Builder builder);","0","-","-","-","-"
"6486","bindFactoryForInnerActivity","@Binds
      @IntoMap
      @ClassKey(OuterClass.TestInnerClassActivity.class)
      abstract AndroidInjector.Factory<?> bindFactoryForInnerActivity(
          InnerActivitySubcomponent.Builder builder);","0","-","-","-","-"
"6487","bindFactoryForService","@Binds
      @IntoMap
      @ClassKey(TestService.class)
      abstract AndroidInjector.Factory<?> bindFactoryForService(
          ServiceSubcomponent.Builder builder);","0","-","-","-","-"
"6488","bindFactoryForIntentService","@Binds
      @IntoMap
      @ClassKey(TestIntentService.class)
      abstract AndroidInjector.Factory<?> bindFactoryForIntentService(
          IntentServiceSubcomponent.Builder builder);","0","-","-","-","-"
"6489","bindFactoryForBroadcastReceiver","@Binds
      @IntoMap
      @ClassKey(TestBroadcastReceiver.class)
      abstract AndroidInjector.Factory<?> bindFactoryForBroadcastReceiver(
          BroadcastReceiverSubcomponent.Builder builder);","0","-","-","-","-"
"6490","bindFactoryForContentProvider","@Binds
      @IntoMap
      @ClassKey(TestContentProvider.class)
      abstract AndroidInjector.Factory<?> bindFactoryForContentProvider(
          ContentProviderSubcomponent.Builder builder);","0","-","-","-","-"
"6491","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6492","bindFactoryForParentFragment","@Binds
        @IntoMap
        @ClassKey(TestParentFragment.class)
        abstract AndroidInjector.Factory<?> bindFactoryForParentFragment(
            ParentFragmentSubcomponent.Builder builder);","0","-","-","-","-"
"6493","bindFactoryForDialogFragment","@Binds
        @IntoMap
        @ClassKey(TestDialogFragment.class)
        abstract AndroidInjector.Factory<?> bindFactoryForDialogFragment(
            DialogFragmentSubcomponent.Builder builder);","0","-","-","-","-"
"6494","addToComponentHierarchy","@Provides
          @IntoSet
          static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6495","bindFactoryForChildFragment","@Binds
          @IntoMap
          @ClassKey(TestChildFragment.class)
          abstract AndroidInjector.Factory<?> bindFactoryForChildFragment(
              ChildFragmentSubcomponent.Builder builder);","0","-","-","-","-"
"6496","addToComponentHierarchy","@Provides
            @IntoSet
            static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6497","addToComponentHierarchy","@Provides
          @IntoSet
          static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6498","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6499","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6500","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6501","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6502","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6503","applicationInjector","@Override
  protected AndroidInjector<? extends DaggerApplication> applicationInjector()","0","-","-","-","-"
"6504","addToComponentHierarchy","@Provides
    @IntoSet
    static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6505","contributeTestActivityWithScopeInjector","@ActivityScope
    @ContributesAndroidInjector(modules = ActivityScopedModule.class)
    abstract TestActivityWithScope contributeTestActivityWithScopeInjector();","0","-","-","-","-"
"6506","contributeTestActivityInjector","@ContributesAndroidInjector(modules = DummyActivitySubcomponent.AddToHierarchy.class)
    abstract TestActivity contributeTestActivityInjector();","0","-","-","-","-"
"6507","contributeInnerActivityInjector","@ContributesAndroidInjector(modules = DummyInnerActivitySubcomponent.AddToHierarchy.class)
    abstract OuterClass.TestInnerClassActivity contributeInnerActivityInjector();","0","-","-","-","-"
"6508","contributeTestParentFragmentInjector","@ContributesAndroidInjector(modules = DummyParentFragmentSubcomponent.AddToHierarchy.class)
    abstract TestParentFragment contributeTestParentFragmentInjector();","0","-","-","-","-"
"6509","contributeTestChildFragmentInjector","@ContributesAndroidInjector(modules = DummyChildFragmentSubcomponent.AddToHierarchy.class)
    abstract TestChildFragment contributeTestChildFragmentInjector();","0","-","-","-","-"
"6510","contributeTestDialogFragmentInjector","@ContributesAndroidInjector(modules = DummyDialogFragmentSubcomponent.AddToHierarchy.class)
    abstract TestDialogFragment contributeTestDialogFragmentInjector();","0","-","-","-","-"
"6511","contributeTestServiceInjector","@ContributesAndroidInjector(modules = DummyServiceSubcomponent.AddToHierarchy.class)
    abstract TestService contributeTestServiceInjector();","0","-","-","-","-"
"6512","contributeTestIntentServiceInjector","@ContributesAndroidInjector(modules = DummyIntentServiceSubcomponent.AddToHierarchy.class)
    abstract TestIntentService contributeTestIntentServiceInjector();","0","-","-","-","-"
"6513","contributeTestBroadcastReceiverInjector","@ContributesAndroidInjector(modules = DummyBroadcastReceiverSubcomponent.AddToHierarchy.class)
    abstract TestBroadcastReceiver contributeTestBroadcastReceiverInjector();","0","-","-","-","-"
"6514","contributeTestContentProviderInjector","@ContributesAndroidInjector(modules = DummyContentProviderSubcomponent.AddToHierarchy.class)
    abstract TestContentProvider contributeTestContentProviderInjector();","0","-","-","-","-"
"6515","provideScopedString","@Provides
    @ActivityScope
    static String provideScopedString()","0","-","-","-","-"
"6516","addDummyValueToComponentHierarchy","@Provides
      @IntoSet
      static Class<?> addDummyValueToComponentHierarchy()","0","-","-","-","-"
"6517","addDummyValueToComponentHierarchy","@Provides
      @IntoSet
      static Class<?> addDummyValueToComponentHierarchy()","0","-","-","-","-"
"6518","addDummyValueToComponentHierarchy","@Provides
      @IntoSet
      static Class<?> addDummyValueToComponentHierarchy()","0","-","-","-","-"
"6519","addDummyValueToComponentHierarchy","@Provides
      @IntoSet
      static Class<?> addDummyValueToComponentHierarchy()","0","-","-","-","-"
"6520","addDummyValueToComponentHierarchy","@Provides
      @IntoSet
      static Class<?> addDummyValueToComponentHierarchy()","0","-","-","-","-"
"6521","addDummyValueToComponentHierarchy","@Provides
      @IntoSet
      static Class<?> addDummyValueToComponentHierarchy()","0","-","-","-","-"
"6522","addDummyValueToComponentHierarchy","@Provides
      @IntoSet
      static Class<?> addDummyValueToComponentHierarchy()","0","-","-","-","-"
"6523","addDummyValueToComponentHierarchy","@Provides
      @IntoSet
      static Class<?> addDummyValueToComponentHierarchy()","0","-","-","-","-"
"6524","addDummyValueToComponentHierarchy","@Provides
      @IntoSet
      static Class<?> addDummyValueToComponentHierarchy()","0","-","-","-","-"
"6525","applicationInjector","@Override
  protected AndroidInjector<AllControllersAreDirectChildrenOfApplication> applicationInjector()","0","-","-","-","-"
"6526","addToComponentHierarchy","@Provides
      @IntoSet
      static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6527","bindFactoryForTestActivity","@Binds
      @IntoMap
      @ClassKey(TestActivity.class)
      abstract AndroidInjector.Factory<?> bindFactoryForTestActivity(
          ActivitySubcomponent.Builder builder);","0","-","-","-","-"
"6528","bindFactoryForInnerActivity","@Binds
      @IntoMap
      @ClassKey(OuterClass.TestInnerClassActivity.class)
      abstract AndroidInjector.Factory<?> bindFactoryForInnerActivity(
          InnerActivitySubcomponent.Builder builder);","0","-","-","-","-"
"6529","bindFactoryForParentFragment","@Binds
      @IntoMap
      @ClassKey(TestParentFragment.class)
      abstract AndroidInjector.Factory<?> bindFactoryForParentFragment(
          ParentFragmentSubcomponent.Builder builder);","0","-","-","-","-"
"6530","bindFactoryForChildFragment","@Binds
      @IntoMap
      @ClassKey(TestChildFragment.class)
      abstract AndroidInjector.Factory<?> bindFactoryForChildFragment(
          ChildFragmentSubcomponent.Builder builder);","0","-","-","-","-"
"6531","bindFactoryForDialogFragment","@Binds
      @IntoMap
      @ClassKey(TestDialogFragment.class)
      abstract AndroidInjector.Factory<?> bindFactoryForDialogFragment(
          DialogFragmentSubcomponent.Builder builder);","0","-","-","-","-"
"6532","bindFactoryForService","@Binds
      @IntoMap
      @ClassKey(TestService.class)
      abstract AndroidInjector.Factory<?> bindFactoryForService(
          ServiceSubcomponent.Builder builder);","0","-","-","-","-"
"6533","bindFactoryForIntentService","@Binds
      @IntoMap
      @ClassKey(TestIntentService.class)
      abstract AndroidInjector.Factory<?> bindFactoryForIntentService(
          IntentServiceSubcomponent.Builder builder);","0","-","-","-","-"
"6534","bindFactoryForBroadcastReceiver","@Binds
      @IntoMap
      @ClassKey(TestBroadcastReceiver.class)
      abstract AndroidInjector.Factory<?> bindFactoryForBroadcastReceiver(
          BroadcastReceiverSubcomponent.Builder builder);","0","-","-","-","-"
"6535","bindFactoryForContentProvider","@Binds
      @IntoMap
      @ClassKey(TestContentProvider.class)
      abstract AndroidInjector.Factory<?> bindFactoryForContentProvider(
          ContentProviderSubcomponent.Builder builder);","0","-","-","-","-"
"6536","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6537","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6538","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6539","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6540","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6541","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6542","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6543","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6544","addToComponentHierarchy","@Provides
        @IntoSet
        static Class<?> addToComponentHierarchy()","0","-","-","-","-"
"6545","query","@Nullable
  @Override
  public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
      String sortOrder)","0","-","-","-","-"
"6546","getType","@Nullable
  @Override
  public String getType(Uri uri)","0","-","-","-","-"
"6547","insert","@Nullable
  @Override
  public Uri insert(Uri uri, ContentValues values)","0","-","-","-","-"
"6548","delete","@Override
  public int delete(Uri uri, String selection, String[] selectionArgs)","0","-","-","-","-"
"6549","update","@Override
  public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)","0","-","-","-","-"
"6550","TestIntentService","public TestIntentService()","0","-","-","-","-"
"6551","onHandleIntent","@Override
  protected void onHandleIntent(Intent intent)","0","-","-","-","-"
"6552","onBind","@Override
  public IBinder onBind(Intent intent)","0","-","-","-","-"
"6553","getInterfaceDescriptor","@Override
    public String getInterfaceDescriptor() throws RemoteException","0","-","-","-","-"
"6554","pingBinder","@Override
    public boolean pingBinder()","0","-","-","-","-"
"6555","isBinderAlive","@Override
    public boolean isBinderAlive()","0","-","-","-","-"
"6556","queryLocalInterface","@Override
    public IInterface queryLocalInterface(String descriptor)","0","-","-","-","-"
"6557","dump","@Override
    public void dump(FileDescriptor fd, String[] args) throws RemoteException","0","-","-","-","-"
"6558","dumpAsync","@Override
    public void dumpAsync(FileDescriptor fd, String[] args) throws RemoteException","0","-","-","-","-"
"6559","transact","@Override
    public boolean transact(int code, Parcel data, Parcel reply, int flags) throws RemoteException","0","-","-","-","-"
"6560","linkToDeath","@Override
    public void linkToDeath(DeathRecipient recipient, int flags) throws RemoteException","0","-","-","-","-"
"6561","unlinkToDeath","@Override
    public boolean unlinkToDeath(DeathRecipient recipient, int flags)","0","-","-","-","-"
"6562","onAttach","@Override
  public void onAttach(Context context)","0","-","-","-","-"
"6563","onCreate","@Override
  protected void onCreate(Bundle savedInstanceState)","0","-","-","-","-"
"6564","testInvalidModuleNoInstallIn_fails","@Test
  public void testInvalidModuleNoInstallIn_fails()","0","-","-","-","-"
"6565","testInvalidModuleNoModule_fails","@Test
  public void testInvalidModuleNoModule_fails()","0","-","-","-","-"
"6566","testInvalidTest_fails","@Test
  public void testInvalidTest_fails()","0","-","-","-","-"
"6567","testInvalidTestModule_fails","@Test
  public void testInvalidTestModule_fails()","0","-","-","-","-"
"6568","originatingElementOnInnerClass_fails","@Test
  public void originatingElementOnInnerClass_fails()","0","-","-","-","-"
"6569","originatingElementValueWithInnerClass_fails","@Test
  public void originatingElementValueWithInnerClass_fails()","0","-","-","-","-"
"6570","TestAnnotationStep","public TestAnnotationStep(XProcessingEnv env)","0","-","-","-","-"
"6571","postProcess","@Override
    public void postProcess(XProcessingEnv processingEnv, XRoundEnv round)","0","-","-","-","-"
"6572","succeeds_ComponentProcessorWaitsForAnnotationsWithGeneratesRootInput","@Test
  public void succeeds_ComponentProcessorWaitsForAnnotationsWithGeneratesRootInput()","0","-","-","-","-"
"6573","testDefineComponentOutput","@Test
  public void testDefineComponentOutput()","0","-","-","-","-"
"6574","testDefineComponentClass_fails","@Test
  public void testDefineComponentClass_fails()","0","-","-","-","-"
"6575","testDefineComponentWithTypeParameters_fails","@Test
  public void testDefineComponentWithTypeParameters_fails()","0","-","-","-","-"
"6576","testDefineComponentWithInvalidComponent_fails","@Test
  public void testDefineComponentWithInvalidComponent_fails()","0","-","-","-","-"
"6577","testDefineComponentExtendsInterface_fails","@Test
  public void testDefineComponentExtendsInterface_fails()","0","-","-","-","-"
"6578","testDefineComponentNonStaticMethod_fails","@Test
  public void testDefineComponentNonStaticMethod_fails()","0","-","-","-","-"
"6579","testDefineComponentDependencyCycle_fails","@Test
  public void testDefineComponentDependencyCycle_fails()","0","-","-","-","-"
"6580","testDefineComponentNoParent_fails","@Test
  public void testDefineComponentNoParent_fails()","0","-","-","-","-"
"6581","testDefineComponentBuilderClass_fails","@Test
  public void testDefineComponentBuilderClass_fails()","0","-","-","-","-"
"6582","testDefineComponentBuilderWithTypeParameters_fails","@Test
  public void testDefineComponentBuilderWithTypeParameters_fails()","0","-","-","-","-"
"6583","testDefineComponentBuilderExtendsInterface_fails","@Test
  public void testDefineComponentBuilderExtendsInterface_fails()","0","-","-","-","-"
"6584","testDefineComponentBuilderNoBuilderMethod_fails","@Test
  public void testDefineComponentBuilderNoBuilderMethod_fails()","0","-","-","-","-"
"6585","testDefineComponentBuilderPrimitiveReturnType_fails","@Test
  public void testDefineComponentBuilderPrimitiveReturnType_fails()","0","-","-","-","-"
"6586","testDefineComponentBuilderWrongReturnType_fails","@Test
  public void testDefineComponentBuilderWrongReturnType_fails()","0","-","-","-","-"
"6587","testNoTestRootFails","@Test
  public void testNoTestRootFails()","0","-","-","-","-"
"6588","testNotUsedWithFieldFails","@Test
  public void testNotUsedWithFieldFails()","0","-","-","-","-"
"6589","testBindValueWithPrivateModifierFails","@Test
  public void testBindValueWithPrivateModifierFails()","0","-","-","-","-"
"6590","testBindValueWithInjectAnnotationFails","@Test
  public void testBindValueWithInjectAnnotationFails()","0","-","-","-","-"
"6591","testBindValueWithMultipleQualifiersFails","@Test
  public void testBindValueWithMultipleQualifiersFails()","0","-","-","-","-"
"6592","testMultipleTypesOfBindValueAnnotationsFails","@Test
  public void testMultipleTypesOfBindValueAnnotationsFails()","0","-","-","-","-"
"6593","testBindValueIntoMapWithNoKeysFails","@Test
  public void testBindValueIntoMapWithNoKeysFails()","0","-","-","-","-"
"6594","testBindValueIntoMapWithMultipleKeysFails","@Test
  public void testBindValueIntoMapWithMultipleKeysFails()","0","-","-","-","-"
"6595","testBindValueIntoSetWithMapKeyFails","@Test
  public void testBindValueIntoSetWithMapKeyFails()","0","-","-","-","-"
"6596","testBindValueWithScopeFails","@Test
  public void testBindValueWithScopeFails()","0","-","-","-","-"
"6597","testBindValueWithJakartaScopeFails","@Test
  public void testBindValueWithJakartaScopeFails()","0","-","-","-","-"
"6598","testBindValueWithMultipleJakartaJavaxQualifiersFails","@Test
  public void testBindValueWithMultipleJakartaJavaxQualifiersFails()","0","-","-","-","-"
"6599","testCopyMethodSpecWithoutBodyForMethod","@Test
  public void testCopyMethodSpecWithoutBodyForMethod() throws Exception","0","-","-","-","-"
"6600","testCopyMethodSpecWithoutBodyForConstructor","@Test
  public void testCopyMethodSpecWithoutBodyForConstructor() throws Exception","0","-","-","-","-"
"6601","reportMultipleAnnotationTypeKindErrors","@Test
  public void reportMultipleAnnotationTypeKindErrors()","0","-","-","-","-"
"6602","testInvalidComponentInInstallInAnnotation","@Test
  public void testInvalidComponentInInstallInAnnotation()","0","-","-","-","-"
"6603","testMissingInstallInAnnotation","@Test
  public void testMissingInstallInAnnotation()","0","-","-","-","-"
"6604","testNoErrorOnDaggerGeneratedModules","@Test
  public void testNoErrorOnDaggerGeneratedModules()","0","-","-","-","-"
"6605","testModuleWithOnlyParamConstructor_fails","@Test
  public void testModuleWithOnlyParamConstructor_fails()","0","-","-","-","-"
"6606","testInnerModule","@Test
  public void testInnerModule()","0","-","-","-","-"
"6607","testInnerModuleInTest","@Test
  public void testInnerModuleInTest()","0","-","-","-","-"
"6608","testInnerModuleInTest_succeeds","@Test
  public void testInnerModuleInTest_succeeds()","0","-","-","-","-"
"6609","compile","private static void compile(
      Source source, Consumer<CompilationResultSubject> onCompilationResult)","0","-","-","-","-"
"6610","isBeforeJava9","private static boolean isBeforeJava9()","0","-","-","-","-"
"6611","GeneratedImport","private GeneratedImport()","0","-","-","-","-"
"6612","testIllegalCombinationInstallIn","@Test
  public void testIllegalCombinationInstallIn()","0","-","-","-","-"
"6613","testProdComponents","@Test
  public void testProdComponents()","0","-","-","-","-"
"6614","testTestComponents","@Test
  public void testTestComponents()","0","-","-","-","-"
"6615","testSharedTestComponents","@Test
  public void testSharedTestComponents()","0","-","-","-","-"
"6616","entryPoint","private static Source entryPoint(String component, String name)","0","-","-","-","-"
"6617","parameters","@Parameters(name = ""","0","-","-","-","-"
"6618","RootProcessorErrorsTest","public RootProcessorErrorsTest(boolean disableCrossCompilationRootValidation)","0","-","-","-","-"
"6619","processorOptions","private ImmutableMap<String, String> processorOptions()","0","-","-","-","-"
"6620","multipleAppRootsTest","@Test
  public void multipleAppRootsTest()","0","-","-","-","-"
"6621","appRootWithTestRootTest","@Test
  public void appRootWithTestRootTest()","0","-","-","-","-"
"6622","MyAppPreviousCompilation","private MyAppPreviousCompilation()","0","-","-","-","-"
"6623","MyTestPreviousCompilation","private MyTestPreviousCompilation()","0","-","-","-","-"
"6624","parameters","@Parameters(name = ""","0","-","-","-","-"
"6625","MyAppPreviousCompilationTest","public MyAppPreviousCompilationTest(boolean disableCrossCompilationRootValidation)","0","-","-","-","-"
"6626","processorOptions","private ImmutableMap<String, String> processorOptions()","0","-","-","-","-"
"6627","testRootTest","@Test
  public void testRootTest()","0","-","-","-","-"
"6628","appRootTest","@Test
  public void appRootTest()","0","-","-","-","-"
"6629","parameters","@Parameters(name = ""","0","-","-","-","-"
"6630","MyTestPreviousCompilationTest","public MyTestPreviousCompilationTest(boolean disableCrossCompilationRootValidation)","0","-","-","-","-"
"6631","processorOptions","private ImmutableMap<String, String> processorOptions()","0","-","-","-","-"
"6632","testRootTest","@Test
  public void testRootTest()","0","-","-","-","-"
"6633","appRootTest","@Test
  public void appRootTest()","0","-","-","-","-"
"6634","fails_componentScopedWithAliasScope","@Test
  public void fails_componentScopedWithAliasScope()","0","-","-","-","-"
"6635","fails_aliasOfOnNonScope","@Test
  public void fails_aliasOfOnNonScope()","0","-","-","-","-"
"6636","succeeds_aliasOfJakartaScope","@Test
  public void succeeds_aliasOfJakartaScope()","0","-","-","-","-"
"6637","fails_conflictingAliasScope","@Test
  public void fails_conflictingAliasScope()","0","-","-","-","-"
"6638","testConfigChange","@Test
  public void testConfigChange()","0","-","-","-","-"
"6639","testKeyedViewModels","@Test
  public void testKeyedViewModels()","0","-","-","-","-"
"6640","testNoCreationCallbacks","@Test
  public void testNoCreationCallbacks()","0","-","-","-","-"
"6641","testNoFactory","@Test
  public void testNoFactory()","0","-","-","-","-"
"6642","testFragmentArgs","@Test
  public void testFragmentArgs()","0","-","-","-","-"
"6643","testIncompatibleFactories","@Test
  public void testIncompatibleFactories()","0","-","-","-","-"
"6644","onCreate","@Override
    protected void onCreate(@Nullable Bundle savedInstanceState)","0","-","-","-","-"
"6645","onCreate","@Override
    protected void onCreate(@Nullable Bundle savedInstanceState)","0","-","-","-","-"
"6646","onCreate","@Override
    protected void onCreate(@Nullable Bundle savedInstanceState)","0","-","-","-","-"
"6647","onCreate","@Override
    protected void onCreate(@Nullable Bundle savedInstanceState)","0","-","-","-","-"
"6648","onCreate","@Override
    protected void onCreate(@Nullable Bundle savedInstanceState)","0","-","-","-","-"
"6649","onCreate","@Override
    protected void onCreate(@Nullable Bundle savedInstanceState)","0","-","-","-","-"
"6650","onCreate","@Override
    public void onCreate(@Nullable Bundle bundle)","0","-","-","-","-"
"6651","MyViewModel","@AssistedInject
    MyViewModel(
        DependsOnBarOne one,
        DependsOnBarTwo two,
        ViewModelLifecycle lifecycle,
        SavedStateHandle handle,
        @Assisted String s)","0","-","-","-","-"
"6652","create","MyViewModel create(String s);","0","-","-","-","-"
"6653","create","MyViewModel create(String s);","0","-","-","-","-"
"6654","MyInjectedViewModel","@Inject
    MyInjectedViewModel(
        DependsOnBarOne one,
        DependsOnBarTwo two,
        ViewModelLifecycle lifecycle,
        SavedStateHandle handle)","0","-","-","-","-"
"6655","Bar","@Inject
    Bar()","0","-","-","-","-"
"6656","DependsOnBarOne","@Inject
    DependsOnBarOne(Bar bar)","0","-","-","-","-"
"6657","DependsOnBarTwo","@Inject
    DependsOnBarTwo(Bar bar)","0","-","-","-","-"
"6658","testEntryPoints","@Test
  public void testEntryPoints() throws Exception","0","-","-","-","-"
"6659","onAttach","@Override
    public void onAttach(Context context)","0","-","-","-","-"
"6660","onAttach","@Override
    public void onAttach(Activity activity)","0","-","-","-","-"
"6661","testGetContextAvailableBeforeSuperOnAttach","@Test
  public void testGetContextAvailableBeforeSuperOnAttach() throws Exception","0","-","-","-","-"
"6662","testGetContextReturnsNullAfterRemoval","@Test
  public void testGetContextReturnsNullAfterRemoval() throws Exception","0","-","-","-","-"
"6663","foo","Foo foo();","0","-","-","-","-"
"6664","attachBaseContext","@Override
    protected final void attachBaseContext(Context base)","0","-","-","-","-"
"6665","onCreate","@Override
    public void onCreate()","0","-","-","-","-"
"6666","testEarlyEntryPointsPasses","@Test
  public void testEarlyEntryPointsPasses() throws Exception","0","-","-","-","-"
"6667","testEntryPointsFails","@Test
  public void testEntryPointsFails() throws Exception","0","-","-","-","-"
"6668","testApplicationBaseClass","@Test
  public void testApplicationBaseClass() throws Exception","0","-","-","-","-"
"6669","testOtherApplicationBaseClass","@Test
  @Config(application = CustomTestApplicationTest_Other_Application.class)
  public void testOtherApplicationBaseClass() throws Exception","0","-","-","-","-"
"6670","activityRetainedComponentSaveState_configurationChange_successfullySavedState","@Test
  public void activityRetainedComponentSaveState_configurationChange_successfullySavedState()","0","-","-","-","-"
"6671","firstTimeAccessToActivityRetainedSaveState_inActivityOnDestroy_fails","@Test
  public void firstTimeAccessToActivityRetainedSaveState_inActivityOnDestroy_fails()","0","-","-","-","-"
"6672","testViewModelSavedState","@Test
  public void testViewModelSavedState()","0","-","-","-","-"
"6673","findTestFragment","private TestFragment findTestFragment(FragmentActivity activity)","0","-","-","-","-"
"6674","getViewModel","private MyViewModel getViewModel(ViewModelStoreOwner owner, ViewModelProvider.Factory factory)","0","-","-","-","-"
"6675","onCreate","@Override
    protected void onCreate(@Nullable Bundle savedInstanceState)","0","-","-","-","-"
"6676","onDestroy","@SuppressWarnings(""unused"")
    @Override
    protected void onDestroy()","0","-","-","-","-"
"6677","onCreate","@Override
    public void onCreate(@Nullable Bundle savedInstanceState)","0","-","-","-","-"
"6678","MyViewModel","@Inject
    MyViewModel(SavedStateHandle savedStateHandle)","0","-","-","-","-"
"6679","activityFactory","@Test
  public void activityFactory()","0","-","-","-","-"
"6680","onClearedInvoked","@Test
  public void onClearedInvoked()","0","-","-","-","-"
"6681","addOnClearedListener_tooLate","@Test
  public void addOnClearedListener_tooLate()","0","-","-","-","-"
"6682","removeOnClearedListener_tooLate","@Test
  public void removeOnClearedListener_tooLate()","0","-","-","-","-"
"6683","onCleared","@Override
    public void onCleared()","0","-","-","-","-"
"6684","provideString","@Provides
  @UsesComponentQualifier
  static String provideString()","0","-","-","-","-"
"6685","UsesComponentTestModule","private UsesComponentTestModule()","0","-","-","-","-"
"6686","provideStringValue","@Provides
    @External
    static String provideStringValue()","0","-","-","-","-"
"6687","provideLongValue","@Provides
    @External
    static Long provideLongValue()","0","-","-","-","-"
"6688","MultiTestRootExternalModules","private MultiTestRootExternalModules()","0","-","-","-","-"
"6689","testInject","@Test
    public void testInject()","0","-","-","-","-"
"6690","testSubcomponent","@Test
    public void testSubcomponent()","0","-","-","-","-"
"6691","testActivity","@Test
    public void testActivity()","0","-","-","-","-"
"6692","testUsesSharedComponent","@Test
    public void testUsesSharedComponent()","0","-","-","-","-"
"6693","testLocalComponentNotGenerated","@Test
    public void testLocalComponentNotGenerated()","0","-","-","-","-"
"6694","bindValueString","@Named(TEST_QUALIFIER)
    String bindValueString();","0","-","-","-","-"
"6695","provideBaz","@Provides
    static Baz provideBaz()","0","-","-","-","-"
"6696","provideQux","@Provides
    static Qux provideQux()","0","-","-","-","-"
"6697","provideInt","@Provides
    static int provideInt()","0","-","-","-","-"
"6698","provideString","@Provides
    static String provideString()","0","-","-","-","-"
"6699","provideLong","@Provides
      static long provideLong()","0","-","-","-","-"
"6700","Outer","private Outer()","0","-","-","-","-"
"6701","Foo","@Inject
    Foo(int value)","0","-","-","-","-"
"6702","Bar","Bar(String value)","0","-","-","-","-"
"6703","Baz","Baz(long value)","0","-","-","-","-"
"6704","provideBar","@Provides
    static Bar provideBar(String value)","0","-","-","-","-"
"6705","getBar","Bar getBar();","0","-","-","-","-"
"6706","getQux","Qux getQux();","0","-","-","-","-"
"6707","testInjectFromTestModule","@Test
  public void testInjectFromTestModule() throws Exception","0","-","-","-","-"
"6708","testInjectFromTestModuleWithArgs","@Test
  public void testInjectFromTestModuleWithArgs() throws Exception","0","-","-","-","-"
"6709","testInjectFromNestedTestModule","@Test
  public void testInjectFromNestedTestModule() throws Exception","0","-","-","-","-"
"6710","testInjectFromPkgPrivateTestModule","@Test
  public void testInjectFromPkgPrivateTestModule() throws Exception","0","-","-","-","-"
"6711","testInjectFromExternalAppModule","@Test
  public void testInjectFromExternalAppModule() throws Exception","0","-","-","-","-"
"6712","testInjectFromExternalActivityModule","@Test
  public void testInjectFromExternalActivityModule() throws Exception","0","-","-","-","-"
"6713","testLocalEntryPoint","@Test
  public void testLocalEntryPoint() throws Exception","0","-","-","-","-"
"6714","testLocalPkgPrivateEntryPoint","@Test
  public void testLocalPkgPrivateEntryPoint() throws Exception","0","-","-","-","-"
"6715","testAndroidEntryPoint","@Test
  public void testAndroidEntryPoint() throws Exception","0","-","-","-","-"
"6716","testMissingMultiTestRoot1EntryPoint","@Test
  public void testMissingMultiTestRoot1EntryPoint() throws Exception","0","-","-","-","-"
"6717","testBindValueFieldIsProvided","@Test
  public void testBindValueFieldIsProvided() throws Exception","0","-","-","-","-"
"6718","testBindValueIsMutable","@Test
  public void testBindValueIsMutable() throws Exception","0","-","-","-","-"
"6719","getBinding","private static String getBinding()","0","-","-","-","-"
"6720","EarlyEntryPointHiltAndroidAppRuntimeClasses","private EarlyEntryPointHiltAndroidAppRuntimeClasses()","0","-","-","-","-"
"6721","foo","Foo foo();","0","-","-","-","-"
"6722","foo","Foo foo();","0","-","-","-","-"
"6723","Foo","@Inject
    Foo()","0","-","-","-","-"
"6724","AndroidEntryPointBaseClassOtherPkg","private AndroidEntryPointBaseClassOtherPkg()","0","-","-","-","-"
"6725","TestInstallInModules","private TestInstallInModules()","0","-","-","-","-"
"6726","provideLocalString","@Provides
    @UsesComponentQualifier
    static String provideLocalString()","0","-","-","-","-"
"6727","testActivityInjection","@Test
  public void testActivityInjection() throws Exception","0","-","-","-","-"
"6728","testOptionalSubclassActivityInjection","@Test
  public void testOptionalSubclassActivityInjection() throws Exception","0","-","-","-","-"
"6729","testFragmentInjection","@Test
  public void testFragmentInjection() throws Exception","0","-","-","-","-"
"6730","testViewInjection","@Test
  public void testViewInjection() throws Exception","0","-","-","-","-"
"6731","testViewWithFragmentBindingsInjection","@Test
  public void testViewWithFragmentBindingsInjection() throws Exception","0","-","-","-","-"
"6732","testViewModels","@Test
  public void testViewModels()","0","-","-","-","-"
"6733","testServiceInjection","@Test
  public void testServiceInjection() throws Exception","0","-","-","-","-"
"6734","testIntentServiceInjection","@Test
  public void testIntentServiceInjection() throws Exception","0","-","-","-","-"
"6735","testBroadcastReceiverInjection","@Test
  public void testBroadcastReceiverInjection() throws Exception","0","-","-","-","-"
"6736","foo","Foo foo();","0","-","-","-","-"
"6737","Foo","@Inject
    Foo()","0","-","-","-","-"
"6738","Bar","@Inject
    Bar(Foo foo, int id)","0","-","-","-","-"
"6739","testEarlyEntryPointsWrongEntryPointFails","@Test
  public void testEarlyEntryPointsWrongEntryPointFails() throws Exception","0","-","-","-","-"
"6740","testEntryPointsWrongEntryPointFails","@Test
  public void testEntryPointsWrongEntryPointFails() throws Exception","0","-","-","-","-"
"6741","testComponentInstances","@Test
  public void testComponentInstances()","0","-","-","-","-"
"6742","testScopedEntryPointValues","@Test
  public void testScopedEntryPointValues()","0","-","-","-","-"
"6743","testSubcomponentEntryPoints","@Test
  public void testSubcomponentEntryPoints()","0","-","-","-","-"
"6744","setUp","@Before
  public void setUp()","0","-","-","-","-"
"6745","testBindingFromInternalKtModule","@Test
  public void testBindingFromInternalKtModule()","0","-","-","-","-"
"6746","generate_componentActivity","@Test
  public void generate_componentActivity()","0","-","-","-","-"
"6747","generate_baseHiltComponentActivity","@Test
  public void generate_baseHiltComponentActivity()","0","-","-","-","-"
"6748","baseActivityHasFinalOnDestroy_fails","@Test
  public void baseActivityHasFinalOnDestroy_fails()","0","-","-","-","-"
"6749","baseActivityHasFinalOnCreate_fails","@Test
  public void baseActivityHasFinalOnCreate_fails()","0","-","-","-","-"
"6750","secondBaseActivityHasFinalOnCreate_fails","@Test
  public void secondBaseActivityHasFinalOnCreate_fails()","0","-","-","-","-"
"6751","testAndroidEntryPoint","@Test
  public void testAndroidEntryPoint()","0","-","-","-","-"
"6752","missingBaseClass","@Test
  public void missingBaseClass()","0","-","-","-","-"
"6753","incorrectSuperclass","@Test
  public void incorrectSuperclass()","0","-","-","-","-"
"6754","disableSuperclassValidation_activity","@Test
  public void disableSuperclassValidation_activity()","0","-","-","-","-"
"6755","disableSuperclassValidation_application","@Test
  public void disableSuperclassValidation_application()","0","-","-","-","-"
"6756","checkBaseActivityExtendsComponentActivity","@Test
  public void checkBaseActivityExtendsComponentActivity()","0","-","-","-","-"
"6757","checkBaseActivityWithTypeParameters","@Test
  public void checkBaseActivityWithTypeParameters()","0","-","-","-","-"
"6758","checkAndroidEntryPointOnApplicationRecommendsHiltAndroidApp","@Test
  public void checkAndroidEntryPointOnApplicationRecommendsHiltAndroidApp()","0","-","-","-","-"
"6759","checkBaseClassConstructorHasNotDefaultParameters","@Test
  public void checkBaseClassConstructorHasNotDefaultParameters()","0","-","-","-","-"
"6760","copyConstructorParametersCopiesExternalNullables","@Test
  public void copyConstructorParametersCopiesExternalNullables()","0","-","-","-","-"
"6761","copyConstructorParametersConvertsAndroidInternalNullableToExternal","@Test
  public void copyConstructorParametersConvertsAndroidInternalNullableToExternal()","0","-","-","-","-"
"6762","typeUseNullableCopiedFromSuperConstructor","@Test
  public void typeUseNullableCopiedFromSuperConstructor()","0","-","-","-","-"
"6763","hybridTypeUseAndDeclarationNullableNotDuplicated","@Test
  public void hybridTypeUseAndDeclarationNullableNotDuplicated()","0","-","-","-","-"
"6764","isRestrictedApiConstructorWithPrimitiveParameterTest","@Test
  public void isRestrictedApiConstructorWithPrimitiveParameterTest()","0","-","-","-","-"
"6765","isRestrictedApiConstructorWithArrayParameterTest","@Test
  public void isRestrictedApiConstructorWithArrayParameterTest()","0","-","-","-","-"
"6766","isRestrictedApiConstructorWithTypeParameterTest","@Test
  public void isRestrictedApiConstructorWithTypeParameterTest()","0","-","-","-","-"
"6767","copyTargetApiAnnotationActivity","@Test
  public void copyTargetApiAnnotationActivity()","0","-","-","-","-"
"6768","copyTargetApiAnnotationOverView","@Test
  public void copyTargetApiAnnotationOverView()","0","-","-","-","-"
"6769","copyTargetApiAnnotationApplication","@Test
  public void copyTargetApiAnnotationApplication()","0","-","-","-","-"
"6770","copyTargetApiAnnotationFragment","@Test
  public void copyTargetApiAnnotationFragment()","0","-","-","-","-"
"6771","copyTargetApiBroadcastRecieverGenerator","@Test
  public void copyTargetApiBroadcastRecieverGenerator()","0","-","-","-","-"
"6772","copyTargetApiServiceGenerator","@Test
  public void copyTargetApiServiceGenerator()","0","-","-","-","-"
"6773","copySuppressWarningsAnnotationActivity_annotationCopied","@Test
  public void copySuppressWarningsAnnotationActivity_annotationCopied()","0","-","-","-","-"
"6774","copySuppressWarningsAnnotation_onView_annotationCopied","@Test
  public void copySuppressWarningsAnnotation_onView_annotationCopied()","0","-","-","-","-"
"6775","copySuppressWarningsAnnotation_onApplication_annotationCopied","@Test
  public void copySuppressWarningsAnnotation_onApplication_annotationCopied()","0","-","-","-","-"
"6776","copySuppressWarningsAnnotation_onFragment_annotationCopied","@Test
  public void copySuppressWarningsAnnotation_onFragment_annotationCopied()","0","-","-","-","-"
"6777","copySuppressWarnings_onBroadcastRecieverGenerator_annotationCopied","@Test
  public void copySuppressWarnings_onBroadcastRecieverGenerator_annotationCopied()","0","-","-","-","-"
"6778","copySuppressWarnings_onServiceGenerator_annotationCopied","@Test
  public void copySuppressWarnings_onServiceGenerator_annotationCopied()","0","-","-","-","-"
"6779","testUsedWithEntryPoint_fails","@Test
  public void testUsedWithEntryPoint_fails()","0","-","-","-","-"
"6780","testNotSingletonComponent_fails","@Test
  public void testNotSingletonComponent_fails()","0","-","-","-","-"
"6781","testThatTestInstallInCannotOriginateFromTest","@Test
  public void testThatTestInstallInCannotOriginateFromTest()","0","-","-","-","-"
"6782","testMissingValues","@Test
  public void testMissingValues()","0","-","-","-","-"
"6783","testEmptyComponentValues","@Test
  public void testEmptyComponentValues()","0","-","-","-","-"
"6784","testEmptyReplacesValues","@Test
  public void testEmptyReplacesValues()","0","-","-","-","-"
"6785","testMissingModuleAnnotation","@Test
  public void testMissingModuleAnnotation()","0","-","-","-","-"
"6786","testInvalidUsageOnEntryPoint","@Test
  public void testInvalidUsageOnEntryPoint()","0","-","-","-","-"
"6787","testInvalidReplaceModules","@Test
  public void testInvalidReplaceModules()","0","-","-","-","-"
"6788","testInternalDaggerReplaceModules","@Test
  public void testInternalDaggerReplaceModules()","0","-","-","-","-"
"6789","testHiltWrapperDaggerReplaceModules","@Test
  public void testHiltWrapperDaggerReplaceModules()","0","-","-","-","-"
"6790","testCannotReplaceLocalInstallInModule","@Test
  public void testCannotReplaceLocalInstallInModule()","0","-","-","-","-"
"6791","testThatTestInstallInCannotOriginateFromTest","@Test
  public void testThatTestInstallInCannotOriginateFromTest()","0","-","-","-","-"
"6792","validBaseClass_succeeds","@Test
  public void validBaseClass_succeeds()","0","-","-","-","-"
"6793","incorrectBaseType_fails","@Test
  public void incorrectBaseType_fails()","0","-","-","-","-"
"6794","baseWithHiltAndroidApp_fails","@Test
  public void baseWithHiltAndroidApp_fails()","0","-","-","-","-"
"6795","superclassWithHiltAndroidApp_fails","@Test
  public void superclassWithHiltAndroidApp_fails()","0","-","-","-","-"
"6796","withInjectField_fails","@Test
  public void withInjectField_fails()","0","-","-","-","-"
"6797","withSuperclassInjectField_fails","@Test
  public void withSuperclassInjectField_fails()","0","-","-","-","-"
"6798","withInjectMethod_fails","@Test
  public void withInjectMethod_fails()","0","-","-","-","-"
"6799","withSuperclassInjectMethod_fails","@Test
  public void withSuperclassInjectMethod_fails()","0","-","-","-","-"
"6800","withInjectConstructor_fails","@Test
  public void withInjectConstructor_fails()","0","-","-","-","-"
"6801","withSuperclassInjectConstructor_fails","@Test
  public void withSuperclassInjectConstructor_fails()","0","-","-","-","-"
"6802","build","CustomComponent build();","0","-","-","-","-"
"6803","unscopedDep","@Provides
    static UnscopedDep unscopedDep()","0","-","-","-","-"
"6804","activityScopedDep","@Provides
    @ActivityScoped
    static ActivityScopedDep activityScopedDep()","0","-","-","-","-"
"6805","aliasScopedDep","@Provides
    @AliasScoped
    static AliasScopedDep aliasScopedDep()","0","-","-","-","-"
"6806","customScopedDep","@Provides
    @CustomScoped
    static CustomScopedDep customScopedDep()","0","-","-","-","-"
"6807","aliasScopedDep","@Provides
    @AliasScoped
    static AliasScopedDep aliasScopedDep()","0","-","-","-","-"
"6808","customComponentBuilder","CustomComponent.Builder customComponentBuilder();","0","-","-","-","-"
"6809","unscopedDep","Provider<UnscopedDep> unscopedDep();","0","-","-","-","-"
"6810","customScopedDep","Provider<CustomScopedDep> customScopedDep();","0","-","-","-","-"
"6811","aliasScopedDep","Provider<AliasScopedDep> aliasScopedDep();","0","-","-","-","-"
"6812","setUp","@Before
  public void setUp()","0","-","-","-","-"
"6813","testActivityScoped","@Test
  public void testActivityScoped()","0","-","-","-","-"
"6814","testCustomScoped","@Test
  public void testCustomScoped()","0","-","-","-","-"
"6815","testFragmentContextWrapperDoesNotLeakFragment","@Test
  public void testFragmentContextWrapperDoesNotLeakFragment()","0","-","-","-","-"
"6816","testInject","@Test
  public void testInject()","0","-","-","-","-"
"6817","testUsesLocalComponent","@Test
  public void testUsesLocalComponent()","0","-","-","-","-"
"6818","testLocalComponentNotGenerated","@Test
  public void testLocalComponentNotGenerated()","0","-","-","-","-"
"6819","provideInt","@Provides
    static Integer provideInt()","0","-","-","-","-"
"6820","inject","void inject()","0","-","-","-","-"
"6821","testInject","@Test
  public void testInject()","0","-","-","-","-"
"6822","testSubcomponent","@Test
  public void testSubcomponent()","0","-","-","-","-"
"6823","testActivity","@Test
  public void testActivity()","0","-","-","-","-"
"6824","testUsesSharedComponent","@Test
  public void testUsesSharedComponent()","0","-","-","-","-"
"6825","testLocalComponentNotGenerated","@Test
  public void testLocalComponentNotGenerated()","0","-","-","-","-"
"6826","testMissingHiltAndroidTest_fails","@Test
  @Config(application = HiltTestApplication.class)
  public void testMissingHiltAndroidTest_fails() throws Exception","0","-","-","-","-"
"6827","testNonHiltTestApplication_fails","@Test
  @Config(application = Application.class)
  public void testNonHiltTestApplication_fails() throws Exception","0","-","-","-","-"
"6828","testHiltAndroidApplication_fails","@Test
  @Config(application = HiltAndroidRuleTestApp.class)
  public void testHiltAndroidApplication_fails() throws Exception","0","-","-","-","-"
"6829","getStringSet","Set<String> getStringSet();","0","-","-","-","-"
"6830","testMutated","@Test
  public void testMutated() throws Exception","0","-","-","-","-"
"6831","provideString","@Provides
    @TestQualifier(0)
    String provideString()","0","-","-","-","-"
"6832","NonStaticModuleNonStaticProvidesDefaultConstructor","NonStaticModuleNonStaticProvidesDefaultConstructor()","0","-","-","-","-"
"6833","provideString","@Provides
    @TestQualifier(1)
    String provideString()","0","-","-","-","-"
"6834","provideString","@Provides
    @TestQualifier(2)
    static String provideString()","0","-","-","-","-"
"6835","StaticModuleStaticProvides","private StaticModuleStaticProvides()","0","-","-","-","-"
"6836","provideString","@Provides
    @TestQualifier(3)
    String provideString()","0","-","-","-","-"
"6837","provideString","@Provides
    @TestQualifier(4)
    static String provideString()","0","-","-","-","-"
"6838","AbstractModuleStaticProvides","private AbstractModuleStaticProvides()","0","-","-","-","-"
"6839","foo","@Binds
    abstract Foo foo(FooImpl fooImpl);","0","-","-","-","-"
"6840","FooImpl","@Inject
    FooImpl()","0","-","-","-","-"
"6841","testInjection","@Test
  public void testInjection() throws Exception","0","-","-","-","-"
"6842","testCannotCallInjectOnTestRule","@Test
  public void testCannotCallInjectOnTestRule() throws Exception","0","-","-","-","-"
"6843","getStringStringMap","Map<String, String> getStringStringMap();","0","-","-","-","-"
"6844","testInjectedAndModified","@Test
  public void testInjectedAndModified() throws Exception","0","-","-","-","-"
"6845","foo","String foo();","0","-","-","-","-"
"6846","evaluate","@Override
          public void evaluate() throws Throwable","0","-","-","-","-"
"6847","testLateBindValue","@Test
  public void testLateBindValue() throws Exception","0","-","-","-","-"
"6848","testUnitializedBindValue_fails","@Test
  public void testUnitializedBindValue_fails() throws Exception","0","-","-","-","-"
"6849","testDoubleComponentReady_fails","@Test
  public void testDoubleComponentReady_fails() throws Exception","0","-","-","-","-"
"6850","testMissingComponentReady_fails","@Test
  public void testMissingComponentReady_fails() throws Exception","0","-","-","-","-"
"6851","testDelayComponentReadyAfterStart_fails","@Test
  public void testDelayComponentReadyAfterStart_fails() throws Exception","0","-","-","-","-"
"6852","neverCallsComponentReady_fails","@Test
  public void neverCallsComponentReady_fails() throws Exception","0","-","-","-","-"
"6853","getStringSet","Set<String> getStringSet();","0","-","-","-","-"
"6854","testMutated","@Test
  public void testMutated() throws Exception","0","-","-","-","-"
"6855","bindValueString1","@Named(TEST_QUALIFIER1)
    String bindValueString1();","0","-","-","-","-"
"6856","bindValueString2","@Named(TEST_QUALIFIER2)
    String bindValueString2();","0","-","-","-","-"
"6857","testBindValueFieldIsProvided","@Test
  public void testBindValueFieldIsProvided() throws Exception","0","-","-","-","-"
"6858","testBindValueIsMutable","@Test
  public void testBindValueIsMutable() throws Exception","0","-","-","-","-"
"6859","testCallingComponentReadyWithoutDelayComponentReady_fails","@Test
  public void testCallingComponentReadyWithoutDelayComponentReady_fails() throws Exception","0","-","-","-","-"
"6860","getBinding1","private static String getBinding1()","0","-","-","-","-"
"6861","getBinding2","private static String getBinding2()","0","-","-","-","-"
"6862","provideBar","@Provides
    static Bar provideBar()","0","-","-","-","-"
"6863","testFoo","@Test
  public void testFoo()","0","-","-","-","-"
"6864","testBar","@Test
  public void testBar()","0","-","-","-","-"
"6865","TestInstallInModules","private TestInstallInModules()","0","-","-","-","-"
"6866","Foo","Foo(Class<?> moduleClass)","0","-","-","-","-"
"6867","Bar","Bar(Class<?> moduleClass)","0","-","-","-","-"
"6868","provideFoo","@Provides
    static Foo provideFoo()","0","-","-","-","-"
"6869","provideFoo","@Provides
    static Bar provideFoo()","0","-","-","-","-"
"6870","provideFoo","@Provides
    static Foo provideFoo()","0","-","-","-","-"
"6871","provideFoo","@Provides
    @ActivityLevel
    static Foo provideFoo()","0","-","-","-","-"
"6872","provideFoo","@Provides
    @ActivityLevel
    // Add an activity dependency to make sure Dagger adds this module to the correct component.
    static Bar provideFoo(@SuppressWarnings(""UnusedVariable"") Activity activity)","0","-","-","-","-"
"6873","provideFoo","@Provides
    @ActivityLevel
    // Add an activity dependency to make sure Dagger adds this module to the correct component.
    static Foo provideFoo(@SuppressWarnings(""UnusedVariable"") Activity activity)","0","-","-","-","-"
"6874","provideFoo","@Provides
    @FragmentLevel
    static Foo provideFoo()","0","-","-","-","-"
"6875","provideFoo","@Provides
    @FragmentLevel
    // Add a fragment dependency to make sure Dagger adds this module to the correct component.
    static Bar provideFoo(@SuppressWarnings(""UnusedVariable"") Fragment fragment)","0","-","-","-","-"
"6876","provideFoo","@Provides
    @FragmentLevel
    // Add a fragment dependency to make sure Dagger adds this module to the correct component.
    static Foo provideFoo(@SuppressWarnings(""UnusedVariable"") Fragment fragment)","0","-","-","-","-"
"6877","testFoo","@Test
  public void testFoo()","0","-","-","-","-"
"6878","testBar","@Test
  public void testBar()","0","-","-","-","-"
"6879","getMyApplication","private static TestInstallInApp getMyApplication()","0","-","-","-","-"
"6880","testSingletonFooUsesTestInstallIn","@Test
  public void testSingletonFooUsesTestInstallIn()","0","-","-","-","-"
"6881","testSingletonBarUsesInstallIn","@Test
  public void testSingletonBarUsesInstallIn()","0","-","-","-","-"
"6882","testActivityFooUsesTestInstallIn","@Test
  public void testActivityFooUsesTestInstallIn()","0","-","-","-","-"
"6883","testActivityBarUsesInstallIn","@Test
  public void testActivityBarUsesInstallIn()","0","-","-","-","-"
"6884","testFragmentFooUsesTestInstallIn","@Test
  public void testFragmentFooUsesTestInstallIn()","0","-","-","-","-"
"6885","testFragmentBarUsesInstallIn","@Test
  public void testFragmentBarUsesInstallIn()","0","-","-","-","-"
"6886","getTestFragment","private TestFragment getTestFragment(FragmentActivity activity)","0","-","-","-","-"
"6887","testCannotCallInjectOnTestRule","@Test
  public void testCannotCallInjectOnTestRule() throws Exception","0","-","-","-","-"
"6888","verifyBaseInjection","@Test
  public void verifyBaseInjection()","0","-","-","-","-"
"6889","onCreate","@Override
    public void onCreate(@Nullable Bundle savedInstanceState)","0","-","-","-","-"
"6890","MyViewModel","@Inject
    MyViewModel(SavedStateHandle handle, Foo foo)","0","-","-","-","-"
"6891","Foo","@Inject
    Foo()","0","-","-","-","-"
"6892","Bar","@Inject
    Bar()","0","-","-","-","-"
"6893","provideString","@Provides
    @UsesComponentQualifier
    static String provideString()","0","-","-","-","-"
"6894","testInject","@Test
  public void testInject()","0","-","-","-","-"
"6895","testSubcomponent","@Test
  public void testSubcomponent()","0","-","-","-","-"
"6896","testUsesLocalComponent","@Test
  public void testUsesLocalComponent()","0","-","-","-","-"
"6897","defaultComponentName","public static String defaultComponentName()","0","-","-","-","-"
"6898","perTestComponentName","/**
   * Returns the name of a component that cannot use the default component. Does not handle deduping
   * if test class names clash.
   */
  public static String perTestComponentName(Object testInstance)","0","-","-","-","-"
"6899","perTestComponentNameWithDedupePrefix","/**
   * Returns the name of a component that cannot use the default component, including the expected
   * prefix applied by Hilt to dedupe clashing class names.
   */
  public static String perTestComponentNameWithDedupePrefix(
      String expectedPrefix, Object testInstance)","0","-","-","-","-"
"6900","UsesComponentHelper","private UsesComponentHelper()","0","-","-","-","-"
"6901","testInjection","@Test
  public void testInjection()","0","-","-","-","-"
"6902","bindValueString","@Named(TEST_QUALIFIER)
    String bindValueString();","0","-","-","-","-"
"6903","provideString","@Provides
    @MultiTestRootExternalModules.External
    static String provideString()","0","-","-","-","-"
"6904","provideString","@Provides
    @MultiTestRootExternalModules.External
    static Long provideString()","0","-","-","-","-"
"6905","provideBaz","@Provides
    static Baz provideBaz()","0","-","-","-","-"
"6906","provideQux","@Provides
    static Qux provideQux()","0","-","-","-","-"
"6907","provideInt","@Provides
    static int provideInt()","0","-","-","-","-"
"6908","provideString","@Provides
    static String provideString()","0","-","-","-","-"
"6909","provideLong","@Provides
      static long provideLong()","0","-","-","-","-"
"6910","Outer","private Outer()","0","-","-","-","-"
"6911","Foo","@Inject
    Foo(int value)","0","-","-","-","-"
"6912","Bar","Bar(String value)","0","-","-","-","-"
"6913","Baz","Baz(long value)","0","-","-","-","-"
"6914","provideBar","@Provides
    static Bar provideBar(String value)","0","-","-","-","-"
"6915","getBar","Bar getBar();","0","-","-","-","-"
"6916","getQux","Qux getQux();","0","-","-","-","-"
"6917","testInjectFromTestModule","@Test
  public void testInjectFromTestModule() throws Exception","0","-","-","-","-"
"6918","testInjectFromNestedTestModule","@Test
  public void testInjectFromNestedTestModule() throws Exception","0","-","-","-","-"
"6919","testInjectFromExternalAppModule","@Test
  public void testInjectFromExternalAppModule() throws Exception","0","-","-","-","-"
"6920","testInjectFromExternalActivityModule","@Test
  public void testInjectFromExternalActivityModule() throws Exception","0","-","-","-","-"
"6921","testInjectFromPkgPrivateTestModule","@Test
  public void testInjectFromPkgPrivateTestModule() throws Exception","0","-","-","-","-"
"6922","testLocalEntryPoint","@Test
  public void testLocalEntryPoint() throws Exception","0","-","-","-","-"
"6923","testLocalPkgPrivateEntryPoint","@Test
  public void testLocalPkgPrivateEntryPoint() throws Exception","0","-","-","-","-"
"6924","testAndroidEntryPoint","@Test
  public void testAndroidEntryPoint() throws Exception","0","-","-","-","-"
"6925","testMissingMultiTestRoot2EntryPoint","@Test
  public void testMissingMultiTestRoot2EntryPoint() throws Exception","0","-","-","-","-"
"6926","testBindValueFieldIsProvided","@Test
  public void testBindValueFieldIsProvided() throws Exception","0","-","-","-","-"
"6927","testBindValueIsMutable","@Test
  public void testBindValueIsMutable() throws Exception","0","-","-","-","-"
"6928","setupComponent","void setupComponent()","0","-","-","-","-"
"6929","getBinding","private static String getBinding()","0","-","-","-","-"
"6930","verifyObjectModule","@Test
  public void verifyObjectModule()","0","-","-","-","-"
"6931","memberInjectedViewModelWithSavedState","@Test
  public void memberInjectedViewModelWithSavedState()","0","-","-","-","-"
"6932","provideModel","@Provides
    static MyViewModel provideModel(FragmentActivity activity)","0","-","-","-","-"
"6933","foo","Foo foo();","0","-","-","-","-"
"6934","Foo","@Inject
    Foo()","0","-","-","-","-"
"6935","testEarlyComponentDoesNotExist","@Test
  public void testEarlyComponentDoesNotExist() throws Exception","0","-","-","-","-"
"6936","testEarlyEntryPointsWrongEntryPointFails","@Test
  public void testEarlyEntryPointsWrongEntryPointFails() throws Exception","0","-","-","-","-"
"6937","provideString","@Provides
    @TestQualifier
    static String provideString()","0","-","-","-","-"
"6938","TestModule","private TestModule()","0","-","-","-","-"
"6939","testInject","@Test
  public void testInject()","0","-","-","-","-"
"6940","testSubcomponent","@Test
  public void testSubcomponent()","0","-","-","-","-"
"6941","testUsesLocalComponent","@Test
  public void testUsesLocalComponent()","0","-","-","-","-"
"6942","memberInjectedViewModelWithSavedState","@Test
  public void memberInjectedViewModelWithSavedState()","0","-","-","-","-"
"6943","notYetMemberInjectedSuperActivity","@Test
  public void notYetMemberInjectedSuperActivity()","0","-","-","-","-"
"6944","onCreate","@Override
    protected void onCreate(Bundle savedInstanceState)","0","-","-","-","-"
"6945","provideModel","@Provides
    static MyViewModel provideModel(FragmentActivity activity)","0","-","-","-","-"
"6946","provideObject","@Provides
    static Object provideObject()","0","-","-","-","-"
"6947","MyViewModel","public MyViewModel(SavedStateHandle handle)","0","-","-","-","-"
"6948","TestView","TestView(Context context)","0","-","-","-","-"
"6949","TestWithFragmentBindingsView","TestWithFragmentBindingsView(Context context)","0","-","-","-","-"
"6950","TestViewModel","@Inject TestViewModel(String appBinding)","0","-","-","-","-"
"6951","onBind","@Override
    public IBinder onBind(Intent intent)","0","-","-","-","-"
"6952","TestIntentService","TestIntentService()","0","-","-","-","-"
"6953","onHandleIntent","@Override
    public void onHandleIntent(Intent intent)","0","-","-","-","-"
"6954","provideAppString","@Provides
    static String provideAppString()","0","-","-","-","-"
"6955","provideActivityString","@Provides
    @ActivityLevel
    static String provideActivityString()","0","-","-","-","-"
"6956","provideFragmentString","@Provides
    @FragmentLevel
    static String provideFragmentString()","0","-","-","-","-"
"6957","provideViewString","@Provides
    @ViewLevel
    static String provideViewString()","0","-","-","-","-"
"6958","activityFactoryFallsBackToBase","@Test
  public void activityFactoryFallsBackToBase()","0","-","-","-","-"
"6959","fragmentFactoryFallbsBackToBase","@Test
  public void fragmentFactoryFallbsBackToBase()","0","-","-","-","-"
"6960","TestHiltViewModel","@Inject
    TestHiltViewModel(String value)","0","-","-","-","-"
"6961","TestViewModel","public TestViewModel(String value)","0","-","-","-","-"
"6962","getDefaultViewModelProviderFactory","@SuppressWarnings(""unchecked"")
    @Override public ViewModelProvider.Factory getDefaultViewModelProviderFactory()","0","-","-","-","-"
"6963","create","@Override public <T extends ViewModel> T create(Class<T> clazz)","0","-","-","-","-"
"6964","getDefaultViewModelProviderFactory","@SuppressWarnings(""unchecked"")
    @Override public ViewModelProvider.Factory getDefaultViewModelProviderFactory()","0","-","-","-","-"
"6965","create","@Override public <T extends ViewModel> T create(Class<T> clazz)","0","-","-","-","-"
"6966","providesAppBinding","@Provides
    @ApplicationLevel
    static String providesAppBinding()","0","-","-","-","-"
"6967","provideCounter","@Provides
    @Singleton
    static AtomicLong provideCounter()","0","-","-","-","-"
"6968","provideCount","@Provides
    static Long provideCount(AtomicLong counter)","0","-","-","-","-"
"6969","providesActivityBinding","@Provides
    @ActivityLevel
    static String providesActivityBinding()","0","-","-","-","-"
"6970","providesFragmentBinding","@Provides
    @FragmentLevel
    static String providesFragmentBinding()","0","-","-","-","-"
"6971","providesServiceBinding","@Provides
    @ServiceLevel
    static String providesServiceBinding()","0","-","-","-","-"
"6972","onCreate","@Override
    public void onCreate(Bundle onSavedInstanceState)","0","-","-","-","-"
"6973","onAttach","@Override
    public void onAttach(Context context)","0","-","-","-","-"
"6974","onAttach","@Override
    public void onAttach(Activity activity)","0","-","-","-","-"
"6975","preInjectionAssert","private void preInjectionAssert()","0","-","-","-","-"
"6976","postInjectionAssert","private void postInjectionAssert()","0","-","-","-","-"
"6977","onAttach","@Override
    public void onAttach(Context context)","0","-","-","-","-"
"6978","onAttach","@Override
    public void onAttach(Activity activity)","0","-","-","-","-"
"6979","preInjectionAssert","private void preInjectionAssert()","0","-","-","-","-"
"6980","postInjectionAssert","private void postInjectionAssert()","0","-","-","-","-"
"6981","TestView","TestView(Context context)","0","-","-","-","-"
"6982","TestView","TestView(Context context, AttributeSet attrs)","0","-","-","-","-"
"6983","TestView","TestView(Context context, AttributeSet attrs, int defStyleAttr)","0","-","-","-","-"
"6984","TestView","@TargetApi(21)
    TestView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)","0","-","-","-","-"
"6985","TestViewWithFragmentBindings","TestViewWithFragmentBindings(Context context)","0","-","-","-","-"
"6986","onBind","@Override
    public IBinder onBind(Intent intent)","0","-","-","-","-"
"6987","TestIntentService","TestIntentService()","0","-","-","-","-"
"6988","onHandleIntent","@Override
    public void onHandleIntent(Intent intent)","0","-","-","-","-"
"6989","onReceive","@Override
    public void onReceive(Context context, Intent intent)","0","-","-","-","-"
"6990","onReceive","@Override
    public void onReceive(Context context, Intent intent)","0","-","-","-","-"
"6991","onReceive","@Override
    public void onReceive(Context context, Intent intent)","0","-","-","-","-"
"6992","setup","@Before
  public void setup()","0","-","-","-","-"
"6993","testAppInjection","@Test
  public void testAppInjection() throws Exception","0","-","-","-","-"
"6994","testActivityInjection","@Test
  public void testActivityInjection() throws Exception","0","-","-","-","-"
"6995","testFragmentInjection","@Test
  public void testFragmentInjection() throws Exception","0","-","-","-","-"
"6996","testParameterizedFragmentInjection","@Test
  public void testParameterizedFragmentInjection() throws Exception","0","-","-","-","-"
"6997","testViewNoFragmentBindingsWithActivity","@Test
  public void testViewNoFragmentBindingsWithActivity() throws Exception","0","-","-","-","-"
"6998","testViewNoFragmentBindingsWithFragment","@Test
  public void testViewNoFragmentBindingsWithFragment() throws Exception","0","-","-","-","-"
"6999","testViewNoFragmentBindingsWithFragment_secondConstructor","@Test
  public void testViewNoFragmentBindingsWithFragment_secondConstructor() throws Exception","0","-","-","-","-"
"7000","testViewNoFragmentBindingsWithFragment_thirdConstructor","@Test
  public void testViewNoFragmentBindingsWithFragment_thirdConstructor() throws Exception","0","-","-","-","-"
"7001","testViewNoFragmentBindingsWithFragment_fourthConstructor_presentOnTwentyOne","@Test
  @Config(sdk = 21)
  public void testViewNoFragmentBindingsWithFragment_fourthConstructor_presentOnTwentyOne()
      throws Exception","0","-","-","-","-"
"7002","testServiceInjection","@Test
  public void testServiceInjection() throws Exception","0","-","-","-","-"
"7003","testIntentServiceInjection","@Test
  public void testIntentServiceInjection() throws Exception","0","-","-","-","-"
"7004","testBroadcastReceiverInjection","@Test
  public void testBroadcastReceiverInjection() throws Exception","0","-","-","-","-"
"7005","testBroadcastReceiverWithBaseImplementingOnReceiveInjection","@Test
  public void testBroadcastReceiverWithBaseImplementingOnReceiveInjection() throws Exception","0","-","-","-","-"
"7006","testViewWithFragmentBindingsWithFragment","@Test
  public void testViewWithFragmentBindingsWithFragment() throws Exception","0","-","-","-","-"
"7007","testViewWithFragmentBindingsFailsWithActivity","@Test
  public void testViewWithFragmentBindingsFailsWithActivity() throws Exception","0","-","-","-","-"
"7008","testFragmentAttachedToNonHiltActivityFails","@Test
  public void testFragmentAttachedToNonHiltActivityFails() throws Exception","0","-","-","-","-"
"7009","testViewAttachedToNonHiltActivityFails","@Test
  public void testViewAttachedToNonHiltActivityFails() throws Exception","0","-","-","-","-"
"7010","testViewAttachedToNonHiltFragmentFails","@Test
  public void testViewAttachedToNonHiltFragmentFails() throws Exception","0","-","-","-","-"
"7011","testViewAttachedToApplicationContextFails","@Test
  public void testViewAttachedToApplicationContextFails() throws Exception","0","-","-","-","-"
"7012","onCreate","@Override
    public void onCreate(Bundle onSavedInstanceState)","0","-","-","-","-"
"7013","testActivityDoesNotInjectTwice","@Test
  public void testActivityDoesNotInjectTwice() throws Exception","0","-","-","-","-"
"7014","onAttach","@Override
    public void onAttach(Context context)","0","-","-","-","-"
"7015","onAttach","@Override
    public void onAttach(Activity activity)","0","-","-","-","-"
"7016","testFragmentDoesNotInjectTwice","@Test
  public void testFragmentDoesNotInjectTwice() throws Exception","0","-","-","-","-"
"7017","DoubleInjectView","DoubleInjectView(Context context)","0","-","-","-","-"
"7018","DoubleInjectView","DoubleInjectView(Context context, AttributeSet attrs)","0","-","-","-","-"
"7019","DoubleInjectView","DoubleInjectView(Context context, AttributeSet attrs, int defStyleAttr)","0","-","-","-","-"
"7020","DoubleInjectView","@TargetApi(21)
    DoubleInjectView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)","0","-","-","-","-"
"7021","testViewDoesNotInjectTwice","@Test
  public void testViewDoesNotInjectTwice() throws Exception","0","-","-","-","-"
"7022","onCreate","@Override public void onCreate()","0","-","-","-","-"
"7023","onBind","@Override
    public IBinder onBind(Intent intent)","0","-","-","-","-"
"7024","testServiceDoesNotInjectTwice","@Test
  public void testServiceDoesNotInjectTwice() throws Exception","0","-","-","-","-"
"7025","onReceive","@Override
    public void onReceive(Context context, Intent intent)","0","-","-","-","-"
"7026","testBroadcastReceiverDoesNotInjectTwice","@Test
  public void testBroadcastReceiverDoesNotInjectTwice() throws Exception","0","-","-","-","-"
"7027","setupFragment","private static <T extends Fragment> T setupFragment(
      Class<? extends FragmentActivity> activityClass, T fragment)","0","-","-","-","-"
"7028","attachFragment","private static void attachFragment(FragmentActivity activity, Fragment fragment)","0","-","-","-","-"
"7029","testActivityInjection","@Test
  public void testActivityInjection() throws Exception","0","-","-","-","-"
"7030","testNonOptionalSubclassActivityInjection","@Test
  public void testNonOptionalSubclassActivityInjection() throws Exception","0","-","-","-","-"
"7031","testOptionalSubclassActivityInjection","@Test
  public void testOptionalSubclassActivityInjection() throws Exception","0","-","-","-","-"
"7032","testFragmentInjection","@Test
  public void testFragmentInjection() throws Exception","0","-","-","-","-"
"7033","testFragmentInjectionWithNonHiltActivityWithHiltRoot","@Test
  public void testFragmentInjectionWithNonHiltActivityWithHiltRoot() throws Exception","0","-","-","-","-"
"7034","testViewInjection","@Test
  public void testViewInjection() throws Exception","0","-","-","-","-"
"7035","testViewInjectionWithNonHiltActivityWithHiltRoot","@Test
  public void testViewInjectionWithNonHiltActivityWithHiltRoot() throws Exception","0","-","-","-","-"
"7036","testViewWithFragmentBindingsInjection","@Test
  public void testViewWithFragmentBindingsInjection() throws Exception","0","-","-","-","-"
"7037","testViewWithFragmentBindingsInjectionWithNonHiltFragmentWithHiltRoot","@Test
  public void testViewWithFragmentBindingsInjectionWithNonHiltFragmentWithHiltRoot()
      throws Exception","0","-","-","-","-"
"7038","testHiltViewModels","@Test
  public void testHiltViewModels()","0","-","-","-","-"
"7039","testHiltViewModelsWithNonHiltActivityWithHiltRoot","@Test
  public void testHiltViewModelsWithNonHiltActivityWithHiltRoot() throws Exception","0","-","-","-","-"
"7040","testServiceInjection","@Test
  public void testServiceInjection() throws Exception","0","-","-","-","-"
"7041","testIntentServiceInjection","@Test
  public void testIntentServiceInjection() throws Exception","0","-","-","-","-"
"7042","testBroadcastReceiverInjection","@Test
  public void testBroadcastReceiverInjection() throws Exception","0","-","-","-","-"
"7043","testViewModelScopeInFragment","@Test
  public void testViewModelScopeInFragment()","0","-","-","-","-"
"7044","onCreate","@Override
    protected void onCreate(@Nullable Bundle savedInstanceState)","0","-","-","-","-"
"7045","onCreate","@Override
    public void onCreate(@Nullable Bundle bundle)","0","-","-","-","-"
"7046","MyViewModel","@Inject
    MyViewModel(DependsOnBarOne one, DependsOnBarTwo two, ViewModelLifecycle lifecycle)","0","-","-","-","-"
"7047","Bar","@Inject
    Bar()","0","-","-","-","-"
"7048","DependsOnBarOne","@Inject
    DependsOnBarOne(Bar bar)","0","-","-","-","-"
"7049","DependsOnBarTwo","@Inject
    DependsOnBarTwo(Bar bar)","0","-","-","-","-"
"7050","testInject","@Test
  public void testInject()","0","-","-","-","-"
"7051","testSubcomponent","@Test
  public void testSubcomponent()","0","-","-","-","-"
"7052","testActivity","@Test
  public void testActivity()","0","-","-","-","-"
"7053","testUsesSharedComponent","@Test
  public void testUsesSharedComponent()","0","-","-","-","-"
"7054","testLocalComponentNotGenerated","@Test
  public void testLocalComponentNotGenerated()","0","-","-","-","-"
"7055","EarlyEntryPointCustomApplicationClasses","private EarlyEntryPointCustomApplicationClasses()","0","-","-","-","-"
"7056","foo","Foo foo();","0","-","-","-","-"
"7057","Foo","@Inject
    Foo()","0","-","-","-","-"
"7058","testState","@Test
  public void testState()","0","-","-","-","-"
"7059","testInjection","@Test
  public void testInjection()","0","-","-","-","-"
"7060","Dep4","@Inject Dep4()","0","-","-","-","-"
"7061","Dep5","@Inject Dep5()","0","-","-","-","-"
"7062","TestModule1","private TestModule1()","0","-","-","-","-"
"7063","provide","@Provides
    static Dep1 provide()","0","-","-","-","-"
"7064","TestModule2","TestModule2(String str)","0","-","-","-","-"
"7065","provide","@Provides
    static Dep2 provide()","0","-","-","-","-"
"7066","TestModule3","TestModule3()","0","-","-","-","-"
"7067","TestModule3","TestModule3(String str)","0","-","-","-","-"
"7068","provide","@Provides
    Dep3 provide()","0","-","-","-","-"
"7069","TestModule4","private TestModule4()","0","-","-","-","-"
"7070","bind","@Binds @Named(""Dep4"") abstract Object bind(Dep4 impl);","0","-","-","-","-"
"7071","TestModule5","TestModule5(String str)","0","-","-","-","-"
"7072","bind","@Binds @Named(""Dep5"") abstract Object bind(Dep5 impl);","0","-","-","-","-"
"7073","TestModule6","private TestModule6()","0","-","-","-","-"
"7074","TestModule7","TestModule7(String str)","0","-","-","-","-"
"7075","TestModule8","private TestModule8()","0","-","-","-","-"
"7076","TestModule9","TestModule9(String str)","0","-","-","-","-"
"7077","setup","@Before
  public void setup()","0","-","-","-","-"
"7078","testDep1","@Test
  public void testDep1() throws Exception","0","-","-","-","-"
"7079","testDep2","@Test
  public void testDep2() throws Exception","0","-","-","-","-"
"7080","testDep3","@Test
  public void testDep3() throws Exception","0","-","-","-","-"
"7081","testDep4","@Test
  public void testDep4() throws Exception","0","-","-","-","-"
"7082","testDep5","@Test
  public void testDep5() throws Exception","0","-","-","-","-"
"7083","checkGeneratedClassHierarchy_shortForm","@Test
  public void checkGeneratedClassHierarchy_shortForm() throws Exception","0","-","-","-","-"
"7084","checkGeneratedClassHierarchy_longForm","@Test
  public void checkGeneratedClassHierarchy_longForm() throws Exception","0","-","-","-","-"
"7085","checkGeneratedClassHierarchy_shortFormRoot","@Test
  public void checkGeneratedClassHierarchy_shortFormRoot() throws Exception","0","-","-","-","-"
"7086","checkGeneratedClassHierarchy_longFormRoot","@Test
  public void checkGeneratedClassHierarchy_longFormRoot() throws Exception","0","-","-","-","-"
"7087","assertIsNotAssignableTo","/** Asserts that the","0","-","-","-","-"
"7088","assertIsAssignableTo","/** Asserts that the","0","-","-","-","-"
"7089","TestView","TestView(Context context)","0","-","-","-","-"
"7090","onBind","@Override
    public IBinder onBind(Intent intent)","0","-","-","-","-"
"7091","TestIntentService","public TestIntentService()","0","-","-","-","-"
"7092","onHandleIntent","@Override
    public void onHandleIntent(Intent intent)","0","-","-","-","-"
"7093","setup","@Before
  public void setup()","0","-","-","-","-"
"7094","testActivityFragmentView","@Test
  public void testActivityFragmentView() throws Exception","0","-","-","-","-"
"7095","testServices","@Test
  public void testServices() throws Exception","0","-","-","-","-"
"7096","testBroadcastReceiver","@Test
  public void testBroadcastReceiver() throws Exception","0","-","-","-","-"
"7097","Foo","@Inject
    Foo(int id)","0","-","-","-","-"
"7098","id","@BindsInstance
      Builder id(int id);","0","-","-","-","-"
"7099","build","UsesComponentTestSubcomponent build();","0","-","-","-","-"
"7100","mySubcomponentBuilder","UsesComponentTestSubcomponent.Builder mySubcomponentBuilder();","0","-","-","-","-"
"7101","foo","Foo foo();","0","-","-","-","-"
"7102","UsesComponentTestClasses","private UsesComponentTestClasses()","0","-","-","-","-"
"7103","EarlyEntryPointHiltAndroidTestRuntimeClasses","private EarlyEntryPointHiltAndroidTestRuntimeClasses()","0","-","-","-","-"
"7104","foo","Foo foo();","0","-","-","-","-"
"7105","mySubcomponentBuilder","MySubcomponent.Builder mySubcomponentBuilder();","0","-","-","-","-"
"7106","id","@BindsInstance
      Builder id(int id);","0","-","-","-","-"
"7107","build","MySubcomponent build();","0","-","-","-","-"
"7108","mySubcomponentBuilder","MySubcomponent.Builder mySubcomponentBuilder();","0","-","-","-","-"
"7109","bar","Bar bar();","0","-","-","-","-"
"7110","BaseActivity","public BaseActivity()","0","-","-","-","-"
"7111","BaseActivity","BaseActivity(int unused)","0","-","-","-","-"
"7112","BaseFragment","public BaseFragment()","0","-","-","-","-"
"7113","BaseFragment","BaseFragment(int unused)","0","-","-","-","-"
"7114","BaseView","public BaseView(Context context)","0","-","-","-","-"
"7115","BaseView","public BaseView(Context context, AttributeSet attrs)","0","-","-","-","-"
"7116","BaseView","public BaseView(Context context, AttributeSet attrs, int defStyleAttr)","0","-","-","-","-"
"7117","BaseView","BaseView(Context context, int unused)","0","-","-","-","-"
"7118","BaseService","public BaseService()","0","-","-","-","-"
"7119","BaseService","BaseService(int unused)","0","-","-","-","-"
"7120","BaseIntentService","public BaseIntentService(String name)","0","-","-","-","-"
"7121","BaseIntentService","BaseIntentService(String name, int unused)","0","-","-","-","-"
"7122","BaseBroadcastReceiver","public BaseBroadcastReceiver()","0","-","-","-","-"
"7123","BaseBroadcastReceiver","BaseBroadcastReceiver(int unused)","0","-","-","-","-"
"7124","testInject","@Test
  public void testInject()","0","-","-","-","-"
"7125","testSubcomponent","@Test
  public void testSubcomponent()","0","-","-","-","-"
"7126","testActivity","@Test
  public void testActivity()","0","-","-","-","-"
"7127","testUsesSharedComponent","@Test
  public void testUsesSharedComponent()","0","-","-","-","-"
"7128","testLocalComponentNotGenerated","@Test
  public void testLocalComponentNotGenerated()","0","-","-","-","-"
"7129","provideString","@Provides
    @TestQualifier
    static String provideString()","0","-","-","-","-"
"7130","TestModule","private TestModule()","0","-","-","-","-"
"7131","testInject","@Test
  public void testInject()","0","-","-","-","-"
"7132","testSubcomponent","@Test
  public void testSubcomponent()","0","-","-","-","-"
"7133","testUsesLocalComponent","@Test
  public void testUsesLocalComponent()","0","-","-","-","-"
"7134","testComponentDependsOnGeneratedCode","@Test public void testComponentDependsOnGeneratedCode()","0","-","-","-","-"
"7135","InjectsProviderOfFactory","@Inject
    InjectsProviderOfFactory(
        Provider<NeedsProviderOfFactory_SomethingFactory> somethingFactoryProvider,
        Provider<SomethingFactoryImpl> somethingFactoryImplProvider)","0","-","-","-","-"
"7136","injectsProviderOfFactory","InjectsProviderOfFactory injectsProviderOfFactory();","0","-","-","-","-"
"7137","SomethingFactoryImpl","@Inject SomethingFactoryImpl()","0","-","-","-","-"
"7138","needsFactory","NeedsFactory needsFactory();","0","-","-","-","-"
"7139","somethingFactory","NeedsFactory_SomethingFactory somethingFactory();","0","-","-","-","-"
"7140","NeedsFactory","@Inject
  NeedsFactory(
      @SuppressWarnings(""unused"") NeedsFactory_SomethingFactory somethingFactory,
      @SuppressWarnings(""unused"") SomethingFactoryImpl somethingFactoryImpl)","0","-","-","-","-"
"7141","SomethingFactoryImpl","@Inject SomethingFactoryImpl()","0","-","-","-","-"
"7142","setUp","@Before
  public void setUp()","0","-","-","-","-"
"7143","optional","@Test
  public void optional()","0","-","-","-","-"
"7144","optionalProvider","@Test
  public void optionalProvider()","0","-","-","-","-"
"7145","optionalLazy","@Test
  public void optionalLazy()","0","-","-","-","-"
"7146","optionalLazyProvider","@Test
  public void optionalLazyProvider()","0","-","-","-","-"
"7147","qualifiedOptional","@Test
  public void qualifiedOptional()","0","-","-","-","-"
"7148","qualifiedOptionalProvider","@Test
  public void qualifiedOptionalProvider()","0","-","-","-","-"
"7149","qualifiedOptionalLazy","@Test
  public void qualifiedOptionalLazy()","0","-","-","-","-"
"7150","qualifiedOptionalLazyProvider","@Test
  public void qualifiedOptionalLazyProvider()","0","-","-","-","-"
"7151","components","@Test
  public void components()","0","-","-","-","-"
"7152","parameters","@Parameters(name = ""","0","-","-","-","-"
"7153","OptionalBindingComponentsPresentTest","public OptionalBindingComponentsPresentTest(OptionalBindingComponent component)","0","-","-","-","-"
"7154","optionalProvider","@Test
  public void optionalProvider()","0","-","-","-","-"
"7155","optionalLazy","@Test
  public void optionalLazy()","0","-","-","-","-"
"7156","optionalLazyProvider","@Test
  public void optionalLazyProvider()","0","-","-","-","-"
"7157","qualifiedOptional","@Test
  public void qualifiedOptional()","0","-","-","-","-"
"7158","qualifiedOptionalProvider","@Test
  public void qualifiedOptionalProvider()","0","-","-","-","-"
"7159","qualifiedOptionalLazy","@Test
  public void qualifiedOptionalLazy()","0","-","-","-","-"
"7160","qualifiedOptionalLazyProvider","@Test
  public void qualifiedOptionalLazyProvider()","0","-","-","-","-"
"7161","optionalNullableProvider","@Test
  public void optionalNullableProvider()","0","-","-","-","-"
"7162","optionalNullableLazy","@Test
  public void optionalNullableLazy()","0","-","-","-","-"
"7163","optionalNullableLazyProvider","@Test
  public void optionalNullableLazyProvider()","0","-","-","-","-"
"7164","optionalInstance","abstract Optional<Value> optionalInstance();","0","-","-","-","-"
"7165","optionalProvider","abstract Optional<Provider<Value>> optionalProvider();","0","-","-","-","-"
"7166","optionalLazy","abstract Optional<Lazy<Value>> optionalLazy();","0","-","-","-","-"
"7167","optionalLazyProvider","abstract Optional<Provider<Lazy<Value>>> optionalLazyProvider();","0","-","-","-","-"
"7168","InjectedThing","@Inject
    InjectedThing()","0","-","-","-","-"
"7169","value","@BindsOptionalOf
    abstract Value value();","0","-","-","-","-"
"7170","qualifiedValue","@BindsOptionalOf
    @SomeQualifier abstract Value qualifiedValue();","0","-","-","-","-"
"7171","qualifiedInjectedThing","@BindsOptionalOf
    @SomeQualifier abstract InjectedThing qualifiedInjectedThing();","0","-","-","-","-"
"7172","nullableObject","@BindsOptionalOf
    abstract Object nullableObject();","0","-","-","-","-"
"7173","values","@Provides
    static Values values(
        Optional<Value> optionalInstance,
        Optional<Provider<Value>> optionalProvider,
        Optional<Lazy<Value>> optionalLazy,
        Optional<Provider<Lazy<Value>>> optionalLazyProvider)","0","-","-","-","-"
"7174","qualifiedValues","@Provides
    @SomeQualifier
    static Values qualifiedValues(
        @SomeQualifier Optional<Value> optionalInstance,
        @SomeQualifier Optional<Provider<Value>> optionalProvider,
        @SomeQualifier Optional<Lazy<Value>> optionalLazy,
        @SomeQualifier Optional<Provider<Lazy<Value>>> optionalLazyProvider)","0","-","-","-","-"
"7175","value","/** @param cycle to demonstrate that optional","0","-","-","-","-"
"7176","qualifiedValue","@Provides
    @SomeQualifier static Value qualifiedValue()","0","-","-","-","-"
"7177","nullableObject","@Provides
    @Nullable
    static Object nullableObject()","0","-","-","-","-"
"7178","values","Values values();","0","-","-","-","-"
"7179","qualifiedValues","@SomeQualifier
    Values qualifiedValues();","0","-","-","-","-"
"7180","optionalNullableProvider","Optional<Provider<Object>> optionalNullableProvider();","0","-","-","-","-"
"7181","optionalNullableLazy","Optional<Lazy<Object>> optionalNullableLazy();","0","-","-","-","-"
"7182","optionalNullableLazyProvider","Optional<Provider<Lazy<Object>>> optionalNullableLazyProvider();","0","-","-","-","-"
"7183","presentChild","PresentOptionalBindingSubcomponent presentChild();","0","-","-","-","-"
"7184","list","ListenableFuture<List<String>> list();","0","-","-","-","-"
"7185","list","@Produces
    List<T> list(T t, String string)","0","-","-","-","-"
"7186","string","@Produces
    static String string()","0","-","-","-","-"
"7187","numGreetings","ListenableFuture<Integer> numGreetings();","0","-","-","-","-"
"7188","entryPoint1","@Named(""ep1"")
  ListenableFuture<String> entryPoint1();","0","-","-","-","-"
"7189","entryPoint2","@Named(""ep2"")
  Producer<String> entryPoint2();","0","-","-","-","-"
"7190","entryPoint3","@Named(""ep3"")
  ListenableFuture<String> entryPoint3();","0","-","-","-","-"
"7191","subcomponentBuilder","CancellationSubcomponent.Builder subcomponentBuilder();","0","-","-","-","-"
"7192","module","Builder module(CancellationModule module);","0","-","-","-","-"
"7193","dependency","Builder dependency(Dependency dependency);","0","-","-","-","-"
"7194","executor","@BindsInstance
    Builder executor(@Production Executor executor);","0","-","-","-","-"
"7195","build","CancellationComponent build();","0","-","-","-","-"
"7196","Dependency","Dependency(ProducerTester tester)","0","-","-","-","-"
"7197","getDependencyFuture","@SuppressWarnings(""unused"") // Dagger uses it
    ListenableFuture<String> getDependencyFuture()","0","-","-","-","-"
"7198","CancellationSubcomponentModule","CancellationSubcomponentModule(ProducerTester tester)","0","-","-","-","-"
"7199","produceSubLeaf","@Produces
  @Named(""subLeaf"")
  ListenableFuture<String> produceSubLeaf()","0","-","-","-","-"
"7200","produceSubTask1","@Produces
  @Named(""subTask1"")
  ListenableFuture<String> produceSubTask1(
      @Named(""subLeaf"") String subLeaf, @Named(""qux"") String qux)","0","-","-","-","-"
"7201","produceSubTask2","@Produces
  @Named(""subTask2"")
  ListenableFuture<String> produceSubTask2(@Named(""foo"") String foo, Producer<String> dependency)","0","-","-","-","-"
"7202","produceSubEntryPoint","@Produces
  @Named(""subEntryPoint"")
  ListenableFuture<String> produceSubEntryPoint(
      @Named(""subTask1"") String subTask1, @Named(""subTask2"") String subTask2)","0","-","-","-","-"
"7203","CancellationModule","CancellationModule(ProducerTester tester)","0","-","-","-","-"
"7204","produceLeaf1","@Produces
  @Named(""leaf1"")
  ListenableFuture<String> produceLeaf1()","0","-","-","-","-"
"7205","produceLeaf2","@Produces
  @Named(""leaf2"")
  ListenableFuture<String> produceLeaf2()","0","-","-","-","-"
"7206","produceLeaf3","@Produces
  @Named(""leaf3"")
  ListenableFuture<String> produceLeaf3()","0","-","-","-","-"
"7207","produceFoo","@Produces
  @Named(""foo"")
  ListenableFuture<String> produceFoo(@Named(""leaf1"") String leaf1, @Named(""leaf2"") String leaf2)","0","-","-","-","-"
"7208","produceBar","@Produces
  @Named(""bar"")
  ListenableFuture<String> produceBar(@Named(""leaf2"") String leaf2, @Named(""leaf3"") String leaf3)","0","-","-","-","-"
"7209","produceBaz","@Produces
  @Named(""baz"")
  ListenableFuture<String> produceBaz(
      @Named(""foo"") Producer<String> foo, @Named(""bar"") String bar)","0","-","-","-","-"
"7210","provideProvidesDep","@Provides
  @Named(""providesDep"")
  static String provideProvidesDep()","0","-","-","-","-"
"7211","produceQux","@Produces
  @Named(""qux"")
  ListenableFuture<String> produceQux(
      @Named(""baz"") String baz, @Named(""providesDep"") String providesDep)","0","-","-","-","-"
"7212","produceEntryPoint1","@Produces
  @Named(""ep1"")
  ListenableFuture<String> produceEntryPoint1(@Named(""qux"") String qux)","0","-","-","-","-"
"7213","produceEntryPoint2","@Produces
  @Named(""ep2"")
  ListenableFuture<String> produceEntryPoint2(@Named(""bar"") String bar, String dependency)","0","-","-","-","-"
"7214","produceEntryPoint3","@Produces
  @Named(""ep3"")
  static ListenableFuture<String> produceEntryPoint3(Producer<String> dependencyProducer)","0","-","-","-","-"
"7215","initialState","@Test
  public void initialState()","0","-","-","-","-"
"7216","cancellingSubcomponent_doesNotCancelParent","@Test
  public void cancellingSubcomponent_doesNotCancelParent() throws Exception","0","-","-","-","-"
"7217","cancellingSubcomponent_preventsUnstartedNodesFromStarting","@Test
  public void cancellingSubcomponent_preventsUnstartedNodesFromStarting()","0","-","-","-","-"
"7218","cancellingProducerFromComponentDependency_inSubcomponent_cancelsUnderlyingTask","@Test
  public void cancellingProducerFromComponentDependency_inSubcomponent_cancelsUnderlyingTask()
      throws Exception","0","-","-","-","-"
"7219","initialState","@Test
  public void initialState()","0","-","-","-","-"
"7220","cancellingOneEntryPoint_cancelsAllRunningNodes","@Test
  public void cancellingOneEntryPoint_cancelsAllRunningNodes()","0","-","-","-","-"
"7221","cancellingNonEntryPointProducer_doesNotCancelUnderlyingTask","@SuppressWarnings(","0","-","-","-","-"
"7222","cancellingProducerFromComponentDependency_cancelsUnderlyingTask","@SuppressWarnings(","0","-","-","-","-"
"7223","ParentModule","ParentModule(ProducerTester tester)","0","-","-","-","-"
"7224","produceA","@Produces
    @Named(""a"")
    ListenableFuture<String> produceA()","0","-","-","-","-"
"7225","a","@Named(""a"")
    ListenableFuture<String> a();","0","-","-","-","-"
"7226","childBuilder","Child.Builder childBuilder();","0","-","-","-","-"
"7227","module","B module(ParentModule module);","0","-","-","-","-"
"7228","executor","@BindsInstance
      B executor(@Production Executor executor);","0","-","-","-","-"
"7229","build","P build();","0","-","-","-","-"
"7230","ChildModule","ChildModule(ProducerTester tester)","0","-","-","-","-"
"7231","b","@Produces
    @Named(""b"")
    ListenableFuture<String> b(@Named(""a"") String a)","0","-","-","-","-"
"7232","b","@Named(""b"")
    ListenableFuture<String> b();","0","-","-","-","-"
"7233","module","Builder module(ChildModule module);","0","-","-","-","-"
"7234","build","Child build();","0","-","-","-","-"
"7235","propagatingParent_childCancellationPropagatesToParent","@Test
  public void propagatingParent_childCancellationPropagatesToParent()","0","-","-","-","-"
"7236","nonPropagatingParent_childCancellationDoesNotPropagateToParent","@Test
  public void nonPropagatingParent_childCancellationDoesNotPropagateToParent() throws Exception","0","-","-","-","-"
"7237","subcomponentEntryPoint","@Named(""subEntryPoint"")
  ListenableFuture<String> subcomponentEntryPoint();","0","-","-","-","-"
"7238","module","Builder module(CancellationSubcomponentModule module);","0","-","-","-","-"
"7239","build","CancellationSubcomponent build();","0","-","-","-","-"
"7240","start","/** Starts the given node. */
  ListenableFuture<String> start(String node)","0","-","-","-","-"
"7241","getOrCreate","private TestFuture getOrCreate(String node)","0","-","-","-","-"
"7242","isStarted","/** Returns whether or not the given node has been started. */
  boolean isStarted(String node)","0","-","-","-","-"
"7243","complete","/** Completes of the given nodes. */
  void complete(String... nodes)","0","-","-","-","-"
"7244","isCancelled","/** Returns whether or not the given node has been cancelled. */
  boolean isCancelled(String node)","0","-","-","-","-"
"7245","assertStarted","/** Asserts that the given nodes have been started. */
  Only assertStarted(String... nodes)","0","-","-","-","-"
"7246","assertCancelled","/** Asserts that the given nodes have been cancelled. */
  Only assertCancelled(String... nodes)","0","-","-","-","-"
"7247","assertNotStarted","/** Asserts that the given nodes have not been started. */
  Only assertNotStarted(String... nodes)","0","-","-","-","-"
"7248","assertNotCancelled","/** Asserts that the given nodes have not been cancelled. */
  Only assertNotCancelled(String... nodes)","0","-","-","-","-"
"7249","assertNoStartedNodes","/** Asserts that no nodes in this tester have been started. */
  void assertNoStartedNodes()","0","-","-","-","-"
"7250","assertAboutNodes","private Only assertAboutNodes(Predicate<? super TestFuture> assertion, String... nodes)","0","-","-","-","-"
"7251","Only","Only(ImmutableSet<TestFuture> expected, Predicate<? super TestFuture> assertion)","0","-","-","-","-"
"7252","only","/**
     * Asserts that the previous assertion was not true for any node other than those that were
     * specified.
     */
    void only()","0","-","-","-","-"
"7253","TestFuture","private TestFuture(String name)","0","-","-","-","-"
"7254","start","/** Marks this future as having been started and returns it. */
    TestFuture start()","0","-","-","-","-"
"7255","isStarted","/** Returns whether or not this future's task was started. */
    boolean isStarted()","0","-","-","-","-"
"7256","complete","/** Completes this future's task by setting a value for it. */
    public void complete()","0","-","-","-","-"
"7257","toString","@Override
    public String toString()","0","-","-","-","-"
"7258","test","@Override
        public boolean test(TestFuture future)","0","-","-","-","-"
"7259","toString","@Override
        public String toString()","0","-","-","-","-"
"7260","test","@Override
        public boolean test(TestFuture future)","0","-","-","-","-"
"7261","toString","@Override
        public String toString()","0","-","-","-","-"
"7262","not","/** Version of Predicates.not with a toString() that's nicer for our assertion error messages. */
  private static <T> Predicate<T> not(final Predicate<T> predicate)","0","-","-","-","-"
"7263","test","@Override
      public boolean test(T input)","0","-","-","-","-"
"7264","toString","@Override
      public String toString()","0","-","-","-","-"
"7265","greetings","ListenableFuture<List<String>> greetings();","0","-","-","-","-"
"7266","futureStr","@Produces
  @IntoSet
  static ListenableFuture<String> futureStr()","0","-","-","-","-"
"7267","str","@Produces
  @IntoSet
  static String str()","0","-","-","-","-"
"7268","futureStrs","@Produces
  @ElementsIntoSet
  static ListenableFuture<Set<String>> futureStrs()","0","-","-","-","-"
"7269","strFutures","@Produces
  @ElementsIntoSet
  static Set<ListenableFuture<String>> strFutures()","0","-","-","-","-"
"7270","strs","@Produces
  @ElementsIntoSet
  static Set<String> strs()","0","-","-","-","-"
"7271","strCount","@Produces
  static int strCount(Set<String> strs)","0","-","-","-","-"
"7272","successfulStringForSet","@Produces
  @IntoSet
  @PossiblyThrowingSet
  static String successfulStringForSet()","0","-","-","-","-"
"7273","successfulStringsForSet","@Produces
  @ElementsIntoSet
  @PossiblyThrowingSet
  static Set<String> successfulStringsForSet()","0","-","-","-","-"
"7274","throwingStringForSet","@Produces
  @IntoSet
  @PossiblyThrowingSet
  static String throwingStringForSet()","0","-","-","-","-"
"7275","futureFor42","@Produces
  @IntoMap
  @IntKey(42)
  static ListenableFuture<String> futureFor42()","0","-","-","-","-"
"7276","valueFor15","@Produces
  @IntoMap
  @IntKey(15)
  static String valueFor15()","0","-","-","-","-"
"7277","successfulFutureFor42","@Produces
  @IntoMap
  @PossiblyThrowingMap
  @IntKey(42)
  static ListenableFuture<String> successfulFutureFor42()","0","-","-","-","-"
"7278","throwingValueFor15","@Produces
  @IntoMap
  @PossiblyThrowingMap
  @IntKey(15)
  static String throwingValueFor15()","0","-","-","-","-"
"7279","produceName","@Produces
  @IntoMap
  @LazyClassKey(Foo.class)
  static String produceName()","0","-","-","-","-"
"7280","objs","@Multibinds
  abstract Set<Object> objs();","0","-","-","-","-"
"7281","objMap","@Multibinds
  abstract Map<Object, Object> objMap();","0","-","-","-","-"
"7282","objCount","@Produces
  @ObjCount
  static int objCount(Set<Produced<Object>> objs, Map<Object, Produced<Object>> objMap)","0","-","-","-","-"
"7283","emptyButDeclaredInModuleAndProducerModule","@Multibinds
  @EmptyButDeclaredInModuleAndProducerModule
  abstract Map<String, Object> emptyButDeclaredInModuleAndProducerModule();","0","-","-","-","-"
"7284","strs","ListenableFuture<Set<String>> strs();","0","-","-","-","-"
"7285","strCount","ListenableFuture<Integer> strCount();","0","-","-","-","-"
"7286","successfulSet","ListenableFuture<Set<Produced<String>>> successfulSet();","0","-","-","-","-"
"7287","possiblyThrowingSet","@PossiblyThrowingSet
  ListenableFuture<Set<Produced<String>>> possiblyThrowingSet();","0","-","-","-","-"
"7288","map","ListenableFuture<Map<Integer, String>> map();","0","-","-","-","-"
"7289","mapOfProducer","ListenableFuture<Map<Integer, Producer<String>>> mapOfProducer();","0","-","-","-","-"
"7290","mapOfProduced","ListenableFuture<Map<Integer, Produced<String>>> mapOfProduced();","0","-","-","-","-"
"7291","lazyClassKeyMapOfProduced","ListenableFuture<Map<Class<?>, Produced<String>>> lazyClassKeyMapOfProduced();","0","-","-","-","-"
"7292","lazyClassKeyMapOfString","ListenableFuture<Map<Class<?>, String>> lazyClassKeyMapOfString();","0","-","-","-","-"
"7293","lazyClassKeyMapOfProducer","ListenableFuture<Map<Class<?>, Producer<String>>> lazyClassKeyMapOfProducer();","0","-","-","-","-"
"7294","possiblyThrowingMap","@PossiblyThrowingMap
  ListenableFuture<Map<Integer, String>> possiblyThrowingMap();","0","-","-","-","-"
"7295","possiblyThrowingMapOfProducer","@PossiblyThrowingMap
  ListenableFuture<Map<Integer, Producer<String>>> possiblyThrowingMapOfProducer();","0","-","-","-","-"
"7296","possiblyThrowingMapOfProduced","@PossiblyThrowingMap
  ListenableFuture<Map<Integer, Produced<String>>> possiblyThrowingMapOfProduced();","0","-","-","-","-"
"7297","objs","ListenableFuture<Set<Object>> objs();","0","-","-","-","-"
"7298","producedObjs","ListenableFuture<Set<Produced<Object>>> producedObjs();","0","-","-","-","-"
"7299","objMap","ListenableFuture<Map<Object, Object>> objMap();","0","-","-","-","-"
"7300","objMapOfProduced","ListenableFuture<Map<Object, Produced<Object>>> objMapOfProduced();","0","-","-","-","-"
"7301","objMapOfProducer","ListenableFuture<Map<Object, Producer<Object>>> objMapOfProducer();","0","-","-","-","-"
"7302","objCount","@ObjCount
  ListenableFuture<Integer> objCount();","0","-","-","-","-"
"7303","emptyButDeclaredInModuleAndProducerModule","@EmptyButDeclaredInModuleAndProducerModule
  ListenableFuture<Map<String, Object>> emptyButDeclaredInModuleAndProducerModule();","0","-","-","-","-"
"7304","emptyButDeclaredInModule","@EmptyButDeclaredInModule
  ListenableFuture<Map<String, Object>> emptyButDeclaredInModule();","0","-","-","-","-"
"7305","onlyProvisionMultibindings","@OnlyProvisionMultibindings
  ListenableFuture<Map<String, Object>> onlyProvisionMultibindings();","0","-","-","-","-"
"7306","Qualifiers","private Qualifiers()","0","-","-","-","-"
"7307","setBinding","@Test
  public void setBinding() throws Exception","0","-","-","-","-"
"7308","setBindingOfProduced","@Test
  public void setBindingOfProduced() throws Exception","0","-","-","-","-"
"7309","setBindingOfProducedWithFailures","@Test
  public void setBindingOfProducedWithFailures() throws Exception","0","-","-","-","-"
"7310","mapBinding","@Test
  public void mapBinding() throws Exception","0","-","-","-","-"
"7311","mapOfProducerBinding","@Test
  public void mapOfProducerBinding() throws Exception","0","-","-","-","-"
"7312","mapOfProducedBinding","@Test
  public void mapOfProducedBinding() throws Exception","0","-","-","-","-"
"7313","mapBindingWithFailures","@Test
  public void mapBindingWithFailures() throws Exception","0","-","-","-","-"
"7314","mapOfProducerBindingWithFailures","@Test
  public void mapOfProducerBindingWithFailures() throws Exception","0","-","-","-","-"
"7315","mapOfProducedBindingWithFailures","@Test
  public void mapOfProducedBindingWithFailures() throws Exception","0","-","-","-","-"
"7316","emptySet","@Test
  public void emptySet() throws Exception","0","-","-","-","-"
"7317","emptyMap","@Test
  public void emptyMap() throws Exception","0","-","-","-","-"
"7318","providedStr","@Provides
  @IntoSet
  static String providedStr()","0","-","-","-","-"
"7319","providedStrs","@Provides
  @ElementsIntoSet
  static Set<String> providedStrs()","0","-","-","-","-"
"7320","providedValueFor3","@Provides
  @IntoMap
  @IntKey(3)
  static String providedValueFor3()","0","-","-","-","-"
"7321","emptyButDeclaredInModuleAndProducerModule","@Multibinds
  @EmptyButDeclaredInModuleAndProducerModule
  abstract Map<String, Object> emptyButDeclaredInModuleAndProducerModule();","0","-","-","-","-"
"7322","emptyButDeclaredInModule","@Multibinds
  @EmptyButDeclaredInModule
  abstract Map<String, Object> emptyButDeclaredInModule();","0","-","-","-","-"
"7323","onlyProvisionMultibindings","@Provides
  @IntoMap
  @StringKey(""a"")
  @OnlyProvisionMultibindings
  static Object onlyProvisionMultibindings()","0","-","-","-","-"
"7324","ExecutorModule","public ExecutorModule()","0","-","-","-","-"
"7325","ExecutorModule","public ExecutorModule(Executor executor)","0","-","-","-","-"
"7326","executor","@Provides
  @Production
  Executor executor()","0","-","-","-","-"
"7327","provideExecutor","@Provides
    @Production
    static Executor provideExecutor()","0","-","-","-","-"
"7328","produceString","@Produces
    static String produceString()","0","-","-","-","-"
"7329","string","ListenableFuture<String> string();","0","-","-","-","-"
"7330","getString","ListenableFuture<String> getString();","0","-","-","-","-"
"7331","getString","ListenableFuture<String> getString();","0","-","-","-","-"
"7332","getString","ListenableFuture<String> getString();","0","-","-","-","-"
"7333","dep","Builder dep(Merged dep);","0","-","-","-","-"
"7334","build","TestProductionComponent build();","0","-","-","-","-"
"7335","testSameMethodTwiceProduction","@Test
  public void testSameMethodTwiceProduction() throws Exception","0","-","-","-","-"
"7336","getString","ListenableFuture<?> getString();","0","-","-","-","-"
"7337","getString","ListenableFuture<?> getString();","0","-","-","-","-"
"7338","getString","@Override
    ListenableFuture<String> getString();","0","-","-","-","-"
"7339","getString","ListenableFuture<String> getString();","0","-","-","-","-"
"7340","dep","Builder dep(MergedOverride dep);","0","-","-","-","-"
"7341","build","TestOverrideComponent build();","0","-","-","-","-"
"7342","testPolymorphicOverridesStillCompiles","@Test
  public void testPolymorphicOverridesStillCompiles() throws Exception","0","-","-","-","-"
"7343","Response","Response(String data)","0","-","-","-","-"
"7344","data","String data()","0","-","-","-","-"
"7345","childComponentBuilder","ChildComponent.Builder childComponentBuilder();","0","-","-","-","-"
"7346","i","@Provides
    static int i()","0","-","-","-","-"
"7347","MultiPackageSubcomponents","private MultiPackageSubcomponents()","0","-","-","-","-"
"7348","CountingExecutor","CountingExecutor(AtomicInteger executionCount)","0","-","-","-","-"
"7349","execute","@Override
    public void execute(Runnable runnable)","0","-","-","-","-"
"7350","ExecutorModule","ExecutorModule(AtomicInteger constructionCount, AtomicInteger executionCount)","0","-","-","-","-"
"7351","executor","@Provides
    @Production
    Executor executor()","0","-","-","-","-"
"7352","fromParent","@Provides
    @FromParent
    static String fromParent()","0","-","-","-","-"
"7353","injectsChildBuilder","InjectsChildBuilder injectsChildBuilder();","0","-","-","-","-"
"7354","newChildComponentBuilder","ChildComponent.Builder newChildComponentBuilder();","0","-","-","-","-"
"7355","fromParent","@Produces
    @FromParent
    static String fromParent()","0","-","-","-","-"
"7356","newChildComponentBuilder","ChildComponent.Builder newChildComponentBuilder();","0","-","-","-","-"
"7357","executorModule","Builder executorModule(ExecutorModule executorModule);","0","-","-","-","-"
"7358","build","ParentProductionComponent build();","0","-","-","-","-"
"7359","fromChild","@Produces
    @FromChild
    static String fromChild(@FromParent String fromParent)","0","-","-","-","-"
"7360","fromChild","@FromChild
    ListenableFuture<String> fromChild();","0","-","-","-","-"
"7361","newGrandchildComponentBuilder","GrandchildComponent.Builder newGrandchildComponentBuilder();","0","-","-","-","-"
"7362","newGrandchildComponent","GrandchildComponentWithoutBuilder newGrandchildComponent();","0","-","-","-","-"
"7363","build","ChildComponent build();","0","-","-","-","-"
"7364","InjectsChildBuilder","@Inject
    InjectsChildBuilder(Provider<ChildComponent.Builder> childBuilder)","0","-","-","-","-"
"7365","childBuilder","ChildComponent.Builder childBuilder()","0","-","-","-","-"
"7366","fromGranchild","@Produces
    @FromGrandchild
    static String fromGranchild(@FromChild String fromChild)","0","-","-","-","-"
"7367","fromGrandchild","@FromGrandchild
    ListenableFuture<String> fromGrandchild();","0","-","-","-","-"
"7368","build","GrandchildComponent build();","0","-","-","-","-"
"7369","fromGrandchild","@FromGrandchild
    ListenableFuture<String> fromGrandchild();","0","-","-","-","-"
"7370","SubcomponentsWithBoundExecutor","private SubcomponentsWithBoundExecutor()","0","-","-","-","-"
"7371","childComponent","@Test
  public void childComponent() throws Exception","0","-","-","-","-"
"7372","str","ListenableFuture<String> str();","0","-","-","-","-"
"7373","build","ChildComponent build();","0","-","-","-","-"
"7374","str","@Produces
  static String str(int n)","0","-","-","-","-"
"7375","subcomponentAddedInParent_onlyUsedInSibling","@Test
  public void subcomponentAddedInParent_onlyUsedInSibling() throws Exception","0","-","-","-","-"
"7376","childBBuilder","ChildB.Builder childBBuilder();","0","-","-","-","-"
"7377","build","ChildA build();","0","-","-","-","-"
"7378","componentHierarchy","ListenableFuture<Set<Class<?>>> componentHierarchy();","0","-","-","-","-"
"7379","build","ChildB build();","0","-","-","-","-"
"7380","componentHierarchy","ListenableFuture<Set<Class<?>>> componentHierarchy();","0","-","-","-","-"
"7381","componentHierarchyFromChildA","@FromChildA
    ListenableFuture<Set<Class<?>>> componentHierarchyFromChildA();","0","-","-","-","-"
"7382","produceComponentType","@Produces
    @IntoSet
    static Class<?> produceComponentType()","0","-","-","-","-"
"7383","produceComponentType","@Produces
    @IntoSet
    static Class<?> produceComponentType()","0","-","-","-","-"
"7384","produceComponentType","@Produces
    @IntoSet
    static Class<?> produceComponentType()","0","-","-","-","-"
"7385","fromChildA","@Produces
    @FromChildA
    Set<Class<?>> fromChildA(ChildA.Builder childABuilder) throws Exception","0","-","-","-","-"
"7386","productionChild","ProductionChild.Builder productionChild();","0","-","-","-","-"
"7387","build","ProductionChild build();","0","-","-","-","-"
"7388","provisionBuilder","ProvisionChild.Builder provisionBuilder();","0","-","-","-","-"
"7389","build","ProvisionChild build();","0","-","-","-","-"
"7390","ExecutorModule","public ExecutorModule()","0","-","-","-","-"
"7391","ExecutorModule","public ExecutorModule(Executor executor)","0","-","-","-","-"
"7392","executor","@Provides
  @Production
  Executor executor()","0","-","-","-","-"
"7393","setUp","@Before
  public void setUp()","0","-","-","-","-"
"7394","topLevelComponent_child","@Test
  public void topLevelComponent_child() throws Exception","0","-","-","-","-"
"7395","topLevelComponent_injectsChildBuilder","@Test
  public void topLevelComponent_injectsChildBuilder() throws Exception","0","-","-","-","-"
"7396","topLevelComponent_grandchild","@Test
  public void topLevelComponent_grandchild() throws Exception","0","-","-","-","-"
"7397","topLevelComponent_grandchildWithoutBuilder","@Test
  public void topLevelComponent_grandchildWithoutBuilder() throws Exception","0","-","-","-","-"
"7398","topLevelProductionComponent_child","@Test
  public void topLevelProductionComponent_child() throws Exception","0","-","-","-","-"
"7399","topLevelProductionComponent_grandchild","@Test
  public void topLevelProductionComponent_grandchild() throws Exception","0","-","-","-","-"
"7400","topLevelProductionComponent_grandchildWithoutBuilder","@Test
  public void topLevelProductionComponent_grandchildWithoutBuilder() throws Exception","0","-","-","-","-"
"7401","strings","ListenableFuture<Set<String>> strings();","0","-","-","-","-"
"7402","stringsFromChild","@FromChild
  ListenableFuture<Set<String>> stringsFromChild();","0","-","-","-","-"
"7403","produceStringInParent","@Produces
    @IntoSet
    static String produceStringInParent()","0","-","-","-","-"
"7404","stringsFromChild","@Produces
    @FromChild
    static Set<String> stringsFromChild(Child.Builder childBuilder) throws Exception","0","-","-","-","-"
"7405","strings","ListenableFuture<Set<String>> strings();","0","-","-","-","-"
"7406","build","Child build();","0","-","-","-","-"
"7407","produceStringInChild","@Produces
    @IntoSet
    static String produceStringInChild()","0","-","-","-","-"
"7408","sub","Sub sub();","0","-","-","-","-"
"7409","subcomponentBuilder","Sub.Builder subcomponentBuilder();","0","-","-","-","-"
"7410","subcomponentFromModules","@Test
  public void subcomponentFromModules() throws Exception","0","-","-","-","-"
"7411","subcomponentFromModules_transitively","@Test
  public void subcomponentFromModules_transitively() throws Exception","0","-","-","-","-"
"7412","greeting","@Produces
  static ListenableFuture<String> greeting()","0","-","-","-","-"
"7413","intermediateGreeting","@Produces
  @RequestsProducerAndProduced
  static ListenableFuture<String> intermediateGreeting(
      // TODO(beder): Allow Producer and Provider of the same type (which would force the binding
      // to be a provision binding), and add validation for that.
      @SuppressWarnings(""unused"") String greeting,
      Producer<String> greetingProducer,
      @SuppressWarnings(""unused"") Produced<String> greetingProduced,
      @SuppressWarnings(""unused"") Provider<Integer> requestNumberProvider,
      @SuppressWarnings(""unused"") Lazy<Integer> requestNumberLazy)","0","-","-","-","-"
"7414","response","@Produces
  static Response response(
      @RequestsProducerAndProduced String greeting, Request request, int requestNumber)","0","-","-","-","-"
"7415","setUpMocks","@Before
  public void setUpMocks()","0","-","-","-","-"
"7416","get","@Override
          public Executor get()","0","-","-","-","-"
"7417","get","@Override
          public ProductionComponentMonitor get()","0","-","-","-","-"
"7418","noArgMethod","@Test
  public void noArgMethod() throws Exception","0","-","-","-","-"
"7419","singleArgMethod","@Test
  public void singleArgMethod() throws Exception","0","-","-","-","-"
"7420","successMonitor","@Test
  public void successMonitor() throws Exception","0","-","-","-","-"
"7421","failureMonitor","@Test
  public void failureMonitor() throws Exception","0","-","-","-","-"
"7422","failureMonitorDueToThrowingProducer","@Test
  public void failureMonitorDueToThrowingProducer() throws Exception","0","-","-","-","-"
"7423","nullComponentMonitorProvider","@Test
  public void nullComponentMonitorProvider() throws Exception","0","-","-","-","-"
"7424","producerOfFuture","private static <T> CancellableProducer<T> producerOfFuture(final ListenableFuture<T> future)","0","-","-","-","-"
"7425","compute","@Override
      public ListenableFuture<T> compute()","0","-","-","-","-"
"7426","testIncompatible","@Test
  public void testIncompatible()","0","-","-","-","-"
"7427","assertGwtIncompatible","private void assertGwtIncompatible(Class<?> clazz)","0","-","-","-","-"
"7428","onModule","@Produces
    static String onModule()","0","-","-","-","-"
"7429","onMethod","@GwtIncompatible
    @Produces
    static String onMethod()","0","-","-","-","-"
"7430","testSimpleComponent","@Test public void testSimpleComponent() throws Exception","0","-","-","-","-"
"7431","throwingProducer","@Produces
  @Qual(-2)
  static ListenableFuture<String> throwingProducer()","0","-","-","-","-"
"7432","settableFutureStr","@Produces
  @Qual(-1)
  static ListenableFuture<String> settableFutureStr(SettableFuture<String> future)","0","-","-","-","-"
"7433","str","@Produces
  @Qual(0)
  static String str()","0","-","-","-","-"
"7434","futureStr","@Produces
  @Qual(1)
  static ListenableFuture<String> futureStr()","0","-","-","-","-"
"7435","strWithArg","@Produces
  @Qual(2)
  static String strWithArg(@SuppressWarnings(""unused"") int i)","0","-","-","-","-"
"7436","futureStrWithArg","@Produces
  @Qual(3)
  static ListenableFuture<String> futureStrWithArg(@SuppressWarnings(""unused"") int i)","0","-","-","-","-"
"7437","strThrowingException","@Produces
  @Qual(4)
  @SuppressWarnings(""unused"") // unthrown exception for test
  static String strThrowingException() throws IOException","0","-","-","-","-"
"7438","futureStrThrowingException","@Produces
  @Qual(5)
  @SuppressWarnings(""unused"") // unthrown exception for test
  static ListenableFuture<String> futureStrThrowingException() throws IOException","0","-","-","-","-"
"7439","strWithArgThrowingException","@Produces
  @Qual(6)
  @SuppressWarnings(""unused"") // unthrown exception for test, unused parameter for test
  static String strWithArgThrowingException(int i) throws IOException","0","-","-","-","-"
"7440","futureStrWithArgThrowingException","@Produces
  @Qual(7)
  @SuppressWarnings(""unused"") // unthrown exception for test, unused parameter for test
  static ListenableFuture<String> futureStrWithArgThrowingException(int i) throws IOException","0","-","-","-","-"
"7441","strWithArgs","@Produces
  @Qual(8)
  static String strWithArgs(
      @SuppressWarnings(""unused"") int i,
      @SuppressWarnings(""unused"") Produced<Double> b,
      @SuppressWarnings(""unused"") Producer<Object> c,
      @SuppressWarnings(""unused"") Provider<Boolean> d)","0","-","-","-","-"
"7442","strWithArgsThrowingException","@Produces
  @Qual(9)
  @SuppressWarnings(""unused"") // unthrown exception for test, unused parameters for test
  static String strWithArgsThrowingException(
      int i, Produced<Double> b, Producer<Object> c, Provider<Boolean> d) throws IOException","0","-","-","-","-"
"7443","futureStrWithArgs","@Produces
  @Qual(10)
  static ListenableFuture<String> futureStrWithArgs(
      @SuppressWarnings(""unused"") int i,
      @SuppressWarnings(""unused"") Produced<Double> b,
      @SuppressWarnings(""unused"") Producer<Object> c,
      @SuppressWarnings(""unused"") Provider<Boolean> d)","0","-","-","-","-"
"7444","futureStrWithArgsThrowingException","@Produces
  @Qual(11)
  @SuppressWarnings(""unused"") // unthrown exception for test, unused parameter for test
  static ListenableFuture<String> futureStrWithArgsThrowingException(
      int i, Produced<Double> b, Producer<Object> c, Provider<Boolean> d) throws IOException","0","-","-","-","-"
"7445","strWithFrameworkTypeArgs","@Produces
  @Qual(12)
  static String strWithFrameworkTypeArgs(
      @SuppressWarnings(""unused"") @Qual(1) int i,
      @SuppressWarnings(""unused"") @Qual(1) Provider<Integer> iProvider,
      @SuppressWarnings(""unused"") @Qual(1) Lazy<Integer> iLazy,
      @SuppressWarnings(""unused"") @Qual(2) int j,
      @SuppressWarnings(""unused"") @Qual(2) Produced<Integer> jProduced,
      @SuppressWarnings(""unused"") @Qual(2) Producer<Integer> jProducer,
      @SuppressWarnings(""unused"") @Qual(3) Produced<Integer> kProduced,
      @SuppressWarnings(""unused"") @Qual(3) Producer<Integer> kProducer)","0","-","-","-","-"
"7446","setOfStrElement","@Produces
  @IntoSet
  static String setOfStrElement()","0","-","-","-","-"
"7447","setOfStrElementThrowingException","@Produces
  @IntoSet
  @SuppressWarnings(""unused"") // unthrown exception for test
  static String setOfStrElementThrowingException() throws IOException","0","-","-","-","-"
"7448","setOfStrFutureElement","@Produces
  @IntoSet
  static ListenableFuture<String> setOfStrFutureElement()","0","-","-","-","-"
"7449","setOfStrFutureElementThrowingException","@Produces
  @IntoSet
  @SuppressWarnings(""unused"") // unthrown exception for test
  static ListenableFuture<String> setOfStrFutureElementThrowingException() throws IOException","0","-","-","-","-"
"7450","setOfStrElementWithArg","@Produces
  @IntoSet
  static String setOfStrElementWithArg(@SuppressWarnings(""unused"") int i)","0","-","-","-","-"
"7451","setOfStrElementWithArgThrowingException","@Produces
  @IntoSet
  @SuppressWarnings(""unused"") // unthrown exception for test, unused parameter for test
  static String setOfStrElementWithArgThrowingException(int i) throws IOException","0","-","-","-","-"
"7452","setOfStrFutureElementWithArg","@Produces
  @IntoSet
  static ListenableFuture<String> setOfStrFutureElementWithArg(@SuppressWarnings(""unused"") int i)","0","-","-","-","-"
"7453","setOfStrFutureElementWithArgThrowingException","@Produces
  @IntoSet
  @SuppressWarnings(""unused"") // unthrown exception for test, unused parameter for test
  static ListenableFuture<String> setOfStrFutureElementWithArgThrowingException(int i)
      throws IOException","0","-","-","-","-"
"7454","setOfStrValues","@Produces
  @ElementsIntoSet
  static Set<String> setOfStrValues()","0","-","-","-","-"
"7455","setOfStrValuesThrowingException","@Produces
  @ElementsIntoSet
  @SuppressWarnings(""unused"") // unthrown exception for test
  static Set<String> setOfStrValuesThrowingException() throws IOException","0","-","-","-","-"
"7456","setOfStrFutureValues","@Produces
  @ElementsIntoSet
  static ListenableFuture<Set<String>> setOfStrFutureValues()","0","-","-","-","-"
"7457","setOfStrFutureValuesThrowingException","@Produces
  @ElementsIntoSet
  @SuppressWarnings(""unused"") // unthrown exception for test
  static ListenableFuture<Set<String>> setOfStrFutureValuesThrowingException() throws IOException","0","-","-","-","-"
"7458","setOfStrValuesWithArg","@Produces
  @ElementsIntoSet
  static Set<String> setOfStrValuesWithArg(@SuppressWarnings(""unused"") int i)","0","-","-","-","-"
"7459","setOfStrValuesWithArgThrowingException","@Produces
  @ElementsIntoSet
  @SuppressWarnings(""unused"") // unthrown exception for test, unused parameter for test
  static Set<String> setOfStrValuesWithArgThrowingException(int i) throws IOException","0","-","-","-","-"
"7460","setOfStrFutureValuesWithArg","@Produces
  @ElementsIntoSet
  static ListenableFuture<Set<String>> setOfStrFutureValuesWithArg(
      @SuppressWarnings(""unused"") int i)","0","-","-","-","-"
"7461","setOfStrFutureValuesWithArgThrowingException","@Produces
  @ElementsIntoSet
  @SuppressWarnings(""unused"") // unthrown exception for test, unused parameter for test
  static ListenableFuture<Set<String>> setOfStrFutureValuesWithArgThrowingException(int i)
      throws IOException","0","-","-","-","-"
"7462","object","/**
   * A binding method that might result in a generated factory with conflicting field and parameter
   * names.
   */
  @Produces
  static Object object(int foo, Provider<String> fooProvider)","0","-","-","-","-"
"7463","setUpComponent","@Before
  public void setUpComponent()","0","-","-","-","-"
"7464","doubleDep","@Override
          public ListenableFuture<Double> doubleDep()","0","-","-","-","-"
"7465","rejectNoArgMethod","@Test
  public void rejectNoArgMethod() throws Exception","0","-","-","-","-"
"7466","rejectSingleArgMethod","@Test
  public void rejectSingleArgMethod() throws Exception","0","-","-","-","-"
"7467","rejectSingleArgFromComponentDepMethod","@Test
  public void rejectSingleArgFromComponentDepMethod() throws Exception","0","-","-","-","-"
"7468","doNotRejectComponentDepMethod","@Test
  public void doNotRejectComponentDepMethod() throws Exception","0","-","-","-","-"
"7469","noArgStr","@Produces
  static String noArgStr()","0","-","-","-","-"
"7470","singleArgInt","@Produces
  static int singleArgInt(String arg)","0","-","-","-","-"
"7471","singleArgBool","@Produces
  static boolean singleArgBool(double arg)","0","-","-","-","-"
"7472","noArgStr","/** An entry point exposing a producer method with no args. */
  ListenableFuture<String> noArgStr();","0","-","-","-","-"
"7473","singleArgInt","/** An entry point exposing a producer method that depends on another producer method. */
  ListenableFuture<Integer> singleArgInt();","0","-","-","-","-"
"7474","singleArgBool","/** An entry point exposing a producer method that depends on a component dependency method. */
  ListenableFuture<Boolean> singleArgBool();","0","-","-","-","-"
"7475","doubleDep","/** An entry point exposing a component dependency method. */
  ListenableFuture<Double> doubleDep();","0","-","-","-","-"
"7476","doubleDep","ListenableFuture<Double> doubleDep();","0","-","-","-","-"
"7477","ExecutorModule","public ExecutorModule()","0","-","-","-","-"
"7478","ExecutorModule","public ExecutorModule(Executor executor)","0","-","-","-","-"
"7479","executor","@Provides
  @Production
  Executor executor()","0","-","-","-","-"
"7480","dependentComponent","@Test public void dependentComponent() throws Exception","0","-","-","-","-"
"7481","reuseBuilderWithDependentComponent","@Test public void reuseBuilderWithDependentComponent() throws Exception","0","-","-","-","-"
"7482","numGreetings","@Override public ListenableFuture<Integer> numGreetings()","0","-","-","-","-"
"7483","getGreeting","@Override public String getGreeting()","0","-","-","-","-"
"7484","requestNumber","@Provides
  static int requestNumber()","0","-","-","-","-"
"7485","scopedObject","ScopedObject scopedObject();","0","-","-","-","-"
"7486","set","ListenableFuture<Set<Object>> set();","0","-","-","-","-"
"7487","scope","@Test
  public void scope() throws Exception","0","-","-","-","-"
"7488","ScopedObject","@Inject
  ScopedObject()","0","-","-","-","-"
"7489","setValue1","@Produces
  @IntoSet
  static Object setValue1(Object value)","0","-","-","-","-"
"7490","setValue2","@Produces
  @IntoSet
  static Object setValue2(Object value)","0","-","-","-","-"
"7491","newScopedObject","@Provides
  @ProductionScope
  static Object newScopedObject()","0","-","-","-","-"
"7492","ExecutorModule","public ExecutorModule()","0","-","-","-","-"
"7493","ExecutorModule","public ExecutorModule(Executor executor)","0","-","-","-","-"
"7494","executor","@Provides
  @Production
  Executor executor()","0","-","-","-","-"
"7495","setUp","@Before
  public void setUp()","0","-","-","-","-"
"7496","optional","@Test
  public void optional() throws Exception","0","-","-","-","-"
"7497","optionalProducer","@Test
  public void optionalProducer() throws Exception","0","-","-","-","-"
"7498","optionalProduced","@Test
  public void optionalProduced() throws Exception","0","-","-","-","-"
"7499","qualifiedOptional","@Test
  public void qualifiedOptional() throws Exception","0","-","-","-","-"
"7500","qualifiedOptionalProducer","@Test
  public void qualifiedOptionalProducer() throws Exception","0","-","-","-","-"
"7501","qualifiedOptionalProduced","@Test
  public void qualifiedOptionalProduced() throws Exception","0","-","-","-","-"
"7502","parameters","@Parameters(name = ""","0","-","-","-","-"
"7503","OptionalBindingComponentsPresentTest","public OptionalBindingComponentsPresentTest(OptionalBindingComponent component)","0","-","-","-","-"
"7504","optional","@Test
  public void optional() throws Exception","0","-","-","-","-"
"7505","optionalProducer","@Test
  public void optionalProducer() throws Exception","0","-","-","-","-"
"7506","optionalProduced","@Test
  public void optionalProduced() throws Exception","0","-","-","-","-"
"7507","qualifiedOptional","@Test
  public void qualifiedOptional() throws Exception","0","-","-","-","-"
"7508","qualifiedOptionalProducer","@Test
  public void qualifiedOptionalProducer() throws Exception","0","-","-","-","-"
"7509","qualifiedOptionalProduced","@Test
  public void qualifiedOptionalProduced() throws Exception","0","-","-","-","-"
"7510","optionalNullableProducer","@Test
  public void optionalNullableProducer() throws Exception","0","-","-","-","-"
"7511","optionalNullableProduced","@Test
  public void optionalNullableProduced() throws Exception","0","-","-","-","-"
"7512","optionalInstance","abstract Optional<Value> optionalInstance();","0","-","-","-","-"
"7513","optionalProducer","abstract Optional<Producer<Value>> optionalProducer();","0","-","-","-","-"
"7514","optionalProduced","abstract Optional<Produced<Value>> optionalProduced();","0","-","-","-","-"
"7515","executor","@Provides
    @Production
    static Executor executor()","0","-","-","-","-"
"7516","value","@BindsOptionalOf
    abstract Value value();","0","-","-","-","-"
"7517","qualifiedValue","@BindsOptionalOf
    @SomeQualifier
    abstract Value qualifiedValue();","0","-","-","-","-"
"7518","nullableObject","@BindsOptionalOf
    abstract Object nullableObject();","0","-","-","-","-"
"7519","values","@Produces
    static Values values(
        Optional<Value> optionalInstance,
        Optional<Producer<Value>> optionalProducer,
        Optional<Produced<Value>> optionalProduced)","0","-","-","-","-"
"7520","qualifiedValues","@Produces
    @SomeQualifier
    static Values qualifiedValues(
        Optional<Value> optionalInstance,
        Optional<Producer<Value>> optionalProducer,
        Optional<Produced<Value>> optionalProduced)","0","-","-","-","-"
"7521","value","@Produces
    static Value value()","0","-","-","-","-"
"7522","qualifiedValue","@Produces
    @SomeQualifier
    static Value qualifiedValue()","0","-","-","-","-"
"7523","nullableObject","@Provides
    @Nullable
    static Object nullableObject()","0","-","-","-","-"
"7524","value","@Provides
    static Value value()","0","-","-","-","-"
"7525","qualifiedValue","@Provides
    @SomeQualifier
    static Value qualifiedValue()","0","-","-","-","-"
"7526","nullableObject","@Provides
    @Nullable
    static Object nullableObject()","0","-","-","-","-"
"7527","values","ListenableFuture<Values> values();","0","-","-","-","-"
"7528","optionalInstance","ListenableFuture<Optional<Value>> optionalInstance();","0","-","-","-","-"
"7529","optionalProducer","ListenableFuture<Optional<Producer<Value>>> optionalProducer();","0","-","-","-","-"
"7530","optionalProduced","ListenableFuture<Optional<Produced<Value>>> optionalProduced();","0","-","-","-","-"
"7531","qualifiedValues","@SomeQualifier
    ListenableFuture<Values> qualifiedValues();","0","-","-","-","-"
"7532","qualifiedOptionalInstance","@SomeQualifier
    ListenableFuture<Optional<Value>> qualifiedOptionalInstance();","0","-","-","-","-"
"7533","qualifiedOptionalProducer","@SomeQualifier
    ListenableFuture<Optional<Producer<Value>>> qualifiedOptionalProducer();","0","-","-","-","-"
"7534","qualifiedOptionalProduced","@SomeQualifier
    ListenableFuture<Optional<Produced<Value>>> qualifiedOptionalProduced();","0","-","-","-","-"
"7535","optionalNullableProducer","ListenableFuture<Optional<Producer<Object>>> optionalNullableProducer();","0","-","-","-","-"
"7536","optionalNullableProduced","ListenableFuture<Optional<Produced<Object>>> optionalNullableProduced();","0","-","-","-","-"
"7537","presentChild","PresentOptionalBindingSubcomponent presentChild();","0","-","-","-","-"
"7538","greetings","@Produces
  ListenableFuture<List<String>> greetings(Integer numGreetings, String greeting)","0","-","-","-","-"
"7539","getGreeting","String getGreeting();","0","-","-","-","-"
"7540","testFluentFutures","@Test
  public void testFluentFutures() throws Exception","0","-","-","-","-"
"7541","floatFuture","@Override
                  public FluentFuture<Float> floatFuture()","0","-","-","-","-"
"7542","floatFuture","FluentFuture<Float> floatFuture();","0","-","-","-","-"
"7543","intFuture","@Produces
    static FluentFuture<Integer> intFuture()","0","-","-","-","-"
"7544","stringFuture","@Produces
    static FluentFuture<String> stringFuture(int i)","0","-","-","-","-"
"7545","doubleFuture","@Produces
    @IntoSet
    static FluentFuture<Double> doubleFuture(int i)","0","-","-","-","-"
"7546","dependencyInput","@Produces
    @IntoSet
    static double dependencyInput(float f)","0","-","-","-","-"
"7547","setOfDoubleFutures","@Produces
    @ElementsIntoSet
    static Set<FluentFuture<Double>> setOfDoubleFutures(int i)","0","-","-","-","-"
"7548","string","ListenableFuture<String> string();","0","-","-","-","-"
"7549","setOfDouble","ListenableFuture<Set<Double>> setOfDouble();","0","-","-","-","-"
"7550","dependency","Builder dependency(Dependency dependency);","0","-","-","-","-"
"7551","executor","@BindsInstance
      Builder executor(@Production Executor executor);","0","-","-","-","-"
"7552","build","Component build();","0","-","-","-","-"
"7553","produceNumberOfGreetings","@Produces
  int produceNumberOfGreetings()","0","-","-","-","-"
"7554","response","ListenableFuture<Response> response();","0","-","-","-","-"
"7555","threadAccumulator","@EntryPoint
  ListenableFuture<ThreadAccumulator> threadAccumulator();","0","-","-","-","-"
"7556","ThreadAccumulator","@Inject
  ThreadAccumulator()","0","-","-","-","-"
"7557","markThread","void markThread(String name)","0","-","-","-","-"
"7558","threadId","long threadId(String name)","0","-","-","-","-"
"7559","requestData","@Produces
  @RequestData
  static String requestData()","0","-","-","-","-"
"7560","callServer1","@Produces
  @IntermediateData
  static ListenableFuture<String> callServer1(
      @RequestData String data, @ForServer1 StringStub stub)","0","-","-","-","-"
"7561","callServer2","@Produces
  static ListenableFuture<String> callServer2(
      @IntermediateData String data, @ForServer2 StringStub stub)","0","-","-","-","-"
"7562","output","ListenableFuture<String> output();","0","-","-","-","-"
"7563","run","ListenableFuture<String> run(String input);","0","-","-","-","-"
"7564","StubModule","StubModule(StringStub server1, StringStub server2)","0","-","-","-","-"
"7565","server1","@Provides
  @ForServer1
  StringStub server1()","0","-","-","-","-"
"7566","server2","@Provides
  @ForServer2
  StringStub server2()","0","-","-","-","-"
"7567","deferred","@Produces
  @Deferred
  Object deferred(ThreadAccumulator acc)","0","-","-","-","-"
"7568","required","@Produces
  @Required
  ListenableFuture<Object> required(@Deferred Producer<Object> o, ThreadAccumulator acc)","0","-","-","-","-"
"7569","entryPoint","@Produces
  @EntryPoint
  ThreadAccumulator entryPoint(@Required Object o, ThreadAccumulator acc)","0","-","-","-","-"
"7570","MonitoringModule","MonitoringModule(ProductionComponentMonitor.Factory monitorFactory)","0","-","-","-","-"
"7571","monitorFactory","@Provides
  @IntoSet
  ProductionComponentMonitor.Factory monitorFactory()","0","-","-","-","-"
"7572","setUp","@Before
  public void setUp()","0","-","-","-","-"
"7573","basicMonitoring","@Test
  public void basicMonitoring() throws Exception","0","-","-","-","-"
"7574","basicMonitoringWithFailure","@Test
  public void basicMonitoringWithFailure() throws Exception","0","-","-","-","-"
"7575","producerMonitorFor","@Override
    public ProducerMonitor producerMonitorFor(ProducerToken token)","0","-","-","-","-"
"7576","monitoringWithThreads","@Test
  public void monitoringWithThreads() throws Exception","0","-","-","-","-"
"7577","producerMonitorFor","@Override
    public ProducerMonitor producerMonitorFor(ProducerToken token)","0","-","-","-","-"
"7578","requested","@Override
    public void requested()","0","-","-","-","-"
"7579","methodStarting","@Override
    public void methodStarting()","0","-","-","-","-"
"7580","methodFinished","@Override
    public void methodFinished()","0","-","-","-","-"
"7581","ThreadQualifiers","private ThreadQualifiers()","0","-","-","-","-"
"7582","ExecutorModule","public ExecutorModule()","0","-","-","-","-"
"7583","ExecutorModule","public ExecutorModule(Executor executor)","0","-","-","-","-"
"7584","executor","@Provides
  @Production
  Executor executor()","0","-","-","-","-"
"7585","ExecutorModule","public ExecutorModule()","0","-","-","-","-"
"7586","ExecutorModule","public ExecutorModule(Executor executor)","0","-","-","-","-"
"7587","executor","@Provides
  @Production
  Executor executor()","0","-","-","-","-"
"7588","s","ListenableFuture<String> s();","0","-","-","-","-"
"7589","d","ListenableFuture<Double> d();","0","-","-","-","-"
"7590","depComponent","Builder depComponent(DepComponent depComponent);","0","-","-","-","-"
"7591","strModule","Builder strModule(StringModule strModule);","0","-","-","-","-"
"7592","build","TestComponentWithBuilder build();","0","-","-","-","-"
"7593","i","@Provides
  static int i()","0","-","-","-","-"
"7594","successfulBuild","@Test
  public void successfulBuild() throws Exception","0","-","-","-","-"
"7595","successfulBuild_withMissingZeroArgModule","@Test
  public void successfulBuild_withMissingZeroArgModule() throws Exception","0","-","-","-","-"
"7596","missingDepComponent","@Test
  public void missingDepComponent()","0","-","-","-","-"
"7597","depComponent","private static DepComponent depComponent(final double value)","0","-","-","-","-"
"7598","d","@Override
      public ListenableFuture<Double> d()","0","-","-","-","-"
"7599","str","@Produces
  static String str(int i)","0","-","-","-","-"
"7600","d","ListenableFuture<Double> d();","0","-","-","-","-"
"7601","ExecutorModule","public ExecutorModule()","0","-","-","-","-"
"7602","ExecutorModule","public ExecutorModule(Executor executor)","0","-","-","-","-"
"7603","executor","@Provides
  @Production
  Executor executor()","0","-","-","-","-"
"7604","provisionsOnlyAreHeldInOneProducer","@Test
  public void provisionsOnlyAreHeldInOneProducer() throws Exception","0","-","-","-","-"
"7605","ExecutorModule","public ExecutorModule()","0","-","-","-","-"
"7606","ExecutorModule","public ExecutorModule(Executor executor)","0","-","-","-","-"
"7607","executor","@Provides
  @Production
  Executor executor()","0","-","-","-","-"
"7608","InjectedClass","@Inject InjectedClass()","0","-","-","-","-"
"7609","WrappedProducer","WrappedProducer(Producer<T> producer)","0","-","-","-","-"
"7610","Output","Output(Producer<InjectedClass> injectedClass1, Producer<InjectedClass> injectedClass2)","0","-","-","-","-"
"7611","firstProducer","@Produces @First static WrappedProducer<InjectedClass> firstProducer(
        Producer<InjectedClass> injectedClass)","0","-","-","-","-"
"7612","secondProducer","@Produces @Second static WrappedProducer<InjectedClass> secondProducer(
        Producer<InjectedClass> injectedClass)","0","-","-","-","-"
"7613","output","@Produces static Output output(
        @First WrappedProducer<InjectedClass> producer1,
        @Second WrappedProducer<InjectedClass> producer2)","0","-","-","-","-"
"7614","output","ListenableFuture<Output> output();","0","-","-","-","-"
"7615","Provisions","private Provisions()","0","-","-","-","-"
"7616","provideGreeting","@Provides
  String provideGreeting()","0","-","-","-","-"
"7617","HasInjectConstructor","@Inject HasInjectConstructor()","0","-","-","-","-"
"7618","dependsOnShadowingProducer","@Produces
    static DependsOnShadowingProducer dependsOnShadowingProducer(
        // When viewed just within the leaf, this will resolve HasInjectConstructor to the @Inject
        // constructor (and will receive a producerFromProvider), but when viewed within an ancestor
        // that defines a @Produces method for HasInjectConstructor, the binding will be a regular
        // Producer
        HasInjectConstructor hasInjectConstructor,
        Optional<Maybe> maybe)","0","-","-","-","-"
"7619","provisionContribution","@Provides
    @IntoSet
    static Multibound provisionContribution()","0","-","-","-","-"
"7620","maybe","@BindsOptionalOf
    abstract Maybe maybe();","0","-","-","-","-"
"7621","dependsOnShadowingProducer","ListenableFuture<DependsOnShadowingProducer> dependsOnShadowingProducer();","0","-","-","-","-"
"7622","shadowedProvisionMultibinding","ListenableFuture<Set<Multibound>> shadowedProvisionMultibinding();","0","-","-","-","-"
"7623","emptyProvisionBindingToPresentProductionBinding","ListenableFuture<Optional<Maybe>> emptyProvisionBindingToPresentProductionBinding();","0","-","-","-","-"
"7624","shadowInjectConstructor","@Produces
    static HasInjectConstructor shadowInjectConstructor()","0","-","-","-","-"
"7625","productionContribution","@Produces
    @IntoSet
    static Multibound productionContribution()","0","-","-","-","-"
"7626","executor","@Provides
    @Production
    static Executor executor()","0","-","-","-","-"
"7627","presentMaybeInParent","@Produces
    static Maybe presentMaybeInParent()","0","-","-","-","-"
"7628","leaf","Leaf leaf();","0","-","-","-","-"
"7629","shadowedInjectConstructorDoesNotCauseClassCast","@Test
  public void shadowedInjectConstructorDoesNotCauseClassCast() throws Exception","0","-","-","-","-"
"7630","object","ListenableFuture<Object> object();","0","-","-","-","-"
"7631","fooOfStrings","ListenableFuture<Foo<String>> fooOfStrings();","0","-","-","-","-"
"7632","qualifiedFooOfStrings","@SomeQualifier
  ListenableFuture<Foo<String>> qualifiedFooOfStrings();","0","-","-","-","-"
"7633","fooOfIntegers","ListenableFuture<Foo<Integer>> fooOfIntegers();","0","-","-","-","-"
"7634","foosOfNumbers","ListenableFuture<Set<Foo<? extends Number>>> foosOfNumbers();","0","-","-","-","-"
"7635","objects","ListenableFuture<Set<Object>> objects();","0","-","-","-","-"
"7636","charSequences","ListenableFuture<Set<CharSequence>> charSequences();","0","-","-","-","-"
"7637","integerObjectMap","ListenableFuture<Map<Integer, Object>> integerObjectMap();","0","-","-","-","-"
"7638","integerProducerOfObjectMap","ListenableFuture<Map<Integer, Producer<Object>>> integerProducerOfObjectMap();","0","-","-","-","-"
"7639","integerProducedOfObjectMap","ListenableFuture<Map<Integer, Produced<Object>>> integerProducedOfObjectMap();","0","-","-","-","-"
"7640","qualifiedIntegerObjectMap","@SomeQualifier ListenableFuture<Map<Integer, Object>> qualifiedIntegerObjectMap();","0","-","-","-","-"
"7641","setUp","@Before
  public void setUp()","0","-","-","-","-"
"7642","bindDelegates","@Test
  public void bindDelegates() throws Exception","0","-","-","-","-"
"7643","bindWithScope","@Test
  public void bindWithScope() throws Exception","0","-","-","-","-"
"7644","multibindings","@Test
  public void multibindings() throws Exception","0","-","-","-","-"
"7645","bindObject","@Binds
  abstract Object bindObject(FooOfStrings impl);","0","-","-","-","-"
"7646","bindFooOfStrings","@Binds
  abstract Foo<String> bindFooOfStrings(FooOfStrings impl);","0","-","-","-","-"
"7647","bindFooOfNumbers","@Binds
  abstract Foo<? extends Number> bindFooOfNumbers(Foo<Integer> fooOfIntegers);","0","-","-","-","-"
"7648","bindQualifiedFooOfStrings","@Binds
  @SomeQualifier
  abstract Foo<String> bindQualifiedFooOfStrings(FooOfStrings impl);","0","-","-","-","-"
"7649","produceFooOfStrings","@Produces
  static FooOfStrings produceFooOfStrings()","0","-","-","-","-"
"7650","produceFooOfIntegers","@Produces
  static Foo<Integer> produceFooOfIntegers()","0","-","-","-","-"
"7651","produceFooOfDoubles","@Produces
  static Foo<Double> produceFooOfDoubles()","0","-","-","-","-"
"7652","bindFooOfIntegersIntoSet","@Binds
  @IntoSet
  abstract Foo<? extends Number> bindFooOfIntegersIntoSet(Foo<Integer> fooOfIntegers);","0","-","-","-","-"
"7653","bindFooExtendsNumberIntoSet","@Binds
  @IntoSet
  abstract Foo<? extends Number> bindFooExtendsNumberIntoSet(Foo<Double> fooOfDoubles);","0","-","-","-","-"
"7654","bindSetOfFooNumbersToObjects","@Binds
  @ElementsIntoSet
  abstract Set<Object> bindSetOfFooNumbersToObjects(Set<Foo<? extends Number>> setOfFooNumbers);","0","-","-","-","-"
"7655","bindFooOfStringsIntoSetOfObjects","@Binds
  @IntoSet
  abstract Object bindFooOfStringsIntoSetOfObjects(FooOfStrings impl);","0","-","-","-","-"
"7656","produceStringHashSet","@Produces
  static HashSet<String> produceStringHashSet()","0","-","-","-","-"
"7657","produceCharSequenceTreeSet","@Produces
  static TreeSet<CharSequence> produceCharSequenceTreeSet()","0","-","-","-","-"
"7658","produceCharSequenceCollection","@Produces
  static Collection<CharSequence> produceCharSequenceCollection()","0","-","-","-","-"
"7659","bindHashSetOfStrings","@Binds
  @ElementsIntoSet
  abstract Set<CharSequence> bindHashSetOfStrings(HashSet<String> set);","0","-","-","-","-"
"7660","bindTreeSetOfCharSequences","@Binds
  @ElementsIntoSet
  abstract Set<CharSequence> bindTreeSetOfCharSequences(TreeSet<CharSequence> set);","0","-","-","-","-"
"7661","bindCollectionOfCharSequences","@Binds
  @ElementsIntoSet
  abstract Set<CharSequence> bindCollectionOfCharSequences(Collection<CharSequence> collection);","0","-","-","-","-"
"7662","provideExecutor","@Provides @Production
    static Executor provideExecutor()","0","-","-","-","-"
"7663","bind123ForMap","@Binds
  @IntoMap
  @IntKey(123)
  abstract Object bind123ForMap(@Named(""For-123"") String string);","0","-","-","-","-"
"7664","bind456ForMap","@Binds
  @IntoMap
  @IntKey(456)
  abstract Object bind456ForMap(@Named(""For-456"") String string);","0","-","-","-","-"
"7665","produce789ForMap","@Produces
  @IntoMap
  @IntKey(789)
  static Object produce789ForMap()","0","-","-","-","-"
"7666","provideProvisionString","@Provides @Named(""Provision string"") static String provideProvisionString()","0","-","-","-","-"
"7667","bindNegative1ForMap","@Binds
    @IntoMap
    @IntKey(-1)
    abstract Object bindNegative1ForMap(@Named(""Provision string"") String string);","0","-","-","-","-"
"7668","bindFooOfStringsIntoQualifiedMap","@Binds
  @IntoMap
  @IntKey(123)
  @SomeQualifier
  abstract Object bindFooOfStringsIntoQualifiedMap(FooOfStrings fooOfStrings);","0","-","-","-","-"
"7669","produce123String","@Produces
  @Named(""For-123"")
  static String produce123String()","0","-","-","-","-"
"7670","produce456String","@Produces
  @Named(""For-456"")
  static String produce456String()","0","-","-","-","-"
"7671","Request","@Inject
  Request()","0","-","-","-","-"
"7672","name","String name()","0","-","-","-","-"
"7673","Create","@Inject Create(Provider<CreateUsage> provider)","0","-","-","-","-"
"7674","CreateUsage","@Inject CreateUsage(Create create)","0","-","-","-","-"
"7675","getCreateUsage","CreateUsage getCreateUsage();","0","-","-","-","-"
"7676","testCreate","@Test
  public void testCreate()","0","-","-","-","-"
"7677","Builder","@Inject Builder(Provider<BuilderUsage> provider)","0","-","-","-","-"
"7678","BuilderUsage","@Inject BuilderUsage(Builder create)","0","-","-","-","-"
"7679","getBuilderUsage","BuilderUsage getBuilderUsage();","0","-","-","-","-"
"7680","build","BuilderComponent build();","0","-","-","-","-"
"7681","testBuilder","@Test
  public void testBuilder()","0","-","-","-","-"
"7682","ModuleWithInaccessibleConstructor","ModuleWithInaccessibleConstructor()","0","-","-","-","-"
"7683","i","@Provides
  int i()","0","-","-","-","-"
"7684","setOfString","Set<String> setOfString();","0","-","-","-","-"
"7685","fooChildComponent","FooChildComponent fooChildComponent();","0","-","-","-","-"
"7686","usesInaccessible","UsesInaccessible usesInaccessible();","0","-","-","-","-"
"7687","accessibleConstructorUsesInaccessibleInGenericsOnly","UsesInaccessibleInGenericsOnly accessibleConstructorUsesInaccessibleInGenericsOnly();","0","-","-","-","-"
"7688","buildTest","@Test
  public void buildTest()","0","-","-","-","-"
"7689","primitive","boolean primitive();","0","-","-","-","-"
"7690","boxedPrimitive","Provider<Boolean> boxedPrimitive();","0","-","-","-","-"
"7691","i","int i();","0","-","-","-","-"
"7692","usesInaccessible","UsesInaccessible usesInaccessible();","0","-","-","-","-"
"7693","provideString","@Provides
  @IntoSet
  static String provideString()","0","-","-","-","-"
"7694","provideInaccessible","@Binds
  @IntoSet
  abstract Inaccessible provideInaccessible(Inaccessible inaccessible);","0","-","-","-","-"
"7695","provideSetOfInaccessibles","@Provides
  @ElementsIntoSet
  static Set<Inaccessible> provideSetOfInaccessibles()","0","-","-","-","-"
"7696","provideInaccessibleToMap","@Binds
  @IntoMap
  @StringKey(""inaccessible"")
  abstract Inaccessible provideInaccessibleToMap(Inaccessible inaccessible);","0","-","-","-","-"
"7697","UsesInaccessibleInGenericsOnly","@Inject
  public UsesInaccessibleInGenericsOnly(
      Set<Inaccessible> inaccessibleSet, Map<String, Inaccessible> inaccessibleMap)","0","-","-","-","-"
"7698","inaccessibleSet","@Multibinds
  abstract Set<Inaccessible> inaccessibleSet();","0","-","-","-","-"
"7699","inaccessibleMap","@Multibinds
  abstract Map<String, Inaccessible> inaccessibleMap();","0","-","-","-","-"
"7700","InaccessibleGeneric","@Inject
  InaccessibleGeneric()","0","-","-","-","-"
"7701","Inaccessible","@Inject Inaccessible()","0","-","-","-","-"
"7702","UsesInaccessible","@Inject
  public UsesInaccessible(
      Inaccessible inaccessible,
      Set<Inaccessible> inaccessibleSet,
      Map<String, Inaccessible> inaccessibleMap,
      InaccessibleGeneric<Integer> inaccessibleGeneric)","0","-","-","-","-"
"7703","primitive","@Provides
  static boolean primitive()","0","-","-","-","-"
"7704","foo","Foo<FooChildComponent> foo();","0","-","-","-","-"
"7705","fooGrandchildComponent","FooGrandchildComponent fooGrandchildComponent();","0","-","-","-","-"
"7706","Foo","@Inject Foo(Set<String> strings)","0","-","-","-","-"
"7707","provideString","@Provides
  @IntoSet
  static String provideString()","0","-","-","-","-"
"7708","provideString","@Provides
  @IntoSet
  static String provideString()","0","-","-","-","-"
"7709","provideString","@Provides
  @IntoSet
  static String provideString()","0","-","-","-","-"
"7710","foo","Foo<FooGrandchildComponent> foo();","0","-","-","-","-"
"7711","mapWithAnInaccessibleMapKey","Map<Class<?>, Object> mapWithAnInaccessibleMapKey();","0","-","-","-","-"
"7712","test","@Test
  public void test()","0","-","-","-","-"
"7713","map","Map<Class<?>, String> map();","0","-","-","-","-"
"7714","intMap","Provider<Map<Class<?>, Provider<Integer>>> intMap();","0","-","-","-","-"
"7715","provideThingValue","@Provides
    @IntoMap
    @LazyClassKey(Thing.class)
    static String provideThingValue()","0","-","-","-","-"
"7716","provideGenericThingValue","@Provides
    @IntoMap
    @LazyClassKey(GenericThing.class)
    static String provideGenericThingValue()","0","-","-","-","-"
"7717","provideThingIntValue","@Provides
    @IntoMap
    @LazyClassKey(Thing.class)
    static Integer provideThingIntValue()","0","-","-","-","-"
"7718","provideGenericThingIntValue","@Provides
    @IntoMap
    @LazyClassKey(GenericThing.class)
    static Integer provideGenericThingIntValue()","0","-","-","-","-"
"7719","test","@Test
  public void test()","0","-","-","-","-"
"7720","map","Map<Class<?>, String> map();","0","-","-","-","-"
"7721","provideThingValue","@Provides
    @IntoMap
    @ClassKey(Thing.class)
    static String provideThingValue()","0","-","-","-","-"
"7722","provideGenericThingValue","@Provides
    @IntoMap
    @ClassKey(GenericThing.class)
    static String provideGenericThingValue()","0","-","-","-","-"
"7723","test","@Test
  public void test()","0","-","-","-","-"
"7724","emptySet","@Multibinds
  abstract Set<Object> emptySet();","0","-","-","-","-"
"7725","emptyMap","@Multibinds
  abstract Map<String, Object> emptyMap();","0","-","-","-","-"
"7726","set","@Multibinds
  abstract Set<CharSequence> set();","0","-","-","-","-"
"7727","membersInjectorSet","@Multibinds
  abstract Set<MembersInjector<?>> membersInjectorSet();","0","-","-","-","-"
"7728","map","@Multibinds
  abstract Map<String, CharSequence> map();","0","-","-","-","-"
"7729","membersInjectorMap","@Multibinds
  abstract Map<Class<?>, MembersInjector<?>> membersInjectorMap();","0","-","-","-","-"
"7730","emptyQualifiedSet","@Multibinds
  @Named(""complexQualifier"")
  abstract Set<Object> emptyQualifiedSet();","0","-","-","-","-"
"7731","emptyQualifiedMap","@Multibinds
  @Named(""complexQualifier"")
  abstract Map<String, Object> emptyQualifiedMap();","0","-","-","-","-"
"7732","qualifiedSet","@Multibinds
  @Named(""complexQualifier"")
  abstract Set<CharSequence> qualifiedSet();","0","-","-","-","-"
"7733","qualifiedMap","@Multibinds
  @Named(""complexQualifier"")
  abstract Map<String, CharSequence> qualifiedMap();","0","-","-","-","-"
"7734","mapOfLazies","@Test
  public void mapOfLazies()","0","-","-","-","-"
"7735","mapOfProviderOfLaziesReturnsDifferentLazy","@Test
  public void mapOfProviderOfLaziesReturnsDifferentLazy()","0","-","-","-","-"
"7736","map","Map<String, String> map();","0","-","-","-","-"
"7737","mapOfArrays","Map<String, String[]> mapOfArrays();","0","-","-","-","-"
"7738","mapOfProviders","Map<String, Provider<String>> mapOfProviders();","0","-","-","-","-"
"7739","mapKeys","Set<String> mapKeys();","0","-","-","-","-"
"7740","mapValues","Collection<String> mapValues();","0","-","-","-","-"
"7741","set","Set<Integer> set();","0","-","-","-","-"
"7742","nestedKeyMap","Map<NestedAnnotationContainer.NestedWrappedKey, String> nestedKeyMap();","0","-","-","-","-"
"7743","numberClassKeyMap","Map<Class<? extends Number>, String> numberClassKeyMap();","0","-","-","-","-"
"7744","classKeyMap","Map<Class<?>, String> classKeyMap();","0","-","-","-","-"
"7745","longKeyMap","Map<Long, String> longKeyMap();","0","-","-","-","-"
"7746","integerKeyMap","Map<Integer, String> integerKeyMap();","0","-","-","-","-"
"7747","shortKeyMap","Map<Short, String> shortKeyMap();","0","-","-","-","-"
"7748","byteKeyMap","Map<Byte, String> byteKeyMap();","0","-","-","-","-"
"7749","booleanKeyMap","Map<Boolean, String> booleanKeyMap();","0","-","-","-","-"
"7750","characterKeyMap","Map<Character, String> characterKeyMap();","0","-","-","-","-"
"7751","unwrappedAnnotationKeyMap","Map<StringKey, String> unwrappedAnnotationKeyMap();","0","-","-","-","-"
"7752","wrappedAnnotationKeyMap","Map<WrappedAnnotationKey, String> wrappedAnnotationKeyMap();","0","-","-","-","-"
"7753","complexQualifierStringSet","@Named(""complexQualifier"") Set<String> complexQualifierStringSet();","0","-","-","-","-"
"7754","emptySet","Set<Object> emptySet();","0","-","-","-","-"
"7755","emptyQualifiedSet","@Named(""complexQualifier"")
  Set<Object> emptyQualifiedSet();","0","-","-","-","-"
"7756","emptyMap","Map<String, Object> emptyMap();","0","-","-","-","-"
"7757","emptyQualifiedMap","@Named(""complexQualifier"")
  Map<String, Object> emptyQualifiedMap();","0","-","-","-","-"
"7758","maybeEmptySet","Set<CharSequence> maybeEmptySet();","0","-","-","-","-"
"7759","maybeEmptyQualifiedSet","@Named(""complexQualifier"")
  Set<CharSequence> maybeEmptyQualifiedSet();","0","-","-","-","-"
"7760","maybeEmptyMap","Map<String, CharSequence> maybeEmptyMap();","0","-","-","-","-"
"7761","maybeEmptyQualifiedMap","@Named(""complexQualifier"")
  Map<String, CharSequence> maybeEmptyQualifiedMap();","0","-","-","-","-"
"7762","membersInjectorMap","Map<Class<?>, MembersInjector<?>> membersInjectorMap();","0","-","-","-","-"
"7763","membersInjectorSet","Set<MembersInjector<?>> membersInjectorSet();","0","-","-","-","-"
"7764","provideAtomicInteger","@Provides
    @Singleton
    static AtomicInteger provideAtomicInteger()","0","-","-","-","-"
"7765","provideString","@Provides
    static String provideString(AtomicInteger atomicInteger)","0","-","-","-","-"
"7766","mapContribution","@Provides
    @IntoMap
    @StringKey(""key"")
    static Lazy<String> mapContribution(Lazy<String> lazy)","0","-","-","-","-"
"7767","mapOfLazy","Map<String, Lazy<String>> mapOfLazy();","0","-","-","-","-"
"7768","mapOfProviderOfLazy","Map<String, Provider<Lazy<String>>> mapOfProviderOfLazy();","0","-","-","-","-"
"7769","providerForMapOfLazy","Provider<Map<String, Lazy<String>>> providerForMapOfLazy();","0","-","-","-","-"
"7770","providerForMapOfProviderOfLazy","Provider<Map<String, Provider<Lazy<String>>>> providerForMapOfProviderOfLazy();","0","-","-","-","-"
"7771","bindInaccessibleMapKey","@Binds
  @IntoMap
  @ClassKey(Inaccessible.class)
  abstract Object bindInaccessibleMapKey(Inaccessible inaccessible);","0","-","-","-","-"
"7772","Inaccessible","@Inject Inaccessible()","0","-","-","-","-"
"7773","contributeAnInt","@Provides
  @IntoSet
  static int contributeAnInt(@SuppressWarnings(""unused"") double doubleDependency)","0","-","-","-","-"
"7774","contributeAnotherInt","@Provides
  @IntoSet
  static int contributeAnotherInt()","0","-","-","-","-"
"7775","contributeSomeInts","@Provides
  @ElementsIntoSet
  static Set<Integer> contributeSomeInts()","0","-","-","-","-"
"7776","map","@Test public void map()","0","-","-","-","-"
"7777","mapOfArrays","@Test public void mapOfArrays()","0","-","-","-","-"
"7778","mapOfProviders","@Test public void mapOfProviders()","0","-","-","-","-"
"7779","mapKeysAndValues","@Test public void mapKeysAndValues()","0","-","-","-","-"
"7780","nestedKeyMap","@Test public void nestedKeyMap()","0","-","-","-","-"
"7781","unwrappedAnnotationKeyMap","@Test
  public void unwrappedAnnotationKeyMap()","0","-","-","-","-"
"7782","wrappedAnnotationKeyMap","@Test
  public void wrappedAnnotationKeyMap()","0","-","-","-","-"
"7783","booleanKeyMap","@Test
  public void booleanKeyMap()","0","-","-","-","-"
"7784","byteKeyMap","@Test
  public void byteKeyMap()","0","-","-","-","-"
"7785","charKeyMap","@Test
  public void charKeyMap()","0","-","-","-","-"
"7786","classKeyMap","@Test
  public void classKeyMap()","0","-","-","-","-"
"7787","numberClassKeyMap","@Test
  public void numberClassKeyMap()","0","-","-","-","-"
"7788","intKeyMap","@Test
  public void intKeyMap()","0","-","-","-","-"
"7789","longKeyMap","@Test
  public void longKeyMap()","0","-","-","-","-"
"7790","shortKeyMap","@Test
  public void shortKeyMap()","0","-","-","-","-"
"7791","setBindings","@Test public void setBindings()","0","-","-","-","-"
"7792","complexQualifierSet","@Test
  public void complexQualifierSet()","0","-","-","-","-"
"7793","emptySet","@Test
  public void emptySet()","0","-","-","-","-"
"7794","emptyQualifiedSet","@Test
  public void emptyQualifiedSet()","0","-","-","-","-"
"7795","emptyMap","@Test
  public void emptyMap()","0","-","-","-","-"
"7796","emptyQualifiedMap","@Test
  public void emptyQualifiedMap()","0","-","-","-","-"
"7797","maybeEmptySet","@Test
  public void maybeEmptySet()","0","-","-","-","-"
"7798","maybeEmptyQualifiedSet","@Test
  public void maybeEmptyQualifiedSet()","0","-","-","-","-"
"7799","maybeEmptyMap","@Test
  public void maybeEmptyMap()","0","-","-","-","-"
"7800","maybeEmptyQualifiedMap","@Test
  public void maybeEmptyQualifiedMap()","0","-","-","-","-"
"7801","membersInjectorSet","@SuppressWarnings(""unchecked"")  // We know the single type in the set
  @Test
  public void membersInjectorSet()","0","-","-","-","-"
"7802","membersInjectorMap","@SuppressWarnings(""unchecked"")  // We know the single type in the map
  @Test
  public void membersInjectorMap()","0","-","-","-","-"
"7803","testStringKey","@AutoAnnotation
  static StringKey testStringKey(String value)","0","-","-","-","-"
"7804","nestedWrappedKey","@AutoAnnotation
  static NestedAnnotationContainer.NestedWrappedKey nestedWrappedKey(Class<?> value)","0","-","-","-","-"
"7805","testWrappedAnnotationKey","@AutoAnnotation
  static WrappedAnnotationKey testWrappedAnnotationKey(
      StringKey value, int[] integers, ClassKey[] annotations, Class<? extends Number>[] classes)","0","-","-","-","-"
"7806","doubleDependency","double doubleDependency();","0","-","-","-","-"
"7807","provideFooKey","@Provides
  @IntoMap
  @StringKey(""foo"")
  static String provideFooKey(@SuppressWarnings(""unused"") double doubleDependency)","0","-","-","-","-"
"7808","provideBarKey","@Provides
  @IntoMap
  @StringKey(""bar"")
  static String provideBarKey()","0","-","-","-","-"
"7809","provideFooArrayValue","@Provides
  @IntoMap
  @StringKey(""foo"")
  static String[] provideFooArrayValue(@SuppressWarnings(""unused"") double doubleDependency)","0","-","-","-","-"
"7810","provideBarArrayValue","@Provides
  @IntoMap
  @StringKey(""bar"")
  static String[] provideBarArrayValue()","0","-","-","-","-"
"7811","provideFiveToSet","@Provides
  @IntoSet
  static int provideFiveToSet()","0","-","-","-","-"
"7812","provideSixToSet","@Provides
  @IntoSet
  static int provideSixToSet()","0","-","-","-","-"
"7813","provideElementsIntoSet","@Provides
  @ElementsIntoSet
  static Set<Integer> provideElementsIntoSet()","0","-","-","-","-"
"7814","provideMapKeys","@Provides
  static Set<String> provideMapKeys(Map<String, Provider<String>> map)","0","-","-","-","-"
"7815","provideMapValues","@Provides
  static Collection<String> provideMapValues(Map<String, String> map)","0","-","-","-","-"
"7816","provideFieldInjectedValue","@Provides
  @Named(""fieldInjectedValue"")
  static String provideFieldInjectedValue()","0","-","-","-","-"
"7817","provideMembersInjectorIntoMap","@Provides
  @IntoMap
  @ClassKey(RequiresFieldInjection.class)
  static MembersInjector<?> provideMembersInjectorIntoMap(
      MembersInjector<RequiresFieldInjection> injector)","0","-","-","-","-"
"7818","provideMembersInjectorIntoSet","@Provides
  @IntoSet
  static MembersInjector<?> provideMembersInjectorIntoSet(
      MembersInjector<RequiresFieldInjection> injector)","0","-","-","-","-"
"7819","valueForInteger","@Provides
  @IntoMap
  @NestedAnnotationContainer.NestedWrappedKey(Integer.class)
  static String valueForInteger()","0","-","-","-","-"
"7820","valueForLong","@Provides
  @IntoMap
  @NestedAnnotationContainer.NestedWrappedKey(Long.class)
  static String valueForLong()","0","-","-","-","-"
"7821","valueForClassInteger","@Provides
  @IntoMap
  @ClassKey(Integer.class)
  static String valueForClassInteger()","0","-","-","-","-"
"7822","valueForClassLong","@Provides
  @IntoMap
  @ClassKey(Long.class)
  static String valueForClassLong()","0","-","-","-","-"
"7823","valueForNumberClassBigDecimal","@Provides
  @IntoMap
  @NumberClassKey(BigDecimal.class)
  static String valueForNumberClassBigDecimal()","0","-","-","-","-"
"7824","valueForNumberClassBigInteger","@Provides
  @IntoMap
  @NumberClassKey(BigInteger.class)
  static String valueForNumberClassBigInteger()","0","-","-","-","-"
"7825","valueFor100Long","@Provides
  @IntoMap
  @LongKey(100)
  static String valueFor100Long()","0","-","-","-","-"
"7826","valueFor100Int","@Provides
  @IntoMap
  @IntKey(100)
  static String valueFor100Int()","0","-","-","-","-"
"7827","valueFor100Short","@Provides
  @IntoMap
  @ShortKey(100)
  static String valueFor100Short()","0","-","-","-","-"
"7828","valueFor100Byte","@Provides
  @IntoMap
  @ByteKey(100)
  static String valueFor100Byte()","0","-","-","-","-"
"7829","valueForTrue","@Provides
  @IntoMap
  @BooleanKey(true)
  static String valueForTrue()","0","-","-","-","-"
"7830","valueForA","@Provides
  @IntoMap
  @CharKey('a')
  static String valueForA()","0","-","-","-","-"
"7831","valueForNewline","@Provides
  @IntoMap
  @CharKey('\n')
  static String valueForNewline()","0","-","-","-","-"
"7832","valueForUnwrappedAnnotationKeyFoo","@Provides
  @IntoMap
  @UnwrappedAnnotationKey(@StringKey(""foo\n""))
  static String valueForUnwrappedAnnotationKeyFoo()","0","-","-","-","-"
"7833","valueForWrappedAnnotationKeyFoo","@Provides
  @IntoMap
  @WrappedAnnotationKey(
    value = @StringKey(""foo""),
    integers =","0","-","-","-","-"
"7834","valueForComplexQualifierSet","@Provides
  @IntoSet
  @Named(""complexQualifier"")
  static String valueForComplexQualifierSet()","0","-","-","-","-"
"7835","setContribution","@Provides
  @IntoSet
  static CharSequence setContribution()","0","-","-","-","-"
"7836","qualifiedSetContribution","@Provides
  @IntoSet
  @Named(""complexQualifier"")
  static CharSequence qualifiedSetContribution()","0","-","-","-","-"
"7837","mapContribution","@Provides
  @IntoMap
  @StringKey(""key"")
  static CharSequence mapContribution()","0","-","-","-","-"
"7838","qualifiedMapContribution","@Provides
  @IntoMap
  @Named(""complexQualifier"")
  @StringKey(""key"")
  static CharSequence qualifiedMapContribution()","0","-","-","-","-"
"7839","justRequired","@Provides
    @IntoMap
    @MapKeyWithDefault(required = false)
    static int justRequired()","0","-","-","-","-"
"7840","both","@Provides
    @IntoMap
    @MapKeyWithDefault(required = false, hasDefault = false)
    static int both()","0","-","-","-","-"
"7841","map","Map<MapKeyWithDefault, Integer> map();","0","-","-","-","-"
"7842","test","@Test
  public void test()","0","-","-","-","-"
"7843","mapKey","@AutoAnnotation
  static MapKeyWithDefault mapKey(boolean hasDefault, boolean required)","0","-","-","-","-"
"7844","inOrder","@Provides
    @IntoMap
    @ComplexMapKey(i = 1, j = 2, nestKeys = @NestKey)
    static int inOrder()","0","-","-","-","-"
"7845","backwardsOrder","@Provides
    @IntoMap
    @ComplexMapKey(j = 4, i = 5)
    static int backwardsOrder()","0","-","-","-","-"
"7846","map","Map<ComplexMapKey, Integer> map();","0","-","-","-","-"
"7847","test","@Test
  public void test()","0","-","-","-","-"
"7848","mapKey","@AutoAnnotation
  static ComplexMapKey mapKey(int i, int j, NestKey[] nestKeys)","0","-","-","-","-"
"7849","provideUnscopedObject","@Provides
  @IntoSet
  static Object provideUnscopedObject()","0","-","-","-","-"
"7850","toString","@Override public String toString()","0","-","-","-","-"
"7851","provideAnInterface","@Binds
  abstract AnInterface provideAnInterface(ImplementsAnInterface implementsAnInterface);","0","-","-","-","-"
"7852","provideNeedsAnInterface","@Provides
  static NeedsAnInterface provideNeedsAnInterface(AnInterface anInterface)","0","-","-","-","-"
"7853","newGrandchildBuilder","OtherSubcomponentWithRepeatedModule.Builder newGrandchildBuilder();","0","-","-","-","-"
"7854","state","@Provides
  Object state()","0","-","-","-","-"
"7855","provideString","@Provides
  static String provideString()","0","-","-","-","-"
"7856","contributeString","@Provides
  @IntoSet
  static String contributeString()","0","-","-","-","-"
"7857","provideOnlyUsedInParent","@Provides
  static OnlyUsedInParent provideOnlyUsedInParent()","0","-","-","-","-"
"7858","provideOnlyUsedInChild","@Provides
  static OnlyUsedInChild provideOnlyUsedInChild()","0","-","-","-","-"
"7859","state","Object state();","0","-","-","-","-"
"7860","getString","String getString();","0","-","-","-","-"
"7861","getMultiboundStrings","Set<String> getMultiboundStrings();","0","-","-","-","-"
"7862","getOnlyUsedInParent","OnlyUsedInParent getOnlyUsedInParent();","0","-","-","-","-"
"7863","newChildComponentBuilder","SubcomponentWithRepeatedModule.Builder newChildComponentBuilder();","0","-","-","-","-"
"7864","newChildComponentWithoutRepeatedModule","SubcomponentWithoutRepeatedModule newChildComponentWithoutRepeatedModule();","0","-","-","-","-"
"7865","repeatedModule","Builder repeatedModule(RepeatedModule repeatedModule);","0","-","-","-","-"
"7866","build","ParentComponent build();","0","-","-","-","-"
"7867","repeatedModule","Builder repeatedModule(RepeatedModule repeatedModule);","0","-","-","-","-"
"7868","build","OtherSubcomponentWithRepeatedModule build();","0","-","-","-","-"
"7869","state","Object state();","0","-","-","-","-"
"7870","getString","String getString();","0","-","-","-","-"
"7871","getMultiboundStrings","Set<String> getMultiboundStrings();","0","-","-","-","-"
"7872","getOnlyUsedInChild","OnlyUsedInChild getOnlyUsedInChild();","0","-","-","-","-"
"7873","repeatedModule","Builder repeatedModule(RepeatedModule repeatedModule);","0","-","-","-","-"
"7874","build","SubcomponentWithRepeatedModule build();","0","-","-","-","-"
"7875","initializeParentComponent","@Before
  public void initializeParentComponent()","0","-","-","-","-"
"7876","repeatedModuleHasSameStateInSubcomponent","@Test
  public void repeatedModuleHasSameStateInSubcomponent()","0","-","-","-","-"
"7877","repeatedModuleHasSameStateInGrandchildSubcomponent","@Test
  public void repeatedModuleHasSameStateInGrandchildSubcomponent()","0","-","-","-","-"
"7878","repeatedModuleBuilderThrowsInSubcomponent","@Test
  public void repeatedModuleBuilderThrowsInSubcomponent()","0","-","-","-","-"
"7879","repeatedModuleBuilderThrowsInGrandchildSubcomponent","@Test
  public void repeatedModuleBuilderThrowsInGrandchildSubcomponent()","0","-","-","-","-"
"7880","unresolvableChildComponentBuilder","/**
   * Provides a qualified version of the","0","-","-","-","-"
"7881","build","@Override
      public UnresolvableChildComponent build()","0","-","-","-","-"
"7882","unboundString","@Override
          public String unboundString()","0","-","-","-","-"
"7883","subcomponent","B subcomponent();","0","-","-","-","-"
"7884","RequiresMultibindings","@Inject
    RequiresMultibindings(Set<T> set, Map<String, T> map)","0","-","-","-","-"
"7885","set","Set<T> set()","0","-","-","-","-"
"7886","map","Map<String, T> map()","0","-","-","-","-"
"7887","equals","@Override
    public boolean equals(Object obj)","0","-","-","-","-"
"7888","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"7889","toString","@Override
    public String toString()","0","-","-","-","-"
"7890","onlyInParentElement","@Provides
    @IntoSet
    static BoundInParent onlyInParentElement()","0","-","-","-","-"
"7891","onlyInParentEntry","@Provides
    @IntoMap
    @StringKey(""parent key"")
    static BoundInParent onlyInParentEntry()","0","-","-","-","-"
"7892","inParentAndChildElement","@Provides
    @IntoSet
    static BoundInParentAndChild inParentAndChildElement()","0","-","-","-","-"
"7893","inParentAndChildEntry","@Provides
    @IntoMap
    @StringKey(""parent key"")
    static BoundInParentAndChild inParentAndChildEntry()","0","-","-","-","-"
"7894","requiresMultibindingsInParentAndChildElement","@Binds
    @IntoSet
    abstract RequiresMultibindings<BoundInParentAndChild>
        requiresMultibindingsInParentAndChildElement(
            RequiresMultibindings<BoundInParentAndChild> requiresMultibindingsInParentAndChild);","0","-","-","-","-"
"7895","inParentAndChildElement","@Provides
    @IntoSet
    static BoundInParentAndChild inParentAndChildElement()","0","-","-","-","-"
"7896","inParentAndChildEntry","@Provides
    @IntoMap
    @StringKey(""child key"")
    static BoundInParentAndChild inParentAndChildEntry()","0","-","-","-","-"
"7897","onlyInChildElement","@Provides
    @IntoSet
    static BoundInChild onlyInChildElement()","0","-","-","-","-"
"7898","onlyInChildEntry","@Provides
    @IntoMap
    @StringKey(""child key"")
    static BoundInChild onlyInChildEntry()","0","-","-","-","-"
"7899","provideBoundInParentAndChildForBinds","@Provides
    static BoundInParentAndChild provideBoundInParentAndChildForBinds()","0","-","-","-","-"
"7900","bindsLocalContribution","@Binds
    @IntoSet
    abstract BoundInParentAndChild bindsLocalContribution(BoundInParentAndChild instance);","0","-","-","-","-"
"7901","inParentAndChildEntry","@Binds
    @IntoMap
    @StringKey(""child key"")
    abstract BoundInParentAndChild inParentAndChildEntry(BoundInParentAndChild instance);","0","-","-","-","-"
"7902","provideBoundInChildForBinds","@Provides
    static BoundInChild provideBoundInChildForBinds()","0","-","-","-","-"
"7903","inChild","@Binds
    @IntoSet
    abstract BoundInChild inChild(BoundInChild instance);","0","-","-","-","-"
"7904","inChildEntry","@Binds
    @IntoMap
    @StringKey(""child key"")
    abstract BoundInChild inChildEntry(BoundInChild instance);","0","-","-","-","-"
"7905","requiresMultibindingsBoundInParent","RequiresMultibindings<BoundInParent> requiresMultibindingsBoundInParent();","0","-","-","-","-"
"7906","requiresMultibindingsBoundInChild","RequiresMultibindings<BoundInChild> requiresMultibindingsBoundInChild();","0","-","-","-","-"
"7907","requiresMultibindingsBoundInParentAndChild","RequiresMultibindings<BoundInParentAndChild> requiresMultibindingsBoundInParentAndChild();","0","-","-","-","-"
"7908","setOfRequiresMultibindingsInParentAndChild","Set<RequiresMultibindings<BoundInParentAndChild>> setOfRequiresMultibindingsInParentAndChild();","0","-","-","-","-"
"7909","childWithProvision","ChildWithProvision childWithProvision();","0","-","-","-","-"
"7910","childWithoutProvision","ChildWithoutProvision childWithoutProvision();","0","-","-","-","-"
"7911","grandchild","Grandchild grandchild();","0","-","-","-","-"
"7912","grandchild","Grandchild grandchild();","0","-","-","-","-"
"7913","childWithBinds","ChildWithBinds childWithBinds();","0","-","-","-","-"
"7914","Foo","@Inject Foo(Set<String> multi)","0","-","-","-","-"
"7915","getParentFoo","@ParentFoo Foo getParentFoo();","0","-","-","-","-"
"7916","getChild","Child getChild();","0","-","-","-","-"
"7917","getChildFoo","@ChildFoo Foo getChildFoo();","0","-","-","-","-"
"7918","getFoo","Foo getFoo();","0","-","-","-","-"
"7919","build","FloatingSub build();","0","-","-","-","-"
"7920","provideStringMulti","@Provides
      @IntoSet
      static String provideStringMulti()","0","-","-","-","-"
"7921","provideParentFoo","@Provides
      @ParentFoo
      static Foo provideParentFoo(FloatingSub.Builder builder)","0","-","-","-","-"
"7922","provideStringMulti","@Provides
      @IntoSet
      static String provideStringMulti()","0","-","-","-","-"
"7923","provideChildFoo","@Provides
      @ChildFoo
      static Foo provideChildFoo(FloatingSub.Builder builder)","0","-","-","-","-"
"7924","ChildInstallsFloating","private ChildInstallsFloating()","0","-","-","-","-"
"7925","getParentFoo","@ParentFoo Foo getParentFoo();","0","-","-","-","-"
"7926","getChild","Child getChild();","0","-","-","-","-"
"7927","getChildFoo","@ChildFoo Foo getChildFoo();","0","-","-","-","-"
"7928","getFoo","Foo getFoo();","0","-","-","-","-"
"7929","build","FloatingSub build();","0","-","-","-","-"
"7930","provideStringMulti","@Provides
      @IntoSet
      static String provideStringMulti()","0","-","-","-","-"
"7931","provideParentFoo","@Provides
      @ParentFoo
      static Foo provideParentFoo(FloatingSub.Builder builder)","0","-","-","-","-"
"7932","provideStringMulti","@Provides
      @IntoSet
      static String provideStringMulti()","0","-","-","-","-"
"7933","provideChildFoo","@Provides
      @ChildFoo
      static Foo provideChildFoo(FloatingSub.Builder builder)","0","-","-","-","-"
"7934","ChildDoesNotInstallFloating","private ChildDoesNotInstallFloating()","0","-","-","-","-"
"7935","getParentFoo","@ParentFoo Foo getParentFoo();","0","-","-","-","-"
"7936","getChild","Child getChild();","0","-","-","-","-"
"7937","getFloatingSub","FloatingSub getFloatingSub();","0","-","-","-","-"
"7938","getChildFoo","@ChildFoo Foo getChildFoo();","0","-","-","-","-"
"7939","getFloatingSub","FloatingSub getFloatingSub();","0","-","-","-","-"
"7940","getFoo","Foo getFoo();","0","-","-","-","-"
"7941","provideStringMulti","@Provides
      @IntoSet
      static String provideStringMulti()","0","-","-","-","-"
"7942","provideParentFoo","@Provides
      @ParentFoo
      static Foo provideParentFoo(Parent componentSelf)","0","-","-","-","-"
"7943","provideStringMulti","@Provides
      @IntoSet
      static String provideStringMulti()","0","-","-","-","-"
"7944","provideChildFoo","@Provides
      @ChildFoo
      static Foo provideChildFoo(Child componentSelf)","0","-","-","-","-"
"7945","ChildInstallsFloatingFactoryMethod","private ChildInstallsFloatingFactoryMethod()","0","-","-","-","-"
"7946","testChildInstallsFloating","@Test
  public void testChildInstallsFloating()","0","-","-","-","-"
"7947","testChildDoesNotInstallFloating","@Test
  public void testChildDoesNotInstallFloating()","0","-","-","-","-"
"7948","testChildInstallsFloatingFactoryMethod","@Test
  public void testChildInstallsFloatingFactoryMethod()","0","-","-","-","-"
"7949","setUp","@Before
  public void setUp()","0","-","-","-","-"
"7950","testParentWithoutProvisionHasChildWithoutProvision","@Test
  public void testParentWithoutProvisionHasChildWithoutProvision()","0","-","-","-","-"
"7951","testParentWithoutProvisionHasChildWithProvision","@Test
  public void testParentWithoutProvisionHasChildWithProvision()","0","-","-","-","-"
"7952","testParentWithProvisionHasChildWithoutProvision","@Test
  public void testParentWithProvisionHasChildWithoutProvision()","0","-","-","-","-"
"7953","testParentWithProvisionHasChildWithProvision","@Test
  public void testParentWithProvisionHasChildWithProvision()","0","-","-","-","-"
"7954","unboundString","/**
   * Requests a type that is never bound in any component that this subcomponent might be installed
   * in. If this subcomponent is ever attempted to be installed in a component, then it will produce
   * a compiler error.
   */
  @Unbound
  String unboundString();","0","-","-","-","-"
"7955","build","UnresolvableChildComponent build();","0","-","-","-","-"
"7956","ChildModuleWithParameters","public ChildModuleWithParameters(@SuppressWarnings(""unused"") Object whatever)","0","-","-","-","-"
"7957","StaticChildModule","private StaticChildModule()","0","-","-","-","-"
"7958","provideStaticObject","@Provides static Object provideStaticObject()","0","-","-","-","-"
"7959","getInt","int getInt();","0","-","-","-","-"
"7960","SingletonType","@Inject SingletonType()","0","-","-","-","-"
"7961","usesChild","UsesChild usesChild();","0","-","-","-","-"
"7962","strings","Set<String> strings();","0","-","-","-","-"
"7963","provideStringInParent","@Provides
    @IntoSet
    static String provideStringInParent()","0","-","-","-","-"
"7964","strings","Set<String> strings();","0","-","-","-","-"
"7965","build","Child build();","0","-","-","-","-"
"7966","provideStringInChild","@Provides
    @IntoSet
    static String provideStringInChild()","0","-","-","-","-"
"7967","UsesChild","@Inject
    UsesChild(Child.Builder childBuilder)","0","-","-","-","-"
"7968","subcomponentFromModuleAndFactoryMethod","@Test
  public void subcomponentFromModuleAndFactoryMethod()","0","-","-","-","-"
"7969","subcomponentFromModules","@Test
  public void subcomponentFromModules()","0","-","-","-","-"
"7970","subcomponentFromModules_transitively","@Test
  public void subcomponentFromModules_transitively()","0","-","-","-","-"
"7971","sub","Sub sub();","0","-","-","-","-"
"7972","subcomponentBuilder","Sub.Builder subcomponentBuilder();","0","-","-","-","-"
"7973","getUnscopedTypeProvider","Provider<UnscopedType> getUnscopedTypeProvider();","0","-","-","-","-"
"7974","requiresSingleton","RequiresSingletons requiresSingleton();","0","-","-","-","-"
"7975","objectSet","Set<Object> objectSet();","0","-","-","-","-"
"7976","newGrandchildComponent","GrandchildComponent newGrandchildComponent();","0","-","-","-","-"
"7977","object","Object object();","0","-","-","-","-"
"7978","newChildComponent","ChildComponent newChildComponent();","0","-","-","-","-"
"7979","newChildAbstractClassComponent","ChildAbstractClassComponent newChildAbstractClassComponent();","0","-","-","-","-"
"7980","newChildComponentRequiringModules","ChildComponentRequiringModules newChildComponentRequiringModules(
      ChildModuleWithParameters cmwp,
      ChildModuleWithState childModuleWithState);","0","-","-","-","-"
"7981","unresolvableChildComponentBuilder","/**
   * Requests a qualified version of this subcomponent builder, which does not install it as a
   * subcomponent, but instead, uses the explicit binding of this qualified builder.
   */
  @SomeQualifier UnresolvableChildComponent.Builder unresolvableChildComponentBuilder();","0","-","-","-","-"
"7982","provideInt","@Provides int provideInt()","0","-","-","-","-"
"7983","childBBuilder","ChildB.Builder childBBuilder();","0","-","-","-","-"
"7984","build","ChildA build();","0","-","-","-","-"
"7985","componentHierarchy","Set<Class<?>> componentHierarchy();","0","-","-","-","-"
"7986","build","ChildB build();","0","-","-","-","-"
"7987","componentHierarchy","Set<Class<?>> componentHierarchy();","0","-","-","-","-"
"7988","componentHierarchyFromChildA","@FromChildA
    Set<Class<?>> componentHierarchyFromChildA();","0","-","-","-","-"
"7989","provideComponentType","@Provides
    @IntoSet
    static Class<?> provideComponentType()","0","-","-","-","-"
"7990","provideComponentType","@Provides
    @IntoSet
    static Class<?> provideComponentType()","0","-","-","-","-"
"7991","provideComponentType","@Provides
    @IntoSet
    static Class<?> provideComponentType()","0","-","-","-","-"
"7992","fromChildA","@Provides
    @FromChildA
    Set<Class<?>> fromChildA(ChildA.Builder childABuilder)","0","-","-","-","-"
"7993","subcomponentAddedInParent_onlyUsedInSibling","@Test
  public void subcomponentAddedInParent_onlyUsedInSibling()","0","-","-","-","-"
"7994","provideUnscopedObject","@Provides
  @IntoSet
  static Object provideUnscopedObject()","0","-","-","-","-"
"7995","toString","@Override public String toString()","0","-","-","-","-"
"7996","provideSingletonObject","@Provides
  @IntoSet
  @Singleton
  static Object provideSingletonObject()","0","-","-","-","-"
"7997","toString","@Override public String toString()","0","-","-","-","-"
"7998","provideUnscopedTypeBoundAsSingleton","@Binds
  @Singleton
  @BoundAsSingleton
  abstract UnscopedType provideUnscopedTypeBoundAsSingleton(UnscopedType unscopedType);","0","-","-","-","-"
"7999","getUnscopedTypeProvider","Provider<UnscopedType> getUnscopedTypeProvider();","0","-","-","-","-"
"8000","objectSet","Set<Object> objectSet();","0","-","-","-","-"
"8001","moduleNameHiding","@Test public void moduleNameHiding()","0","-","-","-","-"
"8002","aCommonName","dagger.functional.subcomponent.hiding.a.CommonName aCommonName();","0","-","-","-","-"
"8003","bCommonName","dagger.functional.subcomponent.hiding.b.CommonName bCommonName();","0","-","-","-","-"
"8004","aCommonName","dagger.functional.subcomponent.hiding.a.CommonName aCommonName();","0","-","-","-","-"
"8005","newChildComponent","ChildComponent newChildComponent();","0","-","-","-","-"
"8006","provideString","@Provides String provideString()","0","-","-","-","-"
"8007","CommonName","@Inject CommonName(String s)","0","-","-","-","-"
"8008","toString","@Override
  public String toString()","0","-","-","-","-"
"8009","provideString","@Provides int provideString()","0","-","-","-","-"
"8010","CommonName","@Inject CommonName(int i)","0","-","-","-","-"
"8011","toString","@Override
  public String toString()","0","-","-","-","-"
"8012","provideUnscopedObject","@Provides
  @IntoSet
  static Object provideUnscopedObject()","0","-","-","-","-"
"8013","toString","@Override public String toString()","0","-","-","-","-"
"8014","getUnscopedTypeProvider","Provider<UnscopedType> getUnscopedTypeProvider();","0","-","-","-","-"
"8015","requiresSingleton","RequiresSingletons requiresSingleton();","0","-","-","-","-"
"8016","objectSet","Set<Object> objectSet();","0","-","-","-","-"
"8017","needsAnInterface","NeedsAnInterface needsAnInterface();","0","-","-","-","-"
"8018","ImplementsAnInterface","@Inject ImplementsAnInterface()","0","-","-","-","-"
"8019","NeedsAnInterface","NeedsAnInterface(@SuppressWarnings(""unused"") AnInterface anInterface)","0","-","-","-","-"
"8020","RequiresSingletons","@Inject RequiresSingletons(SingletonType singletonType,
      @BoundAsSingleton UnscopedType unscopedTypeBoundAsSingleton)","0","-","-","-","-"
"8021","singletonType","SingletonType singletonType()","0","-","-","-","-"
"8022","unscopedTypeBoundAsSingleton","UnscopedType unscopedTypeBoundAsSingleton()","0","-","-","-","-"
"8023","parameters","@Parameters
  public static Collection<Object[]> parameters()","0","-","-","-","-"
"8024","SubcomponentTest","public SubcomponentTest(ParentGetters parentGetters, ChildComponent childComponent)","0","-","-","-","-"
"8025","scopePropagatesUpward_class","@Test
  public void scopePropagatesUpward_class()","0","-","-","-","-"
"8026","scopePropagatesUpward_provides","@Test
  public void scopePropagatesUpward_provides()","0","-","-","-","-"
"8027","multibindingContributions","@Test
  public void multibindingContributions()","0","-","-","-","-"
"8028","unscopedProviders","@Test
  public void unscopedProviders()","0","-","-","-","-"
"8029","passedModules","@Test
  public void passedModules()","0","-","-","-","-"
"8030","dependenceisInASubcomponent","@Test
  public void dependenceisInASubcomponent()","0","-","-","-","-"
"8031","qualifiedSubcomponentIsBound","@Test
  public void qualifiedSubcomponentIsBound()","0","-","-","-","-"
"8032","provideInt","@Provides
    int provideInt()","0","-","-","-","-"
"8033","StringModule","StringModule(String s)","0","-","-","-","-"
"8034","provideString","@Provides
    String provideString(int i)","0","-","-","-","-"
"8035","newSubcomponent","TestSubcomponent newSubcomponent(StringModule stringModule);","0","-","-","-","-"
"8036","string","String string();","0","-","-","-","-"
"8037","creatingSubcomponentViaFactoryMethod_failsForNullParameter","@Test
  public void creatingSubcomponentViaFactoryMethod_failsForNullParameter()","0","-","-","-","-"
"8038","UnscopedType","@Inject UnscopedType(@SuppressWarnings(""unused"") SingletonType singletonType)","0","-","-","-","-"
"8039","indirection","@Test
  public void indirection()","0","-","-","-","-"
"8040","provideStringArray","@Provides String[] provideStringArray()","0","-","-","-","-"
"8041","provideIntArray","@Provides int[] provideIntArray()","0","-","-","-","-"
"8042","provideFooArrayOfStringArray","@SuppressWarnings(","0","-","-","-","-"
"8043","inject","void inject(ChildOfStringArray subfoo);","0","-","-","-","-"
"8044","inject","void inject(ChildOfArrayOfParentOfStringArray subfoo);","0","-","-","-","-"
"8045","inject","void inject(ChildOfPrimitiveIntArray subfoo);","0","-","-","-","-"
"8046","inject","void inject(RawFrameworkTypes rawFrameworkTypes);","0","-","-","-","-"
"8047","parentInjectsMaskedMembers","@Test
  public void parentInjectsMaskedMembers()","0","-","-","-","-"
"8048","childInjectsMaskedMembers","@Test
  public void childInjectsMaskedMembers()","0","-","-","-","-"
"8049","childInjectsParentMaskedMembersOnly","@Test
  public void childInjectsParentMaskedMembersOnly()","0","-","-","-","-"
"8050","provideString","@Provides
    static String provideString()","0","-","-","-","-"
"8051","bindObject","@Binds
    abstract Object bindObject(String string);","0","-","-","-","-"
"8052","injectParent","void injectParent(MembersWithSameNameParent parent);","0","-","-","-","-"
"8053","injectChild","void injectChild(MembersWithSameNameChild child);","0","-","-","-","-"
"8054","aGrandchildMethod","@Inject
  void aGrandchildMethod(APackagePrivateObject aGrandchildMethod)","0","-","-","-","-"
"8055","aParentMethod","@Override
  @Inject
  protected void aParentMethod(APublicObject aParentMethod)","0","-","-","-","-"
"8056","aChildMethod","@SuppressWarnings(""OverridesJavaxInjectableMethod"")
  @Override
  protected void aChildMethod(APublicObject aChildMethod)","0","-","-","-","-"
"8057","aGrandchildField","public APackagePrivateObject aGrandchildField()","0","-","-","-","-"
"8058","aGrandchildMethod","public APackagePrivateObject aGrandchildMethod()","0","-","-","-","-"
"8059","aParentMethod","@Inject
  protected void aParentMethod(APublicObject aParentMethod)","0","-","-","-","-"
"8060","aParentField","public APackagePrivateObject aParentField()","0","-","-","-","-"
"8061","aParentMethod","public APublicObject aParentMethod()","0","-","-","-","-"
"8062","APublicObject","@Inject
  APublicObject()","0","-","-","-","-"
"8063","APackagePrivateObject","@Inject
  APackagePrivateObject()","0","-","-","-","-"
"8064","sameName","@Inject void sameName(String sameName)","0","-","-","-","-"
"8065","sameName","@Inject void sameName(Object sameName)","0","-","-","-","-"
"8066","parentSameName","public String parentSameName()","0","-","-","-","-"
"8067","parentSameNameStringWasInvoked","public boolean parentSameNameStringWasInvoked()","0","-","-","-","-"
"8068","parentSameNameObjectWasInvoked","public boolean parentSameNameObjectWasInvoked()","0","-","-","-","-"
"8069","aChildMethod","@Inject
  protected void aChildMethod(APublicObject aChildMethod)","0","-","-","-","-"
"8070","aParentMethod","@SuppressWarnings(""OverridesJavaxInjectableMethod"")
  @Override
  protected void aParentMethod(APublicObject aParentMethod)","0","-","-","-","-"
"8071","aChildField","public BPackagePrivateObject aChildField()","0","-","-","-","-"
"8072","aChildMethod","public APublicObject aChildMethod()","0","-","-","-","-"
"8073","BPackagePrivateObject","@Inject
  BPackagePrivateObject()","0","-","-","-","-"
"8074","inject","void inject(AParent aParent);","0","-","-","-","-"
"8075","inject","void inject(BChild aChild);","0","-","-","-","-"
"8076","inject","void inject(AGrandchild aGrandchild);","0","-","-","-","-"
"8077","Foo","@Inject Foo()","0","-","-","-","-"
"8078","Bar","@Inject Bar()","0","-","-","-","-"
"8079","provideString","@Provides
    static String provideString()","0","-","-","-","-"
"8080","foo","Foo foo();","0","-","-","-","-"
"8081","bar","Bar bar();","0","-","-","-","-"
"8082","instance","Builder instance(@BindsInstance BoundInstance instance);","0","-","-","-","-"
"8083","build","TestComponent build();","0","-","-","-","-"
"8084","foo","Foo foo();","0","-","-","-","-"
"8085","bar","Bar bar();","0","-","-","-","-"
"8086","instance","TestComponentWithFactory instance(@BindsInstance BoundInstance instance);","0","-","-","-","-"
"8087","testMemberWithInstanceName","@Test
  public void testMemberWithInstanceName()","0","-","-","-","-"
"8088","testMemberWithInstanceNameUsingFactory","@Test
  public void testMemberWithInstanceNameUsingFactory()","0","-","-","-","-"
"8089","sameName","@Inject void sameName(String sameName)","0","-","-","-","-"
"8090","sameName","@Inject void sameName(Object sameName)","0","-","-","-","-"
"8091","childSameName","public String childSameName()","0","-","-","-","-"
"8092","childSameNameStringWasInvoked","public boolean childSameNameStringWasInvoked()","0","-","-","-","-"
"8093","childSameNameObjectWasInvoked","public boolean childSameNameObjectWasInvoked()","0","-","-","-","-"
"8094","NonRequestedChild","@Inject
  NonRequestedChild()","0","-","-","-","-"
"8095","nonInjectMethodWithARawProvider","void nonInjectMethodWithARawProvider(Provider rawProvider)","0","-","-","-","-"
"8096","nonInjectMethodWithARawLazy","void nonInjectMethodWithARawLazy(Lazy rawLazy)","0","-","-","-","-"
"8097","nonInjectMethodWithARawMembersInjector","void nonInjectMethodWithARawMembersInjector(MembersInjector rawMembersInjector)","0","-","-","-","-"
"8098","OrderingModule","OrderingModule(Subtype subtype)","0","-","-","-","-"
"8099","provideToString","@Provides
    String provideToString()","0","-","-","-","-"
"8100","inject","void inject(Subtype subtype);","0","-","-","-","-"
"8101","First","@Inject
    First()","0","-","-","-","-"
"8102","testMembersInject_arrays","@Test public void testMembersInject_arrays()","0","-","-","-","-"
"8103","testMembersInject_nestedArrays","@Test public void testMembersInject_nestedArrays()","0","-","-","-","-"
"8104","testMembersInject_primitives","@Test public void testMembersInject_primitives()","0","-","-","-","-"
"8105","testMembersInject_overrides","@Test
  public void testMembersInject_overrides()","0","-","-","-","-"
"8106","testNonRequestedMembersInjector","@Test
  public void testNonRequestedMembersInjector()","0","-","-","-","-"
"8107","get","@Override
          public String get()","0","-","-","-","-"
"8108","getAMembersInjector","MembersInjector<A> getAMembersInjector();","0","-","-","-","-"
"8109","create","NonLocalMembersComponent create(@BindsInstance String value);","0","-","-","-","-"
"8110","testNonLocalMembersInjection","@Test
  public void testNonLocalMembersInjection()","0","-","-","-","-"
"8111","setUp","@Before
  public void setUp()","0","-","-","-","-"
"8112","optional","@Test
  public void optional()","0","-","-","-","-"
"8113","optionalProvider","@Test
  public void optionalProvider()","0","-","-","-","-"
"8114","optionalLazy","@Test
  public void optionalLazy()","0","-","-","-","-"
"8115","optionalLazyProvider","@Test
  public void optionalLazyProvider()","0","-","-","-","-"
"8116","qualifiedOptional","@Test
  public void qualifiedOptional()","0","-","-","-","-"
"8117","qualifiedOptionalProvider","@Test
  public void qualifiedOptionalProvider()","0","-","-","-","-"
"8118","qualifiedOptionalLazy","@Test
  public void qualifiedOptionalLazy()","0","-","-","-","-"
"8119","qualifiedOptionalLazyProvider","@Test
  public void qualifiedOptionalLazyProvider()","0","-","-","-","-"
"8120","components","@Test
  public void components()","0","-","-","-","-"
"8121","parameters","@Parameters(name = ""","0","-","-","-","-"
"8122","OptionalBindingComponentsPresentTest","public OptionalBindingComponentsPresentTest(OptionalBindingComponent component)","0","-","-","-","-"
"8123","optionalProvider","@Test
  public void optionalProvider()","0","-","-","-","-"
"8124","optionalLazy","@Test
  public void optionalLazy()","0","-","-","-","-"
"8125","optionalLazyProvider","@Test
  public void optionalLazyProvider()","0","-","-","-","-"
"8126","qualifiedOptional","@Test
  public void qualifiedOptional()","0","-","-","-","-"
"8127","qualifiedOptionalProvider","@Test
  public void qualifiedOptionalProvider()","0","-","-","-","-"
"8128","qualifiedOptionalLazy","@Test
  public void qualifiedOptionalLazy()","0","-","-","-","-"
"8129","qualifiedOptionalLazyProvider","@Test
  public void qualifiedOptionalLazyProvider()","0","-","-","-","-"
"8130","optionalNullableProvider","@Test
  public void optionalNullableProvider()","0","-","-","-","-"
"8131","optionalNullableLazy","@Test
  public void optionalNullableLazy()","0","-","-","-","-"
"8132","optionalNullableLazyProvider","@Test
  public void optionalNullableLazyProvider()","0","-","-","-","-"
"8133","optionalInstance","abstract Optional<Value> optionalInstance();","0","-","-","-","-"
"8134","optionalProvider","abstract Optional<Provider<Value>> optionalProvider();","0","-","-","-","-"
"8135","optionalLazy","abstract Optional<Lazy<Value>> optionalLazy();","0","-","-","-","-"
"8136","optionalLazyProvider","abstract Optional<Provider<Lazy<Value>>> optionalLazyProvider();","0","-","-","-","-"
"8137","InjectedThing","@Inject
    InjectedThing()","0","-","-","-","-"
"8138","value","@BindsOptionalOf
    abstract Value value();","0","-","-","-","-"
"8139","qualifiedValue","@BindsOptionalOf
    @SomeQualifier abstract Value qualifiedValue();","0","-","-","-","-"
"8140","qualifiedInjectedThing","@BindsOptionalOf
    @SomeQualifier abstract InjectedThing qualifiedInjectedThing();","0","-","-","-","-"
"8141","nullableObject","@BindsOptionalOf
    abstract Object nullableObject();","0","-","-","-","-"
"8142","values","@Provides
    static Values values(
        Optional<Value> optionalInstance,
        Optional<Provider<Value>> optionalProvider,
        Optional<Lazy<Value>> optionalLazy,
        Optional<Provider<Lazy<Value>>> optionalLazyProvider)","0","-","-","-","-"
"8143","qualifiedValues","@Provides
    @SomeQualifier
    static Values qualifiedValues(
        @SomeQualifier Optional<Value> optionalInstance,
        @SomeQualifier Optional<Provider<Value>> optionalProvider,
        @SomeQualifier Optional<Lazy<Value>> optionalLazy,
        @SomeQualifier Optional<Provider<Lazy<Value>>> optionalLazyProvider)","0","-","-","-","-"
"8144","value","/** @param cycle to demonstrate that optional","0","-","-","-","-"
"8145","qualifiedValue","@Provides
    @SomeQualifier static Value qualifiedValue()","0","-","-","-","-"
"8146","nullableObject","@Provides
    @Nullable
    static Object nullableObject()","0","-","-","-","-"
"8147","values","Values values();","0","-","-","-","-"
"8148","qualifiedValues","@SomeQualifier
    Values qualifiedValues();","0","-","-","-","-"
"8149","optionalNullableProvider","Optional<Provider<Object>> optionalNullableProvider();","0","-","-","-","-"
"8150","optionalNullableLazy","Optional<Lazy<Object>> optionalNullableLazy();","0","-","-","-","-"
"8151","optionalNullableLazyProvider","Optional<Provider<Lazy<Object>>> optionalNullableLazyProvider();","0","-","-","-","-"
"8152","presentChild","PresentOptionalBindingSubcomponent presentChild();","0","-","-","-","-"
"8153","getString","String getString();","0","-","-","-","-"
"8154","getString","String getString();","0","-","-","-","-"
"8155","getString","String getString();","0","-","-","-","-"
"8156","dep","Builder dep(Merged dep);","0","-","-","-","-"
"8157","build","TestComponent build();","0","-","-","-","-"
"8158","testSameMethodTwice","@Test
  public void testSameMethodTwice() throws Exception","0","-","-","-","-"
"8159","getString","Object getString();","0","-","-","-","-"
"8160","getString","Object getString();","0","-","-","-","-"
"8161","getString","@Override
    String getString();","0","-","-","-","-"
"8162","getString","String getString();","0","-","-","-","-"
"8163","dep","Builder dep(MergedOverride dep);","0","-","-","-","-"
"8164","build","TestOverrideComponent build();","0","-","-","-","-"
"8165","testPolymorphicOverridesStillCompiles","@Test
  public void testPolymorphicOverridesStillCompiles() throws Exception","0","-","-","-","-"
"8166","Thing","@Inject Thing(@SuppressWarnings(""unused"") OtherThing unused)","0","-","-","-","-"
"8167","primitive","int primitive();","0","-","-","-","-"
"8168","providerOfBoxedPrimitive","Provider<Integer> providerOfBoxedPrimitive();","0","-","-","-","-"
"8169","providePrimitive","@Provides
    static int providePrimitive()","0","-","-","-","-"
"8170","providerOfBoxedPrimitive","Provider<Integer> providerOfBoxedPrimitive();","0","-","-","-","-"
"8171","thingTwo","ThingTwo thingTwo();","0","-","-","-","-"
"8172","ThingTwo","@SuppressWarnings(""unused"")
    @Inject
    ThingTwo(
        Thing thing,
        NonComponentDependencyComponent nonComponentDependencyComponent,
        NonComponentDependencyComponent.ThingComponent thingComponent)","0","-","-","-","-"
"8173","thing","Thing thing();","0","-","-","-","-"
"8174","thing","@Override
    public Thing thing()","0","-","-","-","-"
"8175","OtherThing","@Inject
  public OtherThing(@SuppressWarnings(""unused"") int i)","0","-","-","-","-"
"8176","testThing","@Test public void testThing()","0","-","-","-","-"
"8177","fooFactory","FooFactory fooFactory();","0","-","-","-","-"
"8178","create","Foo create(Dep[] depArray);","0","-","-","-","-"
"8179","Foo","@AssistedInject
    Foo(@Assisted Dep[] depArray)","0","-","-","-","-"
"8180","testFooFactory","@Test
  public void testFooFactory()","0","-","-","-","-"
"8181","dupeTypeFactory","DupeTypeFactory dupeTypeFactory();","0","-","-","-","-"
"8182","dupeQualifierFactory","DupeQualifierFactory dupeQualifierFactory();","0","-","-","-","-"
"8183","unnecessaryQualifierFactory","UnnecessaryQualifierFactory unnecessaryQualifierFactory();","0","-","-","-","-"
"8184","swappedDupeTypeFactory","SwappedDupeTypeFactory swappedDupeTypeFactory();","0","-","-","-","-"
"8185","DupeType","@AssistedInject
    DupeType(@Assisted(""1"") String str1, @Assisted(""2"") String str2)","0","-","-","-","-"
"8186","create","DupeType create(@Assisted(""1"") String str1, @Assisted(""2"") String str2);","0","-","-","-","-"
"8187","testDupeTypeFactory","@Test
  public void testDupeTypeFactory()","0","-","-","-","-"
"8188","create","DupeType create(@Assisted(""2"") String str2, @Assisted(""1"") String str1);","0","-","-","-","-"
"8189","testSwappedDupeTypeFactory","@Test
  public void testSwappedDupeTypeFactory()","0","-","-","-","-"
"8190","DupeQualifier","@AssistedInject
    DupeQualifier(@Assisted(""1"") String str, @Assisted(""1"") int i)","0","-","-","-","-"
"8191","create","DupeQualifier create(@Assisted(""1"") String str, @Assisted(""1"") int i);","0","-","-","-","-"
"8192","testDupeQualifierFactory","@Test
  public void testDupeQualifierFactory()","0","-","-","-","-"
"8193","UnnecessaryQualifier","@AssistedInject
    UnnecessaryQualifier(@Assisted String str, @Assisted double d, @Assisted("""") int i)","0","-","-","-","-"
"8194","create","UnnecessaryQualifier create(@Assisted int i, @Assisted("""") String str, double d);","0","-","-","-","-"
"8195","testUnnecessaryQualifierFactory","@Test
  public void testUnnecessaryQualifierFactory()","0","-","-","-","-"
"8196","fooFactory","FooFactory fooFactory();","0","-","-","-","-"
"8197","barFactory","BarFactory barFactory();","0","-","-","-","-"
"8198","Foo","@AssistedInject
    Foo(@Assisted Bar bar)","0","-","-","-","-"
"8199","Bar","@AssistedInject
    Bar()","0","-","-","-","-"
"8200","create","Foo create(Bar bar);","0","-","-","-","-"
"8201","create","Bar create();","0","-","-","-","-"
"8202","testFooFactory","@Test
  public void testFooFactory()","0","-","-","-","-"
"8203","Foo","@AssistedInject
    Foo(@Assisted String arg, Bar bar)","0","-","-","-","-"
"8204","getBar","Bar getBar()","0","-","-","-","-"
"8205","getArg","String getArg()","0","-","-","-","-"
"8206","create","Foo create(String arg);","0","-","-","-","-"
"8207","create","TestComponent create(@BindsInstance Bar arg);","0","-","-","-","-"
"8208","fooFactory","FooFactory fooFactory();","0","-","-","-","-"
"8209","duplicatedParameterNames_doesNotConflict","@Test
  public void duplicatedParameterNames_doesNotConflict()","0","-","-","-","-"
"8210","uniqueParameterizedFooFactory","ParameterizedFooFactory<Dep2, AssistedDep2> uniqueParameterizedFooFactory();","0","-","-","-","-"
"8211","dupeParameterizedFooFactory","ParameterizedFooFactory<Dep1, AssistedDep1> dupeParameterizedFooFactory();","0","-","-","-","-"
"8212","bindingParameterizedFooFactory","ParameterizedFooFactory<Dep1, Dep1> bindingParameterizedFooFactory();","0","-","-","-","-"
"8213","fixedParameterizedFooFactory","FixedParameterizedFooFactory fixedParameterizedFooFactory();","0","-","-","-","-"
"8214","extendedParameterizedFooFactory","ExtendedFooFactory<Dep2, AssistedDep2> extendedParameterizedFooFactory();","0","-","-","-","-"
"8215","someEntryPoint","SomeEntryPoint someEntryPoint();","0","-","-","-","-"
"8216","Dep1","@Inject
    Dep1(Dep2 dep2, Dep3 dep3)","0","-","-","-","-"
"8217","Dep2","@Inject
    Dep2(Dep3 dep3)","0","-","-","-","-"
"8218","Dep3","@Inject
    Dep3(Dep4 dep4)","0","-","-","-","-"
"8219","Dep4","@Inject
    Dep4()","0","-","-","-","-"
"8220","ParameterizedFoo","@AssistedInject
    ParameterizedFoo(
        Dep1 dep1,
        @Assisted AssistedDep1 assistedDep1,
        Provider<DepT> depTProvider,
        @Assisted AssistedDepT assistedDepT,
        @Assisted int assistedInt,
        ParameterizedFooFactory<DepT, AssistedDepT> factory)","0","-","-","-","-"
"8221","create","ParameterizedFoo<DepT, AssistedDepT> create(
        AssistedDep1 assistedDep1, AssistedDepT assistedDepT, int assistedInt);","0","-","-","-","-"
"8222","testUniqueParameterizedFooFactory","@Test
  public void testUniqueParameterizedFooFactory()","0","-","-","-","-"
"8223","testDupeParameterizedFooFactory","@Test
  public void testDupeParameterizedFooFactory()","0","-","-","-","-"
"8224","testBindingParameterizedFooFactory","@Test
  public void testBindingParameterizedFooFactory()","0","-","-","-","-"
"8225","create","ParameterizedFoo<Dep2, AssistedDep2> create(
        AssistedDep1 assistedDep1, AssistedDep2 assistedDep2, int assistedInt);","0","-","-","-","-"
"8226","testFixedParameterizedFooFactory","@Test
  public void testFixedParameterizedFooFactory()","0","-","-","-","-"
"8227","create","ReturnT create(
        AssistedDep1 factoryAssistedDep1, AssistedDepT factoryAssistedDepT, int factoryAssistedInt);","0","-","-","-","-"
"8228","testExtendedFooFactory","@Test
  public void testExtendedFooFactory()","0","-","-","-","-"
"8229","SomeEntryPoint","@Inject
    SomeEntryPoint(ParameterizedFooFactory<Dep1, AssistedDep1> dupeParameterizedFooFactory)","0","-","-","-","-"
"8230","testParameterizedFooFactoryFromSomeEntryPoint","@Test
  public void testParameterizedFooFactoryFromSomeEntryPoint()","0","-","-","-","-"
"8231","foo","Foo foo();","0","-","-","-","-"
"8232","create","TestComponent create(
          @BindsInstance @AsComponentDependency Bar bar,
          @BindsInstance @AsComponentDependency BarFactory barFactory);","0","-","-","-","-"
"8233","providesBar","@Provides
    @AsProvides
    static Bar providesBar(@AsComponentDependency Bar bar)","0","-","-","-","-"
"8234","providesBarFactory","@Provides
    @AsProvides
    static BarFactory providesBarFactory(@AsComponentDependency BarFactory barFactory)","0","-","-","-","-"
"8235","bindsBar","@Binds
    @AsBinds
    Bar bindsBar(@AsComponentDependency Bar bar);","0","-","-","-","-"
"8236","bindsBarFactory","@Binds
    @AsBinds
    BarFactory bindsBarFactory(@AsComponentDependency BarFactory barFactory);","0","-","-","-","-"
"8237","optionalBar","@BindsOptionalOf
    @AsOptional
    Bar optionalBar();","0","-","-","-","-"
"8238","optionalBarFactory","@BindsOptionalOf
    @AsOptional
    BarFactory optionalBarFactory();","0","-","-","-","-"
"8239","providesOptionalBar","@Provides
    @AsOptional
    static Bar providesOptionalBar(@AsComponentDependency Bar bar)","0","-","-","-","-"
"8240","providesOptionalBarFactory","@Provides
    @AsOptional
    static BarFactory providesOptionalBarFactory(@AsComponentDependency BarFactory barFactory)","0","-","-","-","-"
"8241","barSet","@Multibinds
    @AsMultibinding
    Set<Bar> barSet();","0","-","-","-","-"
"8242","barFactorySet","@Multibinds
    @AsMultibinding
    Set<BarFactory> barFactorySet();","0","-","-","-","-"
"8243","providesMultibindingBar","@Provides
    @IntoSet
    @AsMultibinding
    static Bar providesMultibindingBar(@AsComponentDependency Bar bar)","0","-","-","-","-"
"8244","providesMultibindingBarFactory","@Provides
    @IntoSet
    @AsMultibinding
    static BarFactory providesMultibindingBarFactory(@AsComponentDependency BarFactory barFactory)","0","-","-","-","-"
"8245","unqualifiedBarSet","@Multibinds
    Set<Bar> unqualifiedBarSet();","0","-","-","-","-"
"8246","unqualifiedBarFactorySet","@Multibinds
    Set<BarFactory> unqualifiedBarFactorySet();","0","-","-","-","-"
"8247","providesUnqualifiedMultibindingBar","@Provides
    @IntoSet
    static Bar providesUnqualifiedMultibindingBar(@AsComponentDependency Bar bar)","0","-","-","-","-"
"8248","providesUnqualifiedMultibindingBarFactory","@Provides
    @IntoSet
    static BarFactory providesUnqualifiedMultibindingBarFactory(
        @AsComponentDependency BarFactory barFactory)","0","-","-","-","-"
"8249","Foo","@Inject
    Foo(
        BarFactory barFactory,
        @AsComponentDependency Bar barAsComponentDependency,
        @AsComponentDependency BarFactory barFactoryAsComponentDependency,
        @AsProvides Bar barAsProvides,
        @AsProvides BarFactory barFactoryAsProvides,
        @AsBinds Bar barAsBinds,
        @AsBinds BarFactory barFactoryAsBinds,
        @AsOptional Optional<Bar> optionalBar,
        @AsOptional Optional<BarFactory> optionalBarFactory,
        @AsMultibinding Set<Bar> barSet,
        @AsMultibinding Set<BarFactory> barFactorySet,
        Set<Bar> unqualifiedBarSet,
        Set<BarFactory> unqualifiedBarFactorySet)","0","-","-","-","-"
"8250","Bar","@AssistedInject
    Bar()","0","-","-","-","-"
"8251","create","Bar create();","0","-","-","-","-"
"8252","testFoo","@Test
  public void testFoo()","0","-","-","-","-"
"8253","fooFactory","FooFactory fooFactory();","0","-","-","-","-"
"8254","fooDataFactory","FooDataFactory fooDataFactory();","0","-","-","-","-"
"8255","barManagerFactory","BarManager.Factory barManagerFactory();","0","-","-","-","-"
"8256","testFooFactory","@Test
  public void testFooFactory()","0","-","-","-","-"
"8257","testFooDataFactory","@Test
  public void testFooDataFactory()","0","-","-","-","-"
"8258","testBarManager","@Test
  public void testBarManager()","0","-","-","-","-"
"8259","multibindingFooFactory","MultibindingFooFactory multibindingFooFactory();","0","-","-","-","-"
"8260","childComponent","ChildComponent.Builder childComponent();","0","-","-","-","-"
"8261","MultibindingFoo","@AssistedInject
    MultibindingFoo(@Assisted AssistedDep assistedDep, Set<String> stringSet)","0","-","-","-","-"
"8262","assistedDep","AssistedDep assistedDep()","0","-","-","-","-"
"8263","stringSet","Set<String> stringSet()","0","-","-","-","-"
"8264","multibindingFooFactory","MultibindingFooFactory multibindingFooFactory();","0","-","-","-","-"
"8265","build","ChildComponent build();","0","-","-","-","-"
"8266","parentString","@Provides
    @IntoSet
    String parentString()","0","-","-","-","-"
"8267","childString","@Provides
    @IntoSet
    String childString()","0","-","-","-","-"
"8268","createFoo","MultibindingFoo createFoo(AssistedDep factoryAssistedDep1);","0","-","-","-","-"
"8269","testAssistedFactoryWithMultibinding","@Test
  public void testAssistedFactoryWithMultibinding()","0","-","-","-","-"
"8270","AccessibleFoo","@AssistedInject
  AccessibleFoo(Dep dep, @Assisted AssistedDep assistedDep)","0","-","-","-","-"
"8271","InaccessibleFoo","@AssistedInject
  InaccessibleFoo(Dep dep, @Assisted AssistedDep assistedDep)","0","-","-","-","-"
"8272","Dep","@Inject
  Dep()","0","-","-","-","-"
"8273","create","InaccessibleFoo create(AssistedDep assistedDep);","0","-","-","-","-"
"8274","fooFactory","FooFactory fooFactory();","0","-","-","-","-"
"8275","bind","@Binds
    FooFactory bind(FooFactoryImpl impl);","0","-","-","-","-"
"8276","FooImpl","@AssistedInject
    FooImpl(Dep dep, @Assisted AssistedDep assistedDep)","0","-","-","-","-"
"8277","create","Foo create(AssistedDep assistedDep);","0","-","-","-","-"
"8278","create","@Override
    FooImpl create(AssistedDep assistedDep);","0","-","-","-","-"
"8279","Dep","@Inject
    Dep()","0","-","-","-","-"
"8280","testFooFactory","@Test
  public void testFooFactory()","0","-","-","-","-"
"8281","nestedSimpleFooFactory","SimpleFoo.Factory nestedSimpleFooFactory();","0","-","-","-","-"
"8282","nestedSimpleFooFactoryProvider","Provider<SimpleFoo.Factory> nestedSimpleFooFactoryProvider();","0","-","-","-","-"
"8283","nonNestedSimpleFooFactory","SimpleFooFactory nonNestedSimpleFooFactory();","0","-","-","-","-"
"8284","extendedSimpleFooFactory","ExtendedSimpleFooFactory extendedSimpleFooFactory();","0","-","-","-","-"
"8285","fooFactory","FooFactory fooFactory();","0","-","-","-","-"
"8286","abstractFooFactory","AbstractFooFactory abstractFooFactory();","0","-","-","-","-"
"8287","noAssistedParametersFooFactory","NoAssistedParametersFooFactory noAssistedParametersFooFactory();","0","-","-","-","-"
"8288","someEntryPoint","SomeEntryPoint someEntryPoint();","0","-","-","-","-"
"8289","SomeEntryPoint","@Inject
    SomeEntryPoint(
        SimpleFoo.Factory nestedSimpleFooFactory,
        Provider<SimpleFoo.Factory> nestedSimpleFooFactoryProvider,
        SimpleFooFactory nonNestedSimpleFooFactory,
        ExtendedSimpleFooFactory extendedSimpleFooFactory,
        FooFactory fooFactory,
        AbstractFooFactory abstractFooFactory,
        NoAssistedParametersFooFactory noAssistedParametersFooFactory)","0","-","-","-","-"
"8290","Dep1","@Inject
    Dep1(Dep2 dep2, Dep3 dep3)","0","-","-","-","-"
"8291","Dep2","@Inject
    Dep2(Dep3 dep3)","0","-","-","-","-"
"8292","Dep3","@Inject
    Dep3(Dep4 dep4)","0","-","-","-","-"
"8293","Dep4","@Inject
    Dep4()","0","-","-","-","-"
"8294","SimpleFoo","@AssistedInject
    SimpleFoo(@Assisted AssistedDep assistedDep)","0","-","-","-","-"
"8295","createSimpleFoo","SimpleFoo createSimpleFoo(AssistedDep factoryAssistedDep);","0","-","-","-","-"
"8296","staticMethod","static void staticMethod()","0","-","-","-","-"
"8297","defaultMethod","default void defaultMethod()","0","-","-","-","-"
"8298","createSimpleFoo","SimpleFoo createSimpleFoo(AssistedDep factoryAssistedDep1);","0","-","-","-","-"
"8299","staticMethod","static void staticMethod()","0","-","-","-","-"
"8300","staticSimpleFooMethod","static SimpleFoo staticSimpleFooMethod()","0","-","-","-","-"
"8301","defaultMethod","default void defaultMethod()","0","-","-","-","-"
"8302","defaultSimpleFooMethod","default SimpleFoo defaultSimpleFooMethod()","0","-","-","-","-"
"8303","Foo","@AssistedInject
    Foo(
        Dep1 dep1,
        @Assisted AssistedDep1 assistedDep1,
        Provider<Dep2> dep2Provider,
        @Assisted AssistedDep2 assistedDep2,
        @Assisted int assistedInt,
        FooFactory factory)","0","-","-","-","-"
"8304","createFoo","Foo createFoo(
        AssistedDep1 factoryAssistedDep1, AssistedDep2 factoryAssistedDep2, int factoryAssistedInt);","0","-","-","-","-"
"8305","createFoo","abstract Foo createFoo(
        AssistedDep1 factoryAssistedDep1, AssistedDep2 factoryAssistedDep2, int factoryAssistedInt);","0","-","-","-","-"
"8306","staticMethod","static void staticMethod()","0","-","-","-","-"
"8307","staticFooMethod","static Foo staticFooMethod()","0","-","-","-","-"
"8308","concreteMethod","void concreteMethod()","0","-","-","-","-"
"8309","concreteFooMethod","Foo concreteFooMethod()","0","-","-","-","-"
"8310","NoAssistedParametersFoo","@AssistedInject
    NoAssistedParametersFoo(
        Dep1 dep1, Provider<Dep2> dep2Provider, NoAssistedParametersFooFactory factory)","0","-","-","-","-"
"8311","createNoAssistedParametersFoo","NoAssistedParametersFoo createNoAssistedParametersFoo();","0","-","-","-","-"
"8312","testNestedSimpleFooFactory","@Test
  public void testNestedSimpleFooFactory()","0","-","-","-","-"
"8313","testNestedSimpleFooFactoryProvider","@Test
  public void testNestedSimpleFooFactoryProvider()","0","-","-","-","-"
"8314","testNonNestedSimpleFooFactory","@Test
  public void testNonNestedSimpleFooFactory()","0","-","-","-","-"
"8315","testExtendedSimpleFooFactory","@Test
  public void testExtendedSimpleFooFactory()","0","-","-","-","-"
"8316","testFooFactory","@Test
  public void testFooFactory()","0","-","-","-","-"
"8317","testNoAssistedParametersFooFactory","@Test
  public void testNoAssistedParametersFooFactory()","0","-","-","-","-"
"8318","testAssistedFactoryFromSomeEntryPoint","@Test
  public void testAssistedFactoryFromSomeEntryPoint()","0","-","-","-","-"
"8319","accessibleFooFactory","AccessibleFooFactory accessibleFooFactory();","0","-","-","-","-"
"8320","inaccessibleFooFactory","InaccessibleFooFactory inaccessibleFooFactory();","0","-","-","-","-"
"8321","create","AccessibleFoo create(AssistedDep factoryAssistedDep);","0","-","-","-","-"
"8322","testAccessibleFooFactory","@Test
  public void testAccessibleFooFactory()","0","-","-","-","-"
"8323","testInaccessibleFooFactory","@Test
  public void testInaccessibleFooFactory()","0","-","-","-","-"
"8324","testIncompatible","@Test
  public void testIncompatible()","0","-","-","-","-"
"8325","assertGwtIncompatible","private void assertGwtIncompatible(Class<?> clazz)","0","-","-","-","-"
"8326","OnClass","@Inject
    OnClass()","0","-","-","-","-"
"8327","OnConstructor","@Inject
    @GwtIncompatible
    OnConstructor()","0","-","-","-","-"
"8328","OnOuterClass","@Inject
      OnOuterClass()","0","-","-","-","-"
"8329","onModule","@Provides
    static String onModule()","0","-","-","-","-"
"8330","onMethod","@GwtIncompatible
    @Provides
    static String onMethod()","0","-","-","-","-"
"8331","longCycle","/**
   * Tests a cycle long enough that the real factory is created in a separate initialize method from
   * the delegate factory.
   */
  @Test
  public void longCycle()","0","-","-","-","-"
"8332","longCycleHasMoreThanOneInitializeMethod","/**
   * Fails if","0","-","-","-","-"
"8333","provideObject","@Provides
    @Singleton
    Object provideObject()","0","-","-","-","-"
"8334","provideReentrantObject","@Provides
    @Singleton
    @Reentrant
    Object provideReentrantObject(@Reentrant Provider<Object> provider)","0","-","-","-","-"
"8335","getObject","Object getObject();","0","-","-","-","-"
"8336","getReentrantObject","@Reentrant Object getReentrantObject();","0","-","-","-","-"
"8337","testNonReentrant","@Test
  public void testNonReentrant()","0","-","-","-","-"
"8338","provideObject","@Override Object provideObject()","0","-","-","-","-"
"8339","testReentrant","@Test
  public void testReentrant()","0","-","-","-","-"
"8340","provideReentrantObject","@Override Object provideReentrantObject(Provider<Object> provider)","0","-","-","-","-"
"8341","testFailingReentrant","@Test
  public void testFailingReentrant()","0","-","-","-","-"
"8342","provideReentrantObject","@Override Object provideReentrantObject(Provider<Object> provider)","0","-","-","-","-"
"8343","testGetFromMultipleThreads","@Test(timeout = 5000)

  public void testGetFromMultipleThreads() throws Exception","0","-","-","-","-"
"8344","provideObject","@Override
                  Object provideObject()","0","-","-","-","-"
"8345","Class1","@Inject Class1(Class2 class2)","0","-","-","-","-"
"8346","Class2","@Inject Class2(Class3 class3)","0","-","-","-","-"
"8347","Class3","@Inject Class3(Class4 class4)","0","-","-","-","-"
"8348","Class4","@Inject Class4(Class5 class5)","0","-","-","-","-"
"8349","Class5","@Inject Class5(Class6 class6)","0","-","-","-","-"
"8350","Class6","@Inject Class6(Class7 class7)","0","-","-","-","-"
"8351","Class7","@Inject Class7(Class8 class8)","0","-","-","-","-"
"8352","Class8","@Inject Class8(Class9 class9)","0","-","-","-","-"
"8353","Class9","@Inject Class9(Class10 class10)","0","-","-","-","-"
"8354","Class10","@Inject Class10(Class11 class11)","0","-","-","-","-"
"8355","Class11","@Inject Class11(Class12 class12)","0","-","-","-","-"
"8356","Class12","@Inject Class12(Class13 class13)","0","-","-","-","-"
"8357","Class13","@Inject Class13(Class14 class14)","0","-","-","-","-"
"8358","Class14","@Inject Class14(Class15 class15)","0","-","-","-","-"
"8359","Class15","@Inject Class15(Class16 class16)","0","-","-","-","-"
"8360","Class16","@Inject Class16(Class17 class17)","0","-","-","-","-"
"8361","Class17","@Inject Class17(Class18 class18)","0","-","-","-","-"
"8362","Class18","@Inject Class18(Class19 class19)","0","-","-","-","-"
"8363","Class19","@Inject Class19(Class20 class20)","0","-","-","-","-"
"8364","Class20","@Inject Class20(Class21 class21)","0","-","-","-","-"
"8365","Class21","@Inject Class21(Class22 class22)","0","-","-","-","-"
"8366","Class22","@Inject Class22(Class23 class23)","0","-","-","-","-"
"8367","Class23","@Inject Class23(Class24 class24)","0","-","-","-","-"
"8368","Class24","@Inject Class24(Class25 class25)","0","-","-","-","-"
"8369","Class25","@Inject Class25(Class26 class26)","0","-","-","-","-"
"8370","Class26","@Inject Class26(Class27 class27)","0","-","-","-","-"
"8371","Class27","@Inject Class27(Class28 class28)","0","-","-","-","-"
"8372","Class28","@Inject Class28(Class29 class29)","0","-","-","-","-"
"8373","Class29","@Inject Class29(Class30 class30)","0","-","-","-","-"
"8374","Class30","@Inject Class30(Class31 class31)","0","-","-","-","-"
"8375","Class31","@Inject Class31(Class32 class32)","0","-","-","-","-"
"8376","Class32","@Inject Class32(Class33 class33)","0","-","-","-","-"
"8377","Class33","@Inject Class33(Class34 class34)","0","-","-","-","-"
"8378","Class34","@Inject Class34(Class35 class35)","0","-","-","-","-"
"8379","Class35","@Inject Class35(Class36 class36)","0","-","-","-","-"
"8380","Class36","@Inject Class36(Class37 class37)","0","-","-","-","-"
"8381","Class37","@Inject Class37(Class38 class38)","0","-","-","-","-"
"8382","Class38","@Inject Class38(Class39 class39)","0","-","-","-","-"
"8383","Class39","@Inject Class39(Class40 class40)","0","-","-","-","-"
"8384","Class40","@Inject Class40(Class41 class41)","0","-","-","-","-"
"8385","Class41","@Inject Class41(Class42 class42)","0","-","-","-","-"
"8386","Class42","@Inject Class42(Class43 class43)","0","-","-","-","-"
"8387","Class43","@Inject Class43(Class44 class44)","0","-","-","-","-"
"8388","Class44","@Inject Class44(Class45 class45)","0","-","-","-","-"
"8389","Class45","@Inject Class45(Class46 class46)","0","-","-","-","-"
"8390","Class46","@Inject Class46(Class47 class47)","0","-","-","-","-"
"8391","Class47","@Inject Class47(Class48 class48)","0","-","-","-","-"
"8392","Class48","@Inject Class48(Class49 class49)","0","-","-","-","-"
"8393","Class49","@Inject Class49(Class50 class50)","0","-","-","-","-"
"8394","Class50","@Inject Class50(Class51 class51)","0","-","-","-","-"
"8395","Class51","@Inject Class51(Class52 class52)","0","-","-","-","-"
"8396","Class52","@Inject Class52(Class53 class53)","0","-","-","-","-"
"8397","Class53","@Inject Class53(Class54 class54)","0","-","-","-","-"
"8398","Class54","@Inject Class54(Class55 class55)","0","-","-","-","-"
"8399","Class55","@Inject Class55(Class56 class56)","0","-","-","-","-"
"8400","Class56","@Inject Class56(Class57 class57)","0","-","-","-","-"
"8401","Class57","@Inject Class57(Class58 class58)","0","-","-","-","-"
"8402","Class58","@Inject Class58(Class59 class59)","0","-","-","-","-"
"8403","Class59","@Inject Class59(Class60 class60)","0","-","-","-","-"
"8404","Class60","@Inject Class60(Class61 class61)","0","-","-","-","-"
"8405","Class61","@Inject Class61(Class62 class62)","0","-","-","-","-"
"8406","Class62","@Inject Class62(Class63 class63)","0","-","-","-","-"
"8407","Class63","@Inject Class63(Class64 class64)","0","-","-","-","-"
"8408","Class64","@Inject Class64(Class65 class65)","0","-","-","-","-"
"8409","Class65","@Inject Class65(Class66 class66)","0","-","-","-","-"
"8410","Class66","@Inject Class66(Class67 class67)","0","-","-","-","-"
"8411","Class67","@Inject Class67(Class68 class68)","0","-","-","-","-"
"8412","Class68","@Inject Class68(Class69 class69)","0","-","-","-","-"
"8413","Class69","@Inject Class69(Class70 class70)","0","-","-","-","-"
"8414","Class70","@Inject Class70(Class71 class71)","0","-","-","-","-"
"8415","Class71","@Inject Class71(Class72 class72)","0","-","-","-","-"
"8416","Class72","@Inject Class72(Class73 class73)","0","-","-","-","-"
"8417","Class73","@Inject Class73(Class74 class74)","0","-","-","-","-"
"8418","Class74","@Inject Class74(Class75 class75)","0","-","-","-","-"
"8419","Class75","@Inject Class75(Class76 class76)","0","-","-","-","-"
"8420","Class76","@Inject Class76(Class77 class77)","0","-","-","-","-"
"8421","Class77","@Inject Class77(Class78 class78)","0","-","-","-","-"
"8422","Class78","@Inject Class78(Class79 class79)","0","-","-","-","-"
"8423","Class79","@Inject Class79(Class80 class80)","0","-","-","-","-"
"8424","Class80","@Inject Class80(Class81 class81)","0","-","-","-","-"
"8425","Class81","@Inject Class81(Class82 class82)","0","-","-","-","-"
"8426","Class82","@Inject Class82(Class83 class83)","0","-","-","-","-"
"8427","Class83","@Inject Class83(Class84 class84)","0","-","-","-","-"
"8428","Class84","@Inject Class84(Class85 class85)","0","-","-","-","-"
"8429","Class85","@Inject Class85(Class86 class86)","0","-","-","-","-"
"8430","Class86","@Inject Class86(Class87 class87)","0","-","-","-","-"
"8431","Class87","@Inject Class87(Class88 class88)","0","-","-","-","-"
"8432","Class88","@Inject Class88(Class89 class89)","0","-","-","-","-"
"8433","Class89","@Inject Class89(Class90 class90)","0","-","-","-","-"
"8434","Class90","@Inject Class90(Class91 class91)","0","-","-","-","-"
"8435","Class91","@Inject Class91(Class92 class92)","0","-","-","-","-"
"8436","Class92","@Inject Class92(Class93 class93)","0","-","-","-","-"
"8437","Class93","@Inject Class93(Class94 class94)","0","-","-","-","-"
"8438","Class94","@Inject Class94(Class95 class95)","0","-","-","-","-"
"8439","Class95","@Inject Class95(Class96 class96)","0","-","-","-","-"
"8440","Class96","@Inject Class96(Class97 class97)","0","-","-","-","-"
"8441","Class97","@Inject Class97(Class98 class98)","0","-","-","-","-"
"8442","Class98","@Inject Class98(Class99 class99)","0","-","-","-","-"
"8443","Class99","@Inject Class99(Class100 class100)","0","-","-","-","-"
"8444","Class100","@Inject Class100(Class101 class101)","0","-","-","-","-"
"8445","Class101","@Inject Class101(Provider<Class1> class1Provider)","0","-","-","-","-"
"8446","class1","Class1 class1();","0","-","-","-","-"
"8447","LongCycle","private LongCycle()","0","-","-","-","-"
"8448","Cycles","private Cycles()","0","-","-","-","-"
"8449","A","@Inject
    A(E e, B b)","0","-","-","-","-"
"8450","B","@Inject
    B(C c)","0","-","-","-","-"
"8451","C","@Inject
    C(Provider<A> aProvider)","0","-","-","-","-"
"8452","D","@Inject
    D(B b)","0","-","-","-","-"
"8453","E","@Inject
    E(D d)","0","-","-","-","-"
"8454","S","@Inject
    S(Provider<S> sProvider)","0","-","-","-","-"
"8455","X","@Inject
    X(Y y)","0","-","-","-","-"
"8456","Y","@Inject
    Y(Map<String, Provider<X>> mapOfProvidersOfX, Map<String, Provider<Y>> mapOfProvidersOfY)","0","-","-","-","-"
"8457","x","@Binds
    @IntoMap
    @StringKey(""X"")
    abstract X x(X x);","0","-","-","-","-"
"8458","y","@Binds
    @IntoMap
    @StringKey(""Y"")
    abstract Y y(Y y);","0","-","-","-","-"
"8459","y","Y y();","0","-","-","-","-"
"8460","a","A a();","0","-","-","-","-"
"8461","c","C c();","0","-","-","-","-"
"8462","child","ChildCycleComponent child();","0","-","-","-","-"
"8463","provideObjectWithCycle","@Provides
    static Object provideObjectWithCycle(@SuppressWarnings(""unused"") Provider<Object> object)","0","-","-","-","-"
"8464","s","S s();","0","-","-","-","-"
"8465","a","@SuppressWarnings(""dependency-cycle"")
    A a();","0","-","-","-","-"
"8466","object","@SuppressWarnings(""dependency-cycle"")
    Object object();","0","-","-","-","-"
"8467","Bar","@Inject
    Bar(Provider<Foo> fooProvider)","0","-","-","-","-"
"8468","bar","Bar bar();","0","-","-","-","-"
"8469","foo","@Binds
    abstract Foo foo(Bar bar);","0","-","-","-","-"
"8470","providerIndirectionSelfCycle","@Test
  public void providerIndirectionSelfCycle()","0","-","-","-","-"
"8471","providerIndirectionCycle","@Test
  public void providerIndirectionCycle()","0","-","-","-","-"
"8472","lazyIndirectionSelfCycle","@Test
  public void lazyIndirectionSelfCycle()","0","-","-","-","-"
"8473","lazyIndirectionCycle","@Test
  public void lazyIndirectionCycle()","0","-","-","-","-"
"8474","subcomponentIndirectionCycle","@Test
  public void subcomponentIndirectionCycle()","0","-","-","-","-"
"8475","providerMapIndirectionCycle","@Test
  public void providerMapIndirectionCycle()","0","-","-","-","-"
"8476","cycleWithDeferredBinds","/**
   * Tests that a cycle where a","0","-","-","-","-"
"8477","primitives","@Theory public void primitives(BasicComponent basicComponent)","0","-","-","-","-"
"8478","boxedPrimitives","@Theory public void boxedPrimitives(BasicComponent basicComponent)","0","-","-","-","-"
"8479","boxedPrimitiveProviders","@Theory public void boxedPrimitiveProviders(BasicComponent basicComponent)","0","-","-","-","-"
"8480","primitiveArrays","@Theory public void primitiveArrays(BasicComponent basicComponent)","0","-","-","-","-"
"8481","primitiveArrayProviders","@Theory public void primitiveArrayProviders(BasicComponent basicComponent)","0","-","-","-","-"
"8482","noOpMembersInjection","@Theory public void noOpMembersInjection(BasicComponent basicComponent)","0","-","-","-","-"
"8483","basicObject_noDeps","@Theory public void basicObject_noDeps(BasicComponent basicComponent)","0","-","-","-","-"
"8484","inheritedMembersInjection","@Theory public void inheritedMembersInjection(BasicComponent basicComponent)","0","-","-","-","-"
"8485","nullableInjection","@Theory
  public void nullableInjection(BasicComponent basicComponent)","0","-","-","-","-"
"8486","providerOfLazy","@Theory
  public void providerOfLazy(BasicComponent basicComponent)","0","-","-","-","-"
"8487","thing","Thing thing();","0","-","-","-","-"
"8488","injectedThing","InjectedThing injectedThing();","0","-","-","-","-"
"8489","nestedFoo","@Test public void nestedFoo()","0","-","-","-","-"
"8490","nestedBar","@Test public void nestedBar()","0","-","-","-","-"
"8491","nullObject","@Provides
  @Nullable
  static Object nullObject()","0","-","-","-","-"
"8492","provideByte","@Provides static byte provideByte()","0","-","-","-","-"
"8493","provideChar","@Provides static char provideChar()","0","-","-","-","-"
"8494","provideShort","@Provides static short provideShort()","0","-","-","-","-"
"8495","provideInt","@Provides static int provideInt()","0","-","-","-","-"
"8496","provideLong","@Provides static long provideLong()","0","-","-","-","-"
"8497","provideBoolean","@Provides static boolean provideBoolean()","0","-","-","-","-"
"8498","provideFloat","@Provides static float provideFloat()","0","-","-","-","-"
"8499","boundDouble","@Provides static double boundDouble()","0","-","-","-","-"
"8500","provideByteArray","@Provides static byte[] provideByteArray()","0","-","-","-","-"
"8501","provideCharArray","@Provides static char[] provideCharArray()","0","-","-","-","-"
"8502","provideShortArray","@Provides static short[] provideShortArray()","0","-","-","-","-"
"8503","provideIntArray","@Provides static int[] provideIntArray()","0","-","-","-","-"
"8504","provideLongArray","@Provides static long[] provideLongArray()","0","-","-","-","-"
"8505","provideBooleanArray","@Provides static boolean[] provideBooleanArray()","0","-","-","-","-"
"8506","provideFloatArray","@Provides static float[] provideFloatArray()","0","-","-","-","-"
"8507","boundDoubleArray","@Provides static double[] boundDoubleArray()","0","-","-","-","-"
"8508","throwAParty","void throwAParty()","0","-","-","-","-"
"8509","Thing","@Inject Thing(@SuppressWarnings(""unused"") OtherThing unused)","0","-","-","-","-"
"8510","instance","T instance();","0","-","-","-","-"
"8511","provider","Provider<T> provider();","0","-","-","-","-"
"8512","lazy","Lazy<T> lazy();","0","-","-","-","-"
"8513","membersInjector","MembersInjector<T> membersInjector();","0","-","-","-","-"
"8514","injectMembers","void injectMembers(T t);","0","-","-","-","-"
"8515","injectMembersAndReturn","T injectMembersAndReturn(T t);","0","-","-","-","-"
"8516","inheritedThing","Thing inheritedThing();","0","-","-","-","-"
"8517","OtherThing","@Inject
  public OtherThing(@SuppressWarnings(""unused"") int i)","0","-","-","-","-"
"8518","inheritedThing","Thing inheritedThing();","0","-","-","-","-"
"8519","InjectedThing","@Inject InjectedThing(
      byte primitiveByte,
      char primitiveChar,
      short primitiveShort,
      int primitiveInt,
      long primitiveLong,
      boolean primitiveBoolean,
      float primitiveFloat,
      double primitiveDouble,

      Provider<Byte> byteProvider,
      Provider<Character> charProvider,
      Provider<Short> shortProvider,
      Provider<Integer> intProvider,
      Provider<Long> longProvider,
      Provider<Boolean> booleanProvider,
      Provider<Float> floatProvider,
      Provider<Double> doubleProvider,

      Lazy<Byte> lazyByte,
      Lazy<Character> lazyChar,
      Lazy<Short> lazyShort,
      Lazy<Integer> lazyInt,
      Lazy<Long> lazyLong,
      Lazy<Boolean> lazyBoolean,
      Lazy<Float> lazyFloat,
      Lazy<Double> lazyDouble,

      Byte boxedBype,
      Character boxedChar,
      Short boxedShort,
      Integer boxedInt,
      Long boxedLong,
      Boolean boxedBoolean,
      Float boxedFloat,
      Double boxedDouble,

      byte[] byteArray,
      char[] charArray,
      short[] shortArray,
      int[] intArray,
      long[] longArray,
      boolean[] booleanArray,
      float[] floatArray,
      double[] doubleArray,

      Provider<byte[]> byteArrayProvider,
      Provider<char[]> charArrayProvider,
      Provider<short[]> shortArrayProvider,
      Provider<int[]> intArrayProvider,
      Provider<long[]> longArrayProvider,
      Provider<boolean[]> booleanArrayProvider,
      Provider<float[]> floatArrayProvider,
      Provider<double[]> doubleArrayProvider,

      Lazy<byte[]> lazyByteArray,
      Lazy<char[]> lazyCharArray,
      Lazy<short[]> lazyShortArray,
      Lazy<int[]> lazyIntArray,
      Lazy<long[]> lazyLongArray,
      Lazy<boolean[]> lazyBooleanArray,
      Lazy<float[]> lazy,
      Lazy<double[]> lazyDoubleArray,

      Thing thing,
      Provider<Thing> thingProvider,
      Lazy<Thing> lazyThing,
      Provider<Lazy<Thing>> lazyThingProvider,
      MembersInjector<Thing> thingMembersInjector)","0","-","-","-","-"
"8520","primitiveByte","@Inject void primitiveByte(byte primitiveByte)","0","-","-","-","-"
"8521","primitiveChar","@Inject void primitiveChar(char primitiveChar)","0","-","-","-","-"
"8522","primitiveShort","@Inject void primitiveShort(short primitiveShort)","0","-","-","-","-"
"8523","primitiveInt","@Inject void primitiveInt(int primitiveInt)","0","-","-","-","-"
"8524","primitiveLong","@Inject void primitiveLong(long primitiveLong)","0","-","-","-","-"
"8525","primitiveBoolean","@Inject void primitiveBoolean(boolean primitiveBoolean)","0","-","-","-","-"
"8526","primitiveFloat","@Inject void primitiveFloat(float primitiveFloat)","0","-","-","-","-"
"8527","primitiveDouble","@Inject void primitiveDouble(double primitiveDouble)","0","-","-","-","-"
"8528","byteProvider","@Inject void byteProvider(Provider<Byte> byteProvider)","0","-","-","-","-"
"8529","charProvider","@Inject void charProvider(Provider<Character> charProvider)","0","-","-","-","-"
"8530","shortProvider","@Inject void shortProvider(Provider<Short> shortProvider)","0","-","-","-","-"
"8531","intProvider","@Inject void intProvider(Provider<Integer> intProvider)","0","-","-","-","-"
"8532","longProvider","@Inject void longProvider(Provider<Long> longProvider)","0","-","-","-","-"
"8533","booleanProvider","@Inject void booleanProvider(Provider<Boolean> booleanProvider)","0","-","-","-","-"
"8534","floatProvider","@Inject void floatProvider(Provider<Float> floatProvider)","0","-","-","-","-"
"8535","doubleProvider","@Inject void doubleProvider(Provider<Double> doubleProvider)","0","-","-","-","-"
"8536","lazyByte","@Inject void lazyByte(Lazy<Byte> lazyByte)","0","-","-","-","-"
"8537","lazyChar","@Inject void lazyChar(Lazy<Character> lazyChar)","0","-","-","-","-"
"8538","lazyShort","@Inject void lazyShort(Lazy<Short> lazyShort)","0","-","-","-","-"
"8539","lazyInt","@Inject void lazyInt(Lazy<Integer> lazyInt)","0","-","-","-","-"
"8540","lazyLong","@Inject void lazyLong(Lazy<Long> lazyLong)","0","-","-","-","-"
"8541","lazyBoolean","@Inject void lazyBoolean(Lazy<Boolean> lazyBoolean)","0","-","-","-","-"
"8542","lazyFloat","@Inject void lazyFloat(Lazy<Float> lazyFloat)","0","-","-","-","-"
"8543","lazyDouble","@Inject void lazyDouble(Lazy<Double> lazyDouble)","0","-","-","-","-"
"8544","boxedBype","@Inject void boxedBype(Byte boxedBype)","0","-","-","-","-"
"8545","boxedChar","@Inject void boxedChar(Character boxedChar)","0","-","-","-","-"
"8546","boxedShort","@Inject void boxedShort(Short boxedShort)","0","-","-","-","-"
"8547","boxedInt","@Inject void boxedInt(Integer boxedInt)","0","-","-","-","-"
"8548","boxedLong","@Inject void boxedLong(Long boxedLong)","0","-","-","-","-"
"8549","boxedBoolean","@Inject void boxedBoolean(Boolean boxedBoolean)","0","-","-","-","-"
"8550","boxedFloat","@Inject void boxedFloat(Float boxedFloat)","0","-","-","-","-"
"8551","boxedDouble","@Inject void boxedDouble(Double boxedDouble)","0","-","-","-","-"
"8552","byteArray","@Inject void byteArray(byte[] byteArray)","0","-","-","-","-"
"8553","charArray","@Inject void charArray(char[] charArray)","0","-","-","-","-"
"8554","shortArray","@Inject void shortArray(short[] shortArray)","0","-","-","-","-"
"8555","intArray","@Inject void intArray(int[] intArray)","0","-","-","-","-"
"8556","longArray","@Inject void longArray(long[] longArray)","0","-","-","-","-"
"8557","booleanArray","@Inject void booleanArray(boolean[] booleanArray)","0","-","-","-","-"
"8558","floatArray","@Inject void floatArray(float[] floatArray)","0","-","-","-","-"
"8559","doubleArray","@Inject void doubleArray(double[] doubleArray)","0","-","-","-","-"
"8560","byteArrayProvider","@Inject void byteArrayProvider(Provider<byte[]> byteArrayProvider)","0","-","-","-","-"
"8561","charArrayProvider","@Inject void charArrayProvider(Provider<char[]> charArrayProvider)","0","-","-","-","-"
"8562","shortArrayProvider","@Inject void shortArrayProvider(Provider<short[]> shortArrayProvider)","0","-","-","-","-"
"8563","intArrayProvider","@Inject void intArrayProvider(Provider<int[]> intArrayProvider)","0","-","-","-","-"
"8564","longArrayProvider","@Inject void longArrayProvider(Provider<long[]> longArrayProvider)","0","-","-","-","-"
"8565","booleanArrayProvider","@Inject void booleanArrayProvider(Provider<boolean[]> booleanArrayProvider)","0","-","-","-","-"
"8566","floatArrayProvider","@Inject void floatArrayProvider(Provider<float[]> floatArrayProvider)","0","-","-","-","-"
"8567","doubleArrayProvider","@Inject void doubleArrayProvider(Provider<double[]> doubleArrayProvider)","0","-","-","-","-"
"8568","lazyByteArray","@Inject void lazyByteArray(Lazy<byte[]> lazyByteArray)","0","-","-","-","-"
"8569","lazyCharArray","@Inject void lazyCharArray(Lazy<char[]> lazyCharArray)","0","-","-","-","-"
"8570","lazyShortArray","@Inject void lazyShortArray(Lazy<short[]> lazyShortArray)","0","-","-","-","-"
"8571","lazyIntArray","@Inject void lazyIntArray(Lazy<int[]> lazyIntArray)","0","-","-","-","-"
"8572","lazyLongArray","@Inject void lazyLongArray(Lazy<long[]> lazyLongArray)","0","-","-","-","-"
"8573","lazyBooleanArray","@Inject void lazyBooleanArray(Lazy<boolean[]> lazyBooleanArray)","0","-","-","-","-"
"8574","lazy","@Inject void lazy(Lazy<float[]> lazy)","0","-","-","-","-"
"8575","lazyThingProvider","@Inject void lazyThingProvider(Provider<Lazy<Thing>> lazyThingProvider)","0","-","-","-","-"
"8576","lazyDoubleArray","@Inject void lazyDoubleArray(Lazy<double[]> lazyDoubleArray)","0","-","-","-","-"
"8577","thing","@Inject void thing(Thing thing)","0","-","-","-","-"
"8578","thingProvider","@Inject void thingProvider(Provider<Thing> thingProvider)","0","-","-","-","-"
"8579","lazyThing","@Inject void lazyThing(Lazy<Thing> lazyThing)","0","-","-","-","-"
"8580","thingMembersInjector","@Inject void thingMembersInjector(MembersInjector<Thing> thingMembersInjector)","0","-","-","-","-"
"8581","getByte","byte getByte();","0","-","-","-","-"
"8582","getChar","char getChar();","0","-","-","-","-"
"8583","getShort","short getShort();","0","-","-","-","-"
"8584","getInt","int getInt();","0","-","-","-","-"
"8585","getLong","long getLong();","0","-","-","-","-"
"8586","getBoolean","boolean getBoolean();","0","-","-","-","-"
"8587","getFloat","float getFloat();","0","-","-","-","-"
"8588","getDouble","double getDouble();","0","-","-","-","-"
"8589","getBoxedByte","Byte getBoxedByte();","0","-","-","-","-"
"8590","getBoxedChar","Character getBoxedChar();","0","-","-","-","-"
"8591","getBoxedShort","Short getBoxedShort();","0","-","-","-","-"
"8592","getBoxedInt","Integer getBoxedInt();","0","-","-","-","-"
"8593","getBoxedLong","Long getBoxedLong();","0","-","-","-","-"
"8594","getBoxedBoolean","Boolean getBoxedBoolean();","0","-","-","-","-"
"8595","getBoxedFloat","Float getBoxedFloat();","0","-","-","-","-"
"8596","getBoxedDouble","Double getBoxedDouble();","0","-","-","-","-"
"8597","getByteProvider","Provider<Byte> getByteProvider();","0","-","-","-","-"
"8598","getCharProvider","Provider<Character> getCharProvider();","0","-","-","-","-"
"8599","getShortProvider","Provider<Short> getShortProvider();","0","-","-","-","-"
"8600","getIntProvider","Provider<Integer> getIntProvider();","0","-","-","-","-"
"8601","getLongProvider","Provider<Long> getLongProvider();","0","-","-","-","-"
"8602","getBooleanProvider","Provider<Boolean> getBooleanProvider();","0","-","-","-","-"
"8603","getFloatProvider","Provider<Float> getFloatProvider();","0","-","-","-","-"
"8604","getDoubleProvider","Provider<Double> getDoubleProvider();","0","-","-","-","-"
"8605","getByteArray","byte[] getByteArray();","0","-","-","-","-"
"8606","getCharArray","char[] getCharArray();","0","-","-","-","-"
"8607","getShortArray","short[] getShortArray();","0","-","-","-","-"
"8608","getIntArray","int[] getIntArray();","0","-","-","-","-"
"8609","getLongArray","long[] getLongArray();","0","-","-","-","-"
"8610","getBooleanArray","boolean[] getBooleanArray();","0","-","-","-","-"
"8611","getFloatArray","float[] getFloatArray();","0","-","-","-","-"
"8612","getDoubleArray","double[] getDoubleArray();","0","-","-","-","-"
"8613","getByteArrayProvider","Provider<byte[]> getByteArrayProvider();","0","-","-","-","-"
"8614","getCharArrayProvider","Provider<char[]> getCharArrayProvider();","0","-","-","-","-"
"8615","getShortArrayProvider","Provider<short[]> getShortArrayProvider();","0","-","-","-","-"
"8616","getIntArrayProvider","Provider<int[]> getIntArrayProvider();","0","-","-","-","-"
"8617","getLongArrayProvider","Provider<long[]> getLongArrayProvider();","0","-","-","-","-"
"8618","getBooleanArrayProvider","Provider<boolean[]> getBooleanArrayProvider();","0","-","-","-","-"
"8619","getFloatArrayProvider","Provider<float[]> getFloatArrayProvider();","0","-","-","-","-"
"8620","getDoubleArrayProvider","Provider<double[]> getDoubleArrayProvider();","0","-","-","-","-"
"8621","noOpMembersInjection","Object noOpMembersInjection(Object obviouslyDoesNotHaveMembersToInject);","0","-","-","-","-"
"8622","thing","Thing thing();","0","-","-","-","-"
"8623","injectedThing","InjectedThing injectedThing();","0","-","-","-","-"
"8624","injectedThingProvider","Provider<InjectedThing> injectedThingProvider();","0","-","-","-","-"
"8625","lazyInjectedThing","Lazy<InjectedThing> lazyInjectedThing();","0","-","-","-","-"
"8626","lazyInjectedThingProvider","Provider<Lazy<InjectedThing>> lazyInjectedThingProvider();","0","-","-","-","-"
"8627","injectedThingMembersInjector","MembersInjector<InjectedThing> injectedThingMembersInjector();","0","-","-","-","-"
"8628","nullObject","@Nullable Object nullObject();","0","-","-","-","-"
"8629","nullObjectProvider","Provider<Object> nullObjectProvider();","0","-","-","-","-"
"8630","lazyNullObject","Lazy<Object> lazyNullObject();","0","-","-","-","-"
"8631","typeWithInheritedMembersInjection","TypeWithInheritedMembersInjection typeWithInheritedMembersInjection();","0","-","-","-","-"
"8632","typeWithInheritedMembersInjectionMembersInjector","MembersInjector<TypeWithInheritedMembersInjection>
      typeWithInheritedMembersInjectionMembersInjector();","0","-","-","-","-"
"8633","TypeWithInheritedMembersInjection","@Inject TypeWithInheritedMembersInjection()","0","-","-","-","-"
"8634","Dep1","@Inject
    Dep1(Dep2 dep2)","0","-","-","-","-"
"8635","Dep2","@Inject
    Dep2(Dep3 dep3)","0","-","-","-","-"
"8636","Dep3","@Inject
    Dep3()","0","-","-","-","-"
"8637","dep1Provider","Provider<Dep1> dep1Provider();","0","-","-","-","-"
"8638","dep2Provider","Provider<Dep2> dep2Provider();","0","-","-","-","-"
"8639","dep2Provider","Provider<Dep2> dep2Provider();","0","-","-","-","-"
"8640","dep1Provider","Provider<Dep1> dep1Provider();","0","-","-","-","-"
"8641","testNonTopologicalOrderComponent","@Test
  public void testNonTopologicalOrderComponent() throws Exception","0","-","-","-","-"
"8642","testTopologicalOrderComponent","@Test
  public void testTopologicalOrderComponent() throws Exception","0","-","-","-","-"
"8643","nestedType","dagger.functional.basic.subpackage.NestedType nestedType();","0","-","-","-","-"
"8644","provideSomeType","@Provides
    static dagger.functional.basic.subpackage.NestedType provideSomeType()","0","-","-","-","-"
"8645","typeNameWontClashWithNestedTypeName","@Test
  public void typeNameWontClashWithNestedTypeName()","0","-","-","-","-"
"8646","testComponentDependsOnGeneratedCode","@Test
  public void testComponentDependsOnGeneratedCode()","0","-","-","-","-"
"8647","verifyCompanionModule","@Test
  public void verifyCompanionModule()","0","-","-","-","-"
"8648","verifyObjectModule","@Test
  public void verifyObjectModule()","0","-","-","-","-"
"8649","verifyQualifiedBinding","@Test
  public void verifyQualifiedBinding()","0","-","-","-","-"
"8650","verifyQualifiedBinding_acrossCompilation","@Test
  public void verifyQualifiedBinding_acrossCompilation()","0","-","-","-","-"
"8651","testScope","@Test
  public void testScope()","0","-","-","-","-"
"8652","set","Set<Object> set();","0","-","-","-","-"
"8653","green","@Provides
  @IntoSet
  @GreenScope
  static Object green()","0","-","-","-","-"
"8654","blue","@Provides
  @IntoSet
  @BlueScope
  static Object blue()","0","-","-","-","-"
"8655","blue","@Provides
  @IntoSet
  @BlueScope
  static Object blue()","0","-","-","-","-"
"8656","green","@Provides
  @IntoSet
  @GreenScope
  static Object green()","0","-","-","-","-"
"8657","getQualifiedFoo","@TestQualifier Foo getQualifiedFoo();","0","-","-","-","-"
"8658","Foo","@Inject Foo()","0","-","-","-","-"
"8659","bind","@Binds
    @TestScope
    @TestQualifier
    Foo bind(Foo impl);","0","-","-","-","-"
"8660","testFooFactory","@Test
  public void testFooFactory()","0","-","-","-","-"
"8661","getJakartaFoo","Provider<Foo> getJakartaFoo();","0","-","-","-","-"
"8662","getJavaxFoo","javax.inject.Provider<Foo> getJavaxFoo();","0","-","-","-","-"
"8663","getJakartaBar","Provider<Bar> getJakartaBar();","0","-","-","-","-"
"8664","getJavaxBar","javax.inject.Provider<Bar> getJavaxBar();","0","-","-","-","-"
"8665","getJakartaQualifiedFoo","@TestQualifier
    Provider<Foo> getJakartaQualifiedFoo();","0","-","-","-","-"
"8666","getJavaxQualifiedFoo","@TestQualifier
    javax.inject.Provider<Foo> getJavaxQualifiedFoo();","0","-","-","-","-"
"8667","getJakartaQualifiedBar","@TestQualifier
    Provider<Bar> getJakartaQualifiedBar();","0","-","-","-","-"
"8668","getJavaxQualifiedBar","@TestQualifier
    javax.inject.Provider<Bar> getJavaxQualifiedBar();","0","-","-","-","-"
"8669","injectUsages","InjectUsages injectUsages();","0","-","-","-","-"
"8670","getJakartaProviderMap","Map<String, Provider<Bar>> getJakartaProviderMap();","0","-","-","-","-"
"8671","getJavaxProviderMap","Map<String, javax.inject.Provider<Bar>> getJavaxProviderMap();","0","-","-","-","-"
"8672","getJakartaProviderClassMap","Map<Class<?>, Provider<Bar>> getJakartaProviderClassMap();","0","-","-","-","-"
"8673","getJavaxProviderClassMap","Map<Class<?>, javax.inject.Provider<Bar>> getJavaxProviderClassMap();","0","-","-","-","-"
"8674","getJakartaProviderLazyMap","Map<String, Provider<Lazy<Bar>>> getJakartaProviderLazyMap();","0","-","-","-","-"
"8675","getJavaxProviderLazyMap","Map<String, javax.inject.Provider<Lazy<Bar>>> getJavaxProviderLazyMap();","0","-","-","-","-"
"8676","getManuallyProvidedJakartaMap","Map<Long, Provider<Long>> getManuallyProvidedJakartaMap();","0","-","-","-","-"
"8677","getManuallyProvidedJavaxMap","Map<Long, javax.inject.Provider<Long>> getManuallyProvidedJavaxMap();","0","-","-","-","-"
"8678","getPresentOptionalJakartaProvider","Optional<Provider<String>> getPresentOptionalJakartaProvider();","0","-","-","-","-"
"8679","getPresentOptionalJavaxProvider","Optional<javax.inject.Provider<String>> getPresentOptionalJavaxProvider();","0","-","-","-","-"
"8680","getEmptyOptionalJakartaProvider","Optional<Provider<Long>> getEmptyOptionalJakartaProvider();","0","-","-","-","-"
"8681","getEmptyOptionalJavaxProvider","Optional<javax.inject.Provider<Long>> getEmptyOptionalJavaxProvider();","0","-","-","-","-"
"8682","Foo","@Inject
    Foo()","0","-","-","-","-"
"8683","Bar","@Inject
    Bar()","0","-","-","-","-"
"8684","InjectUsages","@Inject
    InjectUsages(Provider<Bar> jakartaBar)","0","-","-","-","-"
"8685","injectBar","@Inject
    void injectBar(
        Provider<Bar> jakartaQualifiedBar,
        javax.inject.Provider<Bar> javaxQualifiedBar,
        Map<String, javax.inject.Provider<Bar>> javaxProviderMap,
        Map<String, Provider<Bar>> jakartaProviderMap,
        Map<Class<?>, javax.inject.Provider<Bar>> javaxProviderClassMap,
        Map<Class<?>, Provider<Bar>> jakartaProviderClassMap)","0","-","-","-","-"
"8686","provideFoo","@Provides
    @TestQualifier
    static Foo provideFoo(
        Provider<Foo> fooProvider, javax.inject.Provider<Foo> unusedOtherFooProvider)","0","-","-","-","-"
"8687","provideBar","@Provides
    @TestQualifier
    @TestScope
    static Bar provideBar(
        Provider<Bar> unusedBarProvider, javax.inject.Provider<Bar> otherBarProvider)","0","-","-","-","-"
"8688","bindBarIntoMap","@Binds
    @IntoMap
    @StringKey(""bar"")
    abstract Bar bindBarIntoMap(Bar bar);","0","-","-","-","-"
"8689","bindBarIntoClassMap","@Binds
    @IntoMap
    @LazyClassKey(Bar.class)
    abstract Bar bindBarIntoClassMap(Bar bar);","0","-","-","-","-"
"8690","provideLazyIntoMap","@Provides
    @IntoMap
    @StringKey(""bar"")
    static Lazy<Bar> provideLazyIntoMap(Lazy<Bar> bar)","0","-","-","-","-"
"8691","manuallyProvidedJakartaMap","@Provides
    static Map<Long, Provider<Long>> manuallyProvidedJakartaMap()","0","-","-","-","-"
"8692","manuallyProvidedJavaxMap","@Provides
    static Map<Long, javax.inject.Provider<Long>> manuallyProvidedJavaxMap()","0","-","-","-","-"
"8693","bindOptionalString","@BindsOptionalOf
    abstract String bindOptionalString();","0","-","-","-","-"
"8694","provideString","@Provides
    static String provideString()","0","-","-","-","-"
"8695","bindOptionalLong","@BindsOptionalOf
    abstract Long bindOptionalLong();","0","-","-","-","-"
"8696","testJakartaProviders","@Test
  public void testJakartaProviders()","0","-","-","-","-"
"8697","string","String string();","0","-","-","-","-"
"8698","string","@Provides
    static String string()","0","-","-","-","-"
"8699","testPluginRuns","@Test
  public void testPluginRuns() throws IOException","0","-","-","-","-"
"8700","initFiler","@Override
  public void initFiler(Filer filer)","0","-","-","-","-"
"8701","visitGraph","@Override
  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter)","0","-","-","-","-"
"8702","write","private void write(BindingGraph bindingGraph, Properties properties)","0","-","-","-","-"
"8703","provideFuelTank","@Provides
  static FuelTank provideFuelTank()","0","-","-","-","-"
"8704","make","@SuppressWarnings(""dependency-cycle"")
  Car make();","0","-","-","-","-"
"8705","provideConvertible","@Binds
  abstract Car provideConvertible(Convertible convertible);","0","-","-","-","-"
"8706","provideEngine","@Provides
  static Engine provideEngine(MembersInjector<V8Engine> injector)","0","-","-","-","-"
"8707","provideTire","@Binds
  @Named(""spare"")
  abstract Tire provideTire(SpareTire sparetire);","0","-","-","-","-"
"8708","suite","public static Test suite()","0","-","-","-","-"
"8709","provideSeat","@Binds
  @Drivers
  abstract Seat provideSeat(DriversSeat seat);","0","-","-","-","-"
"8710","rawSet","Set rawSet();","0","-","-","-","-"
"8711","rawMap","Map rawMap();","0","-","-","-","-"
"8712","rawMap","@Provides
    static Map rawMap()","0","-","-","-","-"
"8713","rawSet","@Provides
    static Set rawSet()","0","-","-","-","-"
"8714","testComponent","@Test
  public void testComponent()","0","-","-","-","-"
"8715","getInt","Integer getInt();","0","-","-","-","-"
"8716","getInnerType","InnerType getInnerType();","0","-","-","-","-"
"8717","getDependencyProvider","Provider<Dependency> getDependencyProvider();","0","-","-","-","-"
"8718","MyModule","MyModule(Integer integer, InnerType innerType)","0","-","-","-","-"
"8719","provideInt","@Provides
    @Nullable Integer provideInt()","0","-","-","-","-"
"8720","provideInnerType","@Provides
    @Nullable InnerType provideInnerType()","0","-","-","-","-"
"8721","dependency","@Nullable Dependency dependency();","0","-","-","-","-"
"8722","DependencyModule","DependencyModule(Dependency dependency)","0","-","-","-","-"
"8723","provideDependency","@Provides
    @Nullable Dependency provideDependency()","0","-","-","-","-"
"8724","testWithValue","@Test
  public void testWithValue()","0","-","-","-","-"
"8725","testWithNull","@Test
  public void testWithNull()","0","-","-","-","-"
"8726","string","@Nullable String string();","0","-","-","-","-"
"8727","number","Number number();","0","-","-","-","-"
"8728","stringProvider","Provider<String> stringProvider();","0","-","-","-","-"
"8729","numberProvider","Provider<Number> numberProvider();","0","-","-","-","-"
"8730","string","@Nullable String string();","0","-","-","-","-"
"8731","integer","@Nullable Integer integer();","0","-","-","-","-"
"8732","nullFoo","NullFoo nullFoo();","0","-","-","-","-"
"8733","number","Number number();","0","-","-","-","-"
"8734","stringProvider","Provider<String> stringProvider();","0","-","-","-","-"
"8735","numberProvider","Provider<Number> numberProvider();","0","-","-","-","-"
"8736","provideNullableString","@Nullable
    @Provides
    String provideNullableString()","0","-","-","-","-"
"8737","provideNumber","@Provides
    Number provideNumber()","0","-","-","-","-"
"8738","provideNullReusableInteger","@Nullable
    @Provides
    @Reusable
    Integer provideNullReusableInteger()","0","-","-","-","-"
"8739","NullFoo","@Inject
    NullFoo(
        @Nullable String string,
        Number number,
        Provider<String> stringProvider,
        Provider<Number> numberProvider)","0","-","-","-","-"
"8740","inject","@Inject void inject(
        @Nullable String string,
        Number number,
        Provider<String> stringProvider,
        Provider<Number> numberProvider)","0","-","-","-","-"
"8741","testNullability_provides","@Test
  public void testNullability_provides()","0","-","-","-","-"
"8742","testNullability_reusuable","@Test
  public void testNullability_reusuable()","0","-","-","-","-"
"8743","testNullability_components","@Test
  public void testNullability_components()","0","-","-","-","-"
"8744","stringProvider","@Override public Provider<String> stringProvider()","0","-","-","-","-"
"8745","get","@Override public String get()","0","-","-","-","-"
"8746","string","@Override public String string()","0","-","-","-","-"
"8747","numberProvider","@Override public Provider<Number> numberProvider()","0","-","-","-","-"
"8748","get","@Override public Number get()","0","-","-","-","-"
"8749","number","@Override public Number number()","0","-","-","-","-"
"8750","nullFoo","@Override public NullFoo nullFoo()","0","-","-","-","-"
"8751","integer","@Override public Integer integer()","0","-","-","-","-"
"8752","validate","private void validate(boolean fromProvides,
      String string,
      Provider<String> stringProvider,
      Provider<Number> numberProvider)","0","-","-","-","-"
"8753","builderBinds","@Test
  public void builderBinds()","0","-","-","-","-"
"8754","builderBindsNullableWithNull","@Test
  public void builderBindsNullableWithNull()","0","-","-","-","-"
"8755","builderBindsNonNullableWithNull","@Test
  public void builderBindsNonNullableWithNull()","0","-","-","-","-"
"8756","builderBindsPrimitiveNotSet","@Test
  public void builderBindsPrimitiveNotSet()","0","-","-","-","-"
"8757","builderBindsNonNullableNotSet","@Test
  public void builderBindsNonNullableNotSet()","0","-","-","-","-"
"8758","builderBindsNullableNotSet","@Test
  public void builderBindsNullableNotSet()","0","-","-","-","-"
"8759","boundInSubtype","@BindsInstance
  void boundInSubtype(@Named(""subtype"") int subtype);","0","-","-","-","-"
"8760","count","int count();","0","-","-","-","-"
"8761","l","long l();","0","-","-","-","-"
"8762","input","@Named(""input"")
  String input();","0","-","-","-","-"
"8763","nullableInput","@Nullable
  @Named(""nullable input"")
  String nullableInput();","0","-","-","-","-"
"8764","listOfString","List<String> listOfString();","0","-","-","-","-"
"8765","boundInSubtype","@Named(""subtype"")
  int boundInSubtype();","0","-","-","-","-"
"8766","count","@BindsInstance
    Builder count(int count);","0","-","-","-","-"
"8767","l","@BindsInstance
    Builder l(long l);","0","-","-","-","-"
"8768","input","@BindsInstance
    Builder input(@Named(""input"") String input);","0","-","-","-","-"
"8769","nullableInput","@BindsInstance
    Builder nullableInput(@Nullable @Named(""nullable input"") String nullableInput);","0","-","-","-","-"
"8770","listOfString","@BindsInstance
    Builder listOfString(List<String> listOfString);","0","-","-","-","-"
"8771","build","TestComponent build();","0","-","-","-","-"
"8772","object","Object object();","0","-","-","-","-"
"8773","fooForProvision","FooForProvision fooForProvision();","0","-","-","-","-"
"8774","publicModuleIncludingPackagePrivateModuleThatDoesNotRequireInstance","@Test
  public void publicModuleIncludingPackagePrivateModuleThatDoesNotRequireInstance()","0","-","-","-","-"
"8775","object","@Provides
  static Object object(int foo, Provider<String> fooProvider)","0","-","-","-","-"
"8776","InjectedClassWithConflictingNames","@Inject
    InjectedClassWithConflictingNames(int foo, Provider<String> fooProvider)","0","-","-","-","-"
"8777","bindObject","@Binds
  abstract Object bindObject(String string);","0","-","-","-","-"
"8778","provideString","@Provides
  static String provideString(int i)","0","-","-","-","-"
"8779","provideInt","@Provides
  static int provideInt()","0","-","-","-","-"
"8780","provideFoo","@Provides
  static FooForProvision provideFoo()","0","-","-","-","-"
"8781","NonAbstractPackagePrivateModule","private NonAbstractPackagePrivateModule()","0","-","-","-","-"
"8782","foo","Foo<String> foo();","0","-","-","-","-"
"8783","includedInTopLevelModule","int includedInTopLevelModule();","0","-","-","-","-"
"8784","includedFromModuleInheritance","String includedFromModuleInheritance();","0","-","-","-","-"
"8785","fooOfT","@Provides Foo<T> fooOfT()","0","-","-","-","-"
"8786","createFoo","<T> Foo<T> createFoo()","0","-","-","-","-"
"8787","i","@Provides int i()","0","-","-","-","-"
"8788","inheritedProvision","@Provides String inheritedProvision()","0","-","-","-","-"
"8789","provideString","@Provides
    static String provideString()","0","-","-","-","-"
"8790","M","private M()","0","-","-","-","-"
"8791","string","String string();","0","-","-","-","-"
"8792","build","C build();","0","-","-","-","-"
"8793","componentTest","@Test
  public void componentTest()","0","-","-","-","-"
"8794","build","Object build();","0","-","-","-","-"
"8795","componentTest","@Test
  public void componentTest()","0","-","-","-","-"
"8796","s","String s();","0","-","-","-","-"
"8797","i","int i();","0","-","-","-","-"
"8798","l","long l();","0","-","-","-","-"
"8799","f","float f();","0","-","-","-","-"
"8800","d","double d();","0","-","-","-","-"
"8801","b","byte b();","0","-","-","-","-"
"8802","build","abstract C build();","0","-","-","-","-"
"8803","setM1","abstract B setM1(M1 m1);","0","-","-","-","-"
"8804","setM2","abstract SharedBuilder<B, C, M1, M2> setM2(M2 m2);","0","-","-","-","-"
"8805","setM3","abstract void setM3(DoubleModule doubleModule);","0","-","-","-","-"
"8806","set","abstract SharedBuilder<B, C, M1, M2> set(
          FloatModule floatModule);","0","-","-","-","-"
"8807","setM2","@Override
      abstract Builder setM2(IntModuleIncludingDoubleAndFloat m2);","0","-","-","-","-"
"8808","setM3","@Override
      abstract void setM3(DoubleModule doubleModule);","0","-","-","-","-"
"8809","set","abstract void set(ByteModule byteModule);","0","-","-","-","-"
"8810","s","String s();","0","-","-","-","-"
"8811","i","int i();","0","-","-","-","-"
"8812","l","long l();","0","-","-","-","-"
"8813","f","float f();","0","-","-","-","-"
"8814","d","double d();","0","-","-","-","-"
"8815","b","byte b();","0","-","-","-","-"
"8816","build","C build();","0","-","-","-","-"
"8817","setM1","B setM1(M1 m1);","0","-","-","-","-"
"8818","setM2","SharedBuilder<B, C, M1, M2> setM2(M2 m2);","0","-","-","-","-"
"8819","setM3","void setM3(DoubleModule doubleModule);","0","-","-","-","-"
"8820","set","SharedBuilder<B, C, M1, M2> set(FloatModule floatModule);","0","-","-","-","-"
"8821","setM2","@Override
      Builder setM2(IntModuleIncludingDoubleAndFloat m2);","0","-","-","-","-"
"8822","setM3","@Override
      void setM3(DoubleModule doubleModule);","0","-","-","-","-"
"8823","set","void set(ByteModule byteModule);","0","-","-","-","-"
"8824","builder","static Builder builder()","0","-","-","-","-"
"8825","s","abstract String s();","0","-","-","-","-"
"8826","i","abstract int i();","0","-","-","-","-"
"8827","l","abstract long l();","0","-","-","-","-"
"8828","f","abstract float f();","0","-","-","-","-"
"8829","d","abstract double d();","0","-","-","-","-"
"8830","build","abstract Object build();","0","-","-","-","-"
"8831","stringModule","Object stringModule(@SuppressWarnings(""unused"") StringModule stringModule)","0","-","-","-","-"
"8832","ignoredLongModule","SharedBuilder ignoredLongModule(@SuppressWarnings(""unused"") LongModule longModule)","0","-","-","-","-"
"8833","build","@Override
      abstract TestComponentWithBuilderAbstractClass build();","0","-","-","-","-"
"8834","stringModule","@Override
      abstract Builder stringModule(StringModule stringModule);","0","-","-","-","-"
"8835","intModule","abstract Builder intModule(IntModuleIncludingDoubleAndFloat intModule);","0","-","-","-","-"
"8836","doubleModule","abstract void doubleModule(DoubleModule doubleModule);","0","-","-","-","-"
"8837","depComponent","abstract void depComponent(DepComponent depComponent);","0","-","-","-","-"
"8838","ignoredIntModule","Builder ignoredIntModule(
          @SuppressWarnings(""unused"") IntModuleIncludingDoubleAndFloat intModule)","0","-","-","-","-"
"8839","s","String s();","0","-","-","-","-"
"8840","i","int i();","0","-","-","-","-"
"8841","l","long l();","0","-","-","-","-"
"8842","f","float f();","0","-","-","-","-"
"8843","d","double d();","0","-","-","-","-"
"8844","build","Object build();","0","-","-","-","-"
"8845","stringModule","Object stringModule(StringModule m1);","0","-","-","-","-"
"8846","build","@Override
      TestComponentWithBuilderInterface build();","0","-","-","-","-"
"8847","stringModule","@Override
      Builder stringModule(StringModule stringModule);","0","-","-","-","-"
"8848","intModule","Builder intModule(IntModuleIncludingDoubleAndFloat intModule);","0","-","-","-","-"
"8849","doubleModule","void doubleModule(DoubleModule doubleModule);","0","-","-","-","-"
"8850","depComponent","void depComponent(DepComponent depComponent);","0","-","-","-","-"
"8851","s","String s();","0","-","-","-","-"
"8852","i","int i();","0","-","-","-","-"
"8853","l","long l();","0","-","-","-","-"
"8854","f","float f();","0","-","-","-","-"
"8855","d","double d();","0","-","-","-","-"
"8856","build","abstract C build();","0","-","-","-","-"
"8857","setM1","abstract B setM1(M1 m1);","0","-","-","-","-"
"8858","setM2","abstract SharedBuilder<B, C, M1, M2> setM2(M2 m2);","0","-","-","-","-"
"8859","doubleModule","abstract void doubleModule(DoubleModule doubleModule);","0","-","-","-","-"
"8860","depComponent","abstract SharedBuilder<B, C, M1, M2> depComponent(
          FloatModule floatModule);","0","-","-","-","-"
"8861","setM2","@Override
      abstract Builder setM2(IntModuleIncludingDoubleAndFloat m2);","0","-","-","-","-"
"8862","doubleModule","@Override
      abstract void doubleModule(DoubleModule module3);","0","-","-","-","-"
"8863","depComponent","abstract void depComponent(DepComponent depComponent);","0","-","-","-","-"
"8864","s","String s();","0","-","-","-","-"
"8865","i","int i();","0","-","-","-","-"
"8866","l","long l();","0","-","-","-","-"
"8867","f","float f();","0","-","-","-","-"
"8868","d","double d();","0","-","-","-","-"
"8869","build","C build();","0","-","-","-","-"
"8870","setM1","B setM1(M1 m1);","0","-","-","-","-"
"8871","setM2","SharedBuilder<B, C, M1, M2> setM2(M2 m2);","0","-","-","-","-"
"8872","doubleModule","void doubleModule(DoubleModule doubleModule);","0","-","-","-","-"
"8873","set","SharedBuilder<B, C, M1, M2> set(FloatModule floatModule);","0","-","-","-","-"
"8874","setM2","@Override
      Builder setM2(IntModuleIncludingDoubleAndFloat m2);","0","-","-","-","-"
"8875","doubleModule","@Override
      void doubleModule(DoubleModule module3);","0","-","-","-","-"
"8876","depComponent","void depComponent(DepComponent depComponent);","0","-","-","-","-"
"8877","childAbstractClassBuilder","TestChildComponentWithBuilderAbstractClass.Builder childAbstractClassBuilder();","0","-","-","-","-"
"8878","childInterfaceBuilder","TestChildComponentWithBuilderInterface.Builder childInterfaceBuilder();","0","-","-","-","-"
"8879","middleBuilder","MiddleChild.Builder middleBuilder();","0","-","-","-","-"
"8880","otherBuilder","OtherMiddleChild.Builder otherBuilder();","0","-","-","-","-"
"8881","requiresMiddleChildBuilder","RequiresSubcomponentBuilder<MiddleChild.Builder> requiresMiddleChildBuilder();","0","-","-","-","-"
"8882","s","String s();","0","-","-","-","-"
"8883","grandchildBuilder","Grandchild.Builder grandchildBuilder();","0","-","-","-","-"
"8884","requiresGrandchildBuilder","RequiresSubcomponentBuilder<Grandchild.Builder> requiresGrandchildBuilder();","0","-","-","-","-"
"8885","build","MiddleChild build();","0","-","-","-","-"
"8886","set","Builder set(StringModule stringModule);","0","-","-","-","-"
"8887","RequiresSubcomponentBuilder","@Inject
    RequiresSubcomponentBuilder(Provider<B> subcomponentBuilderProvider, B subcomponentBuilder)","0","-","-","-","-"
"8888","subcomponentBuilderProvider","Provider<B> subcomponentBuilderProvider()","0","-","-","-","-"
"8889","subcomponentBuilder","B subcomponentBuilder()","0","-","-","-","-"
"8890","l","long l();","0","-","-","-","-"
"8891","s","String s();","0","-","-","-","-"
"8892","grandchildBuilder","Grandchild.Builder grandchildBuilder();","0","-","-","-","-"
"8893","build","OtherMiddleChild build();","0","-","-","-","-"
"8894","set","Builder set(StringModule stringModule);","0","-","-","-","-"
"8895","i","int i();","0","-","-","-","-"
"8896","s","String s();","0","-","-","-","-"
"8897","build","Grandchild build();","0","-","-","-","-"
"8898","set","Builder set(IntModuleIncludingDoubleAndFloat intModule);","0","-","-","-","-"
"8899","subcomponentBuilder","B subcomponentBuilder();","0","-","-","-","-"
"8900","ByteModule","ByteModule(byte b)","0","-","-","-","-"
"8901","b","@Provides
    byte b()","0","-","-","-","-"
"8902","d","@Provides
    double d()","0","-","-","-","-"
"8903","l","@Provides
    long l()","0","-","-","-","-"
"8904","f","@Provides
    float f()","0","-","-","-","-"
"8905","StringModule","StringModule(String string)","0","-","-","-","-"
"8906","string","@Provides
    String string()","0","-","-","-","-"
"8907","IntModuleIncludingDoubleAndFloat","IntModuleIncludingDoubleAndFloat(int integer)","0","-","-","-","-"
"8908","integer","@Provides
    int integer()","0","-","-","-","-"
"8909","interfaceBuilder","@Test
  public void interfaceBuilder()","0","-","-","-","-"
"8910","abstractClassBuilder","@Test
  public void abstractClassBuilder()","0","-","-","-","-"
"8911","interfaceGenericBuilder","@Test
  public void interfaceGenericBuilder()","0","-","-","-","-"
"8912","abstractClassGenericBuilder","@Test
  public void abstractClassGenericBuilder()","0","-","-","-","-"
"8913","subcomponents_interface","@Test
  public void subcomponents_interface()","0","-","-","-","-"
"8914","subcomponents_abstractclass","@Test
  public void subcomponents_abstractclass()","0","-","-","-","-"
"8915","grandchildren","@Test
  public void grandchildren()","0","-","-","-","-"
"8916","diamondGrandchildren","@Test
  public void diamondGrandchildren()","0","-","-","-","-"
"8917","genericSubcomponentMethod","@Test
  public void genericSubcomponentMethod()","0","-","-","-","-"
"8918","requireSubcomponentBuilderProviders","@Test
  public void requireSubcomponentBuilderProviders()","0","-","-","-","-"
"8919","requireSubcomponentBuilders","@Test
  public void requireSubcomponentBuilders()","0","-","-","-","-"
"8920","build","Object build();","0","-","-","-","-"
"8921","build","T build();","0","-","-","-","-"
"8922","build","ParameterizedComponentSupertype<T> build();","0","-","-","-","-"
"8923","simpleComponentTest","@Test
  public void simpleComponentTest()","0","-","-","-","-"
"8924","genericBuilderTypeTest","@Test
  public void genericBuilderTypeTest()","0","-","-","-","-"
"8925","genericComponentSupertypeAndBuilderSupertypeTest","@Test
  public void genericComponentSupertypeAndBuilderSupertypeTest()","0","-","-","-","-"
"8926","s","String s();","0","-","-","-","-"
"8927","i","int i();","0","-","-","-","-"
"8928","s","Builder s(@BindsInstance String notTheSameNameAsMethod);","0","-","-","-","-"
"8929","i","Builder i(@BindsInstance int i);","0","-","-","-","-"
"8930","build","TestComponent build();","0","-","-","-","-"
"8931","builder_bindsInstanceOnParameter_allowed","@Test
  public void builder_bindsInstanceOnParameter_allowed()","0","-","-","-","-"
"8932","referencesGeneric","ReferencesGeneric referencesGeneric();","0","-","-","-","-"
"8933","doubleGenericA","GenericDoubleReferences<A> doubleGenericA();","0","-","-","-","-"
"8934","doubleGenericB","GenericDoubleReferences<B> doubleGenericB();","0","-","-","-","-"
"8935","complexGenerics","ComplexGenerics complexGenerics();","0","-","-","-","-"
"8936","noDepsA","GenericNoDeps<A> noDepsA();","0","-","-","-","-"
"8937","noDepsB","GenericNoDeps<B> noDepsB();","0","-","-","-","-"
"8938","injectA","void injectA(GenericChild<A> childA);","0","-","-","-","-"
"8939","injectB","void injectB(GenericChild<B> childB);","0","-","-","-","-"
"8940","exposed","Exposed exposed();","0","-","-","-","-"
"8941","publicSubclass","PublicSubclass publicSubclass();","0","-","-","-","-"
"8942","iterableInt","Iterable<Integer> iterableInt();","0","-","-","-","-"
"8943","iterableDouble","Iterable<Double> iterableDouble();","0","-","-","-","-"
"8944","stringsProvider","Provider<List<String>> stringsProvider();","0","-","-","-","-"
"8945","list","@Provides
    List<T> list(T t, String string)","0","-","-","-","-"
"8946","string","@Provides
    static String string()","0","-","-","-","-"
"8947","B","@Inject B()","0","-","-","-","-"
"8948","bounds1","BoundedGenerics<Integer, ArrayList<String>, LinkedList<CharSequence>, Integer, List<Integer>>
      bounds1();","0","-","-","-","-"
"8949","bounds2","BoundedGenerics<Double, LinkedList<String>, LinkedList<Comparable<String>>, Double, Set<Double>>
      bounds2();","0","-","-","-","-"
"8950","GenericParent","@Inject GenericParent()","0","-","-","-","-"
"8951","registerX","@Inject
  void registerX(Provider<X> x)","0","-","-","-","-"
"8952","registerY","@Inject
  void registerY(Y y)","0","-","-","-","-"
"8953","registerB","@Inject
  void registerB(B b)","0","-","-","-","-"
"8954","registerParameterizedOfY","@Inject
  void registerParameterizedOfY(Parameterized<Y> parameterizedOfY)","0","-","-","-","-"
"8955","Parameterized","@Inject Parameterized()","0","-","-","-","-"
"8956","genericSet","Set<T2> genericSet();","0","-","-","-","-"
"8957","genericMap","Map<T1, T2> genericMap();","0","-","-","-","-"
"8958","provideMap","@Provides
    static Map<Integer, String> provideMap(String str)","0","-","-","-","-"
"8959","provideSet","@Provides
    static Set<String> provideSet(String str)","0","-","-","-","-"
"8960","provideString","@Provides
    static String provideString()","0","-","-","-","-"
"8961","testComponent","@Test
  public void testComponent()","0","-","-","-","-"
"8962","Thing","@Inject Thing(@SuppressWarnings(""unused"") OtherThing unused)","0","-","-","-","-"
"8963","testGenericComponentCreate","@Test public void testGenericComponentCreate()","0","-","-","-","-"
"8964","testGenericSimpleReferences","@Test public void testGenericSimpleReferences()","0","-","-","-","-"
"8965","testGenericDoubleReferences","@Test public void testGenericDoubleReferences()","0","-","-","-","-"
"8966","complexGenerics","@Test public void complexGenerics()","0","-","-","-","-"
"8967","noDepsGenerics","@Test public void noDepsGenerics()","0","-","-","-","-"
"8968","boundedGenerics","@Test public void boundedGenerics()","0","-","-","-","-"
"8969","membersInjections","@Test public void membersInjections()","0","-","-","-","-"
"8970","packagePrivateTypeParameterDependencies","@Test public void packagePrivateTypeParameterDependencies()","0","-","-","-","-"
"8971","publicSubclassWithPackagePrivateTypeParameterOfSuperclass","@SuppressWarnings(""rawtypes"")
  @Test public void publicSubclassWithPackagePrivateTypeParameterOfSuperclass()","0","-","-","-","-"
"8972","singletonScopesAppliesToEachResolvedType","@Test public void singletonScopesAppliesToEachResolvedType()","0","-","-","-","-"
"8973","scopedSimpleGenerics","@Test // See https://github.com/google/dagger/issues/671
  public void scopedSimpleGenerics()","0","-","-","-","-"
"8974","genericModules","@Test public void genericModules()","0","-","-","-","-"
"8975","ScopedGeneric","@Inject ScopedGeneric(T t)","0","-","-","-","-"
"8976","ReferencesGeneric","@Inject ReferencesGeneric(Generic<A> genericA)","0","-","-","-","-"
"8977","GenericDoubleReferences","@Inject GenericDoubleReferences(T t, Thing a, T t2, Thing a2)","0","-","-","-","-"
"8978","ScopedSimpleGeneric","@Inject
  ScopedSimpleGeneric()","0","-","-","-","-"
"8979","Exposed","/** Injects inaccessible dependencies to test casting of these dependency arguments. */
  @Inject Exposed(
      PackagePrivate pp,
      Provider<PackagePrivate> ppp,
      Lazy<PackagePrivate> lpp,
      Provider<Lazy<PackagePrivate>> plpp,
      Generic<PackagePrivate> gpp,
      Generic<PackagePrivateContainer.PublicEnclosed> gppc,
      Provider<Generic<PackagePrivate>> pgpp,
      Lazy<Generic<PackagePrivate>> lgpp,
      Provider<Lazy<Generic<PackagePrivate>>> plgpp)","0","-","-","-","-"
"8980","PublicSubclass","@Inject
  PublicSubclass(PackagePrivate pp)","0","-","-","-","-"
"8981","PublicSubclass2","@Inject public PublicSubclass2(PackagePrivateContainer.PublicEnclosed pp)","0","-","-","-","-"
"8982","PublicEnclosed","@Inject PublicEnclosed()","0","-","-","-","-"
"8983","PackagePrivateContainer","private PackagePrivateContainer()","0","-","-","-","-"
"8984","OtherThing","@Inject
  public OtherThing(@SuppressWarnings(""unused"") int i)","0","-","-","-","-"
"8985","Generic","@Inject
  Generic(T t)","0","-","-","-","-"
"8986","PackagePrivate","@Inject PackagePrivate()","0","-","-","-","-"
"8987","Generic2","@Inject Generic2(T t)","0","-","-","-","-"
"8988","ComplexGenerics","@Inject ComplexGenerics(
      Generic2<Generic<A>> g2ga,
      Lazy<Generic2<Generic<A>>> g2gaLazy,
      Provider<Generic2<Generic<A>>> g2gaProvider,
      Generic2<Generic<B>> g2gb,
      Lazy<Generic2<Generic<B>>> g2gbLazy,
      Provider<Generic2<Generic<B>>> g2gbProvider,
      Generic2<A> g2a,
      Generic<Generic2<A>> gg2a,
      Generic<Generic2<B>> gg2b)","0","-","-","-","-"
"8989","GenericNoDeps","@Inject GenericNoDeps()","0","-","-","-","-"
"8990","scopedGenericA","ScopedGeneric<A> scopedGenericA();","0","-","-","-","-"
"8991","scopedGenericB","ScopedGeneric<B> scopedGenericB();","0","-","-","-","-"
"8992","scopedSimpleGenericA","ScopedSimpleGeneric<A> scopedSimpleGenericA();","0","-","-","-","-"
"8993","scopedSimpleGenericB","ScopedSimpleGeneric<B> scopedSimpleGenericB();","0","-","-","-","-"
"8994","provideIterableOfAWithC","@Provides Iterable<T1> provideIterableOfAWithC(T1 t1, T3 c)","0","-","-","-","-"
"8995","provideNonGenericBindingInParameterizedModule","@Provides static char provideNonGenericBindingInParameterizedModule()","0","-","-","-","-"
"8996","provideStaticGenericTypeWithNoTypeParametersInParameterizedModule","@Provides
  static List<Set<String>> provideStaticGenericTypeWithNoTypeParametersInParameterizedModule()","0","-","-","-","-"
"8997","provideInteger","@Provides Integer provideInteger()","0","-","-","-","-"
"8998","provideListOfInteger","@Provides List<Integer> provideListOfInteger()","0","-","-","-","-"
"8999","provideDouble","@Provides Double provideDouble()","0","-","-","-","-"
"9000","provideListOfDouble","@Provides List<Double> provideListOfDouble()","0","-","-","-","-"
"9001","provideInteger","@Provides
  Integer provideInteger()","0","-","-","-","-"
"9002","provideDouble","@Provides
  Double provideDouble()","0","-","-","-","-"
"9003","provideArrayListString","@Provides
  ArrayList<String> provideArrayListString()","0","-","-","-","-"
"9004","provideLinkedListString","@Provides
  LinkedList<String> provideLinkedListString()","0","-","-","-","-"
"9005","provideLinkedListCharSeq","@Provides
  LinkedList<CharSequence> provideLinkedListCharSeq()","0","-","-","-","-"
"9006","provideArrayListOfComparableString","@Provides
  LinkedList<Comparable<String>> provideArrayListOfComparableString()","0","-","-","-","-"
"9007","provideListOfInteger","@Provides
  List<Integer> provideListOfInteger()","0","-","-","-","-"
"9008","provideSetOfDouble","@Provides
  Set<Double> provideSetOfDouble()","0","-","-","-","-"
"9009","BoundedGenerics","@Inject BoundedGenerics(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)","0","-","-","-","-"
"9010","GenericChild","@Inject GenericChild()","0","-","-","-","-"
"9011","registerA","@Inject void registerA(A a)","0","-","-","-","-"
"9012","registerT","@Inject void registerT(T t)","0","-","-","-","-"
"9013","A","@Inject A()","0","-","-","-","-"
"9014","UninstantiableConcreteModule","UninstantiableConcreteModule(long l)","0","-","-","-","-"
"9015","provideLong","@Provides
  long provideLong()","0","-","-","-","-"
"9016","string","String string();","0","-","-","-","-"
"9017","getInt","int getInt();","0","-","-","-","-"
"9018","getLong","long getLong();","0","-","-","-","-"
"9019","object","Object object();","0","-","-","-","-"
"9020","getDouble","double getDouble();","0","-","-","-","-"
"9021","randomProvider","Provider<Random> randomProvider();","0","-","-","-","-"
"9022","create","MixedArgComponent create(
          @BindsInstance double d,
          Dependency dependency,
          UninstantiableConcreteModule module,
          @BindsInstance Random random);","0","-","-","-","-"
"9023","mixedArgComponent","@Test
  public void mixedArgComponent()","0","-","-","-","-"
"9024","provideDouble","@Provides
  static double provideDouble()","0","-","-","-","-"
"9025","provideString","@Provides
  static String provideString()","0","-","-","-","-"
"9026","object","Object object();","0","-","-","-","-"
"9027","create","DependencyComponent create(Dependency dependency);","0","-","-","-","-"
"9028","dependency","@Test
  public void dependency()","0","-","-","-","-"
"9029","dependency_failsOnNull","@Test
  public void dependency_failsOnNull()","0","-","-","-","-"
"9030","getLong","long getLong();","0","-","-","-","-"
"9031","create","UninstantiableConcreteModuleComponent create(UninstantiableConcreteModule module);","0","-","-","-","-"
"9032","uninstantiableConcreteModule","@Test
  public void uninstantiableConcreteModule()","0","-","-","-","-"
"9033","uninstantiableConcreteModule_failsOnNull","@Test
  public void uninstantiableConcreteModule_failsOnNull()","0","-","-","-","-"
"9034","provideInt","@Provides
  int provideInt()","0","-","-","-","-"
"9035","string","String string();","0","-","-","-","-"
"9036","create","BindsInstanceComponent create(@BindsInstance String string);","0","-","-","-","-"
"9037","bindsInstance","@Test
  public void bindsInstance()","0","-","-","-","-"
"9038","nonNullableBindsInstance_failsOnNull","@Test
  public void nonNullableBindsInstance_failsOnNull()","0","-","-","-","-"
"9039","string","@Nullable
    String string();","0","-","-","-","-"
"9040","create","NullableBindsInstanceComponent create(@BindsInstance @Nullable String string);","0","-","-","-","-"
"9041","nullableBindsInstance_doesNotFailOnNull","@Test
  public void nullableBindsInstance_doesNotFailOnNull()","0","-","-","-","-"
"9042","getInt","int getInt();","0","-","-","-","-"
"9043","create","PrimitiveBindsInstanceComponent create(@BindsInstance int i);","0","-","-","-","-"
"9044","primitiveBindsInstance","@Test
  public void primitiveBindsInstance()","0","-","-","-","-"
"9045","subcomponentFactory","Sub.Factory subcomponentFactory();","0","-","-","-","-"
"9046","create","ParentWithSubcomponentFactory create(@BindsInstance int i);","0","-","-","-","-"
"9047","i","int i();","0","-","-","-","-"
"9048","s","String s();","0","-","-","-","-"
"9049","create","Sub create(@BindsInstance String s);","0","-","-","-","-"
"9050","parentComponentWithSubcomponentFactoryEntryPoint","@Test
  public void parentComponentWithSubcomponentFactoryEntryPoint()","0","-","-","-","-"
"9051","provideInt","@Provides
    static int provideInt()","0","-","-","-","-"
"9052","UsesSubcomponentFactory","@Inject
    UsesSubcomponentFactory(Sub.Factory subFactory)","0","-","-","-","-"
"9053","getSubcomponent","Sub getSubcomponent(String s)","0","-","-","-","-"
"9054","usesSubcomponentFactory","UsesSubcomponentFactory usesSubcomponentFactory();","0","-","-","-","-"
"9055","parentComponentWithModuleWithSubcomponent","@Test
  public void parentComponentWithModuleWithSubcomponent()","0","-","-","-","-"
"9056","object","Object object()","0","-","-","-","-"
"9057","string","String string();","0","-","-","-","-"
"9058","create","AbstractModuleComponent create();","0","-","-","-","-"
"9059","abstractModule","@Test
  public void abstractModule()","0","-","-","-","-"
"9060","getInt","int getInt();","0","-","-","-","-"
"9061","create","InstantiableConcreteModuleComponent create();","0","-","-","-","-"
"9062","instantiableConcreteModule","@Test
  public void instantiableConcreteModule()","0","-","-","-","-"
"9063","getInt","int getInt();","0","-","-","-","-"
"9064","create","InstantiableConcreteModuleWithFactoryParameterComponent create(
          InstantiableConcreteModule module);","0","-","-","-","-"
"9065","instantiableConcreteModule_withFactoryParameter","@Test
  public void instantiableConcreteModule_withFactoryParameter()","0","-","-","-","-"
"9066","instantiableConcreteModule_withFactoryParameter_failsOnNull","@Test
  public void instantiableConcreteModule_withFactoryParameter_failsOnNull()","0","-","-","-","-"
"9067","getDouble","double getDouble();","0","-","-","-","-"
"9068","create","ConcreteModuleThatCouldBeAbstractComponent create();","0","-","-","-","-"
"9069","concreteModuleThatCouldBeAbstract","@Test
  public void concreteModuleThatCouldBeAbstract()","0","-","-","-","-"
"9070","getDouble","double getDouble();","0","-","-","-","-"
"9071","create","ConcreteModuleThatCouldBeAbstractWithFactoryParameterComponent create(
          ConcreteModuleThatCouldBeAbstract module);","0","-","-","-","-"
"9072","concreteModuleThatCouldBeAbstract_withFactoryParameter","@Test
  public void concreteModuleThatCouldBeAbstract_withFactoryParameter()","0","-","-","-","-"
"9073","concreteModuleThatCouldBeAbstract_withFactoryParameter_failsOnNull","@Test
  public void concreteModuleThatCouldBeAbstract_withFactoryParameter_failsOnNull()","0","-","-","-","-"
"9074","getMultiboundStrings","Set<String> getMultiboundStrings();","0","-","-","-","-"
"9075","getMultiboundIntegers","Set<Integer> getMultiboundIntegers();","0","-","-","-","-"
"9076","allStaticModule","Builder allStaticModule(AllStaticModule allStaticModule);","0","-","-","-","-"
"9077","someStaticModule","Builder someStaticModule(SomeStaticModule someStaticModule);","0","-","-","-","-"
"9078","build","StaticTestComponentWithBuilder build();","0","-","-","-","-"
"9079","contributeString","@Provides
  @IntoSet
  static String contributeString()","0","-","-","-","-"
"9080","contibuteEmptyIntegerSet","@Provides
  @ElementsIntoSet
  static Set<Integer> contibuteEmptyIntegerSet()","0","-","-","-","-"
"9081","components","@Parameters
  public static Collection<Object[]> components()","0","-","-","-","-"
"9082","setMultibinding","@Test public void setMultibinding()","0","-","-","-","-"
"9083","allStaticProvidesModules_noFieldInComponentBuilder","@Test public void allStaticProvidesModules_noFieldInComponentBuilder()","0","-","-","-","-"
"9084","allStaticProvidesModules_deprecatedMethodInComponentBuilder","@Test public void allStaticProvidesModules_deprecatedMethodInComponentBuilder()","0","-","-","-","-"
"9085","contributeStringFromAStaticMethod","@Provides
  @IntoSet
  static String contributeStringFromAStaticMethod()","0","-","-","-","-"
"9086","contributeStringFromAnInstanceMethod","@SuppressWarnings(""StaticModuleMethods"") // Purposely non-static for tests
  @Provides
  @IntoSet
  String contributeStringFromAnInstanceMethod()","0","-","-","-","-"
"9087","FooImpl","@Inject FooImpl(@SuppressWarnings(""unused"") Provider<Foo> provider)","0","-","-","-","-"
"9088","bindFoo","@Binds
    @Singleton
    Foo bindFoo(FooImpl impl);","0","-","-","-","-"
"9089","getFooImplProvider","Provider<FooImpl> getFooImplProvider();","0","-","-","-","-"
"9090","test","@Test
  public void test()","0","-","-","-","-"
"9091","bindFooOfObjects","@Binds Foo<Object> bindFooOfObjects(FooOfObjects impl);","0","-","-","-","-"
"9092","bindFooFactory","@Binds
  abstract NeedsFactory.SomethingFactory bindFooFactory(NeedsFactory.SomethingFactoryImpl impl);","0","-","-","-","-"
"9093","bindObject","@Binds
  abstract Object bindObject(FooOfStrings impl);","0","-","-","-","-"
"9094","bindReusableObject","@Binds
  @Reusable
  @SomeQualifier
  abstract Object bindReusableObject(FooOfStrings impl);","0","-","-","-","-"
"9095","bindFooOfStrings","@Binds
  abstract Foo<String> bindFooOfStrings(FooOfStrings impl);","0","-","-","-","-"
"9096","bindFooOfNumbers","@Binds
  abstract Foo<? extends Number> bindFooOfNumbers(Foo<Integer> fooOfIntegers);","0","-","-","-","-"
"9097","bindQualifiedFooOfStrings","@Binds
  @Singleton
  @SomeQualifier
  abstract Foo<String> bindQualifiedFooOfStrings(FooOfStrings impl);","0","-","-","-","-"
"9098","provideFooOfIntegers","@Provides
  static Foo<Integer> provideFooOfIntegers()","0","-","-","-","-"
"9099","provideFooOfDoubles","@Provides
  static Foo<Double> provideFooOfDoubles()","0","-","-","-","-"
"9100","bindFooOfIntegersIntoSet","@Binds
  @IntoSet
  abstract Foo<? extends Number> bindFooOfIntegersIntoSet(Foo<Integer> fooOfIntegers);","0","-","-","-","-"
"9101","bindFooExtendsNumberIntoSet","@Binds
  @IntoSet
  abstract Foo<? extends Number> bindFooExtendsNumberIntoSet(Foo<Double> fooOfDoubles);","0","-","-","-","-"
"9102","bindSetOfFooNumbersToObjects","@Binds
  @ElementsIntoSet
  abstract Set<Object> bindSetOfFooNumbersToObjects(Set<Foo<? extends Number>> setOfFooNumbers);","0","-","-","-","-"
"9103","bindFooOfStringsIntoSetOfObjects","@Binds
  @IntoSet
  abstract Object bindFooOfStringsIntoSetOfObjects(FooOfStrings impl);","0","-","-","-","-"
"9104","provideStringHashSet","@Provides
  static HashSet<String> provideStringHashSet()","0","-","-","-","-"
"9105","provideCharSequenceTreeSet","@Provides
  static TreeSet<CharSequence> provideCharSequenceTreeSet()","0","-","-","-","-"
"9106","provideCharSequenceCollection","@Provides
  static Collection<CharSequence> provideCharSequenceCollection()","0","-","-","-","-"
"9107","bindHashSetOfStrings","@Binds
  @ElementsIntoSet
  abstract Set<CharSequence> bindHashSetOfStrings(HashSet<String> set);","0","-","-","-","-"
"9108","bindTreeSetOfCharSequences","@Binds
  @ElementsIntoSet
  abstract Set<CharSequence> bindTreeSetOfCharSequences(TreeSet<CharSequence> set);","0","-","-","-","-"
"9109","bindCollectionOfCharSequences","@Binds
  @ElementsIntoSet
  abstract Set<CharSequence> bindCollectionOfCharSequences(Collection<CharSequence> collection);","0","-","-","-","-"
"9110","bind123ForMap","@Binds
  @IntoMap
  @IntKey(123)
  abstract Object bind123ForMap(@Named(""For-123"") String string);","0","-","-","-","-"
"9111","bind456ForMap","@Binds
  @IntoMap
  @IntKey(456)
  abstract Object bind456ForMap(@Named(""For-456"") String string);","0","-","-","-","-"
"9112","provide789ForMap","@Provides
  @IntoMap
  @IntKey(789)
  static Object provide789ForMap()","0","-","-","-","-"
"9113","primitiveToPrimitive","@Binds
  @SomeQualifier
  abstract int primitiveToPrimitive(int intValue);","0","-","-","-","-"
"9114","intValueIntoSet","@Binds
  @IntoSet
  abstract int intValueIntoSet(int intValue);","0","-","-","-","-"
"9115","intValueIntoMap","@Binds
  @IntoMap
  @IntKey(10)
  abstract int intValueIntoMap(int intValue);","0","-","-","-","-"
"9116","intValue","@Provides
  static int intValue()","0","-","-","-","-"
"9117","bindFooOfStringsIntoQualifiedMap","@Binds
  @IntoMap
  @IntKey(123)
  @SomeQualifier
  abstract Object bindFooOfStringsIntoQualifiedMap(FooOfStrings fooOfStrings);","0","-","-","-","-"
"9118","provide123String","@Provides
  @Named(""For-123"")
  static String provide123String()","0","-","-","-","-"
"9119","provide456String","@Provides
  @Named(""For-456"")
  static String provide456String()","0","-","-","-","-"
"9120","NotExposedInjectsMembers","@Inject NotExposedInjectsMembers()","0","-","-","-","-"
"9121","UsesExposedInjectsMembers","@Inject UsesExposedInjectsMembers(ExposedInjectsMembers exposedInjectsMembers)","0","-","-","-","-"
"9122","notExposed","@Binds
  abstract Exposed notExposed(NotExposed notExposed);","0","-","-","-","-"
"9123","notExposedList","@Provides
  @Singleton // force a rawtypes Provider
  static List<NotExposed> notExposedList()","0","-","-","-","-"
"9124","bindList","@Binds
  abstract List<? extends Exposed> bindList(List<NotExposed> notExposedList);","0","-","-","-","-"
"9125","bindExposedInjectsMembers","@Binds
  abstract ExposedInjectsMembers bindExposedInjectsMembers(
      NotExposedInjectsMembers notExposedInjectsMembers);","0","-","-","-","-"
"9126","provideNotExposedCollection","@Provides
  static Collection<NotExposed> provideNotExposedCollection(NotExposed notExposed)","0","-","-","-","-"
"9127","provideNotExposed","@Provides
  @IntoSet // This is needed to ensure a provider field gets created for providing the Collection.
  static NotExposed provideNotExposed(Provider<Collection<NotExposed>> collectionProvider)","0","-","-","-","-"
"9128","bindCollectionOfNotExposeds","@Binds
  @ElementsIntoSet
  abstract Set<NotExposed> bindCollectionOfNotExposeds(Collection<NotExposed> collection);","0","-","-","-","-"
"9129","provideString","@Provides
  static String provideString(Set<NotExposed> setOfFoo)","0","-","-","-","-"
"9130","NotExposed","@Inject
  NotExposed()","0","-","-","-","-"
"9131","setUp","@Before
  public void setUp()","0","-","-","-","-"
"9132","bindDelegates","@Test
  public void bindDelegates()","0","-","-","-","-"
"9133","bindWithScope","@Test
  public void bindWithScope()","0","-","-","-","-"
"9134","multibindings","@Test
  public void multibindings()","0","-","-","-","-"
"9135","FooOfObjects","@Inject FooOfObjects()","0","-","-","-","-"
"9136","FooImpl","@Inject FooImpl()","0","-","-","-","-"
"9137","bindFoo","@Binds
    @Singleton
    Foo bindFoo(FooImpl impl);","0","-","-","-","-"
"9138","foo","Foo foo();","0","-","-","-","-"
"9139","fooProvider","Provider<Foo> fooProvider();","0","-","-","-","-"
"9140","fooVsFooProvider_sameInstanceTest","@Test
  public void fooVsFooProvider_sameInstanceTest()","0","-","-","-","-"
"9141","object","Object object();","0","-","-","-","-"
"9142","notExposedString","String notExposedString();","0","-","-","-","-"
"9143","reusableObject","@SomeQualifier
  Object reusableObject();","0","-","-","-","-"
"9144","fooOfStrings","Foo<String> fooOfStrings();","0","-","-","-","-"
"9145","fooOfObjects","Foo<Object> fooOfObjects();","0","-","-","-","-"
"9146","qualifiedFooOfStrings","@SomeQualifier
  Foo<String> qualifiedFooOfStrings();","0","-","-","-","-"
"9147","fooOfIntegers","Foo<Integer> fooOfIntegers();","0","-","-","-","-"
"9148","foosOfNumbers","Set<Foo<? extends Number>> foosOfNumbers();","0","-","-","-","-"
"9149","objects","Set<Object> objects();","0","-","-","-","-"
"9150","charSequences","Set<CharSequence> charSequences();","0","-","-","-","-"
"9151","integerObjectMap","Map<Integer, Object> integerObjectMap();","0","-","-","-","-"
"9152","integerProviderOfObjectMap","Map<Integer, Provider<Object>> integerProviderOfObjectMap();","0","-","-","-","-"
"9153","qualifiedIntegerObjectMap","@SomeQualifier Map<Integer, Object> qualifiedIntegerObjectMap();","0","-","-","-","-"
"9154","uniquePrimitive","@SomeQualifier int uniquePrimitive();","0","-","-","-","-"
"9155","primitiveSet","Set<Integer> primitiveSet();","0","-","-","-","-"
"9156","primitiveValueMap","Map<Integer, Integer> primitiveValueMap();","0","-","-","-","-"
"9157","exposed","Exposed exposed();","0","-","-","-","-"
"9158","exposedProvider","Provider<Exposed> exposedProvider();","0","-","-","-","-"
"9159","listOfExposed","List<? extends Exposed> listOfExposed();","0","-","-","-","-"
"9160","providerOfListOfExposed","Provider<List<? extends Exposed>> providerOfListOfExposed();","0","-","-","-","-"
"9161","usesExposedInjectsMembers","UsesExposedInjectsMembers usesExposedInjectsMembers();","0","-","-","-","-"
"9162","usesExposedInjectsMembersProvider","/**
   * This provider needs a","0","-","-","-","-"
"9163","FooOfStrings","@Inject
  FooOfStrings()","0","-","-","-","-"
"9164","NeedsFactory","@Inject
  NeedsFactory(
      @SuppressWarnings(""unused"") NeedsFactory_SomethingFactory somethingFactory,
      @SuppressWarnings(""unused"") SomethingFactoryImpl somethingFactoryImpl)","0","-","-","-","-"
"9165","SomethingFactoryImpl","@Inject SomethingFactoryImpl()","0","-","-","-","-"
"9166","provideHashSet","@Provides
    static HashSet<String> provideHashSet()","0","-","-","-","-"
"9167","bindStringSet","@Binds
    abstract Set<String> bindStringSet(HashSet<String> set);","0","-","-","-","-"
"9168","provideHashMap","@Provides
    static HashMap<String, String> provideHashMap()","0","-","-","-","-"
"9169","bindStringMap","@Binds
    abstract Map<String, String> bindStringMap(HashMap<String, String> map);","0","-","-","-","-"
"9170","set","Set<String> set();","0","-","-","-","-"
"9171","map","Map<String, String> map();","0","-","-","-","-"
"9172","works","@Test
  public void works()","0","-","-","-","-"
"9173","testReusable","@Test
  public void testReusable()","0","-","-","-","-"
"9174","reusableInParent","@InParent
  Object reusableInParent();","0","-","-","-","-"
"9175","childOne","ChildOne childOne();","0","-","-","-","-"
"9176","childTwo","ChildTwo childTwo();","0","-","-","-","-"
"9177","primitive","int primitive();","0","-","-","-","-"
"9178","unboxedPrimitive","boolean unboxedPrimitive();","0","-","-","-","-"
"9179","booleanProvider","Provider<Boolean> booleanProvider();","0","-","-","-","-"
"9180","reusableInParent","@InParent
    Object reusableInParent();","0","-","-","-","-"
"9181","reusableInChild","@InChildren
    Object reusableInChild();","0","-","-","-","-"
"9182","reusableInParent","@InParent
    Object reusableInParent();","0","-","-","-","-"
"9183","reusableInChild","@InChildren
    Object reusableInChild();","0","-","-","-","-"
"9184","inParent","@Provides
    @Reusable
    @InParent
    static Object inParent()","0","-","-","-","-"
"9185","inChildren","@Provides
    @Reusable
    @InChildren
    static Object inChildren()","0","-","-","-","-"
"9186","primitive","@Provides
    @Reusable
    static int primitive()","0","-","-","-","-"
"9187","boxedPrimitive","@Provides
    @Reusable
    static Boolean boxedPrimitive()","0","-","-","-","-"
"9188","MarkThatRulesRanRule","public MarkThatRulesRanRule(Object testInstance)","0","-","-","-","-"
"9189","delayComponentReady","public void delayComponentReady()","0","-","-","-","-"
"9190","componentReady","public void componentReady()","0","-","-","-","-"
"9191","inject","public void inject()","0","-","-","-","-"
"9192","apply","@Override
  public Statement apply(final Statement base, Description description)","0","-","-","-","-"
"9193","evaluate","@Override
      public void evaluate() throws Throwable","0","-","-","-","-"
"9194","getTestApplicationComponentManager","private TestApplicationComponentManager getTestApplicationComponentManager()","0","-","-","-","-"
"9195","hasAnnotation","private static boolean hasAnnotation(Object obj, String annotationName)","0","-","-","-","-"
"9196","injectTest","void injectTest(T t);","0","-","-","-","-"
"9197","createComponent","static Object createComponent(Application application)","0","-","-","-","-"
"9198","create","/** Creates the early test component. */
  abstract Object create(Application application);","0","-","-","-","-"
"9199","get","/** Returns a","0","-","-","-","-"
"9200","get","static TestComponentData get(Class<?> testClass)","0","-","-","-","-"
"9201","errorMessage","private static String errorMessage(Class<?> testClass, String generatedClassName)","0","-","-","-","-"
"9202","getEnclosedClassName","private static String getEnclosedClassName(Class<?> testClass)","0","-","-","-","-"
"9203","TestApplicationComponentManager","public TestApplicationComponentManager(Application application)","0","-","-","-","-"
"9204","earlySingletonComponent","@Override
  public Object earlySingletonComponent()","0","-","-","-","-"
"9205","generatedComponent","@Override
  public Object generatedComponent()","0","-","-","-","-"
"9206","getOnComponentReadyRunner","@Override
  public OnComponentReadyRunner getOnComponentReadyRunner()","0","-","-","-","-"
"9207","setHasHiltTestRule","/** For framework use only! This flag must be set before component creation. */
  void setHasHiltTestRule(Description description)","0","-","-","-","-"
"9208","checkStateIsCleared","void checkStateIsCleared()","0","-","-","-","-"
"9209","clearState","void clearState()","0","-","-","-","-"
"9210","getDescription","public Description getDescription()","0","-","-","-","-"
"9211","getTestInstance","public Object getTestInstance()","0","-","-","-","-"
"9212","registerModule","/** For framework use only! This method should be called when a required module is installed. */
  public <T> void registerModule(Class<T> moduleClass, T module)","0","-","-","-","-"
"9213","delayComponentReady","void delayComponentReady()","0","-","-","-","-"
"9214","componentReady","void componentReady()","0","-","-","-","-"
"9215","inject","void inject()","0","-","-","-","-"
"9216","verifyDelayedComponentWasMadeReady","void verifyDelayedComponentWasMadeReady()","0","-","-","-","-"
"9217","tryToCreateComponent","private void tryToCreateComponent()","0","-","-","-","-"
"9218","setTestInstance","void setTestInstance(Object testInstance)","0","-","-","-","-"
"9219","setAutoAddModule","void setAutoAddModule(boolean autoAddModule)","0","-","-","-","-"
"9220","requiredModules","private Set<Class<?>> requiredModules()","0","-","-","-","-"
"9221","waitForBindValue","private boolean waitForBindValue()","0","-","-","-","-"
"9222","testInjector","private TestInjector<Object> testInjector()","0","-","-","-","-"
"9223","componentSupplier","private TestComponentData.ComponentSupplier componentSupplier()","0","-","-","-","-"
"9224","testComponentData","private TestComponentData testComponentData()","0","-","-","-","-"
"9225","testClass","private Class<?> testClass()","0","-","-","-","-"
"9226","bindValueReady","private boolean bindValueReady()","0","-","-","-","-"
"9227","delayedComponentReady","private boolean delayedComponentReady()","0","-","-","-","-"
"9228","hasHiltTestRule","private boolean hasHiltTestRule()","0","-","-","-","-"
"9229","TestComponentData","public TestComponentData(
      boolean waitForBindValue,
      TestInjector<Object> testInjector,
      Set<Class<?>> daggerRequiredModules,
      Set<Class<?>> hiltRequiredModules,
      ComponentSupplier componentSupplier)","0","-","-","-","-"
"9230","componentSupplier","/** Returns the","0","-","-","-","-"
"9231","testInjector","/** Returns the","0","-","-","-","-"
"9232","daggerRequiredModules","/** Returns the set of modules that Dagger cannot create instances of itself */
  public Set<Class<?>> daggerRequiredModules()","0","-","-","-","-"
"9233","hiltRequiredModules","/**
   * Returns a subset of","0","-","-","-","-"
"9234","waitForBindValue","/** Returns true if creation of the component needs to wait for bind() to be called. */
  public boolean waitForBindValue()","0","-","-","-","-"
"9235","get","Object get(Map<Class<?>, ?> registeredModules, Object testInstance, Boolean autoAddModule);","0","-","-","-","-"
"9236","componentManager","@Override
  public final GeneratedComponentManager<Object> componentManager()","0","-","-","-","-"
"9237","generatedComponent","@Override
  public final Object generatedComponent()","0","-","-","-","-"
"9238","HiltAndroidRule","/** Creates a new instance of the rules. Tests should pass","0","-","-","-","-"
"9239","apply","@Override public Statement apply(Statement baseStatement, Description description)","0","-","-","-","-"
"9240","inject","/**
   * Completes Dagger injection. Must be called before accessing inject types. Must be called after
   * any non-static test module have been added. If","0","-","-","-","-"
"9241","delayComponentReady","/**
   * Delays creating the component until","0","-","-","-","-"
"9242","componentReady","/**
   * Completes Dagger component creation if","0","-","-","-","-"
"9243","backend","/** Returns the","0","-","-","-","-"
"9244","kotlinSource","/** Returns a","0","-","-","-","-"
"9245","kotlinSource","/** Returns a","0","-","-","-","-"
"9246","javaSource","/** Returns a","0","-","-","-","-"
"9247","javaSource","/** Returns a","0","-","-","-","-"
"9248","hiltCompiler","/** Returns a","0","-","-","-","-"
"9249","hiltCompiler","/** Returns a","0","-","-","-","-"
"9250","compiler","public static Compiler compiler(Processor... extraProcessors)","0","-","-","-","-"
"9251","compiler","public static Compiler compiler(Collection<? extends Processor> extraProcessors)","0","-","-","-","-"
"9252","compileWithKapt","public static void compileWithKapt(
      List<Source> sources,
      TemporaryFolder tempFolder,
      Consumer<TestCompilationResult> onCompilationResult)","0","-","-","-","-"
"9253","compileWithKapt","public static void compileWithKapt(
      List<Source> sources,
      Map<String, String> processorOptions,
      TemporaryFolder tempFolder,
      Consumer<TestCompilationResult> onCompilationResult)","0","-","-","-","-"
"9254","compileWithKapt","public static void compileWithKapt(
      List<Source> sources,
      List<Processor> additionalProcessors,
      TemporaryFolder tempFolder,
      Consumer<TestCompilationResult> onCompilationResult)","0","-","-","-","-"
"9255","compileWithKapt","public static void compileWithKapt(
      List<Source> sources,
      Map<String, String> processorOptions,
      List<Processor> additionalProcessors,
      TemporaryFolder tempFolder,
      Consumer<TestCompilationResult> onCompilationResult)","0","-","-","-","-"
"9256","defaultProcessors","static ImmutableList<Processor> defaultProcessors()","0","-","-","-","-"
"9257","kspDefaultProcessors","private static ImmutableList<SymbolProcessorProvider> kspDefaultProcessors()","0","-","-","-","-"
"9258","builder","static Builder builder()","0","-","-","-","-"
"9259","sources","/** Returns the sources being compiled */
    abstract ImmutableCollection<Source> sources();","0","-","-","-","-"
"9260","processorOptions","/** Returns the annotation processors options. */
    abstract ImmutableMap<String, String> processorOptions();","0","-","-","-","-"
"9261","additionalJavacProcessors","/** Returns the extra Javac processors. */
    abstract ImmutableCollection<Processor> additionalJavacProcessors();","0","-","-","-","-"
"9262","additionalKspProcessors","/** Returns the extra KSP processors. */
    abstract ImmutableCollection<SymbolProcessorProvider> additionalKspProcessors();","0","-","-","-","-"
"9263","javacArguments","/** Returns the command-line options */
    abstract ImmutableCollection<String> javacArguments();","0","-","-","-","-"
"9264","withProcessorOptions","/** Returns a new","0","-","-","-","-"
"9265","processingSteps","/** Returns the processing steps suppliers. */
    abstract ImmutableCollection<Function<XProcessingEnv, BaseProcessingStep>> processingSteps();","0","-","-","-","-"
"9266","withProcessingSteps","public HiltCompiler withProcessingSteps(
        Function<XProcessingEnv, BaseProcessingStep>... mapping)","0","-","-","-","-"
"9267","withAdditionalJavacProcessors","/** Returns a new","0","-","-","-","-"
"9268","withAdditionalKspProcessors","/** Returns a new","0","-","-","-","-"
"9269","withJavacArguments","/** Returns a new","0","-","-","-","-"
"9270","withJavacArguments","/** Returns a new","0","-","-","-","-"
"9271","toBuilder","/** Returns a builder with the current values of this","0","-","-","-","-"
"9272","compile","public void compile(Consumer<CompilationResultSubject> onCompilationResult)","0","-","-","-","-"
"9273","compileInternal","private void compileInternal(
        Consumer<CompilationResultSubject> onCompilationResult,
        ImmutableList<String> kotlincArguments)","0","-","-","-","-"
"9274","mergeProcessors","private static <T> ImmutableList<T> mergeProcessors(
        Collection<T> defaultProcessors, Collection<T> extraProcessors)","0","-","-","-","-"
"9275","sources","abstract Builder sources(ImmutableCollection<Source> sources);","0","-","-","-","-"
"9276","processorOptions","abstract Builder processorOptions(ImmutableMap<String, String> processorOptions);","0","-","-","-","-"
"9277","additionalJavacProcessors","abstract Builder additionalJavacProcessors(ImmutableCollection<Processor> processors);","0","-","-","-","-"
"9278","additionalKspProcessors","abstract Builder additionalKspProcessors(
          ImmutableCollection<SymbolProcessorProvider> processors);","0","-","-","-","-"
"9279","javacArguments","abstract Builder javacArguments(ImmutableCollection<String> arguments);","0","-","-","-","-"
"9280","processingSteps","abstract Builder processingSteps(
          ImmutableCollection<Function<XProcessingEnv, BaseProcessingStep>> processingSteps);","0","-","-","-","-"
"9281","build","abstract HiltCompiler build();","0","-","-","-","-"
"9282","HiltCompilerTests","private HiltCompilerTests()","0","-","-","-","-"
"9283","JavacProcessor","JavacProcessor(Function<XProcessingEnv, BaseProcessingStep> processingStep)","0","-","-","-","-"
"9284","processingStep","@Override
    public BaseProcessingStep processingStep()","0","-","-","-","-"
"9285","KspProcessor","private KspProcessor(
        SymbolProcessorEnvironment symbolProcessorEnvironment,
        Function<XProcessingEnv, BaseProcessingStep> processingStep)","0","-","-","-","-"
"9286","processingStep","@Override
    public BaseProcessingStep processingStep()","0","-","-","-","-"
"9287","Provider","Provider(Function<XProcessingEnv, BaseProcessingStep> processingStep)","0","-","-","-","-"
"9288","create","@Override
      public SymbolProcessor create(SymbolProcessorEnvironment symbolProcessorEnvironment)","0","-","-","-","-"
"9289","HiltCompilerProcessors","private HiltCompilerProcessors()","0","-","-","-","-"
"9290","setComponentManager","/** Used by generated code, to notify listeners that the component has been created. */
  public void setComponentManager(GeneratedComponentManager<?> componentManager)","0","-","-","-","-"
"9291","addListener","/** Must be called on the test thread, before the Statement is evaluated. */
  public static <T> void addListener(
      Context context, Class<T> entryPoint, OnComponentReadyListener<T> listener)","0","-","-","-","-"
"9292","addListenerInternal","private <T> void addListenerInternal(Class<T> entryPoint, OnComponentReadyListener<T> listener)","0","-","-","-","-"
"9293","isEmpty","public boolean isEmpty()","0","-","-","-","-"
"9294","create","static <T> EntryPointListener<T> create(
        Class<T> entryPoint, OnComponentReadyListener<T> listener)","0","-","-","-","-"
"9295","entryPoint","abstract Class<T> entryPoint();","0","-","-","-","-"
"9296","listener","abstract OnComponentReadyListener<T> listener();","0","-","-","-","-"
"9297","deliverComponent","private void deliverComponent(GeneratedComponentManager<?> object)","0","-","-","-","-"
"9298","runListener","private static <T> void runListener(
      GeneratedComponentManager<?> componentManager,
      Class<T> entryPoint,
      OnComponentReadyListener<T> listener)","0","-","-","-","-"
"9299","getOnComponentReadyRunner","OnComponentReadyRunner getOnComponentReadyRunner();","0","-","-","-","-"
"9300","onComponentReady","void onComponentReady(T entryPoint) throws Throwable;","0","-","-","-","-"
"9301","earlySingletonComponent","Object earlySingletonComponent();","0","-","-","-","-"
"9302","isFragmentGetContextFixDisabled","public static boolean isFragmentGetContextFixDisabled(Context context)","0","-","-","-","-"
"9303","getDisableFragmentGetContextFix","@DisableFragmentGetContextFix Set<Boolean> getDisableFragmentGetContextFix();","0","-","-","-","-"
"9304","disableFragmentGetContextFix","@Multibinds
    @DisableFragmentGetContextFix
    abstract Set<Boolean> disableFragmentGetContextFix();","0","-","-","-","-"
"9305","FragmentGetContextFix","private FragmentGetContextFix()","0","-","-","-","-"
"9306","ThreadUtil","private ThreadUtil()","0","-","-","-","-"
"9307","isMainThread","/** Returns true if the current thread is the Main thread. */
  public static boolean isMainThread()","0","-","-","-","-"
"9308","ensureMainThread","/** Checks that the current thread is the Main thread. Otherwise throws an exception. */
  public static void ensureMainThread()","0","-","-","-","-"
"9309","service","ServiceComponentBuilder service(@BindsInstance Service service);","0","-","-","-","-"
"9310","build","ServiceComponent build();","0","-","-","-","-"
"9311","view","ViewComponentBuilder view(@BindsInstance View view);","0","-","-","-","-"
"9312","build","ViewComponent build();","0","-","-","-","-"
"9313","savedStateHandleHolder","ActivityRetainedComponentBuilder savedStateHandleHolder(
      @BindsInstance SavedStateHandleHolder savedStateHandleHolder);","0","-","-","-","-"
"9314","build","ActivityRetainedComponent build();","0","-","-","-","-"
"9315","view","ViewWithFragmentComponentBuilder view(@BindsInstance View view);","0","-","-","-","-"
"9316","build","ViewWithFragmentComponent build();","0","-","-","-","-"
"9317","savedStateHandle","ViewModelComponentBuilder savedStateHandle(@BindsInstance SavedStateHandle handle);","0","-","-","-","-"
"9318","viewModelLifecycle","ViewModelComponentBuilder viewModelLifecycle(
      @BindsInstance ViewModelLifecycle viewModelLifecycle);","0","-","-","-","-"
"9319","build","ViewModelComponent build();","0","-","-","-","-"
"9320","activity","ActivityComponentBuilder activity(
      @BindsInstance
          Activity activity);","0","-","-","-","-"
"9321","build","ActivityComponent build();","0","-","-","-","-"
"9322","fragment","FragmentComponentBuilder fragment(@BindsInstance Fragment fragment);","0","-","-","-","-"
"9323","build","FragmentComponent build();","0","-","-","-","-"
"9324","serviceComponentBuilder","ServiceComponentBuilder serviceComponentBuilder();","0","-","-","-","-"
"9325","ServiceComponentManager","public ServiceComponentManager(Service service)","0","-","-","-","-"
"9326","generatedComponent","@Override
  public Object generatedComponent()","0","-","-","-","-"
"9327","createComponent","private Object createComponent()","0","-","-","-","-"
"9328","ApplicationComponentManager","public ApplicationComponentManager(ComponentSupplier componentCreator)","0","-","-","-","-"
"9329","generatedComponent","@Override
  public Object generatedComponent()","0","-","-","-","-"
"9330","get","Object get();","0","-","-","-","-"
"9331","provideSavedStateHandle","@OptIn(markerClass = UnstableApi.class)
  @ActivityRetainedSavedState
  @ActivityRetainedScoped
  @Provides
  static SavedStateHandle provideSavedStateHandle(SavedStateHandleHolder savedStateHandleHolder)","0","-","-","-","-"
"9332","SavedStateHandleHolder","SavedStateHandleHolder(@Nullable CreationExtras extras)","0","-","-","-","-"
"9333","getSavedStateHandle","SavedStateHandle getSavedStateHandle()","0","-","-","-","-"
"9334","clear","public void clear()","0","-","-","-","-"
"9335","setExtras","public void setExtras(CreationExtras extras)","0","-","-","-","-"
"9336","isInvalid","public boolean isInvalid()","0","-","-","-","-"
"9337","viewWithFragmentComponentBuilder","ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder();","0","-","-","-","-"
"9338","viewComponentBuilder","ViewComponentBuilder viewComponentBuilder();","0","-","-","-","-"
"9339","ViewComponentManager","public ViewComponentManager(View view, boolean hasFragmentBindings)","0","-","-","-","-"
"9340","generatedComponent","@Override
  public Object generatedComponent()","0","-","-","-","-"
"9341","createComponent","private Object createComponent()","0","-","-","-","-"
"9342","maybeGetParentComponentManager","public GeneratedComponentManager<?> maybeGetParentComponentManager()","0","-","-","-","-"
"9343","getParentComponentManager","private GeneratedComponentManager<?> getParentComponentManager(boolean allowMissing)","0","-","-","-","-"
"9344","getParentContext","private Context getParentContext(Class<?> parentType, boolean allowMissing)","0","-","-","-","-"
"9345","unwrap","private static Context unwrap(Context context, Class<?> target)","0","-","-","-","-"
"9346","onStateChanged","@Override
          public void onStateChanged(LifecycleOwner source, Lifecycle.Event event)","0","-","-","-","-"
"9347","FragmentContextWrapper","FragmentContextWrapper(Context base, Fragment fragment)","0","-","-","-","-"
"9348","FragmentContextWrapper","FragmentContextWrapper(LayoutInflater baseInflater, Fragment fragment)","0","-","-","-","-"
"9349","getFragment","Fragment getFragment()","0","-","-","-","-"
"9350","getSystemService","@Override
    public Object getSystemService(String name)","0","-","-","-","-"
"9351","retainedComponentBuilder","ActivityRetainedComponentBuilder retainedComponentBuilder();","0","-","-","-","-"
"9352","getActivityRetainedLifecycle","ActivityRetainedLifecycle getActivityRetainedLifecycle();","0","-","-","-","-"
"9353","ActivityRetainedComponentViewModel","ActivityRetainedComponentViewModel(
        ActivityRetainedComponent component, SavedStateHandleHolder savedStateHandleHolder)","0","-","-","-","-"
"9354","getComponent","ActivityRetainedComponent getComponent()","0","-","-","-","-"
"9355","getSavedStateHandleHolder","SavedStateHandleHolder getSavedStateHandleHolder()","0","-","-","-","-"
"9356","onCleared","@Override
    protected void onCleared()","0","-","-","-","-"
"9357","ActivityRetainedComponentManager","ActivityRetainedComponentManager(ComponentActivity activity)","0","-","-","-","-"
"9358","getViewModelProvider","private ViewModelProvider getViewModelProvider(
      ViewModelStoreOwner owner, Context context)","0","-","-","-","-"
"9359","create","@NonNull
          @Override
          @SuppressWarnings(""unchecked"")
          public <T extends ViewModel> T create(
              @NonNull Class<T> aClass, CreationExtras creationExtras)","0","-","-","-","-"
"9360","generatedComponent","@Override
  public ActivityRetainedComponent generatedComponent()","0","-","-","-","-"
"9361","getSavedStateHandleHolder","public SavedStateHandleHolder getSavedStateHandleHolder()","0","-","-","-","-"
"9362","createComponent","private ActivityRetainedComponent createComponent()","0","-","-","-","-"
"9363","provideActivityRetainedLifecycle","@Provides
    @ActivityRetainedScoped
    static ActivityRetainedLifecycle provideActivityRetainedLifecycle()","0","-","-","-","-"
"9364","generatedComponent","public static Object generatedComponent(Context context)","0","-","-","-","-"
"9365","BroadcastReceiverComponentManager","private BroadcastReceiverComponentManager()","0","-","-","-","-"
"9366","activityComponentBuilder","ActivityComponentBuilder activityComponentBuilder();","0","-","-","-","-"
"9367","ActivityComponentManager","public ActivityComponentManager(Activity activity)","0","-","-","-","-"
"9368","generatedComponent","@Override
  public Object generatedComponent()","0","-","-","-","-"
"9369","getSavedStateHandleHolder","public final SavedStateHandleHolder getSavedStateHandleHolder()","0","-","-","-","-"
"9370","createComponent","protected Object createComponent()","0","-","-","-","-"
"9371","fragmentComponentBuilder","FragmentComponentBuilder fragmentComponentBuilder();","0","-","-","-","-"
"9372","FragmentComponentManager","public FragmentComponentManager(Fragment fragment)","0","-","-","-","-"
"9373","generatedComponent","@Override
  public Object generatedComponent()","0","-","-","-","-"
"9374","createComponent","private Object createComponent()","0","-","-","-","-"
"9375","initializeArguments","/** Returns the fragments bundle, creating a new one if none exists. */
  public static final void initializeArguments(Fragment fragment)","0","-","-","-","-"
"9376","findActivity","public static final Context findActivity(Context context)","0","-","-","-","-"
"9377","createContextWrapper","public static ContextWrapper createContextWrapper(Context base, Fragment fragment)","0","-","-","-","-"
"9378","createContextWrapper","public static ContextWrapper createContextWrapper(
      LayoutInflater baseInflater, Fragment fragment)","0","-","-","-","-"
"9379","validate","/** Called immediately before component creation to allow validation on the Fragment. */
  protected void validate(Fragment fragment)","0","-","-","-","-"
"9380","RetainedLifecycleImpl","public RetainedLifecycleImpl()","0","-","-","-","-"
"9381","addOnClearedListener","@Override
  public void addOnClearedListener(@NonNull RetainedLifecycle.OnClearedListener listener)","0","-","-","-","-"
"9382","removeOnClearedListener","@Override
  public void removeOnClearedListener(@NonNull RetainedLifecycle.OnClearedListener listener)","0","-","-","-","-"
"9383","dispatchOnCleared","public void dispatchOnCleared()","0","-","-","-","-"
"9384","throwIfOnClearedDispatched","private void throwIfOnClearedDispatched()","0","-","-","-","-"
"9385","getHiltViewModelMap","@HiltViewModelMap
    Map<Class<?>, Provider<ViewModel>> getHiltViewModelMap();","0","-","-","-","-"
"9386","getHiltViewModelAssistedMap","@HiltViewModelAssistedMap
    Map<Class<?>, Object> getHiltViewModelAssistedMap();","0","-","-","-","-"
"9387","hiltViewModelMap","@Multibinds
    @HiltViewModelMap
    Map<Class<?>, ViewModel> hiltViewModelMap();","0","-","-","-","-"
"9388","hiltViewModelAssistedMap","@Multibinds
    @HiltViewModelAssistedMap
    Map<Class<?>, Object> hiltViewModelAssistedMap();","0","-","-","-","-"
"9389","HiltViewModelFactory","public HiltViewModelFactory(
      @NonNull Map<Class<?>, Boolean> hiltViewModelKeys,
      @NonNull ViewModelProvider.Factory delegateFactory,
      @NonNull ViewModelComponentBuilder viewModelComponentBuilder)","0","-","-","-","-"
"9390","create","@NonNull
          @Override
          public <T extends ViewModel> T create(
              @NonNull Class<T> modelClass, @NonNull CreationExtras extras)","0","-","-","-","-"
"9391","createViewModel","private <T extends ViewModel> T createViewModel(
              @NonNull ViewModelComponent component,
              @NonNull Class<T> modelClass,
              @NonNull CreationExtras extras)","0","-","-","-","-"
"9392","create","@NonNull
  @Override
  public <T extends ViewModel> T create(
      @NonNull Class<T> modelClass, @NonNull CreationExtras extras)","0","-","-","-","-"
"9393","create","@NonNull
  @Override
  public <T extends ViewModel> T create(@NonNull Class<T> modelClass)","0","-","-","-","-"
"9394","getViewModelKeys","@HiltViewModelMap.KeySet
    Map<Class<?>, Boolean> getViewModelKeys();","0","-","-","-","-"
"9395","getViewModelComponentBuilder","ViewModelComponentBuilder getViewModelComponentBuilder();","0","-","-","-","-"
"9396","createInternal","public static ViewModelProvider.Factory createInternal(
      @NonNull Activity activity,
      @NonNull SavedStateRegistryOwner owner,
      @Nullable Bundle defaultArgs,
      @NonNull ViewModelProvider.Factory delegateFactory)","0","-","-","-","-"
"9397","createInternal","public static ViewModelProvider.Factory createInternal(
      @NonNull Activity activity, @NonNull ViewModelProvider.Factory delegateFactory)","0","-","-","-","-"
"9398","getActivityFactory","/**
   * Retrieves the default view model factory for the activity.
   *
   * <p>Do not use except in Hilt generated code!
   */
  public static ViewModelProvider.Factory getActivityFactory(ComponentActivity activity,
      ViewModelProvider.Factory delegateFactory)","0","-","-","-","-"
"9399","getFragmentFactory","/**
   * Retrieves the default view model factory for the activity.
   *
   * <p>Do not use except in Hilt generated code!
   */
  public static ViewModelProvider.Factory getFragmentFactory(
      Fragment fragment, ViewModelProvider.Factory delegateFactory)","0","-","-","-","-"
"9400","InternalFactoryFactory","@Inject
    InternalFactoryFactory(
        @HiltViewModelMap.KeySet Map<Class<?>, Boolean> keySet,
        ViewModelComponentBuilder viewModelComponentBuilder)","0","-","-","-","-"
"9401","fromActivity","ViewModelProvider.Factory fromActivity(
        ComponentActivity activity, ViewModelProvider.Factory delegateFactory)","0","-","-","-","-"
"9402","fromFragment","ViewModelProvider.Factory fromFragment(
        Fragment fragment, ViewModelProvider.Factory delegateFactory)","0","-","-","-","-"
"9403","getHiltViewModelFactory","private ViewModelProvider.Factory getHiltViewModelFactory(
        ViewModelProvider.Factory delegate)","0","-","-","-","-"
"9404","viewModelKeys","@Multibinds
    @HiltViewModelMap.KeySet
    abstract Map<Class<?>, Boolean> viewModelKeys();","0","-","-","-","-"
"9405","getHiltInternalFactoryFactory","InternalFactoryFactory getHiltInternalFactoryFactory();","0","-","-","-","-"
"9406","getHiltInternalFactoryFactory","InternalFactoryFactory getHiltInternalFactoryFactory();","0","-","-","-","-"
"9407","DefaultViewModelFactories","private DefaultViewModelFactories()","0","-","-","-","-"
"9408","getApplication","/** Finds the android Application from a context. */
  public static Application getApplication(Context context)","0","-","-","-","-"
"9409","Contexts","private Contexts()","0","-","-","-","-"
"9410","provideContext","@Binds
  @ActivityContext
  abstract Context provideContext(Activity activity);","0","-","-","-","-"
"9411","provideFragmentActivity","@Provides
  @Reusable
  static FragmentActivity provideFragmentActivity(Activity activity)","0","-","-","-","-"
"9412","ActivityModule","private ActivityModule()","0","-","-","-","-"
"9413","ApplicationContextModule","public ApplicationContextModule(Context applicationContext)","0","-","-","-","-"
"9414","provideContext","@Provides
  @ApplicationContext
  Context provideContext()","0","-","-","-","-"
"9415","provideApplication","@Provides
  Application provideApplication()","0","-","-","-","-"
"9416","wasInjectedByHilt","/** Returns true if this class was injected by Hilt. */
  boolean wasInjectedByHilt();","0","-","-","-","-"
"9417","customInject","void customInject();","0","-","-","-","-"
"9418","addOnClearedListener","/**
   * Adds a new","0","-","-","-","-"
"9419","removeOnClearedListener","/**
   * Removes a","0","-","-","-","-"
"9420","onCleared","void onCleared();","0","-","-","-","-"
"9421","get","/**
   * Returns the early entry point interface given a component manager holder. Note that this
   * performs an unsafe cast and so callers should be sure that the given component/component
   * manager matches the early entry point interface that is given.
   *
   * @param applicationContext The application context.
   * @param entryPoint The interface marked with","0","-","-","-","-"
"9422","hasAnnotationReflection","private static boolean hasAnnotationReflection(
      Class<?> clazz, Class<? extends Annotation> annotationClazz)","0","-","-","-","-"
"9423","EarlyEntryPoints","private EarlyEntryPoints()","0","-","-","-","-"
"9424","wasInjectedByHilt","/**
   * Returns true if the Activity was injected by Hilt.
   *
   * @throws IllegalArgumentException if the given instance is not an AndroidEntryPoint nor is
   *     annotated with","0","-","-","-","-"
"9425","wasInjectedByHilt","/**
   * Returns true if the BroadcastReceiver was injected by Hilt.
   *
   * @throws IllegalArgumentException if the given instance is not an AndroidEntryPoint nor is
   *     annotated with","0","-","-","-","-"
"9426","wasInjectedByHilt","/**
   * Returns true if the Fragment was injected by Hilt.
   *
   * @throws IllegalArgumentException if the given instance is not an AndroidEntryPoint nor is
   *     annotated with","0","-","-","-","-"
"9427","wasInjectedByHilt","/**
   * Returns true if the Service was injected by Hilt.
   *
   * @throws IllegalArgumentException if the given instance is not an AndroidEntryPoint nor is
   *     annotated with","0","-","-","-","-"
"9428","wasInjectedByHilt","/**
   * Returns true if the View was injected by Hilt.
   *
   * @throws IllegalArgumentException if the given instance is not an AndroidEntryPoint nor is
   *     annotated with","0","-","-","-","-"
"9429","check","private static boolean check(@NonNull Object obj)","0","-","-","-","-"
"9430","OptionalInjectCheck","private OptionalInjectCheck()","0","-","-","-","-"
"9431","inject","/** Injects the passed in application. */
  public static void inject(@NonNull Application app)","0","-","-","-","-"
"9432","CustomInjection","private CustomInjection()","0","-","-","-","-"
"9433","GrpcServiceModuleGenerator","GrpcServiceModuleGenerator(GrpcServiceModel grpcServiceModel)","0","-","-","-","-"
"9434","createType","@Override
  protected TypeSpec createType()","0","-","-","-","-"
"9435","provideServiceDefinition","/**
   * Returns the","0","-","-","-","-"
"9436","SourceGenerator","protected SourceGenerator(String packageName)","0","-","-","-","-"
"9437","javaFile","public JavaFile javaFile()","0","-","-","-","-"
"9438","createType","/**
   * Creates the type to write.
   */
  protected abstract TypeSpec createType();","0","-","-","-","-"
"9439","Dagger","private Dagger()","0","-","-","-","-"
"9440","binds","static AnnotationSpec binds()","0","-","-","-","-"
"9441","intoSet","static AnnotationSpec intoSet()","0","-","-","-","-"
"9442","provides","static AnnotationSpec provides()","0","-","-","-","-"
"9443","module","/** A","0","-","-","-","-"
"9444","GrpcServer","private GrpcServer()","0","-","-","-","-"
"9445","IoGrpc","private IoGrpc()","0","-","-","-","-"
"9446","JavaxInject","private JavaxInject()","0","-","-","-","-"
"9447","inject","static AnnotationSpec inject()","0","-","-","-","-"
"9448","singleton","static AnnotationSpec singleton()","0","-","-","-","-"
"9449","initSteps","@Override
  protected ImmutableList<GrpcServiceProcessor> initSteps()","0","-","-","-","-"
"9450","annotations","@Override
  public ImmutableSet<Class<GrpcService>> annotations()","0","-","-","-","-"
"9451","getSupportedSourceVersion","@Override
  public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"9452","process","@Override
  public Set<Element> process(
      SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation)","0","-","-","-","-"
"9453","write","private void write(SourceGenerator grpcServiceTypeWriter, final TypeElement element)","0","-","-","-","-"
"9454","ProxyModuleGenerator","ProxyModuleGenerator(GrpcServiceModel grpcServiceModel)","0","-","-","-","-"
"9455","createType","@Override
  protected TypeSpec createType()","0","-","-","-","-"
"9456","provideServiceDefinitionContribution","/**
   * Returns the","0","-","-","-","-"
"9457","methodDescriptors","/**
   * Returns the","0","-","-","-","-"
"9458","findMethodDescriptors","private <E extends Element> ImmutableList<CodeBlock> findMethodDescriptors(
      List<E> elements,
      Function<? super E, TypeMirror> elementType,
      Function<? super E, CodeBlock> elementReference)","0","-","-","-","-"
"9459","provideServiceDefinitionFactory","/**
   * Returns the","0","-","-","-","-"
"9460","anonymousServiceDefinitionFactory","/**
   * Returns the anonymous inner class that implements the","0","-","-","-","-"
"9461","ServiceDefinitionTypeGenerator","ServiceDefinitionTypeGenerator(GrpcServiceModel grpcServiceModel)","0","-","-","-","-"
"9462","createType","@Override
  protected TypeSpec createType()","0","-","-","-","-"
"9463","GrpcServiceModel","GrpcServiceModel(ProcessingEnvironment processingEnv, TypeElement serviceImplementation)","0","-","-","-","-"
"9464","peerClassWithSuffix","/**
   * Returns the name of a top-level class in the same package as the service implementation
   * class, whose name is the simple name of the service implementation class and its enclosing
   * classes, joined with underscores, and appended with","0","-","-","-","-"
"9465","packageName","String packageName()","0","-","-","-","-"
"9466","validate","public boolean validate()","0","-","-","-","-"
"9467","visitType","@Override
          public Boolean visitType(TypeMirror type, AnnotationValue value)","0","-","-","-","-"
"9468","grpcServiceAnnotation","private AnnotationMirror grpcServiceAnnotation()","0","-","-","-","-"
"9469","grpcClass","/** Returns the gRPC service class declared by","0","-","-","-","-"
"9470","generatedAnnotation","/**
   * Returns the annotation spec for the","0","-","-","-","-"
"9471","forGrpcService","/**
   * Returns the annotation spec for a","0","-","-","-","-"
"9472","subcomponentServiceDefinitionMethodName","protected final String subcomponentServiceDefinitionMethodName()","0","-","-","-","-"
"9473","simpleServiceName","private String simpleServiceName()","0","-","-","-","-"
"9474","serviceImplBase","private TypeElement serviceImplBase(TypeMirror service)","0","-","-","-","-"
"9475","validateGrpcClass","private boolean validateGrpcClass(TypeMirror type, AnnotationValue value)","0","-","-","-","-"
"9476","bindableService","private TypeMirror bindableService()","0","-","-","-","-"
"9477","visitType","@Override
        public TypeElement visitType(TypeMirror t, AnnotationValue p)","0","-","-","-","-"
"9478","defaultAction","@Override
        protected TypeElement defaultAction(Object o, AnnotationValue p)","0","-","-","-","-"
"9479","UnscopedGrpcServiceModuleGenerator","UnscopedGrpcServiceModuleGenerator(GrpcServiceModel grpcServiceModel)","0","-","-","-","-"
"9480","createType","@Override
  protected TypeSpec createType()","0","-","-","-","-"
"9481","unscopedComponentFactory","/**
   * Returns the class that implements the component factory type by returning the singleton
   * component itself.
   */
  private TypeSpec unscopedComponentFactory(String simpleName)","0","-","-","-","-"
"9482","bindSubcomponentFactory","/**
   * Returns the","0","-","-","-","-"
"9483","checkNotNull","/**
   * Ensures that an object reference passed as a parameter to the calling method is not null.
   *
   * @param reference an object reference
   * @return the non-null reference that was validated
   * @throws NullPointerException if","0","-","-","-","-"
"9484","checkNotNull","/**
   * Ensures that an object reference passed as a parameter to the calling method is not null.
   *
   * @param reference an object reference
   * @param errorMessage the exception message to use if the check fails
   * @return the non-null reference that was validated
   * @throws NullPointerException if","0","-","-","-","-"
"9485","checkArgument","/**
   * Ensures the truth of an expression involving one or more parameters to the calling method.
   *
   * @param expression a boolean expression
   * @param errorMessageTemplate a template for the exception message should the check fail. The
   *     message is formed by replacing each occurrence of","0","-","-","-","-"
"9486","checkState","/**
   * Ensures the truth of an expression involving one or more parameters to the calling method.
   *
   * @param expression a boolean expression
   * @param errorMessageTemplate a template for the exception message should the check fail. The
   *     message is formed by replacing each occurrence of","0","-","-","-","-"
"9487","Preconditions","private Preconditions()","0","-","-","-","-"
"9488","DefineComponentNoParent","private DefineComponentNoParent()","0","-","-","-","-"
"9489","componentManager","public GeneratedComponentManager<?> componentManager();","0","-","-","-","-"
"9490","unsafeCast","@SuppressWarnings(","0","-","-","-","-"
"9491","UnsafeCasts","private UnsafeCasts()","0","-","-","-","-"
"9492","generatedComponent","T generatedComponent();","0","-","-","-","-"
"9493","get","/**
   * Returns the entry point interface given a component or component manager. Note that this
   * performs an unsafe cast and so callers should be sure that the given component/component
   * manager matches the entry point interface that is given.
   *
   * @param component The Hilt-generated component instance. For convenience, also takes component
   *     manager instances as well.
   * @param entryPoint The interface marked with","0","-","-","-","-"
"9494","hasAnnotationReflection","private static boolean hasAnnotationReflection(Class<?> clazz, String annotationName)","0","-","-","-","-"
"9495","EntryPoints","private EntryPoints()","0","-","-","-","-"
"9496","instanceFactory","@Test public void instanceFactory()","0","-","-","-","-"
"9497","create_throwsNullPointerException","@Test public void create_throwsNullPointerException()","0","-","-","-","-"
"9498","nullKey","@Test
  public void nullKey()","0","-","-","-","-"
"9499","nullValue","@Test
  public void nullValue()","0","-","-","-","-"
"9500","iterationOrder","@Test
  public void iterationOrder()","0","-","-","-","-"
"9501","incrementingIntegerProvider","private static Provider<Integer> incrementingIntegerProvider(int seed)","0","-","-","-","-"
"9502","create_nullPointerException","@Test
  public void create_nullPointerException()","0","-","-","-","-"
"9503","get","@Test
  public void get()","0","-","-","-","-"
"9504","providerReturnsNull","@Test
  public void providerReturnsNull()","0","-","-","-","-"
"9505","providerReturnsNullSet","@Test
  public void providerReturnsNullSet()","0","-","-","-","-"
"9506","providerReturnsSetWithNullElement","@Test
  public void providerReturnsSetWithNullElement()","0","-","-","-","-"
"9507","invokesProvidersEveryTime","@Test
  public void invokesProvidersEveryTime()","0","-","-","-","-"
"9508","incrementingIntegerProvider","private static Provider<Integer> incrementingIntegerProvider(int seed)","0","-","-","-","-"
"9509","incrementingIntegerSetProvider","private static Provider<Set<Integer>> incrementingIntegerSetProvider(int seed)","0","-","-","-","-"
"9510","setUp","@Before
  public void setUp()","0","-","-","-","-"
"9511","addNull","@Test
  public void addNull()","0","-","-","-","-"
"9512","addNullCollection","@Test
  public void addNullCollection()","0","-","-","-","-"
"9513","addNullElement","@Test
  public void addNullElement()","0","-","-","-","-"
"9514","provider_nullPointerException","@Test
  public void provider_nullPointerException()","0","-","-","-","-"
"9515","lazy_nullPointerException","@Test
  public void lazy_nullPointerException()","0","-","-","-","-"
"9516","doubleWrapping_provider","@Test
  public void doubleWrapping_provider()","0","-","-","-","-"
"9517","doubleWrapping_lazy","@Test
  public void doubleWrapping_lazy()","0","-","-","-","-"
"9518","get","@Test
  public void get() throws Exception","0","-","-","-","-"
"9519","LatchedProvider","LatchedProvider(CountDownLatch latch)","0","-","-","-","-"
"9520","get","@Override
    public Object get()","0","-","-","-","-"
"9521","reentranceWithoutCondition_throwsStackOverflow","@Test public void reentranceWithoutCondition_throwsStackOverflow()","0","-","-","-","-"
"9522","reentranceReturningSameInstance","@Test public void reentranceReturningSameInstance()","0","-","-","-","-"
"9523","reentranceReturningDifferentInstances_throwsIllegalStateException","@Test public void reentranceReturningDifferentInstances_throwsIllegalStateException()","0","-","-","-","-"
"9524","instanceFactoryAsLazyDoesNotWrap","@Test
  public void instanceFactoryAsLazyDoesNotWrap()","0","-","-","-","-"
"9525","checkNotNull","/**
   * Ensures that an object reference passed as a parameter to the calling method is not null.
   *
   * @param reference an object reference
   * @return the non-null reference that was validated
   * @throws NullPointerException if","0","-","-","-","-"
"9526","checkNotNull","/**
   * Ensures that an object reference passed as a parameter to the calling method is not null.
   *
   * @param reference an object reference
   * @param errorMessage the exception message to use if the check fails
   * @return the non-null reference that was validated
   * @throws NullPointerException if","0","-","-","-","-"
"9527","checkNotNullFromProvides","/**
   * Ensures that an object reference returned from a provides method is not null.
   *
   * @param reference an object reference
   * @return the non-null reference that was validated
   * @throws NullPointerException if","0","-","-","-","-"
"9528","checkNotNullFromComponent","/**
   * Ensures that an object reference returned from a component method is not null.
   *
   * @param reference an object reference
   * @return the non-null reference that was validated
   * @throws NullPointerException if","0","-","-","-","-"
"9529","checkNotNull","/**
   * Ensures that an object reference passed as a parameter to the calling method is not null.
   *
   * @param reference an object reference
   * @param errorMessageTemplate a template for the exception message should the check fail. The
   *     message is formed by replacing the single","0","-","-","-","-"
"9530","checkBuilderRequirement","/**
   * Checks that the component builder field","0","-","-","-","-"
"9531","Preconditions","private Preconditions()","0","-","-","-","-"
"9532","noOp","/**
   * Returns a","0","-","-","-","-"
"9533","injectMembers","@Override public void injectMembers(Object instance)","0","-","-","-","-"
"9534","MembersInjectors","private MembersInjectors()","0","-","-","-","-"
"9535","empty","@SuppressWarnings(","0","-","-","-","-"
"9536","builder","/**
   * Constructs a new","0","-","-","-","-"
"9537","Builder","private Builder(int individualProviderSize, int collectionProviderSize)","0","-","-","-","-"
"9538","addProvider","@SuppressWarnings(""unchecked"")
    public Builder<T> addProvider(Provider<? extends T> individualProvider)","0","-","-","-","-"
"9539","addProvider","/**
     * Legacy javax version of the method to support libraries compiled with an older version of
     * Dagger. Do not use directly.
     */
    @Deprecated
    public Builder<T> addProvider(javax.inject.Provider<? extends T> individualProvider)","0","-","-","-","-"
"9540","addCollectionProvider","@SuppressWarnings(""unchecked"")
    public Builder<T> addCollectionProvider(
        Provider<? extends Collection<? extends T>> collectionProvider)","0","-","-","-","-"
"9541","addCollectionProvider","/**
     * Legacy javax version of the method to support libraries compiled with an older version of
     * Dagger. Do not use directly.
     */
    @Deprecated
    public Builder<T> addCollectionProvider(
        javax.inject.Provider<? extends Collection<? extends T>> collectionProvider)","0","-","-","-","-"
"9542","build","public SetFactory<T> build()","0","-","-","-","-"
"9543","SetFactory","private SetFactory(
      List<Provider<T>> individualProviders, List<Provider<Collection<T>>> collectionProviders)","0","-","-","-","-"
"9544","get","/**
   * Returns a","0","-","-","-","-"
"9545","AbstractMapFactory","AbstractMapFactory(Map<K, Provider<V>> map)","0","-","-","-","-"
"9546","contributingMap","/** The map of","0","-","-","-","-"
"9547","Builder","Builder(int size)","0","-","-","-","-"
"9548","put","/** Associates","0","-","-","-","-"
"9549","putAll","Builder<K, V, V2> putAll(Provider<Map<K, V2>> mapOfProviders)","0","-","-","-","-"
"9550","SingleCheck","private SingleCheck(Provider<T> provider)","0","-","-","-","-"
"9551","get","@SuppressWarnings(""unchecked"") // cast only happens when result comes from the delegate provider
  @Override
  public T get()","0","-","-","-","-"
"9552","provider","/** Returns a","0","-","-","-","-"
"9553","provider","/**
   * Legacy javax version of the method to support libraries compiled with an older version of
   * Dagger. Do not use directly.
   */
  public static <P extends javax.inject.Provider<T>, T> javax.inject.Provider<T> provider(
      P delegate)","0","-","-","-","-"
"9554","DaggerCollections","private DaggerCollections()","0","-","-","-","-"
"9555","presizedList","/**
   * Returns a new list that is pre-sized to","0","-","-","-","-"
"9556","hasDuplicates","/** Returns true if at least one pair of items in","0","-","-","-","-"
"9557","newHashSetWithExpectedSize","/**
   * Creates a","0","-","-","-","-"
"9558","newLinkedHashMapWithExpectedSize","/**
   * Creates a","0","-","-","-","-"
"9559","calculateInitialCapacity","private static int calculateInitialCapacity(int expectedSize)","0","-","-","-","-"
"9560","SetBuilder","private SetBuilder(int estimatedSize)","0","-","-","-","-"
"9561","newSetBuilder","/**
   *","0","-","-","-","-"
"9562","add","public SetBuilder<T> add(T t)","0","-","-","-","-"
"9563","addAll","public SetBuilder<T> addAll(Collection<? extends T> collection)","0","-","-","-","-"
"9564","build","public Set<T> build()","0","-","-","-","-"
"9565","get","@Override
  public T get()","0","-","-","-","-"
"9566","setDelegatedProvider","@Deprecated
  public void setDelegatedProvider(Provider<T> delegate)","0","-","-","-","-"
"9567","setDelegatedProvider","/**
   * Legacy javax version of the method to support libraries compiled with an older version of
   * Dagger. Do not use directly.
   */
  @Deprecated
  public void setDelegatedProvider(javax.inject.Provider<T> delegate)","0","-","-","-","-"
"9568","setDelegate","/**
   * Sets","0","-","-","-","-"
"9569","setDelegate","/**
   * Legacy javax version of the method to support libraries compiled with an older version of
   * Dagger. Do not use directly.
   */
  @Deprecated
  public static <T> void setDelegate(
      javax.inject.Provider<T> delegateFactory, javax.inject.Provider<T> delegate)","0","-","-","-","-"
"9570","setDelegateInternal","private static <T> void setDelegateInternal(
      DelegateFactory<T> delegateFactory, Provider<T> delegate)","0","-","-","-","-"
"9571","getDelegate","/**
   * Returns the factory's delegate.
   *
   * @throws NullPointerException if the delegate has not been set
   */
  Provider<T> getDelegate()","0","-","-","-","-"
"9572","create","public static <T> Factory<T> create(T instance)","0","-","-","-","-"
"9573","createNullable","public static <T extends @Nullable Object> Factory<T> createNullable(T instance)","0","-","-","-","-"
"9574","nullInstanceFactory","@SuppressWarnings(""unchecked"") // bivariant implementation
  private static <T extends @Nullable Object> InstanceFactory<T> nullInstanceFactory()","0","-","-","-","-"
"9575","InstanceFactory","private InstanceFactory(T instance)","0","-","-","-","-"
"9576","get","@Override
  public T get()","0","-","-","-","-"
"9577","asDaggerProvider","/** Converts a javax provider to a Dagger internal provider. */
  @SuppressWarnings(""unchecked"")
  public static <T extends @Nullable Object> Provider<T> asDaggerProvider(
      final javax.inject.Provider<T> provider)","0","-","-","-","-"
"9578","get","@Override public T get()","0","-","-","-","-"
"9579","Providers","private Providers()","0","-","-","-","-"
"9580","builder","/** Returns a new","0","-","-","-","-"
"9581","MapProviderFactory","private MapProviderFactory(Map<K, Provider<V>> contributingMap)","0","-","-","-","-"
"9582","get","/**
   * Returns a","0","-","-","-","-"
"9583","Builder","private Builder(int size)","0","-","-","-","-"
"9584","put","@Override
    public Builder<K, V> put(K key, Provider<V> providerOfValue)","0","-","-","-","-"
"9585","put","/**
     * Legacy javax version of the method to support libraries compiled with an older version of
     * Dagger. Do not use directly.
     */
    @Deprecated
    public Builder<K, V> put(K key, javax.inject.Provider<V> providerOfValue)","0","-","-","-","-"
"9586","putAll","@Override
    public Builder<K, V> putAll(Provider<Map<K, Provider<V>>> mapProviderFactory)","0","-","-","-","-"
"9587","putAll","/**
     * Legacy javax version of the method to support libraries compiled with an older version of
     * Dagger. Do not use directly.
     */
    @Deprecated
    public Builder<K, V> putAll(
        final javax.inject.Provider<Map<K, javax.inject.Provider<V>>> mapProviderFactory)","0","-","-","-","-"
"9588","get","@Override public Map<K, Provider<V>> get()","0","-","-","-","-"
"9589","build","/** Returns a new","0","-","-","-","-"
"9590","MapBuilder","private MapBuilder(int size)","0","-","-","-","-"
"9591","newMapBuilder","/**
   * Creates a new","0","-","-","-","-"
"9592","put","public MapBuilder<K, V> put(K key, V value)","0","-","-","-","-"
"9593","putAll","public MapBuilder<K, V> putAll(Map<K, V> map)","0","-","-","-","-"
"9594","build","public Map<K, V> build()","0","-","-","-","-"
"9595","ProviderOfLazy","private ProviderOfLazy(Provider<T> provider)","0","-","-","-","-"
"9596","get","/**
   * Returns a new instance of","0","-","-","-","-"
"9597","create","/**
   * Creates a new","0","-","-","-","-"
"9598","create","/**
   * Legacy javax version of the method to support libraries compiled with an older version of
   * Dagger. Do not use directly.
   */
  @Deprecated
  public static <T> Provider<Lazy<T>> create(javax.inject.Provider<T> provider)","0","-","-","-","-"
"9599","DoubleCheck","private DoubleCheck(Provider<T> provider)","0","-","-","-","-"
"9600","get","@SuppressWarnings(""unchecked"") // cast only happens when result comes from the provider
  @Override
  public T get()","0","-","-","-","-"
"9601","getSynchronized","@SuppressWarnings(""nullness:dereference.of.nullable"") // provider is non-null
  private synchronized @Nullable Object getSynchronized()","0","-","-","-","-"
"9602","reentrantCheck","/**
   * Checks to see if creating the new instance has resulted in a recursive call. If it has, and the
   * new instance is the same as the current instance, return the instance. However, if the new
   * instance differs from the current instance, an","0","-","-","-","-"
"9603","provider","/** Returns a","0","-","-","-","-"
"9604","provider","/**
   * Legacy javax version of the method to support libraries compiled with an older version of
   * Dagger. Do not use directly.
   */
  @Deprecated
  public static <P extends javax.inject.Provider<T>, T> javax.inject.Provider<T> provider(
      P delegate)","0","-","-","-","-"
"9605","lazy","/** Returns a","0","-","-","-","-"
"9606","lazy","/**
   * Legacy javax version of the method to support libraries compiled with an older version of
   * Dagger. Do not use directly.
   */
  public static <P extends javax.inject.Provider<T>, T> Lazy<T> lazy(P provider)","0","-","-","-","-"
"9607","of","public static <V> Map<Class<?>, V> of(Map<String, V> delegate)","0","-","-","-","-"
"9608","LazyClassKeyMap","private LazyClassKeyMap(Map<String, V> delegate)","0","-","-","-","-"
"9609","get","@Override
  public V get(@Nullable Object key)","0","-","-","-","-"
"9610","keySet","@Override
  public Set<Class<?>> keySet()","0","-","-","-","-"
"9611","values","@Override
  public Collection<V> values()","0","-","-","-","-"
"9612","isEmpty","@Override
  public boolean isEmpty()","0","-","-","-","-"
"9613","containsKey","@Override
  public boolean containsKey(@Nullable Object key)","0","-","-","-","-"
"9614","containsValue","@Override
  public boolean containsValue(@Nullable Object value)","0","-","-","-","-"
"9615","size","@Override
  public int size()","0","-","-","-","-"
"9616","entrySet","@Override
  public Set<Map.Entry<Class<?>, V>> entrySet()","0","-","-","-","-"
"9617","remove","@Override
  public V remove(@Nullable Object key)","0","-","-","-","-"
"9618","clear","@Override
  public void clear()","0","-","-","-","-"
"9619","put","@Override
  public V put(Class<?> key, V value)","0","-","-","-","-"
"9620","putAll","@Override
  public void putAll(Map<? extends Class<?>, ? extends V> map)","0","-","-","-","-"
"9621","of","public static <V> MapFactory<V> of(Factory<Map<String, V>> delegate)","0","-","-","-","-"
"9622","MapFactory","private MapFactory(Factory<Map<String, V>> delegate)","0","-","-","-","-"
"9623","get","@Override
    public Map<Class<?>, V> get()","0","-","-","-","-"
"9624","of","public static <V> MapProviderFactory<V> of(Factory<Map<String, Provider<V>>> delegate)","0","-","-","-","-"
"9625","MapProviderFactory","private MapProviderFactory(Factory<Map<String, Provider<V>>> delegate)","0","-","-","-","-"
"9626","get","@Override
    public Map<Class<?>, Provider<V>> get()","0","-","-","-","-"
"9627","builder","/** Returns a new","0","-","-","-","-"
"9628","emptyMapProvider","/** Returns a factory of an empty map. */
  @SuppressWarnings(""unchecked"") // safe contravariant cast
  public static <K, V> Provider<Map<K, V>> emptyMapProvider()","0","-","-","-","-"
"9629","MapFactory","private MapFactory(Map<K, Provider<V>> map)","0","-","-","-","-"
"9630","get","/**
   * Returns a","0","-","-","-","-"
"9631","Builder","private Builder(int size)","0","-","-","-","-"
"9632","put","@Override
    public Builder<K, V> put(K key, Provider<V> providerOfValue)","0","-","-","-","-"
"9633","put","/**
     * Legacy javax version of the method to support libraries compiled with an older version of
     * Dagger. Do not use directly.
     */
    @Deprecated
    public Builder<K, V> put(K key, javax.inject.Provider<V> providerOfValue)","0","-","-","-","-"
"9634","putAll","@Override
    public Builder<K, V> putAll(Provider<Map<K, V>> mapFactory)","0","-","-","-","-"
"9635","putAll","/**
     * Legacy javax version of the method to support libraries compiled with an older version of
     * Dagger. Do not use directly.
     */
    @Deprecated
    public Builder<K, V> putAll(javax.inject.Provider<Map<K, V>> mapFactory)","0","-","-","-","-"
"9636","build","/** Returns a new","0","-","-","-","-"
"9637","get","/**
   * Return the underlying value, computing the value if necessary. All calls to
   * the same","0","-","-","-","-"
"9638","injectMembers","/**
   * Injects dependencies into the fields and methods of","0","-","-","-","-"
"9639","visitClassDef","@Override
  public Void visitClassDef(JCClassDecl tree, Void p)","0","-","-","-","-"
"9640","addNodesForGraph","private void addNodesForGraph(dagger.internal.codegen.binding.BindingGraph graph)","0","-","-","-","-"
"9641","addDependencyEdges","private void addDependencyEdges(BindingGraph graph)","0","-","-","-","-"
"9642","addEdgesForDependencyRequest","/**
   * Add","0","-","-","-","-"
"9643","addDependencyEdge","private void addDependencyEdge(
      DependencyRequest dependency, Declaration declaration)","0","-","-","-","-"
"9644","addModuleEdges","private void addModuleEdges(dagger.internal.codegen.binding.BindingGraph graph)","0","-","-","-","-"
"9645","addChildComponentEdges","private void addChildComponentEdges(dagger.internal.codegen.binding.BindingGraph graph)","0","-","-","-","-"
"9646","jvmNode","private Optional<VName> jvmNode(XElement element, String name)","0","-","-","-","-"
"9647","emitEdge","private void emitEdge(Optional<VName> source, String edgeName, Optional<VName> target)","0","-","-","-","-"
"9648","run","@Override
  public void run(
      JCCompilationUnit compilationUnit, KytheEntrySets entrySets, KytheGraph kytheGraph)","0","-","-","-","-"
"9649","inject","void inject(DaggerKythePlugin plugin);","0","-","-","-","-"
