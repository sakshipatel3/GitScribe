"Index","Method Name","Method Signature","Commit Count","Change Types","Commit Message","Commit ID","Commit Author"
"1","testSortByteArray","@Test
    public void testSortByteArray()","0","-","-","-","-"
"2","testSortCharArray","@Test
    public void testSortCharArray()","0","-","-","-","-"
"3","testSortComparable","@Test
    public void testSortComparable()","0","-","-","-","-"
"4","testSortDoubleArray","@Test
    public void testSortDoubleArray()","0","-","-","-","-"
"5","testSortFloatArray","@Test
    public void testSortFloatArray()","0","-","-","-","-"
"6","testSortIntArray","@Test
    public void testSortIntArray()","0","-","-","-","-"
"7","testSortLongArray","@Test
    public void testSortLongArray()","0","-","-","-","-"
"8","testSortObjects","@Test
    public void testSortObjects()","0","-","-","-","-"
"9","testSortShortArray","@Test
    public void testSortShortArray()","0","-","-","-","-"
"10","main","public static void main(final String[] args)","0","-","-","-","-"
"11","testAddAndGetValueObject","@Test
    public void testAddAndGetValueObject()","0","-","-","-","-"
"12","testAddAndGetValuePrimitive","@Test
    public void testAddAndGetValuePrimitive()","0","-","-","-","-"
"13","testAddValueObject","@Test
    public void testAddValueObject()","0","-","-","-","-"
"14","testAddValuePrimitive","@Test
    public void testAddValuePrimitive()","0","-","-","-","-"
"15","testCompareTo","@Test
    public void testCompareTo()","0","-","-","-","-"
"16","testCompareToNull","@Test
    public void testCompareToNull()","0","-","-","-","-"
"17","testConstructorNull","@Test
    public void testConstructorNull()","0","-","-","-","-"
"18","testConstructors","@Test
    public void testConstructors()","0","-","-","-","-"
"19","testDecrement","@Test
    public void testDecrement()","0","-","-","-","-"
"20","testDecrementAndGet","@Test
    public void testDecrementAndGet()","0","-","-","-","-"
"21","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"22","testGetAndAddValueObject","@Test
    public void testGetAndAddValueObject()","0","-","-","-","-"
"23","testGetAndAddValuePrimitive","@Test
    public void testGetAndAddValuePrimitive()","0","-","-","-","-"
"24","testGetAndDecrement","@Test
    public void testGetAndDecrement()","0","-","-","-","-"
"25","testGetAndIncrement","@Test
    public void testGetAndIncrement()","0","-","-","-","-"
"26","testGetSet","@Test
    public void testGetSet()","0","-","-","-","-"
"27","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"28","testIncrement","@Test
    public void testIncrement()","0","-","-","-","-"
"29","testIncrementAndGet","@Test
    public void testIncrementAndGet()","0","-","-","-","-"
"30","testNanInfinite","@Test
    public void testNanInfinite()","0","-","-","-","-"
"31","testPrimitiveValues","@Test
    public void testPrimitiveValues()","0","-","-","-","-"
"32","testSetNull","@Test
    public void testSetNull()","0","-","-","-","-"
"33","testSubtractValueObject","@Test
    public void testSubtractValueObject()","0","-","-","-","-"
"34","testSubtractValuePrimitive","@Test
    public void testSubtractValuePrimitive()","0","-","-","-","-"
"35","testToDouble","@Test
    public void testToDouble()","0","-","-","-","-"
"36","testToString","@Test
    public void testToString()","0","-","-","-","-"
"37","testAddAndGetValueObject","@Test
    public void testAddAndGetValueObject()","0","-","-","-","-"
"38","testAddAndGetValuePrimitive","@Test
    public void testAddAndGetValuePrimitive()","0","-","-","-","-"
"39","testAddValueObject","@Test
    public void testAddValueObject()","0","-","-","-","-"
"40","testAddValuePrimitive","@Test
    public void testAddValuePrimitive()","0","-","-","-","-"
"41","testCompareTo","@Test
    public void testCompareTo()","0","-","-","-","-"
"42","testConstructors","@Test
    public void testConstructors()","0","-","-","-","-"
"43","testDecrement","@Test
    public void testDecrement()","0","-","-","-","-"
"44","testDecrementAndGet","@Test
    public void testDecrementAndGet()","0","-","-","-","-"
"45","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"46","testGetAndAddValueObject","@Test
    public void testGetAndAddValueObject()","0","-","-","-","-"
"47","testGetAndAddValuePrimitive","@Test
    public void testGetAndAddValuePrimitive()","0","-","-","-","-"
"48","testGetAndDecrement","@Test
    public void testGetAndDecrement()","0","-","-","-","-"
"49","testGetAndIncrement","@Test
    public void testGetAndIncrement()","0","-","-","-","-"
"50","testGetSet","@Test
    public void testGetSet()","0","-","-","-","-"
"51","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"52","testIncrement","@Test
    public void testIncrement()","0","-","-","-","-"
"53","testIncrementAndGet","@Test
    public void testIncrementAndGet()","0","-","-","-","-"
"54","testPrimitiveValues","@Test
    public void testPrimitiveValues()","0","-","-","-","-"
"55","testSubtractValueObject","@Test
    public void testSubtractValueObject()","0","-","-","-","-"
"56","testSubtractValuePrimitive","@Test
    public void testSubtractValuePrimitive()","0","-","-","-","-"
"57","testToShort","@Test
    public void testToShort()","0","-","-","-","-"
"58","testToString","@Test
    public void testToString()","0","-","-","-","-"
"59","testCompareTo","@Test
    public void testCompareTo()","0","-","-","-","-"
"60","testCompareToNull","@Test
    public void testCompareToNull()","0","-","-","-","-"
"61","testConstructorNull","@Test
    public void testConstructorNull()","0","-","-","-","-"
"62","testConstructors","@Test
    public void testConstructors()","0","-","-","-","-"
"63","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"64","testGetSet","@Test
    public void testGetSet()","0","-","-","-","-"
"65","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"66","testSetNull","@Test
    public void testSetNull()","0","-","-","-","-"
"67","testToString","@Test
    public void testToString()","0","-","-","-","-"
"68","testAddAndGetValueObject","@Test
    public void testAddAndGetValueObject()","0","-","-","-","-"
"69","testAddAndGetValuePrimitive","@Test
    public void testAddAndGetValuePrimitive()","0","-","-","-","-"
"70","testAddValueObject","@Test
    public void testAddValueObject()","0","-","-","-","-"
"71","testAddValuePrimitive","@Test
    public void testAddValuePrimitive()","0","-","-","-","-"
"72","testCompareTo","@Test
    public void testCompareTo()","0","-","-","-","-"
"73","testCompareToNull","@Test
    public void testCompareToNull()","0","-","-","-","-"
"74","testConstructorNull","@Test
    public void testConstructorNull()","0","-","-","-","-"
"75","testConstructors","@Test
    public void testConstructors()","0","-","-","-","-"
"76","testDecrement","@Test
    public void testDecrement()","0","-","-","-","-"
"77","testDecrementAndGet","@Test
    public void testDecrementAndGet()","0","-","-","-","-"
"78","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"79","testGetAndAddValueObject","@Test
    public void testGetAndAddValueObject()","0","-","-","-","-"
"80","testGetAndAddValuePrimitive","@Test
    public void testGetAndAddValuePrimitive()","0","-","-","-","-"
"81","testGetAndDecrement","@Test
    public void testGetAndDecrement()","0","-","-","-","-"
"82","testGetAndIncrement","@Test
    public void testGetAndIncrement()","0","-","-","-","-"
"83","testGetSet","@Test
    public void testGetSet()","0","-","-","-","-"
"84","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"85","testIncrement","@Test
    public void testIncrement()","0","-","-","-","-"
"86","testIncrementAndGet","@Test
    public void testIncrementAndGet()","0","-","-","-","-"
"87","testPrimitiveValues","@Test
    public void testPrimitiveValues()","0","-","-","-","-"
"88","testSetNull","@Test
    public void testSetNull()","0","-","-","-","-"
"89","testSubtractValueObject","@Test
    public void testSubtractValueObject()","0","-","-","-","-"
"90","testSubtractValuePrimitive","@Test
    public void testSubtractValuePrimitive()","0","-","-","-","-"
"91","testToLong","@Test
    public void testToLong()","0","-","-","-","-"
"92","testToString","@Test
    public void testToString()","0","-","-","-","-"
"93","testAddAndGetValueObject","@Test
    public void testAddAndGetValueObject()","0","-","-","-","-"
"94","testAddAndGetValuePrimitive","@Test
    public void testAddAndGetValuePrimitive()","0","-","-","-","-"
"95","testAddValueObject","@Test
    public void testAddValueObject()","0","-","-","-","-"
"96","testAddValuePrimitive","@Test
    public void testAddValuePrimitive()","0","-","-","-","-"
"97","testCompareTo","@Test
    public void testCompareTo()","0","-","-","-","-"
"98","testCompareToNull","@Test
    public void testCompareToNull()","0","-","-","-","-"
"99","testConstructorNull","@Test
    public void testConstructorNull()","0","-","-","-","-"
"100","testConstructors","@Test
    public void testConstructors()","0","-","-","-","-"
"101","testDecrement","@Test
    public void testDecrement()","0","-","-","-","-"
"102","testDecrementAndGet","@Test
    public void testDecrementAndGet()","0","-","-","-","-"
"103","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"104","testGetAndAddValueObject","@Test
    public void testGetAndAddValueObject()","0","-","-","-","-"
"105","testGetAndAddValuePrimitive","@Test
    public void testGetAndAddValuePrimitive()","0","-","-","-","-"
"106","testGetAndDecrement","@Test
    public void testGetAndDecrement()","0","-","-","-","-"
"107","testGetAndIncrement","@Test
    public void testGetAndIncrement()","0","-","-","-","-"
"108","testGetSet","@Test
    public void testGetSet()","0","-","-","-","-"
"109","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"110","testIncrement","@Test
    public void testIncrement()","0","-","-","-","-"
"111","testIncrementAndGet","@Test
    public void testIncrementAndGet()","0","-","-","-","-"
"112","testNanInfinite","@Test
    public void testNanInfinite()","0","-","-","-","-"
"113","testPrimitiveValues","@Test
    public void testPrimitiveValues()","0","-","-","-","-"
"114","testSetNull","@Test
    public void testSetNull()","0","-","-","-","-"
"115","testSubtractValueObject","@Test
    public void testSubtractValueObject()","0","-","-","-","-"
"116","testSubtractValuePrimitive","@Test
    public void testSubtractValuePrimitive()","0","-","-","-","-"
"117","testToFloat","@Test
    public void testToFloat()","0","-","-","-","-"
"118","testToString","@Test
    public void testToString()","0","-","-","-","-"
"119","testAddAndGetValueObject","@Test
    public void testAddAndGetValueObject()","0","-","-","-","-"
"120","testAddAndGetValuePrimitive","@Test
    public void testAddAndGetValuePrimitive()","0","-","-","-","-"
"121","testAddValueObject","@Test
    public void testAddValueObject()","0","-","-","-","-"
"122","testAddValuePrimitive","@Test
    public void testAddValuePrimitive()","0","-","-","-","-"
"123","testCompareTo","@Test
    public void testCompareTo()","0","-","-","-","-"
"124","testCompareToNull","@Test
    public void testCompareToNull()","0","-","-","-","-"
"125","testConstructorNull","@Test
    public void testConstructorNull()","0","-","-","-","-"
"126","testConstructors","@Test
    public void testConstructors()","0","-","-","-","-"
"127","testDecrement","@Test
    public void testDecrement()","0","-","-","-","-"
"128","testDecrementAndGet","@Test
    public void testDecrementAndGet()","0","-","-","-","-"
"129","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"130","testGetAndAddValueObject","@Test
    public void testGetAndAddValueObject()","0","-","-","-","-"
"131","testGetAndAddValuePrimitive","@Test
    public void testGetAndAddValuePrimitive()","0","-","-","-","-"
"132","testGetAndDecrement","@Test
    public void testGetAndDecrement()","0","-","-","-","-"
"133","testGetAndIncrement","@Test
    public void testGetAndIncrement()","0","-","-","-","-"
"134","testGetSet","@Test
    public void testGetSet()","0","-","-","-","-"
"135","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"136","testIncrement","@Test
    public void testIncrement()","0","-","-","-","-"
"137","testIncrementAndGet","@Test
    public void testIncrementAndGet()","0","-","-","-","-"
"138","testPrimitiveValues","@Test
    public void testPrimitiveValues()","0","-","-","-","-"
"139","testSetNull","@Test
    public void testSetNull()","0","-","-","-","-"
"140","testSubtractValueObject","@Test
    public void testSubtractValueObject()","0","-","-","-","-"
"141","testSubtractValuePrimitive","@Test
    public void testSubtractValuePrimitive()","0","-","-","-","-"
"142","testToByte","@Test
    public void testToByte()","0","-","-","-","-"
"143","testToString","@Test
    public void testToString()","0","-","-","-","-"
"144","testAddAndGetValueObject","@Test
    public void testAddAndGetValueObject()","0","-","-","-","-"
"145","testAddAndGetValuePrimitive","@Test
    public void testAddAndGetValuePrimitive()","0","-","-","-","-"
"146","testAddValueObject","@Test
    public void testAddValueObject()","0","-","-","-","-"
"147","testAddValuePrimitive","@Test
    public void testAddValuePrimitive()","0","-","-","-","-"
"148","testCompareTo","@Test
    public void testCompareTo()","0","-","-","-","-"
"149","testCompareToNull","@Test
    public void testCompareToNull()","0","-","-","-","-"
"150","testConstructorNull","@Test
    public void testConstructorNull()","0","-","-","-","-"
"151","testConstructors","@Test
    public void testConstructors()","0","-","-","-","-"
"152","testDecrement","@Test
    public void testDecrement()","0","-","-","-","-"
"153","testDecrementAndGet","@Test
    public void testDecrementAndGet()","0","-","-","-","-"
"154","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"155","testEquals","/**
     * @param numA must not be a 0 Integer; must not equal numC.
     * @param numB must equal numA; must not equal numC.
     * @param numC must not equal numA; must not equal numC.
     */
    void testEquals(final Number numA, final Number numB, final Number numC)","0","-","-","-","-"
"156","testGetAndAddValueObject","@Test
    public void testGetAndAddValueObject()","0","-","-","-","-"
"157","testGetAndAddValuePrimitive","@Test
    public void testGetAndAddValuePrimitive()","0","-","-","-","-"
"158","testGetAndDecrement","@Test
    public void testGetAndDecrement()","0","-","-","-","-"
"159","testGetAndIncrement","@Test
    public void testGetAndIncrement()","0","-","-","-","-"
"160","testGetSet","@Test
    public void testGetSet()","0","-","-","-","-"
"161","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"162","testIncrement","@Test
    public void testIncrement()","0","-","-","-","-"
"163","testIncrementAndGet","@Test
    public void testIncrementAndGet()","0","-","-","-","-"
"164","testPrimitiveValues","@Test
    public void testPrimitiveValues()","0","-","-","-","-"
"165","testSetNull","@Test
    public void testSetNull()","0","-","-","-","-"
"166","testSubtractValueObject","@Test
    public void testSubtractValueObject()","0","-","-","-","-"
"167","testSubtractValuePrimitive","@Test
    public void testSubtractValuePrimitive()","0","-","-","-","-"
"168","testToInteger","@Test
    public void testToInteger()","0","-","-","-","-"
"169","testToString","@Test
    public void testToString()","0","-","-","-","-"
"170","testConstructors","@Test
    public void testConstructors()","0","-","-","-","-"
"171","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"172","testGetSet","@Test
    public void testGetSet()","0","-","-","-","-"
"173","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"174","testToString","@Test
    public void testToString()","0","-","-","-","-"
"175","assertCountriesByLanguage","/**
     * Make sure the country by language is correct. It checks that
     * the LocaleUtils.countryByLanguage(language) call contains the
     * array of countries passed in. It may contain more due to JVM
     * variations.
     *
     *
     * @param language
     * @param countries array of countries that should be returned
     */
    private static void assertCountriesByLanguage(final String language, final String[] countries)","0","-","-","-","-"
"176","assertLanguageByCountry","/**
     * Make sure the language by country is correct. It checks that
     * the LocaleUtils.languagesByCountry(country) call contains the
     * array of languages passed in. It may contain more due to JVM
     * variations.
     *
     * @param country
     * @param languages array of languages that should be returned
     */
    private static void assertLanguageByCountry(final String country, final String[] languages)","0","-","-","-","-"
"177","assertLocaleLookupList","/**
     * Helper method for local lookups.
     *
     * @param locale  the input locale
     * @param defaultLocale  the input default locale
     * @param expected  expected results
     */
    private static void assertLocaleLookupList(final Locale locale, final Locale defaultLocale, final Locale[] expected)","0","-","-","-","-"
"178","assertUnmodifiableCollection","/**
     * @param coll  the collection to check
     */
    private static void assertUnmodifiableCollection(final Collection<?> coll)","0","-","-","-","-"
"179","assertValidToLocale","/**
     * Pass in a valid language, test toLocale.
     *
     * @param language  the language string
     */
    private static void assertValidToLocale(final String language)","0","-","-","-","-"
"180","assertValidToLocale","/**
     * Pass in a valid language, test toLocale.
     *
     * @param localeString to pass to toLocale()
     * @param language of the resulting Locale
     * @param country of the resulting Locale
     */
    private static void assertValidToLocale(final String localeString, final String language, final String country)","0","-","-","-","-"
"181","assertValidToLocale","/**
     * Pass in a valid language, test toLocale.
     *
     * @param localeString to pass to toLocale()
     * @param language of the resulting Locale
     * @param country of the resulting Locale
     * @param variant of the resulting Locale
     */
    private static void assertValidToLocale(
            final String localeString, final String language,
            final String country, final String variant)","0","-","-","-","-"
"182","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"183","testAvailableLocaleList","/**
     * Test availableLocaleList() method.
     */
    @Test
    public void testAvailableLocaleList()","0","-","-","-","-"
"184","testAvailableLocaleSet","/**
     * Test availableLocaleSet() method.
     */
    @Test
    public void testAvailableLocaleSet()","0","-","-","-","-"
"185","testConstructor","/**
     * Test that constructors are public, and work, etc.
     */
    @Test
    public void testConstructor()","0","-","-","-","-"
"186","testCountriesByLanguage","/**
     * Test countriesByLanguage() method.
     */
    @Test
    public void testCountriesByLanguage()","0","-","-","-","-"
"187","testIsAvailableLocale","/**
     * Test availableLocaleSet() method.
     */
    @SuppressWarnings(""boxing"") // JUnit4 does not support primitive equality testing apart from long
    @Test
    public void testIsAvailableLocale()","0","-","-","-","-"
"188","testIsLanguageUndetermined","@Test
    public void testIsLanguageUndetermined()","0","-","-","-","-"
"189","testLang328","/**
     * Tests #LANG-328 - only language+variant
     */
    @Test
    public void testLang328()","0","-","-","-","-"
"190","testLang865","/**
     * Tests #LANG-865, strings starting with an underscore.
     */
    @Test
    public void testLang865()","0","-","-","-","-"
"191","testLanguageAndUNM49Numeric3AreaCodeLang1312","@Test
    public void testLanguageAndUNM49Numeric3AreaCodeLang1312()","0","-","-","-","-"
"192","testLanguagesByCountry","/**
     * Test languagesByCountry() method.
     */
    @Test
    public void testLanguagesByCountry()","0","-","-","-","-"
"193","testLocaleLookupList_Locale","/**
     * Test localeLookupList() method.
     */
    @Test
    public void testLocaleLookupList_Locale()","0","-","-","-","-"
"194","testLocaleLookupList_LocaleLocale","/**
     * Test localeLookupList() method.
     */
    @Test
    public void testLocaleLookupList_LocaleLocale()","0","-","-","-","-"
"195","testParseAllLocales","@ParameterizedTest
    @MethodSource(""java.util.Locale#getAvailableLocales"")
    public void testParseAllLocales(final Locale actualLocale)","0","-","-","-","-"
"196","testThreeCharsLocale","/**
     * Test for 3-chars locale, further details at LANG-915
     */
    @Test
    public void testThreeCharsLocale()","0","-","-","-","-"
"197","testToLocale_1Part","/**
     * Test toLocale(String) method.
     */
    @Test
    public void testToLocale_1Part()","0","-","-","-","-"
"198","testToLocale_2Part","/**
     * Test toLocale() method.
     */
    @Test
    public void testToLocale_2Part()","0","-","-","-","-"
"199","testToLocale_3Part","/**
     * Test toLocale() method.
     */
    @Test
    public void testToLocale_3Part()","0","-","-","-","-"
"200","testToLocale_Locale_defaults","/**
     * Test toLocale(Locale) method.
     */
    @Test
    public void testToLocale_Locale_defaults()","0","-","-","-","-"
"201","testToLocales","/**
     * Test toLocale(Locale) method.
     */
    @ParameterizedTest
    @MethodSource(""java.util.Locale#getAvailableLocales"")
    public void testToLocales(final Locale actualLocale)","0","-","-","-","-"
"202","testClass","@Test
    public void testClass()","0","-","-","-","-"
"203","testConstructor_String_combo","@Test
    public void testConstructor_String_combo()","0","-","-","-","-"
"204","testConstructor_String_comboNegated","@Test
    public void testConstructor_String_comboNegated()","0","-","-","-","-"
"205","testConstructor_String_oddCombinations","@Test
    public void testConstructor_String_oddCombinations()","0","-","-","-","-"
"206","testConstructor_String_oddDash","@Test
    public void testConstructor_String_oddDash()","0","-","-","-","-"
"207","testConstructor_String_oddNegate","@Test
    public void testConstructor_String_oddNegate()","0","-","-","-","-"
"208","testConstructor_String_simple","@Test
    public void testConstructor_String_simple()","0","-","-","-","-"
"209","testContains_Char","@Test
    public void testContains_Char()","0","-","-","-","-"
"210","testEquals_Object","@Test
    public void testEquals_Object()","0","-","-","-","-"
"211","testGetInstance","@Test
    public void testGetInstance()","0","-","-","-","-"
"212","testGetInstance_Stringarray","@Test
    public void testGetInstance_Stringarray()","0","-","-","-","-"
"213","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"214","testJavadocExamples","@Test
    public void testJavadocExamples()","0","-","-","-","-"
"215","testSerialization","@Test
    public void testSerialization()","0","-","-","-","-"
"216","testStatics","@Test
    public void testStatics()","0","-","-","-","-"
"217","testGetSystemURLs","@Test
    public void testGetSystemURLs()","0","-","-","-","-"
"218","testGetThreadURLs","@Test
    public void testGetThreadURLs()","0","-","-","-","-"
"219","testToString_ClassLoader","@Test
    public void testToString_ClassLoader() throws IOException","0","-","-","-","-"
"220","testToString_URLClassLoader","@Test
    public void testToString_URLClassLoader() throws IOException","0","-","-","-","-"
"221","main","public static void main(final String[] args)","0","-","-","-","-"
"222","printlnTotal","private void printlnTotal(final String prefix, final long startMillis)","0","-","-","-","-"
"223","printSysInfo","private void printSysInfo()","0","-","-","-","-"
"224","run","private void run()","0","-","-","-","-"
"225","run_CharSet","private int run_CharSet(final int loopCount)","0","-","-","-","-"
"226","run_CharUtils_isAsciiNumeric","private int run_CharUtils_isAsciiNumeric(final int loopCount)","0","-","-","-","-"
"227","run_inlined_CharUtils_isAsciiNumeric","private int run_inlined_CharUtils_isAsciiNumeric(final int loopCount)","0","-","-","-","-"
"228","dbgPrint","static String dbgPrint(final boolean[] src)","0","-","-","-","-"
"229","binaryBeMsb0ToHexDigitPosOutsideArray","@ParameterizedTest
    @ValueSource(ints =","0","-","-","-","-"
"230","testBinaryBeMsb0ToHexDigit","/**
     * Tests","0","-","-","-","-"
"231","testBinaryBeMsb0ToHexDigit_2args","/**
     * Tests","0","-","-","-","-"
"232","testBinaryToByte","/**
     * Tests","0","-","-","-","-"
"233","testBinaryToHexDigit","/**
     * Tests","0","-","-","-","-"
"234","testBinaryToHexDigit_2args","/**
     * Tests","0","-","-","-","-"
"235","testBinaryToHexDigitMsb0_4bits_2args","/**
     * Tests","0","-","-","-","-"
"236","testBinaryToHexDigitMsb0_bits","/**
     * Tests","0","-","-","-","-"
"237","testBinaryToHexDigitReverse","@Test
    public void testBinaryToHexDigitReverse()","0","-","-","-","-"
"238","testBinaryToInt","/**
     * Tests","0","-","-","-","-"
"239","testBinaryToLong","/**
     * Tests","0","-","-","-","-"
"240","testBinaryToShort","/**
     * Tests","0","-","-","-","-"
"241","testByteArrayToInt","/**
     * Tests","0","-","-","-","-"
"242","testByteArrayToLong","/**
     * Tests","0","-","-","-","-"
"243","testByteArrayToShort","/**
     * Tests","0","-","-","-","-"
"244","testByteArrayToUuid","/**
     * Tests","0","-","-","-","-"
"245","testByteToBinary","/**
     * Tests","0","-","-","-","-"
"246","testByteToHex","/**
     * Tests","0","-","-","-","-"
"247","testHexDigitMsb0ToBinary","/**
     * Tests","0","-","-","-","-"
"248","testHexDigitMsb0ToInt","/**
     * Tests","0","-","-","-","-"
"249","testHexDigitToBinary","/**
     * Tests","0","-","-","-","-"
"250","testHexDigitToInt","/**
     * Tests","0","-","-","-","-"
"251","testHexToByte","/**
     * Tests","0","-","-","-","-"
"252","testHexToInt","/**
     * Tests","0","-","-","-","-"
"253","testHexToLong","/**
     * Tests","0","-","-","-","-"
"254","testHexToShort","/**
     * Tests","0","-","-","-","-"
"255","testIntArrayToLong","/**
     * Tests","0","-","-","-","-"
"256","testIntToBinary","/**
     * Tests","0","-","-","-","-"
"257","testIntToByteArray","/**
     * Tests","0","-","-","-","-"
"258","testIntToHex","/**
     * Tests","0","-","-","-","-"
"259","testIntToHexDigit","/**
     * Tests","0","-","-","-","-"
"260","testIntToHexDigitMsb0","/**
     * Tests","0","-","-","-","-"
"261","testIntToShortArray","/**
     * Tests","0","-","-","-","-"
"262","testLongToBinary","/**
     * Tests","0","-","-","-","-"
"263","testLongToByteArray","/**
     * Tests","0","-","-","-","-"
"264","testLongToHex","/**
     * Tests","0","-","-","-","-"
"265","testLongToIntArray","/**
     * Tests","0","-","-","-","-"
"266","testLongToShortArray","/**
     * Tests","0","-","-","-","-"
"267","testShortArrayToInt","/**
     * Tests","0","-","-","-","-"
"268","testShortArrayToLong","/**
     * Tests","0","-","-","-","-"
"269","testShortToBinary","/**
     * Tests","0","-","-","-","-"
"270","testShortToByteArray","/**
     * Tests","0","-","-","-","-"
"271","testShortToHex","/**
     * Tests","0","-","-","-","-"
"272","testUuidToByteArray","/**
     * Tests","0","-","-","-","-"
"273","testGetClassLongIllegalName","/**
     * Tests that no StackOverflowError is thrown.
     * <p>
     * OSS-Fuzz Issue 42522972: apache-commons-text:StringSubstitutorInterpolatorFuzzer: Security exception in org.apache.commons.lang3.ClassUtils.getClass
     * </p>
     */
    @Test
    public void testGetClassLongIllegalName() throws Exception","0","-","-","-","-"
"274","testGetClassLongName","/**
     * Tests that no StackOverflowError is thrown.
     */
    @Test
    public void testGetClassLongName() throws Exception","0","-","-","-","-"
"275","getIS_JAVA","/**
     * Returns the value of the SystemUtils.IS_JAVA_X field for the versions >= 9.
     */
    private boolean getIS_JAVA(final int version) throws Exception","0","-","-","-","-"
"276","getLastSupportedJavaVersion","/**
     * Returns the last supported version with the SystemUtils.IS_JAVA_X fields.
     */
    public int getLastSupportedJavaVersion()","0","-","-","-","-"
"277","test_IS_JAVA","@Test
    @SuppressWarnings(""deprecation"")
    public void test_IS_JAVA() throws Exception","0","-","-","-","-"
"278","test_IS_OS","@Test
    public void test_IS_OS()","0","-","-","-","-"
"279","test_IS_zOS","@Test
    public void test_IS_zOS()","0","-","-","-","-"
"280","test_USER_NAME","/**
     * Assumes no security manager exists.
     */
    @Test
    public void test_USER_NAME()","0","-","-","-","-"
"281","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"282","testGetEnvironmentVariableAbsent","@Test
    public void testGetEnvironmentVariableAbsent()","0","-","-","-","-"
"283","testGetEnvironmentVariablePresent","@Test
    public void testGetEnvironmentVariablePresent()","0","-","-","-","-"
"284","testGetHostName","@Test
    public void testGetHostName()","0","-","-","-","-"
"285","testGetJavaHome","/**
     * Assumes no security manager exists.
     */
    @Test
    public void testGetJavaHome()","0","-","-","-","-"
"286","testGetJavaHomePath","/**
     * Assumes no security manager exists.
     */
    @Test
    public void testGetJavaHomePath()","0","-","-","-","-"
"287","testGetJavaIoTmpDir","/**
     * Assumes no security manager exists.
     */
    @Test
    public void testGetJavaIoTmpDir()","0","-","-","-","-"
"288","testGetJavaIoTmpDirPath","/**
     * Assumes no security manager exists.
     */
    @Test
    public void testGetJavaIoTmpDirPath()","0","-","-","-","-"
"289","testGetUserDir","/**
     * Assumes no security manager exists.
     */
    @Test
    public void testGetUserDir()","0","-","-","-","-"
"290","testGetUserDirPath","/**
     * Assumes no security manager exists.
     */
    @Test
    public void testGetUserDirPath()","0","-","-","-","-"
"291","testGetUserHome","/**
     * Assumes no security manager exists.
     */
    @Test
    public void testGetUserHome()","0","-","-","-","-"
"292","testGetUserHomePath","/**
     * Assumes no security manager exists.
     */
    @Test
    public void testGetUserHomePath()","0","-","-","-","-"
"293","testGetUserName","/**
     * Assumes no security manager exists.
     */
    @Test
    public void testGetUserName()","0","-","-","-","-"
"294","testIsJavaVersionAtLeast","@Test
    public void testIsJavaVersionAtLeast()","0","-","-","-","-"
"295","testIsJavaVersionAtMost","@Test
    public void testIsJavaVersionAtMost()","0","-","-","-","-"
"296","testJavaAwtHeadless","@Test
    public void testJavaAwtHeadless()","0","-","-","-","-"
"297","testJavaVersionMatches","@Test
    public void testJavaVersionMatches()","0","-","-","-","-"
"298","testOSMatchesName","@Test
    public void testOSMatchesName()","0","-","-","-","-"
"299","testOSMatchesNameAndVersion","@Test
    public void testOSMatchesNameAndVersion()","0","-","-","-","-"
"300","testOsVersionMatches","@Test
    public void testOsVersionMatches()","0","-","-","-","-"
"301","stringsFactory","public static Stream<Strings> stringsFactory()","0","-","-","-","-"
"302","testBuilder","@Test
    public void testBuilder()","0","-","-","-","-"
"303","testBuilderDefaults","@Test
    public void testBuilderDefaults()","0","-","-","-","-"
"304","testCaseInsensitiveConstant","@Test
    public void testCaseInsensitiveConstant()","0","-","-","-","-"
"305","testCaseInsensitiveStartsWithAny","/**
     * Expanding the existing test group","0","-","-","-","-"
"306","testCaseSensitiveConstant","@Test
    public void testCaseSensitiveConstant()","0","-","-","-","-"
"307","testEqualsCharSequence","@ParameterizedTest
    @MethodSource(""stringsFactory"")
    public void testEqualsCharSequence(final Strings strings)","0","-","-","-","-"
"308","testEqualsStrings","@ParameterizedTest
    @MethodSource(""stringsFactory"")
    public void testEqualsStrings(final Strings strings)","0","-","-","-","-"
"309","setup","@BeforeEach
    public void setup() throws Exception","0","-","-","-","-"
"310","testAnnotationsOfDifferingTypes","@Test
    public void testAnnotationsOfDifferingTypes()","0","-","-","-","-"
"311","testBothArgsNull","@Test
    public void testBothArgsNull()","0","-","-","-","-"
"312","testEquivalence","@Test
    public void testEquivalence()","0","-","-","-","-"
"313","testGeneratedAnnotationEquivalentToRealAnnotation","@Test
    public void testGeneratedAnnotationEquivalentToRealAnnotation()","0","-","-","-","-"
"314","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"315","testIsValidAnnotationMemberType","@Test
    public void testIsValidAnnotationMemberType()","0","-","-","-","-"
"316","testNonEquivalentAnnotationsOfSameType","@Test
    public void testNonEquivalentAnnotationsOfSameType()","0","-","-","-","-"
"317","testOneArgNull","@Test
    public void testOneArgNull()","0","-","-","-","-"
"318","testSameInstance","@Test
    public void testSameInstance()","0","-","-","-","-"
"319","testToString","@Test
    @TestMethodAnnotation(timeout = 666000)
    public void testToString()","0","-","-","-","-"
"320","testEndsWith","/**
     * Test StringUtils.endsWith()
     */
    @Test
    public void testEndsWith()","0","-","-","-","-"
"321","testEndsWithAny","@Test
    public void testEndsWithAny()","0","-","-","-","-"
"322","testEndsWithIgnoreCase","/**
     * Test StringUtils.endsWithIgnoreCase()
     */
    @Test
    public void testEndsWithIgnoreCase()","0","-","-","-","-"
"323","testStartsWith","/**
     * Test StringUtils.startsWith()
     */
    @Test
    public void testStartsWith()","0","-","-","-","-"
"324","testStartsWithAny","@Test
    public void testStartsWithAny()","0","-","-","-","-"
"325","testStartsWithIgnoreCase","/**
     * Test StringUtils.testStartsWithIgnoreCase()
     */
    @Test
    public void testStartsWithIgnoreCase()","0","-","-","-","-"
"326","asIntConsumer","protected <T extends Throwable> FailableConsumer<String, T> asIntConsumer(final T pThrowable)","0","-","-","-","-"
"327","asIntPredicate","protected <T extends Throwable> FailablePredicate<Integer, T> asIntPredicate(final T pThrowable)","0","-","-","-","-"
"328","assertEvenNumbers","private void assertEvenNumbers(final List<Integer> output)","0","-","-","-","-"
"329","simpleStreamFilterFailing","@TestFactory
    public Stream<DynamicTest> simpleStreamFilterFailing()","0","-","-","-","-"
"330","simpleStreamForEachFailing","@TestFactory
    public Stream<DynamicTest> simpleStreamForEachFailing()","0","-","-","-","-"
"331","testSimpleStreamFilter","@Test
    public void testSimpleStreamFilter()","0","-","-","-","-"
"332","testSimpleStreamForEach","@Test
    public void testSimpleStreamForEach()","0","-","-","-","-"
"333","testSimpleStreamMap","@Test
    public void testSimpleStreamMap()","0","-","-","-","-"
"334","testSimpleStreamMapFailing","@Test
    public void testSimpleStreamMapFailing()","0","-","-","-","-"
"335","testToArray","@Test
    public void testToArray()","0","-","-","-","-"
"336","assertGetClassReturnsClass","private void assertGetClassReturnsClass(final Class<?> c) throws Exception","0","-","-","-","-"
"337","assertGetClassThrowsClassNotFound","private void assertGetClassThrowsClassNotFound(final String className)","0","-","-","-","-"
"338","assertGetClassThrowsException","private void assertGetClassThrowsException(final String className, final Class<? extends Exception> exceptionType)","0","-","-","-","-"
"339","assertGetClassThrowsNullPointerException","private void assertGetClassThrowsNullPointerException(final String className)","0","-","-","-","-"
"340","test_convertClassesToClassNames_List","@Test
    public void test_convertClassesToClassNames_List()","0","-","-","-","-"
"341","test_convertClassNamesToClasses_List","@Test
    public void test_convertClassNamesToClasses_List()","0","-","-","-","-"
"342","test_getAbbreviatedName_Class","@Test
    public void test_getAbbreviatedName_Class()","0","-","-","-","-"
"343","test_getAbbreviatedName_Class_NegativeLen","@Test
    @DisplayName(""When the desired length is negative then exception is thrown"")
    public void test_getAbbreviatedName_Class_NegativeLen()","0","-","-","-","-"
"344","test_getAbbreviatedName_Class_ZeroLen","@Test
    @DisplayName(""When the desired length is zero then exception is thrown"")
    public void test_getAbbreviatedName_Class_ZeroLen()","0","-","-","-","-"
"345","test_getAbbreviatedName_String","@Test
    public void test_getAbbreviatedName_String()","0","-","-","-","-"
"346","test_getAbbreviatedName_TooLongHint","/**
     * Test that in case the required length is larger than the name and thus there is no need for any shortening then the
     * returned string object is the same as the one passed as argument. Note, however, that this is tested as an internal
     * implementation detail, but it is not a guaranteed feature of the implementation.
     */
    @Test
    @DisplayName(""When the length hint is longer than the actual length then the same String object is returned"")
    public void test_getAbbreviatedName_TooLongHint()","0","-","-","-","-"
"347","test_getAllInterfaces_Class","@Test
    public void test_getAllInterfaces_Class()","0","-","-","-","-"
"348","test_getAllSuperclasses_Class","@Test
    public void test_getAllSuperclasses_Class()","0","-","-","-","-"
"349","test_getCanonicalName_Class","@Test
    public void test_getCanonicalName_Class()","0","-","-","-","-"
"350","test_getCanonicalName_Class_String","@Test
    public void test_getCanonicalName_Class_String()","0","-","-","-","-"
"351","test_getClass","@Test
    public void test_getClass()","0","-","-","-","-"
"352","test_getName_Class","@Test
    public void test_getName_Class()","0","-","-","-","-"
"353","test_getName_Object","@Test
    public void test_getName_Object()","0","-","-","-","-"
"354","test_getPackageCanonicalName_Class","@Test
    public void test_getPackageCanonicalName_Class()","0","-","-","-","-"
"355","test_getPackageCanonicalName_Object","@Test
    public void test_getPackageCanonicalName_Object()","0","-","-","-","-"
"356","test_getPackageCanonicalName_String","@Test
    public void test_getPackageCanonicalName_String()","0","-","-","-","-"
"357","test_getPackageName_Class","@Test
    public void test_getPackageName_Class()","0","-","-","-","-"
"358","test_getPackageName_Object","@Test
    public void test_getPackageName_Object()","0","-","-","-","-"
"359","test_getPackageName_String","@Test
    public void test_getPackageName_String()","0","-","-","-","-"
"360","test_getShortCanonicalName_Class","@Test
    public void test_getShortCanonicalName_Class()","0","-","-","-","-"
"361","test_getShortCanonicalName_Object","@Test
    public void test_getShortCanonicalName_Object()","0","-","-","-","-"
"362","test_getShortCanonicalName_String","@Test
    public void test_getShortCanonicalName_String()","0","-","-","-","-"
"363","test_getShortClassName_Class","@Test
    public void test_getShortClassName_Class()","0","-","-","-","-"
"364","test_getShortClassName_Object","@Test
    public void test_getShortClassName_Object()","0","-","-","-","-"
"365","test_getShortClassName_String","@Test
    public void test_getShortClassName_String()","0","-","-","-","-"
"366","test_getSimpleName_Class","@Test
    public void test_getSimpleName_Class()","0","-","-","-","-"
"367","test_getSimpleName_Object","@Test
    public void test_getSimpleName_Object()","0","-","-","-","-"
"368","test_getSimpleName_Object_String","@Test
    public void test_getSimpleName_Object_String()","0","-","-","-","-"
"369","test_isAssignable","@Test
    public void test_isAssignable()","0","-","-","-","-"
"370","test_isAssignable_Autoboxing","@Test
    public void test_isAssignable_Autoboxing()","0","-","-","-","-"
"371","test_isAssignable_ClassArray_ClassArray","@Test
    public void test_isAssignable_ClassArray_ClassArray()","0","-","-","-","-"
"372","test_isAssignable_ClassArray_ClassArray_Autoboxing","@Test
    public void test_isAssignable_ClassArray_ClassArray_Autoboxing()","0","-","-","-","-"
"373","test_isAssignable_ClassArray_ClassArray_NoAutoboxing","@Test
    public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing()","0","-","-","-","-"
"374","test_isAssignable_DefaultUnboxing_Widening","@Test
    public void test_isAssignable_DefaultUnboxing_Widening()","0","-","-","-","-"
"375","test_isAssignable_NoAutoboxing","@Test
    public void test_isAssignable_NoAutoboxing()","0","-","-","-","-"
"376","test_isAssignable_Unboxing_Widening","@Test
    public void test_isAssignable_Unboxing_Widening()","0","-","-","-","-"
"377","test_isAssignable_Widening","@Test
    public void test_isAssignable_Widening()","0","-","-","-","-"
"378","test_isInnerClass_Class","@Test
    public void test_isInnerClass_Class()","0","-","-","-","-"
"379","testComparable","@Test
    public void testComparable()","0","-","-","-","-"
"380","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"381","testGetClassByNormalNameArrays","@Test
    public void testGetClassByNormalNameArrays() throws ClassNotFoundException","0","-","-","-","-"
"382","testGetClassByNormalNameArrays2D","@Test
    public void testGetClassByNormalNameArrays2D() throws ClassNotFoundException","0","-","-","-","-"
"383","testGetClassClassNotFound","@Test
    public void testGetClassClassNotFound() throws Exception","0","-","-","-","-"
"384","testGetClassInvalidArguments","@Test
    public void testGetClassInvalidArguments() throws Exception","0","-","-","-","-"
"385","testGetClassRawPrimitives","@Test
    public void testGetClassRawPrimitives() throws ClassNotFoundException","0","-","-","-","-"
"386","testGetClassWithArrayClasses","@Test
    public void testGetClassWithArrayClasses() throws Exception","0","-","-","-","-"
"387","testGetClassWithArrayClasses2D","@Test
    public void testGetClassWithArrayClasses2D() throws Exception","0","-","-","-","-"
"388","testGetComponentType","@Test
    public void testGetComponentType()","0","-","-","-","-"
"389","testGetInnerClass","@Test
    public void testGetInnerClass() throws ClassNotFoundException","0","-","-","-","-"
"390","testGetPublicMethod","@Test
    public void testGetPublicMethod() throws Exception","0","-","-","-","-"
"391","testHierarchyExcludingInterfaces","@Test
    public void testHierarchyExcludingInterfaces()","0","-","-","-","-"
"392","testHierarchyIncludingInterfaces","@Test
    public void testHierarchyIncludingInterfaces()","0","-","-","-","-"
"393","testIsPrimitiveOrWrapper","@Test
    public void testIsPrimitiveOrWrapper()","0","-","-","-","-"
"394","testIsPrimitiveWrapper","@Test
    public void testIsPrimitiveWrapper()","0","-","-","-","-"
"395","testPrimitivesToWrappers","@Test
    public void testPrimitivesToWrappers()","0","-","-","-","-"
"396","testPrimitiveToWrapper","@Test
    public void testPrimitiveToWrapper()","0","-","-","-","-"
"397","testShowJavaBug","@Test
    public void testShowJavaBug() throws Exception","0","-","-","-","-"
"398","testToClass_object","@Test
    public void testToClass_object()","0","-","-","-","-"
"399","testWithInterleavingWhitespace","@Test
    public void testWithInterleavingWhitespace() throws ClassNotFoundException","0","-","-","-","-"
"400","testWrappersToPrimitives","@Test
    public void testWrappersToPrimitives()","0","-","-","-","-"
"401","testWrappersToPrimitivesEmpty","@Test
    public void testWrappersToPrimitivesEmpty()","0","-","-","-","-"
"402","testWrappersToPrimitivesNull","@Test
    public void testWrappersToPrimitivesNull()","0","-","-","-","-"
"403","testWrapperToPrimitive","@Test
    public void testWrapperToPrimitive()","0","-","-","-","-"
"404","testWrapperToPrimitiveNoWrapper","@Test
    public void testWrapperToPrimitiveNoWrapper()","0","-","-","-","-"
"405","testWrapperToPrimitiveNull","@Test
    public void testWrapperToPrimitiveNull()","0","-","-","-","-"
"406","NotVisibleException","private NotVisibleException(final Throwable cause)","0","-","-","-","-"
"407","getCause","@Override
        public synchronized Throwable getCause()","0","-","-","-","-"
"408","createException","/**
     * Create a new Exception whose getCause method returns the provided cause.
     *
     * @param cause the cause of the exception
     * @return a new","0","-","-","-","-"
"409","NotVisibleExceptionFactory","private NotVisibleExceptionFactory()","0","-","-","-","-"
"410","beforeEach","/**
     * BeforeEach.
     */
    @BeforeEach
    public void beforeEach()","0","-","-","-","-"
"411","newInstance","private FluentBitSet newInstance()","0","-","-","-","-"
"412","newInstance","private FluentBitSet newInstance(final int nbits)","0","-","-","-","-"
"413","test_and","/**
     * Tests","0","-","-","-","-"
"414","test_and_BitSet","/**
     * Tests","0","-","-","-","-"
"415","test_andNot","/**
     * Tests","0","-","-","-","-"
"416","test_andNot_BitSet","/**
     * Tests","0","-","-","-","-"
"417","test_cardinality","/**
     * Tests","0","-","-","-","-"
"418","test_clear","/**
     * Tests","0","-","-","-","-"
"419","test_clearI","/**
     * Tests","0","-","-","-","-"
"420","test_clearII","/**
     * Tests","0","-","-","-","-"
"421","test_clearIntArray","/**
     * Tests","0","-","-","-","-"
"422","test_clone","/**
     * Tests FluentBitSet#clone()
     */
    @Test
    public void test_clone()","0","-","-","-","-"
"423","test_Constructor","/**
     * Tests","0","-","-","-","-"
"424","test_ConstructorInt","/**
     * Tests","0","-","-","-","-"
"425","test_equals","/**
     * Tests","0","-","-","-","-"
"426","test_flipI","/**
     * Tests","0","-","-","-","-"
"427","test_flipII","/**
     * Tests","0","-","-","-","-"
"428","test_getI","/**
     * Tests","0","-","-","-","-"
"429","test_getII","/**
     * Tests","0","-","-","-","-"
"430","test_hashCode","/**
     * Tests","0","-","-","-","-"
"431","test_intersects","/**
     * Tests","0","-","-","-","-"
"432","test_intersects_BitSet","/**
     * Tests","0","-","-","-","-"
"433","test_isEmpty","/**
     * Tests","0","-","-","-","-"
"434","test_length","/**
     * Tests","0","-","-","-","-"
"435","test_nextClearBitI","/**
     * Tests","0","-","-","-","-"
"436","test_nextSetBitI","/**
     * Tests","0","-","-","-","-"
"437","test_or","/**
     * Tests","0","-","-","-","-"
"438","test_or_BitSet","/**
     * Tests","0","-","-","-","-"
"439","test_or_FluentBitSetArray","/**
     * Tests","0","-","-","-","-"
"440","test_previousClearBit","/**
     * Tests","0","-","-","-","-"
"441","test_previousSetBit","/**
     * Tests","0","-","-","-","-"
"442","test_setII","/**
     * Tests","0","-","-","-","-"
"443","test_setIIZ","/**
     * Tests","0","-","-","-","-"
"444","test_setInclusive","/**
     * Tests","0","-","-","-","-"
"445","test_setInt","/**
     * Tests","0","-","-","-","-"
"446","test_setIntArray","/**
     * Tests","0","-","-","-","-"
"447","test_setIZ","/**
     * Tests","0","-","-","-","-"
"448","test_setRangeInclusive","/**
     * Tests","0","-","-","-","-"
"449","test_size","/**
     * Tests","0","-","-","-","-"
"450","test_stream","/**
     * Tests","0","-","-","-","-"
"451","test_toByteArray","/**
     * Tests","0","-","-","-","-"
"452","test_toLongArray","/**
     * Tests","0","-","-","-","-"
"453","test_toString","/**
     * Tests","0","-","-","-","-"
"454","test_xor","/**
     * Tests","0","-","-","-","-"
"455","test_xor_BitSet","/**
     * Tests","0","-","-","-","-"
"456","delimiters","public static String[] delimiters()","0","-","-","-","-"
"457","testConstructorArguments1ForEach","@Test
    public void testConstructorArguments1ForEach()","0","-","-","-","-"
"458","testConstructorArguments1ToList","@Test
    public void testConstructorArguments1ToList()","0","-","-","-","-"
"459","testConstructorArguments2AllDelimsToList","public void testConstructorArguments2AllDelimsToList(final String singleDelim)","0","-","-","-","-"
"460","testConstructorArguments2ForEach","@ParameterizedTest
    @MethodSource(""delimiters"")
    public void testConstructorArguments2ForEach(final String singleDelim)","0","-","-","-","-"
"461","testConstructorArguments2ToList","@ParameterizedTest
    @MethodSource(""delimiters"")
    public void testConstructorArguments2ToList(final String singleDelim)","0","-","-","-","-"
"462","testConstructorArguments3AllDelimsToList","@ParameterizedTest
    @MethodSource(""delimiters"")
    public void testConstructorArguments3AllDelimsToList(final String singleDelim)","0","-","-","-","-"
"463","testConstructorArguments3ToList","@ParameterizedTest
    @MethodSource(""delimiters"")
    public void testConstructorArguments3ToList(final String singleDelim)","0","-","-","-","-"
"464","testEmptyString","@Test
    void testEmptyString()","0","-","-","-","-"
"465","testIterator","@Test
    void testIterator()","0","-","-","-","-"
"466","testNonDefaultDelimiterToArray","@Test
    void testNonDefaultDelimiterToArray()","0","-","-","-","-"
"467","testNonDefaultDelimiterToList","@Test
    void testNonDefaultDelimiterToList()","0","-","-","-","-"
"468","testToArray","@Test
    public void testToArray()","0","-","-","-","-"
"469","testToList","@Test
    public void testToList()","0","-","-","-","-"
"470","testToStream","@Test
    public void testToStream()","0","-","-","-","-"
"471","oldIsMixedCase","public static boolean oldIsMixedCase(final CharSequence cs)","0","-","-","-","-"
"472","newIsMixedCaseBeginningMatch","@Benchmark
    public boolean newIsMixedCaseBeginningMatch()","0","-","-","-","-"
"473","newIsMixedCaseEndMatch","@Benchmark
    public boolean newIsMixedCaseEndMatch()","0","-","-","-","-"
"474","newIsMixedCaseMiddleMatch","@Benchmark
    public boolean newIsMixedCaseMiddleMatch()","0","-","-","-","-"
"475","newIsMixedCaseNoneMatch","@Benchmark
    public boolean newIsMixedCaseNoneMatch()","0","-","-","-","-"
"476","oldIsMixedCaseBeginningMatch","@Benchmark
    public boolean oldIsMixedCaseBeginningMatch()","0","-","-","-","-"
"477","oldIsMixedCaseEndMatch","@Benchmark
    public boolean oldIsMixedCaseEndMatch()","0","-","-","-","-"
"478","oldIsMixedCaseMiddleMatch","@Benchmark
    public boolean oldIsMixedCaseMiddleMatch()","0","-","-","-","-"
"479","oldIsMixedCaseNoneMatch","@Benchmark
    public boolean oldIsMixedCaseNoneMatch()","0","-","-","-","-"
"480","close","public void close()","0","-","-","-","-"
"481","isClosed","public boolean isClosed()","0","-","-","-","-"
"482","reset","public void reset()","0","-","-","-","-"
"483","run","public void run(final Throwable pTh) throws Throwable","0","-","-","-","-"
"484","failingBool","static boolean failingBool() throws SomeException","0","-","-","-","-"
"485","testDouble","static boolean testDouble(final double value) throws SomeException","0","-","-","-","-"
"486","testInt","static boolean testInt(final int value) throws SomeException","0","-","-","-","-"
"487","testLong","static boolean testLong(final long value) throws SomeException","0","-","-","-","-"
"488","throwOnOdd","private static void throwOnOdd() throws SomeException","0","-","-","-","-"
"489","FailureOnOddInvocations","FailureOnOddInvocations() throws SomeException","0","-","-","-","-"
"490","getAsBoolean","boolean getAsBoolean() throws SomeException","0","-","-","-","-"
"491","SomeException","SomeException(final String message)","0","-","-","-","-"
"492","setThrowable","public void setThrowable(final Throwable throwable)","0","-","-","-","-"
"493","test","public void test() throws Throwable","0","-","-","-","-"
"494","Testable","Testable(final Throwable throwable)","0","-","-","-","-"
"495","getAcceptedObject","public T getAcceptedObject()","0","-","-","-","-"
"496","getAcceptedPrimitiveObject1","public P getAcceptedPrimitiveObject1()","0","-","-","-","-"
"497","getAcceptedPrimitiveObject2","public P getAcceptedPrimitiveObject2()","0","-","-","-","-"
"498","setThrowable","public void setThrowable(final Throwable throwable)","0","-","-","-","-"
"499","test","public void test() throws Throwable","0","-","-","-","-"
"500","test","public Object test(final Object input1, final Object input2) throws Throwable","0","-","-","-","-"
"501","test","public void test(final Throwable throwable) throws Throwable","0","-","-","-","-"
"502","testAsBooleanPrimitive","public boolean testAsBooleanPrimitive() throws Throwable","0","-","-","-","-"
"503","testAsBooleanPrimitive","public boolean testAsBooleanPrimitive(final Throwable throwable) throws Throwable","0","-","-","-","-"
"504","testAsDoublePrimitive","public double testAsDoublePrimitive() throws Throwable","0","-","-","-","-"
"505","testAsDoublePrimitive","public double testAsDoublePrimitive(final Throwable throwable) throws Throwable","0","-","-","-","-"
"506","testAsInteger","public Integer testAsInteger() throws Throwable","0","-","-","-","-"
"507","testAsInteger","public Integer testAsInteger(final Throwable throwable) throws Throwable","0","-","-","-","-"
"508","testAsIntPrimitive","public int testAsIntPrimitive() throws Throwable","0","-","-","-","-"
"509","testAsIntPrimitive","public int testAsIntPrimitive(final Throwable throwable) throws Throwable","0","-","-","-","-"
"510","testAsLongPrimitive","public long testAsLongPrimitive() throws Throwable","0","-","-","-","-"
"511","testAsLongPrimitive","public long testAsLongPrimitive(final Throwable throwable) throws Throwable","0","-","-","-","-"
"512","testDouble","public void testDouble(final double i) throws Throwable","0","-","-","-","-"
"513","testDoubleDouble","public double testDoubleDouble(final double i, final double j) throws Throwable","0","-","-","-","-"
"514","testInt","public void testInt(final int i) throws Throwable","0","-","-","-","-"
"515","testLong","public void testLong(final long i) throws Throwable","0","-","-","-","-"
"516","testObjDouble","public void testObjDouble(final T object, final double i) throws Throwable","0","-","-","-","-"
"517","testObjInt","public void testObjInt(final T object, final int i) throws Throwable","0","-","-","-","-"
"518","testObjLong","public void testObjLong(final T object, final long i) throws Throwable","0","-","-","-","-"
"519","testAcceptBiConsumer","@Test
    public void testAcceptBiConsumer()","0","-","-","-","-"
"520","testAcceptConsumer","@Test
    public void testAcceptConsumer()","0","-","-","-","-"
"521","testAcceptDoubleConsumer","@Test
    public void testAcceptDoubleConsumer()","0","-","-","-","-"
"522","testAcceptIntConsumer","@Test
    public void testAcceptIntConsumer()","0","-","-","-","-"
"523","testAcceptLongConsumer","@Test
    public void testAcceptLongConsumer()","0","-","-","-","-"
"524","testAcceptObjDoubleConsumer","@Test
    public void testAcceptObjDoubleConsumer()","0","-","-","-","-"
"525","testAcceptObjIntConsumer","@Test
    public void testAcceptObjIntConsumer()","0","-","-","-","-"
"526","testAcceptObjLongConsumer","@Test
    public void testAcceptObjLongConsumer()","0","-","-","-","-"
"527","testApplyBiFunction","@Test
    public void testApplyBiFunction()","0","-","-","-","-"
"528","testApplyFunction","@Test
    public void testApplyFunction()","0","-","-","-","-"
"529","testAsCallable","@Test
    public void testAsCallable()","0","-","-","-","-"
"530","testAsConsumer","@Test
    public void testAsConsumer()","0","-","-","-","-"
"531","testAsRunnable","@Test
    public void testAsRunnable()","0","-","-","-","-"
"532","testAsSupplier","@Test
    public void testAsSupplier()","0","-","-","-","-"
"533","testBiConsumer","@Test
    public void testBiConsumer()","0","-","-","-","-"
"534","testBiFunction","@Test
    public void testBiFunction()","0","-","-","-","-"
"535","testBiPredicate","@Test
    @DisplayName(""Test that asPredicate(FailableBiPredicate) is converted to -> BiPredicate "")
    public void testBiPredicate()","0","-","-","-","-"
"536","testCallable","@Test
    public void testCallable()","0","-","-","-","-"
"537","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"538","testFunction","@Test
    public void testFunction()","0","-","-","-","-"
"539","testGetFromSupplier","@Test
    public void testGetFromSupplier()","0","-","-","-","-"
"540","testGetSupplier","@Test
    public void testGetSupplier()","0","-","-","-","-"
"541","testPredicate","@Test
    @DisplayName(""Test that asPredicate(FailablePredicate) is converted to -> Predicate "")
    public void testPredicate()","0","-","-","-","-"
"542","testRunnable","@Test
    public void testRunnable()","0","-","-","-","-"
"543","testThrows_FailableBiConsumer_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception. using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableBiConsumer_Object_Throwable()","0","-","-","-","-"
"544","accept","@Override
            public void accept(final Object object1, final Object object2) throws Throwable","0","-","-","-","-"
"545","testThrows_FailableBiConsumer_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableBiConsumer_String_IOException()","0","-","-","-","-"
"546","accept","@Override
            public void accept(final String object1, final String object2) throws IOException","0","-","-","-","-"
"547","testThrows_FailableBiFunction_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception. using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableBiFunction_Object_Throwable()","0","-","-","-","-"
"548","apply","@Override
            public Object apply(final Object input1, final Object input2) throws Throwable","0","-","-","-","-"
"549","testThrows_FailableBiFunction_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableBiFunction_String_IOException()","0","-","-","-","-"
"550","apply","@Override
            public String apply(final String input1, final String input2) throws IOException","0","-","-","-","-"
"551","testThrows_FailableBiPredicate_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception. using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableBiPredicate_Object_Throwable()","0","-","-","-","-"
"552","test","@Override
            public boolean test(final Object object1, final Object object2) throws Throwable","0","-","-","-","-"
"553","testThrows_FailableBiPredicate_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableBiPredicate_String_IOException()","0","-","-","-","-"
"554","test","@Override
            public boolean test(final String object1, final String object2) throws IOException","0","-","-","-","-"
"555","testThrows_FailableCallable_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception. using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableCallable_Object_Throwable()","0","-","-","-","-"
"556","call","@Override
            public Object call() throws Throwable","0","-","-","-","-"
"557","testThrows_FailableCallable_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableCallable_String_IOException()","0","-","-","-","-"
"558","call","@Override
            public String call() throws IOException","0","-","-","-","-"
"559","testThrows_FailableConsumer_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception. using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableConsumer_Object_Throwable()","0","-","-","-","-"
"560","accept","@Override
            public void accept(final Object object) throws Throwable","0","-","-","-","-"
"561","testThrows_FailableConsumer_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableConsumer_String_IOException()","0","-","-","-","-"
"562","accept","@Override
            public void accept(final String object) throws IOException","0","-","-","-","-"
"563","testThrows_FailableFunction_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception. using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableFunction_Object_Throwable()","0","-","-","-","-"
"564","apply","@Override
            public Object apply(final Object input) throws Throwable","0","-","-","-","-"
"565","testThrows_FailableFunction_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableFunction_String_IOException()","0","-","-","-","-"
"566","apply","@Override
            public String apply(final String input) throws IOException","0","-","-","-","-"
"567","testThrows_FailablePredicate_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception. using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailablePredicate_Object_Throwable()","0","-","-","-","-"
"568","test","@Override
            public boolean test(final Object object) throws Throwable","0","-","-","-","-"
"569","testThrows_FailablePredicate_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailablePredicate_String_IOException()","0","-","-","-","-"
"570","test","@Override
            public boolean test(final String object) throws IOException","0","-","-","-","-"
"571","testThrows_FailableRunnable_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception. using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableRunnable_Object_Throwable()","0","-","-","-","-"
"572","run","@Override
            public void run() throws Throwable","0","-","-","-","-"
"573","testThrows_FailableRunnable_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableRunnable_String_IOException()","0","-","-","-","-"
"574","run","@Override
            public void run() throws IOException","0","-","-","-","-"
"575","testThrows_FailableSupplier_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception. using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableSupplier_Object_Throwable()","0","-","-","-","-"
"576","get","@Override
            public Object get() throws Throwable","0","-","-","-","-"
"577","testThrows_FailableSupplier_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableSupplier_String_IOException()","0","-","-","-","-"
"578","get","@Override
            public String get() throws IOException","0","-","-","-","-"
"579","testTryWithResources","@Test
    public void testTryWithResources()","0","-","-","-","-"
"580","testInsertBooleans","@Test
    public void testInsertBooleans()","0","-","-","-","-"
"581","testInsertBytes","@Test
    public void testInsertBytes()","0","-","-","-","-"
"582","testInsertChars","@Test
    public void testInsertChars()","0","-","-","-","-"
"583","testInsertDoubles","@Test
    public void testInsertDoubles()","0","-","-","-","-"
"584","testInsertFloats","@Test
    public void testInsertFloats()","0","-","-","-","-"
"585","testInsertGenericArray","@Test
    public void testInsertGenericArray()","0","-","-","-","-"
"586","testInsertInts","@Test
    public void testInsertInts()","0","-","-","-","-"
"587","testInsertLongs","@Test
    public void testInsertLongs()","0","-","-","-","-"
"588","testInsertShorts","@Test
    public void testInsertShorts()","0","-","-","-","-"
"589","testComparable1","@Test
    public void testComparable1()","0","-","-","-","-"
"590","testComparable2","@Test
    public void testComparable2()","0","-","-","-","-"
"591","testComparable3","@Test
    public void testComparable3()","0","-","-","-","-"
"592","testComparable4","@Test
    public void testComparable4()","0","-","-","-","-"
"593","testCompatibilityBetweenTriples","@Test
    public void testCompatibilityBetweenTriples()","0","-","-","-","-"
"594","testEmptyArrayGenerics","@Test
    public void testEmptyArrayGenerics()","0","-","-","-","-"
"595","testEmptyArrayLength","@Test
    public void testEmptyArrayLength()","0","-","-","-","-"
"596","testFormattable_padded","@Test
    public void testFormattable_padded()","0","-","-","-","-"
"597","testFormattable_simple","@Test
    public void testFormattable_simple()","0","-","-","-","-"
"598","testOfNonNull","@Test
    public void testOfNonNull()","0","-","-","-","-"
"599","testToString","@Test
    public void testToString()","0","-","-","-","-"
"600","testToStringCustom","@Test
    public void testToStringCustom()","0","-","-","-","-"
"601","testTripleOf","@Test
    public void testTripleOf()","0","-","-","-","-"
"602","mapClassFactory","public static Stream<Class<? extends Map>> mapClassFactory()","0","-","-","-","-"
"603","testAccept","@Test
    public void testAccept()","0","-","-","-","-"
"604","testApply","@Test
    public void testApply()","0","-","-","-","-"
"605","testComparableAllDifferent","@Test
    public void testComparableAllDifferent()","0","-","-","-","-"
"606","testComparableLeftEquals","@Test
    public void testComparableLeftEquals()","0","-","-","-","-"
"607","testComparableRightEquals","@Test
    public void testComparableRightEquals()","0","-","-","-","-"
"608","testCompatibilityBetweenPairs","@Test
    public void testCompatibilityBetweenPairs()","0","-","-","-","-"
"609","testEmptyArrayGenerics","@Test
    public void testEmptyArrayGenerics()","0","-","-","-","-"
"610","testEmptyArrayLength","@Test
    public void testEmptyArrayLength()","0","-","-","-","-"
"611","testEqualsAnonynous","@Test
    public void testEqualsAnonynous()","0","-","-","-","-"
"612","equals","@Override
            public boolean equals(final Object o)","0","-","-","-","-"
"613","getKey","@Override
            public String getKey()","0","-","-","-","-"
"614","getValue","@Override
            public String getValue()","0","-","-","-","-"
"615","hashCode","@Override
            public int hashCode()","0","-","-","-","-"
"616","setValue","@Override
            public String setValue(final String value)","0","-","-","-","-"
"617","equals","@Override
            public boolean equals(final Object o)","0","-","-","-","-"
"618","getKey","@Override
            public String getKey()","0","-","-","-","-"
"619","getValue","@Override
            public String getValue()","0","-","-","-","-"
"620","hashCode","@Override
            public int hashCode()","0","-","-","-","-"
"621","setValue","@Override
            public String setValue(final String value)","0","-","-","-","-"
"622","testFormattable_padded","@Test
    public void testFormattable_padded()","0","-","-","-","-"
"623","testFormattable_simple","@Test
    public void testFormattable_simple()","0","-","-","-","-"
"624","testMapEntries","@ParameterizedTest()
    @MethodSource(""org.apache.commons.lang3.tuple.PairTest#mapClassFactory"")
    public <K, V> void testMapEntries(final Class<Map<Integer, String>> clazz) throws InstantiationException, IllegalAccessException","0","-","-","-","-"
"625","testMapEntries","public <K, V> void testMapEntries(final Map<Integer, String> map)","0","-","-","-","-"
"626","testMapEntry","private void testMapEntry(final Map<Integer, String> map)","0","-","-","-","-"
"627","testOfNonNull","@Test
    public void testOfNonNull()","0","-","-","-","-"
"628","testPairOfAbstractMapSimpleEntry","@Test
    public void testPairOfAbstractMapSimpleEntry()","0","-","-","-","-"
"629","testPairOfMapEntry","@Test
    public void testPairOfMapEntry()","0","-","-","-","-"
"630","testPairOfObjects","@Test
    public void testPairOfObjects()","0","-","-","-","-"
"631","testToString","@Test
    public void testToString()","0","-","-","-","-"
"632","testToStringCustom","@Test
    public void testToStringCustom()","0","-","-","-","-"
"633","testBasic","@Test
    public void testBasic()","0","-","-","-","-"
"634","testComparableLeftOnly","@Test
    public void testComparableLeftOnly()","0","-","-","-","-"
"635","testComparableRightOnly","@Test
    public void testComparableRightOnly()","0","-","-","-","-"
"636","testEmptyArrayGenerics","@Test
    public void testEmptyArrayGenerics()","0","-","-","-","-"
"637","testEmptyArrayLength","@Test
    public void testEmptyArrayLength()","0","-","-","-","-"
"638","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"639","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"640","testNullPairEquals","@Test
    public void testNullPairEquals()","0","-","-","-","-"
"641","testNullPairKey","@Test
    public void testNullPairKey()","0","-","-","-","-"
"642","testNullPairLeft","@Test
    public void testNullPairLeft()","0","-","-","-","-"
"643","testNullPairRight","@Test
    public void testNullPairRight()","0","-","-","-","-"
"644","testNullPairSame","@Test
    public void testNullPairSame()","0","-","-","-","-"
"645","testNullPairTyped","@Test
    public void testNullPairTyped()","0","-","-","-","-"
"646","testNullPairValue","@Test
    public void testNullPairValue()","0","-","-","-","-"
"647","testOfNonNull","@Test
    public void testOfNonNull()","0","-","-","-","-"
"648","testPairOfMapEntry","@Test
    public void testPairOfMapEntry()","0","-","-","-","-"
"649","testPairOfObjects","@Test
    public void testPairOfObjects()","0","-","-","-","-"
"650","testSerialization","@Test
    public void testSerialization() throws Exception","0","-","-","-","-"
"651","testToString","@Test
    public void testToString()","0","-","-","-","-"
"652","testToStringLeft","@Test
    public void testToStringLeft()","0","-","-","-","-"
"653","testToStringRight","@Test
    public void testToStringRight()","0","-","-","-","-"
"654","testUnsupportedOperation","@Test
    public void testUnsupportedOperation()","0","-","-","-","-"
"655","testUseAsKeyOfHashMap","@Test
    public void testUseAsKeyOfHashMap()","0","-","-","-","-"
"656","testUseAsKeyOfTreeMap","@Test
    public void testUseAsKeyOfTreeMap()","0","-","-","-","-"
"657","testBasic","@Test
    public void testBasic()","0","-","-","-","-"
"658","testDefault","@Test
    public void testDefault()","0","-","-","-","-"
"659","testEmptyArrayGenerics","@Test
    public void testEmptyArrayGenerics()","0","-","-","-","-"
"660","testEmptyArrayLength","@Test
    public void testEmptyArrayLength()","0","-","-","-","-"
"661","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"662","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"663","testMutate","@Test
    public void testMutate()","0","-","-","-","-"
"664","testOfNonNull","@Test
    public void testOfNonNull()","0","-","-","-","-"
"665","testPairOfMapEntry","@Test
    public void testPairOfMapEntry()","0","-","-","-","-"
"666","testPairOfObjects","@Test
    public void testPairOfObjects()","0","-","-","-","-"
"667","testSerialization","@Test
    public void testSerialization() throws Exception","0","-","-","-","-"
"668","testToString","@Test
    public void testToString()","0","-","-","-","-"
"669","testBasic","@Test
    public void testBasic()","0","-","-","-","-"
"670","testEmptyArrayGenerics","@Test
    public void testEmptyArrayGenerics()","0","-","-","-","-"
"671","testEmptyArrayLength","@Test
    public void testEmptyArrayLength()","0","-","-","-","-"
"672","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"673","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"674","testNullTripleEquals","@Test
    public void testNullTripleEquals()","0","-","-","-","-"
"675","testNullTripleLeft","@Test
    public void testNullTripleLeft()","0","-","-","-","-"
"676","testNullTripleMiddle","@Test
    public void testNullTripleMiddle()","0","-","-","-","-"
"677","testNullTripleRight","@Test
    public void testNullTripleRight()","0","-","-","-","-"
"678","testNullTripleSame","@Test
    public void testNullTripleSame()","0","-","-","-","-"
"679","testNullTripleTyped","@Test
    public void testNullTripleTyped()","0","-","-","-","-"
"680","testOfNonNull","@Test
    public void testOfNonNull()","0","-","-","-","-"
"681","testSerialization","@Test
    public void testSerialization() throws Exception","0","-","-","-","-"
"682","testToString","@Test
    public void testToString()","0","-","-","-","-"
"683","testTripleOf","@Test
    public void testTripleOf()","0","-","-","-","-"
"684","testUseAsKeyOfHashMap","@Test
    public void testUseAsKeyOfHashMap()","0","-","-","-","-"
"685","testUseAsKeyOfTreeMap","@Test
    public void testUseAsKeyOfTreeMap()","0","-","-","-","-"
"686","testBasic","@Test
    public void testBasic()","0","-","-","-","-"
"687","testDefault","@Test
    public void testDefault()","0","-","-","-","-"
"688","testEmptyArrayGenerics","@Test
    public void testEmptyArrayGenerics()","0","-","-","-","-"
"689","testEmptyArrayLength","@Test
    public void testEmptyArrayLength()","0","-","-","-","-"
"690","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"691","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"692","testMutate","@Test
    public void testMutate()","0","-","-","-","-"
"693","testOfNonNull","@Test
    public void testOfNonNull()","0","-","-","-","-"
"694","testSerialization","@Test
    public void testSerialization() throws Exception","0","-","-","-","-"
"695","testToString","@Test
    public void testToString()","0","-","-","-","-"
"696","testTripleOf","@Test
    public void testTripleOf()","0","-","-","-","-"
"697","basicKeyCheck","private void basicKeyCheck(final String key)","0","-","-","-","-"
"698","isJava11OrGreater","private boolean isJava11OrGreater()","0","-","-","-","-"
"699","testActualKeys","@Test
    public void testActualKeys()","0","-","-","-","-"
"700","testGetAwtToolkit","@Test
    public void testGetAwtToolkit()","0","-","-","-","-"
"701","testGetBoolean","@Test
    public void testGetBoolean()","0","-","-","-","-"
"702","testGetDoesNotThrow","@Test
    public void testGetDoesNotThrow()","0","-","-","-","-"
"703","testGetFileEncoding","@Test
    public void testGetFileEncoding()","0","-","-","-","-"
"704","testGetFileSeparator","@Test
    public void testGetFileSeparator()","0","-","-","-","-"
"705","testGetInt","@Test
    public void testGetInt()","0","-","-","-","-"
"706","testGetJavaAwtFonts","@Test
    public void testGetJavaAwtFonts()","0","-","-","-","-"
"707","testGetJavaAwtGraphicsenv","@Test
    public void testGetJavaAwtGraphicsenv()","0","-","-","-","-"
"708","testGetJavaAwtHeadless","@Test
    public void testGetJavaAwtHeadless()","0","-","-","-","-"
"709","testGetJavaAwtPrinterjob","@Test
    public void testGetJavaAwtPrinterjob()","0","-","-","-","-"
"710","testGetJavaClassPath","@Test
    public void testGetJavaClassPath()","0","-","-","-","-"
"711","testGetJavaClassVersion","@Test
    public void testGetJavaClassVersion()","0","-","-","-","-"
"712","testGetJavaCompiler","@Test
    public void testGetJavaCompiler()","0","-","-","-","-"
"713","testGetJavaEndorsedDirs","@Test
    public void testGetJavaEndorsedDirs()","0","-","-","-","-"
"714","testGetJavaExtDirs","@Test
    public void testGetJavaExtDirs()","0","-","-","-","-"
"715","testGetJavaHome","@Test
    public void testGetJavaHome()","0","-","-","-","-"
"716","testGetJavaIoTmpdir","@Test
    public void testGetJavaIoTmpdir()","0","-","-","-","-"
"717","testGetJavaLibraryPath","@Test
    public void testGetJavaLibraryPath()","0","-","-","-","-"
"718","testGetJavaLocaleProviders","@Test
    public void testGetJavaLocaleProviders()","0","-","-","-","-"
"719","testGetJavaRuntimeName","@Test
    public void testGetJavaRuntimeName()","0","-","-","-","-"
"720","testGetJavaRuntimeVersion","@Test
    public void testGetJavaRuntimeVersion()","0","-","-","-","-"
"721","testGetJavaSpecificationName","@Test
    public void testGetJavaSpecificationName()","0","-","-","-","-"
"722","testGetJavaSpecificationVendor","@Test
    public void testGetJavaSpecificationVendor()","0","-","-","-","-"
"723","testGetJavaSpecificationVersion","@Test
    public void testGetJavaSpecificationVersion()","0","-","-","-","-"
"724","testGetJavaSpecificationVersionSupplier","@Test
    public void testGetJavaSpecificationVersionSupplier()","0","-","-","-","-"
"725","testGetJavaUtilPrefsPreferencesFactory","@Test
    public void testGetJavaUtilPrefsPreferencesFactory()","0","-","-","-","-"
"726","testGetJavaVendor","@Test
    public void testGetJavaVendor()","0","-","-","-","-"
"727","testGetJavaVendorUrl","@Test
    public void testGetJavaVendorUrl()","0","-","-","-","-"
"728","testGetJavaVersion","@Test
    public void testGetJavaVersion()","0","-","-","-","-"
"729","testGetJavaVmInfo","@Test
    public void testGetJavaVmInfo()","0","-","-","-","-"
"730","testGetJavaVmName","@Test
    public void testGetJavaVmName()","0","-","-","-","-"
"731","testGetJavaVmSpecificationName","@Test
    public void testGetJavaVmSpecificationName()","0","-","-","-","-"
"732","testGetJavaVmSpecificationVendor","@Test
    public void testGetJavaVmSpecificationVendor()","0","-","-","-","-"
"733","testGetJavaVmSpecificationVersion","@Test
    public void testGetJavaVmSpecificationVersion()","0","-","-","-","-"
"734","testGetJavaVmVendor","@Test
    public void testGetJavaVmVendor()","0","-","-","-","-"
"735","testGetJavaVmVersion","@Test
    public void testGetJavaVmVersion()","0","-","-","-","-"
"736","testGetLineSeparator","@Test
    public void testGetLineSeparator()","0","-","-","-","-"
"737","testGetLong","@Test
    public void testGetLong()","0","-","-","-","-"
"738","testGetOsArch","@Test
    public void testGetOsArch()","0","-","-","-","-"
"739","testGetOsName","@Test
    public void testGetOsName()","0","-","-","-","-"
"740","testGetOsVersion","@Test
    public void testGetOsVersion()","0","-","-","-","-"
"741","testGetPathSeparator","@Test
    public void testGetPathSeparator()","0","-","-","-","-"
"742","testGetUserCountry","@Test
    public void testGetUserCountry()","0","-","-","-","-"
"743","testGetUserDir","@Test
    public void testGetUserDir()","0","-","-","-","-"
"744","testGetUserHome","@Test
    public void testGetUserHome()","0","-","-","-","-"
"745","testGetUserLanguage","@Test
    public void testGetUserLanguage()","0","-","-","-","-"
"746","testGetUserName","@Test
    public void testGetUserName()","0","-","-","-","-"
"747","testGetUserTimezone","@Test
    public void testGetUserTimezone()","0","-","-","-","-"
"748","testSetAll_IntFunction","@Test
    public void testSetAll_IntFunction()","0","-","-","-","-"
"749","testSetAll_Supplier","@Test
    public void testSetAll_Supplier()","0","-","-","-","-"
"750","testStripAccents","@Test
    public void testStripAccents()","0","-","-","-","-"
"751","testStripAccentsIWithBar","@Test
    public void testStripAccentsIWithBar()","0","-","-","-","-"
"752","testStripAccentsKorean","@Test
    @Disabled
    public void testStripAccentsKorean()","0","-","-","-","-"
"753","testStripAccentsTWithStroke","@Test
    public void testStripAccentsTWithStroke()","0","-","-","-","-"
"754","testStripAccentsUnicodeVulgarFractions","/**
     * Tests Unicode vulgar fractions.
     */
    @Test
    public void testStripAccentsUnicodeVulgarFractions()","0","-","-","-","-"
"755","testStripAccentsUWithBar","@Test
    public void testStripAccentsUWithBar()","0","-","-","-","-"
"756","testStripAll","@Test
    public void testStripAll()","0","-","-","-","-"
"757","testStripEndStringString","@Test
    public void testStripEndStringString()","0","-","-","-","-"
"758","testStripStartStringString","@Test
    public void testStripStartStringString()","0","-","-","-","-"
"759","testStripString","@Test
    public void testStripString()","0","-","-","-","-"
"760","testStripStringString","@Test
    public void testStripStringString()","0","-","-","-","-"
"761","testStripToEmptyString","@Test
    public void testStripToEmptyString()","0","-","-","-","-"
"762","testStripToNullString","@Test
    public void testStripToNullString()","0","-","-","-","-"
"763","testTrim","@Test
    public void testTrim()","0","-","-","-","-"
"764","testTrimToEmpty","@Test
    public void testTrimToEmpty()","0","-","-","-","-"
"765","testTrimToNull","@Test
    public void testTrimToNull()","0","-","-","-","-"
"766","assertEscapeJava","private void assertEscapeJava(final String escaped, final String original) throws IOException","0","-","-","-","-"
"767","assertEscapeJava","private void assertEscapeJava(String message, final String expected, final String original) throws IOException","0","-","-","-","-"
"768","assertUnescapeJava","private void assertUnescapeJava(final String unescaped, final String original) throws IOException","0","-","-","-","-"
"769","assertUnescapeJava","private void assertUnescapeJava(final String message, final String unescaped, final String original) throws IOException","0","-","-","-","-"
"770","checkCsvEscapeWriter","private void checkCsvEscapeWriter(final String expected, final String value) throws IOException","0","-","-","-","-"
"771","checkCsvUnescapeWriter","private void checkCsvUnescapeWriter(final String expected, final String value) throws IOException","0","-","-","-","-"
"772","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"773","testEscapeCsvIllegalStateException","@Test
    public void testEscapeCsvIllegalStateException()","0","-","-","-","-"
"774","testEscapeCsvString","@Test
    public void testEscapeCsvString()","0","-","-","-","-"
"775","testEscapeCsvWriter","@Test
    public void testEscapeCsvWriter() throws Exception","0","-","-","-","-"
"776","testEscapeEcmaScript","@Test
    public void testEscapeEcmaScript()","0","-","-","-","-"
"777","testEscapeHiragana","/**
     * Tests https://issues.apache.org/jira/browse/LANG-339
     */
    @Test
    public void testEscapeHiragana()","0","-","-","-","-"
"778","testEscapeHtml","@Test
    public void testEscapeHtml() throws IOException","0","-","-","-","-"
"779","testEscapeHtmlHighUnicode","/**
     * Tests // https://issues.apache.org/jira/browse/LANG-480
     */
    @Test
    public void testEscapeHtmlHighUnicode()","0","-","-","-","-"
"780","testEscapeHtmlVersions","@Test
    public void testEscapeHtmlVersions()","0","-","-","-","-"
"781","testEscapeJava","@Test
    public void testEscapeJava() throws IOException","0","-","-","-","-"
"782","testEscapeJavaWithSlash","/**
     * Tests https://issues.apache.org/jira/browse/LANG-421
     */
    @Test
    public void testEscapeJavaWithSlash()","0","-","-","-","-"
"783","testEscapeJson","@Test
    public void testEscapeJson()","0","-","-","-","-"
"784","testEscapeXml","@Test
    public void testEscapeXml() throws Exception","0","-","-","-","-"
"785","testEscapeXml10","@Test
    public void testEscapeXml10()","0","-","-","-","-"
"786","testEscapeXml11","@Test
    public void testEscapeXml11()","0","-","-","-","-"
"787","testEscapeXmlAllCharacters","@Test
    public void testEscapeXmlAllCharacters()","0","-","-","-","-"
"788","testEscapeXmlSupplementaryCharacters","/**
     * Tests Supplementary characters.
     * <p>
     * From https://www.w3.org/International/questions/qa-escapes
     * </p>
     * <blockquote> Supplementary characters are those Unicode characters that have code points higher than the characters in the Basic Multilingual Plane
     * (BMP). In UTF-16 a supplementary character is encoded using two 16-bit surrogate code points from the BMP. Because of this, some people think that
     * supplementary characters need to be represented using two escapes, but this is incorrect - you must use the single, code point value for that character.
     * For example, use &amp;&#35;x233B4&#59; rather than &amp;&#35;xD84C&#59;&amp;&#35;xDFB4&#59;. </blockquote>
     *
     * @see <a href=""https://www.w3.org/International/questions/qa-escapes"">Using character escapes in markup and CSS</a>
     * @see <a href=""https://issues.apache.org/jira/browse/LANG-728"">LANG-728</a>
     */
    @Test
    public void testEscapeXmlSupplementaryCharacters()","0","-","-","-","-"
"789","testLang313","@Test
    public void testLang313()","0","-","-","-","-"
"790","testLang708","/**
     * Tests https://issues.apache.org/jira/browse/LANG-708
     *
     * @throws IOException if an I/O error occurs
     */
    @Test
    public void testLang708() throws IOException","0","-","-","-","-"
"791","testLang720","/**
     * Tests https://issues.apache.org/jira/browse/LANG-720
     */
    @Test
    public void testLang720()","0","-","-","-","-"
"792","testLang911","/**
     * Tests https://issues.apache.org/jira/browse/LANG-911
     */
    @Test
    public void testLang911()","0","-","-","-","-"
"793","testStandaloneAmphersand","@Test
    public void testStandaloneAmphersand()","0","-","-","-","-"
"794","testUnescapeCsvIllegalStateException","@Test
    public void testUnescapeCsvIllegalStateException()","0","-","-","-","-"
"795","testUnescapeCsvString","@Test
    public void testUnescapeCsvString()","0","-","-","-","-"
"796","testUnescapeCsvWriter","@Test
    public void testUnescapeCsvWriter() throws Exception","0","-","-","-","-"
"797","testUnescapeEcmaScript","@Test
    public void testUnescapeEcmaScript()","0","-","-","-","-"
"798","testUnescapeHexCharsHtml","@Test
    public void testUnescapeHexCharsHtml()","0","-","-","-","-"
"799","testUnescapeHtml4","@Test
    public void testUnescapeHtml4() throws IOException","0","-","-","-","-"
"800","testUnescapeJava","@Test
    public void testUnescapeJava() throws IOException","0","-","-","-","-"
"801","testUnescapeJson","@Test
    public void testUnescapeJson()","0","-","-","-","-"
"802","testUnescapeUnknownEntity","@Test
    public void testUnescapeUnknownEntity()","0","-","-","-","-"
"803","testUnescapeXmlSupplementaryCharacters","/**
     * Reverse of the above.
     *
     * @see <a href=""https://issues.apache.org/jira/browse/LANG-729"">LANG-729</a>
     */
    @Test
    public void testUnescapeXmlSupplementaryCharacters()","0","-","-","-","-"
"804","testAddFirstBoolean","@Test
    public void testAddFirstBoolean()","0","-","-","-","-"
"805","testAddFirstByte","@Test
    public void testAddFirstByte()","0","-","-","-","-"
"806","testAddFirstChar","@Test
    public void testAddFirstChar()","0","-","-","-","-"
"807","testAddFirstDouble","@Test
    public void testAddFirstDouble()","0","-","-","-","-"
"808","testAddFirstFloat","@Test
    public void testAddFirstFloat()","0","-","-","-","-"
"809","testAddFirstInt","@Test
    public void testAddFirstInt()","0","-","-","-","-"
"810","testAddFirstLong","@Test
    public void testAddFirstLong()","0","-","-","-","-"
"811","testAddFirstObject","@Test
    public void testAddFirstObject()","0","-","-","-","-"
"812","testAddFirstShort","@Test
    public void testAddFirstShort()","0","-","-","-","-"
"813","testAddObjectArrayBoolean","@Test
    public void testAddObjectArrayBoolean()","0","-","-","-","-"
"814","testAddObjectArrayByte","@Test
    public void testAddObjectArrayByte()","0","-","-","-","-"
"815","testAddObjectArrayChar","@Test
    public void testAddObjectArrayChar()","0","-","-","-","-"
"816","testAddObjectArrayDouble","@Test
    public void testAddObjectArrayDouble()","0","-","-","-","-"
"817","testAddObjectArrayFloat","@Test
    public void testAddObjectArrayFloat()","0","-","-","-","-"
"818","testAddObjectArrayInt","@Test
    public void testAddObjectArrayInt()","0","-","-","-","-"
"819","testAddObjectArrayLong","@Test
    public void testAddObjectArrayLong()","0","-","-","-","-"
"820","testAddObjectArrayObject","@Test
    public void testAddObjectArrayObject()","0","-","-","-","-"
"821","testAddObjectArrayShort","@Test
    public void testAddObjectArrayShort()","0","-","-","-","-"
"822","testAddObjectArrayToObjectArray","@Test
    public void testAddObjectArrayToObjectArray()","0","-","-","-","-"
"823","testAddObjectAtIndex","@SuppressWarnings(""deprecation"")
    @Test
    public void testAddObjectAtIndex()","0","-","-","-","-"
"824","testJira567","@Test
    public void testJira567()","0","-","-","-","-"
"825","testLANG571","@Test
    @SuppressWarnings(""deprecation"")
    public void testLANG571()","0","-","-","-","-"
"826","assertCorrect","private void assertCorrect(final String assertMessage, final NotImplementedException nie, final String message, final Throwable nested, final String code)","0","-","-","-","-"
"827","testConstructors","@Test
    public void testConstructors()","0","-","-","-","-"
"828","asIntConsumer","protected <T extends Throwable> FailableConsumer<String, T> asIntConsumer(final T pThrowable)","0","-","-","-","-"
"829","asIntPredicate","protected <T extends Throwable> FailablePredicate<Integer, T> asIntPredicate(final T pThrowable)","0","-","-","-","-"
"830","assertEvenNumbers","private void assertEvenNumbers(final List<Integer> output)","0","-","-","-","-"
"831","simpleStreamFilterFailing","@TestFactory
    public Stream<DynamicTest> simpleStreamFilterFailing()","0","-","-","-","-"
"832","simpleStreamForEachFailing","@TestFactory
    public Stream<DynamicTest> simpleStreamForEachFailing()","0","-","-","-","-"
"833","testInstanceOfStream","@Test
    public void testInstanceOfStream()","0","-","-","-","-"
"834","testNonNull","@Test
    public void testNonNull()","0","-","-","-","-"
"835","testNullSafeStreamNotNull","@Test
    public void testNullSafeStreamNotNull()","0","-","-","-","-"
"836","testNullSafeStreamNull","@Test
    public void testNullSafeStreamNull()","0","-","-","-","-"
"837","testOfArray","@Test
    public void testOfArray()","0","-","-","-","-"
"838","testOfCollectionNotNull","@Test
    public void testOfCollectionNotNull()","0","-","-","-","-"
"839","testOfCollectionNull","@Test
    public void testOfCollectionNull()","0","-","-","-","-"
"840","testOfEnumeration","@Test
    public void testOfEnumeration()","0","-","-","-","-"
"841","testOfIterableNotNull","@Test
    public void testOfIterableNotNull()","0","-","-","-","-"
"842","testOfIterableNull","@Test
    public void testOfIterableNull()","0","-","-","-","-"
"843","testOfIteratorNotNull","@Test
    public void testOfIteratorNotNull()","0","-","-","-","-"
"844","testOfIteratorNull","@Test
    public void testOfIteratorNull()","0","-","-","-","-"
"845","testSimpleStreamFilter","@Test
    public void testSimpleStreamFilter()","0","-","-","-","-"
"846","testSimpleStreamForEach","@Test
    public void testSimpleStreamForEach()","0","-","-","-","-"
"847","testSimpleStreamMap","@Test
    public void testSimpleStreamMap()","0","-","-","-","-"
"848","testSimpleStreamMapFailing","@Test
    public void testSimpleStreamMapFailing()","0","-","-","-","-"
"849","testStreamCollection","@Test
    public void testStreamCollection()","0","-","-","-","-"
"850","testStreamCollectionNull","@Test
    public void testStreamCollectionNull()","0","-","-","-","-"
"851","testToArray","@Test
    public void testToArray()","0","-","-","-","-"
"852","Fixture","private Fixture(final int value)","0","-","-","-","-"
"853","toString","@Override
        public String toString()","0","-","-","-","-"
"854","join0","private String join0(final Object... objects)","0","-","-","-","-"
"855","join1","private String join1(final Object... objects)","0","-","-","-","-"
"856","join3","private String join3(final Object... objects)","0","-","-","-","-"
"857","join4","private String join4(final Object... objects)","0","-","-","-","-"
"858","join4NullToString","private String join4NullToString(final Object... objects)","0","-","-","-","-"
"859","testCollectStrings1Arg","@Test
    public void testCollectStrings1Arg()","0","-","-","-","-"
"860","testJoinCollectNonStrings0Arg","@Test
    public void testJoinCollectNonStrings0Arg()","0","-","-","-","-"
"861","testJoinCollectNonStrings1Arg","@Test
    public void testJoinCollectNonStrings1Arg()","0","-","-","-","-"
"862","testJoinCollectNonStrings3Args","@Test
    public void testJoinCollectNonStrings3Args()","0","-","-","-","-"
"863","testJoinCollectNonStrings4Args","@Test
    public void testJoinCollectNonStrings4Args()","0","-","-","-","-"
"864","testJoinCollectNullArgs","@Test
    public void testJoinCollectNullArgs()","0","-","-","-","-"
"865","testJoinCollectStrings0Arg","@Test
    public void testJoinCollectStrings0Arg()","0","-","-","-","-"
"866","testJoinCollectStrings3Args","@Test
    public void testJoinCollectStrings3Args()","0","-","-","-","-"
"867","testJoinCollectStrings4Args","@Test
    public void testJoinCollectStrings4Args()","0","-","-","-","-"
"868","testJoiningNonStrings0Arg","@Test
    public void testJoiningNonStrings0Arg()","0","-","-","-","-"
"869","testJoiningNonStrings1Arg","@Test
    public void testJoiningNonStrings1Arg()","0","-","-","-","-"
"870","testJoiningNonStrings3Args","@Test
    public void testJoiningNonStrings3Args()","0","-","-","-","-"
"871","testJoiningNonStrings4Args","@Test
    public void testJoiningNonStrings4Args()","0","-","-","-","-"
"872","testJoiningStrings0Arg","@Test
    public void testJoiningStrings0Arg()","0","-","-","-","-"
"873","testJoiningStrings1Arg","@Test
    public void testJoiningStrings1Arg()","0","-","-","-","-"
"874","testJoiningStrings3Args","@Test
    public void testJoiningStrings3Args()","0","-","-","-","-"
"875","testJoiningStrings4Args","@Test
    public void testJoiningStrings4Args()","0","-","-","-","-"
"876","failable","private Integer failable(final Map.Entry<String, AtomicInteger> value) throws IOException","0","-","-","-","-"
"877","failable","private String failable(final String value) throws IOException","0","-","-","-","-"
"878","testFailableStreamOfArray","@Test
    public void testFailableStreamOfArray()","0","-","-","-","-"
"879","testFailableStreamOfCollection","@Test
    public void testFailableStreamOfCollection()","0","-","-","-","-"
"880","testFailableStreamOfMap","@Test
    public void testFailableStreamOfMap()","0","-","-","-","-"
"881","toArray","private String[] toArray(final Collection<String> strings)","0","-","-","-","-"
"882","toArray","private String[] toArray(final String string)","0","-","-","-","-"
"883","toArray","private String[] toArray(final String... strings)","0","-","-","-","-"
"884","toArrayMap","private Integer[] toArrayMap(final Map<String, AtomicInteger> map)","0","-","-","-","-"
"885","testOfArray","@Test
    public void testOfArray()","0","-","-","-","-"
"886","testRange","@Test
    public void testRange()","0","-","-","-","-"
"887","testRangeClosed","@Test
    public void testRangeClosed()","0","-","-","-","-"
"888","testBasic","@Test
    public void testBasic()","0","-","-","-","-"
"889","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"890","testRaw","@SuppressWarnings(""rawtypes"")
    @Test
    public void testRaw()","0","-","-","-","-"
"891","testTyped","@Test
    public void testTyped()","0","-","-","-","-"
"892","consume","void consume(T t);","0","-","-","-","-"
"893","consume","@Override
    public void consume(final T t)","0","-","-","-","-"
"894","parentNotAnnotatedMethod","public void parentNotAnnotatedMethod(final T t)","0","-","-","-","-"
"895","parentProtectedAnnotatedMethod","@Annotated
    protected void parentProtectedAnnotatedMethod(final T t)","0","-","-","-","-"
"896","doIt","@Override
    public void doIt()","0","-","-","-","-"
"897","doIt","void doIt();","0","-","-","-","-"
"898","getMutablePackage","public static Object getMutablePackage()","0","-","-","-","-"
"899","getMutablePrivate","public static Object getMutablePrivate()","0","-","-","-","-"
"900","getMutableProtected","public static Object getMutableProtected()","0","-","-","-","-"
"901","reset","public static void reset()","0","-","-","-","-"
"902","doIt","@Annotated
    void doIt();","0","-","-","-","-"
"903","parentNotAnnotatedMethod","@Override
    public void parentNotAnnotatedMethod()","0","-","-","-","-"
"904","parentProtectedAnnotatedMethod","@Override
    public void parentProtectedAnnotatedMethod()","0","-","-","-","-"
"905","privateAnnotatedMethod","@Annotated
    private void privateAnnotatedMethod()","0","-","-","-","-"
"906","publicAnnotatedMethod","@Annotated
    public void publicAnnotatedMethod()","0","-","-","-","-"
"907","doIt","@Override
    public void doIt()","0","-","-","-","-"
"908","parentNotAnnotatedMethod","public void parentNotAnnotatedMethod()","0","-","-","-","-"
"909","parentProtectedAnnotatedMethod","@Annotated
    protected void parentProtectedAnnotatedMethod()","0","-","-","-","-"
"910","consume","@Override
    public void consume(final String t)","0","-","-","-","-"
"911","parentNotAnnotatedMethod","@Override
    public void parentNotAnnotatedMethod(final String t)","0","-","-","-","-"
"912","parentProtectedAnnotatedMethod","@Override
    public void parentProtectedAnnotatedMethod(final String t)","0","-","-","-","-"
"913","privateAnnotatedMethod","@Annotated
    private void privateAnnotatedMethod(final String t)","0","-","-","-","-"
"914","publicAnnotatedMethod","@Annotated
    public void publicAnnotatedMethod(final String t)","0","-","-","-","-"
"915","testMethod5","public abstract void testMethod5(Exception exception);","0","-","-","-","-"
"916","testMethod","public void testMethod()","0","-","-","-","-"
"917","testMethod","public void testMethod(final long aLong)","0","-","-","-","-"
"918","testMethod","public void testMethod(final Long aLong)","0","-","-","-","-"
"919","testMethod2","public void testMethod2(final Color aColor)","0","-","-","-","-"
"920","testMethod2","public void testMethod2(final long aLong)","0","-","-","-","-"
"921","testMethod2","public void testMethod2(final Long aLong)","0","-","-","-","-"
"922","testMethod3","public void testMethod3(final long aLong, final Long anotherLong)","0","-","-","-","-"
"923","testMethod3","public void testMethod3(final Long aLong, final long anotherLong)","0","-","-","-","-"
"924","testMethod3","public void testMethod3(final Long aLong, final Long anotherLong)","0","-","-","-","-"
"925","testMethod4","public void testMethod4(final Color aColor1, final Color aColor2)","0","-","-","-","-"
"926","testMethod4","public void testMethod4(final Long aLong, final Long anotherLong)","0","-","-","-","-"
"927","testMethod5","@Override
        public void testMethod5(final Exception exception)","0","-","-","-","-"
"928","testOne","public void testOne(final GrandParentObject obj)","0","-","-","-","-"
"929","testOne","public void testOne(final Object obj)","0","-","-","-","-"
"930","testOne","public void testOne(final ParentObject obj)","0","-","-","-","-"
"931","testTwo","public void testTwo(final ChildInterface obj)","0","-","-","-","-"
"932","testTwo","public void testTwo(final GrandParentObject obj)","0","-","-","-","-"
"933","testTwo","public void testTwo(final Object obj)","0","-","-","-","-"
"934","testMethod6","default void testMethod6()","0","-","-","-","-"
"935","MethodDescriptor","MethodDescriptor(final Class<?> declaringClass, final String name, final Type... parameterTypes)","0","-","-","-","-"
"936","bar","public static String bar()","0","-","-","-","-"
"937","bar","public static String bar(final double d)","0","-","-","-","-"
"938","bar","public static String bar(final int i)","0","-","-","-","-"
"939","bar","public static String bar(final Integer i)","0","-","-","-","-"
"940","bar","public static String bar(final Integer i, final String... s)","0","-","-","-","-"
"941","bar","public static String bar(final long... s)","0","-","-","-","-"
"942","bar","public static String bar(final Object o)","0","-","-","-","-"
"943","bar","public static String bar(final String s)","0","-","-","-","-"
"944","bar","public static String bar(final String... s)","0","-","-","-","-"
"945","numOverload","public static String numOverload(final Byte... args)","0","-","-","-","-"
"946","numOverload","public static String numOverload(final Double... args)","0","-","-","-","-"
"947","numOverload","public static String numOverload(final Float... args)","0","-","-","-","-"
"948","numOverload","public static String numOverload(final Integer... args)","0","-","-","-","-"
"949","numOverload","public static String numOverload(final Long... args)","0","-","-","-","-"
"950","numOverload","public static String numOverload(final Number... args)","0","-","-","-","-"
"951","numOverload","public static String numOverload(final Short... args)","0","-","-","-","-"
"952","oneParameterStatic","public static void oneParameterStatic(final String s)","0","-","-","-","-"
"953","varOverload","public static String varOverload(final Boolean... args)","0","-","-","-","-"
"954","varOverload","public static String varOverload(final Byte... args)","0","-","-","-","-"
"955","varOverload","public static String varOverload(final Character... args)","0","-","-","-","-"
"956","varOverload","public static String varOverload(final Double... args)","0","-","-","-","-"
"957","varOverload","public static String varOverload(final Float... args)","0","-","-","-","-"
"958","varOverload","public static String varOverload(final Integer... args)","0","-","-","-","-"
"959","varOverload","public static String varOverload(final Long... args)","0","-","-","-","-"
"960","varOverload","public static String varOverload(final Number... args)","0","-","-","-","-"
"961","varOverload","public static String varOverload(final Object... args)","0","-","-","-","-"
"962","varOverload","public static String varOverload(final Short... args)","0","-","-","-","-"
"963","varOverload","public static String varOverload(final String... args)","0","-","-","-","-"
"964","varOverloadEchoStatic","public static ImmutablePair<String, Object[]> varOverloadEchoStatic(final Number... args)","0","-","-","-","-"
"965","varOverloadEchoStatic","public static ImmutablePair<String, Object[]> varOverloadEchoStatic(final String... args)","0","-","-","-","-"
"966","verify","static void verify(final ImmutablePair<String, Object[]> a, final ImmutablePair<String, Object[]> b)","0","-","-","-","-"
"967","verify","static void verify(final ImmutablePair<String, Object[]> a, final Object obj)","0","-","-","-","-"
"968","foo","public String foo()","0","-","-","-","-"
"969","foo","public String foo(final double d)","0","-","-","-","-"
"970","foo","public String foo(final int i)","0","-","-","-","-"
"971","foo","public String foo(final Integer i)","0","-","-","-","-"
"972","foo","public String foo(final Integer i, final String... s)","0","-","-","-","-"
"973","foo","public String foo(final long l)","0","-","-","-","-"
"974","foo","public String foo(final long... l)","0","-","-","-","-"
"975","foo","public String foo(final Object o)","0","-","-","-","-"
"976","foo","public String foo(final Object... s)","0","-","-","-","-"
"977","foo","public String foo(final String s)","0","-","-","-","-"
"978","foo","public String foo(final String... s)","0","-","-","-","-"
"979","oneParameter","public void oneParameter(final String s)","0","-","-","-","-"
"980","privateStringStuff","@SuppressWarnings(""unused"")
        private String privateStringStuff()","0","-","-","-","-"
"981","privateStringStuff","@SuppressWarnings(""unused"")
        private String privateStringStuff(final double d)","0","-","-","-","-"
"982","privateStringStuff","@SuppressWarnings(""unused"")
        private String privateStringStuff(final int i)","0","-","-","-","-"
"983","privateStringStuff","@SuppressWarnings(""unused"")
        private String privateStringStuff(final Integer i)","0","-","-","-","-"
"984","privateStringStuff","@SuppressWarnings(""unused"")
        private String privateStringStuff(final Object s)","0","-","-","-","-"
"985","privateStringStuff","@SuppressWarnings(""unused"")
        private String privateStringStuff(final String s)","0","-","-","-","-"
"986","privateStuff","@SuppressWarnings(""unused"")
        private void privateStuff()","0","-","-","-","-"
"987","unboxing","public int[] unboxing(final int... values)","0","-","-","-","-"
"988","varOverloadEcho","public ImmutablePair<String, Object[]> varOverloadEcho(final Number... args)","0","-","-","-","-"
"989","varOverloadEcho","public ImmutablePair<String, Object[]> varOverloadEcho(final String... args)","0","-","-","-","-"
"990","foo","public String foo()","0","-","-","-","-"
"991","getValue","@Override
        public Object getValue()","0","-","-","-","-"
"992","setValue","@Override
        public void setValue(final Object value)","0","-","-","-","-"
"993","expectMatchingAccessibleMethodParameterTypes","private void expectMatchingAccessibleMethodParameterTypes(final Class<?> cls,
                                                              final String methodName, final Class<?>[] requestTypes, final Class<?>[] actualTypes)","0","-","-","-","-"
"994","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"995","singletonArray","private Class<?>[] singletonArray(final Class<?> c)","0","-","-","-","-"
"996","testConstructor","@Test
    public void testConstructor() throws Exception","0","-","-","-","-"
"997","testDistance","@Test
    public void testDistance() throws Exception","0","-","-","-","-"
"998","testGetAccessibleInterfaceMethod","@Test
    public void testGetAccessibleInterfaceMethod() throws Exception","0","-","-","-","-"
"999","testGetAccessibleInterfaceMethodFromDescription","@Test
    public void testGetAccessibleInterfaceMethodFromDescription()","0","-","-","-","-"
"1000","testGetAccessibleMethodInaccessible","@Test
    public void testGetAccessibleMethodInaccessible() throws Exception","0","-","-","-","-"
"1001","testGetAccessibleMethodPrivateInterface","@Test
    public void testGetAccessibleMethodPrivateInterface() throws Exception","0","-","-","-","-"
"1002","testGetAccessiblePublicMethod","@Test
    public void testGetAccessiblePublicMethod() throws Exception","0","-","-","-","-"
"1003","testGetAccessiblePublicMethodFromDescription","@Test
    public void testGetAccessiblePublicMethodFromDescription()","0","-","-","-","-"
"1004","testGetAnnotationIllegalArgumentException1","@Test
    public void testGetAnnotationIllegalArgumentException1()","0","-","-","-","-"
"1005","testGetAnnotationIllegalArgumentException2","@Test
    public void testGetAnnotationIllegalArgumentException2()","0","-","-","-","-"
"1006","testGetAnnotationIllegalArgumentException3","@Test
    public void testGetAnnotationIllegalArgumentException3()","0","-","-","-","-"
"1007","testGetAnnotationNotSearchSupersAndNotIgnoreAccess","@Test
    public void testGetAnnotationNotSearchSupersAndNotIgnoreAccess() throws NoSuchMethodException","0","-","-","-","-"
"1008","testGetAnnotationNotSearchSupersButIgnoreAccess","@Test
    public void testGetAnnotationNotSearchSupersButIgnoreAccess() throws NoSuchMethodException","0","-","-","-","-"
"1009","testGetAnnotationSearchSupersAndIgnoreAccess","@Test
    public void testGetAnnotationSearchSupersAndIgnoreAccess() throws NoSuchMethodException","0","-","-","-","-"
"1010","testGetAnnotationSearchSupersButNotIgnoreAccess","@Test
    public void testGetAnnotationSearchSupersButNotIgnoreAccess() throws NoSuchMethodException","0","-","-","-","-"
"1011","testGetMatchingAccessibleMethod","@Test
    public void testGetMatchingAccessibleMethod()","0","-","-","-","-"
"1012","testGetMatchingMethod","@Test
    public void testGetMatchingMethod() throws NoSuchMethodException","0","-","-","-","-"
"1013","testGetMethodObject","@Test
    public void testGetMethodObject() throws Exception","0","-","-","-","-"
"1014","testGetMethodsListWithAnnotation","@Test
    @Annotated
    public void testGetMethodsListWithAnnotation() throws NoSuchMethodException","0","-","-","-","-"
"1015","testGetMethodsListWithAnnotationNullPointerException1","@Test
    public void testGetMethodsListWithAnnotationNullPointerException1()","0","-","-","-","-"
"1016","testGetMethodsListWithAnnotationNullPointerException2","@Test
    public void testGetMethodsListWithAnnotationNullPointerException2()","0","-","-","-","-"
"1017","testGetMethodsListWithAnnotationNullPointerException3","@Test
    public void testGetMethodsListWithAnnotationNullPointerException3()","0","-","-","-","-"
"1018","testGetMethodsWithAnnotation","@Test
    @Annotated
    public void testGetMethodsWithAnnotation() throws NoSuchMethodException","0","-","-","-","-"
"1019","testGetMethodsWithAnnotationIllegalArgumentException1","@Test
    public void testGetMethodsWithAnnotationIllegalArgumentException1()","0","-","-","-","-"
"1020","testGetMethodsWithAnnotationIllegalArgumentException2","@Test
    public void testGetMethodsWithAnnotationIllegalArgumentException2()","0","-","-","-","-"
"1021","testGetMethodsWithAnnotationIllegalArgumentException3","@Test
    public void testGetMethodsWithAnnotationIllegalArgumentException3()","0","-","-","-","-"
"1022","testGetMethodsWithAnnotationNotSearchSupersAndNotIgnoreAccess","@Test
    public void testGetMethodsWithAnnotationNotSearchSupersAndNotIgnoreAccess()","0","-","-","-","-"
"1023","testGetMethodsWithAnnotationNotSearchSupersButIgnoreAccess","@Test
    public void testGetMethodsWithAnnotationNotSearchSupersButIgnoreAccess()","0","-","-","-","-"
"1024","testGetMethodsWithAnnotationSearchSupersAndIgnoreAccess","@Test
    public void testGetMethodsWithAnnotationSearchSupersAndIgnoreAccess()","0","-","-","-","-"
"1025","testGetMethodsWithAnnotationSearchSupersButNotIgnoreAccess","@Test
    public void testGetMethodsWithAnnotationSearchSupersButNotIgnoreAccess()","0","-","-","-","-"
"1026","testGetOverrideHierarchyExcludingInterfaces","@Test
    public void testGetOverrideHierarchyExcludingInterfaces()","0","-","-","-","-"
"1027","testGetOverrideHierarchyIncludingInterfaces","@Test
    public void testGetOverrideHierarchyIncludingInterfaces()","0","-","-","-","-"
"1028","testInvokeExactMethod","@Test
    public void testInvokeExactMethod() throws Exception","0","-","-","-","-"
"1029","testInvokeExactStaticMethod","@Test
    public void testInvokeExactStaticMethod() throws Exception","0","-","-","-","-"
"1030","testInvokeJavaVarargsOverloadingResolution","@Test
    public void testInvokeJavaVarargsOverloadingResolution() throws Exception","0","-","-","-","-"
"1031","testInvokeMethod","@Test
    public void testInvokeMethod() throws Exception","0","-","-","-","-"
"1032","testInvokeMethod_VarArgsNotUniqueResolvable","@Test
    public void testInvokeMethod_VarArgsNotUniqueResolvable() throws Exception","0","-","-","-","-"
"1033","testInvokeMethod_VarArgsWithNullValues","@Test
    public void testInvokeMethod_VarArgsWithNullValues() throws Exception","0","-","-","-","-"
"1034","testInvokeMethodForceAccessNoArgs","@Test
    public void testInvokeMethodForceAccessNoArgs() throws Exception","0","-","-","-","-"
"1035","testInvokeMethodForceAccessWithArgs","@Test
    public void testInvokeMethodForceAccessWithArgs() throws Exception","0","-","-","-","-"
"1036","testInvokeStaticMethod","@Test
    public void testInvokeStaticMethod() throws Exception","0","-","-","-","-"
"1037","testNullArgument","@Test
    public void testNullArgument()","0","-","-","-","-"
"1038","testVarArgsUnboxing","@Test
    public void testVarArgsUnboxing() throws Exception","0","-","-","-","-"
"1039","toString","private String toString(final Class<?>[] c)","0","-","-","-","-"
"1040","verifyJavaVarargsOverloadingResolution","@Test
    public void verifyJavaVarargsOverloadingResolution()","0","-","-","-","-"
"1041","PublicInnerClass","public PublicInnerClass()","0","-","-","-","-"
"1042","PrivateClass","@SuppressWarnings(""unused"")
        public PrivateClass()","0","-","-","-","-"
"1043","TestBean","public TestBean()","0","-","-","-","-"
"1044","TestBean","public TestBean(final BaseClass bc, final String... s)","0","-","-","-","-"
"1045","TestBean","public TestBean(final double d)","0","-","-","-","-"
"1046","TestBean","public TestBean(final int i)","0","-","-","-","-"
"1047","TestBean","public TestBean(final Integer i)","0","-","-","-","-"
"1048","TestBean","public TestBean(final Integer first, final int... args)","0","-","-","-","-"
"1049","TestBean","public TestBean(final Integer i, final String... s)","0","-","-","-","-"
"1050","TestBean","public TestBean(final Object o)","0","-","-","-","-"
"1051","TestBean","public TestBean(final String s)","0","-","-","-","-"
"1052","TestBean","public TestBean(final String... s)","0","-","-","-","-"
"1053","toString","@Override
        public String toString()","0","-","-","-","-"
"1054","verify","void verify(final String str, final String[] args)","0","-","-","-","-"
"1055","ConstructorUtilsTest","public ConstructorUtilsTest()","0","-","-","-","-"
"1056","expectMatchingAccessibleConstructorParameterTypes","private void expectMatchingAccessibleConstructorParameterTypes(final Class<?> cls, final Class<?>[] requestTypes, final Class<?>[] actualTypes)","0","-","-","-","-"
"1057","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"1058","singletonArray","private Class<?>[] singletonArray(final Class<?> c)","0","-","-","-","-"
"1059","testConstructor","@Test
    public void testConstructor() throws Exception","0","-","-","-","-"
"1060","testGetAccessibleConstructor","@Test
    public void testGetAccessibleConstructor() throws Exception","0","-","-","-","-"
"1061","testGetAccessibleConstructorFromDescription","@Test
    public void testGetAccessibleConstructorFromDescription()","0","-","-","-","-"
"1062","testGetMatchingAccessibleMethod","@Test
    public void testGetMatchingAccessibleMethod()","0","-","-","-","-"
"1063","testInvokeConstructor","@Test
    public void testInvokeConstructor() throws Exception","0","-","-","-","-"
"1064","testInvokeExactConstructor","@Test
    public void testInvokeExactConstructor() throws Exception","0","-","-","-","-"
"1065","testNullArgument","@Test
    public void testNullArgument()","0","-","-","-","-"
"1066","testVarArgsUnboxing","@Test
    public void testVarArgsUnboxing() throws Exception","0","-","-","-","-"
"1067","toString","private String toString(final Class<?>[] c)","0","-","-","-","-"
"1068","testConstructor","@Test
    public void testConstructor() throws Exception","0","-","-","-","-"
"1069","testDistanceDisjoint","@Test
    public void testDistanceDisjoint()","0","-","-","-","-"
"1070","testDistanceEqual","@Test
    public void testDistanceEqual()","0","-","-","-","-"
"1071","testDistanceEqualObject","@Test
    public void testDistanceEqualObject()","0","-","-","-","-"
"1072","testDistanceGreaterThanZero","@Test
    public void testDistanceGreaterThanZero()","0","-","-","-","-"
"1073","testDistanceNullChild","@Test
    public void testDistanceNullChild()","0","-","-","-","-"
"1074","testDistanceNullParent","@Test
    public void testDistanceNullParent()","0","-","-","-","-"
"1075","testDistanceNullParentNullChild","@Test
    public void testDistanceNullParentNullChild()","0","-","-","-","-"
"1076","testDistanceReverseParentChild","@Test
    public void testDistanceReverseParentChild()","0","-","-","-","-"
"1077","testStackOverflowError","@Test
    public void testStackOverflowError()","0","-","-","-","-"
"1078","callRemoveFinalModifierCheckForException","/**
     * Read the","0","-","-","-","-"
"1079","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"1080","sort","private Field[] sort(final Field[] fields)","0","-","-","-","-"
"1081","testAmbig","@Test
    public void testAmbig()","0","-","-","-","-"
"1082","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"1083","testGetAllFieldListsNullPointerException","@Test
    public void testGetAllFieldListsNullPointerException()","0","-","-","-","-"
"1084","testGetAllFields","@Test
    public void testGetAllFields()","0","-","-","-","-"
"1085","testGetAllFieldsList","@Test
    public void testGetAllFieldsList()","0","-","-","-","-"
"1086","testGetAllFieldsNullPointerException","@Test
    public void testGetAllFieldsNullPointerException()","0","-","-","-","-"
"1087","testGetDeclaredField","@Test
    public void testGetDeclaredField()","0","-","-","-","-"
"1088","testGetDeclaredFieldAccessIllegalArgumentException1","@Test
    public void testGetDeclaredFieldAccessIllegalArgumentException1()","0","-","-","-","-"
"1089","testGetDeclaredFieldAccessIllegalArgumentException2","@Test
    public void testGetDeclaredFieldAccessIllegalArgumentException2()","0","-","-","-","-"
"1090","testGetDeclaredFieldAccessIllegalArgumentException3","@Test
    public void testGetDeclaredFieldAccessIllegalArgumentException3()","0","-","-","-","-"
"1091","testGetDeclaredFieldAccessNullPointerException","@Test
    public void testGetDeclaredFieldAccessNullPointerException()","0","-","-","-","-"
"1092","testGetDeclaredFieldForceAccess","@Test
    public void testGetDeclaredFieldForceAccess()","0","-","-","-","-"
"1093","testGetDeclaredFieldForceAccessIllegalArgumentException1","@Test
    public void testGetDeclaredFieldForceAccessIllegalArgumentException1()","0","-","-","-","-"
"1094","testGetDeclaredFieldForceAccessIllegalArgumentException2","@Test
    public void testGetDeclaredFieldForceAccessIllegalArgumentException2()","0","-","-","-","-"
"1095","testGetDeclaredFieldForceAccessIllegalArgumentException3","@Test
    public void testGetDeclaredFieldForceAccessIllegalArgumentException3()","0","-","-","-","-"
"1096","testGetDeclaredFieldForceAccessNullPointerException","@Test
    public void testGetDeclaredFieldForceAccessNullPointerException()","0","-","-","-","-"
"1097","testGetField","@Test
    public void testGetField()","0","-","-","-","-"
"1098","testGetFieldForceAccess","@Test
    public void testGetFieldForceAccess()","0","-","-","-","-"
"1099","testGetFieldForceAccessIllegalArgumentException1","@Test
    public void testGetFieldForceAccessIllegalArgumentException1()","0","-","-","-","-"
"1100","testGetFieldForceAccessIllegalArgumentException2","@Test
    public void testGetFieldForceAccessIllegalArgumentException2()","0","-","-","-","-"
"1101","testGetFieldForceAccessIllegalArgumentException3","@Test
    public void testGetFieldForceAccessIllegalArgumentException3()","0","-","-","-","-"
"1102","testGetFieldForceAccessNullPointerException","@Test
    public void testGetFieldForceAccessNullPointerException()","0","-","-","-","-"
"1103","testGetFieldIllegalArgumentException1","@Test
    public void testGetFieldIllegalArgumentException1()","0","-","-","-","-"
"1104","testGetFieldIllegalArgumentException2","@Test
    public void testGetFieldIllegalArgumentException2()","0","-","-","-","-"
"1105","testGetFieldIllegalArgumentException3","@Test
    public void testGetFieldIllegalArgumentException3()","0","-","-","-","-"
"1106","testGetFieldNullPointerException","@Test
    public void testGetFieldNullPointerException()","0","-","-","-","-"
"1107","testGetFieldsListWithAnnotation","@Test
    public void testGetFieldsListWithAnnotation() throws NoSuchFieldException","0","-","-","-","-"
"1108","testGetFieldsListWithAnnotationNullPointerException","@Test
    public void testGetFieldsListWithAnnotationNullPointerException()","0","-","-","-","-"
"1109","testGetFieldsListWithAnnotationNullPointerException2","@Test
    public void testGetFieldsListWithAnnotationNullPointerException2()","0","-","-","-","-"
"1110","testGetFieldsListWithAnnotationNullPointerException3","@Test
    public void testGetFieldsListWithAnnotationNullPointerException3()","0","-","-","-","-"
"1111","testGetFieldsWithAnnotation","@Test
    public void testGetFieldsWithAnnotation() throws NoSuchFieldException","0","-","-","-","-"
"1112","testGetFieldsWithAnnotationNullPointerException1","@Test
    public void testGetFieldsWithAnnotationNullPointerException1()","0","-","-","-","-"
"1113","testGetFieldsWithAnnotationNullPointerException2","@Test
    public void testGetFieldsWithAnnotationNullPointerException2()","0","-","-","-","-"
"1114","testGetFieldsWithAnnotationNullPointerException3","@Test
    public void testGetFieldsWithAnnotationNullPointerException3()","0","-","-","-","-"
"1115","testReadDeclaredNamedField","@Test
    public void testReadDeclaredNamedField() throws Exception","0","-","-","-","-"
"1116","testReadDeclaredNamedFieldForceAccess","@Test
    public void testReadDeclaredNamedFieldForceAccess() throws Exception","0","-","-","-","-"
"1117","testReadDeclaredNamedStaticField","@Test
    public void testReadDeclaredNamedStaticField() throws Exception","0","-","-","-","-"
"1118","testReadDeclaredNamedStaticFieldForceAccess","@Test
    public void testReadDeclaredNamedStaticFieldForceAccess() throws Exception","0","-","-","-","-"
"1119","testReadField","@Test
    public void testReadField() throws Exception","0","-","-","-","-"
"1120","testReadFieldForceAccess","@Test
    public void testReadFieldForceAccess() throws Exception","0","-","-","-","-"
"1121","testReadNamedField","@Test
    public void testReadNamedField() throws Exception","0","-","-","-","-"
"1122","testReadNamedFieldForceAccess","@Test
    public void testReadNamedFieldForceAccess() throws Exception","0","-","-","-","-"
"1123","testReadNamedStaticField","@Test
    public void testReadNamedStaticField() throws Exception","0","-","-","-","-"
"1124","testReadNamedStaticFieldForceAccess","@Test
    public void testReadNamedStaticFieldForceAccess() throws Exception","0","-","-","-","-"
"1125","testReadStaticField","@Test
    public void testReadStaticField() throws Exception","0","-","-","-","-"
"1126","testReadStaticFieldForceAccess","@Test
    public void testReadStaticFieldForceAccess() throws Exception","0","-","-","-","-"
"1127","testReadStaticFieldForceAccessIllegalArgumentException","@Test
    public void testReadStaticFieldForceAccessIllegalArgumentException()","0","-","-","-","-"
"1128","testReadStaticFieldForceAccessNullPointerException","@Test
    public void testReadStaticFieldForceAccessNullPointerException()","0","-","-","-","-"
"1129","testReadStaticFieldIllegalArgumentException","@Test
    public void testReadStaticFieldIllegalArgumentException() throws Exception","0","-","-","-","-"
"1130","testReadStaticFieldNullPointerException","@Test
    public void testReadStaticFieldNullPointerException()","0","-","-","-","-"
"1131","testRemoveFinalModifier","@Test
    public void testRemoveFinalModifier() throws Exception","0","-","-","-","-"
"1132","testRemoveFinalModifierAccessNotNeeded","@Test
    public void testRemoveFinalModifierAccessNotNeeded() throws Exception","0","-","-","-","-"
"1133","testRemoveFinalModifierNullPointerException","@Test
    public void testRemoveFinalModifierNullPointerException()","0","-","-","-","-"
"1134","testRemoveFinalModifierWithAccess","@Test
    public void testRemoveFinalModifierWithAccess() throws Exception","0","-","-","-","-"
"1135","testRemoveFinalModifierWithAccessNullPointerException","@Test
    public void testRemoveFinalModifierWithAccessNullPointerException()","0","-","-","-","-"
"1136","testRemoveFinalModifierWithoutAccess","@Test
    public void testRemoveFinalModifierWithoutAccess() throws Exception","0","-","-","-","-"
"1137","testWriteDeclaredNamedField","@Test
    public void testWriteDeclaredNamedField() throws Exception","0","-","-","-","-"
"1138","testWriteDeclaredNamedFieldForceAccess","@Test
    public void testWriteDeclaredNamedFieldForceAccess() throws Exception","0","-","-","-","-"
"1139","testWriteDeclaredNamedStaticField","@Test
    public void testWriteDeclaredNamedStaticField() throws Exception","0","-","-","-","-"
"1140","testWriteDeclaredNamedStaticFieldForceAccess","@Test
    public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception","0","-","-","-","-"
"1141","testWriteField","@Test
    public void testWriteField() throws Exception","0","-","-","-","-"
"1142","testWriteFieldForceAccess","@Test
    public void testWriteFieldForceAccess() throws Exception","0","-","-","-","-"
"1143","testWriteNamedField","@Test
    public void testWriteNamedField() throws Exception","0","-","-","-","-"
"1144","testWriteNamedFieldForceAccess","@Test
    public void testWriteNamedFieldForceAccess() throws Exception","0","-","-","-","-"
"1145","testWriteNamedStaticField","@Test
    public void testWriteNamedStaticField() throws Exception","0","-","-","-","-"
"1146","testWriteNamedStaticFieldForceAccess","@Test
    public void testWriteNamedStaticFieldForceAccess() throws Exception","0","-","-","-","-"
"1147","testWriteStaticField","@Test
    public void testWriteStaticField() throws Exception","0","-","-","-","-"
"1148","testWriteStaticFieldForceAccess","@Test
    public void testWriteStaticFieldForceAccess() throws Exception","0","-","-","-","-"
"1149","AClass","AClass(final AAClass<String> enclosingInstance)","0","-","-","-","-"
"1150","m0","public abstract Object m0();","0","-","-","-","-"
"1151","m1","public abstract String[] m1();","0","-","-","-","-"
"1152","m10","public abstract <K, V> Map<? extends K, V[]> m10();","0","-","-","-","-"
"1153","m11","public abstract <K, V> Map<? extends K, List<V[]>> m11();","0","-","-","-","-"
"1154","m12","public abstract List m12();","0","-","-","-","-"
"1155","m13","public abstract Map m13();","0","-","-","-","-"
"1156","m14","public abstract Properties m14();","0","-","-","-","-"
"1157","m15","public abstract G m15();","0","-","-","-","-"
"1158","m16","public abstract List<G> m16();","0","-","-","-","-"
"1159","m17","public abstract Enum m17();","0","-","-","-","-"
"1160","m2","public abstract <E> E[] m2();","0","-","-","-","-"
"1161","m3","public abstract <E> List<? extends E> m3();","0","-","-","-","-"
"1162","m4","public abstract <E extends Enum<E>> List<? extends Enum<E>> m4();","0","-","-","-","-"
"1163","m5","public abstract List<? extends Enum<?>> m5();","0","-","-","-","-"
"1164","m6","public abstract List<? super Enum<?>> m6();","0","-","-","-","-"
"1165","m7","public abstract List<?> m7();","0","-","-","-","-"
"1166","m8","public abstract Map<? extends Enum<?>, ? super Enum<?>> m8();","0","-","-","-","-"
"1167","m9","public abstract <K, V> Map<? extends K, ? super V[]> m9();","0","-","-","-","-"
"1168","methodWithGenericReturnType","public static <U> Iterable<U> methodWithGenericReturnType()","0","-","-","-","-"
"1169","stub","public static <G extends Comparable<G>> G stub()","0","-","-","-","-"
"1170","stub2","public static <G extends Comparable<? super G>> G stub2()","0","-","-","-","-"
"1171","stub3","public static <T extends Comparable<? extends T>> T stub3()","0","-","-","-","-"
"1172","testTypeToString","static Stream<Type> testTypeToString()","0","-","-","-","-"
"1173","aMethod","/** The inner class is used as a return type from a method. */
    private <U> MyInnerClass<U> aMethod()","0","-","-","-","-"
"1174","test_LANG_1114","@Test
    public void test_LANG_1114() throws NoSuchFieldException","0","-","-","-","-"
"1175","test_LANG_1190","@Test
    public void test_LANG_1190() throws NoSuchMethodException","0","-","-","-","-"
"1176","test_LANG_1348","@Test
    public void test_LANG_1348() throws NoSuchMethodException","0","-","-","-","-"
"1177","test_LANG_1524","@Test
    public void test_LANG_1524()","0","-","-","-","-"
"1178","test_LANG_1698","/**
     * Tests https://issues.apache.org/jira/projects/LANG/issues/LANG-1698
     *
     * <pre>","0","-","-","-","-"
"1179","test_LANG_1702","@Test
    public void test_LANG_1702() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1180","test_LANG_820","@Test
    public void test_LANG_820()","0","-","-","-","-"
"1181","testContainsTypeVariables","@Test
    public void testContainsTypeVariables() throws NoSuchMethodException","0","-","-","-","-"
"1182","testContainsTypeVariablesPr437","@Test
    public void testContainsTypeVariablesPr437() throws Exception","0","-","-","-","-"
"1183","m0","public abstract Object m0();","0","-","-","-","-"
"1184","m1","public abstract String[] m1();","0","-","-","-","-"
"1185","m10","public abstract <K, V> Map<? extends K, V[]> m10();","0","-","-","-","-"
"1186","m11","public abstract <K, V> Map<? extends K, List<V[]>> m11();","0","-","-","-","-"
"1187","m12","public abstract List m12();","0","-","-","-","-"
"1188","m13","public abstract Map m13();","0","-","-","-","-"
"1189","m14","public abstract Properties m14();","0","-","-","-","-"
"1190","m15","public abstract G m15();","0","-","-","-","-"
"1191","m16","public abstract List<G> m16();","0","-","-","-","-"
"1192","m17","public abstract Enum m17();","0","-","-","-","-"
"1193","m2","public abstract <E> E[] m2();","0","-","-","-","-"
"1194","m3","public abstract <E> List<? extends E> m3();","0","-","-","-","-"
"1195","m4","public abstract <E extends Enum<E>> List<? extends Enum<E>> m4();","0","-","-","-","-"
"1196","m5","public abstract List<? extends Enum<?>> m5();","0","-","-","-","-"
"1197","m6","public abstract List<? super Enum<?>> m6();","0","-","-","-","-"
"1198","m7","public abstract List<?> m7();","0","-","-","-","-"
"1199","m8","public abstract Map<? extends Enum<?>, ? super Enum<?>> m8();","0","-","-","-","-"
"1200","m9","public abstract <K, V> Map<? extends K, ? super V[]> m9();","0","-","-","-","-"
"1201","testDetermineTypeVariableAssignments","@Test
    public void testDetermineTypeVariableAssignments() throws NoSuchFieldException","0","-","-","-","-"
"1202","testGenericArrayType","@Test
    public void testGenericArrayType() throws NoSuchFieldException","0","-","-","-","-"
"1203","testGetArrayComponentType","@Test
    public void testGetArrayComponentType() throws NoSuchFieldException","0","-","-","-","-"
"1204","testGetPrimitiveArrayComponentType","@Test
    public void testGetPrimitiveArrayComponentType()","0","-","-","-","-"
"1205","testGetRawType","@Test
    public void testGetRawType() throws NoSuchFieldException","0","-","-","-","-"
"1206","testGetRawType_LANG_1697","/**
     * Tests https://issues.apache.org/jira/browse/LANG-1697
     */
    @Test
    public void testGetRawType_LANG_1697()","0","-","-","-","-"
"1207","testGetTypeArguments","@Test
    public void testGetTypeArguments()","0","-","-","-","-"
"1208","testIsArrayGenericTypes","@Test
    public void testIsArrayGenericTypes() throws NoSuchFieldException","0","-","-","-","-"
"1209","testIsArrayTypeClasses","@Test
    public void testIsArrayTypeClasses()","0","-","-","-","-"
"1210","testIsAssignableClasses","@Test
    public void testIsAssignableClasses()","0","-","-","-","-"
"1211","testIsAssignableDirectClassHierarchy","@Test
    public void testIsAssignableDirectClassHierarchy() throws NoSuchFieldException","0","-","-","-","-"
"1212","testIsAssignableGenericArrayTypeToObject","@Test
    public void testIsAssignableGenericArrayTypeToObject()","0","-","-","-","-"
"1213","testIsAssignableGenericArrayTypeToParameterizedType","@Test
    public void testIsAssignableGenericArrayTypeToParameterizedType()","0","-","-","-","-"
"1214","testIsAssignableGenericArrayTypeToWildcardType","@Test
    @Disabled(""TODO"")
    public void testIsAssignableGenericArrayTypeToWildcardType()","0","-","-","-","-"
"1215","testIsAssignableGenericClassHierarchy","@Test
    public void testIsAssignableGenericClassHierarchy() throws NoSuchFieldException","0","-","-","-","-"
"1216","testIsAssignableGenericComparableTypes","@Test
    public void testIsAssignableGenericComparableTypes() throws NoSuchFieldException","0","-","-","-","-"
"1217","testIsAssignableGenericListArrays","@Test
    public void testIsAssignableGenericListArrays() throws NoSuchFieldException","0","-","-","-","-"
"1218","testIsAssignableGenericListTypes","@Test
    public void testIsAssignableGenericListTypes() throws NoSuchFieldException","0","-","-","-","-"
"1219","testIsInstance","@SuppressWarnings(""boxing"") // boxing is deliberate here
    @Test
    public void testIsInstance() throws NoSuchFieldException","0","-","-","-","-"
"1220","testLowerBoundedWildcardType","@Test
    public void testLowerBoundedWildcardType()","0","-","-","-","-"
"1221","testParameterize","@Test
    public void testParameterize() throws NoSuchFieldException","0","-","-","-","-"
"1222","testParameterizeNarrowerTypeArray","@Test
    public void testParameterizeNarrowerTypeArray()","0","-","-","-","-"
"1223","testParameterizeNullPointerException","@Test
    public void testParameterizeNullPointerException()","0","-","-","-","-"
"1224","testParameterizeVarArgsNullPointerException","@Test
    public void testParameterizeVarArgsNullPointerException()","0","-","-","-","-"
"1225","testParameterizeWithOwner","@Test
    public void testParameterizeWithOwner() throws NoSuchFieldException","0","-","-","-","-"
"1226","testParameterizeWithOwner3ArgsNullPointerException","@Test
    public void testParameterizeWithOwner3ArgsNullPointerException()","0","-","-","-","-"
"1227","testParameterizeWithOwnerVarArgsNullPointerException","@Test
    public void testParameterizeWithOwnerVarArgsNullPointerException()","0","-","-","-","-"
"1228","testToLongString","@Test
    public void testToLongString()","0","-","-","-","-"
"1229","testToString_LANG_1311","@Test
    public void testToString_LANG_1311()","0","-","-","-","-"
"1230","testTypesSatisfyVariables","@Test
    public void testTypesSatisfyVariables() throws NoSuchMethodException","0","-","-","-","-"
"1231","testTypeToString","@ParameterizedTest
    @MethodSource
    public void testTypeToString(Type type)","0","-","-","-","-"
"1232","testUnboundedWildcardType","@Test
    public void testUnboundedWildcardType()","0","-","-","-","-"
"1233","testWildcardType","@Test
    public void testWildcardType() throws NoSuchFieldException","0","-","-","-","-"
"1234","testWrap","@Test
    public void testWrap()","0","-","-","-","-"
"1235","testClass","@Test
    public void testClass()","0","-","-","-","-"
"1236","testConstructorAccessors_is","@Test
    public void testConstructorAccessors_is()","0","-","-","-","-"
"1237","testConstructorAccessors_isIn_Normal","@Test
    public void testConstructorAccessors_isIn_Normal()","0","-","-","-","-"
"1238","testConstructorAccessors_isIn_Reversed","@Test
    public void testConstructorAccessors_isIn_Reversed()","0","-","-","-","-"
"1239","testConstructorAccessors_isIn_Same","@Test
    public void testConstructorAccessors_isIn_Same()","0","-","-","-","-"
"1240","testConstructorAccessors_isNot","@Test
    public void testConstructorAccessors_isNot()","0","-","-","-","-"
"1241","testConstructorAccessors_isNotIn_Normal","@Test
    public void testConstructorAccessors_isNotIn_Normal()","0","-","-","-","-"
"1242","testConstructorAccessors_isNotIn_Reversed","@Test
    public void testConstructorAccessors_isNotIn_Reversed()","0","-","-","-","-"
"1243","testConstructorAccessors_isNotIn_Same","@Test
    public void testConstructorAccessors_isNotIn_Same()","0","-","-","-","-"
"1244","testContains_Char","@Test
    public void testContains_Char()","0","-","-","-","-"
"1245","testContains_Charrange","@Test
    public void testContains_Charrange()","0","-","-","-","-"
"1246","testContainsNullArg","@Test
    public void testContainsNullArg()","0","-","-","-","-"
"1247","testEquals_Object","@Test
    public void testEquals_Object()","0","-","-","-","-"
"1248","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"1249","testIterator","@Test
    public void testIterator()","0","-","-","-","-"
"1250","testIteratorRemove","@Test
    public void testIteratorRemove()","0","-","-","-","-"
"1251","testSerialization","@Test
    public void testSerialization()","0","-","-","-","-"
"1252","Fixture","Fixture(final String name)","0","-","-","-","-"
"1253","render","/**
         * Renders myself onto an Appendable to avoid creating intermediary strings.
         */
        void render(final Appendable appendable) throws IOException","0","-","-","-","-"
"1254","testAllBuilderPropertiesStringBuilder","@Test
    public void testAllBuilderPropertiesStringBuilder()","0","-","-","-","-"
"1255","testBuildDefaultStringBuilder","@Test
    public void testBuildDefaultStringBuilder()","0","-","-","-","-"
"1256","testBuilder","@Test
    public void testBuilder()","0","-","-","-","-"
"1257","testDelimiterAppendable","@SuppressWarnings(""deprecation"") // Test own StrBuilder
    @ParameterizedTest
    @ValueSource(classes =","0","-","-","-","-"
"1258","testDelimiterStringBuilder","@Test
    public void testDelimiterStringBuilder()","0","-","-","-","-"
"1259","testToCharSequenceStringBuilder1","@Test
    public void testToCharSequenceStringBuilder1()","0","-","-","-","-"
"1260","testToCharSequenceStringBuilder2","@Test
    public void testToCharSequenceStringBuilder2()","0","-","-","-","-"
"1261","testDotAll","@Test
    public void testDotAll()","0","-","-","-","-"
"1262","testDotAllMatcher","@Test
    public void testDotAllMatcher()","0","-","-","-","-"
"1263","testDotAllMatcherDeprecated","@SuppressWarnings(""deprecation"")
    @Test
    public void testDotAllMatcherDeprecated()","0","-","-","-","-"
"1264","testRemoveAll","@Test
    public void testRemoveAll()","0","-","-","-","-"
"1265","testRemoveAllDeprecated","@Test
    public void testRemoveAllDeprecated()","0","-","-","-","-"
"1266","testRemoveAll_StringString","@Test
    public void testRemoveAll_StringString()","0","-","-","-","-"
"1267","testRemoveFirst","@Test
    public void testRemoveFirst()","0","-","-","-","-"
"1268","testRemoveFirstDeprecated","@Test
    public void testRemoveFirstDeprecated()","0","-","-","-","-"
"1269","testRemoveFirst_StringString","@Test
    public void testRemoveFirst_StringString()","0","-","-","-","-"
"1270","testRemovePattern","@Test
    public void testRemovePattern()","0","-","-","-","-"
"1271","testRemovePatternDeprecated","@Test
    public void testRemovePatternDeprecated()","0","-","-","-","-"
"1272","testReplaceAll","@Test
    public void testReplaceAll()","0","-","-","-","-"
"1273","testReplaceAllDeprecated","@Test
    public void testReplaceAllDeprecated()","0","-","-","-","-"
"1274","testReplaceAll_StringStringString","@Test
    public void testReplaceAll_StringStringString()","0","-","-","-","-"
"1275","testReplaceFirst","@Test
    public void testReplaceFirst()","0","-","-","-","-"
"1276","testReplaceFirstDeprecated","@Test
    public void testReplaceFirstDeprecated()","0","-","-","-","-"
"1277","testReplaceFirst_StringStringString","@Test
    public void testReplaceFirst_StringStringString()","0","-","-","-","-"
"1278","testReplacePattern","@Test
    public void testReplacePattern()","0","-","-","-","-"
"1279","testReplacePatternDeprecated","@Test
    public void testReplacePatternDeprecated()","0","-","-","-","-"
"1280","testSupplierStatic","@Test
    public void testSupplierStatic() throws Throwable","0","-","-","-","-"
"1281","testSupplierToString","@Test
    public void testSupplierToString() throws SecurityException, ReflectiveOperationException","0","-","-","-","-"
"1282","testAccept","@Test
    public void testAccept() throws Throwable","0","-","-","-","-"
"1283","testAndThen","@Test
    public void testAndThen() throws Throwable","0","-","-","-","-"
"1284","requireNonNull","/**
     * Checks, whether the given object is non-null. If so, returns the non-null
     * object as a result value. Otherwise, a NullPointerException is thrown.
     * @param <T> The type of parameter","0","-","-","-","-"
"1285","requireNonNull","/**
     * Checks, whether the given object is non-null. If so, returns the non-null
     * object as a result value. Otherwise, invokes the given","0","-","-","-","-"
"1286","requireNonNull","/**
     * Checks, whether the given object is non-null. If so, returns the non-null
     * object as a result value. Otherwise, a NullPointerException is thrown.
     * @param <T> The type of parameter","0","-","-","-","-"
"1287","requireNonNull","/**
     * Checks, whether the given object is non-null. If so, returns the non-null
     * object as a result value. Otherwise, a NullPointerException is thrown.
     * @param <T> The type of parameter","0","-","-","-","-"
"1288","requireNonNull","/**
     * Checks, whether the given object is non-null. If so, returns the non-null
     * object as a result value. Otherwise, a NullPointerException is thrown.
     * @param <T> The type of parameter","0","-","-","-","-"
"1289","testApply","/**
     * Tests","0","-","-","-","-"
"1290","testFunction","/**
     * Tests","0","-","-","-","-"
"1291","testSupplierStaticGetMethod","@Test
    public void testSupplierStaticGetMethod() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1292","testSupplierStaticGetMethodToString","@Test
    public void testSupplierStaticGetMethodToString() throws SecurityException, ReflectiveOperationException","0","-","-","-","-"
"1293","testAccept","@Test
    public void testAccept() throws Throwable","0","-","-","-","-"
"1294","testAndThen","@Test
    public void testAndThen() throws Throwable","0","-","-","-","-"
"1295","test","@Test
    public void test()","0","-","-","-","-"
"1296","accept","private BooleanConsumer accept(final BooleanConsumer consumer, final boolean expected)","0","-","-","-","-"
"1297","testAccept","@Test
    public void testAccept()","0","-","-","-","-"
"1298","testAndThen","@Test
    public void testAndThen() throws Throwable","0","-","-","-","-"
"1299","testFalsePredicate","@Test
    public void testFalsePredicate()","0","-","-","-","-"
"1300","testTruePredicate","@Test
    public void testTruePredicate()","0","-","-","-","-"
"1301","testNULL","@Test
    public void testNULL() throws Throwable","0","-","-","-","-"
"1302","testNullSupplierDefaultException","@Test
    public void testNullSupplierDefaultException() throws Exception","0","-","-","-","-"
"1303","testNullSupplierException","@Test
    public void testNullSupplierException() throws Exception","0","-","-","-","-"
"1304","testNullSupplierRuntimeException","@Test
    public void testNullSupplierRuntimeException()","0","-","-","-","-"
"1305","testApply1Arg","@Test
    public void testApply1Arg() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1306","testApply1ArgThrowsUnchecked","@Test
    public void testApply1ArgThrowsUnchecked() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1307","testConstructorForNull","@Test
    public void testConstructorForNull() throws SecurityException","0","-","-","-","-"
"1308","testFullExample","@Test
    public void testFullExample() throws SecurityException, ReflectiveOperationException","0","-","-","-","-"
"1309","testToString","@Test
    public void testToString() throws SecurityException, ReflectiveOperationException","0","-","-","-","-"
"1310","test","@Test
    public void test()","0","-","-","-","-"
"1311","testApply0Arg","@Test
    public void testApply0Arg() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1312","testApply0ArgThrowsUnchecked","@Test
    public void testApply0ArgThrowsUnchecked() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1313","testBuildVarArg","@Test
    public void testBuildVarArg() throws SecurityException, NoSuchMethodException","0","-","-","-","-"
"1314","testConstructorForNull","@Test
    public void testConstructorForNull() throws SecurityException","0","-","-","-","-"
"1315","testFindAndInvoke","@Test
    public void testFindAndInvoke() throws SecurityException","0","-","-","-","-"
"1316","testFullExample","@Test
    public void testFullExample() throws SecurityException, ReflectiveOperationException","0","-","-","-","-"
"1317","testMapComputeIfAbsent","@Test
    public void testMapComputeIfAbsent() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1318","testToString","@Test
    public void testToString() throws SecurityException, ReflectiveOperationException","0","-","-","-","-"
"1319","close","public void close()","0","-","-","-","-"
"1320","isClosed","public boolean isClosed()","0","-","-","-","-"
"1321","reset","public void reset()","0","-","-","-","-"
"1322","run","public void run(final Throwable pTh) throws Throwable","0","-","-","-","-"
"1323","failingBool","static boolean failingBool() throws SomeException","0","-","-","-","-"
"1324","testDouble","static boolean testDouble(final double value) throws SomeException","0","-","-","-","-"
"1325","testInt","static boolean testInt(final int value) throws SomeException","0","-","-","-","-"
"1326","testLong","static boolean testLong(final long value) throws SomeException","0","-","-","-","-"
"1327","throwOnOdd","private static void throwOnOdd() throws SomeException","0","-","-","-","-"
"1328","FailureOnOddInvocations","FailureOnOddInvocations() throws SomeException","0","-","-","-","-"
"1329","getAsBoolean","boolean getAsBoolean() throws SomeException","0","-","-","-","-"
"1330","SomeException","SomeException(final String message)","0","-","-","-","-"
"1331","setThrowable","public void setThrowable(final Throwable throwable)","0","-","-","-","-"
"1332","test","public void test() throws Throwable","0","-","-","-","-"
"1333","Testable","Testable(final Throwable throwable)","0","-","-","-","-"
"1334","getAcceptedObject","public T getAcceptedObject()","0","-","-","-","-"
"1335","getAcceptedPrimitiveObject1","public P getAcceptedPrimitiveObject1()","0","-","-","-","-"
"1336","getAcceptedPrimitiveObject2","public P getAcceptedPrimitiveObject2()","0","-","-","-","-"
"1337","setThrowable","public void setThrowable(final Throwable throwable)","0","-","-","-","-"
"1338","test","public void test() throws Throwable","0","-","-","-","-"
"1339","test","public Object test(final Object input1, final Object input2) throws Throwable","0","-","-","-","-"
"1340","test","public void test(final Throwable throwable) throws Throwable","0","-","-","-","-"
"1341","testAsBooleanPrimitive","public boolean testAsBooleanPrimitive() throws Throwable","0","-","-","-","-"
"1342","testAsBooleanPrimitive","public boolean testAsBooleanPrimitive(final Throwable throwable) throws Throwable","0","-","-","-","-"
"1343","testAsDoublePrimitive","public double testAsDoublePrimitive() throws Throwable","0","-","-","-","-"
"1344","testAsDoublePrimitive","public double testAsDoublePrimitive(final Throwable throwable) throws Throwable","0","-","-","-","-"
"1345","testAsInteger","public Integer testAsInteger() throws Throwable","0","-","-","-","-"
"1346","testAsInteger","public Integer testAsInteger(final Throwable throwable) throws Throwable","0","-","-","-","-"
"1347","testAsIntPrimitive","public int testAsIntPrimitive() throws Throwable","0","-","-","-","-"
"1348","testAsIntPrimitive","public int testAsIntPrimitive(final Throwable throwable) throws Throwable","0","-","-","-","-"
"1349","testAsLongPrimitive","public long testAsLongPrimitive() throws Throwable","0","-","-","-","-"
"1350","testAsLongPrimitive","public long testAsLongPrimitive(final Throwable throwable) throws Throwable","0","-","-","-","-"
"1351","testAsShortPrimitive","public short testAsShortPrimitive() throws Throwable","0","-","-","-","-"
"1352","testAsShortPrimitive","public short testAsShortPrimitive(final Throwable throwable) throws Throwable","0","-","-","-","-"
"1353","testDouble","public void testDouble(final double i) throws Throwable","0","-","-","-","-"
"1354","testDoubleDouble","public double testDoubleDouble(final double i, final double j) throws Throwable","0","-","-","-","-"
"1355","testInt","public void testInt(final int i) throws Throwable","0","-","-","-","-"
"1356","testLong","public void testLong(final long i) throws Throwable","0","-","-","-","-"
"1357","testObjDouble","public void testObjDouble(final T object, final double i) throws Throwable","0","-","-","-","-"
"1358","testObjInt","public void testObjInt(final T object, final int i) throws Throwable","0","-","-","-","-"
"1359","testObjLong","public void testObjLong(final T object, final long i) throws Throwable","0","-","-","-","-"
"1360","testAcceptBiConsumer","@Test
    public void testAcceptBiConsumer()","0","-","-","-","-"
"1361","testAcceptConsumer","@Test
    public void testAcceptConsumer()","0","-","-","-","-"
"1362","testAcceptDoubleConsumer","@Test
    public void testAcceptDoubleConsumer()","0","-","-","-","-"
"1363","testAcceptIntConsumer","@Test
    public void testAcceptIntConsumer()","0","-","-","-","-"
"1364","testAcceptLongConsumer","@Test
    public void testAcceptLongConsumer()","0","-","-","-","-"
"1365","testAcceptObjDoubleConsumer","@Test
    public void testAcceptObjDoubleConsumer()","0","-","-","-","-"
"1366","testAcceptObjIntConsumer","@Test
    public void testAcceptObjIntConsumer()","0","-","-","-","-"
"1367","testAcceptObjLongConsumer","@Test
    public void testAcceptObjLongConsumer()","0","-","-","-","-"
"1368","testApplyBiFunction","@Test
    public void testApplyBiFunction()","0","-","-","-","-"
"1369","testApplyDoubleBinaryOperator","@Test
    public void testApplyDoubleBinaryOperator()","0","-","-","-","-"
"1370","testApplyFunction","@Test
    public void testApplyFunction()","0","-","-","-","-"
"1371","testAsCallable","@Test
    public void testAsCallable()","0","-","-","-","-"
"1372","testAsConsumer","@Test
    public void testAsConsumer()","0","-","-","-","-"
"1373","testAsRunnable","@Test
    public void testAsRunnable()","0","-","-","-","-"
"1374","testAsSupplier","@Test
    public void testAsSupplier()","0","-","-","-","-"
"1375","testBiConsumer","@Test
    public void testBiConsumer() throws Throwable","0","-","-","-","-"
"1376","testBiConsumerAndThen","@Test
    public void testBiConsumerAndThen() throws Throwable","0","-","-","-","-"
"1377","testBiFunction","@Test
    public void testBiFunction()","0","-","-","-","-"
"1378","testBiFunctionAndThen","@Test
    public void testBiFunctionAndThen() throws IOException","0","-","-","-","-"
"1379","testBiPredicate","@Test
    @DisplayName(""Test that asPredicate(FailableBiPredicate) is converted to -> BiPredicate "")
    public void testBiPredicate()","0","-","-","-","-"
"1380","testBiPredicateAnd","@Test
    public void testBiPredicateAnd() throws Throwable","0","-","-","-","-"
"1381","testBiPredicateNegate","@Test
    public void testBiPredicateNegate() throws Throwable","0","-","-","-","-"
"1382","testBiPredicateOr","@Test
    public void testBiPredicateOr() throws Throwable","0","-","-","-","-"
"1383","testCallable","@Test
    public void testCallable()","0","-","-","-","-"
"1384","testConsumerAndThen","@Test
    public void testConsumerAndThen() throws Throwable","0","-","-","-","-"
"1385","testDoubleConsumerAndThen","@Test
    public void testDoubleConsumerAndThen() throws Throwable","0","-","-","-","-"
"1386","testDoublePredicate","@Test
    public void testDoublePredicate() throws Throwable","0","-","-","-","-"
"1387","testDoublePredicateAnd","@Test
    public void testDoublePredicateAnd() throws Throwable","0","-","-","-","-"
"1388","testDoublePredicateNegate","@Test
    public void testDoublePredicateNegate() throws Throwable","0","-","-","-","-"
"1389","testDoublePredicateOr","@Test
    public void testDoublePredicateOr() throws Throwable","0","-","-","-","-"
"1390","testDoubleUnaryOperatorAndThen","@Test
    public void testDoubleUnaryOperatorAndThen() throws Throwable","0","-","-","-","-"
"1391","testDoubleUnaryOperatorCompose","@Test
    public void testDoubleUnaryOperatorCompose() throws Throwable","0","-","-","-","-"
"1392","testDoubleUnaryOperatorIdentity","@Test
    public void testDoubleUnaryOperatorIdentity() throws Throwable","0","-","-","-","-"
"1393","testFailableBiFunctionNop","@Test
    public void testFailableBiFunctionNop() throws Throwable","0","-","-","-","-"
"1394","testFailableConsumerNop","@Test
    public void testFailableConsumerNop() throws Throwable","0","-","-","-","-"
"1395","testFailableDoubleFunctionNop","@Test
    public void testFailableDoubleFunctionNop() throws Throwable","0","-","-","-","-"
"1396","testFailableDoubleToIntFunctionNop","@Test
    public void testFailableDoubleToIntFunctionNop() throws Throwable","0","-","-","-","-"
"1397","testFailableDoubleToLongFunctionNop","@Test
    public void testFailableDoubleToLongFunctionNop() throws Throwable","0","-","-","-","-"
"1398","testFailableIntFunctionNop","@Test
    public void testFailableIntFunctionNop() throws Throwable","0","-","-","-","-"
"1399","testFailableIntToDoubleFunctionNop","@Test
    public void testFailableIntToDoubleFunctionNop() throws Throwable","0","-","-","-","-"
"1400","testFailableIntToFloatFunctionNop","@Test
    public void testFailableIntToFloatFunctionNop() throws Throwable","0","-","-","-","-"
"1401","testFailableIntToLongFunctionNop","@Test
    public void testFailableIntToLongFunctionNop() throws Throwable","0","-","-","-","-"
"1402","testFailableLongFunctionNop","@Test
    public void testFailableLongFunctionNop() throws Throwable","0","-","-","-","-"
"1403","testFailableLongToDoubleFunctionNop","@Test
    public void testFailableLongToDoubleFunctionNop() throws Throwable","0","-","-","-","-"
"1404","testFailableLongToIntFunctionNop","@Test
    public void testFailableLongToIntFunctionNop() throws Throwable","0","-","-","-","-"
"1405","testFailableObjDoubleConsumerNop","@Test
    public void testFailableObjDoubleConsumerNop() throws Throwable","0","-","-","-","-"
"1406","testFailableObjIntConsumerNop","@Test
    public void testFailableObjIntConsumerNop() throws Throwable","0","-","-","-","-"
"1407","testFailableObjLongConsumerNop","@Test
    public void testFailableObjLongConsumerNop() throws Throwable","0","-","-","-","-"
"1408","testFailableToBooleanFunctionNop","@Test
    public void testFailableToBooleanFunctionNop() throws Throwable","0","-","-","-","-"
"1409","testFailableToDoubleBiFunctionNop","@Test
    public void testFailableToDoubleBiFunctionNop() throws Throwable","0","-","-","-","-"
"1410","testFailableToDoubleFunctionNop","@Test
    public void testFailableToDoubleFunctionNop() throws Throwable","0","-","-","-","-"
"1411","testFailableToIntBiFunctionNop","@Test
    public void testFailableToIntBiFunctionNop() throws Throwable","0","-","-","-","-"
"1412","testFailableToIntFunctionNop","@Test
    public void testFailableToIntFunctionNop() throws Throwable","0","-","-","-","-"
"1413","testFailableToLongBiFunctionNop","@Test
    public void testFailableToLongBiFunctionNop() throws Throwable","0","-","-","-","-"
"1414","testFailableToLongFunctionNop","@Test
    public void testFailableToLongFunctionNop() throws Throwable","0","-","-","-","-"
"1415","testFunction","@Test
    public void testFunction()","0","-","-","-","-"
"1416","testFunctionAndThen","@Test
    public void testFunctionAndThen() throws IOException","0","-","-","-","-"
"1417","testFunctionCompose","@Test
    public void testFunctionCompose() throws Throwable","0","-","-","-","-"
"1418","testFunctionFunction","@Test
    public void testFunctionFunction() throws Exception","0","-","-","-","-"
"1419","testFunctionIdentity","@Test
    public void testFunctionIdentity() throws Throwable","0","-","-","-","-"
"1420","testGetAsBooleanSupplier","@Test
    public void testGetAsBooleanSupplier()","0","-","-","-","-"
"1421","testGetAsDoubleSupplier","@Test
    public void testGetAsDoubleSupplier()","0","-","-","-","-"
"1422","testGetAsIntSupplier","@Test
    public void testGetAsIntSupplier()","0","-","-","-","-"
"1423","testGetAsLongSupplier","@Test
    public void testGetAsLongSupplier()","0","-","-","-","-"
"1424","testGetAsShortSupplier","@Test
    public void testGetAsShortSupplier()","0","-","-","-","-"
"1425","testGetFromSupplier","@Test
    public void testGetFromSupplier()","0","-","-","-","-"
"1426","testGetSupplier","@Test
    public void testGetSupplier()","0","-","-","-","-"
"1427","testIntConsumerAndThen","@Test
    public void testIntConsumerAndThen() throws Throwable","0","-","-","-","-"
"1428","testIntPredicate","@Test
    public void testIntPredicate() throws Throwable","0","-","-","-","-"
"1429","testIntPredicateAnd","@Test
    public void testIntPredicateAnd() throws Throwable","0","-","-","-","-"
"1430","testIntPredicateNegate","@Test
    public void testIntPredicateNegate() throws Throwable","0","-","-","-","-"
"1431","testIntPredicateOr","@Test
    public void testIntPredicateOr() throws Throwable","0","-","-","-","-"
"1432","testIntUnaryOperatorAndThen","@Test
    public void testIntUnaryOperatorAndThen() throws Throwable","0","-","-","-","-"
"1433","testIntUnaryOperatorCompose","@Test
    public void testIntUnaryOperatorCompose() throws Throwable","0","-","-","-","-"
"1434","testIntUnaryOperatorIdentity","@Test
    public void testIntUnaryOperatorIdentity() throws Throwable","0","-","-","-","-"
"1435","testLongConsumerAndThen","@Test
    public void testLongConsumerAndThen() throws Throwable","0","-","-","-","-"
"1436","testLongPredicate","@Test
    public void testLongPredicate() throws Throwable","0","-","-","-","-"
"1437","testLongPredicateAnd","@Test
    public void testLongPredicateAnd() throws Throwable","0","-","-","-","-"
"1438","testLongPredicateNegate","@Test
    public void testLongPredicateNegate() throws Throwable","0","-","-","-","-"
"1439","testLongPredicateOr","@Test
    public void testLongPredicateOr() throws Throwable","0","-","-","-","-"
"1440","testLongUnaryOperatorAndThen","@Test
    public void testLongUnaryOperatorAndThen() throws Throwable","0","-","-","-","-"
"1441","testLongUnaryOperatorCompose","@Test
    public void testLongUnaryOperatorCompose() throws Throwable","0","-","-","-","-"
"1442","testLongUnaryOperatorIdentity","@Test
    public void testLongUnaryOperatorIdentity() throws Throwable","0","-","-","-","-"
"1443","testPredicate","@Test
    @DisplayName(""Test that asPredicate(FailablePredicate) is converted to -> Predicate "")
    public void testPredicate()","0","-","-","-","-"
"1444","testPredicateAnd","@Test
    public void testPredicateAnd() throws Throwable","0","-","-","-","-"
"1445","testPredicateNegate","@Test
    public void testPredicateNegate() throws Throwable","0","-","-","-","-"
"1446","testPredicateOr","@Test
    public void testPredicateOr() throws Throwable","0","-","-","-","-"
"1447","testRunnable","@Test
    public void testRunnable()","0","-","-","-","-"
"1448","testThrows_FailableBiConsumer_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableBiConsumer_Object_Throwable()","0","-","-","-","-"
"1449","accept","@Override
            public void accept(final Object object1, final Object object2) throws Throwable","0","-","-","-","-"
"1450","testThrows_FailableBiConsumer_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableBiConsumer_String_IOException()","0","-","-","-","-"
"1451","accept","@Override
            public void accept(final String object1, final String object2) throws IOException","0","-","-","-","-"
"1452","testThrows_FailableBiFunction_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableBiFunction_Object_Throwable()","0","-","-","-","-"
"1453","apply","@Override
            public Object apply(final Object input1, final Object input2) throws Throwable","0","-","-","-","-"
"1454","testThrows_FailableBiFunction_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableBiFunction_String_IOException()","0","-","-","-","-"
"1455","apply","@Override
            public String apply(final String input1, final String input2) throws IOException","0","-","-","-","-"
"1456","testThrows_FailableBiPredicate_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableBiPredicate_Object_Throwable()","0","-","-","-","-"
"1457","test","@Override
            public boolean test(final Object object1, final Object object2) throws Throwable","0","-","-","-","-"
"1458","testThrows_FailableBiPredicate_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableBiPredicate_String_IOException()","0","-","-","-","-"
"1459","test","@Override
            public boolean test(final String object1, final String object2) throws IOException","0","-","-","-","-"
"1460","testThrows_FailableBooleanSupplier_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableBooleanSupplier_IOException()","0","-","-","-","-"
"1461","getAsBoolean","@Override
            public boolean getAsBoolean() throws IOException","0","-","-","-","-"
"1462","testThrows_FailableBooleanSupplier_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableBooleanSupplier_Throwable()","0","-","-","-","-"
"1463","getAsBoolean","@Override
            public boolean getAsBoolean() throws Throwable","0","-","-","-","-"
"1464","testThrows_FailableCallable_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableCallable_Object_Throwable()","0","-","-","-","-"
"1465","call","@Override
            public Object call() throws Throwable","0","-","-","-","-"
"1466","testThrows_FailableCallable_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableCallable_String_IOException()","0","-","-","-","-"
"1467","call","@Override
            public String call() throws IOException","0","-","-","-","-"
"1468","testThrows_FailableConsumer_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableConsumer_Object_Throwable()","0","-","-","-","-"
"1469","accept","@Override
            public void accept(final Object object) throws Throwable","0","-","-","-","-"
"1470","testThrows_FailableConsumer_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableConsumer_String_IOException()","0","-","-","-","-"
"1471","accept","@Override
            public void accept(final String object) throws IOException","0","-","-","-","-"
"1472","testThrows_FailableDoubleBinaryOperator_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableDoubleBinaryOperator_IOException()","0","-","-","-","-"
"1473","applyAsDouble","@Override
            public double applyAsDouble(final double left, final double right) throws IOException","0","-","-","-","-"
"1474","testThrows_FailableDoubleBinaryOperator_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableDoubleBinaryOperator_Throwable()","0","-","-","-","-"
"1475","applyAsDouble","@Override
            public double applyAsDouble(final double left, final double right) throws Throwable","0","-","-","-","-"
"1476","testThrows_FailableDoubleConsumer_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableDoubleConsumer_IOException()","0","-","-","-","-"
"1477","accept","@Override
            public void accept(final double value) throws IOException","0","-","-","-","-"
"1478","testThrows_FailableDoubleConsumer_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableDoubleConsumer_Throwable()","0","-","-","-","-"
"1479","accept","@Override
            public void accept(final double value) throws Throwable","0","-","-","-","-"
"1480","testThrows_FailableDoubleFunction_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableDoubleFunction_IOException()","0","-","-","-","-"
"1481","apply","@Override
            public String apply(final double input) throws IOException","0","-","-","-","-"
"1482","testThrows_FailableDoubleFunction_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableDoubleFunction_Throwable()","0","-","-","-","-"
"1483","apply","@Override
            public Object apply(final double input) throws Throwable","0","-","-","-","-"
"1484","testThrows_FailableDoubleSupplier_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableDoubleSupplier_IOException()","0","-","-","-","-"
"1485","getAsDouble","@Override
            public double getAsDouble() throws IOException","0","-","-","-","-"
"1486","testThrows_FailableDoubleSupplier_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableDoubleSupplier_Throwable()","0","-","-","-","-"
"1487","getAsDouble","@Override
            public double getAsDouble() throws Throwable","0","-","-","-","-"
"1488","testThrows_FailableDoubleToIntFunction_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableDoubleToIntFunction_IOException()","0","-","-","-","-"
"1489","applyAsInt","@Override
            public int applyAsInt(final double value) throws IOException","0","-","-","-","-"
"1490","testThrows_FailableDoubleToIntFunction_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableDoubleToIntFunction_Throwable()","0","-","-","-","-"
"1491","applyAsInt","@Override
            public int applyAsInt(final double value) throws Throwable","0","-","-","-","-"
"1492","testThrows_FailableDoubleToLongFunction_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableDoubleToLongFunction_IOException()","0","-","-","-","-"
"1493","applyAsLong","@Override
            public int applyAsLong(final double value) throws IOException","0","-","-","-","-"
"1494","testThrows_FailableDoubleToLongFunction_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableDoubleToLongFunction_Throwable()","0","-","-","-","-"
"1495","applyAsLong","@Override
            public int applyAsLong(final double value) throws Throwable","0","-","-","-","-"
"1496","testThrows_FailableFunction_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableFunction_Object_Throwable()","0","-","-","-","-"
"1497","apply","@Override
            public Object apply(final Object input) throws Throwable","0","-","-","-","-"
"1498","testThrows_FailableFunction_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableFunction_String_IOException()","0","-","-","-","-"
"1499","apply","@Override
            public String apply(final String input) throws IOException","0","-","-","-","-"
"1500","testThrows_FailableIntBinaryOperator_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableIntBinaryOperator_IOException()","0","-","-","-","-"
"1501","applyAsInt","@Override
            public int applyAsInt(final int left, final int right) throws IOException","0","-","-","-","-"
"1502","testThrows_FailableIntBinaryOperator_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableIntBinaryOperator_Throwable()","0","-","-","-","-"
"1503","applyAsInt","@Override
            public int applyAsInt(final int left, final int right) throws Throwable","0","-","-","-","-"
"1504","testThrows_FailableIntConsumer_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableIntConsumer_IOException()","0","-","-","-","-"
"1505","accept","@Override
            public void accept(final int value) throws IOException","0","-","-","-","-"
"1506","testThrows_FailableIntConsumer_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableIntConsumer_Throwable()","0","-","-","-","-"
"1507","accept","@Override
            public void accept(final int value) throws Throwable","0","-","-","-","-"
"1508","testThrows_FailableIntFunction_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableIntFunction_Object_Throwable()","0","-","-","-","-"
"1509","apply","@Override
            public Object apply(final int input) throws Throwable","0","-","-","-","-"
"1510","testThrows_FailableIntFunction_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableIntFunction_String_IOException()","0","-","-","-","-"
"1511","apply","@Override
            public String apply(final int input) throws IOException","0","-","-","-","-"
"1512","testThrows_FailableIntSupplier_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableIntSupplier_IOException()","0","-","-","-","-"
"1513","getAsInt","@Override
            public int getAsInt() throws IOException","0","-","-","-","-"
"1514","testThrows_FailableIntSupplier_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableIntSupplier_Throwable()","0","-","-","-","-"
"1515","getAsInt","@Override
            public int getAsInt() throws Throwable","0","-","-","-","-"
"1516","testThrows_FailableIntToDoubleFunction_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableIntToDoubleFunction_IOException()","0","-","-","-","-"
"1517","applyAsDouble","@Override
            public double applyAsDouble(final int value) throws IOException","0","-","-","-","-"
"1518","testThrows_FailableIntToDoubleFunction_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableIntToDoubleFunction_Throwable()","0","-","-","-","-"
"1519","applyAsDouble","@Override
            public double applyAsDouble(final int value) throws Throwable","0","-","-","-","-"
"1520","testThrows_FailableIntToFloatFunction_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableIntToFloatFunction_IOException()","0","-","-","-","-"
"1521","applyAsFloat","@Override
            public float applyAsFloat(final int value) throws IOException","0","-","-","-","-"
"1522","testThrows_FailableIntToFloatFunction_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableIntToFloatFunction_Throwable()","0","-","-","-","-"
"1523","applyAsFloat","@Override
            public float applyAsFloat(final int value) throws Throwable","0","-","-","-","-"
"1524","testThrows_FailableIntToLongFunction_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableIntToLongFunction_IOException()","0","-","-","-","-"
"1525","applyAsLong","@Override
            public long applyAsLong(final int value) throws IOException","0","-","-","-","-"
"1526","testThrows_FailableIntToLongFunction_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableIntToLongFunction_Throwable()","0","-","-","-","-"
"1527","applyAsLong","@Override
            public long applyAsLong(final int value) throws Throwable","0","-","-","-","-"
"1528","testThrows_FailableLongBinaryOperator_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableLongBinaryOperator_IOException()","0","-","-","-","-"
"1529","applyAsLong","@Override
            public long applyAsLong(final long left, final long right) throws IOException","0","-","-","-","-"
"1530","testThrows_FailableLongBinaryOperator_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableLongBinaryOperator_Throwable()","0","-","-","-","-"
"1531","applyAsLong","@Override
            public long applyAsLong(final long left, final long right) throws Throwable","0","-","-","-","-"
"1532","testThrows_FailableLongConsumer_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableLongConsumer_IOException()","0","-","-","-","-"
"1533","accept","@Override
            public void accept(final long object) throws IOException","0","-","-","-","-"
"1534","testThrows_FailableLongConsumer_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableLongConsumer_Throwable()","0","-","-","-","-"
"1535","accept","@Override
            public void accept(final long object) throws Throwable","0","-","-","-","-"
"1536","testThrows_FailableLongFunction_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableLongFunction_IOException()","0","-","-","-","-"
"1537","apply","@Override
            public String apply(final long input) throws IOException","0","-","-","-","-"
"1538","testThrows_FailableLongFunction_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableLongFunction_Throwable()","0","-","-","-","-"
"1539","apply","@Override
            public Object apply(final long input) throws Throwable","0","-","-","-","-"
"1540","testThrows_FailableLongSupplier_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableLongSupplier_IOException()","0","-","-","-","-"
"1541","getAsLong","@Override
            public long getAsLong() throws IOException","0","-","-","-","-"
"1542","testThrows_FailableLongSupplier_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableLongSupplier_Throwable()","0","-","-","-","-"
"1543","getAsLong","@Override
            public long getAsLong() throws Throwable","0","-","-","-","-"
"1544","testThrows_FailableLongToDoubleFunction_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableLongToDoubleFunction_IOException()","0","-","-","-","-"
"1545","applyAsDouble","@Override
            public double applyAsDouble(final long value) throws IOException","0","-","-","-","-"
"1546","testThrows_FailableLongToDoubleFunction_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableLongToDoubleFunction_Throwable()","0","-","-","-","-"
"1547","applyAsDouble","@Override
            public double applyAsDouble(final long value) throws Throwable","0","-","-","-","-"
"1548","testThrows_FailableLongToIntFunction_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableLongToIntFunction_IOException()","0","-","-","-","-"
"1549","applyAsInt","@Override
            public int applyAsInt(final long value) throws IOException","0","-","-","-","-"
"1550","testThrows_FailableLongToIntFunction_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableLongToIntFunction_Throwable()","0","-","-","-","-"
"1551","applyAsInt","@Override
            public int applyAsInt(final long value) throws Throwable","0","-","-","-","-"
"1552","testThrows_FailableObjDoubleConsumer_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableObjDoubleConsumer_Object_Throwable()","0","-","-","-","-"
"1553","accept","@Override
            public void accept(final Object object, final double value) throws Throwable","0","-","-","-","-"
"1554","testThrows_FailableObjDoubleConsumer_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableObjDoubleConsumer_String_IOException()","0","-","-","-","-"
"1555","accept","@Override
            public void accept(final String object, final double value) throws IOException","0","-","-","-","-"
"1556","testThrows_FailableObjIntConsumer_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableObjIntConsumer_Object_Throwable()","0","-","-","-","-"
"1557","accept","@Override
            public void accept(final Object object, final int value) throws Throwable","0","-","-","-","-"
"1558","testThrows_FailableObjIntConsumer_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableObjIntConsumer_String_IOException()","0","-","-","-","-"
"1559","accept","@Override
            public void accept(final String object, final int value) throws IOException","0","-","-","-","-"
"1560","testThrows_FailableObjLongConsumer_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableObjLongConsumer_Object_Throwable()","0","-","-","-","-"
"1561","accept","@Override
            public void accept(final Object object, final long value) throws Throwable","0","-","-","-","-"
"1562","testThrows_FailableObjLongConsumer_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableObjLongConsumer_String_IOException()","0","-","-","-","-"
"1563","accept","@Override
            public void accept(final String object, final long value) throws IOException","0","-","-","-","-"
"1564","testThrows_FailablePredicate_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailablePredicate_Object_Throwable()","0","-","-","-","-"
"1565","test","@Override
            public boolean test(final Object object) throws Throwable","0","-","-","-","-"
"1566","testThrows_FailablePredicate_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailablePredicate_String_IOException()","0","-","-","-","-"
"1567","test","@Override
            public boolean test(final String object) throws IOException","0","-","-","-","-"
"1568","testThrows_FailableRunnable_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableRunnable_IOException()","0","-","-","-","-"
"1569","run","@Override
            public void run() throws IOException","0","-","-","-","-"
"1570","testThrows_FailableRunnable_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableRunnable_Throwable()","0","-","-","-","-"
"1571","run","@Override
            public void run() throws Throwable","0","-","-","-","-"
"1572","testThrows_FailableShortSupplier_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableShortSupplier_IOException()","0","-","-","-","-"
"1573","getAsShort","@Override
            public short getAsShort() throws IOException","0","-","-","-","-"
"1574","testThrows_FailableShortSupplier_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableShortSupplier_Throwable()","0","-","-","-","-"
"1575","getAsShort","@Override
            public short getAsShort() throws Throwable","0","-","-","-","-"
"1576","testThrows_FailableSupplier_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableSupplier_Object_Throwable()","0","-","-","-","-"
"1577","get","@Override
            public Object get() throws Throwable","0","-","-","-","-"
"1578","testThrows_FailableSupplier_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableSupplier_String_IOException()","0","-","-","-","-"
"1579","get","@Override
            public String get() throws IOException","0","-","-","-","-"
"1580","testThrows_FailableToBooleanFunction_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableToBooleanFunction_Object_Throwable()","0","-","-","-","-"
"1581","applyAsBoolean","@Override
            public boolean applyAsBoolean(final Object t) throws Throwable","0","-","-","-","-"
"1582","testThrows_FailableToBooleanFunction_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableToBooleanFunction_String_IOException()","0","-","-","-","-"
"1583","applyAsBoolean","@Override
            public boolean applyAsBoolean(final String t) throws IOException","0","-","-","-","-"
"1584","testThrows_FailableToDoubleBiFunction_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableToDoubleBiFunction_Object_Throwable()","0","-","-","-","-"
"1585","applyAsDouble","@Override
            public double applyAsDouble(final Object t, final Object u) throws Throwable","0","-","-","-","-"
"1586","testThrows_FailableToDoubleBiFunction_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableToDoubleBiFunction_String_IOException()","0","-","-","-","-"
"1587","applyAsDouble","@Override
            public double applyAsDouble(final String t, final String u) throws IOException","0","-","-","-","-"
"1588","testThrows_FailableToDoubleFunction_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableToDoubleFunction_Object_Throwable()","0","-","-","-","-"
"1589","applyAsDouble","@Override
            public double applyAsDouble(final Object t) throws Throwable","0","-","-","-","-"
"1590","testThrows_FailableToDoubleFunction_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableToDoubleFunction_String_IOException()","0","-","-","-","-"
"1591","applyAsDouble","@Override
            public double applyAsDouble(final String t) throws IOException","0","-","-","-","-"
"1592","testThrows_FailableToIntBiFunction_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableToIntBiFunction_Object_Throwable()","0","-","-","-","-"
"1593","applyAsInt","@Override
            public int applyAsInt(final Object t, final Object u) throws Throwable","0","-","-","-","-"
"1594","testThrows_FailableToIntBiFunction_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableToIntBiFunction_String_IOException()","0","-","-","-","-"
"1595","applyAsInt","@Override
            public int applyAsInt(final String t, final String u) throws IOException","0","-","-","-","-"
"1596","testThrows_FailableToIntFunction_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableToIntFunction_Object_Throwable()","0","-","-","-","-"
"1597","applyAsInt","@Override
            public int applyAsInt(final Object t) throws Throwable","0","-","-","-","-"
"1598","testThrows_FailableToIntFunction_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableToIntFunction_String_IOException()","0","-","-","-","-"
"1599","applyAsInt","@Override
            public int applyAsInt(final String t) throws IOException","0","-","-","-","-"
"1600","testThrows_FailableToLongBiFunction_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableToLongBiFunction_Object_Throwable()","0","-","-","-","-"
"1601","applyAsLong","@Override
            public long applyAsLong(final Object t, final Object u) throws Throwable","0","-","-","-","-"
"1602","testThrows_FailableToLongBiFunction_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableToLongBiFunction_String_IOException()","0","-","-","-","-"
"1603","applyAsLong","@Override
            public long applyAsLong(final String t, final String u) throws IOException","0","-","-","-","-"
"1604","testThrows_FailableToLongFunction_Object_Throwable","/**
     * Tests that our failable interface is properly defined to throw any exception using the top level generic types
     * Object and Throwable.
     */
    @Test
    public void testThrows_FailableToLongFunction_Object_Throwable()","0","-","-","-","-"
"1605","applyAsLong","@Override
            public long applyAsLong(final Object t) throws Throwable","0","-","-","-","-"
"1606","testThrows_FailableToLongFunction_String_IOException","/**
     * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as
     * generic test types.
     */
    @Test
    public void testThrows_FailableToLongFunction_String_IOException()","0","-","-","-","-"
"1607","applyAsLong","@Override
            public long applyAsLong(final String t) throws IOException","0","-","-","-","-"
"1608","testTryWithResources","@Test
    public void testTryWithResources()","0","-","-","-","-"
"1609","throwingFunction","private String throwingFunction(final String input) throws Exception","0","-","-","-","-"
"1610","testApply1Arg","@Test
    public void testApply1Arg() throws Throwable","0","-","-","-","-"
"1611","testApply1ArgThrowsChecked","@Test
    public void testApply1ArgThrowsChecked() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1612","testApply1ArgThrowsUnchecked","@Test
    public void testApply1ArgThrowsUnchecked() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1613","testConstructorForNull","@Test
    public void testConstructorForNull() throws SecurityException","0","-","-","-","-"
"1614","testToString","@Test
    public void testToString() throws SecurityException, Throwable","0","-","-","-","-"
"1615","testApply1Arg","@Test
    public void testApply1Arg() throws Throwable","0","-","-","-","-"
"1616","testApply1ArgThrowsChecked","@Test
    public void testApply1ArgThrowsChecked() throws Exception","0","-","-","-","-"
"1617","testApply1ArgThrowsUnchecked","@Test
    public void testApply1ArgThrowsUnchecked() throws Exception","0","-","-","-","-"
"1618","testConstructorForNull","@Test
    public void testConstructorForNull() throws Exception","0","-","-","-","-"
"1619","testToString","@Test
    public void testToString() throws SecurityException, ReflectiveOperationException","0","-","-","-","-"
"1620","testAccept","/**
     * Tests","0","-","-","-","-"
"1621","testNop","/**
     * Tests","0","-","-","-","-"
"1622","testApply0Arg","@Test
    public void testApply0Arg() throws Throwable","0","-","-","-","-"
"1623","testBuildVarArg","@Test
    public void testBuildVarArg() throws SecurityException, NoSuchMethodException","0","-","-","-","-"
"1624","testConstructorForNull","@Test
    public void testConstructorForNull() throws SecurityException","0","-","-","-","-"
"1625","testFindAndInvoke","@Test
    public void testFindAndInvoke() throws SecurityException","0","-","-","-","-"
"1626","testThrowsChecked","@Test
    public void testThrowsChecked() throws Exception","0","-","-","-","-"
"1627","testToString","@Test
    public void testToString() throws SecurityException, ReflectiveOperationException","0","-","-","-","-"
"1628","TestableFailableSupplier","TestableFailableSupplier(final FailableSupplier<O, E> pSupplier)","0","-","-","-","-"
"1629","get","@Override
        public O get() throws E","0","-","-","-","-"
"1630","isInvoked","public boolean isInvoked()","0","-","-","-","-"
"1631","TestableSupplier","TestableSupplier(final Supplier<O> pSupplier)","0","-","-","-","-"
"1632","get","@Override
        public O get()","0","-","-","-","-"
"1633","isInvoked","public boolean isInvoked()","0","-","-","-","-"
"1634","testRequireNonNullObject","@Test
    void testRequireNonNullObject()","0","-","-","-","-"
"1635","testRequireNonNullObjectFailableSupplierString","@Test
    void testRequireNonNullObjectFailableSupplierString()","0","-","-","-","-"
"1636","testRequireNonNullObjectString","@Test
    void testRequireNonNullObjectString()","0","-","-","-","-"
"1637","testRequireNonNullObjectSupplierString","@Test
    void testRequireNonNullObjectSupplierString()","0","-","-","-","-"
"1638","testGet","/**
     * Tests","0","-","-","-","-"
"1639","getDeclaredMethod","static Method getDeclaredMethod(final String name, final Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1640","getMethodForGetString","static Method getMethodForGetString() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1641","getMethodForGetString1Arg","static Method getMethodForGetString1Arg() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1642","getMethodForGetString1ArgChecked","static Method getMethodForGetString1ArgChecked() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1643","getMethodForGetString1ArgThrowsChecked","static Method getMethodForGetString1ArgThrowsChecked() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1644","getMethodForGetString1ArgThrowsUnchecked","static Method getMethodForGetString1ArgThrowsUnchecked() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1645","getMethodForGetString2Arg","static Method getMethodForGetString2Arg() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1646","getMethodForGetStringChecked","static Method getMethodForGetStringChecked() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1647","getMethodForGetStringsVarArg","static Method getMethodForGetStringsVarArg() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1648","getMethodForGetStringThrowsChecked","static Method getMethodForGetStringThrowsChecked() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1649","getMethodForGetStringThrowsUnchecked","static Method getMethodForGetStringThrowsUnchecked() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1650","getMethodForGetStringVarStringArgs","static Method getMethodForGetStringVarStringArgs() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1651","getMethodForSetString1Arg","static Method getMethodForSetString1Arg() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1652","getMethodForSetString1ArgThrows","static Method getMethodForSetString1ArgThrows() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1653","getMethodForSetString1ArgThrowsChecked","static Method getMethodForSetString1ArgThrowsChecked() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1654","getMethodForSetString1ArgThrowsUnchecked","static Method getMethodForSetString1ArgThrowsUnchecked() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1655","getMethodForSetString2Args","static Method getMethodForSetString2Args() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1656","getMethodForSetStringsVarArg","static Method getMethodForSetStringsVarArg() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1657","getMethodForStaticGetString","static Method getMethodForStaticGetString() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1658","getMethodForVoidMethod","static Method getMethodForVoidMethod() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1659","staticGetString","public static String staticGetString()","0","-","-","-","-"
"1660","geStringtVarStringArgs","public String geStringtVarStringArgs(final String... strings)","0","-","-","-","-"
"1661","getString","@AnnotationTestFixture
    public String getString()","0","-","-","-","-"
"1662","getString1Arg","public String getString1Arg(final String value)","0","-","-","-","-"
"1663","getString1ArgChecked","@SuppressWarnings(""unused"") // IOException is declared but never thrown.
    public String getString1ArgChecked(final String value) throws IOException","0","-","-","-","-"
"1664","getString1ArgThrowsChecked","public String getString1ArgThrowsChecked(final String value) throws CustomCheckedException","0","-","-","-","-"
"1665","getString1ArgThrowsUnchecked","public String getString1ArgThrowsUnchecked(final String value)","0","-","-","-","-"
"1666","getString2","@AnnotationTestFixture
    public String getString2()","0","-","-","-","-"
"1667","getString2Args","public String getString2Args(final String value1, final String value2)","0","-","-","-","-"
"1668","getStringArrayVarStringArgs","public String[] getStringArrayVarStringArgs(final String... strings)","0","-","-","-","-"
"1669","getStringChecked","public String getStringChecked() throws Exception","0","-","-","-","-"
"1670","getStringThrowsChecked","public String getStringThrowsChecked() throws CustomCheckedException","0","-","-","-","-"
"1671","getStringThrowsUnchecked","public String getStringThrowsUnchecked()","0","-","-","-","-"
"1672","getValue1","String getValue1()","0","-","-","-","-"
"1673","getValue2","String getValue2()","0","-","-","-","-"
"1674","getValueArray","String[] getValueArray()","0","-","-","-","-"
"1675","setValue1","void setValue1(final String value1) throws Exception","0","-","-","-","-"
"1676","setValue1And2","void setValue1And2(final String value1, final String value2) throws Exception","0","-","-","-","-"
"1677","setValue1ThrowsChecked","void setValue1ThrowsChecked(final String value1) throws CustomCheckedException","0","-","-","-","-"
"1678","setValue1ThrowsUnchecked","void setValue1ThrowsUnchecked(final String value1)","0","-","-","-","-"
"1679","setValue2","void setValue2(final String value2)","0","-","-","-","-"
"1680","setValueArray","void setValueArray(final String... values) throws Exception","0","-","-","-","-"
"1681","voidMethod","public void voidMethod()","0","-","-","-","-"
"1682","testApply1Arg","@Test
    public void testApply1Arg() throws NoSuchMethodException, SecurityException","0","-","-","-","-"
"1683","testConstructorForNull","@Test
    public void testConstructorForNull() throws SecurityException","0","-","-","-","-"
"1684","testToString","@Test
    public void testToString() throws SecurityException, ReflectiveOperationException","0","-","-","-","-"
"1685","MockRandom","MockRandom(final byte[] outputs)","0","-","-","-","-"
"1686","nextBytes","@Override
        public void nextBytes(final byte[] bytes)","0","-","-","-","-"
"1687","testNext","@ParameterizedTest
    @ValueSource(ints =","0","-","-","-","-"
"1688","testByte","@Test
    public void testByte()","0","-","-","-","-"
"1689","testClear","/**
     * test the clear() method
     */
    @Test
    public void testClear()","0","-","-","-","-"
"1690","testClearShort","/**
     * test the clearShort() method
     */
    @Test
    public void testClearShort()","0","-","-","-","-"
"1691","testGetRawValue","/**
     * test the getRawValue() method
     */
    @Test
    public void testGetRawValue()","0","-","-","-","-"
"1692","testGetShortRawValue","/**
     * test the getShortRawValue() method
     */
    @Test
    public void testGetShortRawValue()","0","-","-","-","-"
"1693","testGetShortValue","/**
     * test the getShortValue() method
     */
    @Test
    public void testGetShortValue()","0","-","-","-","-"
"1694","testGetValue","/**
     * test the getValue() method
     */
    @Test
    public void testGetValue()","0","-","-","-","-"
"1695","testIsAllSet","/**
     * test the isAllSet() method
     */
    @Test
    public void testIsAllSet()","0","-","-","-","-"
"1696","testIsSet","/**
     * test the isSet() method
     */
    @Test
    public void testIsSet()","0","-","-","-","-"
"1697","testSet","/**
     * test the set() method
     */
    @Test
    public void testSet()","0","-","-","-","-"
"1698","testSetBoolean","/**
     * test the setBoolean() method
     */
    @Test
    public void testSetBoolean()","0","-","-","-","-"
"1699","testSetShort","/**
     * test the setShort() method
     */
    @Test
    public void testSetShort()","0","-","-","-","-"
"1700","testSetShortBoolean","/**
     * test the setShortBoolean() method
     */
    @Test
    public void testSetShortBoolean()","0","-","-","-","-"
"1701","testSetShortValue","/**
     * test the setShortValue() method
     */
    @Test
    public void testSetShortValue()","0","-","-","-","-"
"1702","testSetValue","/**
     * test the setValue() method
     */
    @Test
    public void testSetValue()","0","-","-","-","-"
"1703","of","private static LongRange of(final int min, final int max)","0","-","-","-","-"
"1704","of","private static LongRange of(final Long min, final Long max)","0","-","-","-","-"
"1705","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"1706","testContainsInt","@Test
    public void testContainsInt()","0","-","-","-","-"
"1707","testContainsLong","@Test
    public void testContainsLong()","0","-","-","-","-"
"1708","testContainsRange","@Test
    public void testContainsRange()","0","-","-","-","-"
"1709","testElementCompareTo","@Test
    public void testElementCompareTo()","0","-","-","-","-"
"1710","testEqualsObject","@Test
    public void testEqualsObject()","0","-","-","-","-"
"1711","testFit","@Test
    public void testFit()","0","-","-","-","-"
"1712","testFitNull","@Test
    public void testFitNull()","0","-","-","-","-"
"1713","testGetMaximum","@Test
    public void testGetMaximum()","0","-","-","-","-"
"1714","testGetMinimum","@Test
    public void testGetMinimum()","0","-","-","-","-"
"1715","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"1716","testIntersectionWith","@Test
    public void testIntersectionWith()","0","-","-","-","-"
"1717","testIntersectionWithNonOverlapping","@Test
    public void testIntersectionWithNonOverlapping()","0","-","-","-","-"
"1718","testIntersectionWithNull","@Test
    public void testIntersectionWithNull()","0","-","-","-","-"
"1719","testIsAfter","@Test
    public void testIsAfter()","0","-","-","-","-"
"1720","testIsAfterRange","@Test
    public void testIsAfterRange()","0","-","-","-","-"
"1721","testIsBefore","@Test
    public void testIsBefore()","0","-","-","-","-"
"1722","testIsBeforeIntegerRange","@Test
    public void testIsBeforeIntegerRange()","0","-","-","-","-"
"1723","testIsBeforeRange","@Test
    public void testIsBeforeRange()","0","-","-","-","-"
"1724","testIsEndedBy","@Test
    public void testIsEndedBy()","0","-","-","-","-"
"1725","testIsOverlappedByIntegerRange","@Test
    public void testIsOverlappedByIntegerRange()","0","-","-","-","-"
"1726","testIsOverlappedByRange","@Test
    public void testIsOverlappedByRange()","0","-","-","-","-"
"1727","testIsStartedBy","@Test
    public void testIsStartedBy()","0","-","-","-","-"
"1728","testIsWithCompareRange","@Test
    public void testIsWithCompareRange()","0","-","-","-","-"
"1729","testOfWithContains","@Test
    public void testOfWithContains()","0","-","-","-","-"
"1730","testRangeOfChars","@Test
    public void testRangeOfChars()","0","-","-","-","-"
"1731","testSerializing","@Test
    public void testSerializing()","0","-","-","-","-"
"1732","testToIntStream","@Test
    public void testToIntStream()","0","-","-","-","-"
"1733","testToString","@Test
    public void testToString()","0","-","-","-","-"
"1734","testToStringFormat","@Test
    public void testToStringFormat()","0","-","-","-","-"
"1735","testAbs","@Test
    public void testAbs()","0","-","-","-","-"
"1736","testAdd","@Test
    public void testAdd()","0","-","-","-","-"
"1737","testCompareTo","@Test
    public void testCompareTo()","0","-","-","-","-"
"1738","testConstants","@Test
    public void testConstants()","0","-","-","-","-"
"1739","testConversions","@Test
    public void testConversions()","0","-","-","-","-"
"1740","testDivide","@Test
    public void testDivide()","0","-","-","-","-"
"1741","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"1742","testFactory_double","@Test
    public void testFactory_double()","0","-","-","-","-"
"1743","testFactory_int_int","@Test
    public void testFactory_int_int()","0","-","-","-","-"
"1744","testFactory_int_int_int","@Test
    public void testFactory_int_int_int()","0","-","-","-","-"
"1745","testFactory_String","@Test
    public void testFactory_String()","0","-","-","-","-"
"1746","testFactory_String_double","@Test
    public void testFactory_String_double()","0","-","-","-","-"
"1747","testFactory_String_improper","@Test
    public void testFactory_String_improper()","0","-","-","-","-"
"1748","testFactory_String_proper","@Test
    public void testFactory_String_proper()","0","-","-","-","-"
"1749","testGets","@Test
    public void testGets()","0","-","-","-","-"
"1750","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"1751","testHashCodeNotEquals","/**
     * Tests https://issues.apache.org/jira/browse/LANG-1764
     */
    @ParameterizedTest
    // @formatter:off
    @CsvSource(","0","-","-","-","-"
"1752","testInvert","@Test
    public void testInvert()","0","-","-","-","-"
"1753","testMultiply","@Test
    public void testMultiply()","0","-","-","-","-"
"1754","testNegate","@Test
    public void testNegate()","0","-","-","-","-"
"1755","testPow","@Test
    public void testPow()","0","-","-","-","-"
"1756","testReduce","@Test
    public void testReduce()","0","-","-","-","-"
"1757","testReducedFactory_int_int","@Test
    public void testReducedFactory_int_int()","0","-","-","-","-"
"1758","testSubtract","@Test
    public void testSubtract()","0","-","-","-","-"
"1759","testToProperString","@Test
    public void testToProperString()","0","-","-","-","-"
"1760","testToString","@Test
    public void testToString()","0","-","-","-","-"
"1761","assertCreateNumberZero","private static void assertCreateNumberZero(final String number, final Object zero, final Object negativeZero)","0","-","-","-","-"
"1762","checkCreateNumber","private boolean checkCreateNumber(final String val)","0","-","-","-","-"
"1763","compareByte","@Test
    public void compareByte()","0","-","-","-","-"
"1764","compareInt","@Test
    public void compareInt()","0","-","-","-","-"
"1765","compareIsCreatableWithCreateNumber","private void compareIsCreatableWithCreateNumber(final String val, final boolean expected)","0","-","-","-","-"
"1766","compareIsNumberWithCreateNumber","@SuppressWarnings(""deprecation"")
    private void compareIsNumberWithCreateNumber(final String val, final boolean expected)","0","-","-","-","-"
"1767","compareLong","@Test
    public void compareLong()","0","-","-","-","-"
"1768","compareShort","@Test
    public void compareShort()","0","-","-","-","-"
"1769","isApplyNonNull","private boolean isApplyNonNull(final String s, final Function<String, ?> function)","0","-","-","-","-"
"1770","isNumberFormatParsable","private boolean isNumberFormatParsable(final String s)","0","-","-","-","-"
"1771","isNumberIntegerOnlyFormatParsable","private boolean isNumberIntegerOnlyFormatParsable(final String s)","0","-","-","-","-"
"1772","isParsableByte","private boolean isParsableByte(final String s)","0","-","-","-","-"
"1773","isParsableDouble","private boolean isParsableDouble(final String s)","0","-","-","-","-"
"1774","isParsableFloat","private boolean isParsableFloat(final String s)","0","-","-","-","-"
"1775","isParsableInteger","private boolean isParsableInteger(final String s)","0","-","-","-","-"
"1776","isParsableLong","private boolean isParsableLong(final String s)","0","-","-","-","-"
"1777","isParsableShort","private boolean isParsableShort(final String s)","0","-","-","-","-"
"1778","testBigIntegerToDoubleBigInteger","/**
     * Test for","0","-","-","-","-"
"1779","testBigIntegerToDoubleBigIntegerD","/**
     * Test for","0","-","-","-","-"
"1780","testCompareDouble","@Test
    public void testCompareDouble()","0","-","-","-","-"
"1781","testCompareFloat","@Test
    public void testCompareFloat()","0","-","-","-","-"
"1782","testConstants","@SuppressWarnings(""cast"") // suppress instanceof warning check
    @Test
    public void testConstants()","0","-","-","-","-"
"1783","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"1784","testCreateBigDecimal","@Test
    public void testCreateBigDecimal()","0","-","-","-","-"
"1785","testCreateBigDecimalFailure","protected void testCreateBigDecimalFailure(final String str)","0","-","-","-","-"
"1786","testCreateBigInteger","@Test
    public void testCreateBigInteger()","0","-","-","-","-"
"1787","testCreateBigIntegerFailure","protected void testCreateBigIntegerFailure(final String str)","0","-","-","-","-"
"1788","testCreateDouble","@Test
    public void testCreateDouble()","0","-","-","-","-"
"1789","testCreateDoubleFailure","protected void testCreateDoubleFailure(final String str)","0","-","-","-","-"
"1790","testCreateFloat","@Test
    public void testCreateFloat()","0","-","-","-","-"
"1791","testCreateFloatFailure","protected void testCreateFloatFailure(final String str)","0","-","-","-","-"
"1792","testCreateInteger","@Test
    public void testCreateInteger()","0","-","-","-","-"
"1793","testCreateIntegerFailure","protected void testCreateIntegerFailure(final String str)","0","-","-","-","-"
"1794","testCreateLong","@Test
    public void testCreateLong()","0","-","-","-","-"
"1795","testCreateLongFailure","protected void testCreateLongFailure(final String str)","0","-","-","-","-"
"1796","testCreateNumber","@Test
    public void testCreateNumber()","0","-","-","-","-"
"1797","testCreateNumberFailure_1","@Test
    // Check that the code fails to create a valid number when preceded by -- rather than -
    public void testCreateNumberFailure_1()","0","-","-","-","-"
"1798","testCreateNumberFailure_2","@Test
    // Check that the code fails to create a valid number when both e and E are present (with decimal)
    public void testCreateNumberFailure_2()","0","-","-","-","-"
"1799","testCreateNumberFailure_3","@Test
    // Check that the code fails to create a valid number when both e and E are present (no decimal)
    public void testCreateNumberFailure_3()","0","-","-","-","-"
"1800","testCreateNumberFailure_4","@Test
    // Check that the code fails to create a valid number when both e and E are present (no decimal)
    public void testCreateNumberFailure_4()","0","-","-","-","-"
"1801","testCreateNumberFailure_5","@Test
    // Check that the code fails to create a valid number when there are multiple trailing 'f' characters (LANG-1205)
    public void testCreateNumberFailure_5()","0","-","-","-","-"
"1802","testCreateNumberFailure_6","@Test
    // Check that the code fails to create a valid number when there are multiple trailing 'F' characters (LANG-1205)
    public void testCreateNumberFailure_6()","0","-","-","-","-"
"1803","testCreateNumberFailure_7","@Test
    // Check that the code fails to create a valid number when there are multiple trailing 'd' characters (LANG-1205)
    public void testCreateNumberFailure_7()","0","-","-","-","-"
"1804","testCreateNumberFailure_8","@Test
    // Check that the code fails to create a valid number when there are multiple trailing 'D' characters (LANG-1205)
    public void testCreateNumberFailure_8()","0","-","-","-","-"
"1805","testCreateNumberMagnitude","@Test
    public void testCreateNumberMagnitude()","0","-","-","-","-"
"1806","testCreateNumberZero","/**
     * LANG-1646: Support the requested Number type (Long, Float, Double) of valid zero input.
     */
    @Test
    public void testCreateNumberZero()","0","-","-","-","-"
"1807","testInvalidNumber","@Test
    public void testInvalidNumber()","0","-","-","-","-"
"1808","testIsCreatable","/**
     * Tests isCreatable(String) and tests that createNumber(String) returns a valid number iff isCreatable(String)
     * returns false.
     */
    @Test
    public void testIsCreatable()","0","-","-","-","-"
"1809","testIsDigits","@Test
    public void testIsDigits()","0","-","-","-","-"
"1810","testIsNumber","/**
     * Tests isCreatable(String) and tests that createNumber(String) returns a valid number iff isCreatable(String)
     * returns false.
     */
    @Test
    public void testIsNumber()","0","-","-","-","-"
"1811","testIsNumberLANG1252","@Test
    public void testIsNumberLANG1252()","0","-","-","-","-"
"1812","testIsNumberLANG1385","@Test
    public void testIsNumberLANG1385()","0","-","-","-","-"
"1813","testIsNumberLANG971","@Test
    public void testIsNumberLANG971()","0","-","-","-","-"
"1814","testIsNumberLANG972","@Test
    public void testIsNumberLANG972()","0","-","-","-","-"
"1815","testIsNumberLANG992","@Test
    public void testIsNumberLANG992()","0","-","-","-","-"
"1816","testIsParsable","@Test
    public void testIsParsable()","0","-","-","-","-"
"1817","testLang1087","@Test
    public void testLang1087()","0","-","-","-","-"
"1818","testLANG1252","@Test
    public void testLANG1252()","0","-","-","-","-"
"1819","testLang1729IsParsableByte","@Test
    public void testLang1729IsParsableByte()","0","-","-","-","-"
"1820","testLang1729IsParsableDouble","@Test
    public void testLang1729IsParsableDouble()","0","-","-","-","-"
"1821","testLang1729IsParsableFloat","@Test
    public void testLang1729IsParsableFloat()","0","-","-","-","-"
"1822","testLang1729IsParsableInteger","@Test
    public void testLang1729IsParsableInteger()","0","-","-","-","-"
"1823","testLang1729IsParsableLong","@Test
    public void testLang1729IsParsableLong()","0","-","-","-","-"
"1824","testLang1729IsParsableShort","@Test
    public void testLang1729IsParsableShort()","0","-","-","-","-"
"1825","testLang300","@Test
    public void testLang300()","0","-","-","-","-"
"1826","testLang381","@Test
    public void testLang381()","0","-","-","-","-"
"1827","TestLang747","@Test
    public void TestLang747()","0","-","-","-","-"
"1828","testLANG971","@Test
    public void testLANG971()","0","-","-","-","-"
"1829","testLANG972","@Test
    public void testLANG972()","0","-","-","-","-"
"1830","testLANG992","@Test
    public void testLANG992()","0","-","-","-","-"
"1831","testMaxByte","@Test
    public void testMaxByte()","0","-","-","-","-"
"1832","testMaxByte_emptyArray","@Test
    public void testMaxByte_emptyArray()","0","-","-","-","-"
"1833","testMaxByte_nullArray","@Test
    public void testMaxByte_nullArray()","0","-","-","-","-"
"1834","testMaxDouble","@Test
    public void testMaxDouble()","0","-","-","-","-"
"1835","testMaxDouble_emptyArray","@Test
    public void testMaxDouble_emptyArray()","0","-","-","-","-"
"1836","testMaxDouble_nullArray","@Test
    public void testMaxDouble_nullArray()","0","-","-","-","-"
"1837","testMaxFloat","@Test
    public void testMaxFloat()","0","-","-","-","-"
"1838","testMaxFloat_emptyArray","@Test
    public void testMaxFloat_emptyArray()","0","-","-","-","-"
"1839","testMaxFloat_nullArray","@Test
    public void testMaxFloat_nullArray()","0","-","-","-","-"
"1840","testMaximumByte","@Test
    public void testMaximumByte()","0","-","-","-","-"
"1841","testMaximumDouble","@Test
    public void testMaximumDouble()","0","-","-","-","-"
"1842","testMaximumFloat","@Test
    public void testMaximumFloat()","0","-","-","-","-"
"1843","testMaximumInt","@Test
    public void testMaximumInt()","0","-","-","-","-"
"1844","testMaximumLong","@Test
    public void testMaximumLong()","0","-","-","-","-"
"1845","testMaximumShort","@Test
    public void testMaximumShort()","0","-","-","-","-"
"1846","testMaxInt","@Test
    public void testMaxInt()","0","-","-","-","-"
"1847","testMaxInt_emptyArray","@Test
    public void testMaxInt_emptyArray()","0","-","-","-","-"
"1848","testMaxInt_nullArray","@Test
    public void testMaxInt_nullArray()","0","-","-","-","-"
"1849","testMaxLong","@Test
    public void testMaxLong()","0","-","-","-","-"
"1850","testMaxLong_emptyArray","@Test
    public void testMaxLong_emptyArray()","0","-","-","-","-"
"1851","testMaxLong_nullArray","@Test
    public void testMaxLong_nullArray()","0","-","-","-","-"
"1852","testMaxShort","@Test
    public void testMaxShort()","0","-","-","-","-"
"1853","testMaxShort_emptyArray","@Test
    public void testMaxShort_emptyArray()","0","-","-","-","-"
"1854","testMaxShort_nullArray","@Test
    public void testMaxShort_nullArray()","0","-","-","-","-"
"1855","testMinByte","@Test
    public void testMinByte()","0","-","-","-","-"
"1856","testMinByte_emptyArray","@Test
    public void testMinByte_emptyArray()","0","-","-","-","-"
"1857","testMinByte_nullArray","@Test
    public void testMinByte_nullArray()","0","-","-","-","-"
"1858","testMinDouble","@Test
    public void testMinDouble()","0","-","-","-","-"
"1859","testMinDouble_emptyArray","@Test
    public void testMinDouble_emptyArray()","0","-","-","-","-"
"1860","testMinDouble_nullArray","@Test
    public void testMinDouble_nullArray()","0","-","-","-","-"
"1861","testMinFloat","@Test
    public void testMinFloat()","0","-","-","-","-"
"1862","testMinFloat_emptyArray","@Test
    public void testMinFloat_emptyArray()","0","-","-","-","-"
"1863","testMinFloat_nullArray","@Test
    public void testMinFloat_nullArray()","0","-","-","-","-"
"1864","testMinimumByte","@Test
    public void testMinimumByte()","0","-","-","-","-"
"1865","testMinimumDouble","@Test
    public void testMinimumDouble()","0","-","-","-","-"
"1866","testMinimumFloat","@Test
    public void testMinimumFloat()","0","-","-","-","-"
"1867","testMinimumInt","@Test
    public void testMinimumInt()","0","-","-","-","-"
"1868","testMinimumLong","@Test
    public void testMinimumLong()","0","-","-","-","-"
"1869","testMinimumShort","@Test
    public void testMinimumShort()","0","-","-","-","-"
"1870","testMinInt","@Test
    public void testMinInt()","0","-","-","-","-"
"1871","testMinInt_emptyArray","@Test
    public void testMinInt_emptyArray()","0","-","-","-","-"
"1872","testMinInt_nullArray","@Test
    public void testMinInt_nullArray()","0","-","-","-","-"
"1873","testMinLong","@Test
    public void testMinLong()","0","-","-","-","-"
"1874","testMinLong_emptyArray","@Test
    public void testMinLong_emptyArray()","0","-","-","-","-"
"1875","testMinLong_nullArray","@Test
    public void testMinLong_nullArray()","0","-","-","-","-"
"1876","testMinShort","@Test
    public void testMinShort()","0","-","-","-","-"
"1877","testMinShort_emptyArray","@Test
    public void testMinShort_emptyArray()","0","-","-","-","-"
"1878","testMinShort_nullArray","@Test
    public void testMinShort_nullArray()","0","-","-","-","-"
"1879","testStringCreateNumberEnsureNoPrecisionLoss","/**
     * Test for","0","-","-","-","-"
"1880","testStringToDoubleString","/**
     * Test for","0","-","-","-","-"
"1881","testStringToDoubleStringD","/**
     * Test for","0","-","-","-","-"
"1882","testToByteString","/**
     * Test for","0","-","-","-","-"
"1883","testToByteStringI","/**
     * Test for","0","-","-","-","-"
"1884","testToFloatString","/**
     * Test for","0","-","-","-","-"
"1885","testToFloatStringF","/**
     * Test for","0","-","-","-","-"
"1886","testToIntString","/**
     * Test for","0","-","-","-","-"
"1887","testToIntStringI","/**
     * Test for","0","-","-","-","-"
"1888","testToLongString","/**
     * Test for","0","-","-","-","-"
"1889","testToLongStringL","/**
     * Test for","0","-","-","-","-"
"1890","testToScaledBigDecimalBigDecimal","/**
     * Test for","0","-","-","-","-"
"1891","testToScaledBigDecimalBigDecimalIRM","/**
     * Test for","0","-","-","-","-"
"1892","testToScaledBigDecimalDouble","/**
     * Test for","0","-","-","-","-"
"1893","testToScaledBigDecimalDoubleIRM","/**
     * Test for","0","-","-","-","-"
"1894","testToScaledBigDecimalFloat","/**
     * Test for","0","-","-","-","-"
"1895","testToScaledBigDecimalFloatIRM","/**
     * Test for","0","-","-","-","-"
"1896","testToScaledBigDecimalString","/**
     * Test for","0","-","-","-","-"
"1897","testToScaledBigDecimalStringIRM","/**
     * Test for","0","-","-","-","-"
"1898","testToShortString","/**
     * Test for","0","-","-","-","-"
"1899","testToShortStringI","/**
     * Test for","0","-","-","-","-"
"1900","testConstructorExists","@Test
    public void testConstructorExists()","0","-","-","-","-"
"1901","testEnforceExceptions","@Test
    public void testEnforceExceptions()","0","-","-","-","-"
"1902","testLang381","@Test
    public void testLang381()","0","-","-","-","-"
"1903","testFirstNonBlank","@Test
    public void testFirstNonBlank()","0","-","-","-","-"
"1904","testFirstNonEmpty","@Test
    public void testFirstNonEmpty()","0","-","-","-","-"
"1905","testIsAllBlank","@Test
    public void testIsAllBlank()","0","-","-","-","-"
"1906","testIsAllEmpty","@Test
    public void testIsAllEmpty()","0","-","-","-","-"
"1907","testIsAnyBlank","@Test
    public void testIsAnyBlank()","0","-","-","-","-"
"1908","testIsAnyEmpty","@Test
    public void testIsAnyEmpty()","0","-","-","-","-"
"1909","testIsBlank","@Test
    public void testIsBlank()","0","-","-","-","-"
"1910","testIsEmpty","@Test
    public void testIsEmpty()","0","-","-","-","-"
"1911","testIsNoneBlank","@Test
    public void testIsNoneBlank()","0","-","-","-","-"
"1912","testIsNoneEmpty","@Test
    public void testIsNoneEmpty()","0","-","-","-","-"
"1913","testIsNotBlank","@Test
    public void testIsNotBlank()","0","-","-","-","-"
"1914","testIsNotEmpty","@Test
    public void testIsNotEmpty()","0","-","-","-","-"
"1915","testGetDayOfMonth","@Test
    public void testGetDayOfMonth()","0","-","-","-","-"
"1916","testGetDayOfYear","@Test
    public void testGetDayOfYear()","0","-","-","-","-"
"1917","testGetMonth","@Test
    public void testGetMonth()","0","-","-","-","-"
"1918","testGetStandaloneLongMonthNames","@Test
    public void testGetStandaloneLongMonthNames()","0","-","-","-","-"
"1919","testGetStandaloneShortMonthNames","@Test
    public void testGetStandaloneShortMonthNames()","0","-","-","-","-"
"1920","testGetYear","@Test
    public void testGetYear()","0","-","-","-","-"
"1921","testToLocalDate","/**
     * Tests","0","-","-","-","-"
"1922","testToLocalDateTime","@ParameterizedTest
    @MethodSource(TimeZonesTest.TIME_ZONE_GET_AVAILABLE_IDS)
    public void testToLocalDateTime(final String timeZoneId)","0","-","-","-","-"
"1923","testToOffsetDateTime","@ParameterizedTest
    @MethodSource(TimeZonesTest.TIME_ZONE_GET_AVAILABLE_IDS)
    public void testToOffsetDateTime(final String timeZoneId)","0","-","-","-","-"
"1924","testToZonedDateTime","@ParameterizedTest
    @MethodSource(TimeZonesTest.TIME_ZONE_GET_AVAILABLE_IDS)
    public void testToZonedDateTime(final String timeZoneId)","0","-","-","-","-"
"1925","Expected1806","Expected1806(final TimeZone zone, final String one, final String two, final String three,
            final boolean hasHalfHourOffset)","0","-","-","-","-"
"1926","checkParse","static void checkParse(final Locale locale, final Calendar cal, final SimpleDateFormat simpleDateFormat,
            final DateParser dateParser)","0","-","-","-","-"
"1927","checkParse","static void checkParse(final Locale locale, final SimpleDateFormat simpleDateFormat, final DateParser dateParser,
        final String formattedDate, final String originalFormattedDate)","0","-","-","-","-"
"1928","dateParserParameters","static Stream<Arguments> dateParserParameters()","0","-","-","-","-"
"1929","initializeCalendar","private static Calendar initializeCalendar(final TimeZone timeZone)","0","-","-","-","-"
"1930","getDateInstance","private DateParser getDateInstance(final int dateStyle, final Locale locale)","0","-","-","-","-"
"1931","getEraStart","private Calendar getEraStart(int year, final TimeZone zone, final Locale locale)","0","-","-","-","-"
"1932","getInstance","DateParser getInstance(final String format)","0","-","-","-","-"
"1933","getInstance","DateParser getInstance(final String format, final Locale locale)","0","-","-","-","-"
"1934","getInstance","private DateParser getInstance(final String format, final TimeZone timeZone)","0","-","-","-","-"
"1935","getInstance","/**
     * Override this method in derived tests to change the construction of instances
     *
     * @param dpProvider TODO
     * @param format the format string to use
     * @param timeZone the time zone to use
     * @param locale the locale to use
     * @return the DateParser instance to use for testing
     */
    protected DateParser getInstance(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider,
        final String format, final TimeZone timeZone, final Locale locale)","0","-","-","-","-"
"1936","test_Equality_Hash","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void test_Equality_Hash(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider)","0","-","-","-","-"
"1937","test1806","@Test
    public void test1806() throws ParseException","0","-","-","-","-"
"1938","test1806Argument","@Test
    public void test1806Argument()","0","-","-","-","-"
"1939","testAmPm","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testAmPm(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException","0","-","-","-","-"
"1940","testDayNumberOfWeek","@Test
    public void testDayNumberOfWeek() throws ParseException","0","-","-","-","-"
"1941","testDayOf","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testDayOf(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException","0","-","-","-","-"
"1942","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"1943","testJpLocales","@Test
    public void testJpLocales()","0","-","-","-","-"
"1944","testLANG_831","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testLANG_831(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws Exception","0","-","-","-","-"
"1945","testLANG_832","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testLANG_832(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws Exception","0","-","-","-","-"
"1946","testLang1121","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testLang1121(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException","0","-","-","-","-"
"1947","testLang1380","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testLang1380(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException","0","-","-","-","-"
"1948","testLang303","@Test
    public void testLang303() throws ParseException","0","-","-","-","-"
"1949","testLang538","@Test
    public void testLang538() throws ParseException","0","-","-","-","-"
"1950","testLang996","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testLang996(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException","0","-","-","-","-"
"1951","testLocaleMatches","@Test
    public void testLocaleMatches()","0","-","-","-","-"
"1952","testLowYearPadding","/**
     * Tests that pre-1000AD years get padded with yyyy
     *
     * @throws ParseException so we don't have to catch it
     */
    @Test
    public void testLowYearPadding() throws ParseException","0","-","-","-","-"
"1953","testMilleniumBug","@Test
    public void testMilleniumBug() throws ParseException","0","-","-","-","-"
"1954","testParseLongShort","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testParseLongShort(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider)
        throws ParseException","0","-","-","-","-"
"1955","testParseNumerics","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testParseNumerics(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider)
        throws ParseException","0","-","-","-","-"
"1956","testParseOffset","@Test
    public void testParseOffset()","0","-","-","-","-"
"1957","testParses","@Test
    // Check that all Locales can parse the formats we use
    public void testParses() throws Exception","0","-","-","-","-"
"1958","testParsesKnownJava16Ea25Failure","/**
     * Fails on Java 16 Early Access build 25 and above, last tested with build 36.
     */
    @Test
    public void testParsesKnownJava16Ea25Failure() throws Exception","0","-","-","-","-"
"1959","testParseZone","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testParseZone(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider)
        throws ParseException","0","-","-","-","-"
"1960","testPatternMatches","@Test
    public void testPatternMatches()","0","-","-","-","-"
"1961","testQuotes","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testQuotes(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException","0","-","-","-","-"
"1962","testSdfAndFdp","private void testSdfAndFdp(final TriFunction<String, TimeZone, Locale, DateParser> dbProvider, final String format,
        final String date, final boolean shouldFail) throws Exception","0","-","-","-","-"
"1963","testShortDateStyleWithLocales","/**
     * Test case for","0","-","-","-","-"
"1964","testSpecialCharacters","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testSpecialCharacters(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider)
        throws Exception","0","-","-","-","-"
"1965","testTimeZoneMatches","@Test
    public void testTimeZoneMatches()","0","-","-","-","-"
"1966","testToStringContainsName","@Test
    public void testToStringContainsName()","0","-","-","-","-"
"1967","testTzParses","@Test
    public void testTzParses() throws Exception","0","-","-","-","-"
"1968","validateSdfFormatFdpParseEquality","private void validateSdfFormatFdpParseEquality(final String formatStr, final Locale locale, final TimeZone timeZone,
        final FastDateParser dateParser, final Date inDate, final int year, final Date csDate) throws ParseException","0","-","-","-","-"
"1969","testBareGmt","@Test
    public void testBareGmt()","0","-","-","-","-"
"1970","testGetGmtTimeZone","@Test
    public void testGetGmtTimeZone()","0","-","-","-","-"
"1971","testGmtPrefix","@Test
    public void testGmtPrefix()","0","-","-","-","-"
"1972","testHoursColonMinutes","@Test
    public void testHoursColonMinutes()","0","-","-","-","-"
"1973","testHoursMinutes","@Test
    public void testHoursMinutes()","0","-","-","-","-"
"1974","testOlson","@Test
    public void testOlson()","0","-","-","-","-"
"1975","testSign","@Test
    public void testSign()","0","-","-","-","-"
"1976","testUTC","@Test
    public void testUTC()","0","-","-","-","-"
"1977","testZ","@Test
    public void testZ()","0","-","-","-","-"
"1978","testZeroOffsetsReturnSingleton","@Test
    public void testZeroOffsetsReturnSingleton()","0","-","-","-","-"
"1979","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"1980","testDateFragmentInLargerUnitWithCalendar","@Test
    public void testDateFragmentInLargerUnitWithCalendar()","0","-","-","-","-"
"1981","testDateFragmentInLargerUnitWithDate","@Test
    public void testDateFragmentInLargerUnitWithDate()","0","-","-","-","-"
"1982","testDayOfYearFragmentInLargerUnitWithCalendar","@Test
    public void testDayOfYearFragmentInLargerUnitWithCalendar()","0","-","-","-","-"
"1983","testDayOfYearFragmentInLargerUnitWithDate","@Test
    public void testDayOfYearFragmentInLargerUnitWithDate()","0","-","-","-","-"
"1984","testDaysOfMonthWithCalendar","@Test
    public void testDaysOfMonthWithCalendar()","0","-","-","-","-"
"1985","testDaysOfMonthWithDate","@Test
    public void testDaysOfMonthWithDate()","0","-","-","-","-"
"1986","testDaysOfYearWithCalendar","@Test
    public void testDaysOfYearWithCalendar()","0","-","-","-","-"
"1987","testDaysOfYearWithDate","@Test
    public void testDaysOfYearWithDate()","0","-","-","-","-"
"1988","testHourOfDayFragmentInLargerUnitWithCalendar","@Test
    public void testHourOfDayFragmentInLargerUnitWithCalendar()","0","-","-","-","-"
"1989","testHourOfDayFragmentInLargerUnitWithDate","@Test
    public void testHourOfDayFragmentInLargerUnitWithDate()","0","-","-","-","-"
"1990","testHoursOfDayWithCalendar","@Test
    public void testHoursOfDayWithCalendar()","0","-","-","-","-"
"1991","testHoursOfDayWithDate","@Test
    public void testHoursOfDayWithDate()","0","-","-","-","-"
"1992","testHoursOfMonthWithCalendar","@Test
    public void testHoursOfMonthWithCalendar()","0","-","-","-","-"
"1993","testHoursOfMonthWithDate","@Test
    public void testHoursOfMonthWithDate()","0","-","-","-","-"
"1994","testHoursOfYearWithCalendar","@Test
    public void testHoursOfYearWithCalendar()","0","-","-","-","-"
"1995","testHoursOfYearWithDate","@Test
    public void testHoursOfYearWithDate()","0","-","-","-","-"
"1996","testInvalidFragmentWithCalendar","@Test
    public void testInvalidFragmentWithCalendar()","0","-","-","-","-"
"1997","testInvalidFragmentWithDate","@Test
    public void testInvalidFragmentWithDate()","0","-","-","-","-"
"1998","testMillisecondFragmentInLargerUnitWithCalendar","@Test
    public void testMillisecondFragmentInLargerUnitWithCalendar()","0","-","-","-","-"
"1999","testMillisecondFragmentInLargerUnitWithDate","@Test
    public void testMillisecondFragmentInLargerUnitWithDate()","0","-","-","-","-"
"2000","testMillisecondsOfDayWithCalendar","@Test
    public void testMillisecondsOfDayWithCalendar()","0","-","-","-","-"
"2001","testMillisecondsOfDayWithDate","@Test
    public void testMillisecondsOfDayWithDate()","0","-","-","-","-"
"2002","testMillisecondsOfHourWithCalendar","@Test
    public void testMillisecondsOfHourWithCalendar()","0","-","-","-","-"
"2003","testMillisecondsOfHourWithDate","@Test
    public void testMillisecondsOfHourWithDate()","0","-","-","-","-"
"2004","testMillisecondsOfMinuteWithCalender","@Test
    public void testMillisecondsOfMinuteWithCalender()","0","-","-","-","-"
"2005","testMillisecondsOfMinuteWithDate","@Test
    public void testMillisecondsOfMinuteWithDate()","0","-","-","-","-"
"2006","testMillisecondsOfMonthWithCalendar","@Test
    public void testMillisecondsOfMonthWithCalendar()","0","-","-","-","-"
"2007","testMillisecondsOfMonthWithDate","@Test
    public void testMillisecondsOfMonthWithDate()","0","-","-","-","-"
"2008","testMillisecondsOfSecondWithCalendar","@Test
    public void testMillisecondsOfSecondWithCalendar()","0","-","-","-","-"
"2009","testMillisecondsOfSecondWithDate","@Test
    public void testMillisecondsOfSecondWithDate()","0","-","-","-","-"
"2010","testMillisecondsOfYearWithCalendar","@Test
    public void testMillisecondsOfYearWithCalendar()","0","-","-","-","-"
"2011","testMillisecondsOfYearWithDate","@Test
    public void testMillisecondsOfYearWithDate()","0","-","-","-","-"
"2012","testMinuteFragmentInLargerUnitWithCalendar","@Test
    public void testMinuteFragmentInLargerUnitWithCalendar()","0","-","-","-","-"
"2013","testMinuteFragmentInLargerUnitWithDate","@Test
    public void testMinuteFragmentInLargerUnitWithDate()","0","-","-","-","-"
"2014","testMinutesOfDayWithCalendar","@Test
    public void testMinutesOfDayWithCalendar()","0","-","-","-","-"
"2015","testMinutesOfDayWithDate","@Test
    public void testMinutesOfDayWithDate()","0","-","-","-","-"
"2016","testMinutesOfHourWithCalendar","@Test
    public void testMinutesOfHourWithCalendar()","0","-","-","-","-"
"2017","testMinutesOfHourWithDate","@Test
    public void testMinutesOfHourWithDate()","0","-","-","-","-"
"2018","testMinutesOfMonthWithCalendar","@Test
    public void testMinutesOfMonthWithCalendar()","0","-","-","-","-"
"2019","testMinutesOfMonthWithDate","@Test
    public void testMinutesOfMonthWithDate()","0","-","-","-","-"
"2020","testMinutesOfYearWithCalendar","@Test
    public void testMinutesOfYearWithCalendar()","0","-","-","-","-"
"2021","testMinutesOfYearWithDate","@Test
    public void testMinutesOfYearWithDate()","0","-","-","-","-"
"2022","testMinutesOfYearWithWrongOffsetBugWithCalendar","@Test
    public void testMinutesOfYearWithWrongOffsetBugWithCalendar()","0","-","-","-","-"
"2023","testNullCalendar","@Test
    public void testNullCalendar()","0","-","-","-","-"
"2024","testNullDate","@Test
    public void testNullDate()","0","-","-","-","-"
"2025","testSecondFragmentInLargerUnitWithCalendar","@Test
    public void testSecondFragmentInLargerUnitWithCalendar()","0","-","-","-","-"
"2026","testSecondFragmentInLargerUnitWithDate","@Test
    public void testSecondFragmentInLargerUnitWithDate()","0","-","-","-","-"
"2027","testSecondsOfDayWithCalendar","@Test
    public void testSecondsOfDayWithCalendar()","0","-","-","-","-"
"2028","testSecondsOfDayWithDate","@Test
    public void testSecondsOfDayWithDate()","0","-","-","-","-"
"2029","testSecondsofHourWithCalendar","@Test
    public void testSecondsofHourWithCalendar()","0","-","-","-","-"
"2030","testSecondsofHourWithDate","@Test
    public void testSecondsofHourWithDate()","0","-","-","-","-"
"2031","testSecondsofMinuteWithCalendar","@Test
    public void testSecondsofMinuteWithCalendar()","0","-","-","-","-"
"2032","testSecondsofMinuteWithDate","@Test
    public void testSecondsofMinuteWithDate()","0","-","-","-","-"
"2033","testSecondsOfMonthWithCalendar","@Test
    public void testSecondsOfMonthWithCalendar()","0","-","-","-","-"
"2034","testSecondsOfMonthWithDate","@Test
    public void testSecondsOfMonthWithDate()","0","-","-","-","-"
"2035","testSecondsOfYearWithCalendar","@Test
    public void testSecondsOfYearWithCalendar()","0","-","-","-","-"
"2036","testSecondsOfYearWithDate","@Test
    public void testSecondsOfYearWithDate()","0","-","-","-","-"
"2037","baseRoundTest","/**
     * When using this basetest all extremes are tested.<br>
     * It will test the Date, Calendar and Object-implementation<br>
     * lastRoundDownDate should round down to roundedDownDate<br>
     * lastRoundDownDate + 1 millisecond should round up to roundedUpDate
     *
     * @param roundedUpDate the next rounded date after <strong>roundedDownDate</strong> when using <strong>calendarField</strong>
     * @param roundedDownDate the result if <strong>lastRoundDownDate</strong> was rounded with <strong>calendarField</strong>
     * @param lastRoundDownDate rounding this value with <strong>calendarField</strong> will result in <strong>roundedDownDate</strong>
     * @param calendarField a Calendar.field value
     */
    protected void baseRoundTest(final Date roundedUpDate, final Date roundedDownDate, final Date lastRoundDownDate, final int calendarField)","0","-","-","-","-"
"2038","baseTruncateTest","/**
     * When using this basetest all extremes are tested.<br>
     * It will test the Date, Calendar and Object-implementation<br>
     * lastTruncateDate should round down to truncatedDate<br>
     * lastTruncateDate + 1 millisecond should never round down to truncatedDate
     *
     * @param truncatedDate expected Date when <strong>lastTruncateDate</strong> is truncated with <strong>calendarField</strong>
     * @param lastTruncateDate the last possible Date which will truncate to <strong>truncatedDate</strong> with <strong>calendarField</strong>
     * @param calendarField a Calendar.field value
     */
    protected void baseTruncateTest(final Date truncatedDate, final Date lastTruncateDate, final int calendarField)","0","-","-","-","-"
"2039","roundToJanuaryFirst","/**
     *
     * Any January 1 could be considered as the ultimate extreme.
     * Instead of comparing the results if the input has a difference of 1 millisecond we check the output to be exactly January first.
     *
     * @param minDate the lower bound
     * @param maxDate the upper bound
     * @param calendarField a Calendar.field value
     */
    protected void roundToJanuaryFirst(final Date minDate, final Date maxDate, final int calendarField)","0","-","-","-","-"
"2040","setUp","@BeforeEach
    public void setUp() throws Exception","0","-","-","-","-"
"2041","testRoundAmPm","/**
     * Tests DateUtils.round()-method with Calendar.AM_PM
     * Includes rounding the extremes of both AM and PM of one day
     * Includes rounding to January 1
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRoundAmPm() throws Exception","0","-","-","-","-"
"2042","testRoundDate","/**
     * Tests DateUtils.round()-method with Calendar.DATE
     * Includes rounding the extremes of one day
     * Includes rounding to January 1
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRoundDate() throws Exception","0","-","-","-","-"
"2043","testRoundDayOfMonth","/**
     * Tests DateUtils.round()-method with Calendar.DAY_OF_MONTH
     * Includes rounding the extremes of one day
     * Includes rounding to January 1
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRoundDayOfMonth() throws Exception","0","-","-","-","-"
"2044","testRoundHour","/**
     * Tests DateUtils.round()-method with Calendar.HOUR
     * Includes rounding the extremes of one hour
     * Includes rounding to January 1
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRoundHour() throws Exception","0","-","-","-","-"
"2045","testRoundHourOfDay","/**
     * Tests DateUtils.round()-method with Calendar.HOUR_OF_DAY
     * Includes rounding the extremes of one hour
     * Includes rounding to January 1
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRoundHourOfDay() throws Exception","0","-","-","-","-"
"2046","testRoundMilliSecond","/**
     * Tests DateUtils.round()-method with Calendar.MILLISECOND
     * Includes rounding the extremes of one second
     * Includes rounding to January 1
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRoundMilliSecond() throws Exception","0","-","-","-","-"
"2047","testRoundMinute","/**
     * Tests DateUtils.round()-method with Calendar.MINUTE
     * Includes rounding the extremes of one minute
     * Includes rounding to January 1
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRoundMinute() throws Exception","0","-","-","-","-"
"2048","testRoundMonth","/**
     * Tests DateUtils.round()-method with Calendar.MONTH
     * Includes rounding months with 28, 29, 30 and 31 days
     * Includes rounding to January 1
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRoundMonth() throws Exception","0","-","-","-","-"
"2049","testRoundSecond","/**
     * Tests DateUtils.round()-method with Calendar.SECOND
     * Includes rounding the extremes of one second
     * Includes rounding to January 1
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRoundSecond() throws Exception","0","-","-","-","-"
"2050","testRoundSemiMonth","/**
     * Tests DateUtils.round()-method with DateUtils.SEMI_MONTH
     * Includes rounding months with 28, 29, 30 and 31 days, each with first and second half
     * Includes rounding to January 1
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRoundSemiMonth() throws Exception","0","-","-","-","-"
"2051","testRoundYear","/**
     * Tests DateUtils.round()-method with Calendar.Year
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRoundYear() throws Exception","0","-","-","-","-"
"2052","testTruncateAmPm","/**
     * Test DateUtils.truncate()-method with Calendar.AM_PM
     * Includes truncating the extremes of both AM and PM of one day
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testTruncateAmPm() throws Exception","0","-","-","-","-"
"2053","testTruncateDate","/**
     * Test DateUtils.truncate()-method with Calendar.DATE
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testTruncateDate() throws Exception","0","-","-","-","-"
"2054","testTruncateDayOfMonth","/**
     * Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testTruncateDayOfMonth() throws Exception","0","-","-","-","-"
"2055","testTruncateHour","/**
     * Test DateUtils.truncate()-method with Calendar.HOUR
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testTruncateHour() throws Exception","0","-","-","-","-"
"2056","testTruncateHourOfDay","/**
     * Test DateUtils.truncate()-method with Calendar.HOUR_OF_DAY
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testTruncateHourOfDay() throws Exception","0","-","-","-","-"
"2057","testTruncateMilliSecond","/**
     * Test DateUtils.truncate()-method with Calendar.SECOND
     */
    @Test
    public void testTruncateMilliSecond()","0","-","-","-","-"
"2058","testTruncateMinute","/**
     * Test DateUtils.truncate()-method with Calendar.MINUTE
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testTruncateMinute() throws Exception","0","-","-","-","-"
"2059","testTruncateMonth","/**
     * Test DateUtils.truncate()-method with Calendar.MONTH
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testTruncateMonth() throws Exception","0","-","-","-","-"
"2060","testTruncateSecond","/**
     * Test DateUtils.truncate()-method with Calendar.SECOND
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testTruncateSecond() throws Exception","0","-","-","-","-"
"2061","testTruncateSemiMonth","/**
     * Test DateUtils.truncate()-method with DateUtils.SEMI_MONTH
     * Includes truncating months with 28, 29, 30 and 31 days, each with first and second half
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testTruncateSemiMonth() throws Exception","0","-","-","-","-"
"2062","testTruncateYear","/**
     * Test DateUtils.truncate()-method with Calendar.YEAR
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testTruncateYear() throws Exception","0","-","-","-","-"
"2063","testToTimeZone","@Test
    public void testToTimeZone()","0","-","-","-","-"
"2064","assertEqualDuration","private void assertEqualDuration(final String expected, final int[] start, final int[] end, final String format)","0","-","-","-","-"
"2065","assertEqualDuration","private void assertEqualDuration(final String message, final String expected, final int[] start, final int[] end, final String format)","0","-","-","-","-"
"2066","bruteForce","private void bruteForce(final int year, final int month, final int day, final String format, final int calendarType)","0","-","-","-","-"
"2067","createTokenWithCount","private DurationFormatUtils.Token createTokenWithCount(final CharSequence value, final int count)","0","-","-","-","-"
"2068","testAlternatingLiteralOptionals","@Test
    public void testAlternatingLiteralOptionals()","0","-","-","-","-"
"2069","testBugzilla38401","/** See https://issues.apache.org/bugzilla/show_bug.cgi?id=38401 */
    @Test
    public void testBugzilla38401()","0","-","-","-","-"
"2070","testConstructor","@SuppressWarnings(""deprecation"")
    @Test
    public void testConstructor()","0","-","-","-","-"
"2071","testDurationsByBruteForce","@Test
    public void testDurationsByBruteForce()","0","-","-","-","-"
"2072","testEdgeDurations","/** Attempting to test edge cases in DurationFormatUtils.formatPeriod. */
    @Test
    @DefaultTimeZone(TimeZones.GMT_ID)
    public void testEdgeDurations()","0","-","-","-","-"
"2073","testEmptyOptionals","@Test
    public void testEmptyOptionals()","0","-","-","-","-"
"2074","testFormatDuration","@Test
    public void testFormatDuration()","0","-","-","-","-"
"2075","testFormatDurationHMS","@Test
    public void testFormatDurationHMS()","0","-","-","-","-"
"2076","testFormatDurationISO","@Test
    public void testFormatDurationISO()","0","-","-","-","-"
"2077","testFormatDurationPluralWords","/**
     * Tests that ""1 &lt;unit&gt;s"" gets converted to ""1 &lt;unit&gt;"" but that ""11 &lt;unit&gt;s"" is left alone.
     */
    @Test
    public void testFormatDurationPluralWords()","0","-","-","-","-"
"2078","testFormatDurationWords","@Test
    public void testFormatDurationWords()","0","-","-","-","-"
"2079","testFormatNegativeDuration","@Test
    public void testFormatNegativeDuration()","0","-","-","-","-"
"2080","testFormatNegativeDurationHMS","@Test
    public void testFormatNegativeDurationHMS()","0","-","-","-","-"
"2081","testFormatNegativeDurationISO","@Test
    public void testFormatNegativeDurationISO()","0","-","-","-","-"
"2082","testFormatNegativeDurationWords","@Test
    public void testFormatNegativeDurationWords()","0","-","-","-","-"
"2083","testFormatPeriod","@Test
    public void testFormatPeriod()","0","-","-","-","-"
"2084","testFormatPeriodeStartGreaterEnd","@Test
    public void testFormatPeriodeStartGreaterEnd()","0","-","-","-","-"
"2085","testFormatPeriodISO","@SuppressWarnings(""deprecation"")
    @Test
    public void testFormatPeriodISO()","0","-","-","-","-"
"2086","testFormatPeriodISOMethod","@Test
    public void testFormatPeriodISOMethod()","0","-","-","-","-"
"2087","testFormatPeriodISOStartGreaterEnd","@Test
    public void testFormatPeriodISOStartGreaterEnd()","0","-","-","-","-"
"2088","testFourYears","/**
     * Takes 8 seconds to run.
     */
    @Test
    public void testFourYears()","0","-","-","-","-"
"2089","testJiraLang281","@Test
    public void testJiraLang281()","0","-","-","-","-"
"2090","testLANG815","@Test
    public void testLANG815()","0","-","-","-","-"
"2091","testLANG981","@Test
    public void testLANG981()","0","-","-","-","-"
"2092","testLANG982","@Test
    public void testLANG982()","0","-","-","-","-"
"2093","testLANG984","@Test
    public void testLANG984()","0","-","-","-","-"
"2094","testLexx","@Test
    public void testLexx()","0","-","-","-","-"
"2095","testLiteralPrefixOptionalToken","@Test
    public void testLiteralPrefixOptionalToken()","0","-","-","-","-"
"2096","testLowDurations","@Test
    public void testLowDurations()","0","-","-","-","-"
"2097","testMultipleOptionalBlocks","@Test
    public void testMultipleOptionalBlocks()","0","-","-","-","-"
"2098","testOptionalLiteralSpecialCharacters","@Test
    public void testOptionalLiteralSpecialCharacters()","0","-","-","-","-"
"2099","testOptionalToken","@Test
    public void testOptionalToken()","0","-","-","-","-"
"2100","testUnmatchedOptionalTokens","@Test
    public void testUnmatchedOptionalTokens()","0","-","-","-","-"
"2101","Expected1806","Expected1806(final TimeZone zone, final String one, final String two, final String three)","0","-","-","-","-"
"2102","initializeCalendar","private static Calendar initializeCalendar(final TimeZone tz)","0","-","-","-","-"
"2103","getDateInstance","private DatePrinter getDateInstance(final int dateStyle, final Locale locale)","0","-","-","-","-"
"2104","getInstance","DatePrinter getInstance(final String format)","0","-","-","-","-"
"2105","getInstance","private DatePrinter getInstance(final String format, final Locale locale)","0","-","-","-","-"
"2106","getInstance","private DatePrinter getInstance(final String format, final TimeZone timeZone)","0","-","-","-","-"
"2107","getInstance","/**
     * Override this method in derived tests to change the construction of instances
     *
     * @param format   the format string to use
     * @param timeZone the time zone to use
     * @param locale   the locale to use
     * @return the DatePrinter to use for testing
     */
    protected DatePrinter getInstance(final String format, final TimeZone timeZone, final Locale locale)","0","-","-","-","-"
"2108","test1806","@Test
    public void test1806()","0","-","-","-","-"
"2109","test1806Argument","@Test
    public void test1806Argument()","0","-","-","-","-"
"2110","testAppendableOptions","@Test
    public void testAppendableOptions()","0","-","-","-","-"
"2111","testDayNumberOfWeek","@Test
    public void testDayNumberOfWeek()","0","-","-","-","-"
"2112","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"2113","testFormat","@DefaultLocale(language = ""en"", country = ""US"")
    @DefaultTimeZone(""America/New_York"")
    @Test
    public void testFormat()","0","-","-","-","-"
"2114","testHourFormats","@Test
    public void testHourFormats()","0","-","-","-","-"
"2115","testLang1103","@Test
    public void testLang1103()","0","-","-","-","-"
"2116","testLang303","@Test
    public void testLang303()","0","-","-","-","-"
"2117","testLang538","@Test
    public void testLang538()","0","-","-","-","-"
"2118","testLang645","@Test
    public void testLang645()","0","-","-","-","-"
"2119","testLang916","/**
     * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916), the format method did contain a bug: it did not use the TimeZone data.
     *
     * This method test that the bug is fixed.
     */
    @Test
    public void testLang916()","0","-","-","-","-"
"2120","testLocaleMatches","@Test
    public void testLocaleMatches()","0","-","-","-","-"
"2121","testLowYearPadding","/**
     * Tests that pre-1000AD years get padded with yyyy
     */
    @Test
    public void testLowYearPadding()","0","-","-","-","-"
"2122","testMilleniumBug","/**
     * Show Bug #39410 is solved
     */
    @Test
    public void testMilleniumBug()","0","-","-","-","-"
"2123","testPatternMatches","@Test
    public void testPatternMatches()","0","-","-","-","-"
"2124","testShortDateStyleWithLocales","/**
     * Test case for","0","-","-","-","-"
"2125","testSimpleDate","/**
     * testLowYearPadding showed that the date was buggy This test confirms it, getting 366 back as a date
     */
    @Test
    public void testSimpleDate()","0","-","-","-","-"
"2126","testStringBufferOptions","@SuppressWarnings(""deprecation"")
    @Test
    public void testStringBufferOptions()","0","-","-","-","-"
"2127","testTimeZoneAsZ","@DefaultTimeZone(""UTC"")
    @Test
    public void testTimeZoneAsZ()","0","-","-","-","-"
"2128","testTimeZoneMatches","@Test
    public void testTimeZoneMatches()","0","-","-","-","-"
"2129","testToStringContainsName","@Test
    public void testToStringContainsName()","0","-","-","-","-"
"2130","testWeekYear","@DefaultLocale(language = ""en"", country = ""US"")
    @DefaultTimeZone(""America/New_York"")
    @Test
    public void testWeekYear()","0","-","-","-","-"
"2131","createMockStopWatch","/**
     * <p>
     * Creates a suspended StopWatch object which appears to have elapsed for the requested amount of time in nanoseconds.
     * <p>
     *
     * <pre>
     * // Create a mock StopWatch with a time of 2:59:01.999
     * final long nanos = TimeUnit.HOURS.toNanos(2) + TimeUnit.MINUTES.toNanos(59) + TimeUnit.SECONDS.toNanos(1) + TimeUnit.MILLISECONDS.toNanos(999);
     * final StopWatch watch = createMockStopWatch(nanos);
     * </pre>
     *
     * @param nanos Time in nanoseconds to have elapsed on the stop watch
     * @return StopWatch in a suspended state with the elapsed time
     */
    private StopWatch createMockStopWatch(final long nanos)","0","-","-","-","-"
"2132","set","private StopWatch set(final StopWatch watch, final long nanos)","0","-","-","-","-"
"2133","sleepPlus1","/**
     * Sleeps the requested duration plus one millisecond. On Java 8, sleeping for 2 or 20 millis can sleep for a tiny bit less.
     *
     * @param duration How long to sleep.
     * @throws InterruptedException if any thread has interrupted the current thread.
     */
    private void sleepPlus1(final Duration duration) throws InterruptedException","0","-","-","-","-"
"2134","testBadStates","/**
     * Tests bad states.
     */
    @Test
    public void testBadStates()","0","-","-","-","-"
"2135","testBooleanStates","@Test
    public void testBooleanStates()","0","-","-","-","-"
"2136","testFormatSplitTime","@Test
    public void testFormatSplitTime()","0","-","-","-","-"
"2137","testFormatSplitTimeWithMessage","@Test
    public void testFormatSplitTimeWithMessage()","0","-","-","-","-"
"2138","testFormatTime","@Test
    public void testFormatTime()","0","-","-","-","-"
"2139","testFormatTimeWithMessage","@Test
    public void testFormatTimeWithMessage()","0","-","-","-","-"
"2140","testGet","@Test
    public void testGet() throws Throwable","0","-","-","-","-"
"2141","testGetDuration","@Test
    public void testGetDuration() throws InterruptedException","0","-","-","-","-"
"2142","testGetSplitDuration","@Test
    public void testGetSplitDuration()","0","-","-","-","-"
"2143","testGetStartInstant","@Test
    public void testGetStartInstant()","0","-","-","-","-"
"2144","testGetStartTime","@Test
    public void testGetStartTime()","0","-","-","-","-"
"2145","testGetTime","@RepeatedTest(10)
    public void testGetTime() throws InterruptedException","0","-","-","-","-"
"2146","testGetWithTimeUnit","@Test
    public void testGetWithTimeUnit()","0","-","-","-","-"
"2147","testLang315","@Test
    public void testLang315() throws InterruptedException","0","-","-","-","-"
"2148","testMessage","@Test
    public void testMessage()","0","-","-","-","-"
"2149","testRun","@Test
    public void testRun() throws Throwable","0","-","-","-","-"
"2150","testSimple","@Test
    public void testSimple() throws InterruptedException","0","-","-","-","-"
"2151","testSplit","@Test
    public void testSplit() throws InterruptedException","0","-","-","-","-"
"2152","testStatic","@Test
    public void testStatic()","0","-","-","-","-"
"2153","testStopInstantSimple","@Test
    public void testStopInstantSimple() throws InterruptedException","0","-","-","-","-"
"2154","testStopTimeSimple","@Test
    public void testStopTimeSimple() throws InterruptedException","0","-","-","-","-"
"2155","testSuspend","@Test
    public void testSuspend() throws InterruptedException","0","-","-","-","-"
"2156","testToSplitString","@Test
    public void testToSplitString() throws InterruptedException","0","-","-","-","-"
"2157","testToSplitStringWithMessage","@Test
    public void testToSplitStringWithMessage() throws InterruptedException","0","-","-","-","-"
"2158","testToString","@Test
    public void testToString() throws InterruptedException","0","-","-","-","-"
"2159","testToStringWithMessage","@Test
    public void testToStringWithMessage() throws InterruptedException","0","-","-","-","-"
"2160","throwIOException","private int throwIOException() throws IOException","0","-","-","-","-"
"2161","measureTime","private AtomicLongArray measureTime(final Format printer, final Format parser) throws InterruptedException","0","-","-","-","-"
"2162","test_changeDefault_Locale_DateInstance","@DefaultLocale(language = ""en"", country = ""US"")
    @Test
    public void test_changeDefault_Locale_DateInstance()","0","-","-","-","-"
"2163","test_changeDefault_Locale_DateTimeInstance","@DefaultLocale(language = ""en"", country = ""US"")
    @Test
    public void test_changeDefault_Locale_DateTimeInstance()","0","-","-","-","-"
"2164","test_getInstance","@Test
    public void test_getInstance()","0","-","-","-","-"
"2165","test_getInstance_String","@Test
    public void test_getInstance_String()","0","-","-","-","-"
"2166","test_getInstance_String_Locale","@DefaultLocale(language = ""en"", country = ""US"")
    @Test
    public void test_getInstance_String_Locale()","0","-","-","-","-"
"2167","test_getInstance_String_TimeZone","@DefaultLocale(language = ""en"", country = ""US"")
    @DefaultTimeZone(""America/New_York"")
    @Test
    public void test_getInstance_String_TimeZone()","0","-","-","-","-"
"2168","test_getInstance_String_TimeZone_Locale","@DefaultLocale(language = ""en"", country = ""US"")
    @DefaultTimeZone(""America/New_York"")
    @Test
    public void test_getInstance_String_TimeZone_Locale()","0","-","-","-","-"
"2169","testCheckDefaults","@Test
    public void testCheckDefaults()","0","-","-","-","-"
"2170","testCheckDifferingStyles","@Test
    public void testCheckDifferingStyles()","0","-","-","-","-"
"2171","testDateDefaults","@Test
    public void testDateDefaults()","0","-","-","-","-"
"2172","testLang1152","@Test
    public void testLang1152()","0","-","-","-","-"
"2173","testLang1267","@Test
    public void testLang1267()","0","-","-","-","-"
"2174","testLang1641","@Test
    public void testLang1641()","0","-","-","-","-"
"2175","testLang954","/**
     * According to LANG-954 (https://issues.apache.org/jira/browse/LANG-954) this is broken in Android 2.1.
     */
    @Test
    public void testLang954()","0","-","-","-","-"
"2176","testParseCentralEuropeanSummerTime","/**
     * Tests [LANG-1767] FastDateFormat.parse can not recognize ""CEST"" Timezone.
     *
     * @throws ParseException Throws on test failure.
     */
    @Test
    public void testParseCentralEuropeanSummerTime() throws ParseException","0","-","-","-","-"
"2177","testParseSync","@Test
    public void testParseSync() throws InterruptedException","0","-","-","-","-"
"2178","format","@Override
            public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition fieldPosition)","0","-","-","-","-"
"2179","parseObject","@Override
            public Object parseObject(final String source, final ParsePosition pos)","0","-","-","-","-"
"2180","testStandaloneLongMonthForm","@Test
    public void testStandaloneLongMonthForm()","0","-","-","-","-"
"2181","testStandaloneShortMonthForm","@Test
    public void testStandaloneShortMonthForm()","0","-","-","-","-"
"2182","testTimeDateDefaults","@Test
    public void testTimeDateDefaults()","0","-","-","-","-"
"2183","testTimeDefaults","@Test
    public void testTimeDefaults()","0","-","-","-","-"
"2184","data","public static Stream<TimeZone> data()","0","-","-","-","-"
"2185","testCalendarTimezoneRespected","@ParameterizedTest
    @MethodSource(""data"")
    public void testCalendarTimezoneRespected(final TimeZone timeZone)","0","-","-","-","-"
"2186","assertCalendarsEquals","/**
     * Used to check that Calendar objects are close enough
     * delta is in milliseconds
     */
    private static void assertCalendarsEquals(final String message, final Calendar cal1, final Calendar cal2, final long delta)","0","-","-","-","-"
"2187","assertWeekIterator","/**
     * This checks that this is a 7 element iterator of Calendar objects
     * that are dates (no time), and exactly 1 day spaced after each other.
     */
    private static void assertWeekIterator(final Iterator<?> it, final Calendar start)","0","-","-","-","-"
"2188","assertWeekIterator","/**
     * This checks that this is a 7 divisible iterator of Calendar objects
     * that are dates (no time), and exactly 1 day spaced after each other
     * (in addition to the proper start and stop dates)
     */
    private static void assertWeekIterator(final Iterator<?> it, final Calendar start, final Calendar end)","0","-","-","-","-"
"2189","assertWeekIterator","/**
     * Convenience method for when working with Date objects
     */
    private static void assertWeekIterator(final Iterator<?> it, final Date start, final Date end)","0","-","-","-","-"
"2190","classSetup","@BeforeAll
    public static void classSetup()","0","-","-","-","-"
"2191","afterEachResetTimeZones","@AfterEach
    public void afterEachResetTimeZones()","0","-","-","-","-"
"2192","assertDate","private void assertDate(final Date date, final int year, final int month, final int day, final int hour, final int min, final int sec, final int mil)","0","-","-","-","-"
"2193","setUp","@BeforeEach
    public void setUp() throws Exception","0","-","-","-","-"
"2194","testAddDays","@Test
    public void testAddDays() throws Exception","0","-","-","-","-"
"2195","testAddHours","@Test
    public void testAddHours() throws Exception","0","-","-","-","-"
"2196","testAddMilliseconds","@Test
    public void testAddMilliseconds() throws Exception","0","-","-","-","-"
"2197","testAddMinutes","@Test
    public void testAddMinutes() throws Exception","0","-","-","-","-"
"2198","testAddMonths","@Test
    public void testAddMonths() throws Exception","0","-","-","-","-"
"2199","testAddSeconds","@Test
    public void testAddSeconds() throws Exception","0","-","-","-","-"
"2200","testAddWeeks","@Test
    public void testAddWeeks() throws Exception","0","-","-","-","-"
"2201","testAddYears","@Test
    public void testAddYears() throws Exception","0","-","-","-","-"
"2202","testCeiling","/**
     * Tests various values with the ceiling method
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testCeiling() throws Exception","0","-","-","-","-"
"2203","testCeiling_Bugzilla_31395","/**
     * Tests various values with the ceiling method
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testCeiling_Bugzilla_31395() throws Exception","0","-","-","-","-"
"2204","testCeiling_MET","/**
     * Tests various values with the ceiling method
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testCeiling_MET() throws Exception","0","-","-","-","-"
"2205","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"2206","testIsSameDay_Cal","@Test
    public void testIsSameDay_Cal()","0","-","-","-","-"
"2207","testIsSameDay_CalNotNullNull","@Test
    public void testIsSameDay_CalNotNullNull()","0","-","-","-","-"
"2208","testIsSameDay_CalNullNotNull","@Test
    public void testIsSameDay_CalNullNotNull()","0","-","-","-","-"
"2209","testIsSameDay_CalNullNull","@Test
    public void testIsSameDay_CalNullNull()","0","-","-","-","-"
"2210","testIsSameDay_Date","@Test
    public void testIsSameDay_Date()","0","-","-","-","-"
"2211","testIsSameDay_DateNotNullNull","@Test
    public void testIsSameDay_DateNotNullNull()","0","-","-","-","-"
"2212","testIsSameDay_DateNullNotNull","@Test
    public void testIsSameDay_DateNullNotNull()","0","-","-","-","-"
"2213","testIsSameDay_DateNullNull","@Test
    public void testIsSameDay_DateNullNull()","0","-","-","-","-"
"2214","testIsSameInstant_Cal","@Test
    public void testIsSameInstant_Cal()","0","-","-","-","-"
"2215","testIsSameInstant_CalNotNullNull","@Test
    public void testIsSameInstant_CalNotNullNull()","0","-","-","-","-"
"2216","testIsSameInstant_CalNullNotNull","@Test
    public void testIsSameInstant_CalNullNotNull()","0","-","-","-","-"
"2217","testIsSameInstant_CalNullNull","@Test
    public void testIsSameInstant_CalNullNull()","0","-","-","-","-"
"2218","testIsSameInstant_Date","@Test
    public void testIsSameInstant_Date()","0","-","-","-","-"
"2219","testIsSameInstant_DateNotNullNull","@Test
    public void testIsSameInstant_DateNotNullNull()","0","-","-","-","-"
"2220","testIsSameInstant_DateNullNotNull","@Test
    public void testIsSameInstant_DateNullNotNull()","0","-","-","-","-"
"2221","testIsSameInstant_DateNullNull","@Test
    public void testIsSameInstant_DateNullNull()","0","-","-","-","-"
"2222","testIsSameLocalTime_Cal","@Test
    public void testIsSameLocalTime_Cal()","0","-","-","-","-"
"2223","testIsSameLocalTime_CalNotNullNull","@Test
    public void testIsSameLocalTime_CalNotNullNull()","0","-","-","-","-"
"2224","testIsSameLocalTime_CalNullNotNull","@Test
    public void testIsSameLocalTime_CalNullNotNull()","0","-","-","-","-"
"2225","testIsSameLocalTime_CalNullNull","@Test
    public void testIsSameLocalTime_CalNullNull()","0","-","-","-","-"
"2226","testIteratorEx","/**
     * Tests the iterator exceptions
     */
    @Test
    public void testIteratorEx()","0","-","-","-","-"
"2227","testLang530","/** See https://issues.apache.org/jira/browse/LANG-530 */
    @SuppressWarnings(""deprecation"")
    @Test
    public void testLang530() throws ParseException","0","-","-","-","-"
"2228","testLANG799","@Test
    public void testLANG799() throws ParseException","0","-","-","-","-"
"2229","testLANG799_DE_FAIL","/** Parse English date with German Locale. */
    @DefaultLocale(language = ""de"")
    @Test
    public void testLANG799_DE_FAIL()","0","-","-","-","-"
"2230","testLANG799_DE_OK","@DefaultLocale(language = ""de"")
    @Test
    public void testLANG799_DE_OK() throws ParseException","0","-","-","-","-"
"2231","testLANG799_EN_FAIL","@DefaultLocale(language = ""en"")
    @Test
    public void testLANG799_EN_FAIL()","0","-","-","-","-"
"2232","testLANG799_EN_OK","@DefaultLocale(language = ""en"")
    @Test
    public void testLANG799_EN_OK() throws ParseException","0","-","-","-","-"
"2233","testLANG799_EN_WITH_DE_LOCALE","/** Parse German date with English Locale, specifying German Locale override. */
    @DefaultLocale(language = ""en"")
    @Test
    public void testLANG799_EN_WITH_DE_LOCALE() throws ParseException","0","-","-","-","-"
"2234","testMonthIterator","/**
     * Tests the calendar iterator for month-based ranges
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testMonthIterator() throws Exception","0","-","-","-","-"
"2235","testParse_EmptyParsers","@Test
    public void testParse_EmptyParsers()","0","-","-","-","-"
"2236","testParse_NullParsers","@Test
    public void testParse_NullParsers()","0","-","-","-","-"
"2237","testParseDate","@Test
    public void testParseDate() throws Exception","0","-","-","-","-"
"2238","testParseDate_InvalidDateString","@Test
    public void testParseDate_InvalidDateString()","0","-","-","-","-"
"2239","testParseDate_NoDateString","@Test
    public void testParseDate_NoDateString()","0","-","-","-","-"
"2240","testParseDate_Null","@Test
    public void testParseDate_Null()","0","-","-","-","-"
"2241","testParseDateWithLeniency","/** LANG-486 */
    @Test
    public void testParseDateWithLeniency() throws ParseException","0","-","-","-","-"
"2242","testRound","/**
     * Tests various values with the round method
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRound() throws Exception","0","-","-","-","-"
"2243","testRound_MET","/**
     * Tests various values with the round method
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRound_MET() throws Exception","0","-","-","-","-"
"2244","testRoundLang346","/**
     * Tests the Changes Made by LANG-346 to the DateUtils.modify() private method invoked
     * by DateUtils.round().
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testRoundLang346() throws Exception","0","-","-","-","-"
"2245","testSetDays","@Test
    public void testSetDays() throws Exception","0","-","-","-","-"
"2246","testSetHours","@Test
    public void testSetHours() throws Exception","0","-","-","-","-"
"2247","testSetMilliseconds","@Test
    public void testSetMilliseconds() throws Exception","0","-","-","-","-"
"2248","testSetMinutes","@Test
    public void testSetMinutes() throws Exception","0","-","-","-","-"
"2249","testSetMonths","@Test
    public void testSetMonths() throws Exception","0","-","-","-","-"
"2250","testSetSeconds","@Test
    public void testSetSeconds() throws Exception","0","-","-","-","-"
"2251","testSetYears","@Test
    public void testSetYears() throws Exception","0","-","-","-","-"
"2252","testToCalendar","@Test
    public void testToCalendar()","0","-","-","-","-"
"2253","testToCalendarWithDateAndTimeZoneNotNull","@Test
    public void testToCalendarWithDateAndTimeZoneNotNull()","0","-","-","-","-"
"2254","testToCalendarWithDateAndTimeZoneNull","@Test
    public void testToCalendarWithDateAndTimeZoneNull()","0","-","-","-","-"
"2255","testToCalendarWithDateNull","@Test
    public void testToCalendarWithDateNull()","0","-","-","-","-"
"2256","testToCalendarWithTimeZoneNull","@Test
    public void testToCalendarWithTimeZoneNull()","0","-","-","-","-"
"2257","testTruncate","/**
     * Tests various values with the trunc method
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testTruncate() throws Exception","0","-","-","-","-"
"2258","testTruncate_Bugzilla_25560","/**
     * Tests various values with the trunc method
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testTruncate_Bugzilla_25560() throws Exception","0","-","-","-","-"
"2259","testTruncate_Bugzilla_31395","/**
     * Tests various values with the trunc method
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testTruncate_Bugzilla_31395() throws Exception","0","-","-","-","-"
"2260","testTruncateLang59","/**
     * Tests for LANG-59
     *
     * see https://issues.apache.org/jira/browse/LANG-59
     */
    @Test
    public void testTruncateLang59()","0","-","-","-","-"
"2261","testWeekIterator","/**
     * Tests the calendar iterator for week ranges
     */
    @Test
    public void testWeekIterator()","0","-","-","-","-"
"2262","getInstance","@Override
    protected DatePrinter getInstance(final String format, final TimeZone timeZone, final Locale locale)","0","-","-","-","-"
"2263","testGetID","@Test
    public void testGetID()","0","-","-","-","-"
"2264","testGetOffset","@Test
    public void testGetOffset()","0","-","-","-","-"
"2265","testGetRawOffset","@Test
    public void testGetRawOffset()","0","-","-","-","-"
"2266","testHoursInRange","@Test
    public void testHoursInRange()","0","-","-","-","-"
"2267","testHoursOutOfRange","@Test
    public void testHoursOutOfRange()","0","-","-","-","-"
"2268","testInDaylightTime","@Test
    public void testInDaylightTime()","0","-","-","-","-"
"2269","testMinutesInRange","@Test
    public void testMinutesInRange()","0","-","-","-","-"
"2270","testMinutesOutOfRange","@Test
    public void testMinutesOutOfRange()","0","-","-","-","-"
"2271","testSetRawOffset","@Test
    public void testSetRawOffset()","0","-","-","-","-"
"2272","testToString","@Test
    public void testToString()","0","-","-","-","-"
"2273","testUseDaylightTime","@Test
    public void testUseDaylightTime()","0","-","-","-","-"
"2274","data","public static Stream<Arguments> data()","0","-","-","-","-"
"2275","testParser","@ParameterizedTest
    @MethodSource(""data"")
    public void testParser(final Calendar vulgar, final String isoForm)","0","-","-","-","-"
"2276","testPrinter","@ParameterizedTest
    @MethodSource(""data"")
    public void testPrinter(final Calendar vulgar, final String isoForm)","0","-","-","-","-"
"2277","data","public static Stream<Arguments> data()","0","-","-","-","-"
"2278","checkParse","private void checkParse(final String formattedDate, final String format, final Locale locale, final boolean valid)","0","-","-","-","-"
"2279","checkParsePosition","private void checkParsePosition(final String formattedDate, final String format, final Locale locale, final boolean valid)","0","-","-","-","-"
"2280","testLowerCase","@ParameterizedTest
    @MethodSource(""data"")
    public void testLowerCase(final String format, final String input, final Locale locale, final boolean valid)","0","-","-","-","-"
"2281","testLowerCasePP","@ParameterizedTest
    @MethodSource(""data"")
    public void testLowerCasePP(final String format, final String input, final Locale locale, final boolean valid)","0","-","-","-","-"
"2282","testOriginal","@ParameterizedTest
    @MethodSource(""data"")
    public void testOriginal(final String format, final String input, final Locale locale, final boolean valid)","0","-","-","-","-"
"2283","testOriginalPP","@ParameterizedTest
    @MethodSource(""data"")
    public void testOriginalPP(final String format, final String input, final Locale locale, final boolean valid)","0","-","-","-","-"
"2284","testUpperCase","@ParameterizedTest
    @MethodSource(""data"")
    public void testUpperCase(final String format, final String input, final Locale locale, final boolean valid)","0","-","-","-","-"
"2285","testUpperCasePP","@ParameterizedTest
    @MethodSource(""data"")
    public void testUpperCasePP(final String format, final String input, final Locale locale, final boolean valid)","0","-","-","-","-"
"2286","testInputHasLessCharacters","@Test
    public void testInputHasLessCharacters()","0","-","-","-","-"
"2287","testInputHasMoreCharacters","@Test
    public void testInputHasMoreCharacters()","0","-","-","-","-"
"2288","testInputHasPrecedingCharacters","@Test
    public void testInputHasPrecedingCharacters()","0","-","-","-","-"
"2289","testInputHasWhitespace","@Test
    public void testInputHasWhitespace()","0","-","-","-","-"
"2290","testInputHasWrongCharacters","@Test
    public void testInputHasWrongCharacters()","0","-","-","-","-"
"2291","testInputHasWrongDay","@Test
    public void testInputHasWrongDay()","0","-","-","-","-"
"2292","testInputHasWrongTimeZone","@Test
    public void testInputHasWrongTimeZone()","0","-","-","-","-"
"2293","assertFormats","private void assertFormats(final String expectedValue, final String pattern, final TimeZone timeZone, final Calendar cal)","0","-","-","-","-"
"2294","createFebruaryTestDate","private Calendar createFebruaryTestDate(final TimeZone timeZone)","0","-","-","-","-"
"2295","createJuneTestDate","private Calendar createJuneTestDate(final TimeZone timeZone)","0","-","-","-","-"
"2296","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"2297","testDateISO","@Test
    public void testDateISO()","0","-","-","-","-"
"2298","testDateTimeISO","@Test
    public void testDateTimeISO()","0","-","-","-","-"
"2299","testFormat","@Test
    public void testFormat()","0","-","-","-","-"
"2300","testFormatCalendar","@Test
    public void testFormatCalendar()","0","-","-","-","-"
"2301","testFormatUTC","@Test
    public void testFormatUTC()","0","-","-","-","-"
"2302","testGmtMinus3","private void testGmtMinus3(final String expectedValue, final String pattern)","0","-","-","-","-"
"2303","testLANG1000","@Test
    public void testLANG1000() throws Exception","0","-","-","-","-"
"2304","testLANG1462","@Test
    public void testLANG1462()","0","-","-","-","-"
"2305","testLang530","@DefaultTimeZone(""UTC"")
    @Test
    public void testLang530() throws ParseException","0","-","-","-","-"
"2306","testLang916","/**
     * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916),
     * the format method did contain a bug: it did not use the TimeZone data.
     *
     * This method test that the bug is fixed.
     */
    @Test
    public void testLang916()","0","-","-","-","-"
"2307","testSMTP","@DefaultLocale(language = ""en"")
    @Test
    public void testSMTP()","0","-","-","-","-"
"2308","testTimeISO","@Test
    public void testTimeISO()","0","-","-","-","-"
"2309","testTimeNoTISO","@Test
    public void testTimeNoTISO()","0","-","-","-","-"
"2310","testUTC","private void testUTC(final String expectedValue, final String pattern)","0","-","-","-","-"
"2311","testGetNanosOfMiili","@Test
    public void testGetNanosOfMiili()","0","-","-","-","-"
"2312","testGetNanosOfMilli","@Test
    public void testGetNanosOfMilli()","0","-","-","-","-"
"2313","testIsPositive","@Test
    public void testIsPositive()","0","-","-","-","-"
"2314","testLongToIntRangeFit","@Test
    public void testLongToIntRangeFit()","0","-","-","-","-"
"2315","testOfConsumer","@Test
    public void testOfConsumer()","0","-","-","-","-"
"2316","testOfRunnble","@Test
    public void testOfRunnble()","0","-","-","-","-"
"2317","testOfRunnbleThrowing","@Test
    public void testOfRunnbleThrowing()","0","-","-","-","-"
"2318","testSince","@Test
    public void testSince()","0","-","-","-","-"
"2319","testToDuration","@Test
    public void testToDuration()","0","-","-","-","-"
"2320","testToMillisInt","@Test
    public void testToMillisInt()","0","-","-","-","-"
"2321","testToMillisIntNullDuration","@Test
    public void testToMillisIntNullDuration()","0","-","-","-","-"
"2322","testZeroIfNull","@Test
    public void testZeroIfNull()","0","-","-","-","-"
"2323","testJava15BuggyLocaleTest","@Test
    public void testJava15BuggyLocaleTest() throws ParseException","0","-","-","-","-"
"2324","testJava15BuggyLocaleTestAll","@Test
    public void testJava15BuggyLocaleTestAll() throws ParseException","0","-","-","-","-"
"2325","testLocales","private void testLocales(final TriFunction<String, TimeZone, Locale, DateParser> dbProvider, final String format,
        final boolean eraBC) throws Exception","0","-","-","-","-"
"2326","testLocales_Long_AD","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testLocales_Long_AD(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider)
        throws Exception","0","-","-","-","-"
"2327","testLocales_Long_BC","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testLocales_Long_BC(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider)
        throws Exception","0","-","-","-","-"
"2328","testLocales_LongNoEra_AD","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testLocales_LongNoEra_AD(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider)
        throws Exception","0","-","-","-","-"
"2329","testLocales_LongNoEra_BC","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testLocales_LongNoEra_BC(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider)
        throws Exception","0","-","-","-","-"
"2330","testLocales_Short_AD","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testLocales_Short_AD(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider)
        throws Exception","0","-","-","-","-"
"2331","testLocales_Short_BC","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testLocales_Short_BC(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider)
        throws Exception","0","-","-","-","-"
"2332","testLocales_ShortNoEra_AD","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testLocales_ShortNoEra_AD(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider)
        throws Exception","0","-","-","-","-"
"2333","testLocales_ShortNoEra_BC","@ParameterizedTest
    @MethodSource(DATE_PARSER_PARAMETERS)
    public void testLocales_ShortNoEra_BC(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider)
        throws Exception","0","-","-","-","-"
"2334","testSingleLocale","private void testSingleLocale(final Locale locale) throws ParseException","0","-","-","-","-"
"2335","afterAll","@AfterAll
    public static void afterAll()","0","-","-","-","-"
"2336","getAvailableLocalesSorted","public static Locale[] getAvailableLocalesSorted()","0","-","-","-","-"
"2337","testLang1219","@Test
    public void testLang1219() throws ParseException","0","-","-","-","-"
"2338","testTimeZoneStrategy_DateFormatSymbols","@ParameterizedTest
    @MethodSource(""org.apache.commons.lang3.time.FastDateParser_TimeZoneStrategyTest#getAvailableLocalesSorted"")
    public void testTimeZoneStrategy_DateFormatSymbols(final Locale locale)","0","-","-","-","-"
"2339","testTimeZoneStrategy_TimeZone","@ParameterizedTest
    @MethodSource(""org.apache.commons.lang3.time.FastDateParser_TimeZoneStrategyTest#getAvailableLocalesSorted"")
    public void testTimeZoneStrategy_TimeZone(final Locale locale)","0","-","-","-","-"
"2340","testTimeZoneStrategyPattern","private void testTimeZoneStrategyPattern(final String languageTag, final String source) throws ParseException","0","-","-","-","-"
"2341","testTimeZoneStrategyPattern_DateFormatSymbols_getZoneStrings","private void testTimeZoneStrategyPattern_DateFormatSymbols_getZoneStrings(final Locale locale)","0","-","-","-","-"
"2342","testTimeZoneStrategyPattern_TimeZone_getAvailableIDs","/**
     * Breaks randomly on GitHub for Locale ""pt_PT"", TimeZone ""Etc/UTC"" if we do not check if the Locale's language is ""undetermined"".
     *
     * @throws ParseException
     */
    private void testTimeZoneStrategyPattern_TimeZone_getAvailableIDs(final Locale locale)","0","-","-","-","-"
"2343","testTimeZoneStrategyPatternPortugal","/**
     * Breaks randomly on GitHub for Locale ""pt_PT"", TimeZone ""Etc/UTC"" if we do not check if the Locale's language is ""undetermined"".
     *
     * <pre>","0","-","-","-","-"
"2344","testTimeZoneStrategyPattern_zh_HK_Hans","@Test
    public void testTimeZoneStrategyPattern_zh_HK_Hans() throws ParseException","0","-","-","-","-"
"2345","testTimeZoneStrategyPatternSuriname","/**
     * Breaks randomly on GitHub for Locale ""sr_ME_#Cyrl"", TimeZone ""Etc/UTC"" if we do not check if the Locale's language is ""undetermined"".
     *
     * <pre>","0","-","-","-","-"
"2346","toFailureMessage","private String toFailureMessage(final Locale locale, final String languageTag, final TimeZone timeZone)","0","-","-","-","-"
"2347","testRemoveAllBooleanOccurences","@Test
    public void testRemoveAllBooleanOccurences()","0","-","-","-","-"
"2348","testRemoveAllBooleanOccurrences","@Test
    public void testRemoveAllBooleanOccurrences()","0","-","-","-","-"
"2349","testRemoveAllByteOccurences","@Test
    public void testRemoveAllByteOccurences()","0","-","-","-","-"
"2350","testRemoveAllByteOccurrences","@Test
    public void testRemoveAllByteOccurrences()","0","-","-","-","-"
"2351","testRemoveAllCharOccurences","@Test
    public void testRemoveAllCharOccurences()","0","-","-","-","-"
"2352","testRemoveAllCharOccurrences","@Test
    public void testRemoveAllCharOccurrences()","0","-","-","-","-"
"2353","testRemoveAllDoubleOccurences","@Test
    public void testRemoveAllDoubleOccurences()","0","-","-","-","-"
"2354","testRemoveAllDoubleOccurrences","@Test
    public void testRemoveAllDoubleOccurrences()","0","-","-","-","-"
"2355","testRemoveAllFloatOccurences","@Test
    public void testRemoveAllFloatOccurences()","0","-","-","-","-"
"2356","testRemoveAllFloatOccurrences","@Test
    public void testRemoveAllFloatOccurrences()","0","-","-","-","-"
"2357","testRemoveAllIntOccurences","@Test
    public void testRemoveAllIntOccurences()","0","-","-","-","-"
"2358","testRemoveAllIntOccurrences","@Test
    public void testRemoveAllIntOccurrences()","0","-","-","-","-"
"2359","testRemoveAllLongOccurences","@Test
    public void testRemoveAllLongOccurences()","0","-","-","-","-"
"2360","testRemoveAllLongOccurrences","@Test
    public void testRemoveAllLongOccurrences()","0","-","-","-","-"
"2361","testRemoveAllObjectOccurences","@Test
    public void testRemoveAllObjectOccurences()","0","-","-","-","-"
"2362","testRemoveAllObjectOccurrences","@Test
    public void testRemoveAllObjectOccurrences()","0","-","-","-","-"
"2363","testRemoveAllShortOccurences","@Test
    public void testRemoveAllShortOccurences()","0","-","-","-","-"
"2364","testRemoveAllShortOccurrences","@Test
    public void testRemoveAllShortOccurrences()","0","-","-","-","-"
"2365","testRemoveBooleanArray","@Test
    public void testRemoveBooleanArray()","0","-","-","-","-"
"2366","testRemoveByteArray","@Test
    public void testRemoveByteArray()","0","-","-","-","-"
"2367","testRemoveCharArray","@Test
    public void testRemoveCharArray()","0","-","-","-","-"
"2368","testRemoveDoubleArray","@Test
    public void testRemoveDoubleArray()","0","-","-","-","-"
"2369","testRemoveElementBooleanArray","@Test
    public void testRemoveElementBooleanArray()","0","-","-","-","-"
"2370","testRemoveElementByteArray","@Test
    public void testRemoveElementByteArray()","0","-","-","-","-"
"2371","testRemoveElementCharArray","@Test
    public void testRemoveElementCharArray()","0","-","-","-","-"
"2372","testRemoveElementDoubleArray","@Test
    public void testRemoveElementDoubleArray()","0","-","-","-","-"
"2373","testRemoveElementFloatArray","@Test
    public void testRemoveElementFloatArray()","0","-","-","-","-"
"2374","testRemoveElementIntArray","@Test
    public void testRemoveElementIntArray()","0","-","-","-","-"
"2375","testRemoveElementLongArray","@Test
    public void testRemoveElementLongArray()","0","-","-","-","-"
"2376","testRemoveElementObjectArray","@Test
    public void testRemoveElementObjectArray()","0","-","-","-","-"
"2377","testRemoveElementShortArray","@Test
    public void testRemoveElementShortArray()","0","-","-","-","-"
"2378","testRemoveFloatArray","@Test
    public void testRemoveFloatArray()","0","-","-","-","-"
"2379","testRemoveIntArray","@Test
    public void testRemoveIntArray()","0","-","-","-","-"
"2380","testRemoveLongArray","@Test
    public void testRemoveLongArray()","0","-","-","-","-"
"2381","testRemoveNumberArray","@Test
    public void testRemoveNumberArray()","0","-","-","-","-"
"2382","testRemoveObjectArray","@Test
    public void testRemoveObjectArray()","0","-","-","-","-"
"2383","testRemoveShortArray","@Test
    public void testRemoveShortArray()","0","-","-","-","-"
"2384","testFillByteArray","@Test
    public void testFillByteArray()","0","-","-","-","-"
"2385","testFillByteArrayNull","@Test
    public void testFillByteArrayNull()","0","-","-","-","-"
"2386","testFillCharArray","@Test
    public void testFillCharArray()","0","-","-","-","-"
"2387","testFillCharArrayNull","@Test
    public void testFillCharArrayNull()","0","-","-","-","-"
"2388","testFillDoubleArray","@Test
    public void testFillDoubleArray()","0","-","-","-","-"
"2389","testFillDoubleArrayNull","@Test
    public void testFillDoubleArrayNull()","0","-","-","-","-"
"2390","testFillFloatArray","@Test
    public void testFillFloatArray()","0","-","-","-","-"
"2391","testFillFloatArrayNull","@Test
    public void testFillFloatArrayNull()","0","-","-","-","-"
"2392","testFillIntArray","@Test
    public void testFillIntArray()","0","-","-","-","-"
"2393","testFillIntArrayNull","@Test
    public void testFillIntArrayNull()","0","-","-","-","-"
"2394","testFillLongArray","@Test
    public void testFillLongArray()","0","-","-","-","-"
"2395","testFillLongArrayNull","@Test
    public void testFillLongArrayNull()","0","-","-","-","-"
"2396","testFillObjectArray","@Test
    public void testFillObjectArray()","0","-","-","-","-"
"2397","testFillObjectArrayNull","@Test
    public void testFillObjectArrayNull()","0","-","-","-","-"
"2398","testFillShortArray","@Test
    public void testFillShortArray()","0","-","-","-","-"
"2399","testFillShortArrayNull","@Test
    public void testFillShortArrayNull()","0","-","-","-","-"
"2400","testFillFunction","@Test
    public void testFillFunction() throws Exception","0","-","-","-","-"
"2401","test_booleanValues","@Test
    public void test_booleanValues()","0","-","-","-","-"
"2402","test_forEach","@Test
    public void test_forEach()","0","-","-","-","-"
"2403","test_isFalse_Boolean","@Test
    public void test_isFalse_Boolean()","0","-","-","-","-"
"2404","test_isNotFalse_Boolean","@Test
    public void test_isNotFalse_Boolean()","0","-","-","-","-"
"2405","test_isNotTrue_Boolean","@Test
    public void test_isNotTrue_Boolean()","0","-","-","-","-"
"2406","test_isTrue_Boolean","@Test
    public void test_isTrue_Boolean()","0","-","-","-","-"
"2407","test_negate_Boolean","@Test
    public void test_negate_Boolean()","0","-","-","-","-"
"2408","test_primitiveValues","@Test
    public void test_primitiveValues()","0","-","-","-","-"
"2409","test_toBoolean_Boolean","@Test
    public void test_toBoolean_Boolean()","0","-","-","-","-"
"2410","test_toBoolean_int","@Test
    public void test_toBoolean_int()","0","-","-","-","-"
"2411","test_toBoolean_int_int_int","@Test
    public void test_toBoolean_int_int_int()","0","-","-","-","-"
"2412","test_toBoolean_int_int_int_noMatch","@Test
    public void test_toBoolean_int_int_int_noMatch()","0","-","-","-","-"
"2413","test_toBoolean_Integer_Integer_Integer","@Test
    public void test_toBoolean_Integer_Integer_Integer()","0","-","-","-","-"
"2414","test_toBoolean_Integer_Integer_Integer_noMatch","@Test
    public void test_toBoolean_Integer_Integer_Integer_noMatch()","0","-","-","-","-"
"2415","test_toBoolean_Integer_Integer_Integer_nullValue","@Test
    public void test_toBoolean_Integer_Integer_Integer_nullValue()","0","-","-","-","-"
"2416","test_toBoolean_String","@Test
    public void test_toBoolean_String()","0","-","-","-","-"
"2417","test_toBoolean_String_String_String","@Test
    public void test_toBoolean_String_String_String()","0","-","-","-","-"
"2418","test_toBoolean_String_String_String_noMatch","@Test
    public void test_toBoolean_String_String_String_noMatch()","0","-","-","-","-"
"2419","test_toBoolean_String_String_String_nullValue","@Test
    public void test_toBoolean_String_String_String_nullValue()","0","-","-","-","-"
"2420","test_toBooleanDefaultIfNull_Boolean_boolean","@Test
    public void test_toBooleanDefaultIfNull_Boolean_boolean()","0","-","-","-","-"
"2421","test_toBooleanObject_int","@Test
    public void test_toBooleanObject_int()","0","-","-","-","-"
"2422","test_toBooleanObject_int_int_int","@Test
    public void test_toBooleanObject_int_int_int()","0","-","-","-","-"
"2423","test_toBooleanObject_int_int_int_noMatch","@Test
    public void test_toBooleanObject_int_int_int_noMatch()","0","-","-","-","-"
"2424","test_toBooleanObject_Integer","@Test
    public void test_toBooleanObject_Integer()","0","-","-","-","-"
"2425","test_toBooleanObject_Integer_Integer_Integer_Integer","@Test
    public void test_toBooleanObject_Integer_Integer_Integer_Integer()","0","-","-","-","-"
"2426","test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch","@Test
    public void test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch()","0","-","-","-","-"
"2427","test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue","@Test
    public void test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue()","0","-","-","-","-"
"2428","test_toBooleanObject_String","@Test
    public void test_toBooleanObject_String()","0","-","-","-","-"
"2429","test_toBooleanObject_String_String_String_String","@Test
    public void test_toBooleanObject_String_String_String_String()","0","-","-","-","-"
"2430","test_toBooleanObject_String_String_String_String_noMatch","@Test
    public void test_toBooleanObject_String_String_String_String_noMatch()","0","-","-","-","-"
"2431","test_toBooleanObject_String_String_String_String_nullValue","@Test
    public void test_toBooleanObject_String_String_String_String_nullValue()","0","-","-","-","-"
"2432","test_toInteger_boolean","@Test
    public void test_toInteger_boolean()","0","-","-","-","-"
"2433","test_toInteger_boolean_int_int","@Test
    public void test_toInteger_boolean_int_int()","0","-","-","-","-"
"2434","test_toInteger_Boolean_int_int_int","@Test
    public void test_toInteger_Boolean_int_int_int()","0","-","-","-","-"
"2435","test_toIntegerObject_boolean","@Test
    public void test_toIntegerObject_boolean()","0","-","-","-","-"
"2436","test_toIntegerObject_Boolean","@Test
    public void test_toIntegerObject_Boolean()","0","-","-","-","-"
"2437","test_toIntegerObject_boolean_Integer_Integer","@Test
    public void test_toIntegerObject_boolean_Integer_Integer()","0","-","-","-","-"
"2438","test_toIntegerObject_Boolean_Integer_Integer_Integer","@Test
    public void test_toIntegerObject_Boolean_Integer_Integer_Integer()","0","-","-","-","-"
"2439","test_toString_boolean_String_String_String","@Test
    public void test_toString_boolean_String_String_String()","0","-","-","-","-"
"2440","test_toString_Boolean_String_String_String","@Test
    public void test_toString_Boolean_String_String_String()","0","-","-","-","-"
"2441","test_toStringOnOff_boolean","@Test
    public void test_toStringOnOff_boolean()","0","-","-","-","-"
"2442","test_toStringOnOff_Boolean","@Test
    public void test_toStringOnOff_Boolean()","0","-","-","-","-"
"2443","test_toStringTrueFalse_boolean","@Test
    public void test_toStringTrueFalse_boolean()","0","-","-","-","-"
"2444","test_toStringTrueFalse_Boolean","@Test
    public void test_toStringTrueFalse_Boolean()","0","-","-","-","-"
"2445","test_toStringYesNo_boolean","@Test
    public void test_toStringYesNo_boolean()","0","-","-","-","-"
"2446","test_toStringYesNo_Boolean","@Test
    public void test_toStringYesNo_Boolean()","0","-","-","-","-"
"2447","test_values","@Test
    public void test_values()","0","-","-","-","-"
"2448","testAnd_object_emptyInput","@Test
    public void testAnd_object_emptyInput()","0","-","-","-","-"
"2449","testAnd_object_nullElementInput","@Test
    public void testAnd_object_nullElementInput()","0","-","-","-","-"
"2450","testAnd_object_nullInput","@Test
    public void testAnd_object_nullInput()","0","-","-","-","-"
"2451","testAnd_object_validInput_2items","@Test
    public void testAnd_object_validInput_2items()","0","-","-","-","-"
"2452","testAnd_object_validInput_3items","@Test
    public void testAnd_object_validInput_3items()","0","-","-","-","-"
"2453","testAnd_primitive_emptyInput","@Test
    public void testAnd_primitive_emptyInput()","0","-","-","-","-"
"2454","testAnd_primitive_nullInput","@Test
    public void testAnd_primitive_nullInput()","0","-","-","-","-"
"2455","testAnd_primitive_validInput_2items","@Test
    public void testAnd_primitive_validInput_2items()","0","-","-","-","-"
"2456","testAnd_primitive_validInput_3items","@Test
    public void testAnd_primitive_validInput_3items()","0","-","-","-","-"
"2457","testCompare","@Test
    public void testCompare()","0","-","-","-","-"
"2458","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"2459","testOneHot_object_emptyInput","@Test
    public void testOneHot_object_emptyInput()","0","-","-","-","-"
"2460","testOneHot_object_nullElementInput","@Test
    public void testOneHot_object_nullElementInput()","0","-","-","-","-"
"2461","testOneHot_object_nullInput","@Test
    public void testOneHot_object_nullInput()","0","-","-","-","-"
"2462","testOneHot_object_validInput_1item","@Test
    public void testOneHot_object_validInput_1item()","0","-","-","-","-"
"2463","testOneHot_object_validInput_2items","@Test
    public void testOneHot_object_validInput_2items()","0","-","-","-","-"
"2464","testOneHot_object_validInput_2ItemsNullsTreatedAsFalse","@Test
    public void testOneHot_object_validInput_2ItemsNullsTreatedAsFalse()","0","-","-","-","-"
"2465","testOneHot_object_validInput_3items","@Test
    public void testOneHot_object_validInput_3items()","0","-","-","-","-"
"2466","testOneHot_primitive_emptyInput","@Test
    public void testOneHot_primitive_emptyInput()","0","-","-","-","-"
"2467","testOneHot_primitive_nullInput","@Test
    public void testOneHot_primitive_nullInput()","0","-","-","-","-"
"2468","testOneHot_primitive_validInput_1item","@Test
    public void testOneHot_primitive_validInput_1item()","0","-","-","-","-"
"2469","testOneHot_primitive_validInput_2items","@Test
    public void testOneHot_primitive_validInput_2items()","0","-","-","-","-"
"2470","testOneHot_primitive_validInput_3items","@Test
    public void testOneHot_primitive_validInput_3items()","0","-","-","-","-"
"2471","testOr_object_emptyInput","@Test
    public void testOr_object_emptyInput()","0","-","-","-","-"
"2472","testOr_object_nullElementInput","@Test
    public void testOr_object_nullElementInput()","0","-","-","-","-"
"2473","testOr_object_nullInput","@Test
    public void testOr_object_nullInput()","0","-","-","-","-"
"2474","testOr_object_validInput_2items","@Test
    public void testOr_object_validInput_2items()","0","-","-","-","-"
"2475","testOr_object_validInput_3items","@Test
    public void testOr_object_validInput_3items()","0","-","-","-","-"
"2476","testOr_primitive_emptyInput","@Test
    public void testOr_primitive_emptyInput()","0","-","-","-","-"
"2477","testOr_primitive_nullInput","@Test
    public void testOr_primitive_nullInput()","0","-","-","-","-"
"2478","testOr_primitive_validInput_2items","@Test
    public void testOr_primitive_validInput_2items()","0","-","-","-","-"
"2479","testOr_primitive_validInput_3items","@Test
    public void testOr_primitive_validInput_3items()","0","-","-","-","-"
"2480","testXor_object_emptyInput","@Test
    public void testXor_object_emptyInput()","0","-","-","-","-"
"2481","testXor_object_nullElementInput","@Test
    public void testXor_object_nullElementInput()","0","-","-","-","-"
"2482","testXor_object_nullInput","@Test
    public void testXor_object_nullInput()","0","-","-","-","-"
"2483","testXor_object_validInput_1items","@Test
    public void testXor_object_validInput_1items()","0","-","-","-","-"
"2484","testXor_object_validInput_2items","@Test
    public void testXor_object_validInput_2items()","0","-","-","-","-"
"2485","testXor_object_validInput_3items","@Test
    public void testXor_object_validInput_3items()","0","-","-","-","-"
"2486","testXor_primitive_emptyInput","@Test
    public void testXor_primitive_emptyInput()","0","-","-","-","-"
"2487","testXor_primitive_nullInput","@Test
    public void testXor_primitive_nullInput()","0","-","-","-","-"
"2488","testXor_primitive_validInput_1items","@Test
    public void testXor_primitive_validInput_1items()","0","-","-","-","-"
"2489","testXor_primitive_validInput_2items","@Test
    public void testXor_primitive_validInput_2items()","0","-","-","-","-"
"2490","testXor_primitive_validInput_3items","@Test
    public void testXor_primitive_validInput_3items()","0","-","-","-","-"
"2491","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"2492","testPackageToPath","@Test
    public void testPackageToPath()","0","-","-","-","-"
"2493","testPathToPackage","@Test
    public void testPathToPackage()","0","-","-","-","-"
"2494","testToFullyQualifiedNameClassNull","@Test
    public void testToFullyQualifiedNameClassNull()","0","-","-","-","-"
"2495","testToFullyQualifiedNameClassString","@Test
    public void testToFullyQualifiedNameClassString()","0","-","-","-","-"
"2496","testToFullyQualifiedNameNullClassString","@Test
    public void testToFullyQualifiedNameNullClassString()","0","-","-","-","-"
"2497","testToFullyQualifiedNameNullPackageString","@Test
    public void testToFullyQualifiedNameNullPackageString()","0","-","-","-","-"
"2498","testToFullyQualifiedNamePackageNull","@Test
    public void testToFullyQualifiedNamePackageNull()","0","-","-","-","-"
"2499","testToFullyQualifiedNamePackageString","@Test
    public void testToFullyQualifiedNamePackageString()","0","-","-","-","-"
"2500","testToFullyQualifiedPathClass","@Test
    public void testToFullyQualifiedPathClass()","0","-","-","-","-"
"2501","testToFullyQualifiedPathClassNull","@Test
    public void testToFullyQualifiedPathClassNull()","0","-","-","-","-"
"2502","testToFullyQualifiedPathClassNullString","@Test
    public void testToFullyQualifiedPathClassNullString()","0","-","-","-","-"
"2503","testToFullyQualifiedPathPackage","@Test
    public void testToFullyQualifiedPathPackage()","0","-","-","-","-"
"2504","testToFullyQualifiedPathPackageNull","@Test
    public void testToFullyQualifiedPathPackageNull()","0","-","-","-","-"
"2505","testToFullyQualifiedPathPackageNullString","@Test
    public void testToFullyQualifiedPathPackageNullString()","0","-","-","-","-"
"2506","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"2507","testContainsAny_StringString","@Test
    public void testContainsAny_StringString()","0","-","-","-","-"
"2508","testContainsAny_StringStringarray","@Test
    public void testContainsAny_StringStringarray()","0","-","-","-","-"
"2509","testCount_StringString","@Test
    public void testCount_StringString()","0","-","-","-","-"
"2510","testCount_StringStringarray","@Test
    public void testCount_StringStringarray()","0","-","-","-","-"
"2511","testDelete_StringString","@Test
    public void testDelete_StringString()","0","-","-","-","-"
"2512","testDelete_StringStringarray","@Test
    public void testDelete_StringStringarray()","0","-","-","-","-"
"2513","testKeep_StringString","@Test
    public void testKeep_StringString()","0","-","-","-","-"
"2514","testKeep_StringStringarray","@Test
    public void testKeep_StringStringarray()","0","-","-","-","-"
"2515","testSqueeze_StringString","@Test
    public void testSqueeze_StringString()","0","-","-","-","-"
"2516","testSqueeze_StringStringarray","@Test
    public void testSqueeze_StringStringarray()","0","-","-","-","-"
"2517","testValueOfChar","@Test
    public void testValueOfChar()","0","-","-","-","-"
"2518","testValueOfCharEmpty","@Test
    public void testValueOfCharEmpty()","0","-","-","-","-"
"2519","testValueOfCharNull","@Test
    public void testValueOfCharNull()","0","-","-","-","-"
"2520","randomProvider","static Stream<RandomStringUtils> randomProvider()","0","-","-","-","-"
"2521","chiSquare","/**
     * Computes Chi-Square statistic given observed and expected counts
     *
     * @param observed array of observed frequency counts
     * @param expected array of expected frequency counts
     */
    private double chiSquare(final int[] expected, final int[] observed)","0","-","-","-","-"
"2522","testCharOverflow","/**
     * Test for LANG-1286. Creates situation where old code would overflow a char and result in a code point outside the specified range.
     */
    @Test
    public void testCharOverflow()","0","-","-","-","-"
"2523","nextInt","@Override
            public int nextInt(final int n)","0","-","-","-","-"
"2524","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"2525","testExceptionsRandom","@Test
    public void testExceptionsRandom()","0","-","-","-","-"
"2526","testExceptionsRandom","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testExceptionsRandom(final RandomStringUtils rsu)","0","-","-","-","-"
"2527","testExceptionsRandomAlphabetic","@Test
    public void testExceptionsRandomAlphabetic()","0","-","-","-","-"
"2528","testExceptionsRandomAlphabetic","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testExceptionsRandomAlphabetic(final RandomStringUtils rsu)","0","-","-","-","-"
"2529","testExceptionsRandomAscii","@Test
    public void testExceptionsRandomAscii()","0","-","-","-","-"
"2530","testExceptionsRandomAscii","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testExceptionsRandomAscii(final RandomStringUtils rsu)","0","-","-","-","-"
"2531","testExceptionsRandomGraph","@Test
    public void testExceptionsRandomGraph()","0","-","-","-","-"
"2532","testExceptionsRandomGraph","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testExceptionsRandomGraph(final RandomStringUtils rsu)","0","-","-","-","-"
"2533","testExceptionsRandomNumeric","@Test
    public void testExceptionsRandomNumeric()","0","-","-","-","-"
"2534","testExceptionsRandomNumeric","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testExceptionsRandomNumeric(final RandomStringUtils rsu)","0","-","-","-","-"
"2535","testExceptionsRandomPrint","@Test
    public void testExceptionsRandomPrint()","0","-","-","-","-"
"2536","testExceptionsRandomPrint","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testExceptionsRandomPrint(final RandomStringUtils rsu)","0","-","-","-","-"
"2537","testHomogeneity","/**
     * Test homogeneity of random strings generated -- i.e., test that characters show up with expected frequencies in generated strings. Will fail randomly
     * about 1 in 100,000 times. Repeated failures indicate a problem.
     *
     * @param rsu the instance to test.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testHomogeneity(final RandomStringUtils rsu)","0","-","-","-","-"
"2538","testLang100","/**
     * Checks if the string got by","0","-","-","-","-"
"2539","testLang100","/**
     * Checks if the string got by","0","-","-","-","-"
"2540","testLANG805","@Test
    public void testLANG805()","0","-","-","-","-"
"2541","testLANG807","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testLANG807(final RandomStringUtils rsu)","0","-","-","-","-"
"2542","testNonASCIILetters","/**
     * Test","0","-","-","-","-"
"2543","testNonASCIINumbers","/**
     * Test","0","-","-","-","-"
"2544","testRandomAlphabetic","/**
     * Make sure boundary alpha characters are generated by randomAlphabetic This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8
     */
    @Test
    public void testRandomAlphabetic()","0","-","-","-","-"
"2545","testRandomAlphabetic","/**
     * Make sure boundary alpha characters are generated by randomAlphabetic This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8
     *
     * @param rsu the instance to test
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testRandomAlphabetic(final RandomStringUtils rsu)","0","-","-","-","-"
"2546","testRandomAlphabeticRange","@Test
    public void testRandomAlphabeticRange()","0","-","-","-","-"
"2547","testRandomAlphabeticRange","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testRandomAlphabeticRange(final RandomStringUtils rsu)","0","-","-","-","-"
"2548","testRandomAlphaNumeric","/**
     * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7
     */
    @Test
    public void testRandomAlphaNumeric()","0","-","-","-","-"
"2549","testRandomAlphaNumeric","/**
     * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7
     *
     * @param rsu the instance to test
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testRandomAlphaNumeric(final RandomStringUtils rsu)","0","-","-","-","-"
"2550","testRandomAlphanumericRange","@Test
    public void testRandomAlphanumericRange()","0","-","-","-","-"
"2551","testRandomApis","/**
     * Test the implementation
     *
     * @param rsu the instance to test.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testRandomApis(final RandomStringUtils rsu)","0","-","-","-","-"
"2552","testRandomAscii","/**
     * Make sure 32 and 127 are generated by randomNumeric This test will fail randomly with probability = 2*(95/96)**1000 ~ 5.7E-5
     *
     * @param rsu the instance to test
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testRandomAscii(final RandomStringUtils rsu)","0","-","-","-","-"
"2553","testRandomAsciiRange","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testRandomAsciiRange(final RandomStringUtils rsu)","0","-","-","-","-"
"2554","testRandomGraphRange","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testRandomGraphRange(final RandomStringUtils rsu)","0","-","-","-","-"
"2555","testRandomNumeric","/**
     * Make sure '0' and '9' are generated by randomNumeric This test will fail randomly with probability = 2 * (9/10)**1000 ~ 3.5E-46
     *
     * @param rsu the instance to test
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testRandomNumeric(final RandomStringUtils rsu)","0","-","-","-","-"
"2556","testRandomNumericRange","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testRandomNumericRange(final RandomStringUtils rsu)","0","-","-","-","-"
"2557","testRandomParameter","@Test
    public void testRandomParameter()","0","-","-","-","-"
"2558","testRandomPrintRange","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testRandomPrintRange(final RandomStringUtils rsu)","0","-","-","-","-"
"2559","testRandomWithChars","/**
     * Test","0","-","-","-","-"
"2560","assertEqualsArchNotNull","private void assertEqualsArchNotNull(final Processor.Arch arch, final Processor processor)","0","-","-","-","-"
"2561","assertEqualsTypeNotNull","private void assertEqualsTypeNotNull(final Processor.Type type, final Processor processor)","0","-","-","-","-"
"2562","assertNotEqualsArchNotNull","private void assertNotEqualsArchNotNull(final Processor.Arch arch, final Processor processor)","0","-","-","-","-"
"2563","assertNotEqualsTypeNotNull","private void assertNotEqualsTypeNotNull(final Processor.Type type, final Processor processor)","0","-","-","-","-"
"2564","testArch","@Test
    public void testArch()","0","-","-","-","-"
"2565","testArchLabels","@Test
    public void testArchLabels()","0","-","-","-","-"
"2566","testGetProcessor","@Test
    public void testGetProcessor()","0","-","-","-","-"
"2567","testIs32BitJVM","@Test
    public void testIs32BitJVM()","0","-","-","-","-"
"2568","testIs64BitJVM","@Test
    public void testIs64BitJVM()","0","-","-","-","-"
"2569","testTypeLabels","@Test
    public void testTypeLabels()","0","-","-","-","-"
"2570","testConcurrentExceptionCauseError","/**
     * Tests creating a ConcurrentException with an error as cause.
     */
    @Test
    public void testConcurrentExceptionCauseError()","0","-","-","-","-"
"2571","testConcurrentExceptionCauseNull","/**
     * Tests creating a ConcurrentException with null as cause.
     */
    @Test
    public void testConcurrentExceptionCauseNull()","0","-","-","-","-"
"2572","testConcurrentExceptionCauseUnchecked","/**
     * Tests creating a ConcurrentException with a runtime exception as cause.
     */
    @Test
    public void testConcurrentExceptionCauseUnchecked()","0","-","-","-","-"
"2573","testConcurrentRuntimeExceptionCauseError","/**
     * Tries to create a ConcurrentRuntimeException with an error as cause.
     */
    @Test
    public void testConcurrentRuntimeExceptionCauseError()","0","-","-","-","-"
"2574","testConcurrentRuntimeExceptionCauseNull","/**
     * Tries to create a ConcurrentRuntimeException with null as cause.
     */
    @Test
    public void testConcurrentRuntimeExceptionCauseNull()","0","-","-","-","-"
"2575","testConcurrentRuntimeExceptionCauseUnchecked","/**
     * Tries to create a ConcurrentRuntimeException with a runtime as cause.
     */
    @Test
    public void testConcurrentRuntimeExceptionCauseUnchecked()","0","-","-","-","-"
"2576","testConstantFuture_Integer","/**
     * Tests constant future.
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testConstantFuture_Integer() throws Exception","0","-","-","-","-"
"2577","testConstantFuture_null","/**
     * Tests constant future.
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testConstantFuture_null() throws Exception","0","-","-","-","-"
"2578","testCreateIfAbsentKeyNotPresent","/**
     * Tests createIfAbsent() if the map does not contain the key in question.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testCreateIfAbsentKeyNotPresent() throws ConcurrentException","0","-","-","-","-"
"2579","testCreateIfAbsentKeyPresent","/**
     * Tests createIfAbsent() if the key is found in the map.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testCreateIfAbsentKeyPresent() throws ConcurrentException","0","-","-","-","-"
"2580","testCreateIfAbsentNullInit","/**
     * Tests createIfAbsent() if a null initializer is passed in.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testCreateIfAbsentNullInit() throws ConcurrentException","0","-","-","-","-"
"2581","testCreateIfAbsentNullMap","/**
     * Tests createIfAbsent() if a null map is passed in.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testCreateIfAbsentNullMap() throws ConcurrentException","0","-","-","-","-"
"2582","testCreateIfAbsentUncheckedException","/**
     * Tests createIfAbsentUnchecked() if an exception is thrown.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testCreateIfAbsentUncheckedException() throws ConcurrentException","0","-","-","-","-"
"2583","testCreateIfAbsentUncheckedSuccess","/**
     * Tests createIfAbsentUnchecked() if no exception is thrown.
     */
    @Test
    public void testCreateIfAbsentUncheckedSuccess()","0","-","-","-","-"
"2584","testExtractCauseChecked","/**
     * Tests extractCause() if the cause is a checked exception.
     */
    @Test
    public void testExtractCauseChecked()","0","-","-","-","-"
"2585","testExtractCauseError","/**
     * Tests extractCause() if the cause is an error.
     */
    @Test
    public void testExtractCauseError()","0","-","-","-","-"
"2586","testExtractCauseNull","/**
     * Tests extractCause() for a null exception.
     */
    @Test
    public void testExtractCauseNull()","0","-","-","-","-"
"2587","testExtractCauseNullCause","/**
     * Tests extractCause() if the cause of the passed in exception is null.
     */
    @Test
    public void testExtractCauseNullCause()","0","-","-","-","-"
"2588","testExtractCauseUncheckedChecked","/**
     * Tests extractCauseUnchecked() if the cause is a checked exception.
     */
    @Test
    public void testExtractCauseUncheckedChecked()","0","-","-","-","-"
"2589","testExtractCauseUncheckedError","/**
     * Tests extractCauseUnchecked() if the cause is an error.
     */
    @Test
    public void testExtractCauseUncheckedError()","0","-","-","-","-"
"2590","testExtractCauseUncheckedException","/**
     * Tests extractCause() if the cause is an unchecked exception.
     */
    @Test
    public void testExtractCauseUncheckedException()","0","-","-","-","-"
"2591","testExtractCauseUncheckedNull","/**
     * Tests extractCauseUnchecked() for a null exception.
     */
    @Test
    public void testExtractCauseUncheckedNull()","0","-","-","-","-"
"2592","testExtractCauseUncheckedNullCause","/**
     * Tests extractCauseUnchecked() if the cause of the passed in exception is null.
     */
    @Test
    public void testExtractCauseUncheckedNullCause()","0","-","-","-","-"
"2593","testExtractCauseUncheckedUncheckedException","/**
     * Tests extractCauseUnchecked() if the cause is an unchecked exception.
     */
    @Test
    public void testExtractCauseUncheckedUncheckedException()","0","-","-","-","-"
"2594","testHandleCauseChecked","/**
     * Tests handleCause() if the cause is a checked exception.
     */
    @Test
    public void testHandleCauseChecked()","0","-","-","-","-"
"2595","testHandleCauseError","/**
     * Tests handleCause() if the cause is an error.
     */
    @Test
    public void testHandleCauseError()","0","-","-","-","-"
"2596","testHandleCauseNull","/**
     * Tests handleCause() for a null parameter or a null cause. In this case the method should do nothing. We can only test
     * that no exception is thrown.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testHandleCauseNull() throws ConcurrentException","0","-","-","-","-"
"2597","testHandleCauseUncheckedChecked","/**
     * Tests handleCauseUnchecked() if the cause is a checked exception.
     */
    @Test
    public void testHandleCauseUncheckedChecked()","0","-","-","-","-"
"2598","testHandleCauseUncheckedError","/**
     * Tests handleCauseUnchecked() if the cause is an error.
     */
    @Test
    public void testHandleCauseUncheckedError()","0","-","-","-","-"
"2599","testHandleCauseUncheckedException","/**
     * Tests handleCause() if the cause is an unchecked exception.
     */
    @Test
    public void testHandleCauseUncheckedException()","0","-","-","-","-"
"2600","testHandleCauseUncheckedNull","/**
     * Tests handleCauseUnchecked() for a null parameter or a null cause. In this case the method should do nothing. We can
     * only test that no exception is thrown.
     */
    @Test
    public void testHandleCauseUncheckedNull()","0","-","-","-","-"
"2601","testHandleCauseUncheckedUncheckedException","/**
     * Tests handleCauseUnchecked() if the cause is an unchecked exception.
     */
    @Test
    public void testHandleCauseUncheckedUncheckedException()","0","-","-","-","-"
"2602","testInitialize","/**
     * Tests a successful initialize() operation.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testInitialize() throws ConcurrentException","0","-","-","-","-"
"2603","testInitializeNull","/**
     * Tests initialize() for a null argument.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testInitializeNull() throws ConcurrentException","0","-","-","-","-"
"2604","testInitializeUnchecked","/**
     * Tests a successful initializeUnchecked() operation.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testInitializeUnchecked() throws ConcurrentException","0","-","-","-","-"
"2605","testInitializeUncheckedEx","/**
     * Tests whether exceptions are correctly handled by initializeUnchecked().
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testInitializeUncheckedEx() throws ConcurrentException","0","-","-","-","-"
"2606","testInitializeUncheckedNull","/**
     * Tests initializeUnchecked() for a null argument.
     */
    @Test
    public void testInitializeUncheckedNull()","0","-","-","-","-"
"2607","testPutIfAbsentKeyNotPresent","/**
     * Tests putIfAbsent() if the map does not contain the key in question.
     */
    @Test
    public void testPutIfAbsentKeyNotPresent()","0","-","-","-","-"
"2608","testPutIfAbsentKeyPresent","/**
     * Tests putIfAbsent() if the map contains the key in question.
     */
    @Test
    public void testPutIfAbsentKeyPresent()","0","-","-","-","-"
"2609","testPutIfAbsentNullMap","/**
     * Tests putIfAbsent() if a null map is passed in.
     */
    @Test
    public void testPutIfAbsentNullMap()","0","-","-","-","-"
"2610","testUninitializedConcurrentRuntimeException","/**
     * Tests creating ConcurrentRuntimeException with no arguments.
     */
    @Test
    public void testUninitializedConcurrentRuntimeException()","0","-","-","-","-"
"2611","GetThread","GetThread(final CountDownLatch startLatch, final ConcurrentInitializer<?> initializer)","0","-","-","-","-"
"2612","run","@Override
        public void run()","0","-","-","-","-"
"2613","createInitializer","/**
     * Creates the","0","-","-","-","-"
"2614","testGet","/**
     * Tests a simple invocation of the get() method.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException because the object under test may throw it.
     */
    @Test
    public void testGet() throws ConcurrentException","0","-","-","-","-"
"2615","testGetConcurrent","/**
     * Tests whether get() can be invoked from multiple threads concurrently. Always the same object should be returned.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException because the object under test may throw it.
     * @throws InterruptedException                                    because the threading API my throw it.
     */
    @Test
    public void testGetConcurrent() throws ConcurrentException, InterruptedException","0","-","-","-","-"
"2616","testGetMultipleTimes","/**
     * Tests whether sequential get() invocations always return the same instance.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException because the object under test may throw it.
     */
    @Test
    public void testGetMultipleTimes() throws ConcurrentException","0","-","-","-","-"
"2617","testisInitialized","/**
     * Tests a simple invocation of the isInitialized() method.
     *
     * @throws Throwable on test failure.
     */
    @Test
    public void testisInitialized() throws Throwable","0","-","-","-","-"
"2618","createInitializer","/**
     * Creates the initializer to be tested.
     *
     * @return the","0","-","-","-","-"
"2619","createInitializerThatThrowsException","@Override
    protected ConcurrentInitializer<CloseableObject> createInitializerThatThrowsException(
            final FailableSupplier<CloseableObject, ? extends Exception> supplier,
            final FailableConsumer<CloseableObject, ? extends Exception> closer)","0","-","-","-","-"
"2620","incAndMakeObject","/** A supplier method used in testing */
    private Object incAndMakeObject()","0","-","-","-","-"
"2621","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"2622","testGetThatReturnsNullFirstTime","@Test
    public void testGetThatReturnsNullFirstTime() throws ConcurrentException","0","-","-","-","-"
"2623","initialize","@Override
            protected Object initialize()","0","-","-","-","-"
"2624","testNumberOfInitializeInvocations","/**
     * Tests that initialize() is called only once.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException because","0","-","-","-","-"
"2625","testConstructWithCause","@Test
    public void testConstructWithCause()","0","-","-","-","-"
"2626","containsTrue","protected boolean containsTrue(final boolean[] booleanArray)","0","-","-","-","-"
"2627","runTest","private void runTest(final Duration delay, final boolean exclusiveLock, final LongConsumer runTimeCheck,
        final boolean[] booleanValues, final LockVisitor<boolean[], ?> visitor) throws InterruptedException","0","-","-","-","-"
"2628","set","protected void set(final boolean[] booleanArray, final int offset, final boolean value)","0","-","-","-","-"
"2629","testCreate","@Test
    public void testCreate()","0","-","-","-","-"
"2630","testReentrantReadWriteLockExclusive","@Test
    public void testReentrantReadWriteLockExclusive() throws Exception","0","-","-","-","-"
"2631","testReentrantReadWriteLockNotExclusive","@Test
    public void testReentrantReadWriteLockNotExclusive() throws Exception","0","-","-","-","-"
"2632","testResultValidation","@Test
    public void testResultValidation()","0","-","-","-","-"
"2633","testStampedLockExclusive","@Test
    public void testStampedLockExclusive() throws Exception","0","-","-","-","-"
"2634","testStampedLockNotExclusive","@Test
    public void testStampedLockNotExclusive() throws Exception","0","-","-","-","-"
"2635","initialize","@Override
        protected Object initialize()","0","-","-","-","-"
"2636","createInitializer","/**
     * Returns the initializer to be tested.
     *
     * @return the","0","-","-","-","-"
"2637","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"2638","testGetThatReturnsNullFirstTime","@Test
    public void testGetThatReturnsNullFirstTime() throws ConcurrentException","0","-","-","-","-"
"2639","initialize","@Override
            protected Object initialize()","0","-","-","-","-"
"2640","testNumberOfInitializeInvocations","/**
     * Tests that initialize() is called only once.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException because","0","-","-","-","-"
"2641","AbstractBackgroundInitializerTestImpl","AbstractBackgroundInitializerTestImpl()","0","-","-","-","-"
"2642","AbstractBackgroundInitializerTestImpl","AbstractBackgroundInitializerTestImpl(final ExecutorService exec)","0","-","-","-","-"
"2643","enableLatch","public void enableLatch()","0","-","-","-","-"
"2644","getCloseableCounter","public CloseableCounter getCloseableCounter()","0","-","-","-","-"
"2645","initializeInternal","/**
         * Records this invocation. Optionally throws an exception or sleeps a
         * while.
         *
         * @throws Exception in case of an error
         */
        protected CloseableCounter initializeInternal() throws Exception","0","-","-","-","-"
"2646","releaseLatch","public void releaseLatch()","0","-","-","-","-"
"2647","close","public void close()","0","-","-","-","-"
"2648","getInitializeCalls","public int getInitializeCalls()","0","-","-","-","-"
"2649","increment","public CloseableCounter increment()","0","-","-","-","-"
"2650","isClosed","public boolean isClosed()","0","-","-","-","-"
"2651","MethodBackgroundInitializerTestImpl","MethodBackgroundInitializerTestImpl()","0","-","-","-","-"
"2652","MethodBackgroundInitializerTestImpl","MethodBackgroundInitializerTestImpl(final ExecutorService exec)","0","-","-","-","-"
"2653","initialize","@Override
        protected CloseableCounter initialize() throws Exception","0","-","-","-","-"
"2654","checkInitialize","/**
     * Helper method for checking whether the initialize() method was correctly
     * called. start() must already have been invoked.
     *
     * @param init the initializer to test
     */
    private void checkInitialize(final AbstractBackgroundInitializerTestImpl init) throws ConcurrentException","0","-","-","-","-"
"2655","getBackgroundInitializerTestImpl","protected AbstractBackgroundInitializerTestImpl getBackgroundInitializerTestImpl()","0","-","-","-","-"
"2656","getBackgroundInitializerTestImpl","protected AbstractBackgroundInitializerTestImpl getBackgroundInitializerTestImpl(final ExecutorService exec)","0","-","-","-","-"
"2657","testGetActiveExecutorBeforeStart","/**
     * Tries to obtain the executor before start(). It should not have been
     * initialized yet.
     */
    @Test
    public void testGetActiveExecutorBeforeStart()","0","-","-","-","-"
"2658","testGetActiveExecutorExternal","/**
     * Tests whether an external executor is correctly detected.
     */
    @Test
    public void testGetActiveExecutorExternal() throws InterruptedException, ConcurrentException","0","-","-","-","-"
"2659","testGetActiveExecutorTemp","/**
     * Tests getActiveExecutor() for a temporary executor.
     */
    @Test
    public void testGetActiveExecutorTemp() throws ConcurrentException","0","-","-","-","-"
"2660","testGetBeforeStart","/**
     * Tests calling get() before start(). This should cause an exception.
     */
    @Test
    public void testGetBeforeStart()","0","-","-","-","-"
"2661","testGetCheckedException","/**
     * Tests the get() method if background processing causes a checked
     * exception.
     */
    @Test
    public void testGetCheckedException()","0","-","-","-","-"
"2662","testGetInterruptedException","/**
     * Tests the get() method if waiting for the initialization is interrupted.
     *
     * @throws InterruptedException because we're making use of Java's concurrent API
     */
    @Test
    public void testGetInterruptedException() throws InterruptedException","0","-","-","-","-"
"2663","run","@Override
            public void run()","0","-","-","-","-"
"2664","testGetRuntimeException","/**
     * Tests the get() method if background processing causes a runtime
     * exception.
     */
    @Test
    public void testGetRuntimeException()","0","-","-","-","-"
"2665","testInitialize","/**
     * Tests whether initialize() is invoked.
     */
    @Test
    public void testInitialize() throws ConcurrentException","0","-","-","-","-"
"2666","testInitializeTempExecutor","/**
     * Tests the execution of the background task if a temporary executor has to
     * be created.
     */
    @Test
    public void testInitializeTempExecutor() throws ConcurrentException","0","-","-","-","-"
"2667","testIsInitialized","/**
     * Tests isInitialized() before and after the background task has finished.
     */
    @Test
    public void testIsInitialized() throws ConcurrentException","0","-","-","-","-"
"2668","testIsStartedAfterGet","/**
     * Tests isStarted() after the background task has finished.
     */
    @Test
    public void testIsStartedAfterGet() throws ConcurrentException","0","-","-","-","-"
"2669","testIsStartedFalse","/**
     * Tests isStarted() before start() was called.
     */
    @Test
    public void testIsStartedFalse()","0","-","-","-","-"
"2670","testIsStartedTrue","/**
     * Tests isStarted() after start().
     */
    @Test
    public void testIsStartedTrue()","0","-","-","-","-"
"2671","testSetExternalExecutor","/**
     * Tests whether an external executor can be set using the
     * setExternalExecutor() method.
     */
    @Test
    public void testSetExternalExecutor() throws ConcurrentException","0","-","-","-","-"
"2672","testSetExternalExecutorAfterStart","/**
     * Tests that setting an executor after start() causes an exception.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException because the test implementation may throw it
     */
    @Test
    public void testSetExternalExecutorAfterStart() throws ConcurrentException, InterruptedException","0","-","-","-","-"
"2673","testStartMultipleTimes","/**
     * Tests invoking start() multiple times. Only the first invocation should
     * have an effect.
     */
    @Test
    public void testStartMultipleTimes() throws ConcurrentException","0","-","-","-","-"
"2674","enableLatch","public void enableLatch()","0","-","-","-","-"
"2675","getCloseableCounter","public CloseableCounter getCloseableCounter()","0","-","-","-","-"
"2676","initializeInternal","/**
         * Records this invocation. Optionally throws an exception.
         */
        protected CloseableCounter initializeInternal() throws Exception","0","-","-","-","-"
"2677","releaseLatch","public void releaseLatch()","0","-","-","-","-"
"2678","wrapInteger","public static CloseableCounter wrapInteger(final int i)","0","-","-","-","-"
"2679","close","public void close()","0","-","-","-","-"
"2680","equals","@Override
        public boolean equals(final Object other)","0","-","-","-","-"
"2681","getInitializeCalls","public int getInitializeCalls()","0","-","-","-","-"
"2682","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"2683","increment","public CloseableCounter increment()","0","-","-","-","-"
"2684","isClosed","public boolean isClosed()","0","-","-","-","-"
"2685","setInitializeCalls","public CloseableCounter setInitializeCalls(final int i)","0","-","-","-","-"
"2686","initialize","@Override
        protected CloseableCounter initialize() throws Exception","0","-","-","-","-"
"2687","checkChild","/**
     * Tests whether a child initializer has been executed. Optionally the
     * expected executor service can be checked, too.
     *
     * @param child the child initializer
     * @param expExec the expected executor service (null if the executor should
     * not be checked)
     * @throws ConcurrentException if an error occurs
     */
    private void checkChild(final BackgroundInitializer<?> child,
            final ExecutorService expExec) throws ConcurrentException","0","-","-","-","-"
"2688","checkInitialize","/**
     * Helper method for testing the initialize() method. This method can
     * operate with both an external and a temporary executor service.
     *
     * @return the result object produced by the initializer
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    private MultiBackgroundInitializer.MultiBackgroundInitializerResults checkInitialize()
            throws ConcurrentException","0","-","-","-","-"
"2689","createChildBackgroundInitializer","/**
     * An overrideable method to create concrete implementations of
     *","0","-","-","-","-"
"2690","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"2691","testAddInitializerAfterStart","/**
     * Tries to add another child initializer after the start() method has been
     * called. This should not be allowed.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testAddInitializerAfterStart() throws ConcurrentException","0","-","-","-","-"
"2692","testAddInitializerNullInit","/**
     * Tests addInitializer() if a null initializer is passed in. This should
     * cause an exception.
     */
    @Test
    public void testAddInitializerNullInit()","0","-","-","-","-"
"2693","testAddInitializerNullName","/**
     * Tests addInitializer() if a null name is passed in. This should cause an
     * exception.
     */
    @Test
    public void testAddInitializerNullName()","0","-","-","-","-"
"2694","testInitializeChildWithExecutor","/**
     * Tests the behavior of initialize() if a child initializer has a specific
     * executor service. Then this service should not be overridden.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testInitializeChildWithExecutor() throws ConcurrentException, InterruptedException","0","-","-","-","-"
"2695","testInitializeEx","/**
     * Tests the behavior of the initializer if one of the child initializers
     * throws a checked exception.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testInitializeEx() throws ConcurrentException","0","-","-","-","-"
"2696","testInitializeExternalExec","/**
     * Tests background processing if an external executor service is provided.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testInitializeExternalExec() throws ConcurrentException, InterruptedException","0","-","-","-","-"
"2697","testInitializeNested","/**
     * Tests whether MultiBackgroundInitializers can be combined in a nested
     * way.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testInitializeNested() throws ConcurrentException","0","-","-","-","-"
"2698","testInitializeNoChildren","/**
     * Tests the background processing if there are no child initializers.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testInitializeNoChildren() throws ConcurrentException","0","-","-","-","-"
"2699","testInitializeResultsIsSuccessfulFalse","/**
     * Tests the isSuccessful() method of the result object if at least one
     * child initializer has thrown an exception.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testInitializeResultsIsSuccessfulFalse()
            throws ConcurrentException","0","-","-","-","-"
"2700","testInitializeResultsIsSuccessfulTrue","/**
     * Tests the isSuccessful() method of the result object if no child
     * initializer has thrown an exception.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testInitializeResultsIsSuccessfulTrue()
            throws ConcurrentException","0","-","-","-","-"
"2701","testInitializeRuntimeEx","/**
     * Tests the behavior of the initializer if one of the child initializers
     * throws a runtime exception.
     */
    @Test
    public void testInitializeRuntimeEx()","0","-","-","-","-"
"2702","testInitializeTempExec","/**
     * Tests background processing if a temporary executor is used.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testInitializeTempExec() throws ConcurrentException","0","-","-","-","-"
"2703","testIsInitialized","@Test
    public void testIsInitialized()
            throws ConcurrentException, InterruptedException","0","-","-","-","-"
"2704","testResultGetExceptionUnknown","/**
     * Tries to query the exception of an unknown child initializer from the
     * results object. This should cause an exception.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testResultGetExceptionUnknown() throws ConcurrentException","0","-","-","-","-"
"2705","testResultGetInitializerUnknown","/**
     * Tries to query an unknown child initializer from the results object. This
     * should cause an exception.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testResultGetInitializerUnknown() throws ConcurrentException","0","-","-","-","-"
"2706","testResultGetResultObjectUnknown","/**
     * Tries to query the results of an unknown child initializer from the
     * results object. This should cause an exception.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testResultGetResultObjectUnknown() throws ConcurrentException","0","-","-","-","-"
"2707","testResultInitializerNamesModify","/**
     * Tests that the set with the names of the initializers cannot be modified.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testResultInitializerNamesModify() throws ConcurrentException","0","-","-","-","-"
"2708","testResultIsExceptionUnknown","/**
     * Tries to query the exception flag of an unknown child initializer from
     * the results object. This should cause an exception.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testResultIsExceptionUnknown() throws ConcurrentException","0","-","-","-","-"
"2709","testRun","@Test
    public void testRun() throws InterruptedException, ExecutionException","0","-","-","-","-"
"2710","setUpComputableMock","@BeforeEach
    public void setUpComputableMock()","0","-","-","-","-"
"2711","testDefaultBehaviourNotToRecalculateExecutionExceptions","@Test
    public void testDefaultBehaviourNotToRecalculateExecutionExceptions() throws Exception","0","-","-","-","-"
"2712","testDoesNotRecalculateWhenSetToFalse","@Test
    public void testDoesNotRecalculateWhenSetToFalse() throws Exception","0","-","-","-","-"
"2713","testDoesRecalculateWhenSetToTrue","@Test
    public void testDoesRecalculateWhenSetToTrue() throws Exception","0","-","-","-","-"
"2714","testOnlyCallComputableOnceIfDoesNotThrowException","@Test
    public void testOnlyCallComputableOnceIfDoesNotThrowException() throws Exception","0","-","-","-","-"
"2715","testWhenComputableThrowsError","@Test
    public void testWhenComputableThrowsError() throws Exception","0","-","-","-","-"
"2716","testWhenComputableThrowsRuntimeException","@Test
    public void testWhenComputableThrowsRuntimeException() throws Exception","0","-","-","-","-"
"2717","close","public void close()","0","-","-","-","-"
"2718","isClosed","public boolean isClosed()","0","-","-","-","-"
"2719","methodThatThrowsException","protected static CloseableObject methodThatThrowsException(final ExceptionToThrow input) throws IOException, SQLException, ConcurrentException","0","-","-","-","-"
"2720","createInitializerThatThrowsException","protected abstract ConcurrentInitializer<CloseableObject> createInitializerThatThrowsException(
            FailableSupplier<CloseableObject, ? extends Exception> supplier, FailableConsumer<CloseableObject, ? extends Exception> closer);","0","-","-","-","-"
"2721","testCloserThrowsCheckedException","/**
     * This method tests that if AbstractConcurrentInitializer.close catches a
     * ConcurrentException it will rethrow it wrapped in a ConcurrentException
     */
    @SuppressWarnings(""rawtypes"")
    @Test
    public void testCloserThrowsCheckedException() throws ConcurrentException","0","-","-","-","-"
"2722","testCloserThrowsRuntimeException","/**
     * This method tests that if AbstractConcurrentInitializer.close catches a
     * RuntimeException it will throw it without wrapping it in a ConcurrentException
     */
    @SuppressWarnings(""rawtypes"")
    @Test
    public void testCloserThrowsRuntimeException() throws ConcurrentException","0","-","-","-","-"
"2723","testSupplierThrowsCheckedException","/**
     * This method tests that if AbstractConcurrentInitializer.initialize catches a checked
     * exception it will rethrow it wrapped in a ConcurrentException
     */
    @SuppressWarnings(""unchecked"") //for NOP
    @Test
    public void testSupplierThrowsCheckedException()","0","-","-","-","-"
"2724","testSupplierThrowsConcurrentException","/**
     * This method tests that if a AbstractConcurrentInitializer.initialize method catches a
     * ConcurrentException it will rethrow it without wrapping it.
     */
    @Test
    public void testSupplierThrowsConcurrentException()","0","-","-","-","-"
"2725","testSupplierThrowsRuntimeException","/**
     * This method tests that if AbstractConcurrentInitializer.initialize catches a runtime exception
     * it will not be wrapped in a ConcurrentException
     */
    @SuppressWarnings(""unchecked"")
    @Test
    public void testSupplierThrowsRuntimeException()","0","-","-","-","-"
"2726","testWorkingCloser","/**
     * This method tests that if AbstractConcurrentInitializer.close actually closes the wrapped object
     */
    @SuppressWarnings(""rawtypes"")
    @Test
    public void testWorkingCloser() throws Exception","0","-","-","-","-"
"2727","createInitializer","/**
     * Returns the initializer to be tested.
     *
     * @return the","0","-","-","-","-"
"2728","initialize","@Override
            protected Object initialize()","0","-","-","-","-"
"2729","testGetThatReturnsNullFirstTime","@Test
    public void testGetThatReturnsNullFirstTime() throws ConcurrentException","0","-","-","-","-"
"2730","initialize","@Override
            protected Object initialize()","0","-","-","-","-"
"2731","createInitializer","/**
     * Returns the initializer to be tested.
     *
     * @return the","0","-","-","-","-"
"2732","createInitializerThatThrowsException","@Override
    protected ConcurrentInitializer<CloseableObject> createInitializerThatThrowsException(
            final FailableSupplier<CloseableObject, ? extends Exception> supplier,
            final FailableConsumer<CloseableObject, ? extends Exception> closer)","0","-","-","-","-"
"2733","testThrowingEmptyException","@Test
    public void testThrowingEmptyException()","0","-","-","-","-"
"2734","testThrowingExceptionWithCause","@Test
    public void testThrowingExceptionWithCause()","0","-","-","-","-"
"2735","testThrowingExceptionWithMessage","@Test
    public void testThrowingExceptionWithMessage()","0","-","-","-","-"
"2736","testThrowingInformativeException","@Test
    public void testThrowingInformativeException()","0","-","-","-","-"
"2737","testWithCauseAndMessage","@Test
    public void testWithCauseAndMessage()","0","-","-","-","-"
"2738","testWithoutCause","@Test
    public void testWithoutCause()","0","-","-","-","-"
"2739","testWithoutMessage","@Test
    public void testWithoutMessage()","0","-","-","-","-"
"2740","TestFuture","TestFuture(final Exception throwable)","0","-","-","-","-"
"2741","TestFuture","TestFuture(final V value)","0","-","-","-","-"
"2742","checkException","@SuppressWarnings(""unchecked"") // Programming error if call site blows up at runtime.
        private <T extends Exception> void checkException() throws T","0","-","-","-","-"
"2743","get","@Override
        public V get() throws InterruptedException, ExecutionException","0","-","-","-","-"
"2744","get","@Override
        public V get(final long timeout, final TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException","0","-","-","-","-"
"2745","testGetExecutionException","@Test
    public void testGetExecutionException()","0","-","-","-","-"
"2746","testGetInterruptedException","@Test
    public void testGetInterruptedException()","0","-","-","-","-"
"2747","testGetLongExecutionException","@Test
    public void testGetLongExecutionException()","0","-","-","-","-"
"2748","testGetLongInterruptedException","@Test
    public void testGetLongInterruptedException()","0","-","-","-","-"
"2749","testGetLongTimeoutException","@Test
    public void testGetLongTimeoutException()","0","-","-","-","-"
"2750","testMap","@Test
    public void testMap()","0","-","-","-","-"
"2751","testOnCollection","@Test
    public void testOnCollection()","0","-","-","-","-"
"2752","testOnFuture","@Test
    public void testOnFuture()","0","-","-","-","-"
"2753","initialize","@Override
        protected Object initialize()","0","-","-","-","-"
"2754","createInitializer","/**
     * Creates the initializer to be tested. This implementation returns the","0","-","-","-","-"
"2755","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"2756","testIsInitialized","@Test
    public void testIsInitialized() throws ConcurrentException","0","-","-","-","-"
"2757","SupplierChildBackgroundInitializer","SupplierChildBackgroundInitializer()","0","-","-","-","-"
"2758","SupplierChildBackgroundInitializer","SupplierChildBackgroundInitializer(final FailableConsumer<?, ?> consumer)","0","-","-","-","-"
"2759","createChildBackgroundInitializer","/**
     *","0","-","-","-","-"
"2760","setUpException","@BeforeEach
    public void setUpException() throws Exception","0","-","-","-","-"
"2761","testClose","/**
     * Tests that close() method closes the wrapped object
     *
     * @throws Exception
     */
    @Test
    public void testClose()
            throws ConcurrentException, InterruptedException","0","-","-","-","-"
"2762","testCloseWithCheckedException","/**
     * Tests that close() wraps a checked exception from a child initializer in an ConcurrentException as the first suppressed under in an ConcurrentException
     *
     * @throws Exception
     */
    @Test
    public void testCloseWithCheckedException() throws Exception","0","-","-","-","-"
"2763","testCloseWithRuntimeException","/**
     * Tests that close() wraps a runtime exception from a child initializer as the first suppressed under in an ConcurrentException
     *
     * @throws Exception
     */
    @Test
    public void testCloseWithRuntimeException() throws Exception","0","-","-","-","-"
"2764","testCloseWithTwoExceptions","/**
     * Tests that calling close() on a MultiBackgroundInitializer with two children that both throw exceptions throws
     * an ConcurrentException and both the child exceptions are present
     *
     * @throws Exception
     */
    @Test
    public void testCloseWithTwoExceptions()
            throws ConcurrentException, InterruptedException","0","-","-","-","-"
"2765","ChangeListener","/**
         * Creates a new instance of","0","-","-","-","-"
"2766","propertyChange","@Override
        public void propertyChange(final PropertyChangeEvent evt)","0","-","-","-","-"
"2767","verify","/**
         * Verifies that change events for the expected values have been received.
         *
         * @param values the expected values
         */
        public void verify(final Boolean... values)","0","-","-","-","-"
"2768","EventCountCircuitBreakerTestImpl","EventCountCircuitBreakerTestImpl(final int openingThreshold, final long openingInterval,
                                                final TimeUnit openingUnit, final int closingThreshold, final long closingInterval,
                                                final TimeUnit closingUnit)","0","-","-","-","-"
"2769","at","/**
         * Sets the current time to be used by this test object for the next operation.
         *
         * @param time the time to set
         * @return a reference to this object
         */
        public EventCountCircuitBreakerTestImpl at(final long time)","0","-","-","-","-"
"2770","nanoTime","/**
         *","0","-","-","-","-"
"2771","testAutomaticOpenStartsNewCheckInterval","/**
     * Tests whether a new check interval is started if the circuit breaker has a
     * transition to open state.
     */
    @Test
    public void testAutomaticOpenStartsNewCheckInterval()","0","-","-","-","-"
"2772","testChangeEvents","/**
     * Tests whether events are generated when the state is changed.
     */
    @Test
    public void testChangeEvents()","0","-","-","-","-"
"2773","testChangeEventsGeneratedByAutomaticTransitions","/**
     * Tests that automatic state transitions generate change events as well.
     */
    @Test
    public void testChangeEventsGeneratedByAutomaticTransitions()","0","-","-","-","-"
"2774","testClose","/**
     * Tests whether the circuit breaker can be closed explicitly.
     */
    @Test
    public void testClose()","0","-","-","-","-"
"2775","testClosingWhenThresholdReached","/**
     * Tests that the circuit breaker closes automatically if the number of events
     * received goes under the closing threshold.
     */
    @Test
    public void testClosingWhenThresholdReached()","0","-","-","-","-"
"2776","testDefaultClosingInterval","/**
     * Tests that the closing interval is the same as the opening interval if it is not
     * specified.
     */
    @Test
    public void testDefaultClosingInterval()","0","-","-","-","-"
"2777","testDefaultClosingThreshold","/**
     * Tests that the closing threshold is the same as the opening threshold if not
     * specified otherwise.
     */
    @Test
    public void testDefaultClosingThreshold()","0","-","-","-","-"
"2778","testInitiallyClosed","/**
     * Tests that a circuit breaker is closed after its creation.
     */
    @Test
    public void testInitiallyClosed()","0","-","-","-","-"
"2779","testIntervalCalculation","/**
     * Tests that time units are correctly taken into account by constructors.
     */
    @Test
    public void testIntervalCalculation()","0","-","-","-","-"
"2780","testNotClosingOverThreshold","/**
     * Tests that an open circuit breaker does not close itself when the number of events
     * received is over the threshold.
     */
    @Test
    public void testNotClosingOverThreshold()","0","-","-","-","-"
"2781","testNotOpeningCheckIntervalExceeded","/**
     * Tests that the circuit breaker stays closed if there are a number of received
     * events, but not in a single check interval.
     */
    @Test
    public void testNotOpeningCheckIntervalExceeded()","0","-","-","-","-"
"2782","testNotOpeningUnderThreshold","/**
     * Tests that the circuit breaker stays closed if the number of received events stays
     * below the threshold.
     */
    @Test
    public void testNotOpeningUnderThreshold()","0","-","-","-","-"
"2783","testNow","/**
     * Tests whether the current time is correctly determined.
     */
    @Test
    public void testNow()","0","-","-","-","-"
"2784","testOpeningWhenThresholdReached","/**
     * Tests that the circuit breaker opens if all conditions are met.
     */
    @Test
    public void testOpeningWhenThresholdReached()","0","-","-","-","-"
"2785","testOpeningWhenThresholdReachedThroughBatch","/**
     * Tests that the circuit breaker opens if all conditions are met when using
     *","0","-","-","-","-"
"2786","testOpenStartsNewCheckInterval","/**
     * Tests whether an explicit open operation fully initializes the internal check data
     * object. Otherwise, the circuit breaker may close itself directly afterwards.
     */
    @Test
    public void testOpenStartsNewCheckInterval()","0","-","-","-","-"
"2787","testRemoveChangeListener","/**
     * Tests whether a change listener can be removed.
     */
    @Test
    public void testRemoveChangeListener()","0","-","-","-","-"
"2788","testStateTransitionGuarded","/**
     * Tests that a state transition triggered by multiple threads is handled correctly.
     * Only the first transition should cause an event to be sent.
     */
    @Test
    public void testStateTransitionGuarded() throws InterruptedException","0","-","-","-","-"
"2789","run","@Override
                public void run()","0","-","-","-","-"
"2790","createInitializer","/**
     * Returns the initializer to be tested.
     *
     * @return the","0","-","-","-","-"
"2791","initialize","@Override
            protected Integer initialize()","0","-","-","-","-"
"2792","testGetThatReturnsNullFirstTime","@Test
    public void testGetThatReturnsNullFirstTime() throws ConcurrentException","0","-","-","-","-"
"2793","initialize","@Override
            protected Integer initialize()","0","-","-","-","-"
"2794","testConstructWithCause","@Test
    public void testConstructWithCause()","0","-","-","-","-"
"2795","checkEquals","/**
     * Helper method for testing equals() and hashCode().
     *
     * @param obj the object to compare with the test instance
     * @param expected the expected result
     */
    private void checkEquals(final Object obj, final boolean expected)","0","-","-","-","-"
"2796","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"2797","testEqualsFalse","/**
     * Tests equals() if the expected result is false.
     */
    @Test
    public void testEqualsFalse()","0","-","-","-","-"
"2798","testEqualsTrue","/**
     * Tests equals() if the expected result is true.
     */
    @Test
    public void testEqualsTrue()","0","-","-","-","-"
"2799","testEqualsWithOtherObjects","/**
     * Tests equals() with objects of other classes.
     */
    @Test
    public void testEqualsWithOtherObjects()","0","-","-","-","-"
"2800","testGet","/**
     * Tests whether get() returns the correct object.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it
     */
    @Test
    public void testGet() throws ConcurrentException","0","-","-","-","-"
"2801","testGetObject","/**
     * Tests whether the correct object is returned.
     */
    @Test
    public void testGetObject()","0","-","-","-","-"
"2802","testisInitialized","/**
     * Tests a simple invocation of the isInitialized() method.
     */
    @Test
    public void testisInitialized()","0","-","-","-","-"
"2803","testToString","/**
     * Tests the string representation.
     */
    @Test
    public void testToString()","0","-","-","-","-"
"2804","testToStringNull","/**
     * Tests the string representation if the managed object is null.
     */
    @Test
    public void testToStringNull()","0","-","-","-","-"
"2805","createInitializer","/**
     * Creates the initializer to be tested. This implementation returns the","0","-","-","-","-"
"2806","initialize","@Override
            protected Object initialize()","0","-","-","-","-"
"2807","testIsInitialized","@Test
    public void testIsInitialized() throws ConcurrentException","0","-","-","-","-"
"2808","createInitializer","/**
     * Creates the initializer to be tested.
     *
     * @return the initializer to be tested
     */
    @Override
    protected ConcurrentInitializer<Object> createInitializer()","0","-","-","-","-"
"2809","createInitializerThatThrowsException","@Override
    protected ConcurrentInitializer<CloseableObject> createInitializerThatThrowsException(
            final FailableSupplier<CloseableObject, ? extends Exception> supplier,
            final FailableConsumer<CloseableObject, ? extends Exception> closer)","0","-","-","-","-"
"2810","call","/**
         * Records this invocation and returns the test result.
         */
        @Override
        public Integer call()","0","-","-","-","-"
"2811","testInitExecutor","/**
     * Tests whether the executor service is correctly passed to the super
     * class.
     */
    @Test
    public void testInitExecutor() throws InterruptedException","0","-","-","-","-"
"2812","testInitExecutorNullCallable","/**
     * Tries to pass a null Callable to the constructor that takes an executor.
     * This should cause an exception.
     */
    @Test
    public void testInitExecutorNullCallable() throws InterruptedException","0","-","-","-","-"
"2813","testInitialize","/**
     * Tests the implementation of initialize().
     *
     * @throws Exception so we don't have to catch it
     */
    @Test
    public void testInitialize() throws Exception","0","-","-","-","-"
"2814","testInitNullCallable","/**
     * Tries to create an instance without a Callable. This should cause an
     * exception.
     */
    @Test()
    public void testInitNullCallable()","0","-","-","-","-"
"2815","initialize","@Override
        protected Object initialize()","0","-","-","-","-"
"2816","createInitializer","/**
     * Creates the initializer to be tested. This implementation returns the","0","-","-","-","-"
"2817","testIsInitialized","@Test
    public void testIsInitialized() throws ConcurrentException","0","-","-","-","-"
"2818","SupplierBackgroundInitializerTestImpl","SupplierBackgroundInitializerTestImpl()","0","-","-","-","-"
"2819","SupplierBackgroundInitializerTestImpl","SupplierBackgroundInitializerTestImpl(final ExecutorService exec)","0","-","-","-","-"
"2820","SupplierBackgroundInitializerTestImpl","SupplierBackgroundInitializerTestImpl(final FailableConsumer<?, ?> consumer)","0","-","-","-","-"
"2821","setSupplierAndCloser","private void setSupplierAndCloser(final FailableConsumer<?, ?> consumer)","0","-","-","-","-"
"2822","getBackgroundInitializerTestImpl","@Override
    protected AbstractBackgroundInitializerTestImpl getBackgroundInitializerTestImpl()","0","-","-","-","-"
"2823","getBackgroundInitializerTestImpl","@Override
    protected SupplierBackgroundInitializerTestImpl getBackgroundInitializerTestImpl(final ExecutorService exec)","0","-","-","-","-"
"2824","testClose","/**
     * Tests that close() method closes the wrapped object
     *
     * @throws Exception
     */
    @Test
    public void testClose() throws Exception","0","-","-","-","-"
"2825","testCloseWithCheckedException","/**
     * Tests that close() wraps a checked exception in a ConcurrentException
     *
     * @throws Exception
     */
    @Test
    public void testCloseWithCheckedException() throws Exception","0","-","-","-","-"
"2826","testCloseWithRuntimeException","/**
     * Tests that close() throws a runtime exception
     *
     * @throws Exception
     */
    @Test
    public void testCloseWithRuntimeException() throws Exception","0","-","-","-","-"
"2827","checkDaemonFlag","/**
     * Helper method for testing whether the daemon flag is taken into account.
     *
     * @param flag the value of the flag
     */
    private void checkDaemonFlag(final boolean flag)","0","-","-","-","-"
"2828","checkFactoryDefaults","/**
     * Tests the default options of a thread factory.
     *
     * @param factory the factory to be checked
     */
    private void checkFactoryDefaults(final BasicThreadFactory factory)","0","-","-","-","-"
"2829","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"2830","testBuildDefaults","/**
     * Tests the default values used by the builder.
     */
    @Test
    public void testBuildDefaults()","0","-","-","-","-"
"2831","testBuilderDaemon","/**
     * Tests the daemon() method of the builder.
     */
    @Test
    public void testBuilderDaemon()","0","-","-","-","-"
"2832","testBuilderDaemonBoolean","/**
     * Tests the daemon() method of the builder.
     */
    @Test
    public void testBuilderDaemonBoolean()","0","-","-","-","-"
"2833","testBuilderReset","/**
     * Tests the reset() method of the builder.
     */
    @Test
    public void testBuilderReset()","0","-","-","-","-"
"2834","testBuilderResetAfterBuild","/**
     * Tests whether reset() is automatically called after build().
     */
    @Test
    public void testBuilderResetAfterBuild()","0","-","-","-","-"
"2835","testBuildNamingPatternNull","/**
     * Tries to set a null naming pattern.
     */
    @Test
    public void testBuildNamingPatternNull()","0","-","-","-","-"
"2836","testBuildUncaughtExceptionHandlerNull","/**
     * Tries to set a null exception handler.
     */
    @Test
    public void testBuildUncaughtExceptionHandlerNull()","0","-","-","-","-"
"2837","testBuildWrappedFactoryNull","/**
     * Tries to set a null wrapped factory.
     */
    @Test
    public void testBuildWrappedFactoryNull()","0","-","-","-","-"
"2838","testNewThreadDaemonFalse","/**
     * Tests whether the daemon status of new threads can be turned off.
     */
    @Test
    public void testNewThreadDaemonFalse()","0","-","-","-","-"
"2839","testNewThreadDaemonTrue","/**
     * Tests whether daemon threads can be created.
     */
    @Test
    public void testNewThreadDaemonTrue()","0","-","-","-","-"
"2840","testNewThreadExHandler","/**
     * Tests whether the exception handler is set if one is provided.
     */
    @Test
    public void testNewThreadExHandler()","0","-","-","-","-"
"2841","testNewThreadNamingPattern","/**
     * Tests whether the naming pattern is applied to new threads.
     */
    @Test
    public void testNewThreadNamingPattern()","0","-","-","-","-"
"2842","testNewThreadNoDaemonFlag","/**
     * Tests whether the daemon flag is not touched on newly created threads if
     * it is not specified.
     */
    @Test
    public void testNewThreadNoDaemonFlag()","0","-","-","-","-"
"2843","testNewThreadNoExHandler","/**
     * Tests whether the original exception handler is not touched if none is
     * specified.
     */
    @Test
    public void testNewThreadNoExHandler()","0","-","-","-","-"
"2844","testNewThreadNoNamingPattern","/**
     * Tests whether the thread name is not modified if no naming pattern is
     * set.
     */
    @Test
    public void testNewThreadNoNamingPattern()","0","-","-","-","-"
"2845","testNewThreadNoPriority","/**
     * Tests whether the original priority is not changed if no priority is
     * specified.
     */
    @Test
    public void testNewThreadNoPriority()","0","-","-","-","-"
"2846","testNewThreadPriority","/**
     * Tests whether the priority is set on newly created threads.
     */
    @Test
    public void testNewThreadPriority()","0","-","-","-","-"
"2847","createInitializer","/**
     * Creates the initializer to be tested. This implementation returns the","0","-","-","-","-"
"2848","testIsInitialized","@Test
    public void testIsInitialized() throws ConcurrentException","0","-","-","-","-"
"2849","SemaphoreThread","SemaphoreThread(final TimedSemaphore b, final CountDownLatch l, final int c, final int lc)","0","-","-","-","-"
"2850","run","/**
         * Calls acquire() on the semaphore for the specified number of times.
         * Optionally the latch will also be triggered to synchronize with the
         * main test thread.
         */
        @Override
        public void run()","0","-","-","-","-"
"2851","TimedSemaphoreTestImpl","TimedSemaphoreTestImpl(final long timePeriod, final TimeUnit timeUnit,
                final int limit)","0","-","-","-","-"
"2852","TimedSemaphoreTestImpl","TimedSemaphoreTestImpl(final ScheduledExecutorService service,
                final long timePeriod, final TimeUnit timeUnit, final int limit)","0","-","-","-","-"
"2853","acquire","/**
         * Invokes the latch if one is set.
         *
         * @throws InterruptedException because it is declared that way in TimedSemaphore
         */
        @Override
        public synchronized void acquire() throws InterruptedException","0","-","-","-","-"
"2854","endOfPeriod","/**
         * Counts the number of invocations.
         */
        @Override
        protected synchronized void endOfPeriod()","0","-","-","-","-"
"2855","getPeriodEnds","/**
         * Returns the number of invocations of the endOfPeriod() method.
         *
         * @return the endOfPeriod() invocations
         */
        int getPeriodEnds()","0","-","-","-","-"
"2856","startTimer","/**
         * Either returns the mock future or calls the super method.
         */
        @Override
        protected ScheduledFuture<?> startTimer()","0","-","-","-","-"
"2857","TryAcquireThread","TryAcquireThread(final TimedSemaphore s, final CountDownLatch l)","0","-","-","-","-"
"2858","run","@Override
        public void run()","0","-","-","-","-"
"2859","prepareStartTimer","/**
     * Prepares an executor service mock to expect the start of the timer.
     *
     * @param service the mock
     * @param future the future
     */
    private void prepareStartTimer(final ScheduledExecutorService service,
            final ScheduledFuture<?> future)","0","-","-","-","-"
"2860","testAcquireLimit","/**
     * Tests the acquire() method if a limit is set.
     *
     * @throws InterruptedException so we don't have to catch it
     */
    @Test
    public void testAcquireLimit() throws InterruptedException","0","-","-","-","-"
"2861","testAcquireMultiplePeriods","/**
     * Tests a bigger number of invocations that span multiple periods. The
     * period is set to a very short time. A background thread calls the
     * semaphore a large number of times. While it runs at last one end of a
     * period should be reached.
     *
     * @throws InterruptedException so we don't have to catch it
     */
    @Test
    public void testAcquireMultiplePeriods() throws InterruptedException","0","-","-","-","-"
"2862","testAcquireMultipleThreads","/**
     * Tests the acquire() method if more threads are involved than the limit.
     * This method starts a number of threads that all invoke the semaphore. The
     * semaphore's limit is set to 1, so in each period only a single thread can
     * acquire the semaphore.
     *
     * @throws InterruptedException so we don't have to catch it
     */
    @Test
    public void testAcquireMultipleThreads() throws InterruptedException","0","-","-","-","-"
"2863","testAcquireNoLimit","/**
     * Tests the acquire() method if no limit is set. A test thread is started
     * that calls the semaphore a large number of times. Even if the semaphore's
     * period does not end, the thread should never block.
     *
     * @throws InterruptedException so we don't have to catch it
     */
    @Test
    public void testAcquireNoLimit() throws InterruptedException","0","-","-","-","-"
"2864","testGetAvailablePermits","/**
     * Tests whether the available non-blocking calls can be queried.
     *
     * @throws InterruptedException so we don't have to catch it
     */
    @Test
    public void testGetAvailablePermits() throws InterruptedException","0","-","-","-","-"
"2865","testGetAverageCallsPerPeriod","/**
     * Tests the methods for statistics.
     *
     * @throws InterruptedException so we don't have to catch it
     */
    @Test
    public void testGetAverageCallsPerPeriod() throws InterruptedException","0","-","-","-","-"
"2866","testInit","/**
     * Tests creating a new instance.
     */
    @Test
    public void testInit()","0","-","-","-","-"
"2867","testInitDefaultService","/**
     * Tests whether a default executor service is created if no service is
     * provided.
     */
    @Test
    public void testInitDefaultService()","0","-","-","-","-"
"2868","testInitInvalidPeriod","/**
     * Tries to create an instance with a negative period. This should cause an
     * exception.
     */
    @Test
    public void testInitInvalidPeriod()","0","-","-","-","-"
"2869","testPassAfterShutdown","/**
     * Tries to call acquire() after shutdown(). This should cause an exception.
     */
    @Test
    public void testPassAfterShutdown()","0","-","-","-","-"
"2870","testShutdownMultipleTimes","/**
     * Tests multiple invocations of the shutdown() method.
     *
     * @throws InterruptedException so we don't have to catch it
     */
    @Test
    public void testShutdownMultipleTimes() throws InterruptedException","0","-","-","-","-"
"2871","testShutdownOwnExecutor","/**
     * Tests the shutdown() method if the executor belongs to the semaphore. In
     * this case it has to be shut down.
     */
    @Test
    public void testShutdownOwnExecutor()","0","-","-","-","-"
"2872","testShutdownSharedExecutorNoTask","/**
     * Tests the shutdown() method for a shared executor service before a task
     * was started. This should do pretty much nothing.
     */
    @Test
    public void testShutdownSharedExecutorNoTask()","0","-","-","-","-"
"2873","testShutdownSharedExecutorTask","/**
     * Tests the shutdown() method for a shared executor after the task was
     * started. In this case the task must be canceled.
     *
     * @throws InterruptedException so we don't have to catch it
     */
    @Test
    public void testShutdownSharedExecutorTask() throws InterruptedException","0","-","-","-","-"
"2874","testStartTimer","/**
     * Tests starting the timer.
     *
     * @throws InterruptedException so we don't have to catch it
     */
    @Test
    public void testStartTimer() throws InterruptedException","0","-","-","-","-"
"2875","testTryAcquire","/**
     * Tests the tryAcquire() method. It is checked whether the semaphore can be acquired
     * by a bunch of threads the expected number of times and not more.
     */
    @Test
    public void testTryAcquire() throws InterruptedException","0","-","-","-","-"
"2876","testTryAcquireAfterShutdown","/**
     * Tries to call tryAcquire() after shutdown(). This should cause an exception.
     */
    @Test
    public void testTryAcquireAfterShutdown()","0","-","-","-","-"
"2877","testClosingThresholdCircuitBreaker","/**
     * Tests that closing a","0","-","-","-","-"
"2878","testGettingThreshold","/**
     * Tests that we can get the threshold value correctly.
     */
    @Test
    public void testGettingThreshold()","0","-","-","-","-"
"2879","testThreshold","/**
     * Tests that the threshold is working as expected when incremented and no exception is thrown.
     */
    @Test
    public void testThreshold()","0","-","-","-","-"
"2880","testThresholdCircuitBreakingException","/**
     * Tests that exceeding the threshold raises an exception.
     */
    @Test
    public void testThresholdCircuitBreakingException()","0","-","-","-","-"
"2881","testThresholdEqualsZero","/**
     * Test that when threshold is zero, the circuit breaker is always open.
     */
    @Test
    public void testThresholdEqualsZero()","0","-","-","-","-"
"2882","createInitializer","/**
     * Creates the initializer to be tested. This implementation returns the","0","-","-","-","-"
"2883","makeObject","private Object makeObject() throws ConcurrentException","0","-","-","-","-"
"2884","testIsInitialized","@Test
    public void testIsInitialized() throws ConcurrentException","0","-","-","-","-"
"2885","throwingCloser","private void throwingCloser() throws ConcurrentException","0","-","-","-","-"
"2886","setUpComputableMock","@BeforeEach
    public void setUpComputableMock()","0","-","-","-","-"
"2887","testDefaultBehaviourNotToRecalculateExecutionExceptions","@Test
    public void testDefaultBehaviourNotToRecalculateExecutionExceptions() throws Exception","0","-","-","-","-"
"2888","testDoesNotRecalculateWhenSetToFalse","@Test
    public void testDoesNotRecalculateWhenSetToFalse() throws Exception","0","-","-","-","-"
"2889","testDoesRecalculateWhenSetToTrue","@Test
    public void testDoesRecalculateWhenSetToTrue() throws Exception","0","-","-","-","-"
"2890","testOnlyCallComputableOnceIfDoesNotThrowException","@Test
    public void testOnlyCallComputableOnceIfDoesNotThrowException() throws Exception","0","-","-","-","-"
"2891","testWhenComputableThrowsError","@Test
    public void testWhenComputableThrowsError() throws Exception","0","-","-","-","-"
"2892","testWhenComputableThrowsRuntimeException","@Test
    public void testWhenComputableThrowsRuntimeException() throws Exception","0","-","-","-","-"
"2893","assertArrayEquals","private void assertArrayEquals(final long[] actual, final long... expected)","0","-","-","-","-"
"2894","testConstructable","@Test
    public void testConstructable()","0","-","-","-","-"
"2895","testGenerateBitVector","@Test
    public void testGenerateBitVector()","0","-","-","-","-"
"2896","testGenerateBitVector_longClass","@Test
    public void testGenerateBitVector_longClass()","0","-","-","-","-"
"2897","testGenerateBitVector_longClassWithArray","@Test
    public void testGenerateBitVector_longClassWithArray()","0","-","-","-","-"
"2898","testGenerateBitVector_nonEnumClass","@SuppressWarnings(""unchecked"")
    @Test
    public void testGenerateBitVector_nonEnumClass()","0","-","-","-","-"
"2899","testGenerateBitVector_nonEnumClassWithArray","@SuppressWarnings(""unchecked"")
    @Test
    public void testGenerateBitVector_nonEnumClassWithArray()","0","-","-","-","-"
"2900","testGenerateBitVector_nullArray","@Test
    public void testGenerateBitVector_nullArray()","0","-","-","-","-"
"2901","testGenerateBitVector_nullArrayElement","@Test
    public void testGenerateBitVector_nullArrayElement()","0","-","-","-","-"
"2902","testGenerateBitVector_nullClass","@Test
    public void testGenerateBitVector_nullClass()","0","-","-","-","-"
"2903","testGenerateBitVector_nullClassWithArray","@Test
    public void testGenerateBitVector_nullClassWithArray()","0","-","-","-","-"
"2904","testGenerateBitVector_nullElement","@Test
    public void testGenerateBitVector_nullElement()","0","-","-","-","-"
"2905","testGenerateBitVector_nullIterable","@Test
    public void testGenerateBitVector_nullIterable()","0","-","-","-","-"
"2906","testGenerateBitVectorFromArray","@Test
    public void testGenerateBitVectorFromArray()","0","-","-","-","-"
"2907","testGenerateBitVectors","@Test
    public void testGenerateBitVectors()","0","-","-","-","-"
"2908","testGenerateBitVectors_nonEnumClass","@SuppressWarnings(""unchecked"")
    @Test
    public void testGenerateBitVectors_nonEnumClass()","0","-","-","-","-"
"2909","testGenerateBitVectors_nonEnumClassWithArray","@SuppressWarnings(""unchecked"")
    @Test
    public void testGenerateBitVectors_nonEnumClassWithArray()","0","-","-","-","-"
"2910","testGenerateBitVectors_nullArray","@Test
    public void testGenerateBitVectors_nullArray()","0","-","-","-","-"
"2911","testGenerateBitVectors_nullArrayElement","@Test
    public void testGenerateBitVectors_nullArrayElement()","0","-","-","-","-"
"2912","testGenerateBitVectors_nullClass","@Test
    public void testGenerateBitVectors_nullClass()","0","-","-","-","-"
"2913","testGenerateBitVectors_nullClassWithArray","@Test
    public void testGenerateBitVectors_nullClassWithArray()","0","-","-","-","-"
"2914","testGenerateBitVectors_nullElement","@Test
    public void testGenerateBitVectors_nullElement()","0","-","-","-","-"
"2915","testGenerateBitVectors_nullIterable","@Test
    public void testGenerateBitVectors_nullIterable()","0","-","-","-","-"
"2916","testGenerateBitVectorsFromArray","@Test
    public void testGenerateBitVectorsFromArray()","0","-","-","-","-"
"2917","testGetEnum","@Test
    public void testGetEnum()","0","-","-","-","-"
"2918","testGetEnum_defaultEnum","@Test
    public void testGetEnum_defaultEnum()","0","-","-","-","-"
"2919","testGetEnum_nonEnumClass","/**
     * Tests raw type.
     */
    @SuppressWarnings(""unchecked"")
    @Test
    public void testGetEnum_nonEnumClass()","0","-","-","-","-"
"2920","testGetEnum_nullClass","@Test
    public void testGetEnum_nullClass()","0","-","-","-","-"
"2921","testGetEnumIgnoreCase","@Test
    public void testGetEnumIgnoreCase()","0","-","-","-","-"
"2922","testGetEnumIgnoreCase_defaultEnum","@Test
    public void testGetEnumIgnoreCase_defaultEnum()","0","-","-","-","-"
"2923","testGetEnumIgnoreCase_nonEnumClass","/**
     * Tests raw type.
     */
    @SuppressWarnings(""unchecked"")
    @Test
    public void testGetEnumIgnoreCase_nonEnumClass()","0","-","-","-","-"
"2924","testGetEnumIgnoreCase_nullClass","@Test
    public void testGetEnumIgnoreCase_nullClass()","0","-","-","-","-"
"2925","testGetEnumList","@Test
    public void testGetEnumList()","0","-","-","-","-"
"2926","testGetEnumMap","@Test
    public void testGetEnumMap()","0","-","-","-","-"
"2927","testGetEnumMap_keyFunction","@Test
    public void testGetEnumMap_keyFunction()","0","-","-","-","-"
"2928","testGetEnumSystemProperty","@Test
    public void testGetEnumSystemProperty()","0","-","-","-","-"
"2929","testGetFirstEnumIgnoreCase_defaultEnum","@Test
    public void testGetFirstEnumIgnoreCase_defaultEnum()","0","-","-","-","-"
"2930","testGetFirstEnumToIntFunction","@Test
    public void testGetFirstEnumToIntFunction()","0","-","-","-","-"
"2931","testIsValidEnum","@Test
    public void testIsValidEnum()","0","-","-","-","-"
"2932","testIsValidEnum_nullClass","@Test
    public void testIsValidEnum_nullClass()","0","-","-","-","-"
"2933","testIsValidEnumIgnoreCase","@Test
    public void testIsValidEnumIgnoreCase()","0","-","-","-","-"
"2934","testIsValidEnumIgnoreCase_nullClass","@Test
    public void testIsValidEnumIgnoreCase_nullClass()","0","-","-","-","-"
"2935","testProcessBitVector","@Test
    public void testProcessBitVector()","0","-","-","-","-"
"2936","testProcessBitVector_longClass","@Test
    public void testProcessBitVector_longClass()","0","-","-","-","-"
"2937","testProcessBitVector_nullClass","@Test
    public void testProcessBitVector_nullClass()","0","-","-","-","-"
"2938","testProcessBitVectors","@Test
    public void testProcessBitVectors()","0","-","-","-","-"
"2939","testProcessBitVectors_longClass","@Test
    public void testProcessBitVectors_longClass()","0","-","-","-","-"
"2940","testProcessBitVectors_nullClass","@Test
    public void testProcessBitVectors_nullClass()","0","-","-","-","-"
"2941","JAN","JAN(1), FEB(2), MAR(3), APR(4), MAY(5), JUN(6), JUL(7), AUG(8), SEP(9), OCT(10), NOV(11), DEC(12);","0","-","-","-","-"
"2942","Month","Month(final int id)","0","-","-","-","-"
"2943","getId","public int getId()","0","-","-","-","-"
"2944","RED","RED(""***Red***"", 1), AMBER(""**Amber**"", 2), GREEN(""*green*"", 3);

    final String label;
    final int value;","0","-","-","-","-"
"2945","Traffic2","Traffic2(final String label, final int value)","0","-","-","-","-"
"2946","getLabel","public String getLabel()","0","-","-","-","-"
"2947","getValue","public int getValue()","0","-","-","-","-"
"2948","testRemoveAllBooleanArray","@Test
    public void testRemoveAllBooleanArray()","0","-","-","-","-"
"2949","testRemoveAllBooleanArrayNegativeIndex","@Test
    public void testRemoveAllBooleanArrayNegativeIndex()","0","-","-","-","-"
"2950","testRemoveAllBooleanArrayOutOfBoundsIndex","@Test
    public void testRemoveAllBooleanArrayOutOfBoundsIndex()","0","-","-","-","-"
"2951","testRemoveAllBooleanArrayRemoveNone","@Test
    public void testRemoveAllBooleanArrayRemoveNone()","0","-","-","-","-"
"2952","testRemoveAllByteArray","@Test
    public void testRemoveAllByteArray()","0","-","-","-","-"
"2953","testRemoveAllByteArrayNegativeIndex","@Test
    public void testRemoveAllByteArrayNegativeIndex()","0","-","-","-","-"
"2954","testRemoveAllByteArrayOutOfBoundsIndex","@Test
    public void testRemoveAllByteArrayOutOfBoundsIndex()","0","-","-","-","-"
"2955","testRemoveAllByteArrayRemoveNone","@Test
    public void testRemoveAllByteArrayRemoveNone()","0","-","-","-","-"
"2956","testRemoveAllCharArray","@Test
    public void testRemoveAllCharArray()","0","-","-","-","-"
"2957","testRemoveAllCharArrayNegativeIndex","@Test
    public void testRemoveAllCharArrayNegativeIndex()","0","-","-","-","-"
"2958","testRemoveAllCharArrayOutOfBoundsIndex","@Test
    public void testRemoveAllCharArrayOutOfBoundsIndex()","0","-","-","-","-"
"2959","testRemoveAllCharArrayRemoveNone","@Test
    public void testRemoveAllCharArrayRemoveNone()","0","-","-","-","-"
"2960","testRemoveAllDoubleArray","@Test
    public void testRemoveAllDoubleArray()","0","-","-","-","-"
"2961","testRemoveAllDoubleArrayNegativeIndex","@Test
    public void testRemoveAllDoubleArrayNegativeIndex()","0","-","-","-","-"
"2962","testRemoveAllDoubleArrayOutOfBoundsIndex","@Test
    public void testRemoveAllDoubleArrayOutOfBoundsIndex()","0","-","-","-","-"
"2963","testRemoveAllDoubleArrayRemoveNone","@Test
    public void testRemoveAllDoubleArrayRemoveNone()","0","-","-","-","-"
"2964","testRemoveAllFloatArray","@Test
    public void testRemoveAllFloatArray()","0","-","-","-","-"
"2965","testRemoveAllFloatArrayNegativeIndex","@Test
    public void testRemoveAllFloatArrayNegativeIndex()","0","-","-","-","-"
"2966","testRemoveAllFloatArrayOutOfBoundsIndex","@Test
    public void testRemoveAllFloatArrayOutOfBoundsIndex()","0","-","-","-","-"
"2967","testRemoveAllFloatArrayRemoveNone","@Test
    public void testRemoveAllFloatArrayRemoveNone()","0","-","-","-","-"
"2968","testRemoveAllIntArray","@Test
    public void testRemoveAllIntArray()","0","-","-","-","-"
"2969","testRemoveAllIntArrayNegativeIndex","@Test
    public void testRemoveAllIntArrayNegativeIndex()","0","-","-","-","-"
"2970","testRemoveAllIntArrayOutOfBoundsIndex","@Test
    public void testRemoveAllIntArrayOutOfBoundsIndex()","0","-","-","-","-"
"2971","testRemoveAllIntArrayRemoveNone","@Test
    public void testRemoveAllIntArrayRemoveNone()","0","-","-","-","-"
"2972","testRemoveAllLongArray","@Test
    public void testRemoveAllLongArray()","0","-","-","-","-"
"2973","testRemoveAllLongArrayNegativeIndex","@Test
    public void testRemoveAllLongArrayNegativeIndex()","0","-","-","-","-"
"2974","testRemoveAllLongArrayOutOfBoundsIndex","@Test
    public void testRemoveAllLongArrayOutOfBoundsIndex()","0","-","-","-","-"
"2975","testRemoveAllLongArrayRemoveNone","@Test
    public void testRemoveAllLongArrayRemoveNone()","0","-","-","-","-"
"2976","testRemoveAllNullBooleanArray","@Test
    public void testRemoveAllNullBooleanArray()","0","-","-","-","-"
"2977","testRemoveAllNullByteArray","@Test
    public void testRemoveAllNullByteArray()","0","-","-","-","-"
"2978","testRemoveAllNullCharArray","@Test
    public void testRemoveAllNullCharArray()","0","-","-","-","-"
"2979","testRemoveAllNullDoubleArray","@Test
    public void testRemoveAllNullDoubleArray()","0","-","-","-","-"
"2980","testRemoveAllNullFloatArray","@Test
    public void testRemoveAllNullFloatArray()","0","-","-","-","-"
"2981","testRemoveAllNullIntArray","@Test
    public void testRemoveAllNullIntArray()","0","-","-","-","-"
"2982","testRemoveAllNullLongArray","@Test
    public void testRemoveAllNullLongArray()","0","-","-","-","-"
"2983","testRemoveAllNullObjectArray","@Test
    public void testRemoveAllNullObjectArray()","0","-","-","-","-"
"2984","testRemoveAllNullShortArray","@Test
    public void testRemoveAllNullShortArray()","0","-","-","-","-"
"2985","testRemoveAllNumberArray","@Test
    public void testRemoveAllNumberArray()","0","-","-","-","-"
"2986","testRemoveAllObjectArray","@Test
    public void testRemoveAllObjectArray()","0","-","-","-","-"
"2987","testRemoveAllObjectArrayNegativeIndex","@Test
    public void testRemoveAllObjectArrayNegativeIndex()","0","-","-","-","-"
"2988","testRemoveAllObjectArrayOutOfBoundsIndex","@Test
    public void testRemoveAllObjectArrayOutOfBoundsIndex()","0","-","-","-","-"
"2989","testRemoveAllObjectArrayRemoveNone","@Test
    public void testRemoveAllObjectArrayRemoveNone()","0","-","-","-","-"
"2990","testRemoveAllShortArray","@Test
    public void testRemoveAllShortArray()","0","-","-","-","-"
"2991","testRemoveAllShortArrayNegativeIndex","@Test
    public void testRemoveAllShortArrayNegativeIndex()","0","-","-","-","-"
"2992","testRemoveAllShortArrayOutOfBoundsIndex","@Test
    public void testRemoveAllShortArrayOutOfBoundsIndex()","0","-","-","-","-"
"2993","testRemoveAllShortArrayRemoveNone","@Test
    public void testRemoveAllShortArrayRemoveNone()","0","-","-","-","-"
"2994","testRemoveElementBooleanArray","@Test
    public void testRemoveElementBooleanArray()","0","-","-","-","-"
"2995","testRemoveElementByteArray","@Test
    public void testRemoveElementByteArray()","0","-","-","-","-"
"2996","testRemoveElementCharArray","@Test
    public void testRemoveElementCharArray()","0","-","-","-","-"
"2997","testRemoveElementDoubleArray","@Test
    public void testRemoveElementDoubleArray()","0","-","-","-","-"
"2998","testRemoveElementFloatArray","@Test
    public void testRemoveElementFloatArray()","0","-","-","-","-"
"2999","testRemoveElementIntArray","@Test
    public void testRemoveElementIntArray()","0","-","-","-","-"
"3000","testRemoveElementLongArray","@Test
    public void testRemoveElementLongArray()","0","-","-","-","-"
"3001","testRemoveElementShortArray","@Test
    public void testRemoveElementShortArray()","0","-","-","-","-"
"3002","testRemoveElementsObjectArray","@Test
    public void testRemoveElementsObjectArray()","0","-","-","-","-"
"3003","assertSupportedEncoding","private void assertSupportedEncoding(final String name)","0","-","-","-","-"
"3004","testConstructor","/**
     * The class can be instantiated.
     */
    @Test
    public void testConstructor()","0","-","-","-","-"
"3005","testMustBeSupportedJava1_3_1_and_above","@Test
    public void testMustBeSupportedJava1_3_1_and_above()","0","-","-","-","-"
"3006","testNotSupported","@Test
    public void testNotSupported()","0","-","-","-","-"
"3007","testStandardCharsetsEquality","@Test
    public void testStandardCharsetsEquality()","0","-","-","-","-"
"3008","testSupported","@Test
    public void testSupported()","0","-","-","-","-"
"3009","extractIndices","private static int[] extractIndices(final BitSet coll)","0","-","-","-","-"
"3010","extractIndices","private static int[] extractIndices(final HashSet<Integer> coll)","0","-","-","-","-"
"3011","testBitSet","@Benchmark
    public int[] testBitSet()","0","-","-","-","-"
"3012","testHashSet","@Benchmark
    public int[] testHashSet()","0","-","-","-","-"
"3013","timeBitSetRemoveAll","@Benchmark
    public int[] timeBitSetRemoveAll()","0","-","-","-","-"
"3014","timeExtractRemoveAll","@Benchmark
    public int[] timeExtractRemoveAll()","0","-","-","-","-"
"3015","Thing","Thing(final String string)","0","-","-","-","-"
"3016","toString","@Override
        public String toString()","0","-","-","-","-"
"3017","testNull","@Test
    public void testNull()","0","-","-","-","-"
"3018","testNullToString","@Test
    public void testNullToString()","0","-","-","-","-"
"3019","testSortCollection","@Test
    public void testSortCollection()","0","-","-","-","-"
"3020","between_returns_false","@Test
                void between_returns_false()","0","-","-","-","-"
"3021","betweenExclusive_returns_false","@Test
                void betweenExclusive_returns_false()","0","-","-","-","-"
"3022","static_between_returns_false","@Test
                void static_between_returns_false()","0","-","-","-","-"
"3023","static_betweenExclusive_returns_false","@Test
                void static_betweenExclusive_returns_false()","0","-","-","-","-"
"3024","between_returns_true","@Test
                void between_returns_true()","0","-","-","-","-"
"3025","betweenExclusive_returns_false","@Test
                void betweenExclusive_returns_false()","0","-","-","-","-"
"3026","static_between_returns_true","@Test
                void static_between_returns_true()","0","-","-","-","-"
"3027","static_betweenExclusive_returns_false","@Test
                void static_betweenExclusive_returns_false()","0","-","-","-","-"
"3028","between_returns_true","@Test
                void between_returns_true()","0","-","-","-","-"
"3029","betweenExclusive_returns_true","@Test
                void betweenExclusive_returns_true()","0","-","-","-","-"
"3030","static_between_returns_true","@Test
                void static_between_returns_true()","0","-","-","-","-"
"3031","static_betweenExclusive_returns_true","@Test
                void static_betweenExclusive_returns_true()","0","-","-","-","-"
"3032","equalTo_returns_false","@Test
            void equalTo_returns_false()","0","-","-","-","-"
"3033","greaterThan_returns_true","@Test
            void greaterThan_returns_true()","0","-","-","-","-"
"3034","greaterThanOrEqualTo_returns_true","@Test
            void greaterThanOrEqualTo_returns_true()","0","-","-","-","-"
"3035","lessThan_returns_false","@Test
            void lessThan_returns_false()","0","-","-","-","-"
"3036","lessThanOrEqualTo_returns_false","@Test
            void lessThanOrEqualTo_returns_false()","0","-","-","-","-"
"3037","static_ge_returns_true","@Test
            void static_ge_returns_true()","0","-","-","-","-"
"3038","static_gt_returns_true","@Test
            void static_gt_returns_true()","0","-","-","-","-"
"3039","static_le_returns_false","@Test
            void static_le_returns_false()","0","-","-","-","-"
"3040","static_lt_returns_false","@Test
            void static_lt_returns_false()","0","-","-","-","-"
"3041","between_returns_true","@Test
                void between_returns_true()","0","-","-","-","-"
"3042","betweenExclusive_returns_false","@Test
                void betweenExclusive_returns_false()","0","-","-","-","-"
"3043","static_between_returns_true","@Test
                void static_between_returns_true()","0","-","-","-","-"
"3044","static_betweenExclusive_returns_false","@Test
                void static_betweenExclusive_returns_false()","0","-","-","-","-"
"3045","between_returns_true","@Test
                void between_returns_true()","0","-","-","-","-"
"3046","betweenExclusive_returns_false","@Test
                void betweenExclusive_returns_false()","0","-","-","-","-"
"3047","static_between_returns_true","@Test
                void static_between_returns_true()","0","-","-","-","-"
"3048","static_betweenExclusive_returns_false","@Test
                void static_betweenExclusive_returns_false()","0","-","-","-","-"
"3049","between_returns_true","@Test
                void between_returns_true()","0","-","-","-","-"
"3050","betweenExclusive_returns_false","@Test
                void betweenExclusive_returns_false()","0","-","-","-","-"
"3051","static_between_returns_true","@Test
                void static_between_returns_true()","0","-","-","-","-"
"3052","static_betweenExclusive_returns_false","@Test
                void static_betweenExclusive_returns_false()","0","-","-","-","-"
"3053","equalTo_returns_true","@Test
            void equalTo_returns_true()","0","-","-","-","-"
"3054","greaterThan_returns_false","@Test
            void greaterThan_returns_false()","0","-","-","-","-"
"3055","greaterThanOrEqualTo_returns_true","@Test
            void greaterThanOrEqualTo_returns_true()","0","-","-","-","-"
"3056","lessThan_returns_false","@Test
            void lessThan_returns_false()","0","-","-","-","-"
"3057","lessThanOrEqualTo_returns_true","@Test
            void lessThanOrEqualTo_returns_true()","0","-","-","-","-"
"3058","static_ge_returns_true","@Test
            void static_ge_returns_true()","0","-","-","-","-"
"3059","static_gt_returns_false","@Test
            void static_gt_returns_false()","0","-","-","-","-"
"3060","static_le_returns_true","@Test
            void static_le_returns_true()","0","-","-","-","-"
"3061","static_lt_returns_false","@Test
            void static_lt_returns_false()","0","-","-","-","-"
"3062","between_returns_true","@Test
                void between_returns_true()","0","-","-","-","-"
"3063","betweenExclusive_returns_true","@Test
                void betweenExclusive_returns_true()","0","-","-","-","-"
"3064","static_between_returns_true","@Test
                void static_between_returns_true()","0","-","-","-","-"
"3065","static_betweenExclusive_returns_true","@Test
                void static_betweenExclusive_returns_true()","0","-","-","-","-"
"3066","between_returns_true","@Test
                void between_returns_true()","0","-","-","-","-"
"3067","betweenExclusive_returns_false","@Test
                void betweenExclusive_returns_false()","0","-","-","-","-"
"3068","static_between_returns_true","@Test
                void static_between_returns_true()","0","-","-","-","-"
"3069","static_betweenExclusive_returns_false","@Test
                void static_betweenExclusive_returns_false()","0","-","-","-","-"
"3070","between_returns_false","@Test
                void between_returns_false()","0","-","-","-","-"
"3071","betweenExclusive_returns_false","@Test
                void betweenExclusive_returns_false()","0","-","-","-","-"
"3072","static_between_returns_false","@Test
                void static_between_returns_false()","0","-","-","-","-"
"3073","static_betweenExclusive_returns_false","@Test
                void static_betweenExclusive_returns_false()","0","-","-","-","-"
"3074","equalTo_returns_false","@Test
            void equalTo_returns_false()","0","-","-","-","-"
"3075","greaterThan_returns_false","@Test
            void greaterThan_returns_false()","0","-","-","-","-"
"3076","greaterThanOrEqualTo_returns_false","@Test
            void greaterThanOrEqualTo_returns_false()","0","-","-","-","-"
"3077","lessThan_returns_true","@Test
            void lessThan_returns_true()","0","-","-","-","-"
"3078","lessThanOrEqualTo_returns_true","@Test
            void lessThanOrEqualTo_returns_true()","0","-","-","-","-"
"3079","static_ge_returns_false","@Test
            void static_ge_returns_false()","0","-","-","-","-"
"3080","static_gt_returns_false","@Test
            void static_gt_returns_false()","0","-","-","-","-"
"3081","static_le_returns_true","@Test
            void static_le_returns_true()","0","-","-","-","-"
"3082","static_lt_returns_true","@Test
            void static_lt_returns_true()","0","-","-","-","-"
"3083","testMax","@Test
    public void testMax()","0","-","-","-","-"
"3084","testMin","@Test
    public void testMin()","0","-","-","-","-"
"3085","ObjectToStringRuntimeException","public ObjectToStringRuntimeException(final String message)","0","-","-","-","-"
"3086","toString","/**
     * Throws","0","-","-","-","-"
"3087","randomProvider","static Stream<RandomUtils> randomProvider()","0","-","-","-","-"
"3088","testBoolean","/**
     * Tests next boolean
     */
    @Test
    public void testBoolean()","0","-","-","-","-"
"3089","testBoolean","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testBoolean(final RandomUtils ru)","0","-","-","-","-"
"3090","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"3091","testExtremeRangeDouble","/**
     * Tests extreme range.
     */
    @Test
    public void testExtremeRangeDouble()","0","-","-","-","-"
"3092","testExtremeRangeDouble","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testExtremeRangeDouble(final RandomUtils ru)","0","-","-","-","-"
"3093","testExtremeRangeFloat","/**
     * Tests extreme range.
     */
    @Test
    public void testExtremeRangeFloat()","0","-","-","-","-"
"3094","testExtremeRangeFloat","/**
     * Tests extreme range.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testExtremeRangeFloat(final RandomUtils ru)","0","-","-","-","-"
"3095","testExtremeRangeInt","/**
     * Tests extreme range.
     */
    @Test
    public void testExtremeRangeInt()","0","-","-","-","-"
"3096","testExtremeRangeInt","/**
     * Tests extreme range.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testExtremeRangeInt(final RandomUtils ru)","0","-","-","-","-"
"3097","testExtremeRangeLong","/**
     * Tests extreme range.
     */
    @Test
    public void testExtremeRangeLong()","0","-","-","-","-"
"3098","testExtremeRangeLong","/**
     * Tests extreme range.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testExtremeRangeLong(final RandomUtils ru)","0","-","-","-","-"
"3099","testLargeValueRangeLong","/**
     * Test a large value for long. A previous implementation using
     *","0","-","-","-","-"
"3100","testLargeValueRangeLong","/**
     * Test a large value for long. A previous implementation using
     *","0","-","-","-","-"
"3101","testNextBytes","/**
     * Tests random byte array.
     */
    @Test
    public void testNextBytes()","0","-","-","-","-"
"3102","testNextBytes","/**
     * Tests random byte array.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextBytes(final RandomUtils ru)","0","-","-","-","-"
"3103","testNextBytesNegative","@Test
    public void testNextBytesNegative()","0","-","-","-","-"
"3104","testNextBytesNegative","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextBytesNegative(final RandomUtils ru)","0","-","-","-","-"
"3105","testNextDouble","/**
     * Tests next double range.
     */
    @Test
    public void testNextDouble()","0","-","-","-","-"
"3106","testNextDouble","/**
     * Tests next double range.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextDouble(final RandomUtils ru)","0","-","-","-","-"
"3107","testNextDoubleLowerGreaterUpper","@Test
    public void testNextDoubleLowerGreaterUpper()","0","-","-","-","-"
"3108","testNextDoubleLowerGreaterUpper","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextDoubleLowerGreaterUpper(final RandomUtils ru)","0","-","-","-","-"
"3109","testNextDoubleMinimalRange","/**
     * Test next double range with minimal range.
     */
    @Test
    public void testNextDoubleMinimalRange()","0","-","-","-","-"
"3110","testNextDoubleMinimalRange","/**
     * Test next double range with minimal range.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextDoubleMinimalRange(final RandomUtils ru)","0","-","-","-","-"
"3111","testNextDoubleNegative","@Test
    public void testNextDoubleNegative()","0","-","-","-","-"
"3112","testNextDoubleNegative","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextDoubleNegative(final RandomUtils ru)","0","-","-","-","-"
"3113","testNextDoubleRandomResult","/**
     * Tests next double range, random result.
     */
    @Test
    public void testNextDoubleRandomResult()","0","-","-","-","-"
"3114","testNextDoubleRandomResult","/**
     * Tests next double range, random result.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextDoubleRandomResult(final RandomUtils ru)","0","-","-","-","-"
"3115","testNextFloat","/**
     * Tests next float range.
     */
    @Test
    public void testNextFloat()","0","-","-","-","-"
"3116","testNextFloat","/**
     * Tests next float range.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextFloat(final RandomUtils ru)","0","-","-","-","-"
"3117","testNextFloatLowerGreaterUpper","@Test
    public void testNextFloatLowerGreaterUpper()","0","-","-","-","-"
"3118","testNextFloatLowerGreaterUpper","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextFloatLowerGreaterUpper(final RandomUtils ru)","0","-","-","-","-"
"3119","testNextFloatMinimalRange","/**
     * Test next float range with minimal range.
     */
    @Test
    public void testNextFloatMinimalRange()","0","-","-","-","-"
"3120","testNextFloatMinimalRange","/**
     * Test next float range with minimal range.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextFloatMinimalRange(final RandomUtils ru)","0","-","-","-","-"
"3121","testNextFloatNegative","@Test
    public void testNextFloatNegative()","0","-","-","-","-"
"3122","testNextFloatNegative","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextFloatNegative(final RandomUtils ru)","0","-","-","-","-"
"3123","testNextFloatRandomResult","/**
     * Tests next float range, random result.
     */
    @Test
    public void testNextFloatRandomResult()","0","-","-","-","-"
"3124","testNextFloatRandomResult","/**
     * Tests next float range, random result.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextFloatRandomResult(final RandomUtils ru)","0","-","-","-","-"
"3125","testNextInt","/**
     * Tests next int range.
     */
    @Test
    public void testNextInt()","0","-","-","-","-"
"3126","testNextInt","/**
     * Tests next int range.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextInt(final RandomUtils ru)","0","-","-","-","-"
"3127","testNextIntLowerGreaterUpper","@Test
    public void testNextIntLowerGreaterUpper()","0","-","-","-","-"
"3128","testNextIntLowerGreaterUpper","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextIntLowerGreaterUpper(final RandomUtils ru)","0","-","-","-","-"
"3129","testNextIntMinimalRange","/**
     * Test next int range with minimal range.
     */
    @Test
    public void testNextIntMinimalRange()","0","-","-","-","-"
"3130","testNextIntMinimalRange","/**
     * Test next int range with minimal range.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextIntMinimalRange(final RandomUtils ru)","0","-","-","-","-"
"3131","testNextIntNegative","@Test
    public void testNextIntNegative()","0","-","-","-","-"
"3132","testNextIntNegative","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextIntNegative(final RandomUtils ru)","0","-","-","-","-"
"3133","testNextIntRandomResult","/**
     * Tests next int range, random result.
     */
    @Test
    public void testNextIntRandomResult()","0","-","-","-","-"
"3134","testNextIntRandomResult","/**
     * Tests next int range, random result.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextIntRandomResult(final RandomUtils ru)","0","-","-","-","-"
"3135","testNextLong","/**
     * Tests next long range.
     */
    @Test
    public void testNextLong()","0","-","-","-","-"
"3136","testNextLong","/**
     * Tests next long range.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextLong(final RandomUtils ru)","0","-","-","-","-"
"3137","testNextLongLowerGreaterUpper","@Test
    public void testNextLongLowerGreaterUpper()","0","-","-","-","-"
"3138","testNextLongLowerGreaterUpper","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextLongLowerGreaterUpper(final RandomUtils ru)","0","-","-","-","-"
"3139","testNextLongMinimalRange","/**
     * Test next long range with minimal range.
     */
    @Test
    public void testNextLongMinimalRange()","0","-","-","-","-"
"3140","testNextLongMinimalRange","/**
     * Test next long range with minimal range.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextLongMinimalRange(final RandomUtils ru)","0","-","-","-","-"
"3141","testNextLongNegative","@Test
    public void testNextLongNegative()","0","-","-","-","-"
"3142","testNextLongNegative","@ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextLongNegative(final RandomUtils ru)","0","-","-","-","-"
"3143","testNextLongRandomResult","/**
     * Tests next long range, random result.
     */
    @Test
    public void testNextLongRandomResult()","0","-","-","-","-"
"3144","testNextLongRandomResult","/**
     * Tests next long range, random result.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testNextLongRandomResult(final RandomUtils ru)","0","-","-","-","-"
"3145","testZeroLengthNextBytes","/**
     * Tests a zero byte array length.
     */
    @Test
    public void testZeroLengthNextBytes()","0","-","-","-","-"
"3146","testZeroLengthNextBytes","/**
     * Tests a zero byte array length.
     */
    @ParameterizedTest
    @MethodSource(""randomProvider"")
    public void testZeroLengthNextBytes(final RandomUtils ru)","0","-","-","-","-"
"3147","toString","@Override
                public String toString()","0","-","-","-","-"
"3148","assertAbbreviateWithAbbrevMarkerAndOffset","private void assertAbbreviateWithAbbrevMarkerAndOffset(final String expected, final String abbrevMarker, final int offset, final int maxWidth)","0","-","-","-","-"
"3149","assertAbbreviateWithOffset","private void assertAbbreviateWithOffset(final String expected, final int offset, final int maxWidth)","0","-","-","-","-"
"3150","innerTestSplit","private void innerTestSplit(final char separator, final String sepStr, final char noMatch)","0","-","-","-","-"
"3151","innerTestSplitPreserveAllTokens","private void innerTestSplitPreserveAllTokens(final char separator, final String sepStr, final char noMatch)","0","-","-","-","-"
"3152","testAbbreviate_StringInt","@Test
    public void testAbbreviate_StringInt()","0","-","-","-","-"
"3153","testAbbreviate_StringIntInt","@Test
    public void testAbbreviate_StringIntInt()","0","-","-","-","-"
"3154","testAbbreviate_StringStringInt","@Test
    public void testAbbreviate_StringStringInt()","0","-","-","-","-"
"3155","testAbbreviate_StringStringIntInt","@Test
    public void testAbbreviate_StringStringIntInt()","0","-","-","-","-"
"3156","testAbbreviateMarkerWithEmptyString","@Test
    public void testAbbreviateMarkerWithEmptyString()","0","-","-","-","-"
"3157","testAbbreviateMiddle","@Test
    public void testAbbreviateMiddle()","0","-","-","-","-"
"3158","testAppendIfMissing","/**
     * Tests","0","-","-","-","-"
"3159","testAppendIfMissingIgnoreCase","/**
     * Tests","0","-","-","-","-"
"3160","testCapitalize","@Test
    public void testCapitalize()","0","-","-","-","-"
"3161","testCenter_StringInt","@Test
    public void testCenter_StringInt()","0","-","-","-","-"
"3162","testCenter_StringIntChar","@Test
    public void testCenter_StringIntChar()","0","-","-","-","-"
"3163","testCenter_StringIntString","@Test
    public void testCenter_StringIntString()","0","-","-","-","-"
"3164","testChomp","@Test
    public void testChomp()","0","-","-","-","-"
"3165","testChop","@Test
    public void testChop()","0","-","-","-","-"
"3166","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"3167","testDefault_String","@Test
    public void testDefault_String()","0","-","-","-","-"
"3168","testDefault_StringString","@Test
    public void testDefault_StringString()","0","-","-","-","-"
"3169","testDefaultIfBlank_CharBuffers","@Test
    public void testDefaultIfBlank_CharBuffers()","0","-","-","-","-"
"3170","testDefaultIfBlank_StringBuffers","@Test
    public void testDefaultIfBlank_StringBuffers()","0","-","-","-","-"
"3171","testDefaultIfBlank_StringBuilders","@Test
    public void testDefaultIfBlank_StringBuilders()","0","-","-","-","-"
"3172","testDefaultIfBlank_StringString","@Test
    public void testDefaultIfBlank_StringString()","0","-","-","-","-"
"3173","testDefaultIfEmpty_CharBuffers","@Test
    public void testDefaultIfEmpty_CharBuffers()","0","-","-","-","-"
"3174","testDefaultIfEmpty_StringBuffers","@Test
    public void testDefaultIfEmpty_StringBuffers()","0","-","-","-","-"
"3175","testDefaultIfEmpty_StringBuilders","@Test
    public void testDefaultIfEmpty_StringBuilders()","0","-","-","-","-"
"3176","testDefaultIfEmpty_StringString","@Test
    public void testDefaultIfEmpty_StringString()","0","-","-","-","-"
"3177","testDeleteWhitespace_String","@Test
    public void testDeleteWhitespace_String()","0","-","-","-","-"
"3178","testDifference_StringString","@Test
    public void testDifference_StringString()","0","-","-","-","-"
"3179","testDifferenceAt_StringArray","@Test
    public void testDifferenceAt_StringArray()","0","-","-","-","-"
"3180","testDifferenceAt_StringString","@Test
    public void testDifferenceAt_StringString()","0","-","-","-","-"
"3181","testEMPTY","/**
     * A sanity check for","0","-","-","-","-"
"3182","testEscapeSurrogatePairs","@Test
    public void testEscapeSurrogatePairs()","0","-","-","-","-"
"3183","testEscapeSurrogatePairsLang858","/**
     * Tests LANG-858.
     */
    @Test
    public void testEscapeSurrogatePairsLang858()","0","-","-","-","-"
"3184","testGeorgianSample","@Test
    public void testGeorgianSample()","0","-","-","-","-"
"3185","testGetBytes_Charset","@Test
    public void testGetBytes_Charset()","0","-","-","-","-"
"3186","testGetBytes_String","@Test
    public void testGetBytes_String() throws UnsupportedEncodingException","0","-","-","-","-"
"3187","testGetCommonPrefix_StringArray","@Test
    public void testGetCommonPrefix_StringArray()","0","-","-","-","-"
"3188","testGetDigits","@Test
    public void testGetDigits()","0","-","-","-","-"
"3189","testGetFuzzyDistance","@Test
    public void testGetFuzzyDistance()","0","-","-","-","-"
"3190","testGetFuzzyDistance_NullNullNull","@Test
    public void testGetFuzzyDistance_NullNullNull()","0","-","-","-","-"
"3191","testGetFuzzyDistance_NullStringLocale","@Test
    public void testGetFuzzyDistance_NullStringLocale()","0","-","-","-","-"
"3192","testGetFuzzyDistance_StringNullLoclae","@Test
    public void testGetFuzzyDistance_StringNullLoclae()","0","-","-","-","-"
"3193","testGetFuzzyDistance_StringStringNull","@Test
    public void testGetFuzzyDistance_StringStringNull()","0","-","-","-","-"
"3194","testGetIfBlank_StringStringSupplier","@Test
    public void testGetIfBlank_StringStringSupplier()","0","-","-","-","-"
"3195","testGetIfEmpty_StringStringSupplier","@Test
    public void testGetIfEmpty_StringStringSupplier()","0","-","-","-","-"
"3196","testGetJaroWinklerDistance_NullNull","@Test
    public void testGetJaroWinklerDistance_NullNull()","0","-","-","-","-"
"3197","testGetJaroWinklerDistance_NullString","@Test
    public void testGetJaroWinklerDistance_NullString()","0","-","-","-","-"
"3198","testGetJaroWinklerDistance_StringNull","@Test
    public void testGetJaroWinklerDistance_StringNull()","0","-","-","-","-"
"3199","testGetJaroWinklerDistance_StringString","@Test
    public void testGetJaroWinklerDistance_StringString()","0","-","-","-","-"
"3200","testGetLevenshteinDistance_NullString","@Test
    public void testGetLevenshteinDistance_NullString()","0","-","-","-","-"
"3201","testGetLevenshteinDistance_NullStringInt","@Test
    public void testGetLevenshteinDistance_NullStringInt()","0","-","-","-","-"
"3202","testGetLevenshteinDistance_StringNull","@Test
    public void testGetLevenshteinDistance_StringNull()","0","-","-","-","-"
"3203","testGetLevenshteinDistance_StringNullInt","@Test
    public void testGetLevenshteinDistance_StringNullInt()","0","-","-","-","-"
"3204","testGetLevenshteinDistance_StringString","@Test
    public void testGetLevenshteinDistance_StringString()","0","-","-","-","-"
"3205","testGetLevenshteinDistance_StringStringInt","@Test
    public void testGetLevenshteinDistance_StringStringInt()","0","-","-","-","-"
"3206","testGetLevenshteinDistance_StringStringNegativeInt","@Test
    public void testGetLevenshteinDistance_StringStringNegativeInt()","0","-","-","-","-"
"3207","testIsAllLowerCase","/**
     * Test for","0","-","-","-","-"
"3208","testIsAllUpperCase","/**
     * Test for","0","-","-","-","-"
"3209","testIsMixedCase","/**
     * Test for","0","-","-","-","-"
"3210","testJoin_ArrayCharSeparator","@Test
    public void testJoin_ArrayCharSeparator()","0","-","-","-","-"
"3211","testJoin_ArrayOfBooleans","@Test
    public void testJoin_ArrayOfBooleans()","0","-","-","-","-"
"3212","testJoin_ArrayOfBytes","@Test
    public void testJoin_ArrayOfBytes()","0","-","-","-","-"
"3213","testJoin_ArrayOfChars","@Test
    public void testJoin_ArrayOfChars()","0","-","-","-","-"
"3214","testJoin_ArrayOfDoubles","@Test
    public void testJoin_ArrayOfDoubles()","0","-","-","-","-"
"3215","testJoin_ArrayOfFloats","@Test
    public void testJoin_ArrayOfFloats()","0","-","-","-","-"
"3216","testJoin_ArrayOfInts","@Test
    public void testJoin_ArrayOfInts()","0","-","-","-","-"
"3217","testJoin_ArrayOfLongs","@Test
    public void testJoin_ArrayOfLongs()","0","-","-","-","-"
"3218","testJoin_ArrayOfShorts","@Test
    public void testJoin_ArrayOfShorts()","0","-","-","-","-"
"3219","testJoin_ArrayString_EmptyDelimiter","@Test
    public void testJoin_ArrayString_EmptyDelimiter()","0","-","-","-","-"
"3220","testJoin_ArrayString_NonEmptyDelimiter","@ParameterizedTest
    @ValueSource(strings =","0","-","-","-","-"
"3221","testJoin_IterableChar","@Test
    public void testJoin_IterableChar()","0","-","-","-","-"
"3222","testJoin_IterableString","@Test
    public void testJoin_IterableString()","0","-","-","-","-"
"3223","testJoin_IteratorChar","@Test
    public void testJoin_IteratorChar()","0","-","-","-","-"
"3224","testJoin_IteratorString","@Test
    public void testJoin_IteratorString()","0","-","-","-","-"
"3225","testJoin_List_CharDelimiter","@Test
    public void testJoin_List_CharDelimiter()","0","-","-","-","-"
"3226","testJoin_List_EmptyDelimiter","@Test
    public void testJoin_List_EmptyDelimiter()","0","-","-","-","-"
"3227","testJoin_List_NonEmptyDelimiter","@ParameterizedTest
    @ValueSource(strings =","0","-","-","-","-"
"3228","testJoin_Objectarray","@Test
    public void testJoin_Objectarray()","0","-","-","-","-"
"3229","testJoin_Objects","@Test
    public void testJoin_Objects()","0","-","-","-","-"
"3230","testJoinWith","@ParameterizedTest
    @ValueSource(strings =","0","-","-","-","-"
"3231","testJoinWithThrowsException","@Test
    public void testJoinWithThrowsException()","0","-","-","-","-"
"3232","testLang1593","@Disabled
    @Test
    public void testLang1593()","0","-","-","-","-"
"3233","testLang623","@Test
    public void testLang623()","0","-","-","-","-"
"3234","testLANG666","@Test
    public void testLANG666()","0","-","-","-","-"
"3235","testLeftPad_StringInt","@Test
    public void testLeftPad_StringInt()","0","-","-","-","-"
"3236","testLeftPad_StringIntChar","@Test
    public void testLeftPad_StringIntChar()","0","-","-","-","-"
"3237","testLeftPad_StringIntString","@Test
    public void testLeftPad_StringIntString()","0","-","-","-","-"
"3238","testLength_CharBuffer","@Test
    public void testLength_CharBuffer()","0","-","-","-","-"
"3239","testLengthString","@Test
    public void testLengthString()","0","-","-","-","-"
"3240","testLengthStringBuffer","@Test
    public void testLengthStringBuffer()","0","-","-","-","-"
"3241","testLengthStringBuilder","@Test
    public void testLengthStringBuilder()","0","-","-","-","-"
"3242","testLowerCase","@Test
    public void testLowerCase()","0","-","-","-","-"
"3243","testNormalizeSpace","@Test
    public void testNormalizeSpace()","0","-","-","-","-"
"3244","testOverlay_StringStringIntInt","@Test
    public void testOverlay_StringStringIntInt()","0","-","-","-","-"
"3245","testPrependIfMissing","/**
     * Tests","0","-","-","-","-"
"3246","testPrependIfMissingIgnoreCase","/**
     * Tests","0","-","-","-","-"
"3247","testReCapitalize","@Test
    public void testReCapitalize()","0","-","-","-","-"
"3248","testRemove_char","@Test
    public void testRemove_char()","0","-","-","-","-"
"3249","testRemove_String","@Test
    public void testRemove_String()","0","-","-","-","-"
"3250","testRemoveAll_StringString","@Test
    public void testRemoveAll_StringString()","0","-","-","-","-"
"3251","testRemoveEnd","@Test
    public void testRemoveEnd()","0","-","-","-","-"
"3252","testRemoveEndIgnoreCase","@Test
    public void testRemoveEndIgnoreCase()","0","-","-","-","-"
"3253","testRemoveFirst_StringString","@Test
    public void testRemoveFirst_StringString()","0","-","-","-","-"
"3254","testRemoveIgnoreCase_String","@Test
    public void testRemoveIgnoreCase_String()","0","-","-","-","-"
"3255","testRemovePattern_StringString","@Test
    public void testRemovePattern_StringString()","0","-","-","-","-"
"3256","testRemoveStartChar","@Test
    public void testRemoveStartChar()","0","-","-","-","-"
"3257","testRemoveStartIgnoreCase","@Test
    public void testRemoveStartIgnoreCase()","0","-","-","-","-"
"3258","testRemoveStartString","@Test
    public void testRemoveStartString()","0","-","-","-","-"
"3259","testRepeat_CharInt","@Test
    public void testRepeat_CharInt()","0","-","-","-","-"
"3260","testRepeat_StringInt","@Test
    public void testRepeat_StringInt()","0","-","-","-","-"
"3261","testRepeat_StringStringInt","@Test
    public void testRepeat_StringStringInt()","0","-","-","-","-"
"3262","testReplace_StringStringArrayStringArray","/**
     * Test method for 'StringUtils.replaceEach(String, String[], String[])'
     */
    @Test
    public void testReplace_StringStringArrayStringArray()","0","-","-","-","-"
"3263","testReplace_StringStringArrayStringArrayBoolean","/**
     * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])'
     */
    @Test
    public void testReplace_StringStringArrayStringArrayBoolean()","0","-","-","-","-"
"3264","testReplace_StringStringString","@Test
    public void testReplace_StringStringString()","0","-","-","-","-"
"3265","testReplace_StringStringStringInt","@Test
    public void testReplace_StringStringStringInt()","0","-","-","-","-"
"3266","testReplaceAll_StringStringString","@Test
    public void testReplaceAll_StringStringString()","0","-","-","-","-"
"3267","testReplaceChars_StringCharChar","@Test
    public void testReplaceChars_StringCharChar()","0","-","-","-","-"
"3268","testReplaceChars_StringStringString","@Test
    public void testReplaceChars_StringStringString()","0","-","-","-","-"
"3269","testReplaceFirst_StringStringString","@Test
    public void testReplaceFirst_StringStringString()","0","-","-","-","-"
"3270","testReplaceIgnoreCase_StringStringString","@Test
    public void testReplaceIgnoreCase_StringStringString()","0","-","-","-","-"
"3271","testReplaceIgnoreCase_StringStringStringInt","@Test
    public void testReplaceIgnoreCase_StringStringStringInt()","0","-","-","-","-"
"3272","testReplaceOnce_StringStringString","@Test
    public void testReplaceOnce_StringStringString()","0","-","-","-","-"
"3273","testReplaceOnceIgnoreCase_StringStringString","@Test
    public void testReplaceOnceIgnoreCase_StringStringString()","0","-","-","-","-"
"3274","testReplacePattern_StringStringString","@Test
    public void testReplacePattern_StringStringString()","0","-","-","-","-"
"3275","testReverse_String","@Test
    public void testReverse_String()","0","-","-","-","-"
"3276","testReverseDelimited_StringChar","@Test
    public void testReverseDelimited_StringChar()","0","-","-","-","-"
"3277","testRightPad_StringInt","@Test
    public void testRightPad_StringInt()","0","-","-","-","-"
"3278","testRightPad_StringIntChar","@Test
    public void testRightPad_StringIntChar()","0","-","-","-","-"
"3279","testRightPad_StringIntString","@Test
    public void testRightPad_StringIntString()","0","-","-","-","-"
"3280","testRotate_StringInt","@Test
    public void testRotate_StringInt()","0","-","-","-","-"
"3281","testSplit_String","@Test
    public void testSplit_String()","0","-","-","-","-"
"3282","testSplit_StringChar","@Test
    public void testSplit_StringChar()","0","-","-","-","-"
"3283","testSplit_StringString_StringStringInt","@Test
    public void testSplit_StringString_StringStringInt()","0","-","-","-","-"
"3284","testSplitByCharacterType","@Test
    public void testSplitByCharacterType()","0","-","-","-","-"
"3285","testSplitByCharacterTypeCamelCase","@Test
    public void testSplitByCharacterTypeCamelCase()","0","-","-","-","-"
"3286","testSplitByWholeSeparatorPreserveAllTokens_StringString","@Test
    public void testSplitByWholeSeparatorPreserveAllTokens_StringString()","0","-","-","-","-"
"3287","testSplitByWholeSeparatorPreserveAllTokens_StringStringInt","@Test
    public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt()","0","-","-","-","-"
"3288","testSplitByWholeString_StringStringBoolean","@Test
    public void testSplitByWholeString_StringStringBoolean()","0","-","-","-","-"
"3289","testSplitByWholeString_StringStringBooleanInt","@Test
    public void testSplitByWholeString_StringStringBooleanInt()","0","-","-","-","-"
"3290","testSplitPreserveAllTokens_String","@Test
    public void testSplitPreserveAllTokens_String()","0","-","-","-","-"
"3291","testSplitPreserveAllTokens_StringChar","@Test
    public void testSplitPreserveAllTokens_StringChar()","0","-","-","-","-"
"3292","testSplitPreserveAllTokens_StringString_StringStringInt","@Test
    public void testSplitPreserveAllTokens_StringString_StringStringInt()","0","-","-","-","-"
"3293","testStringUtilsCharSequenceContract","@Test
    public void testStringUtilsCharSequenceContract()","0","-","-","-","-"
"3294","testSwapCase_String","@Test
    public void testSwapCase_String()","0","-","-","-","-"
"3295","testToCodePoints","@Test
    public void testToCodePoints()","0","-","-","-","-"
"3296","testToEncodedString","/**
     * Tests","0","-","-","-","-"
"3297","testToRootLowerCase","@Test
    @ReadsDefaultLocale
    @WritesDefaultLocale
    public void testToRootLowerCase()","0","-","-","-","-"
"3298","testToRootLowerCaseTurkish","@Test
    @DefaultLocale(""tr"")
    @ReadsDefaultLocale
    public void testToRootLowerCaseTurkish()","0","-","-","-","-"
"3299","testToRootUpperCase","@Test
    @ReadsDefaultLocale
    @WritesDefaultLocale
    public void testToRootUpperCase()","0","-","-","-","-"
"3300","testToString","/**
     * Tests","0","-","-","-","-"
"3301","testTruncate_StringInt","@Test
    public void testTruncate_StringInt()","0","-","-","-","-"
"3302","testTruncate_StringIntInt","@Test
    public void testTruncate_StringIntInt()","0","-","-","-","-"
"3303","testUnCapitalize","@Test
    public void testUnCapitalize()","0","-","-","-","-"
"3304","testUnescapeSurrogatePairs","@Test
    public void testUnescapeSurrogatePairs()","0","-","-","-","-"
"3305","testUnwrap_StringChar","@Test
    public void testUnwrap_StringChar()","0","-","-","-","-"
"3306","testUnwrap_StringString","@Test
    public void testUnwrap_StringString()","0","-","-","-","-"
"3307","testUpperCase","@Test
    public void testUpperCase()","0","-","-","-","-"
"3308","testWrap_StringChar","@Test
    public void testWrap_StringChar()","0","-","-","-","-"
"3309","testWrap_StringString","@Test
    public void testWrap_StringString()","0","-","-","-","-"
"3310","testWrapIfMissing_StringChar","@Test
    public void testWrapIfMissing_StringChar()","0","-","-","-","-"
"3311","testWrapIfMissing_StringString","@Test
    public void testWrapIfMissing_StringString()","0","-","-","-","-"
"3312","testContains_Char","@Test
    public void testContains_Char()","0","-","-","-","-"
"3313","testContains_String","@Test
    public void testContains_String()","0","-","-","-","-"
"3314","testContains_StringWithBadSupplementaryChars","/**
     * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html
     */
    @Test
    public void testContains_StringWithBadSupplementaryChars()","0","-","-","-","-"
"3315","testContains_StringWithSupplementaryChars","/**
     * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html
     */
    @Test
    public void testContains_StringWithSupplementaryChars()","0","-","-","-","-"
"3316","testContainsAny_StringCharArray","@Test
    public void testContainsAny_StringCharArray()","0","-","-","-","-"
"3317","testContainsAny_StringCharArrayWithBadSupplementaryChars","/**
     * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html
     */
    @Test
    public void testContainsAny_StringCharArrayWithBadSupplementaryChars()","0","-","-","-","-"
"3318","testContainsAny_StringCharArrayWithSupplementaryChars","/**
     * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html
     */
    @Test
    public void testContainsAny_StringCharArrayWithSupplementaryChars()","0","-","-","-","-"
"3319","testContainsAny_StringString","@Test
    public void testContainsAny_StringString()","0","-","-","-","-"
"3320","testContainsAny_StringStringArray","@Test
    public void testContainsAny_StringStringArray()","0","-","-","-","-"
"3321","testContainsAny_StringWithBadSupplementaryChars","/**
     * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html
     */
    @Test
    public void testContainsAny_StringWithBadSupplementaryChars()","0","-","-","-","-"
"3322","testContainsAny_StringWithSupplementaryChars","/**
     * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html
     */
    @Test
    public void testContainsAny_StringWithSupplementaryChars()","0","-","-","-","-"
"3323","testContainsAnyIgnoreCase_StringStringArray","@Test
    public void testContainsAnyIgnoreCase_StringStringArray()","0","-","-","-","-"
"3324","testContainsIgnoreCase_LocaleIndependence","@Test
    @DefaultLocale(language = ""de"", country = ""DE"")
    @ReadsDefaultLocale
    @WritesDefaultLocale
    public void testContainsIgnoreCase_LocaleIndependence()","0","-","-","-","-"
"3325","testContainsIgnoreCase_StringString","@Test
    public void testContainsIgnoreCase_StringString()","0","-","-","-","-"
"3326","testContainsNone_CharArray","@Test
    public void testContainsNone_CharArray()","0","-","-","-","-"
"3327","testContainsNone_CharArrayWithBadSupplementaryChars","/**
     * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html
     */
    @Test
    public void testContainsNone_CharArrayWithBadSupplementaryChars()","0","-","-","-","-"
"3328","testContainsNone_CharArrayWithSupplementaryChars","/**
     * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html
     */
    @Test
    public void testContainsNone_CharArrayWithSupplementaryChars()","0","-","-","-","-"
"3329","testContainsNone_String","@Test
    public void testContainsNone_String()","0","-","-","-","-"
"3330","testContainsNone_StringWithBadSupplementaryChars","/**
     * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html
     */
    @Test
    public void testContainsNone_StringWithBadSupplementaryChars()","0","-","-","-","-"
"3331","testContainsNone_StringWithSupplementaryChars","/**
     * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html
     */
    @Test
    public void testContainsNone_StringWithSupplementaryChars()","0","-","-","-","-"
"3332","testContainsOnly_CharArray","@Test
    public void testContainsOnly_CharArray()","0","-","-","-","-"
"3333","testContainsOnly_String","@Test
    public void testContainsOnly_String()","0","-","-","-","-"
"3334","testContainsWhitespace","@Test
    public void testContainsWhitespace()","0","-","-","-","-"
"3335","shouldNotThrowExceptionWhenValueIsBetweenBounds","@Test
                void shouldNotThrowExceptionWhenValueIsBetweenBounds()","0","-","-","-","-"
"3336","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound()","0","-","-","-","-"
"3337","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound()","0","-","-","-","-"
"3338","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsLowerBound()","0","-","-","-","-"
"3339","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsUpperBound()","0","-","-","-","-"
"3340","shouldNotThrowExceptionWhenValueIsBetweenBounds","@Test
                void shouldNotThrowExceptionWhenValueIsBetweenBounds()","0","-","-","-","-"
"3341","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound()","0","-","-","-","-"
"3342","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound()","0","-","-","-","-"
"3343","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsLowerBound()","0","-","-","-","-"
"3344","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsUpperBound()","0","-","-","-","-"
"3345","shouldNotThrowExceptionWhenValueIsBetweenBounds","@Test
                void shouldNotThrowExceptionWhenValueIsBetweenBounds()","0","-","-","-","-"
"3346","shouldThrowIllegalArgumentExceptionWhenValueIsLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWhenValueIsLowerBound()","0","-","-","-","-"
"3347","shouldThrowIllegalArgumentExceptionWhenValueIsUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWhenValueIsUpperBound()","0","-","-","-","-"
"3348","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound()","0","-","-","-","-"
"3349","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound()","0","-","-","-","-"
"3350","shouldNotThrowExceptionWhenValueIsBetweenBounds","@Test
                void shouldNotThrowExceptionWhenValueIsBetweenBounds()","0","-","-","-","-"
"3351","shouldThrowIllegalArgumentExceptionWhenValueIsLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWhenValueIsLowerBound()","0","-","-","-","-"
"3352","shouldThrowIllegalArgumentExceptionWhenValueIsUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWhenValueIsUpperBound()","0","-","-","-","-"
"3353","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound()","0","-","-","-","-"
"3354","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound()","0","-","-","-","-"
"3355","shouldNotThrowExceptionWhenValueIsBetweenBounds","@Test
                void shouldNotThrowExceptionWhenValueIsBetweenBounds()","0","-","-","-","-"
"3356","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound()","0","-","-","-","-"
"3357","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound()","0","-","-","-","-"
"3358","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsLowerBound()","0","-","-","-","-"
"3359","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsUpperBound()","0","-","-","-","-"
"3360","shouldNotThrowExceptionWhenValueIsBetweenBounds","@Test
                void shouldNotThrowExceptionWhenValueIsBetweenBounds()","0","-","-","-","-"
"3361","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound()","0","-","-","-","-"
"3362","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound()","0","-","-","-","-"
"3363","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsLowerBound()","0","-","-","-","-"
"3364","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsUpperBound()","0","-","-","-","-"
"3365","shouldNotThrowExceptionForFiniteValue","@Test
            void shouldNotThrowExceptionForFiniteValue()","0","-","-","-","-"
"3366","shouldThrowIllegalArgumentExceptionWithDefaultMessageForNaN","@Test
            void shouldThrowIllegalArgumentExceptionWithDefaultMessageForNaN()","0","-","-","-","-"
"3367","shouldThrowIllegalArgumentExceptionWithDefaultMessageForNegativeInfinity","@Test
            void shouldThrowIllegalArgumentExceptionWithDefaultMessageForNegativeInfinity()","0","-","-","-","-"
"3368","shouldThrowIllegalArgumentExceptionWithDefaultMessageForPositiveInfinity","@Test
            void shouldThrowIllegalArgumentExceptionWithDefaultMessageForPositiveInfinity()","0","-","-","-","-"
"3369","shouldNotThrowExceptionForFiniteValue","@Test
            void shouldNotThrowExceptionForFiniteValue()","0","-","-","-","-"
"3370","shouldThrowIllegalArgumentExceptionWithDefaultMessageForNaN","@Test
            void shouldThrowIllegalArgumentExceptionWithDefaultMessageForNaN()","0","-","-","-","-"
"3371","shouldThrowIllegalArgumentExceptionWithDefaultMessageForNegativeInfinity","@Test
            void shouldThrowIllegalArgumentExceptionWithDefaultMessageForNegativeInfinity()","0","-","-","-","-"
"3372","shouldThrowIllegalArgumentExceptionWithDefaultMessageForPositiveInfinity","@Test
            void shouldThrowIllegalArgumentExceptionWithDefaultMessageForPositiveInfinity()","0","-","-","-","-"
"3373","shouldNotThrowExceptionWhenValueIsBetweenBounds","@Test
                void shouldNotThrowExceptionWhenValueIsBetweenBounds()","0","-","-","-","-"
"3374","shouldNotThrowExceptionWhenValueIsLowerBound","@Test
                void shouldNotThrowExceptionWhenValueIsLowerBound()","0","-","-","-","-"
"3375","shouldNotThrowExceptionWhenValueIsUpperBound","@Test
                void shouldNotThrowExceptionWhenValueIsUpperBound()","0","-","-","-","-"
"3376","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound()","0","-","-","-","-"
"3377","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound()","0","-","-","-","-"
"3378","shouldNotThrowExceptionWhenValueIsBetweenBounds","@Test
                void shouldNotThrowExceptionWhenValueIsBetweenBounds()","0","-","-","-","-"
"3379","shouldNotThrowExceptionWhenValueIsLowerBound","@Test
                void shouldNotThrowExceptionWhenValueIsLowerBound()","0","-","-","-","-"
"3380","shouldNotThrowExceptionWhenValueIsUpperBound","@Test
                void shouldNotThrowExceptionWhenValueIsUpperBound()","0","-","-","-","-"
"3381","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound()","0","-","-","-","-"
"3382","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound()","0","-","-","-","-"
"3383","shouldNotThrowExceptionWhenValueIsBetweenBounds","@Test
                void shouldNotThrowExceptionWhenValueIsBetweenBounds()","0","-","-","-","-"
"3384","shouldNotThrowExceptionWhenValueIsLowerBound","@Test
                void shouldNotThrowExceptionWhenValueIsLowerBound()","0","-","-","-","-"
"3385","shouldNotThrowExceptionWhenValueIsUpperBound","@Test
                void shouldNotThrowExceptionWhenValueIsUpperBound()","0","-","-","-","-"
"3386","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound()","0","-","-","-","-"
"3387","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound()","0","-","-","-","-"
"3388","shouldNotThrowExceptionWhenValueIsBetweenBounds","@Test
                void shouldNotThrowExceptionWhenValueIsBetweenBounds()","0","-","-","-","-"
"3389","shouldNotThrowExceptionWhenValueIsLowerBound","@Test
                void shouldNotThrowExceptionWhenValueIsLowerBound()","0","-","-","-","-"
"3390","shouldNotThrowExceptionWhenValueIsUpperBound","@Test
                void shouldNotThrowExceptionWhenValueIsUpperBound()","0","-","-","-","-"
"3391","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound()","0","-","-","-","-"
"3392","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound()","0","-","-","-","-"
"3393","shouldNotThrowExceptionWhenValueIsBetweenBounds","@Test
                void shouldNotThrowExceptionWhenValueIsBetweenBounds()","0","-","-","-","-"
"3394","shouldNotThrowExceptionWhenValueIsLowerBound","@Test
                void shouldNotThrowExceptionWhenValueIsLowerBound()","0","-","-","-","-"
"3395","shouldNotThrowExceptionWhenValueIsUpperBound","@Test
                void shouldNotThrowExceptionWhenValueIsUpperBound()","0","-","-","-","-"
"3396","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound()","0","-","-","-","-"
"3397","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound()","0","-","-","-","-"
"3398","shouldNotThrowExceptionWhenValueIsBetweenBounds","@Test
                void shouldNotThrowExceptionWhenValueIsBetweenBounds()","0","-","-","-","-"
"3399","shouldNotThrowExceptionWhenValueIsLowerBound","@Test
                void shouldNotThrowExceptionWhenValueIsLowerBound()","0","-","-","-","-"
"3400","shouldNotThrowExceptionWhenValueIsUpperBound","@Test
                void shouldNotThrowExceptionWhenValueIsUpperBound()","0","-","-","-","-"
"3401","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound()","0","-","-","-","-"
"3402","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound()","0","-","-","-","-"
"3403","shouldNotThrowExceptionWhenClassIsAssignable","@Test
            void shouldNotThrowExceptionWhenClassIsAssignable()","0","-","-","-","-"
"3404","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenClassIsNotAssignable","@Test
            void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenClassIsNotAssignable()","0","-","-","-","-"
"3405","shouldNotThrowExceptionWhenClassIsAssignable","@Test
            void shouldNotThrowExceptionWhenClassIsAssignable()","0","-","-","-","-"
"3406","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenClassIsNotAssignable","@Test
            void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenClassIsNotAssignable()","0","-","-","-","-"
"3407","shouldThrowIllegalArgumentExceptionWithNullSuperType","@Test
            void shouldThrowIllegalArgumentExceptionWithNullSuperType()","0","-","-","-","-"
"3408","shouldThrowIllegalArgumentExceptionWithNullType","@Test
            void shouldThrowIllegalArgumentExceptionWithNullType()","0","-","-","-","-"
"3409","shouldThrowIllegalArgumentExceptionWithNullTypes","@Test
            void shouldThrowIllegalArgumentExceptionWithNullTypes()","0","-","-","-","-"
"3410","shouldNotThrowExceptionWhenValueIsInstanceOfClass","@Test
            void shouldNotThrowExceptionWhenValueIsInstanceOfClass()","0","-","-","-","-"
"3411","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsNotInstanceOfClass","@Test
            void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsNotInstanceOfClass()","0","-","-","-","-"
"3412","shouldNotThrowExceptionWhenValueIsInstanceOfClass","@Test
            void shouldNotThrowExceptionWhenValueIsInstanceOfClass()","0","-","-","-","-"
"3413","shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsNotInstanceOfClass","@Test
            void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsNotInstanceOfClass()","0","-","-","-","-"
"3414","shouldNotThrowExceptionWhenValueIsInstanceOfClass","@Test
            void shouldNotThrowExceptionWhenValueIsInstanceOfClass()","0","-","-","-","-"
"3415","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsNotInstanceOfClass","@Test
            void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsNotInstanceOfClass()","0","-","-","-","-"
"3416","shouldNotThrowForTrueExpression","@Test
            void shouldNotThrowForTrueExpression()","0","-","-","-","-"
"3417","shouldThrowExceptionWithDoubleInsertedIntoTemplateMessageForFalseExpression","@Test
            void shouldThrowExceptionWithDoubleInsertedIntoTemplateMessageForFalseExpression()","0","-","-","-","-"
"3418","shouldNotThrowForTrueExpression","@Test
            void shouldNotThrowForTrueExpression()","0","-","-","-","-"
"3419","shouldThrowExceptionWithLongInsertedIntoTemplateMessageForFalseExpression","@Test
            void shouldThrowExceptionWithLongInsertedIntoTemplateMessageForFalseExpression()","0","-","-","-","-"
"3420","shouldNotThrowForTrueExpression","@Test
            void shouldNotThrowForTrueExpression()","0","-","-","-","-"
"3421","shouldThrowExceptionWithGivenMessageContainingSpecialCharacterForFalseExpression","@Test
            void shouldThrowExceptionWithGivenMessageContainingSpecialCharacterForFalseExpression()","0","-","-","-","-"
"3422","shouldThrowExceptionWithGivenMessageForFalseExpression","@Test
            void shouldThrowExceptionWithGivenMessageForFalseExpression()","0","-","-","-","-"
"3423","shouldNotThrowForTrueExpression","@Test
            void shouldNotThrowForTrueExpression()","0","-","-","-","-"
"3424","shouldThrowExceptionWithDoubleInsertedIntoTemplateMessageForFalseExpression","@Test
            void shouldThrowExceptionWithDoubleInsertedIntoTemplateMessageForFalseExpression()","0","-","-","-","-"
"3425","shouldNotThrowForTrueExpression","@Test
            void shouldNotThrowForTrueExpression()","0","-","-","-","-"
"3426","shouldThrowExceptionWithDoubleInsertedIntoTemplateMessageForFalseExpression","@Test
            void shouldThrowExceptionWithDoubleInsertedIntoTemplateMessageForFalseExpression()","0","-","-","-","-"
"3427","shouldNotThrowForTrueExpression","@Test
            void shouldNotThrowForTrueExpression()","0","-","-","-","-"
"3428","shouldThrowExceptionWithDefaultMessageForFalseExpression","@Test
            void shouldThrowExceptionWithDefaultMessageForFalseExpression()","0","-","-","-","-"
"3429","shouldNotThrowExceptionWhenStringMatchesPattern","@Test
            void shouldNotThrowExceptionWhenStringMatchesPattern()","0","-","-","-","-"
"3430","shouldThrowIllegalArgumentExceptionWhenStringDoesNotMatchPattern","@Test
            void shouldThrowIllegalArgumentExceptionWhenStringDoesNotMatchPattern()","0","-","-","-","-"
"3431","shouldNotThrowExceptionWhenStringMatchesPattern","@Test
            void shouldNotThrowExceptionWhenStringMatchesPattern()","0","-","-","-","-"
"3432","shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenStringDoesNotMatchPattern","@Test
            void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenStringDoesNotMatchPattern()","0","-","-","-","-"
"3433","shouldNotThrowExceptionForNonEmptyArray","@Test
                void shouldNotThrowExceptionForNonEmptyArray()","0","-","-","-","-"
"3434","shouldReturnSameInstance","@Test
                void shouldReturnSameInstance()","0","-","-","-","-"
"3435","shouldThrowIllegalArgumentExceptionWithGivenMessageForArrayWithNullElement","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageForArrayWithNullElement()","0","-","-","-","-"
"3436","shouldThrowNullPointerExceptionWithDefaultMessageForNullArray","@Test
                void shouldThrowNullPointerExceptionWithDefaultMessageForNullArray()","0","-","-","-","-"
"3437","shouldNotThrowExceptionForNonEmptyArray","@Test
                void shouldNotThrowExceptionForNonEmptyArray()","0","-","-","-","-"
"3438","shouldReturnSameInstance","@Test
                void shouldReturnSameInstance()","0","-","-","-","-"
"3439","shouldThrowIllegalArgumentExceptionWithDefaultMessageForArrayWithNullElement","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageForArrayWithNullElement()","0","-","-","-","-"
"3440","shouldThrowNullPointerExceptionWithDefaultMessageForNullArray","@Test
                void shouldThrowNullPointerExceptionWithDefaultMessageForNullArray()","0","-","-","-","-"
"3441","shouldNotThrowExceptionForNonEmptyCollection","@Test
                void shouldNotThrowExceptionForNonEmptyCollection()","0","-","-","-","-"
"3442","shouldReturnSameInstance","@Test
                void shouldReturnSameInstance()","0","-","-","-","-"
"3443","shouldThrowIllegalArgumentExceptionWithGivenMessageForCollectionWithNullElement","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageForCollectionWithNullElement()","0","-","-","-","-"
"3444","shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection","@Test
                void shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection()","0","-","-","-","-"
"3445","shouldNotThrowExceptionForNonEmptyCollection","@Test
                void shouldNotThrowExceptionForNonEmptyCollection()","0","-","-","-","-"
"3446","shouldReturnSameInstance","@Test
                void shouldReturnSameInstance()","0","-","-","-","-"
"3447","shouldThrowIllegalArgumentExceptionWithDefaultMessageForCollectionWithNullElement","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageForCollectionWithNullElement()","0","-","-","-","-"
"3448","shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection","@Test
                void shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection()","0","-","-","-","-"
"3449","shouldNotThrowExceptionForNonEmptyString","@Test
            void shouldNotThrowExceptionForNonEmptyString()","0","-","-","-","-"
"3450","shouldNotThrowExceptionForNonEmptyStringContainingSpaces","@Test
            void shouldNotThrowExceptionForNonEmptyStringContainingSpaces()","0","-","-","-","-"
"3451","shouldNotThrowExceptionForNonEmptyStringContainingWhitespaceChars","@Test
            void shouldNotThrowExceptionForNonEmptyStringContainingWhitespaceChars()","0","-","-","-","-"
"3452","shouldReturnNonBlankValue","@Test
            void shouldReturnNonBlankValue()","0","-","-","-","-"
"3453","shouldThrowIllegalArgumentExceptionWithGivenMessageForBlankString","@Test
            void shouldThrowIllegalArgumentExceptionWithGivenMessageForBlankString()","0","-","-","-","-"
"3454","shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyString","@Test
            void shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyString()","0","-","-","-","-"
"3455","shouldThrowIllegalArgumentExceptionWithGivenMessageForStringContainingOnlyWhitespaceChars","@Test
            void shouldThrowIllegalArgumentExceptionWithGivenMessageForStringContainingOnlyWhitespaceChars()","0","-","-","-","-"
"3456","shouldThrowNullPointerExceptionWithGivenMessageForNullString","@Test
            void shouldThrowNullPointerExceptionWithGivenMessageForNullString()","0","-","-","-","-"
"3457","shouldNotThrowExceptionForNonEmptyString","@Test
            void shouldNotThrowExceptionForNonEmptyString()","0","-","-","-","-"
"3458","shouldNotThrowExceptionForNonEmptyStringContainingSpaces","@Test
            void shouldNotThrowExceptionForNonEmptyStringContainingSpaces()","0","-","-","-","-"
"3459","shouldNotThrowExceptionForNonEmptyStringContainingWhitespaceChars","@Test
            void shouldNotThrowExceptionForNonEmptyStringContainingWhitespaceChars()","0","-","-","-","-"
"3460","shouldReturnNonBlankValue","@Test
            void shouldReturnNonBlankValue()","0","-","-","-","-"
"3461","shouldThrowIllegalArgumentExceptionWithDefaultMessageForBlankString","@Test
            void shouldThrowIllegalArgumentExceptionWithDefaultMessageForBlankString()","0","-","-","-","-"
"3462","shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyString","@Test
            void shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyString()","0","-","-","-","-"
"3463","shouldThrowIllegalArgumentExceptionWithDefaultMessageForStringContainingOnlyWhitespaceChars","@Test
            void shouldThrowIllegalArgumentExceptionWithDefaultMessageForStringContainingOnlyWhitespaceChars()","0","-","-","-","-"
"3464","shouldThrowNullPointerExceptionWithDefaultMessageForNullString","@Test
            void shouldThrowNullPointerExceptionWithDefaultMessageForNullString()","0","-","-","-","-"
"3465","shouldNotThrowExceptionForArrayContainingNullReference","@Test
                void shouldNotThrowExceptionForArrayContainingNullReference()","0","-","-","-","-"
"3466","shouldReturnTheSameInstance","@Test
                void shouldReturnTheSameInstance()","0","-","-","-","-"
"3467","shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyArray","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyArray()","0","-","-","-","-"
"3468","shouldThrowNullPointerExceptionWithGivenMessageForNullArray","@Test
                void shouldThrowNullPointerExceptionWithGivenMessageForNullArray()","0","-","-","-","-"
"3469","shouldNotThrowExceptionForArrayContainingNullReference","@Test
                void shouldNotThrowExceptionForArrayContainingNullReference()","0","-","-","-","-"
"3470","shouldReturnTheSameInstance","@Test
                void shouldReturnTheSameInstance()","0","-","-","-","-"
"3471","shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyArray","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyArray()","0","-","-","-","-"
"3472","shouldThrowNullPointerExceptionWithDefaultMessageForNullArray","@Test
                void shouldThrowNullPointerExceptionWithDefaultMessageForNullArray()","0","-","-","-","-"
"3473","shouldNotThrowExceptionForNonEmptyString","@Test
                void shouldNotThrowExceptionForNonEmptyString()","0","-","-","-","-"
"3474","shouldReturnTheSameInstance","@Test
                void shouldReturnTheSameInstance()","0","-","-","-","-"
"3475","shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyString","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyString()","0","-","-","-","-"
"3476","shouldThrowNullPointerExceptionWithGivenMessageForNullCharSequence","@Test
                void shouldThrowNullPointerExceptionWithGivenMessageForNullCharSequence()","0","-","-","-","-"
"3477","shouldNotThrowExceptionForNonEmptyString","@Test
                void shouldNotThrowExceptionForNonEmptyString()","0","-","-","-","-"
"3478","shouldReturnTheSameInstance","@Test
                void shouldReturnTheSameInstance()","0","-","-","-","-"
"3479","shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyString","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyString()","0","-","-","-","-"
"3480","shouldThrowNullPointerExceptionWithDefaultMessageForNullCharSequence","@Test
                void shouldThrowNullPointerExceptionWithDefaultMessageForNullCharSequence()","0","-","-","-","-"
"3481","shouldNotThrowExceptionForCollectionContainingNullReference","@Test
                void shouldNotThrowExceptionForCollectionContainingNullReference()","0","-","-","-","-"
"3482","shouldReturnTheSameInstance","@Test
                void shouldReturnTheSameInstance()","0","-","-","-","-"
"3483","shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyCollection","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyCollection()","0","-","-","-","-"
"3484","shouldThrowNullPointerExceptionWithGivenMessageForNullCollection","@Test
                void shouldThrowNullPointerExceptionWithGivenMessageForNullCollection()","0","-","-","-","-"
"3485","shouldNotThrowExceptionForCollectionContainingNullReference","@Test
                void shouldNotThrowExceptionForCollectionContainingNullReference()","0","-","-","-","-"
"3486","shouldReturnTheSameInstance","@Test
                void shouldReturnTheSameInstance()","0","-","-","-","-"
"3487","shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyCollection","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyCollection()","0","-","-","-","-"
"3488","shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection","@Test
                void shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection()","0","-","-","-","-"
"3489","shouldNotThrowExceptionForMapContainingNullMapping","@Test
                void shouldNotThrowExceptionForMapContainingNullMapping()","0","-","-","-","-"
"3490","shouldReturnTheSameInstance","@Test
                void shouldReturnTheSameInstance()","0","-","-","-","-"
"3491","shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyMap","@Test
                void shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyMap()","0","-","-","-","-"
"3492","shouldThrowNullPointerExceptionWithGivenMessageForNullMap","@Test
                void shouldThrowNullPointerExceptionWithGivenMessageForNullMap()","0","-","-","-","-"
"3493","shouldNotThrowExceptionForMapContainingNullMapping","@Test
                void shouldNotThrowExceptionForMapContainingNullMapping()","0","-","-","-","-"
"3494","shouldReturnTheSameInstance","@Test
                void shouldReturnTheSameInstance()","0","-","-","-","-"
"3495","shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyMap","@Test
                void shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyMap()","0","-","-","-","-"
"3496","shouldThrowNullPointerExceptionWithDefaultMessageForNullMap","@Test
                void shouldThrowNullPointerExceptionWithDefaultMessageForNullMap()","0","-","-","-","-"
"3497","shouldNotThrowExceptionForNegativeInfinity","@Test
            void shouldNotThrowExceptionForNegativeInfinity()","0","-","-","-","-"
"3498","shouldNotThrowExceptionForNumber","@Test
            void shouldNotThrowExceptionForNumber()","0","-","-","-","-"
"3499","shouldNotThrowExceptionForPositiveInfinity","@Test
            void shouldNotThrowExceptionForPositiveInfinity()","0","-","-","-","-"
"3500","shouldThrowIllegalArgumentExceptionWithGivenMessageForNaN","@Test
            void shouldThrowIllegalArgumentExceptionWithGivenMessageForNaN()","0","-","-","-","-"
"3501","shouldNotThrowExceptionForNegativeInfinity","@Test
            void shouldNotThrowExceptionForNegativeInfinity()","0","-","-","-","-"
"3502","shouldNotThrowExceptionForNumber","@Test
            void shouldNotThrowExceptionForNumber()","0","-","-","-","-"
"3503","shouldNotThrowExceptionForPositiveInfinity","@Test
            void shouldNotThrowExceptionForPositiveInfinity()","0","-","-","-","-"
"3504","shouldThrowIllegalArgumentExceptionWithDefaultMessageForNaN","@Test
            void shouldThrowIllegalArgumentExceptionWithDefaultMessageForNaN()","0","-","-","-","-"
"3505","shouldNotThrowForNonNullReference","@Test
            void shouldNotThrowForNonNullReference()","0","-","-","-","-"
"3506","shouldReturnTheSameInstance","@Test
            void shouldReturnTheSameInstance()","0","-","-","-","-"
"3507","shouldThrowExceptionWithGivenMessageForNullReference","@Test
            void shouldThrowExceptionWithGivenMessageForNullReference()","0","-","-","-","-"
"3508","shouldNotThrowForNonNullReference","@Test
            void shouldNotThrowForNonNullReference()","0","-","-","-","-"
"3509","shouldReturnTheSameInstance","@Test
            void shouldReturnTheSameInstance()","0","-","-","-","-"
"3510","shouldThrowExceptionWithDefaultMessageForNullReference","@Test
            void shouldThrowExceptionWithDefaultMessageForNullReference()","0","-","-","-","-"
"3511","hasOnlyOnePublicConstructor","@Test
        void hasOnlyOnePublicConstructor()","0","-","-","-","-"
"3512","instancesCanBeConstructed","@Test
        void instancesCanBeConstructed()","0","-","-","-","-"
"3513","isNonFinalClass","@Test
        void isNonFinalClass()","0","-","-","-","-"
"3514","isPublicClass","@Test
        void isPublicClass()","0","-","-","-","-"
"3515","shouldNotThrowExceptionForValidIndex","@Test
                void shouldNotThrowExceptionForValidIndex()","0","-","-","-","-"
"3516","shouldReturnSameInstance","@Test
                void shouldReturnSameInstance()","0","-","-","-","-"
"3517","shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForIndexOutOfBounds","@Test
                void shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForIndexOutOfBounds()","0","-","-","-","-"
"3518","shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForNegativeIndex","@Test
                void shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForNegativeIndex()","0","-","-","-","-"
"3519","shouldThrowNullPointerExceptionWithDefaultMessageForNullArray","@Test
                void shouldThrowNullPointerExceptionWithDefaultMessageForNullArray()","0","-","-","-","-"
"3520","shouldNotThrowExceptionForValidIndex","@Test
                void shouldNotThrowExceptionForValidIndex()","0","-","-","-","-"
"3521","shouldReturnSameInstance","@Test
                void shouldReturnSameInstance()","0","-","-","-","-"
"3522","shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForIndexOutOfBounds","@Test
                void shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForIndexOutOfBounds()","0","-","-","-","-"
"3523","shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForNegativeIndex","@Test
                void shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForNegativeIndex()","0","-","-","-","-"
"3524","shouldThrowNullPointerExceptionWithDefaultForNullArray","@Test
                void shouldThrowNullPointerExceptionWithDefaultForNullArray()","0","-","-","-","-"
"3525","shouldNotThrowExceptionForValidIndex","@Test
                void shouldNotThrowExceptionForValidIndex()","0","-","-","-","-"
"3526","shouldReturnSameInstance","@Test
                void shouldReturnSameInstance()","0","-","-","-","-"
"3527","shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForIndexOutOfBounds","@Test
                void shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForIndexOutOfBounds()","0","-","-","-","-"
"3528","shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForNegativeIndex","@Test
                void shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForNegativeIndex()","0","-","-","-","-"
"3529","shouldThrowNullPointerExceptionWithDefaultMessageForNullStr","@Test
                void shouldThrowNullPointerExceptionWithDefaultMessageForNullStr()","0","-","-","-","-"
"3530","shouldNotThrowExceptionForValidIndex","@Test
                void shouldNotThrowExceptionForValidIndex()","0","-","-","-","-"
"3531","shouldReturnSameInstance","@Test
                void shouldReturnSameInstance()","0","-","-","-","-"
"3532","shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForIndexOutOfBounds","@Test
                void shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForIndexOutOfBounds()","0","-","-","-","-"
"3533","shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForNegativeIndex","@Test
                void shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForNegativeIndex()","0","-","-","-","-"
"3534","shouldThrowNullPointerExceptionWithDefaultForNullString","@Test
                void shouldThrowNullPointerExceptionWithDefaultForNullString()","0","-","-","-","-"
"3535","shouldNotThrowExceptionForValidIndex","@Test
                void shouldNotThrowExceptionForValidIndex()","0","-","-","-","-"
"3536","shouldReturnSameInstance","@Test
                void shouldReturnSameInstance()","0","-","-","-","-"
"3537","shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForIndexOutOfBounds","@Test
                void shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForIndexOutOfBounds()","0","-","-","-","-"
"3538","shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForNegativeIndex","@Test
                void shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForNegativeIndex()","0","-","-","-","-"
"3539","shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection","@Test
                void shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection()","0","-","-","-","-"
"3540","shouldNotThrowExceptionForValidIndex","@Test
                void shouldNotThrowExceptionForValidIndex()","0","-","-","-","-"
"3541","shouldReturnSameInstance","@Test
                void shouldReturnSameInstance()","0","-","-","-","-"
"3542","shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForIndexOutOfBounds","@Test
                void shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForIndexOutOfBounds()","0","-","-","-","-"
"3543","shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForNegativeIndex","@Test
                void shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForNegativeIndex()","0","-","-","-","-"
"3544","shouldThrowNullPointerExceptionWithDefaultForNullCollection","@Test
                void shouldThrowNullPointerExceptionWithDefaultForNullCollection()","0","-","-","-","-"
"3545","shouldNotThrowExceptionForTrueExpression","@Test
            void shouldNotThrowExceptionForTrueExpression()","0","-","-","-","-"
"3546","shouldThrowExceptionForTrueExpression","@Test
            void shouldThrowExceptionForTrueExpression()","0","-","-","-","-"
"3547","shouldNotThrowExceptionForValidIndex","@Test
            void shouldNotThrowExceptionForValidIndex()","0","-","-","-","-"
"3548","shouldThrowExceptionForTrueExpression","@Test
            void shouldThrowExceptionForTrueExpression()","0","-","-","-","-"
"3549","testIsAlpha","@Test
    public void testIsAlpha()","0","-","-","-","-"
"3550","testIsAlphanumeric","@Test
    public void testIsAlphanumeric()","0","-","-","-","-"
"3551","testIsAlphanumericSpace","@Test
    public void testIsAlphanumericSpace()","0","-","-","-","-"
"3552","testIsAlphaspace","@Test
    public void testIsAlphaspace()","0","-","-","-","-"
"3553","testIsAsciiPrintable_String","@Test
    public void testIsAsciiPrintable_String()","0","-","-","-","-"
"3554","testIsNumeric","@Test
    public void testIsNumeric()","0","-","-","-","-"
"3555","testIsNumericSpace","@Test
    public void testIsNumericSpace()","0","-","-","-","-"
"3556","testIsWhitespace","@Test
    public void testIsWhitespace()","0","-","-","-","-"
"3557","toArrayPropagatingType","@SafeVarargs
    private static <T> T[] toArrayPropagatingType(final T... items)","0","-","-","-","-"
"3558","assertIsEquals","private void assertIsEquals(final Object array1, final Object array2, final Object array3)","0","-","-","-","-"
"3559","testArraycopyFunction","@Test
    public void testArraycopyFunction()","0","-","-","-","-"
"3560","testArraycopySupplier","@Test
    public void testArraycopySupplier()","0","-","-","-","-"
"3561","testArrayCreation","/**
     * Tests generic array creation with parameters of same type.
     */
    @Test
    public void testArrayCreation()","0","-","-","-","-"
"3562","testArrayCreationWithDifferentTypes","/**
     * Tests generic array creation with parameters of common base type.
     */
    @Test
    public void testArrayCreationWithDifferentTypes()","0","-","-","-","-"
"3563","testArrayCreationWithGeneralReturnType","/**
     * Tests generic array creation with general return type.
     */
    @Test
    public void testArrayCreationWithGeneralReturnType()","0","-","-","-","-"
"3564","testClone","@Test
    public void testClone()","0","-","-","-","-"
"3565","testCloneBoolean","@Test
    public void testCloneBoolean()","0","-","-","-","-"
"3566","testCloneByte","@Test
    public void testCloneByte()","0","-","-","-","-"
"3567","testCloneChar","@Test
    public void testCloneChar()","0","-","-","-","-"
"3568","testCloneDouble","@Test
    public void testCloneDouble()","0","-","-","-","-"
"3569","testCloneFloat","@Test
    public void testCloneFloat()","0","-","-","-","-"
"3570","testCloneInt","@Test
    public void testCloneInt()","0","-","-","-","-"
"3571","testCloneLong","@Test
    public void testCloneLong()","0","-","-","-","-"
"3572","testCloneShort","@Test
    public void testCloneShort()","0","-","-","-","-"
"3573","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"3574","testContains","@Test
    public void testContains()","0","-","-","-","-"
"3575","testContains_LANG_1261","@Test
    public void testContains_LANG_1261()","0","-","-","-","-"
"3576","equals","@Override
            public boolean equals(final Object o)","0","-","-","-","-"
"3577","hashCode","@Override
            public int hashCode()","0","-","-","-","-"
"3578","testContainsAnyEnum","@Test
    public void testContainsAnyEnum()","0","-","-","-","-"
"3579","testContainsAnyInt","@Test
    public void testContainsAnyInt()","0","-","-","-","-"
"3580","testContainsAnyObject","@Test
    public void testContainsAnyObject()","0","-","-","-","-"
"3581","testContainsBoolean","@Test
    public void testContainsBoolean()","0","-","-","-","-"
"3582","testContainsByte","@Test
    public void testContainsByte()","0","-","-","-","-"
"3583","testContainsChar","@Test
    public void testContainsChar()","0","-","-","-","-"
"3584","testContainsDouble","@Test
    public void testContainsDouble()","0","-","-","-","-"
"3585","testContainsDoubleNaN","@Test
    public void testContainsDoubleNaN()","0","-","-","-","-"
"3586","testContainsDoubleTolerance","@Test
    public void testContainsDoubleTolerance()","0","-","-","-","-"
"3587","testContainsFloat","@Test
    public void testContainsFloat()","0","-","-","-","-"
"3588","testContainsFloatNaN","@Test
    public void testContainsFloatNaN()","0","-","-","-","-"
"3589","testContainsInt","@Test
    public void testContainsInt()","0","-","-","-","-"
"3590","testContainsLong","@Test
    public void testContainsLong()","0","-","-","-","-"
"3591","testContainsShort","@Test
    public void testContainsShort()","0","-","-","-","-"
"3592","testCreatePrimitiveArray","@Test
    public void testCreatePrimitiveArray()","0","-","-","-","-"
"3593","testCreatePrimitiveArrayViaObjectArray","@Test
    public void testCreatePrimitiveArrayViaObjectArray()","0","-","-","-","-"
"3594","testEmptyArrayCreation","/**
     * Tests generic empty array creation with generic type.
     */
    @Test
    public void testEmptyArrayCreation()","0","-","-","-","-"
"3595","testGet","@Test
    public void testGet()","0","-","-","-","-"
"3596","testGetComponentType","@Test
    public void testGetComponentType()","0","-","-","-","-"
"3597","testGetDefault","@Test
    public void testGetDefault()","0","-","-","-","-"
"3598","testGetLength","@Test
    public void testGetLength()","0","-","-","-","-"
"3599","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"3600","testIndexesOf","@Test
    public void testIndexesOf()","0","-","-","-","-"
"3601","testIndexesOfBoolean","@Test
    public void testIndexesOfBoolean()","0","-","-","-","-"
"3602","testIndexesOfBooleanWithStartIndex","@Test
    public void testIndexesOfBooleanWithStartIndex()","0","-","-","-","-"
"3603","testIndexesOfByte","@Test
    public void testIndexesOfByte()","0","-","-","-","-"
"3604","testIndexesOfByteWithStartIndex","@Test
    public void testIndexesOfByteWithStartIndex()","0","-","-","-","-"
"3605","testIndexesOfChar","@Test
    public void testIndexesOfChar()","0","-","-","-","-"
"3606","testIndexesOfCharWithStartIndex","@Test
    public void testIndexesOfCharWithStartIndex()","0","-","-","-","-"
"3607","testIndexesOfDouble","@Test
    public void testIndexesOfDouble()","0","-","-","-","-"
"3608","testIndexesOfDoubleTolerance","@Test
    public void testIndexesOfDoubleTolerance()","0","-","-","-","-"
"3609","testIndexesOfDoubleWithStartIndex","@Test
    public void testIndexesOfDoubleWithStartIndex()","0","-","-","-","-"
"3610","testIndexesOfDoubleWithStartIndexTolerance","@Test
    public void testIndexesOfDoubleWithStartIndexTolerance()","0","-","-","-","-"
"3611","testIndexesOfFloat","@Test
    public void testIndexesOfFloat()","0","-","-","-","-"
"3612","testIndexesOfFloatWithStartIndex","@Test
    public void testIndexesOfFloatWithStartIndex()","0","-","-","-","-"
"3613","testIndexesOfIntWithStartIndex","@Test
    public void testIndexesOfIntWithStartIndex()","0","-","-","-","-"
"3614","testIndexesOfLong","@Test
    public void testIndexesOfLong()","0","-","-","-","-"
"3615","testIndexesOfLongWithStartIndex","@Test
    public void testIndexesOfLongWithStartIndex()","0","-","-","-","-"
"3616","testIndexesOfShort","@Test
    public void testIndexesOfShort()","0","-","-","-","-"
"3617","testIndexesOfShortWithStartIndex","@Test
    public void testIndexesOfShortWithStartIndex()","0","-","-","-","-"
"3618","testIndexesOfWithStartIndex","@Test
    public void testIndexesOfWithStartIndex()","0","-","-","-","-"
"3619","testIndexOf","@Test
    public void testIndexOf()","0","-","-","-","-"
"3620","testIndexOfBoolean","@Test
    public void testIndexOfBoolean()","0","-","-","-","-"
"3621","testIndexOfBooleanWithStartIndex","@Test
    public void testIndexOfBooleanWithStartIndex()","0","-","-","-","-"
"3622","testIndexOfByte","@Test
    public void testIndexOfByte()","0","-","-","-","-"
"3623","testIndexOfByteWithStartIndex","@Test
    public void testIndexOfByteWithStartIndex()","0","-","-","-","-"
"3624","testIndexOfChar","@Test
    public void testIndexOfChar()","0","-","-","-","-"
"3625","testIndexOfCharWithStartIndex","@Test
    public void testIndexOfCharWithStartIndex()","0","-","-","-","-"
"3626","testIndexOfDouble","@Test
    public void testIndexOfDouble()","0","-","-","-","-"
"3627","testIndexOfDoubleNaN","@Test
    public void testIndexOfDoubleNaN()","0","-","-","-","-"
"3628","testIndexOfDoubleTolerance","@Test
    public void testIndexOfDoubleTolerance()","0","-","-","-","-"
"3629","testIndexOfDoubleWithStartIndex","@Test
    public void testIndexOfDoubleWithStartIndex()","0","-","-","-","-"
"3630","testIndexOfDoubleWithStartIndexTolerance","@Test
    public void testIndexOfDoubleWithStartIndexTolerance()","0","-","-","-","-"
"3631","testIndexOfFloat","@Test
    public void testIndexOfFloat()","0","-","-","-","-"
"3632","testIndexOfFloatNaN","@Test
    public void testIndexOfFloatNaN()","0","-","-","-","-"
"3633","testIndexOfFloatWithStartIndex","@Test
    public void testIndexOfFloatWithStartIndex()","0","-","-","-","-"
"3634","testIndexOfInt","@Test
    public void testIndexOfInt()","0","-","-","-","-"
"3635","testIndexOfIntWithStartIndex","@Test
    public void testIndexOfIntWithStartIndex()","0","-","-","-","-"
"3636","testIndexOfLong","@Test
    public void testIndexOfLong()","0","-","-","-","-"
"3637","testIndexOfLongWithStartIndex","@Test
    public void testIndexOfLongWithStartIndex()","0","-","-","-","-"
"3638","testIndexOfShort","@Test
    public void testIndexOfShort()","0","-","-","-","-"
"3639","testIndexOfShortWithStartIndex","@Test
    public void testIndexOfShortWithStartIndex()","0","-","-","-","-"
"3640","testIndexOfWithStartIndex","@Test
    public void testIndexOfWithStartIndex()","0","-","-","-","-"
"3641","testIndirectArrayCreation","/**
     * Tests generic array creation with generic type.
     */
    @Test
    public void testIndirectArrayCreation()","0","-","-","-","-"
"3642","testIndirectEmptyArrayCreation","/**
     * Tests indirect generic empty array creation with generic type.
     */
    @Test
    public void testIndirectEmptyArrayCreation()","0","-","-","-","-"
"3643","testIsArrayIndexValid","@Test
    public void testIsArrayIndexValid()","0","-","-","-","-"
"3644","testIsEmptyObject","/**
     * Test for","0","-","-","-","-"
"3645","testIsEmptyPrimitives","/**
     * Tests for","0","-","-","-","-"
"3646","testIsEquals","@Test
    public void testIsEquals()","0","-","-","-","-"
"3647","testIsNotEmptyObject","/**
     * Test for","0","-","-","-","-"
"3648","testIsNotEmptyPrimitives","/**
     * Tests for","0","-","-","-","-"
"3649","testIsSorted","@Test
    public void testIsSorted()","0","-","-","-","-"
"3650","testIsSortedBool","@Test
    public void testIsSortedBool()","0","-","-","-","-"
"3651","testIsSortedByte","@Test
    public void testIsSortedByte()","0","-","-","-","-"
"3652","testIsSortedChar","@Test
    public void testIsSortedChar()","0","-","-","-","-"
"3653","testIsSortedComparator","@Test
    public void testIsSortedComparator()","0","-","-","-","-"
"3654","testIsSortedDouble","@Test
    public void testIsSortedDouble()","0","-","-","-","-"
"3655","testIsSortedFloat","@Test
    public void testIsSortedFloat()","0","-","-","-","-"
"3656","testIsSortedInt","@Test
    public void testIsSortedInt()","0","-","-","-","-"
"3657","testIsSortedLong","@Test
    public void testIsSortedLong()","0","-","-","-","-"
"3658","testIsSortedNullComparator","@Test
    public void testIsSortedNullComparator()","0","-","-","-","-"
"3659","testIsSortedShort","@Test
    public void testIsSortedShort()","0","-","-","-","-"
"3660","testLastIndexOf","@Test
    public void testLastIndexOf()","0","-","-","-","-"
"3661","testLastIndexOfBoolean","@Test
    public void testLastIndexOfBoolean()","0","-","-","-","-"
"3662","testLastIndexOfBooleanWithStartIndex","@Test
    public void testLastIndexOfBooleanWithStartIndex()","0","-","-","-","-"
"3663","testLastIndexOfByte","@Test
    public void testLastIndexOfByte()","0","-","-","-","-"
"3664","testLastIndexOfByteWithStartIndex","@Test
    public void testLastIndexOfByteWithStartIndex()","0","-","-","-","-"
"3665","testLastIndexOfChar","@Test
    public void testLastIndexOfChar()","0","-","-","-","-"
"3666","testLastIndexOfCharWithStartIndex","@Test
    public void testLastIndexOfCharWithStartIndex()","0","-","-","-","-"
"3667","testLastIndexOfDouble","@Test
    public void testLastIndexOfDouble()","0","-","-","-","-"
"3668","testLastIndexOfDoubleTolerance","@Test
    public void testLastIndexOfDoubleTolerance()","0","-","-","-","-"
"3669","testLastIndexOfDoubleWithStartIndex","@Test
    public void testLastIndexOfDoubleWithStartIndex()","0","-","-","-","-"
"3670","testLastIndexOfDoubleWithStartIndexTolerance","@Test
    public void testLastIndexOfDoubleWithStartIndexTolerance()","0","-","-","-","-"
"3671","testLastIndexOfFloat","@Test
    public void testLastIndexOfFloat()","0","-","-","-","-"
"3672","testLastIndexOfFloatWithStartIndex","@Test
    public void testLastIndexOfFloatWithStartIndex()","0","-","-","-","-"
"3673","testLastIndexOfInt","@Test
    public void testLastIndexOfInt()","0","-","-","-","-"
"3674","testLastIndexOfIntWithStartIndex","@Test
    public void testLastIndexOfIntWithStartIndex()","0","-","-","-","-"
"3675","testLastIndexOfLong","@Test
    public void testLastIndexOfLong()","0","-","-","-","-"
"3676","testLastIndexOfLongWithStartIndex","@Test
    public void testLastIndexOfLongWithStartIndex()","0","-","-","-","-"
"3677","testLastIndexOfShort","@Test
    public void testLastIndexOfShort()","0","-","-","-","-"
"3678","testLastIndexOfShortWithStartIndex","@Test
    public void testLastIndexOfShortWithStartIndex()","0","-","-","-","-"
"3679","testLastIndexOfWithStartIndex","@Test
    public void testLastIndexOfWithStartIndex()","0","-","-","-","-"
"3680","testNullToEmptyBoolean","@Test
    public void testNullToEmptyBoolean()","0","-","-","-","-"
"3681","testNullToEmptyBooleanEmptyArray","@Test
    public void testNullToEmptyBooleanEmptyArray()","0","-","-","-","-"
"3682","testNullToEmptyBooleanNull","@Test
    public void testNullToEmptyBooleanNull()","0","-","-","-","-"
"3683","testNullToEmptyBooleanObject","@Test
    public void testNullToEmptyBooleanObject()","0","-","-","-","-"
"3684","testNullToEmptyBooleanObjectEmptyArray","@Test
    public void testNullToEmptyBooleanObjectEmptyArray()","0","-","-","-","-"
"3685","testNullToEmptyBooleanObjectNull","@Test
    public void testNullToEmptyBooleanObjectNull()","0","-","-","-","-"
"3686","testNullToEmptyByte","@Test
    public void testNullToEmptyByte()","0","-","-","-","-"
"3687","testNullToEmptyByteEmptyArray","@Test
    public void testNullToEmptyByteEmptyArray()","0","-","-","-","-"
"3688","testNullToEmptyByteNull","@Test
    public void testNullToEmptyByteNull()","0","-","-","-","-"
"3689","testNullToEmptyByteObject","@Test
    public void testNullToEmptyByteObject()","0","-","-","-","-"
"3690","testNullToEmptyByteObjectEmptyArray","@Test
    public void testNullToEmptyByteObjectEmptyArray()","0","-","-","-","-"
"3691","testNullToEmptyByteObjectNull","@Test
    public void testNullToEmptyByteObjectNull()","0","-","-","-","-"
"3692","testNullToEmptyChar","@Test
    public void testNullToEmptyChar()","0","-","-","-","-"
"3693","testNullToEmptyCharEmptyArray","@Test
    public void testNullToEmptyCharEmptyArray()","0","-","-","-","-"
"3694","testNullToEmptyCharNull","@Test
    public void testNullToEmptyCharNull()","0","-","-","-","-"
"3695","testNullToEmptyCharObject","@Test
    public void testNullToEmptyCharObject()","0","-","-","-","-"
"3696","testNullToEmptyCharObjectEmptyArray","@Test
    public void testNullToEmptyCharObjectEmptyArray()","0","-","-","-","-"
"3697","testNUllToEmptyCharObjectNull","@Test
    public void testNUllToEmptyCharObjectNull()","0","-","-","-","-"
"3698","testNullToEmptyClass","@Test
    public void testNullToEmptyClass()","0","-","-","-","-"
"3699","testNullToEmptyClassEmptyArray","@Test
    public void testNullToEmptyClassEmptyArray()","0","-","-","-","-"
"3700","testNullToEmptyClassNull","@Test
    public void testNullToEmptyClassNull()","0","-","-","-","-"
"3701","testNullToEmptyDouble","@Test
    public void testNullToEmptyDouble()","0","-","-","-","-"
"3702","testNullToEmptyDoubleEmptyArray","@Test
    public void testNullToEmptyDoubleEmptyArray()","0","-","-","-","-"
"3703","testNullToEmptyDoubleNull","@Test
    public void testNullToEmptyDoubleNull()","0","-","-","-","-"
"3704","testNullToEmptyDoubleObject","@Test
    public void testNullToEmptyDoubleObject()","0","-","-","-","-"
"3705","testNullToEmptyDoubleObjectEmptyArray","@Test
    public void testNullToEmptyDoubleObjectEmptyArray()","0","-","-","-","-"
"3706","testNullToEmptyDoubleObjectNull","@Test
    public void testNullToEmptyDoubleObjectNull()","0","-","-","-","-"
"3707","testNullToEmptyFloat","@Test
    public void testNullToEmptyFloat()","0","-","-","-","-"
"3708","testNullToEmptyFloatEmptyArray","@Test
    public void testNullToEmptyFloatEmptyArray()","0","-","-","-","-"
"3709","testNullToEmptyFloatNull","@Test
    public void testNullToEmptyFloatNull()","0","-","-","-","-"
"3710","testNullToEmptyFloatObject","@Test
    public void testNullToEmptyFloatObject()","0","-","-","-","-"
"3711","testNullToEmptyFloatObjectEmptyArray","@Test
    public void testNullToEmptyFloatObjectEmptyArray()","0","-","-","-","-"
"3712","testNullToEmptyFloatObjectNull","@Test
    public void testNullToEmptyFloatObjectNull()","0","-","-","-","-"
"3713","testNullToEmptyGeneric","@Test
    public void testNullToEmptyGeneric()","0","-","-","-","-"
"3714","testNullToEmptyGenericEmpty","@Test
    public void testNullToEmptyGenericEmpty()","0","-","-","-","-"
"3715","testNullToEmptyGenericNull","@Test
    public void testNullToEmptyGenericNull()","0","-","-","-","-"
"3716","testNullToEmptyGenericNullType","@Test
    public void testNullToEmptyGenericNullType()","0","-","-","-","-"
"3717","testNullToEmptyInt","@Test
    public void testNullToEmptyInt()","0","-","-","-","-"
"3718","testNullToEmptyIntEmptyArray","@Test
    public void testNullToEmptyIntEmptyArray()","0","-","-","-","-"
"3719","testNullToEmptyIntNull","@Test
    public void testNullToEmptyIntNull()","0","-","-","-","-"
"3720","testNullToEmptyIntObject","@Test
    public void testNullToEmptyIntObject()","0","-","-","-","-"
"3721","testNullToEmptyIntObjectEmptyArray","@Test
    public void testNullToEmptyIntObjectEmptyArray()","0","-","-","-","-"
"3722","testNullToEmptyIntObjectNull","@Test
    public void testNullToEmptyIntObjectNull()","0","-","-","-","-"
"3723","testNullToEmptyLong","@Test
    public void testNullToEmptyLong()","0","-","-","-","-"
"3724","testNullToEmptyLongEmptyArray","@Test
    public void testNullToEmptyLongEmptyArray()","0","-","-","-","-"
"3725","testNullToEmptyLongNull","@Test
    public void testNullToEmptyLongNull()","0","-","-","-","-"
"3726","testNullToEmptyLongObject","@Test
    public void testNullToEmptyLongObject()","0","-","-","-","-"
"3727","testNullToEmptyLongObjectEmptyArray","@Test
    public void testNullToEmptyLongObjectEmptyArray()","0","-","-","-","-"
"3728","testNullToEmptyLongObjectNull","@Test
    public void testNullToEmptyLongObjectNull()","0","-","-","-","-"
"3729","testNullToEmptyObject","@Test
    public void testNullToEmptyObject()","0","-","-","-","-"
"3730","testNullToEmptyObjectEmptyArray","@Test
    public void testNullToEmptyObjectEmptyArray()","0","-","-","-","-"
"3731","testNullToEmptyObjectNull","@Test
    public void testNullToEmptyObjectNull()","0","-","-","-","-"
"3732","testNullToEmptyShort","@Test
    public void testNullToEmptyShort()","0","-","-","-","-"
"3733","testNullToEmptyShortEmptyArray","@Test
    public void testNullToEmptyShortEmptyArray()","0","-","-","-","-"
"3734","testNullToEmptyShortNull","@Test
    public void testNullToEmptyShortNull()","0","-","-","-","-"
"3735","testNullToEmptyShortObject","@Test
    public void testNullToEmptyShortObject()","0","-","-","-","-"
"3736","testNullToEmptyShortObjectEmptyArray","@Test
    public void testNullToEmptyShortObjectEmptyArray()","0","-","-","-","-"
"3737","testNullToEmptyShortObjectNull","@Test
    public void testNullToEmptyShortObjectNull()","0","-","-","-","-"
"3738","testNullToEmptyString","@Test
    public void testNullToEmptyString()","0","-","-","-","-"
"3739","testNullToEmptyStringEmptyArray","@Test
    public void testNullToEmptyStringEmptyArray()","0","-","-","-","-"
"3740","testNullToEmptyStringNull","@Test
    public void testNullToEmptyStringNull()","0","-","-","-","-"
"3741","testNullToShortObject","@Test
    public void testNullToShortObject()","0","-","-","-","-"
"3742","testReverse","@Test
    public void testReverse()","0","-","-","-","-"
"3743","testReverseBoolean","@Test
    public void testReverseBoolean()","0","-","-","-","-"
"3744","testReverseBooleanRange","@Test
    public void testReverseBooleanRange()","0","-","-","-","-"
"3745","testReverseByte","@Test
    public void testReverseByte()","0","-","-","-","-"
"3746","testReverseByteRange","@Test
    public void testReverseByteRange()","0","-","-","-","-"
"3747","testReverseChar","@Test
    public void testReverseChar()","0","-","-","-","-"
"3748","testReverseCharRange","@Test
    public void testReverseCharRange()","0","-","-","-","-"
"3749","testReverseDouble","@Test
    public void testReverseDouble()","0","-","-","-","-"
"3750","testReverseDoubleRange","@Test
    public void testReverseDoubleRange()","0","-","-","-","-"
"3751","testReverseFloat","@Test
    public void testReverseFloat()","0","-","-","-","-"
"3752","testReverseFloatRange","@Test
    public void testReverseFloatRange()","0","-","-","-","-"
"3753","testReverseInt","@Test
    public void testReverseInt()","0","-","-","-","-"
"3754","testReverseIntRange","@Test
    public void testReverseIntRange()","0","-","-","-","-"
"3755","testReverseLong","@Test
    public void testReverseLong()","0","-","-","-","-"
"3756","testReverseLongRange","@Test
    public void testReverseLongRange()","0","-","-","-","-"
"3757","testReverseObjectRange","@Test
    public void testReverseObjectRange()","0","-","-","-","-"
"3758","testReverseShort","@Test
    public void testReverseShort()","0","-","-","-","-"
"3759","testReverseShortRange","@Test
    public void testReverseShortRange()","0","-","-","-","-"
"3760","testSameLength","@Test
    public void testSameLength()","0","-","-","-","-"
"3761","testSameLengthAll","@Test
    public void testSameLengthAll()","0","-","-","-","-"
"3762","testSameLengthBoolean","@Test
    public void testSameLengthBoolean()","0","-","-","-","-"
"3763","testSameLengthByte","@Test
    public void testSameLengthByte()","0","-","-","-","-"
"3764","testSameLengthChar","@Test
    public void testSameLengthChar()","0","-","-","-","-"
"3765","testSameLengthDouble","@Test
    public void testSameLengthDouble()","0","-","-","-","-"
"3766","testSameLengthFloat","@Test
    public void testSameLengthFloat()","0","-","-","-","-"
"3767","testSameLengthInt","@Test
    public void testSameLengthInt()","0","-","-","-","-"
"3768","testSameLengthLong","@Test
    public void testSameLengthLong()","0","-","-","-","-"
"3769","testSameLengthShort","@Test
    public void testSameLengthShort()","0","-","-","-","-"
"3770","testSameType","@Test
    public void testSameType()","0","-","-","-","-"
"3771","testShiftAllByte","@Test
    public void testShiftAllByte()","0","-","-","-","-"
"3772","testShiftAllChar","@Test
    public void testShiftAllChar()","0","-","-","-","-"
"3773","testShiftAllDouble","@Test
    public void testShiftAllDouble()","0","-","-","-","-"
"3774","testShiftAllFloat","@Test
    public void testShiftAllFloat()","0","-","-","-","-"
"3775","testShiftAllInt","@Test
    public void testShiftAllInt()","0","-","-","-","-"
"3776","testShiftAllLong","@Test
    public void testShiftAllLong()","0","-","-","-","-"
"3777","testShiftAllObject","@Test
    public void testShiftAllObject()","0","-","-","-","-"
"3778","testShiftAllShort","@Test
    public void testShiftAllShort()","0","-","-","-","-"
"3779","testShiftBoolean","@Test
    public void testShiftBoolean()","0","-","-","-","-"
"3780","testShiftByte","@Test
    public void testShiftByte()","0","-","-","-","-"
"3781","testShiftChar","@Test
    public void testShiftChar()","0","-","-","-","-"
"3782","testShiftDouble","@Test
    public void testShiftDouble()","0","-","-","-","-"
"3783","testShiftFloat","@Test
    public void testShiftFloat()","0","-","-","-","-"
"3784","testShiftInt","@Test
    public void testShiftInt()","0","-","-","-","-"
"3785","testShiftLong","@Test
    public void testShiftLong()","0","-","-","-","-"
"3786","testShiftNullBoolean","@Test
    public void testShiftNullBoolean()","0","-","-","-","-"
"3787","testShiftNullDouble","@Test
    public void testShiftNullDouble()","0","-","-","-","-"
"3788","testShiftNullFloat","@Test
    public void testShiftNullFloat()","0","-","-","-","-"
"3789","testShiftNullInt","@Test
    public void testShiftNullInt()","0","-","-","-","-"
"3790","testShiftNullLong","@Test
    public void testShiftNullLong()","0","-","-","-","-"
"3791","testShiftNullObject","@Test
    public void testShiftNullObject()","0","-","-","-","-"
"3792","testShiftNullShort","@Test
    public void testShiftNullShort()","0","-","-","-","-"
"3793","testShiftObject","@Test
    public void testShiftObject()","0","-","-","-","-"
"3794","testShiftRangeByte","@Test
    public void testShiftRangeByte()","0","-","-","-","-"
"3795","testShiftRangeChar","@Test
    public void testShiftRangeChar()","0","-","-","-","-"
"3796","testShiftRangeDouble","@Test
    public void testShiftRangeDouble()","0","-","-","-","-"
"3797","testShiftRangeFloat","@Test
    public void testShiftRangeFloat()","0","-","-","-","-"
"3798","testShiftRangeInt","@Test
    public void testShiftRangeInt()","0","-","-","-","-"
"3799","testShiftRangeLong","@Test
    public void testShiftRangeLong()","0","-","-","-","-"
"3800","testShiftRangeNoElemByte","@Test
    public void testShiftRangeNoElemByte()","0","-","-","-","-"
"3801","testShiftRangeNoElemChar","@Test
    public void testShiftRangeNoElemChar()","0","-","-","-","-"
"3802","testShiftRangeNoElemDouble","@Test
    public void testShiftRangeNoElemDouble()","0","-","-","-","-"
"3803","testShiftRangeNoElemFloat","@Test
    public void testShiftRangeNoElemFloat()","0","-","-","-","-"
"3804","testShiftRangeNoElemInt","@Test
    public void testShiftRangeNoElemInt()","0","-","-","-","-"
"3805","testShiftRangeNoElemLong","@Test
    public void testShiftRangeNoElemLong()","0","-","-","-","-"
"3806","testShiftRangeNoElemObject","@Test
    public void testShiftRangeNoElemObject()","0","-","-","-","-"
"3807","testShiftRangeNoElemShort","@Test
    public void testShiftRangeNoElemShort()","0","-","-","-","-"
"3808","testShiftRangeNullByte","@Test
    public void testShiftRangeNullByte()","0","-","-","-","-"
"3809","testShiftRangeNullChar","@Test
    public void testShiftRangeNullChar()","0","-","-","-","-"
"3810","testShiftRangeNullDouble","@Test
    public void testShiftRangeNullDouble()","0","-","-","-","-"
"3811","testShiftRangeNullFloat","@Test
    public void testShiftRangeNullFloat()","0","-","-","-","-"
"3812","testShiftRangeNullInt","@Test
    public void testShiftRangeNullInt()","0","-","-","-","-"
"3813","testShiftRangeNullLong","@Test
    public void testShiftRangeNullLong()","0","-","-","-","-"
"3814","testShiftRangeNullObject","@Test
    public void testShiftRangeNullObject()","0","-","-","-","-"
"3815","testShiftRangeNullShort","@Test
    public void testShiftRangeNullShort()","0","-","-","-","-"
"3816","testShiftRangeObject","@Test
    public void testShiftRangeObject()","0","-","-","-","-"
"3817","testShiftRangeShort","@Test
    public void testShiftRangeShort()","0","-","-","-","-"
"3818","testShiftShort","@Test
    public void testShiftShort()","0","-","-","-","-"
"3819","testShuffle","@Test
    public void testShuffle()","0","-","-","-","-"
"3820","testShuffleBoolean","@Test
    public void testShuffleBoolean()","0","-","-","-","-"
"3821","testShuffleByte","@Test
    public void testShuffleByte()","0","-","-","-","-"
"3822","testShuffleChar","@Test
    public void testShuffleChar()","0","-","-","-","-"
"3823","testShuffleDouble","@Test
    public void testShuffleDouble()","0","-","-","-","-"
"3824","testShuffleFloat","@Test
    public void testShuffleFloat()","0","-","-","-","-"
"3825","testShuffleInt","@Test
    public void testShuffleInt()","0","-","-","-","-"
"3826","testShuffleLong","@Test
    public void testShuffleLong()","0","-","-","-","-"
"3827","testShuffleShort","@Test
    public void testShuffleShort()","0","-","-","-","-"
"3828","testStartsWith","@Test
    public void testStartsWith()","0","-","-","-","-"
"3829","testSubarrayBoolean","@Test
    public void testSubarrayBoolean()","0","-","-","-","-"
"3830","testSubarrayByte","@Test
    public void testSubarrayByte()","0","-","-","-","-"
"3831","testSubarrayDouble","@Test
    public void testSubarrayDouble()","0","-","-","-","-"
"3832","testSubarrayFloat","@Test
    public void testSubarrayFloat()","0","-","-","-","-"
"3833","testSubarrayInt","@Test
    public void testSubarrayInt()","0","-","-","-","-"
"3834","testSubarrayLong","@Test
    public void testSubarrayLong()","0","-","-","-","-"
"3835","testSubarrayObject","@Test
    public void testSubarrayObject()","0","-","-","-","-"
"3836","testSubarrayShort","@Test
    public void testSubarrayShort()","0","-","-","-","-"
"3837","testSubarrChar","@Test
    public void testSubarrChar()","0","-","-","-","-"
"3838","testSwapBoolean","@Test
    public void testSwapBoolean()","0","-","-","-","-"
"3839","testSwapBooleanRange","@Test
    public void testSwapBooleanRange()","0","-","-","-","-"
"3840","testSwapByte","@Test
    public void testSwapByte()","0","-","-","-","-"
"3841","testSwapByteRange","@Test
    public void testSwapByteRange()","0","-","-","-","-"
"3842","testSwapChar","@Test
    public void testSwapChar()","0","-","-","-","-"
"3843","testSwapCharRange","@Test
    public void testSwapCharRange()","0","-","-","-","-"
"3844","testSwapDouble","@Test
    public void testSwapDouble()","0","-","-","-","-"
"3845","testSwapDoubleRange","@Test
    public void testSwapDoubleRange()","0","-","-","-","-"
"3846","testSwapEmptyBooleanArray","@Test
    public void testSwapEmptyBooleanArray()","0","-","-","-","-"
"3847","testSwapEmptyByteArray","@Test
    public void testSwapEmptyByteArray()","0","-","-","-","-"
"3848","testSwapEmptyCharArray","@Test
    public void testSwapEmptyCharArray()","0","-","-","-","-"
"3849","testSwapEmptyDoubleArray","@Test
    public void testSwapEmptyDoubleArray()","0","-","-","-","-"
"3850","testSwapEmptyFloatArray","@Test
    public void testSwapEmptyFloatArray()","0","-","-","-","-"
"3851","testSwapEmptyIntArray","@Test
    public void testSwapEmptyIntArray()","0","-","-","-","-"
"3852","testSwapEmptyLongArray","@Test
    public void testSwapEmptyLongArray()","0","-","-","-","-"
"3853","testSwapEmptyObjectArray","@Test
    public void testSwapEmptyObjectArray()","0","-","-","-","-"
"3854","testSwapEmptyShortArray","@Test
    public void testSwapEmptyShortArray()","0","-","-","-","-"
"3855","testSwapFloat","@Test
    public void testSwapFloat()","0","-","-","-","-"
"3856","testSwapFloatRange","@Test
    public void testSwapFloatRange()","0","-","-","-","-"
"3857","testSwapInt","@Test
    public void testSwapInt()","0","-","-","-","-"
"3858","testSwapIntExchangedOffsets","@Test
    public void testSwapIntExchangedOffsets()","0","-","-","-","-"
"3859","testSwapIntRange","@Test
    public void testSwapIntRange()","0","-","-","-","-"
"3860","testSwapLong","@Test
    public void testSwapLong()","0","-","-","-","-"
"3861","testSwapLongRange","@Test
    public void testSwapLongRange()","0","-","-","-","-"
"3862","testSwapNullBooleanArray","@Test
    public void testSwapNullBooleanArray()","0","-","-","-","-"
"3863","testSwapNullByteArray","@Test
    public void testSwapNullByteArray()","0","-","-","-","-"
"3864","testSwapNullCharArray","@Test
    public void testSwapNullCharArray()","0","-","-","-","-"
"3865","testSwapNullDoubleArray","@Test
    public void testSwapNullDoubleArray()","0","-","-","-","-"
"3866","testSwapNullFloatArray","@Test
    public void testSwapNullFloatArray()","0","-","-","-","-"
"3867","testSwapNullIntArray","@Test
    public void testSwapNullIntArray()","0","-","-","-","-"
"3868","testSwapNullLongArray","@Test
    public void testSwapNullLongArray()","0","-","-","-","-"
"3869","testSwapNullObjectArray","@Test
    public void testSwapNullObjectArray()","0","-","-","-","-"
"3870","testSwapNullShortArray","@Test
    public void testSwapNullShortArray()","0","-","-","-","-"
"3871","testSwapObject","@Test
    public void testSwapObject()","0","-","-","-","-"
"3872","testSwapObjectRange","@Test
    public void testSwapObjectRange()","0","-","-","-","-"
"3873","testSwapShort","@Test
    public void testSwapShort()","0","-","-","-","-"
"3874","testSwapShortRange","@Test
    public void testSwapShortRange()","0","-","-","-","-"
"3875","testTextIndexesOfInt","@Test
    public void testTextIndexesOfInt()","0","-","-","-","-"
"3876","testToMap","@Test
    public void testToMap()","0","-","-","-","-"
"3877","equals","@Override
            public boolean equals(final Object o)","0","-","-","-","-"
"3878","getKey","@Override
            public Object getKey()","0","-","-","-","-"
"3879","getValue","@Override
            public Object getValue()","0","-","-","-","-"
"3880","hashCode","@Override
            public int hashCode()","0","-","-","-","-"
"3881","setValue","@Override
            public Object setValue(final Object value)","0","-","-","-","-"
"3882","testToObject_boolean","@Test
    public void testToObject_boolean()","0","-","-","-","-"
"3883","testToObject_byte","@Test
    public void testToObject_byte()","0","-","-","-","-"
"3884","testToObject_char","@Test
    public void testToObject_char()","0","-","-","-","-"
"3885","testToObject_double","@Test
    public void testToObject_double()","0","-","-","-","-"
"3886","testToObject_float","@Test
    public void testToObject_float()","0","-","-","-","-"
"3887","testToObject_int","@Test
    public void testToObject_int()","0","-","-","-","-"
"3888","testToObject_long","@Test
    public void testToObject_long()","0","-","-","-","-"
"3889","testToObject_short","@Test
    public void testToObject_short()","0","-","-","-","-"
"3890","testToPrimitive_boolean","/** testToPrimitive/Object for boolean */
    @Test
    public void testToPrimitive_boolean()","0","-","-","-","-"
"3891","testToPrimitive_boolean_boolean","@Test
    public void testToPrimitive_boolean_boolean()","0","-","-","-","-"
"3892","testToPrimitive_byte","/** testToPrimitive/Object for byte */
    @Test
    public void testToPrimitive_byte()","0","-","-","-","-"
"3893","testToPrimitive_byte_byte","@Test
    public void testToPrimitive_byte_byte()","0","-","-","-","-"
"3894","testToPrimitive_char","/** testToPrimitive/Object for byte */
    @Test
    public void testToPrimitive_char()","0","-","-","-","-"
"3895","testToPrimitive_char_char","@Test
    public void testToPrimitive_char_char()","0","-","-","-","-"
"3896","testToPrimitive_double","/**  testToPrimitive/Object for double */
    @Test
    public void testToPrimitive_double()","0","-","-","-","-"
"3897","testToPrimitive_double_double","@Test
    public void testToPrimitive_double_double()","0","-","-","-","-"
"3898","testToPrimitive_float","/**  testToPrimitive/Object for float */
    @Test
    public void testToPrimitive_float()","0","-","-","-","-"
"3899","testToPrimitive_float_float","@Test
    public void testToPrimitive_float_float()","0","-","-","-","-"
"3900","testToPrimitive_int","/** testToPrimitive/Object for int */
    @Test
    public void testToPrimitive_int()","0","-","-","-","-"
"3901","testToPrimitive_int_int","@Test
    public void testToPrimitive_int_int()","0","-","-","-","-"
"3902","testToPrimitive_intNull","@Test
    public void testToPrimitive_intNull()","0","-","-","-","-"
"3903","testToPrimitive_long","/** testToPrimitive/Object for long */
    @Test
    public void testToPrimitive_long()","0","-","-","-","-"
"3904","testToPrimitive_long_long","@Test
    public void testToPrimitive_long_long()","0","-","-","-","-"
"3905","testToPrimitive_short","/** testToPrimitive/Object for short */
    @Test
    public void testToPrimitive_short()","0","-","-","-","-"
"3906","testToPrimitive_short_short","@Test
    public void testToPrimitive_short_short()","0","-","-","-","-"
"3907","testToString","@Test
    public void testToString()","0","-","-","-","-"
"3908","testToStringArray_array","@Test
    public void testToStringArray_array()","0","-","-","-","-"
"3909","testToStringArray_array_string","@Test
    public void testToStringArray_array_string()","0","-","-","-","-"
"3910","of","private static IntegerRange of(final int min, final int max)","0","-","-","-","-"
"3911","of","private static IntegerRange of(final Integer min, final Integer max)","0","-","-","-","-"
"3912","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"3913","testContainsInt","@Test
    public void testContainsInt()","0","-","-","-","-"
"3914","testContainsRange","@Test
    public void testContainsRange()","0","-","-","-","-"
"3915","testElementCompareTo","@Test
    public void testElementCompareTo()","0","-","-","-","-"
"3916","testEqualsObject","@Test
    public void testEqualsObject()","0","-","-","-","-"
"3917","testFit","@Test
    public void testFit()","0","-","-","-","-"
"3918","testFitNull","@Test
    public void testFitNull()","0","-","-","-","-"
"3919","testGetMaximum","@Test
    public void testGetMaximum()","0","-","-","-","-"
"3920","testGetMinimum","@Test
    public void testGetMinimum()","0","-","-","-","-"
"3921","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"3922","testIntersectionWith","@Test
    public void testIntersectionWith()","0","-","-","-","-"
"3923","testIntersectionWithNonOverlapping","@Test
    public void testIntersectionWithNonOverlapping()","0","-","-","-","-"
"3924","testIntersectionWithNull","@Test
    public void testIntersectionWithNull()","0","-","-","-","-"
"3925","testIsAfter","@Test
    public void testIsAfter()","0","-","-","-","-"
"3926","testIsAfterRange","@Test
    public void testIsAfterRange()","0","-","-","-","-"
"3927","testIsBefore","@Test
    public void testIsBefore()","0","-","-","-","-"
"3928","testIsBeforeIntegerRange","@Test
    public void testIsBeforeIntegerRange()","0","-","-","-","-"
"3929","testIsBeforeRange","@Test
    public void testIsBeforeRange()","0","-","-","-","-"
"3930","testIsEndedBy","@Test
    public void testIsEndedBy()","0","-","-","-","-"
"3931","testIsOverlappedByIntegerRange","@Test
    public void testIsOverlappedByIntegerRange()","0","-","-","-","-"
"3932","testIsOverlappedByRange","@Test
    public void testIsOverlappedByRange()","0","-","-","-","-"
"3933","testIsStartedBy","@Test
    public void testIsStartedBy()","0","-","-","-","-"
"3934","testIsWithCompareRange","@Test
    public void testIsWithCompareRange()","0","-","-","-","-"
"3935","testOfWithContains","@Test
    public void testOfWithContains()","0","-","-","-","-"
"3936","testRangeOfChars","@Test
    public void testRangeOfChars()","0","-","-","-","-"
"3937","testSerializing","@Test
    public void testSerializing()","0","-","-","-","-"
"3938","testToIntStream","@Test
    public void testToIntStream()","0","-","-","-","-"
"3939","testToString","@Test
    public void testToString()","0","-","-","-","-"
"3940","testToStringFormat","@Test
    public void testToStringFormat()","0","-","-","-","-"
"3941","readObject","private void readObject(final ObjectInputStream in) throws ClassNotFoundException","0","-","-","-","-"
"3942","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"3943","testClone","@Test
    public void testClone()","0","-","-","-","-"
"3944","testCloneNull","@Test
    public void testCloneNull()","0","-","-","-","-"
"3945","testCloneSerializableSupplier","@Test
    public void testCloneSerializableSupplier()","0","-","-","-","-"
"3946","testCloneUnserializable","@Test
    public void testCloneUnserializable()","0","-","-","-","-"
"3947","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"3948","testDeserializeBytes","@Test
    public void testDeserializeBytes() throws Exception","0","-","-","-","-"
"3949","testDeserializeBytesBadStream","@Test
    public void testDeserializeBytesBadStream()","0","-","-","-","-"
"3950","testDeserializeBytesNull","@Test
    public void testDeserializeBytesNull()","0","-","-","-","-"
"3951","testDeserializeBytesOfNull","@Test
    public void testDeserializeBytesOfNull() throws Exception","0","-","-","-","-"
"3952","testDeserializeClassCastException","@Test
    public void testDeserializeClassCastException()","0","-","-","-","-"
"3953","testDeserializeStream","@Test
    public void testDeserializeStream() throws Exception","0","-","-","-","-"
"3954","testDeserializeStreamBadStream","@Test
    public void testDeserializeStreamBadStream()","0","-","-","-","-"
"3955","testDeserializeStreamClassNotFound","@Test
    public void testDeserializeStreamClassNotFound() throws Exception","0","-","-","-","-"
"3956","testDeserializeStreamNull","@Test
    public void testDeserializeStreamNull()","0","-","-","-","-"
"3957","testDeserializeStreamOfNull","@Test
    public void testDeserializeStreamOfNull() throws Exception","0","-","-","-","-"
"3958","testException","@Test
    public void testException()","0","-","-","-","-"
"3959","testNegativeByteArray","@Test
    public void testNegativeByteArray()","0","-","-","-","-"
"3960","testPrimitiveTypeClassSerialization","@Test
    public void testPrimitiveTypeClassSerialization()","0","-","-","-","-"
"3961","testRoundtrip","@Test
    public void testRoundtrip()","0","-","-","-","-"
"3962","testSerializeBytes","@Test
    public void testSerializeBytes() throws Exception","0","-","-","-","-"
"3963","testSerializeBytesNull","@Test
    public void testSerializeBytesNull() throws Exception","0","-","-","-","-"
"3964","testSerializeBytesUnserializable","@Test
    public void testSerializeBytesUnserializable()","0","-","-","-","-"
"3965","testSerializeIOException","@Test
    public void testSerializeIOException()","0","-","-","-","-"
"3966","write","@Override
            public void write(final int arg0) throws IOException","0","-","-","-","-"
"3967","testSerializeStream","@Test
    public void testSerializeStream() throws Exception","0","-","-","-","-"
"3968","testSerializeStreamNullNull","@Test
    public void testSerializeStreamNullNull()","0","-","-","-","-"
"3969","testSerializeStreamNullObj","@Test
    public void testSerializeStreamNullObj() throws Exception","0","-","-","-","-"
"3970","testSerializeStreamObjNull","@Test
    public void testSerializeStreamObjNull()","0","-","-","-","-"
"3971","testSerializeStreamUnserializable","@Test
    public void testSerializeStreamUnserializable()","0","-","-","-","-"
"3972","testIsContainer","private static Arguments[] testIsContainer()","0","-","-","-","-"
"3973","doTestInContainer","private boolean doTestInContainer(final String environ, final String fileToCreate) throws IOException","0","-","-","-","-"
"3974","testIsContainer","@ParameterizedTest
    @MethodSource
    public void testIsContainer(final String label, final String environ, final String fileToCreate, final boolean expected) throws IOException","0","-","-","-","-"
"3975","testMapLookup","@Test
    public void testMapLookup()","0","-","-","-","-"
"3976","testMapLookup_nullMap","@Test
    public void testMapLookup_nullMap()","0","-","-","-","-"
"3977","testNoneLookup","@Test
    public void testNoneLookup()","0","-","-","-","-"
"3978","testSystemPropertiesLookup","@Test
    public void testSystemPropertiesLookup()","0","-","-","-","-"
"3979","testSystemPropertiesLookupReplacedProperties","/**
     * Tests that a lookup object for system properties can deal with a full
     * replacement of the system properties object. This test is related to
     * LANG-1055.
     */
    @Test
    public void testSystemPropertiesLookupReplacedProperties()","0","-","-","-","-"
"3980","testSystemPropertiesLookupUpdatedProperty","/**
     * Tests that a lookup object for system properties sees changes on system
     * properties. This test is related to LANG-1141.
     */
    @Test
    public void testSystemPropertiesLookupUpdatedProperty()","0","-","-","-","-"
"3981","testCharMatcher_char","@Test
    public void testCharMatcher_char()","0","-","-","-","-"
"3982","testCharSetMatcher_charArray","@Test
    public void testCharSetMatcher_charArray()","0","-","-","-","-"
"3983","testCharSetMatcher_String","@Test
    public void testCharSetMatcher_String()","0","-","-","-","-"
"3984","testCommaMatcher","@Test
    public void testCommaMatcher()","0","-","-","-","-"
"3985","testDoubleQuoteMatcher","@Test
    public void testDoubleQuoteMatcher()","0","-","-","-","-"
"3986","testMatcherIndices","@Test
    public void testMatcherIndices()","0","-","-","-","-"
"3987","testNoneMatcher","@Test
    public void testNoneMatcher()","0","-","-","-","-"
"3988","testQuoteMatcher","@Test
    public void testQuoteMatcher()","0","-","-","-","-"
"3989","testSingleQuoteMatcher","@Test
    public void testSingleQuoteMatcher()","0","-","-","-","-"
"3990","testSpaceMatcher","@Test
    public void testSpaceMatcher()","0","-","-","-","-"
"3991","testSplitMatcher","@Test
    public void testSplitMatcher()","0","-","-","-","-"
"3992","testStringMatcher_String","@Test
    public void testStringMatcher_String()","0","-","-","-","-"
"3993","testTabMatcher","@Test
    public void testTabMatcher()","0","-","-","-","-"
"3994","testTrimMatcher","@Test
    public void testTrimMatcher()","0","-","-","-","-"
"3995","testCapitalize_String","@Test
    public void testCapitalize_String()","0","-","-","-","-"
"3996","testCapitalizeFully_String","@Test
    public void testCapitalizeFully_String()","0","-","-","-","-"
"3997","testCapitalizeFullyWithDelimiters_String","@Test
    public void testCapitalizeFullyWithDelimiters_String()","0","-","-","-","-"
"3998","testCapitalizeWithDelimiters_String","@Test
    public void testCapitalizeWithDelimiters_String()","0","-","-","-","-"
"3999","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"4000","testContainsAllWords_StringString","@Test
    public void testContainsAllWords_StringString()","0","-","-","-","-"
"4001","testInitials_String","@Test
    public void testInitials_String()","0","-","-","-","-"
"4002","testInitials_String_charArray","@Test
    public void testInitials_String_charArray()","0","-","-","-","-"
"4003","testLANG1292","@Test
    public void testLANG1292()","0","-","-","-","-"
"4004","testLANG1397","@Test
    public void testLANG1397()","0","-","-","-","-"
"4005","testSwapCase_String","@Test
    public void testSwapCase_String()","0","-","-","-","-"
"4006","testUncapitalize_String","@Test
    public void testUncapitalize_String()","0","-","-","-","-"
"4007","testUncapitalizeWithDelimiters_String","@Test
    public void testUncapitalizeWithDelimiters_String()","0","-","-","-","-"
"4008","testWrap_StringInt","@Test
    public void testWrap_StringInt()","0","-","-","-","-"
"4009","testWrap_StringIntStringBoolean","@Test
    public void testWrap_StringIntStringBoolean()","0","-","-","-","-"
"4010","testWrap_StringIntStringBooleanString","@Test
    public void testWrap_StringIntStringBooleanString()","0","-","-","-","-"
"4011","testBetween","@Test
    public void testBetween()","0","-","-","-","-"
"4012","testBasicLookup","@Test
    public void testBasicLookup() throws IOException","0","-","-","-","-"
"4013","testLang882","@Test
    public void testLang882() throws IOException","0","-","-","-","-"
"4014","testAbove","@Test
    public void testAbove()","0","-","-","-","-"
"4015","testBelow","@Test
    public void testBelow()","0","-","-","-","-"
"4016","testBetween","@Test
    public void testBetween()","0","-","-","-","-"
"4017","testInvalidCharacters","@Test
    public void testInvalidCharacters() throws IOException","0","-","-","-","-"
"4018","testValidCharacters","@Test
    public void testValidCharacters() throws IOException","0","-","-","-","-"
"4019","testAbove","@Test
    public void testAbove()","0","-","-","-","-"
"4020","testBelow","@Test
    public void testBelow()","0","-","-","-","-"
"4021","testBetween","@Test
    public void testBetween()","0","-","-","-","-"
"4022","testSupplementary","@Test
    public void testSupplementary()","0","-","-","-","-"
"4023","testLessThanFour","@Test
    public void testLessThanFour()","0","-","-","-","-"
"4024","testUPlus","@Test
    public void testUPlus()","0","-","-","-","-"
"4025","testUuuuu","@Test
    public void testUuuuu()","0","-","-","-","-"
"4026","testConstructorExists","@Test
    public void testConstructorExists()","0","-","-","-","-"
"4027","testHTML40_EXTENDED_ESCAPE","@Test
    public void testHTML40_EXTENDED_ESCAPE()","0","-","-","-","-"
"4028","testISO8859_1_ESCAPE","@Test
    public void testISO8859_1_ESCAPE()","0","-","-","-","-"
"4029","testOutOfBounds","@Test
    public void testOutOfBounds()","0","-","-","-","-"
"4030","testSupplementaryUnescaping","@Test
    public void testSupplementaryUnescaping()","0","-","-","-","-"
"4031","testUnfinishedEntity","@Test
    public void testUnfinishedEntity()","0","-","-","-","-"
"4032","checkClone","private void checkClone(final StrTokenizer tokenizer)","0","-","-","-","-"
"4033","test1","@Test
    public void test1()","0","-","-","-","-"
"4034","test2","@Test
    public void test2()","0","-","-","-","-"
"4035","test3","@Test
    public void test3()","0","-","-","-","-"
"4036","test4","@Test
    public void test4()","0","-","-","-","-"
"4037","test5","@Test
    public void test5()","0","-","-","-","-"
"4038","test6","@Test
    public void test6()","0","-","-","-","-"
"4039","test7","@Test
    public void test7()","0","-","-","-","-"
"4040","test8","@Test
    public void test8()","0","-","-","-","-"
"4041","testBasic1","@Test
    public void testBasic1()","0","-","-","-","-"
"4042","testBasic2","@Test
    public void testBasic2()","0","-","-","-","-"
"4043","testBasic3","@Test
    public void testBasic3()","0","-","-","-","-"
"4044","testBasic4","@Test
    public void testBasic4()","0","-","-","-","-"
"4045","testBasic5","@Test
    public void testBasic5()","0","-","-","-","-"
"4046","testBasicDelim1","@Test
    public void testBasicDelim1()","0","-","-","-","-"
"4047","testBasicDelim2","@Test
    public void testBasicDelim2()","0","-","-","-","-"
"4048","testBasicEmpty1","@Test
    public void testBasicEmpty1()","0","-","-","-","-"
"4049","testBasicEmpty2","@Test
    public void testBasicEmpty2()","0","-","-","-","-"
"4050","testBasicIgnoreTrimmed1","@Test
    public void testBasicIgnoreTrimmed1()","0","-","-","-","-"
"4051","testBasicIgnoreTrimmed2","@Test
    public void testBasicIgnoreTrimmed2()","0","-","-","-","-"
"4052","testBasicIgnoreTrimmed3","@Test
    public void testBasicIgnoreTrimmed3()","0","-","-","-","-"
"4053","testBasicIgnoreTrimmed4","@Test
    public void testBasicIgnoreTrimmed4()","0","-","-","-","-"
"4054","testBasicQuoted1","@Test
    public void testBasicQuoted1()","0","-","-","-","-"
"4055","testBasicQuoted2","@Test
    public void testBasicQuoted2()","0","-","-","-","-"
"4056","testBasicQuoted3","@Test
    public void testBasicQuoted3()","0","-","-","-","-"
"4057","testBasicQuoted4","@Test
    public void testBasicQuoted4()","0","-","-","-","-"
"4058","testBasicQuoted5","@Test
    public void testBasicQuoted5()","0","-","-","-","-"
"4059","testBasicQuoted6","@Test
    public void testBasicQuoted6()","0","-","-","-","-"
"4060","testBasicQuoted7","@Test
    public void testBasicQuoted7()","0","-","-","-","-"
"4061","testBasicQuotedTrimmed1","@Test
    public void testBasicQuotedTrimmed1()","0","-","-","-","-"
"4062","testBasicTrimmed1","@Test
    public void testBasicTrimmed1()","0","-","-","-","-"
"4063","testBasicTrimmed2","@Test
    public void testBasicTrimmed2()","0","-","-","-","-"
"4064","testChaining","@Test
    public void testChaining()","0","-","-","-","-"
"4065","testCloneNotSupportedException","/**
     * Tests that the","0","-","-","-","-"
"4066","cloneReset","@Override
            Object cloneReset() throws CloneNotSupportedException","0","-","-","-","-"
"4067","testCloneNull","@Test
    public void testCloneNull()","0","-","-","-","-"
"4068","testCloneReset","@Test
    public void testCloneReset()","0","-","-","-","-"
"4069","testConstructor_charArray","@Test
    public void testConstructor_charArray()","0","-","-","-","-"
"4070","testConstructor_charArray_char","@Test
    public void testConstructor_charArray_char()","0","-","-","-","-"
"4071","testConstructor_charArray_char_char","@Test
    public void testConstructor_charArray_char_char()","0","-","-","-","-"
"4072","testConstructor_String","@Test
    public void testConstructor_String()","0","-","-","-","-"
"4073","testConstructor_String_char","@Test
    public void testConstructor_String_char()","0","-","-","-","-"
"4074","testConstructor_String_char_char","@Test
    public void testConstructor_String_char_char()","0","-","-","-","-"
"4075","testCSV","private void testCSV(final String data)","0","-","-","-","-"
"4076","testCSVEmpty","@Test
    public void testCSVEmpty()","0","-","-","-","-"
"4077","testCSVSimple","@Test
    public void testCSVSimple()","0","-","-","-","-"
"4078","testCSVSimpleNeedsTrim","@Test
    public void testCSVSimpleNeedsTrim()","0","-","-","-","-"
"4079","testEmpty","void testEmpty(final StrTokenizer tokenizer)","0","-","-","-","-"
"4080","testGetContent","@Test
    public void testGetContent()","0","-","-","-","-"
"4081","testIteration","@Test
    public void testIteration()","0","-","-","-","-"
"4082","testListArray","@Test
    public void testListArray()","0","-","-","-","-"
"4083","testReset","@Test
    public void testReset()","0","-","-","-","-"
"4084","testReset_charArray","@Test
    public void testReset_charArray()","0","-","-","-","-"
"4085","testReset_String","@Test
    public void testReset_String()","0","-","-","-","-"
"4086","testTokenizeSubclassInputChange","@Test
    public void testTokenizeSubclassInputChange()","0","-","-","-","-"
"4087","tokenize","@Override
            protected List<String> tokenize(final char[] chars, final int offset, final int count)","0","-","-","-","-"
"4088","testTokenizeSubclassOutputChange","@Test
    public void testTokenizeSubclassOutputChange()","0","-","-","-","-"
"4089","tokenize","@Override
            protected List<String> tokenize(final char[] chars, final int offset, final int count)","0","-","-","-","-"
"4090","testToString","@Test
    public void testToString()","0","-","-","-","-"
"4091","testTSV","@Test
    public void testTSV()","0","-","-","-","-"
"4092","testTSVEmpty","@Test
    public void testTSVEmpty()","0","-","-","-","-"
"4093","testXSVAbc","void testXSVAbc(final StrTokenizer tokenizer)","0","-","-","-","-"
"4094","testCompositeFormat","/**
     * Ensures that the parse/format separation is correctly maintained.
     */
    @Test
    public void testCompositeFormat()","0","-","-","-","-"
"4095","format","@Override
            public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos)","0","-","-","-","-"
"4096","parseObject","@Override
            public Object parseObject(final String source, final ParsePosition pos)","0","-","-","-","-"
"4097","format","@Override
            public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos)","0","-","-","-","-"
"4098","parseObject","@Override
            public Object parseObject(final String source, final ParsePosition pos)","0","-","-","-","-"
"4099","testUsage","@Test
    public void testUsage() throws Exception","0","-","-","-","-"
"4100","format","@Override
        public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos)","0","-","-","-","-"
"4101","parseObject","@Override
        public Object parseObject(final String source, final ParsePosition pos)","0","-","-","-","-"
"4102","getFormat","@Override
        public Format getFormat(final String name, final String arguments, final Locale locale)","0","-","-","-","-"
"4103","OtherExtendedMessageFormat","OtherExtendedMessageFormat(final String pattern, final Locale locale,
                final Map<String, ? extends FormatFactory> registry)","0","-","-","-","-"
"4104","getFormat","@Override
        public Format getFormat(final String name, final String arguments, final Locale locale)","0","-","-","-","-"
"4105","format","@Override
        public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos)","0","-","-","-","-"
"4106","parseObject","@Override
        public Object parseObject(final String source, final ParsePosition pos)","0","-","-","-","-"
"4107","getFormat","@Override
        public Format getFormat(final String name, final String arguments, final Locale locale)","0","-","-","-","-"
"4108","checkBuiltInFormat","/**
     * Create an ExtendedMessageFormat for the specified pattern and locale and check the
     * formatted output matches the expected result for the parameters.
     * @param pattern string
     * @param registryUnused map (currently unused)
     * @param args Object[]
     * @param locale Locale
     */
    private void checkBuiltInFormat(final String pattern, final Map<String, ?> registryUnused, final Object[] args, final Locale locale)","0","-","-","-","-"
"4109","checkBuiltInFormat","/**
     * Test a built-in format for the specified Locales, plus","0","-","-","-","-"
"4110","checkBuiltInFormat","/**
     * Test a built-in format for the specified Locales, plus","0","-","-","-","-"
"4111","createMessageFormat","/**
     * Replace MessageFormat(String, Locale) constructor (not available until JDK 1.4).
     * @param pattern string
     * @param locale Locale
     * @return MessageFormat
     */
    private MessageFormat createMessageFormat(final String pattern, final Locale locale)","0","-","-","-","-"
"4112","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"4113","testBuiltInChoiceFormat","/**
     * Test the built-in choice format.
     */
    @Test
    public void testBuiltInChoiceFormat()","0","-","-","-","-"
"4114","testBuiltInDateTimeFormat","/**
     * Test the built-in date/time formats
     */
    @Test
    public void testBuiltInDateTimeFormat()","0","-","-","-","-"
"4115","testBuiltInNumberFormat","/**
     * Test the built-in number formats.
     */
    @Test
    public void testBuiltInNumberFormat()","0","-","-","-","-"
"4116","testEmbeddedPatternInChoice","/**
     * Test Bug LANG-917 - IndexOutOfBoundsException and/or infinite loop when using a choice pattern
     */
    @Test
    public void testEmbeddedPatternInChoice()","0","-","-","-","-"
"4117","testEqualsHashcode","/**
     * Test equals() and hashCode().
     */
    @Test
    public void testEqualsHashcode()","0","-","-","-","-"
"4118","testEscapedBraces_LANG_948","/**
     * Test Bug LANG-948 - Exception while using ExtendedMessageFormat and escaping braces
     */
    @Test
    public void testEscapedBraces_LANG_948()","0","-","-","-","-"
"4119","testEscapedQuote_LANG_477","/**
     * Test Bug LANG-477 - out of memory error with escaped quote
     */
    @Test
    public void testEscapedQuote_LANG_477()","0","-","-","-","-"
"4120","testExtendedAndBuiltInFormatsWithAvailableLocales","/**
     * Test extended and built-in formats with available locales.
     */
    @Test
    public void testExtendedAndBuiltInFormatsWithAvailableLocales()","0","-","-","-","-"
"4121","testExtendedAndBuiltInFormatsWithDefaultLocale","/**
     * Test extended and built-in formats with the default locale.
     */
    @Test
    public void testExtendedAndBuiltInFormatsWithDefaultLocale()","0","-","-","-","-"
"4122","testExtendedFormats","/**
     * Test extended formats.
     */
    @Test
    public void testExtendedFormats()","0","-","-","-","-"
"4123","testOverriddenBuiltinFormat","@Test
    public void testOverriddenBuiltinFormat()","0","-","-","-","-"
"4124","doTestNoReplace","private void doTestNoReplace(final String replaceTemplate)","0","-","-","-","-"
"4125","doTestReplace","private void doTestReplace(final String expectedResult, final String replaceTemplate, final boolean substring)","0","-","-","-","-"
"4126","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"4127","tearDown","@AfterEach
    public void tearDown()","0","-","-","-","-"
"4128","testConstructorMapFull","/**
     * Tests constructor.
     */
    @Test
    public void testConstructorMapFull()","0","-","-","-","-"
"4129","testConstructorMapPrefixSuffix","/**
     * Tests constructor.
     */
    @Test
    public void testConstructorMapPrefixSuffix()","0","-","-","-","-"
"4130","testConstructorNoArgs","/**
     * Tests constructor.
     */
    @Test
    public void testConstructorNoArgs()","0","-","-","-","-"
"4131","testCyclicReplacement","/**
     * Tests a cyclic replace operation.
     * The cycle should be detected and cause an exception to be thrown.
     */
    @Test
    public void testCyclicReplacement()","0","-","-","-","-"
"4132","testDefaultValueDelimiters","@Test
    public void testDefaultValueDelimiters()","0","-","-","-","-"
"4133","testGetSetEscape","/**
     * Tests get set.
     */
    @Test
    public void testGetSetEscape()","0","-","-","-","-"
"4134","testGetSetPrefix","/**
     * Tests get set.
     */
    @Test
    public void testGetSetPrefix()","0","-","-","-","-"
"4135","testGetSetSuffix","/**
     * Tests get set.
     */
    @Test
    public void testGetSetSuffix()","0","-","-","-","-"
"4136","testGetSetValueDelimiter","/**
     * Tests get set.
     */
    @Test
    public void testGetSetValueDelimiter()","0","-","-","-","-"
"4137","testLANG1055","/**
     * Test for LANG-1055: StrSubstitutor.replaceSystemProperties does not work consistently
     */
    @Test
    public void testLANG1055()","0","-","-","-","-"
"4138","testReplaceAdjacentAtEnd","/**
     * Tests adjacent keys.
     */
    @Test
    public void testReplaceAdjacentAtEnd()","0","-","-","-","-"
"4139","testReplaceAdjacentAtStart","/**
     * Tests adjacent keys.
     */
    @Test
    public void testReplaceAdjacentAtStart()","0","-","-","-","-"
"4140","testReplaceChangedMap","/**
     * Tests key replace changing map after initialization (not recommended).
     */
    @Test
    public void testReplaceChangedMap()","0","-","-","-","-"
"4141","testReplaceComplexEscaping","/**
     * Tests complex escaping.
     */
    @Test
    public void testReplaceComplexEscaping()","0","-","-","-","-"
"4142","testReplaceEmpty","/**
     * Tests replace with null.
     */
    @Test
    public void testReplaceEmpty()","0","-","-","-","-"
"4143","testReplaceEmptyKeys","/**
     * Tests when no variable name.
     */
    @Test
    public void testReplaceEmptyKeys()","0","-","-","-","-"
"4144","testReplaceEscaping","/**
     * Tests escaping.
     */
    @Test
    public void testReplaceEscaping()","0","-","-","-","-"
"4145","testReplaceIncompletePrefix","/**
     * Tests when no incomplete prefix.
     */
    @Test
    public void testReplaceIncompletePrefix()","0","-","-","-","-"
"4146","testReplaceInVariable","/**
     * Tests whether a variable can be replaced in a variable name.
     */
    @Test
    public void testReplaceInVariable()","0","-","-","-","-"
"4147","testReplaceInVariableDisabled","/**
     * Tests whether substitution in variable names is disabled per default.
     */
    @Test
    public void testReplaceInVariableDisabled()","0","-","-","-","-"
"4148","testReplaceInVariableRecursive","/**
     * Tests complex and recursive substitution in variable names.
     */
    @Test
    public void testReplaceInVariableRecursive()","0","-","-","-","-"
"4149","testReplaceNoPrefixNoSuffix","/**
     * Tests when no prefix or suffix.
     */
    @Test
    public void testReplaceNoPrefixNoSuffix()","0","-","-","-","-"
"4150","testReplaceNoPrefixSuffix","/**
     * Tests when suffix but no prefix.
     */
    @Test
    public void testReplaceNoPrefixSuffix()","0","-","-","-","-"
"4151","testReplaceNoVariables","/**
     * Tests replace with no variables.
     */
    @Test
    public void testReplaceNoVariables()","0","-","-","-","-"
"4152","testReplaceNull","/**
     * Tests replace with null.
     */
    @Test
    public void testReplaceNull()","0","-","-","-","-"
"4153","testReplacePartialString_noReplace","/**
     * Tests simple key replace.
     */
    @Test
    public void testReplacePartialString_noReplace()","0","-","-","-","-"
"4154","testReplacePrefixNoSuffix","/**
     * Tests when prefix but no suffix.
     */
    @Test
    public void testReplacePrefixNoSuffix()","0","-","-","-","-"
"4155","testReplaceRecursive","/**
     * Tests simple recursive replace.
     */
    @Test
    public void testReplaceRecursive()","0","-","-","-","-"
"4156","testReplaceSimple","/**
     * Tests simple key replace.
     */
    @Test
    public void testReplaceSimple()","0","-","-","-","-"
"4157","testReplaceSolo","/**
     * Tests simple key replace.
     */
    @Test
    public void testReplaceSolo()","0","-","-","-","-"
"4158","testReplaceSoloEscaping","/**
     * Tests escaping.
     */
    @Test
    public void testReplaceSoloEscaping()","0","-","-","-","-"
"4159","testReplaceToIdentical","/**
     * Tests replace creates output same as input.
     */
    @Test
    public void testReplaceToIdentical()","0","-","-","-","-"
"4160","testReplaceUnknownKey","/**
     * Tests unknown key replace.
     */
    @Test
    public void testReplaceUnknownKey()","0","-","-","-","-"
"4161","testReplaceWeirdPattens","/**
     * Tests interpolation with weird boundary patterns.
     */
    @Test
    public void testReplaceWeirdPattens()","0","-","-","-","-"
"4162","testResolveVariable","/**
     * Tests protected.
     */
    @Test
    public void testResolveVariable()","0","-","-","-","-"
"4163","resolveVariable","@Override
            protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos)","0","-","-","-","-"
"4164","testSamePrefixAndSuffix","@Test
    public void testSamePrefixAndSuffix()","0","-","-","-","-"
"4165","testStaticReplace","/**
     * Tests static.
     */
    @Test
    public void testStaticReplace()","0","-","-","-","-"
"4166","testStaticReplacePrefixSuffix","/**
     * Tests static.
     */
    @Test
    public void testStaticReplacePrefixSuffix()","0","-","-","-","-"
"4167","testStaticReplaceSystemProperties","/**
     * Tests interpolation with system properties.
     */
    @Test
    public void testStaticReplaceSystemProperties()","0","-","-","-","-"
"4168","testSubstituteDefaultProperties","/**
     * Test the replace of a properties object
     */
    @Test
    public void testSubstituteDefaultProperties()","0","-","-","-","-"
"4169","testSubstitutePreserveEscape","@Test
    public void testSubstitutePreserveEscape()","0","-","-","-","-"
"4170","toString","@Override
        public String toString()","0","-","-","-","-"
"4171","testAppend_Boolean","@Test
    public void testAppend_Boolean()","0","-","-","-","-"
"4172","testAppend_CharArray","@Test
    public void testAppend_CharArray()","0","-","-","-","-"
"4173","testAppend_CharArray_int_int","@Test
    public void testAppend_CharArray_int_int()","0","-","-","-","-"
"4174","testAppend_FormattedString","@Test
    public void testAppend_FormattedString()","0","-","-","-","-"
"4175","testAppend_Object","@Test
    public void testAppend_Object()","0","-","-","-","-"
"4176","testAppend_PrimitiveNumber","@Test
    public void testAppend_PrimitiveNumber()","0","-","-","-","-"
"4177","testAppend_StrBuilder","@Test
    public void testAppend_StrBuilder()","0","-","-","-","-"
"4178","testAppend_StrBuilder_int_int","@Test
    public void testAppend_StrBuilder_int_int()","0","-","-","-","-"
"4179","testAppend_String","@Test
    public void testAppend_String()","0","-","-","-","-"
"4180","testAppend_String_int_int","@Test
    public void testAppend_String_int_int()","0","-","-","-","-"
"4181","testAppend_StringBuffer","@Test
    public void testAppend_StringBuffer()","0","-","-","-","-"
"4182","testAppend_StringBuffer_int_int","@Test
    public void testAppend_StringBuffer_int_int()","0","-","-","-","-"
"4183","testAppend_StringBuilder","@Test
    public void testAppend_StringBuilder()","0","-","-","-","-"
"4184","testAppend_StringBuilder_int_int","@Test
    public void testAppend_StringBuilder_int_int()","0","-","-","-","-"
"4185","testAppendAll_Array","@Test
    public void testAppendAll_Array()","0","-","-","-","-"
"4186","testAppendAll_Collection","@Test
    public void testAppendAll_Collection()","0","-","-","-","-"
"4187","testAppendAll_Iterator","@Test
    public void testAppendAll_Iterator()","0","-","-","-","-"
"4188","testAppendFixedWidthPadLeft","@Test
    public void testAppendFixedWidthPadLeft()","0","-","-","-","-"
"4189","testAppendFixedWidthPadLeft_int","@Test
    public void testAppendFixedWidthPadLeft_int()","0","-","-","-","-"
"4190","testAppendFixedWidthPadRight","@Test
    public void testAppendFixedWidthPadRight()","0","-","-","-","-"
"4191","testAppendFixedWidthPadRight_int","@Test
    public void testAppendFixedWidthPadRight_int()","0","-","-","-","-"
"4192","testAppendln_Boolean","@Test
    public void testAppendln_Boolean()","0","-","-","-","-"
"4193","testAppendln_CharArray","@Test
    public void testAppendln_CharArray()","0","-","-","-","-"
"4194","append","@Override
            public StrBuilder append(final char[] str)","0","-","-","-","-"
"4195","appendNewLine","@Override
            public StrBuilder appendNewLine()","0","-","-","-","-"
"4196","testAppendln_CharArray_int_int","@Test
    public void testAppendln_CharArray_int_int()","0","-","-","-","-"
"4197","append","@Override
            public StrBuilder append(final char[] str, final int startIndex, final int length)","0","-","-","-","-"
"4198","appendNewLine","@Override
            public StrBuilder appendNewLine()","0","-","-","-","-"
"4199","testAppendln_FormattedString","@Test
    public void testAppendln_FormattedString()","0","-","-","-","-"
"4200","append","@Override
            public StrBuilder append(final String str)","0","-","-","-","-"
"4201","appendNewLine","@Override
            public StrBuilder appendNewLine()","0","-","-","-","-"
"4202","testAppendln_Object","@Test
    public void testAppendln_Object()","0","-","-","-","-"
"4203","testAppendln_PrimitiveNumber","@Test
    public void testAppendln_PrimitiveNumber()","0","-","-","-","-"
"4204","testAppendln_StrBuilder","@Test
    public void testAppendln_StrBuilder()","0","-","-","-","-"
"4205","append","@Override
            public StrBuilder append(final StrBuilder str)","0","-","-","-","-"
"4206","appendNewLine","@Override
            public StrBuilder appendNewLine()","0","-","-","-","-"
"4207","testAppendln_StrBuilder_int_int","@Test
    public void testAppendln_StrBuilder_int_int()","0","-","-","-","-"
"4208","append","@Override
            public StrBuilder append(final StrBuilder str, final int startIndex, final int length)","0","-","-","-","-"
"4209","appendNewLine","@Override
            public StrBuilder appendNewLine()","0","-","-","-","-"
"4210","testAppendln_String","@Test
    public void testAppendln_String()","0","-","-","-","-"
"4211","append","@Override
            public StrBuilder append(final String str)","0","-","-","-","-"
"4212","appendNewLine","@Override
            public StrBuilder appendNewLine()","0","-","-","-","-"
"4213","testAppendln_String_int_int","@Test
    public void testAppendln_String_int_int()","0","-","-","-","-"
"4214","append","@Override
            public StrBuilder append(final String str, final int startIndex, final int length)","0","-","-","-","-"
"4215","appendNewLine","@Override
            public StrBuilder appendNewLine()","0","-","-","-","-"
"4216","testAppendln_StringBuffer","@Test
    public void testAppendln_StringBuffer()","0","-","-","-","-"
"4217","append","@Override
            public StrBuilder append(final StringBuffer str)","0","-","-","-","-"
"4218","appendNewLine","@Override
            public StrBuilder appendNewLine()","0","-","-","-","-"
"4219","testAppendln_StringBuffer_int_int","@Test
    public void testAppendln_StringBuffer_int_int()","0","-","-","-","-"
"4220","append","@Override
            public StrBuilder append(final StringBuffer str, final int startIndex, final int length)","0","-","-","-","-"
"4221","appendNewLine","@Override
            public StrBuilder appendNewLine()","0","-","-","-","-"
"4222","testAppendln_StringBuilder","@Test
    public void testAppendln_StringBuilder()","0","-","-","-","-"
"4223","append","@Override
            public StrBuilder append(final StringBuilder str)","0","-","-","-","-"
"4224","appendNewLine","@Override
            public StrBuilder appendNewLine()","0","-","-","-","-"
"4225","testAppendln_StringBuilder_int_int","@Test
    public void testAppendln_StringBuilder_int_int()","0","-","-","-","-"
"4226","append","@Override
            public StrBuilder append(final StringBuilder str, final int startIndex, final int length)","0","-","-","-","-"
"4227","appendNewLine","@Override
            public StrBuilder appendNewLine()","0","-","-","-","-"
"4228","testAppendNewLine","@Test
    public void testAppendNewLine()","0","-","-","-","-"
"4229","testAppendPadding","@Test
    public void testAppendPadding()","0","-","-","-","-"
"4230","testAppendSeparator_char","@Test
    public void testAppendSeparator_char()","0","-","-","-","-"
"4231","testAppendSeparator_char_char","@Test
    public void testAppendSeparator_char_char()","0","-","-","-","-"
"4232","testAppendSeparator_char_int","@Test
    public void testAppendSeparator_char_int()","0","-","-","-","-"
"4233","testAppendSeparator_String","@Test
    public void testAppendSeparator_String()","0","-","-","-","-"
"4234","testAppendSeparator_String_int","@Test
    public void testAppendSeparator_String_int()","0","-","-","-","-"
"4235","testAppendSeparator_String_String","@Test
    public void testAppendSeparator_String_String()","0","-","-","-","-"
"4236","testAppendWithNullText","@Test
    public void testAppendWithNullText()","0","-","-","-","-"
"4237","testAppendWithSeparators_Array","@Test
    public void testAppendWithSeparators_Array()","0","-","-","-","-"
"4238","testAppendWithSeparators_Collection","@Test
    public void testAppendWithSeparators_Collection()","0","-","-","-","-"
"4239","testAppendWithSeparators_Iterator","@Test
    public void testAppendWithSeparators_Iterator()","0","-","-","-","-"
"4240","testAppendWithSeparatorsWithNullText","@Test
    public void testAppendWithSeparatorsWithNullText()","0","-","-","-","-"
"4241","testInsert","@Test
    public void testInsert()","0","-","-","-","-"
"4242","testInsertWithNullText","@Test
    public void testInsertWithNullText()","0","-","-","-","-"
"4243","testLang299","@Test
    public void testLang299()","0","-","-","-","-"
"4244","testAlternatePadCharacter","@Test
    public void testAlternatePadCharacter()","0","-","-","-","-"
"4245","testAlternatePadCharAndEllipsis","@Test
    public void testAlternatePadCharAndEllipsis()","0","-","-","-","-"
"4246","testDefaultAppend","@Test
    public void testDefaultAppend()","0","-","-","-","-"
"4247","testEllipsis","@Test
    public void testEllipsis()","0","-","-","-","-"
"4248","testIllegalEllipsis","@Test
    public void testIllegalEllipsis()","0","-","-","-","-"
"4249","MockReadable","MockReadable(final String src)","0","-","-","-","-"
"4250","read","@Override
        public int read(final CharBuffer cb) throws IOException","0","-","-","-","-"
"4251","isMatch","@Override
        public int isMatch(final char[] buffer, int pos, final int bufferStart, final int bufferEnd)","0","-","-","-","-"
"4252","test_LANG_1131_EqualsWithNullStrBuilder","@Test
    public void test_LANG_1131_EqualsWithNullStrBuilder()","0","-","-","-","-"
"4253","testAppendCharBuffer","@Test
    public void testAppendCharBuffer()","0","-","-","-","-"
"4254","testAppendToCharBuffer","@Test
    public void testAppendToCharBuffer() throws Exception","0","-","-","-","-"
"4255","testAppendToStringBuffer","@Test
    public void testAppendToStringBuffer() throws Exception","0","-","-","-","-"
"4256","testAppendToStringBuilder","@Test
    public void testAppendToStringBuilder() throws Exception","0","-","-","-","-"
"4257","testAppendToWriter","@Test
    public void testAppendToWriter() throws Exception","0","-","-","-","-"
"4258","testAsBuilder","@Test
    public void testAsBuilder()","0","-","-","-","-"
"4259","testAsReader","@Test
    public void testAsReader() throws Exception","0","-","-","-","-"
"4260","testAsTokenizer","@Test
    public void testAsTokenizer()","0","-","-","-","-"
"4261","testAsWriter","@Test
    public void testAsWriter() throws Exception","0","-","-","-","-"
"4262","testCapacity","@Test
    public void testCapacity()","0","-","-","-","-"
"4263","testCapacityAndLength","@Test
    public void testCapacityAndLength()","0","-","-","-","-"
"4264","testChaining","@Test
    public void testChaining()","0","-","-","-","-"
"4265","testCharAt","@Test
    public void testCharAt()","0","-","-","-","-"
"4266","testClear","@Test
    public void testClear()","0","-","-","-","-"
"4267","testConstructors","@Test
    public void testConstructors()","0","-","-","-","-"
"4268","testContains_char","@Test
    public void testContains_char()","0","-","-","-","-"
"4269","testContains_String","@Test
    public void testContains_String()","0","-","-","-","-"
"4270","testContains_StrMatcher","@Test
    public void testContains_StrMatcher()","0","-","-","-","-"
"4271","testDeleteAll_char","@Test
    public void testDeleteAll_char()","0","-","-","-","-"
"4272","testDeleteAll_String","@Test
    public void testDeleteAll_String()","0","-","-","-","-"
"4273","testDeleteAll_StrMatcher","@Test
    public void testDeleteAll_StrMatcher()","0","-","-","-","-"
"4274","testDeleteCharAt","@Test
    public void testDeleteCharAt()","0","-","-","-","-"
"4275","testDeleteFirst_char","@Test
    public void testDeleteFirst_char()","0","-","-","-","-"
"4276","testDeleteFirst_String","@Test
    public void testDeleteFirst_String()","0","-","-","-","-"
"4277","testDeleteFirst_StrMatcher","@Test
    public void testDeleteFirst_StrMatcher()","0","-","-","-","-"
"4278","testDeleteIntInt","@Test
    public void testDeleteIntInt()","0","-","-","-","-"
"4279","testEndsWith","@Test
    public void testEndsWith()","0","-","-","-","-"
"4280","testEnsureCapacity","@Test
    public void testEnsureCapacity()","0","-","-","-","-"
"4281","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"4282","testEqualsIgnoreCase","@Test
    public void testEqualsIgnoreCase()","0","-","-","-","-"
"4283","testGetChars","@Test
    public void testGetChars ()","0","-","-","-","-"
"4284","testGetCharsIntIntCharArrayInt","@Test
    public void testGetCharsIntIntCharArrayInt()","0","-","-","-","-"
"4285","testGetSetNewLineText","@Test
    public void testGetSetNewLineText()","0","-","-","-","-"
"4286","testGetSetNullText","@Test
    public void testGetSetNullText()","0","-","-","-","-"
"4287","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"4288","testIndexOf_char","@Test
    public void testIndexOf_char()","0","-","-","-","-"
"4289","testIndexOf_char_int","@Test
    public void testIndexOf_char_int()","0","-","-","-","-"
"4290","testIndexOf_String","@Test
    public void testIndexOf_String()","0","-","-","-","-"
"4291","testIndexOf_String_int","@Test
    public void testIndexOf_String_int()","0","-","-","-","-"
"4292","testIndexOf_StrMatcher","@Test
    public void testIndexOf_StrMatcher()","0","-","-","-","-"
"4293","testIndexOf_StrMatcher_int","@Test
    public void testIndexOf_StrMatcher_int()","0","-","-","-","-"
"4294","testIndexOfLang294","@Test
    public void testIndexOfLang294()","0","-","-","-","-"
"4295","testIsEmpty","@Test
    public void testIsEmpty()","0","-","-","-","-"
"4296","testLang294","@Test
    public void testLang294()","0","-","-","-","-"
"4297","testLang295","@Test
    public void testLang295()","0","-","-","-","-"
"4298","testLang412Left","@Test
    public void testLang412Left()","0","-","-","-","-"
"4299","testLang412Right","@Test
    public void testLang412Right()","0","-","-","-","-"
"4300","testLastIndexOf_char","@Test
    public void testLastIndexOf_char()","0","-","-","-","-"
"4301","testLastIndexOf_char_int","@Test
    public void testLastIndexOf_char_int()","0","-","-","-","-"
"4302","testLastIndexOf_String","@Test
    public void testLastIndexOf_String()","0","-","-","-","-"
"4303","testLastIndexOf_String_int","@Test
    public void testLastIndexOf_String_int()","0","-","-","-","-"
"4304","testLastIndexOf_StrMatcher","@Test
    public void testLastIndexOf_StrMatcher()","0","-","-","-","-"
"4305","testLastIndexOf_StrMatcher_int","@Test
    public void testLastIndexOf_StrMatcher_int()","0","-","-","-","-"
"4306","testLeftString","@Test
    public void testLeftString()","0","-","-","-","-"
"4307","testLength","@Test
    public void testLength()","0","-","-","-","-"
"4308","testMidString","@Test
    public void testMidString()","0","-","-","-","-"
"4309","testMinimizeCapacity","@Test
    public void testMinimizeCapacity()","0","-","-","-","-"
"4310","testReadFromCharBuffer","@Test
    public void testReadFromCharBuffer() throws Exception","0","-","-","-","-"
"4311","testReadFromCharBufferAppendsToEnd","@Test
    public void testReadFromCharBufferAppendsToEnd() throws Exception","0","-","-","-","-"
"4312","testReadFromReadable","@Test
    public void testReadFromReadable() throws Exception","0","-","-","-","-"
"4313","testReadFromReadableAppendsToEnd","@Test
    public void testReadFromReadableAppendsToEnd() throws Exception","0","-","-","-","-"
"4314","testReadFromReader","@Test
    public void testReadFromReader() throws Exception","0","-","-","-","-"
"4315","testReadFromReaderAppendsToEnd","@Test
    public void testReadFromReaderAppendsToEnd() throws Exception","0","-","-","-","-"
"4316","testReplace_int_int_String","@Test
    public void testReplace_int_int_String()","0","-","-","-","-"
"4317","testReplace_StrMatcher_String_int_int_int_VaryCount","@Test
    public void testReplace_StrMatcher_String_int_int_int_VaryCount()","0","-","-","-","-"
"4318","testReplace_StrMatcher_String_int_int_int_VaryEndIndex","@Test
    public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex()","0","-","-","-","-"
"4319","testReplace_StrMatcher_String_int_int_int_VaryMatcher","@Test
    public void testReplace_StrMatcher_String_int_int_int_VaryMatcher()","0","-","-","-","-"
"4320","testReplace_StrMatcher_String_int_int_int_VaryReplace","@Test
    public void testReplace_StrMatcher_String_int_int_int_VaryReplace()","0","-","-","-","-"
"4321","testReplace_StrMatcher_String_int_int_int_VaryStartIndex","@Test
    public void testReplace_StrMatcher_String_int_int_int_VaryStartIndex()","0","-","-","-","-"
"4322","testReplaceAll_char_char","@Test
    public void testReplaceAll_char_char()","0","-","-","-","-"
"4323","testReplaceAll_String_String","@Test
    public void testReplaceAll_String_String()","0","-","-","-","-"
"4324","testReplaceAll_StrMatcher_String","@Test
    public void testReplaceAll_StrMatcher_String()","0","-","-","-","-"
"4325","testReplaceFirst_char_char","@Test
    public void testReplaceFirst_char_char()","0","-","-","-","-"
"4326","testReplaceFirst_String_String","@Test
    public void testReplaceFirst_String_String()","0","-","-","-","-"
"4327","testReplaceFirst_StrMatcher_String","@Test
    public void testReplaceFirst_StrMatcher_String()","0","-","-","-","-"
"4328","testReverse","@Test
    public void testReverse()","0","-","-","-","-"
"4329","testRightString","@Test
    public void testRightString()","0","-","-","-","-"
"4330","testSetCharAt","@Test
    public void testSetCharAt()","0","-","-","-","-"
"4331","testSetLength","@Test
    public void testSetLength()","0","-","-","-","-"
"4332","testSize","@Test
    public void testSize()","0","-","-","-","-"
"4333","testStartsWith","@Test
    public void testStartsWith()","0","-","-","-","-"
"4334","testSubSequenceIntInt","@Test
    public void testSubSequenceIntInt()","0","-","-","-","-"
"4335","testSubstringInt","@Test
    public void testSubstringInt()","0","-","-","-","-"
"4336","testSubstringIntInt","@Test
    public void testSubstringIntInt()","0","-","-","-","-"
"4337","testToCharArray","@Test
    public void testToCharArray()","0","-","-","-","-"
"4338","testToCharArrayIntInt","@Test
    public void testToCharArrayIntInt()","0","-","-","-","-"
"4339","testToString","@Test
    public void testToString()","0","-","-","-","-"
"4340","testToStringBuffer","@Test
    public void testToStringBuffer()","0","-","-","-","-"
"4341","testToStringBuilder","@Test
    public void testToStringBuilder()","0","-","-","-","-"
"4342","testTrim","@Test
    public void testTrim()","0","-","-","-","-"
"4343","testToCharset_Charset","@Test
    public void testToCharset_Charset()","0","-","-","-","-"
"4344","testToCharset_String","@Test
    public void testToCharset_String()","0","-","-","-","-"
"4345","testToCharsetName","@Test
    public void testToCharsetName()","0","-","-","-","-"
"4346","testCountMatches_char","@Test
    public void testCountMatches_char()","0","-","-","-","-"
"4347","testCountMatches_String","@Test
    public void testCountMatches_String()","0","-","-","-","-"
"4348","testLeft_String","@Test
    public void testLeft_String()","0","-","-","-","-"
"4349","testMid_String","@Test
    public void testMid_String()","0","-","-","-","-"
"4350","testRight_String","@Test
    public void testRight_String()","0","-","-","-","-"
"4351","testSubstring_StringInt","@Test
    public void testSubstring_StringInt()","0","-","-","-","-"
"4352","testSubstring_StringIntInt","@Test
    public void testSubstring_StringIntInt()","0","-","-","-","-"
"4353","testSubstringAfter_StringInt","@Test
    public void testSubstringAfter_StringInt()","0","-","-","-","-"
"4354","testSubstringAfter_StringString","@Test
    public void testSubstringAfter_StringString()","0","-","-","-","-"
"4355","testSubstringAfterLast_StringInt","@Test
    public void testSubstringAfterLast_StringInt()","0","-","-","-","-"
"4356","testSubstringAfterLast_StringString","@Test
    public void testSubstringAfterLast_StringString()","0","-","-","-","-"
"4357","testSubstringBefore_StringInt","@Test
    public void testSubstringBefore_StringInt()","0","-","-","-","-"
"4358","testSubstringBefore_StringString","@Test
    public void testSubstringBefore_StringString()","0","-","-","-","-"
"4359","testSubstringBeforeLast_StringString","@Test
    public void testSubstringBeforeLast_StringString()","0","-","-","-","-"
"4360","testSubstringBetween_StringString","@Test
public void testSubstringBetween_StringString()","0","-","-","-","-"
"4361","testSubstringBetween_StringStringString","@Test
    public void testSubstringBetween_StringStringString()","0","-","-","-","-"
"4362","testSubstringsBetween_StringStringString","/**
         * Tests the substringsBetween method that returns a String Array of substrings.
         */
        @Test
        public void testSubstringsBetween_StringStringString()","0","-","-","-","-"
"4363","compareTo","@Override
        public int compareTo(final AbstractComparable o)","0","-","-","-","-"
"4364","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"4365","testBetweenWithCompare","@Test
    public void testBetweenWithCompare()","0","-","-","-","-"
"4366","testComparableConstructors","@SuppressWarnings(","0","-","-","-","-"
"4367","testConstructorSignatureWithAbstractComparableClasses","@Test
    public void testConstructorSignatureWithAbstractComparableClasses()","0","-","-","-","-"
"4368","testContains","@Test
    public void testContains()","0","-","-","-","-"
"4369","testContainsRange","@Test
    public void testContainsRange()","0","-","-","-","-"
"4370","testElementCompareTo","@Test
    public void testElementCompareTo()","0","-","-","-","-"
"4371","testEqualsObject","@Test
    public void testEqualsObject()","0","-","-","-","-"
"4372","testFit","@Test
    public void testFit()","0","-","-","-","-"
"4373","testFitNull","@Test
    public void testFitNull()","0","-","-","-","-"
"4374","testGetMaximum","@Test
    public void testGetMaximum()","0","-","-","-","-"
"4375","testGetMinimum","@Test
    public void testGetMinimum()","0","-","-","-","-"
"4376","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"4377","testIntersectionWith","@Test
    public void testIntersectionWith()","0","-","-","-","-"
"4378","testIntersectionWithNonOverlapping","@Test
    public void testIntersectionWithNonOverlapping()","0","-","-","-","-"
"4379","testIntersectionWithNull","@Test
    public void testIntersectionWithNull()","0","-","-","-","-"
"4380","testIsAfter","@Test
    public void testIsAfter()","0","-","-","-","-"
"4381","testIsAfterRange","@Test
    public void testIsAfterRange()","0","-","-","-","-"
"4382","testIsBefore","@Test
    public void testIsBefore()","0","-","-","-","-"
"4383","testIsBeforeRange","@Test
    public void testIsBeforeRange()","0","-","-","-","-"
"4384","testIsEndedBy","@Test
    public void testIsEndedBy()","0","-","-","-","-"
"4385","testIsOverlappedBy","@Test
    public void testIsOverlappedBy()","0","-","-","-","-"
"4386","testIsStartedBy","@Test
    public void testIsStartedBy()","0","-","-","-","-"
"4387","testIsWithCompare","@Test
    public void testIsWithCompare()","0","-","-","-","-"
"4388","testOfWithCompare","@Test
    public void testOfWithCompare()","0","-","-","-","-"
"4389","testRangeOfChars","@Test
    public void testRangeOfChars()","0","-","-","-","-"
"4390","testSerializing","@Test
    public void testSerializing()","0","-","-","-","-"
"4391","testToString","@Test
    public void testToString()","0","-","-","-","-"
"4392","testToStringFormat","@Test
    public void testToStringFormat()","0","-","-","-","-"
"4393","of","private static DoubleRange of(final double min, final double max)","0","-","-","-","-"
"4394","of","private static DoubleRange of(final Double min, final Double max)","0","-","-","-","-"
"4395","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"4396","testContainsInt","@Test
    public void testContainsInt()","0","-","-","-","-"
"4397","testContainsRange","@Test
    public void testContainsRange()","0","-","-","-","-"
"4398","testElementCompareTo","@Test
    public void testElementCompareTo()","0","-","-","-","-"
"4399","testEqualsObject","@Test
    public void testEqualsObject()","0","-","-","-","-"
"4400","testFit","@Test
    public void testFit()","0","-","-","-","-"
"4401","testFitNull","@Test
    public void testFitNull()","0","-","-","-","-"
"4402","testGetMaximum","@Test
    public void testGetMaximum()","0","-","-","-","-"
"4403","testGetMinimum","@Test
    public void testGetMinimum()","0","-","-","-","-"
"4404","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"4405","testIntersectionWith","@Test
    public void testIntersectionWith()","0","-","-","-","-"
"4406","testIntersectionWithNonOverlapping","@Test
    public void testIntersectionWithNonOverlapping()","0","-","-","-","-"
"4407","testIntersectionWithNull","@Test
    public void testIntersectionWithNull()","0","-","-","-","-"
"4408","testIsAfter","@Test
    public void testIsAfter()","0","-","-","-","-"
"4409","testIsAfterRange","@Test
    public void testIsAfterRange()","0","-","-","-","-"
"4410","testIsBefore","@Test
    public void testIsBefore()","0","-","-","-","-"
"4411","testIsBeforeIntegerRange","@Test
    public void testIsBeforeIntegerRange()","0","-","-","-","-"
"4412","testIsBeforeRange","@Test
    public void testIsBeforeRange()","0","-","-","-","-"
"4413","testIsEndedBy","@Test
    public void testIsEndedBy()","0","-","-","-","-"
"4414","testIsOverlappedByIntegerRange","@Test
    public void testIsOverlappedByIntegerRange()","0","-","-","-","-"
"4415","testIsOverlappedByRange","@Test
    public void testIsOverlappedByRange()","0","-","-","-","-"
"4416","testIsStartedBy","@Test
    public void testIsStartedBy()","0","-","-","-","-"
"4417","testIsWithCompareRange","@Test
    public void testIsWithCompareRange()","0","-","-","-","-"
"4418","testOfWithContains","@Test
    public void testOfWithContains()","0","-","-","-","-"
"4419","testRangeOfChars","@Test
    public void testRangeOfChars()","0","-","-","-","-"
"4420","testSerializing","@Test
    public void testSerializing()","0","-","-","-","-"
"4421","testToString","@Test
    public void testToString()","0","-","-","-","-"
"4422","testToStringFormat","@Test
    public void testToStringFormat()","0","-","-","-","-"
"4423","testCompare","@Test
    public void testCompare()","0","-","-","-","-"
"4424","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"4425","testIsAscii_char","@Test
    public void testIsAscii_char()","0","-","-","-","-"
"4426","testIsAsciiAlpha_char","@Test
    public void testIsAsciiAlpha_char()","0","-","-","-","-"
"4427","testIsAsciiAlphaLower_char","@Test
    public void testIsAsciiAlphaLower_char()","0","-","-","-","-"
"4428","testIsAsciiAlphanumeric_char","@Test
    public void testIsAsciiAlphanumeric_char()","0","-","-","-","-"
"4429","testIsAsciiAlphaUpper_char","@Test
    public void testIsAsciiAlphaUpper_char()","0","-","-","-","-"
"4430","testIsAsciiControl_char","@Test
    public void testIsAsciiControl_char()","0","-","-","-","-"
"4431","testIsAsciiNumeric_char","@Test
    public void testIsAsciiNumeric_char()","0","-","-","-","-"
"4432","testIsAsciiPrintable_char","@Test
    public void testIsAsciiPrintable_char()","0","-","-","-","-"
"4433","testToChar_Character","@Test
    public void testToChar_Character()","0","-","-","-","-"
"4434","testToChar_Character_char","@Test
    public void testToChar_Character_char()","0","-","-","-","-"
"4435","testToChar_String","@Test
    public void testToChar_String()","0","-","-","-","-"
"4436","testToChar_String_char","@Test
    public void testToChar_String_char()","0","-","-","-","-"
"4437","testToCharacterObject_char","@SuppressWarnings(""deprecation"") // intentional test of deprecated method
    @Test
    public void testToCharacterObject_char()","0","-","-","-","-"
"4438","testToCharacterObject_String","@Test
    public void testToCharacterObject_String()","0","-","-","-","-"
"4439","testToIntValue_char","@Test
    public void testToIntValue_char()","0","-","-","-","-"
"4440","testToIntValue_char_int","@Test
    public void testToIntValue_char_int()","0","-","-","-","-"
"4441","testToIntValue_Character","@Test
    public void testToIntValue_Character()","0","-","-","-","-"
"4442","testToIntValue_Character_int","@Test
    public void testToIntValue_Character_int()","0","-","-","-","-"
"4443","testToString_char","@Test
    public void testToString_char()","0","-","-","-","-"
"4444","testToString_Character","@Test
    public void testToString_Character()","0","-","-","-","-"
"4445","testToUnicodeEscaped_char","@Test
    public void testToUnicodeEscaped_char()","0","-","-","-","-"
"4446","testToUnicodeEscaped_Character","@Test
    public void testToUnicodeEscaped_Character()","0","-","-","-","-"
"4447","test_toStringDefaultBehavior","@Test
    public void test_toStringDefaultBehavior()","0","-","-","-","-"
"4448","test_toStringInclude","@Test
    public void test_toStringInclude()","0","-","-","-","-"
"4449","test_toStringIncludeArray","@Test
    public void test_toStringIncludeArray()","0","-","-","-","-"
"4450","test_toStringIncludeArrayWithNull","@Test
    public void test_toStringIncludeArrayWithNull()","0","-","-","-","-"
"4451","test_toStringIncludeArrayWithNulls","@Test
    public void test_toStringIncludeArrayWithNulls()","0","-","-","-","-"
"4452","test_toStringIncludeCollection","@Test
    public void test_toStringIncludeCollection()","0","-","-","-","-"
"4453","test_toStringIncludeCollectionWithNull","@Test
    public void test_toStringIncludeCollectionWithNull()","0","-","-","-","-"
"4454","test_toStringIncludeCollectionWithNulls","@Test
    public void test_toStringIncludeCollectionWithNulls()","0","-","-","-","-"
"4455","test_toStringIncludeEmptyArray","@Test
    public void test_toStringIncludeEmptyArray()","0","-","-","-","-"
"4456","test_toStringIncludeEmptyCollection","@Test
    public void test_toStringIncludeEmptyCollection()","0","-","-","-","-"
"4457","test_toStringIncludeNullArray","@Test
    public void test_toStringIncludeNullArray()","0","-","-","-","-"
"4458","test_toStringIncludeNullArrayMultiplesValues","@Test
    public void test_toStringIncludeNullArrayMultiplesValues()","0","-","-","-","-"
"4459","test_toStringIncludeNullCollection","@Test
    public void test_toStringIncludeNullCollection()","0","-","-","-","-"
"4460","test_toStringIncludeWithoutInformingFields","@Test
    public void test_toStringIncludeWithoutInformingFields()","0","-","-","-","-"
"4461","test_toStringSetIncludeAndExcludeWithIntersection","@Test
    public void test_toStringSetIncludeAndExcludeWithIntersection()","0","-","-","-","-"
"4462","test_toStringSetIncludeAndExcludeWithoutIntersection","@Test
    public void test_toStringSetIncludeAndExcludeWithoutIntersection()","0","-","-","-","-"
"4463","test_toStringSetIncludeAndExcludeWithRandomFieldsWithIntersection","@Test
    public void test_toStringSetIncludeAndExcludeWithRandomFieldsWithIntersection()","0","-","-","-","-"
"4464","test_toStringSetIncludeAndExcludeWithRandomFieldsWithoutIntersection","@Test
    public void test_toStringSetIncludeAndExcludeWithRandomFieldsWithoutIntersection()","0","-","-","-","-"
"4465","test_toStringSetIncludeWithArrayWithMultipleNullFields","@Test
    public void test_toStringSetIncludeWithArrayWithMultipleNullFields()","0","-","-","-","-"
"4466","test_toStringSetIncludeWithMultipleNullFields","@Test
    public void test_toStringSetIncludeWithMultipleNullFields()","0","-","-","-","-"
"4467","validateAllFieldsPresent","private void validateAllFieldsPresent(final String toString)","0","-","-","-","-"
"4468","validateIncludeFieldsPresent","private void validateIncludeFieldsPresent(final String toString, final String[] fieldsToShow, final String[] valuesToShow)","0","-","-","-","-"
"4469","validateNonIncludeFieldsAbsent","private void validateNonIncludeFieldsAbsent(final String toString, final String[] IncludeFields, final String[] IncludeFieldsValues)","0","-","-","-","-"
"4470","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"4471","tearDown","@AfterEach
    public void tearDown()","0","-","-","-","-"
"4472","testAppendSuper","@Test
    public void testAppendSuper()","0","-","-","-","-"
"4473","testArray","@Test
    public void testArray()","0","-","-","-","-"
"4474","testBlank","@Test
    public void testBlank()","0","-","-","-","-"
"4475","testCollection","@Test
    public void testCollection()","0","-","-","-","-"
"4476","testDefaultGetter","@Test
    public void testDefaultGetter()","0","-","-","-","-"
"4477","testDefaultIsArrayContentDetail","@Test
    public void testDefaultIsArrayContentDetail()","0","-","-","-","-"
"4478","testDefaultIsFieldSeparatorAtEnd","@Test
    public void testDefaultIsFieldSeparatorAtEnd()","0","-","-","-","-"
"4479","testDefaultIsFieldSeparatorAtStart","@Test
    public void testDefaultIsFieldSeparatorAtStart()","0","-","-","-","-"
"4480","testDefaultValueOfFullDetail","@Test
    public void testDefaultValueOfFullDetail()","0","-","-","-","-"
"4481","testDefaultValueOfUseClassName","@Test
    public void testDefaultValueOfUseClassName()","0","-","-","-","-"
"4482","testDefaultValueOfUseFieldNames","@Test
    public void testDefaultValueOfUseFieldNames()","0","-","-","-","-"
"4483","testDefaultValueOfUseIdentityHashCode","@Test
    public void testDefaultValueOfUseIdentityHashCode()","0","-","-","-","-"
"4484","testDefaultValueOfUseShortClassName","@Test
    public void testDefaultValueOfUseShortClassName()","0","-","-","-","-"
"4485","testLong","@Test
    public void testLong()","0","-","-","-","-"
"4486","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"4487","testLongArrayArray","@Test
    public void testLongArrayArray()","0","-","-","-","-"
"4488","testMap","@Test
    public void testMap()","0","-","-","-","-"
"4489","testObject","@Test
    public void testObject()","0","-","-","-","-"
"4490","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"4491","testPerson","@Test
    public void testPerson()","0","-","-","-","-"
"4492","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"4493","MyCharSequence","MyCharSequence(final char[] chars)","0","-","-","-","-"
"4494","MyCharSequence","MyCharSequence(final char[] chars, final int start, final int end)","0","-","-","-","-"
"4495","MyCharSequence","MyCharSequence(final String string)","0","-","-","-","-"
"4496","charAt","@Override
        public char charAt(final int index)","0","-","-","-","-"
"4497","length","@Override
        public int length()","0","-","-","-","-"
"4498","subSequence","@Override
        public CharSequence subSequence(final int start, final int end)","0","-","-","-","-"
"4499","toString","@Override
        public String toString()","0","-","-","-","-"
"4500","MyClass","MyClass(final MyCharSequence charSequence, final MyTemporal temporal, final MyTemporalAccessor temporalAccessor,
                final MyTemporalAmount temporalAmount)","0","-","-","-","-"
"4501","toString","@Override
        public String toString()","0","-","-","-","-"
"4502","MyTemporal","MyTemporal(final String string)","0","-","-","-","-"
"4503","getLong","@Override
        public long getLong(final TemporalField field)","0","-","-","-","-"
"4504","isSupported","@Override
        public boolean isSupported(final TemporalField field)","0","-","-","-","-"
"4505","isSupported","@Override
        public boolean isSupported(final TemporalUnit unit)","0","-","-","-","-"
"4506","plus","@Override
        public Temporal plus(final long amountToAdd, final TemporalUnit unit)","0","-","-","-","-"
"4507","toString","@Override
        public String toString()","0","-","-","-","-"
"4508","until","@Override
        public long until(final Temporal endExclusive, final TemporalUnit unit)","0","-","-","-","-"
"4509","with","@Override
        public Temporal with(final TemporalField field, final long newValue)","0","-","-","-","-"
"4510","MyTemporalAccessor","MyTemporalAccessor(final String string)","0","-","-","-","-"
"4511","getLong","@Override
        public long getLong(final TemporalField field)","0","-","-","-","-"
"4512","isSupported","@Override
        public boolean isSupported(final TemporalField field)","0","-","-","-","-"
"4513","toString","@Override
        public String toString()","0","-","-","-","-"
"4514","MyTemporalAmount","MyTemporalAmount(final String string)","0","-","-","-","-"
"4515","addTo","@Override
        public Temporal addTo(final Temporal temporal)","0","-","-","-","-"
"4516","get","@Override
        public long get(final TemporalUnit unit)","0","-","-","-","-"
"4517","getUnits","@Override
        public List<TemporalUnit> getUnits()","0","-","-","-","-"
"4518","subtractFrom","@Override
        public Temporal subtractFrom(final Temporal temporal)","0","-","-","-","-"
"4519","toString","@Override
        public String toString()","0","-","-","-","-"
"4520","testRecursive","@Test
    public void testRecursive()","0","-","-","-","-"
"4521","testRetention","@Test
    public void testRetention() throws Exception","0","-","-","-","-"
"4522","CustomReflectionToStringBuilder","public CustomReflectionToStringBuilder(final Object object, final ToStringStyle toStringStyle)","0","-","-","-","-"
"4523","getValue","@Override
        protected Object getValue(final Field field) throws IllegalAccessException","0","-","-","-","-"
"4524","testBuild","@Test
    public void testBuild()","0","-","-","-","-"
"4525","testHexToByte","@Test
    void testHexToByte()","0","-","-","-","-"
"4526","testHexToByte_IllegalArgument","@Test
    void testHexToByte_IllegalArgument()","0","-","-","-","-"
"4527","testHexToByte_nullString","@Test
    void testHexToByte_nullString()","0","-","-","-","-"
"4528","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"4529","tearDown","@AfterEach
    public void tearDown()","0","-","-","-","-"
"4530","testAppendSuper","@Test
    public void testAppendSuper()","0","-","-","-","-"
"4531","testArray","@Test
    public void testArray()","0","-","-","-","-"
"4532","testBlank","@Test
    public void testBlank()","0","-","-","-","-"
"4533","testCollection","@Test
    public void testCollection()","0","-","-","-","-"
"4534","testLong","@Test
    public void testLong()","0","-","-","-","-"
"4535","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"4536","testLongArrayArray","@Test
    public void testLongArrayArray()","0","-","-","-","-"
"4537","testMap","@Test
    public void testMap()","0","-","-","-","-"
"4538","testObject","@Test
    public void testObject()","0","-","-","-","-"
"4539","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"4540","testPerson","@Test
    public void testPerson()","0","-","-","-","-"
"4541","defineClass","public Class<?> defineClass(final String name, final byte[] b)","0","-","-","-","-"
"4542","defineSimpleClass","/**
     * Defines the simplest possible class.
     *
     * @param name The class name.
     * @return The new class.
     */
    static Class<?> defineSimpleClass(final String name)","0","-","-","-","-"
"4543","defineSimpleClass","static Class<?> defineSimpleClass(final String packageName, final int i)","0","-","-","-","-"
"4544","testSetArrayEnd","@Test
    public void testSetArrayEnd()","0","-","-","-","-"
"4545","testSetArraySeparator","@Test
    public void testSetArraySeparator()","0","-","-","-","-"
"4546","testSetArrayStart","@Test
    public void testSetArrayStart()","0","-","-","-","-"
"4547","testSetContentEnd","@Test
    public void testSetContentEnd()","0","-","-","-","-"
"4548","testSetContentStart","@Test
    public void testSetContentStart()","0","-","-","-","-"
"4549","testSetFieldNameValueSeparator","@Test
    public void testSetFieldNameValueSeparator()","0","-","-","-","-"
"4550","testSetFieldSeparator","@Test
    public void testSetFieldSeparator()","0","-","-","-","-"
"4551","testSetNullText","@Test
    public void testSetNullText()","0","-","-","-","-"
"4552","testSetSizeEndText","@Test
    public void testSetSizeEndText()","0","-","-","-","-"
"4553","testSetSizeStartText","@Test
    public void testSetSizeStartText()","0","-","-","-","-"
"4554","testSetSummaryObjectEndText","@Test
    public void testSetSummaryObjectEndText()","0","-","-","-","-"
"4555","testSetSummaryObjectStartText","@Test
    public void testSetSummaryObjectStartText()","0","-","-","-","-"
"4556","TestFixture","TestFixture(final Integer a, final String b)","0","-","-","-","-"
"4557","test_ConstructorOption","@Test
    public void test_ConstructorOption()","0","-","-","-","-"
"4558","test_ConstructorOption_ExcludeNull","@Test
    public void test_ConstructorOption_ExcludeNull()","0","-","-","-","-"
"4559","test_ConstructorOptionNormal","@Test
    public void test_ConstructorOptionNormal()","0","-","-","-","-"
"4560","test_excludeNull","@Test
    public void test_excludeNull()","0","-","-","-","-"
"4561","test_NonExclude","@Test
    public void test_NonExclude()","0","-","-","-","-"
"4562","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"4563","tearDown","@AfterEach
    public void tearDown()","0","-","-","-","-"
"4564","testAppendSuper","@Test
    public void testAppendSuper()","0","-","-","-","-"
"4565","testArray","@Test
    public void testArray()","0","-","-","-","-"
"4566","testBlank","@Test
    public void testBlank()","0","-","-","-","-"
"4567","testCollection","@Test
    public void testCollection()","0","-","-","-","-"
"4568","testLong","@Test
    public void testLong()","0","-","-","-","-"
"4569","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"4570","testLongArrayArray","@Test
    public void testLongArrayArray()","0","-","-","-","-"
"4571","testMap","@Test
    public void testMap()","0","-","-","-","-"
"4572","testObject","@Test
    public void testObject()","0","-","-","-","-"
"4573","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"4574","testPerson","@Test
    public void testPerson()","0","-","-","-","-"
"4575","diff","@Override
        public DiffResult<NestedTypeTestClass> diff(final NestedTypeTestClass obj)","0","-","-","-","-"
"4576","equals","@Override
        public boolean equals(final Object obj)","0","-","-","-","-"
"4577","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"4578","diff","@Override
        public DiffResult<TypeTestClass> diff(final TypeTestClass obj)","0","-","-","-","-"
"4579","equals","@Override
        public boolean equals(final Object obj)","0","-","-","-","-"
"4580","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"4581","testBoolean","@Test
    public void testBoolean()","0","-","-","-","-"
"4582","testBooleanArray","@Test
    public void testBooleanArray()","0","-","-","-","-"
"4583","testByte","@Test
    public void testByte()","0","-","-","-","-"
"4584","testByteArray","@Test
    public void testByteArray()","0","-","-","-","-"
"4585","testByteArrayEqualAsObject1","@Test
    public void testByteArrayEqualAsObject1()","0","-","-","-","-"
"4586","testByteArrayEqualAsObjectDeprecated","@Test
    public void testByteArrayEqualAsObjectDeprecated()","0","-","-","-","-"
"4587","testChar","@Test
    public void testChar()","0","-","-","-","-"
"4588","testCharArray","@Test
    public void testCharArray()","0","-","-","-","-"
"4589","testDiffResult","@Test
    public void testDiffResult()","0","-","-","-","-"
"4590","testDiffResultEquals","@Test
    public void testDiffResultEquals()","0","-","-","-","-"
"4591","testDouble","@Test
    public void testDouble()","0","-","-","-","-"
"4592","testDoubleArray","@Test
    public void testDoubleArray()","0","-","-","-","-"
"4593","testFloat","@Test
    public void testFloat()","0","-","-","-","-"
"4594","testFloatArray","@Test
    public void testFloatArray()","0","-","-","-","-"
"4595","testInt","@Test
    public void testInt()","0","-","-","-","-"
"4596","testIntArray","@Test
    public void testIntArray()","0","-","-","-","-"
"4597","testLong","@Test
    public void testLong()","0","-","-","-","-"
"4598","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"4599","testNestedDiffableNo","@Test
    public void testNestedDiffableNo()","0","-","-","-","-"
"4600","testNestedDiffableYesNestedNot","@Test
    public void testNestedDiffableYesNestedNot()","0","-","-","-","-"
"4601","testNestedDiffableYesNestedOnly","@Test
    public void testNestedDiffableYesNestedOnly()","0","-","-","-","-"
"4602","testNestedDiffableYesNestedYes","@Test
    public void testNestedDiffableYesNestedYes()","0","-","-","-","-"
"4603","testNullLhs","@Test
    public void testNullLhs()","0","-","-","-","-"
"4604","testNullLhs_4args","@Test
    public void testNullLhs_4args()","0","-","-","-","-"
"4605","testNullRhs","@Test
    public void testNullRhs()","0","-","-","-","-"
"4606","testNullRhs_4args","@Test
    public void testNullRhs_4args()","0","-","-","-","-"
"4607","testObject","@Test
    public void testObject()","0","-","-","-","-"
"4608","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"4609","testObjectArrayEqual","@Test
    public void testObjectArrayEqual()","0","-","-","-","-"
"4610","testObjectsNotSameButEqual","/**
     * Test that ""left"" and ""right"" are the same instance but are equal.
     */
    @Test
    public void testObjectsNotSameButEqual()","0","-","-","-","-"
"4611","testObjectsNotSameNorEqual","/**
     * Test that ""left"" and ""right"" are not the same instance and are not equal.
     */
    @Test
    public void testObjectsNotSameNorEqual()","0","-","-","-","-"
"4612","testObjectsSameAndEqual","/**
     * Test that ""left"" and ""right"" are the same instance and are equal.
     */
    @Test
    public void testObjectsSameAndEqual()","0","-","-","-","-"
"4613","testSameObjectIgnoresAppends","@Test
    public void testSameObjectIgnoresAppends()","0","-","-","-","-"
"4614","testShort","@Test
    public void testShort()","0","-","-","-","-"
"4615","testShortArray","@Test
    public void testShortArray()","0","-","-","-","-"
"4616","testSimilarObjectIgnoresAppends","@Test
    public void testSimilarObjectIgnoresAppends()","0","-","-","-","-"
"4617","testStylePassedToDiffResult","@Test
    public void testStylePassedToDiffResult()","0","-","-","-","-"
"4618","testTriviallyEqualTestDisabled","@Test
    public void testTriviallyEqualTestDisabled()","0","-","-","-","-"
"4619","testTriviallyEqualTestEnabled","@Test
    public void testTriviallyEqualTestEnabled()","0","-","-","-","-"
"4620","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"4621","tearDown","@AfterEach
    public void tearDown()","0","-","-","-","-"
"4622","testAppendSuper","@Test
    public void testAppendSuper()","0","-","-","-","-"
"4623","testArray","@Test
    public void testArray()","0","-","-","-","-"
"4624","testBlank","@Test
    public void testBlank()","0","-","-","-","-"
"4625","testCollection","@Test
    public void testCollection()","0","-","-","-","-"
"4626","testLong","@Test
    public void testLong()","0","-","-","-","-"
"4627","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"4628","testLongArrayArray","@Test
    public void testLongArrayArray()","0","-","-","-","-"
"4629","testMap","@Test
    public void testMap()","0","-","-","-","-"
"4630","testObject","@Test
    public void testObject()","0","-","-","-","-"
"4631","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"4632","testPerson","@Test
    public void testPerson()","0","-","-","-","-"
"4633","getFieldName","static String getFieldName()","0","-","-","-","-"
"4634","SimpleClass","SimpleClass(final boolean booleanField)","0","-","-","-","-"
"4635","diff","@Override
        public DiffResult<SimpleClass> diff(final SimpleClass obj)","0","-","-","-","-"
"4636","testDefaultStyle","@Test
    public void testDefaultStyle()","0","-","-","-","-"
"4637","testIterator","@Test
    public void testIterator()","0","-","-","-","-"
"4638","testLeftAndRightGetters","@Test
    public void testLeftAndRightGetters()","0","-","-","-","-"
"4639","testListIsNonModifiable","@Test
    public void testListIsNonModifiable()","0","-","-","-","-"
"4640","testNoDifferencesString","@Test
    public void testNoDifferencesString()","0","-","-","-","-"
"4641","testNullLhs","@Test
    public void testNullLhs()","0","-","-","-","-"
"4642","testNullList","@Test
    public void testNullList()","0","-","-","-","-"
"4643","testNullRhs","@Test
    public void testNullRhs()","0","-","-","-","-"
"4644","testToStringFormat","@Test
    public void testToStringFormat()","0","-","-","-","-"
"4645","testToStringOutput","@Test
    public void testToStringOutput()","0","-","-","-","-"
"4646","testToStringSpecifyStyleOutput","@Test
    public void testToStringSpecifyStyleOutput()","0","-","-","-","-"
"4647","TestACanEqualB","public TestACanEqualB(final int a)","0","-","-","-","-"
"4648","equals","@Override
        public boolean equals(final Object o)","0","-","-","-","-"
"4649","getA","public int getA()","0","-","-","-","-"
"4650","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"4651","TestBCanEqualA","public TestBCanEqualA(final int b)","0","-","-","-","-"
"4652","equals","@Override
        public boolean equals(final Object o)","0","-","-","-","-"
"4653","getB","public int getB()","0","-","-","-","-"
"4654","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"4655","TestEmptySubObject","TestEmptySubObject(final int a)","0","-","-","-","-"
"4656","TestObject","TestObject()","0","-","-","-","-"
"4657","TestObject","TestObject(final int a)","0","-","-","-","-"
"4658","equals","@Override
        public boolean equals(final Object o)","0","-","-","-","-"
"4659","getA","public int getA()","0","-","-","-","-"
"4660","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"4661","setA","public void setA(final int a)","0","-","-","-","-"
"4662","TestObjectEqualsExclude","TestObjectEqualsExclude(final int a, final int b)","0","-","-","-","-"
"4663","getA","public int getA()","0","-","-","-","-"
"4664","getB","public int getB()","0","-","-","-","-"
"4665","TestObjectReference","TestObjectReference(final int one)","0","-","-","-","-"
"4666","equals","@Override
        public boolean equals(final Object obj)","0","-","-","-","-"
"4667","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"4668","setObjectReference","public void setObjectReference(final TestObjectReference reference)","0","-","-","-","-"
"4669","TestObjectWithMultipleFields","TestObjectWithMultipleFields(final int one, final int two, final int three)","0","-","-","-","-"
"4670","TestRecursiveCycleObject","TestRecursiveCycleObject(final int n)","0","-","-","-","-"
"4671","TestRecursiveCycleObject","TestRecursiveCycleObject(final TestRecursiveCycleObject cycle, final int n)","0","-","-","-","-"
"4672","getCycle","public TestRecursiveCycleObject getCycle()","0","-","-","-","-"
"4673","getN","public int getN()","0","-","-","-","-"
"4674","setCycle","public void setCycle(final TestRecursiveCycleObject cycle)","0","-","-","-","-"
"4675","TestRecursiveGenericObject","TestRecursiveGenericObject(final T a)","0","-","-","-","-"
"4676","getA","public T getA()","0","-","-","-","-"
"4677","TestRecursiveInnerObject","TestRecursiveInnerObject(final int n)","0","-","-","-","-"
"4678","getN","public int getN()","0","-","-","-","-"
"4679","TestRecursiveObject","TestRecursiveObject(final TestRecursiveInnerObject a,
                            final TestRecursiveInnerObject b, final int z)","0","-","-","-","-"
"4680","getA","public TestRecursiveInnerObject getA()","0","-","-","-","-"
"4681","getB","public TestRecursiveInnerObject getB()","0","-","-","-","-"
"4682","getZ","public int getZ()","0","-","-","-","-"
"4683","TestSubObject","TestSubObject()","0","-","-","-","-"
"4684","TestSubObject","TestSubObject(final int a, final int b)","0","-","-","-","-"
"4685","equals","@Override
        public boolean equals(final Object o)","0","-","-","-","-"
"4686","getB","public int getB()","0","-","-","-","-"
"4687","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"4688","setB","public void setB(final int b)","0","-","-","-","-"
"4689","TestTSubObject","TestTSubObject(final int a, final int t)","0","-","-","-","-"
"4690","TestTSubObject2","TestTSubObject2(final int a, final int t)","0","-","-","-","-"
"4691","getT","public int getT()","0","-","-","-","-"
"4692","setT","public void setT(final int t)","0","-","-","-","-"
"4693","TestTTLeafObject","TestTTLeafObject(final int a, final int t, final int tt, final int leafValue)","0","-","-","-","-"
"4694","TestTTSubObject","TestTTSubObject(final int a, final int t, final int tt)","0","-","-","-","-"
"4695","testAccessors","@Test
    public void testAccessors()","0","-","-","-","-"
"4696","testBigDecimal","@Test
    public void testBigDecimal()","0","-","-","-","-"
"4697","testBigDecimalNotEq","private void testBigDecimalNotEq(final BigDecimal o1, final BigDecimal o2)","0","-","-","-","-"
"4698","testBigInteger","@Test
    public void testBigInteger()","0","-","-","-","-"
"4699","testBoolean","@Test
    public void testBoolean()","0","-","-","-","-"
"4700","testBooleanArray","@Test
    public void testBooleanArray()","0","-","-","-","-"
"4701","testBooleanArrayHiddenByObject","@Test
    public void testBooleanArrayHiddenByObject()","0","-","-","-","-"
"4702","testByte","@Test
    public void testByte()","0","-","-","-","-"
"4703","testByteArray","@Test
    public void testByteArray()","0","-","-","-","-"
"4704","testByteArrayHiddenByObject","@Test
    public void testByteArrayHiddenByObject()","0","-","-","-","-"
"4705","testChar","@Test
    public void testChar()","0","-","-","-","-"
"4706","testCharArray","@Test
    public void testCharArray()","0","-","-","-","-"
"4707","testCharArrayHiddenByObject","@Test
    public void testCharArrayHiddenByObject()","0","-","-","-","-"
"4708","testCyclicalObjectReferences","/**
     * Test cyclical object references which cause a StackOverflowException if
     * not handled properly. s. LANG-606
     */
    @Test
    public void testCyclicalObjectReferences()","0","-","-","-","-"
"4709","testDouble","@Test
    public void testDouble()","0","-","-","-","-"
"4710","testDoubleArray","@Test
    public void testDoubleArray()","0","-","-","-","-"
"4711","testDoubleArrayHiddenByObject","@Test
    public void testDoubleArrayHiddenByObject()","0","-","-","-","-"
"4712","testFloat","@Test
    public void testFloat()","0","-","-","-","-"
"4713","testFloatArray","@Test
    public void testFloatArray()","0","-","-","-","-"
"4714","testFloatArrayHiddenByObject","@Test
    public void testFloatArrayHiddenByObject()","0","-","-","-","-"
"4715","testInt","@Test
    public void testInt()","0","-","-","-","-"
"4716","testIntArray","@Test
    public void testIntArray()","0","-","-","-","-"
"4717","testIntArrayHiddenByObject","@Test
    public void testIntArrayHiddenByObject()","0","-","-","-","-"
"4718","testIsRegistered","@Test
    public void testIsRegistered() throws Exception","0","-","-","-","-"
"4719","testLong","@Test
    public void testLong()","0","-","-","-","-"
"4720","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"4721","testLongArrayHiddenByObject","@Test
    public void testLongArrayHiddenByObject()","0","-","-","-","-"
"4722","testMixedArray","@Test
    public void testMixedArray()","0","-","-","-","-"
"4723","testMultiBooleanArray","@Test
    public void testMultiBooleanArray()","0","-","-","-","-"
"4724","testMultiByteArray","@Test
    public void testMultiByteArray()","0","-","-","-","-"
"4725","testMultiCharArray","@Test
    public void testMultiCharArray()","0","-","-","-","-"
"4726","testMultiDoubleArray","@Test
    public void testMultiDoubleArray()","0","-","-","-","-"
"4727","testMultiFloatArray","@Test
    public void testMultiFloatArray()","0","-","-","-","-"
"4728","testMultiIntArray","@Test
    public void testMultiIntArray()","0","-","-","-","-"
"4729","testMultiLongArray","@Test
    public void testMultiLongArray()","0","-","-","-","-"
"4730","testMultiShortArray","@Test
    public void testMultiShortArray()","0","-","-","-","-"
"4731","testNpeForNullElement","/**
     * Test from https://issues.apache.org/jira/browse/LANG-42
     */
    @Test
    public void testNpeForNullElement()","0","-","-","-","-"
"4732","testObject","@Test
    public void testObject()","0","-","-","-","-"
"4733","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"4734","testObjectArrayHiddenByObject","@Test
    public void testObjectArrayHiddenByObject()","0","-","-","-","-"
"4735","testObjectBuild","@Test
    public void testObjectBuild()","0","-","-","-","-"
"4736","testObjectRecursive","@Test
    public void testObjectRecursive()","0","-","-","-","-"
"4737","testObjectRecursiveCycle","@Test
    public void testObjectRecursiveCycle()","0","-","-","-","-"
"4738","testObjectRecursiveCycleSelfreference","@Test
    public void testObjectRecursiveCycleSelfreference()","0","-","-","-","-"
"4739","testObjectRecursiveGenericInteger","@Test
    public void testObjectRecursiveGenericInteger()","0","-","-","-","-"
"4740","testObjectRecursiveGenericString","@Test
    public void testObjectRecursiveGenericString()","0","-","-","-","-"
"4741","testObjectsBypassReflectionClasses","@Test
    public void testObjectsBypassReflectionClasses()","0","-","-","-","-"
"4742","testRaggedArray","@Test
    public void testRaggedArray()","0","-","-","-","-"
"4743","testReflectionAppend","@Test
    public void testReflectionAppend()","0","-","-","-","-"
"4744","testReflectionArrays","@Test
    public void testReflectionArrays()","0","-","-","-","-"
"4745","testReflectionEquals","@Test
    public void testReflectionEquals()","0","-","-","-","-"
"4746","testReflectionEqualsEquivalenceRelationship","/**
     * Equivalence relationship tests inspired by ""Effective Java"":
     * <ul>
     * <li>reflection</li>
     * <li>symmetry</li>
     * <li>transitive</li>
     * <li>consistency</li>
     * <li>non-null reference</li>
     * </ul>
     *
     * @param to             a TestObject
     * @param toBis          a TestObject, equal to to and toTer
     * @param toTer          left-hand side side, equal to to and toBis
     * @param to2            a different TestObject
     * @param oToChange      a TestObject that will be changed
     * @param testTransients whether to test transient instance variables
     */
    private void testReflectionEqualsEquivalenceRelationship(
            final TestObject to,
            final TestObject toBis,
            final TestObject toTer,
            final TestObject to2,
            final TestObject oToChange,
            final boolean testTransients)","0","-","-","-","-"
"4747","testReflectionEqualsExcludeFields","@Test
    public void testReflectionEqualsExcludeFields()","0","-","-","-","-"
"4748","testReflectionHierarchyEquals","@Test
    public void testReflectionHierarchyEquals()","0","-","-","-","-"
"4749","testReflectionHierarchyEquals","private void testReflectionHierarchyEquals(final boolean testTransients)","0","-","-","-","-"
"4750","testReset","@Test
    public void testReset()","0","-","-","-","-"
"4751","testShort","@Test
    public void testShort()","0","-","-","-","-"
"4752","testShortArray","@Test
    public void testShortArray()","0","-","-","-","-"
"4753","testShortArrayHiddenByObject","@Test
    public void testShortArrayHiddenByObject()","0","-","-","-","-"
"4754","testSuper","@Test
    public void testSuper()","0","-","-","-","-"
"4755","testToEqualsExclude","@Test
    public void testToEqualsExclude()","0","-","-","-","-"
"4756","testUnrelatedClasses","/**
     * Tests two instances of classes that can be equal and that are not ""related"". The two classes are not subclasses
     * of each other and do not share a parent aside from Object.
     * See https://issues.apache.org/jira/browse/LANG-6
     */
    @Test
    public void testUnrelatedClasses()","0","-","-","-","-"
"4757","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"4758","tearDown","@AfterEach
    public void tearDown()","0","-","-","-","-"
"4759","testAppendSuper","@Test
    public void testAppendSuper()","0","-","-","-","-"
"4760","testArray","@Test
    public void testArray()","0","-","-","-","-"
"4761","testBlank","@Test
    public void testBlank()","0","-","-","-","-"
"4762","testCollection","@Test
    public void testCollection()","0","-","-","-","-"
"4763","testLong","@Test
    public void testLong()","0","-","-","-","-"
"4764","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"4765","testLongArrayArray","@Test
    public void testLongArrayArray()","0","-","-","-","-"
"4766","testMap","@Test
    public void testMap()","0","-","-","-","-"
"4767","testObject","@Test
    public void testObject()","0","-","-","-","-"
"4768","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"4769","testPerson","@Test
    public void testPerson()","0","-","-","-","-"
"4770","CollectionHolder","CollectionHolder(final T collection)","0","-","-","-","-"
"4771","testArrayList","@Test
    @Disabled
    public void testArrayList() throws InterruptedException","0","-","-","-","-"
"4772","testConcurrency","private void testConcurrency(final CollectionHolder<List<Integer>> holder) throws InterruptedException","0","-","-","-","-"
"4773","testCopyOnWriteArrayList","@Test
    @Disabled
    public void testCopyOnWriteArrayList() throws InterruptedException","0","-","-","-","-"
"4774","testLinkedList","@Test
    @Disabled
    public void testLinkedList() throws InterruptedException","0","-","-","-","-"
"4775","test_toStringExclude","@Test
    public void test_toStringExclude()","0","-","-","-","-"
"4776","InspectingClient","InspectingClient(final TestFixture testFixture)","0","-","-","-","-"
"4777","run","@Override
        public void run()","0","-","-","-","-"
"4778","MutatingClient","MutatingClient(final TestFixture testFixture)","0","-","-","-","-"
"4779","run","@Override
        public void run()","0","-","-","-","-"
"4780","TestFixture","TestFixture()","0","-","-","-","-"
"4781","add","public synchronized void add()","0","-","-","-","-"
"4782","delete","public synchronized void delete()","0","-","-","-","-"
"4783","testConcurrency","@Test
    @Disabled
    public void testConcurrency()","0","-","-","-","-"
"4784","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"4785","tearDown","@AfterEach
    public void tearDown()","0","-","-","-","-"
"4786","testAppendSuper","@Test
    public void testAppendSuper()","0","-","-","-","-"
"4787","testBlank","@Test
    public void testBlank()","0","-","-","-","-"
"4788","testLong","@Test
    public void testLong()","0","-","-","-","-"
"4789","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"4790","testLongArrayArray","@Test
    public void testLongArrayArray()","0","-","-","-","-"
"4791","testObject","@Test
    public void testObject()","0","-","-","-","-"
"4792","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"4793","testPerson","@Test
    public void testPerson()","0","-","-","-","-"
"4794","test_toStringExclude","@Test
    public void test_toStringExclude()","0","-","-","-","-"
"4795","test_toStringExcludeArray","@Test
    public void test_toStringExcludeArray()","0","-","-","-","-"
"4796","test_toStringExcludeArrayWithNull","@Test
    public void test_toStringExcludeArrayWithNull()","0","-","-","-","-"
"4797","test_toStringExcludeArrayWithNulls","@Test
    public void test_toStringExcludeArrayWithNulls()","0","-","-","-","-"
"4798","test_toStringExcludeCollection","@Test
    public void test_toStringExcludeCollection()","0","-","-","-","-"
"4799","test_toStringExcludeCollectionWithNull","@Test
    public void test_toStringExcludeCollectionWithNull()","0","-","-","-","-"
"4800","test_toStringExcludeCollectionWithNulls","@Test
    public void test_toStringExcludeCollectionWithNulls()","0","-","-","-","-"
"4801","test_toStringExcludeEmptyArray","@Test
    public void test_toStringExcludeEmptyArray()","0","-","-","-","-"
"4802","test_toStringExcludeEmptyCollection","@Test
    public void test_toStringExcludeEmptyCollection()","0","-","-","-","-"
"4803","test_toStringExcludeNullArray","@Test
    public void test_toStringExcludeNullArray()","0","-","-","-","-"
"4804","test_toStringExcludeNullCollection","@Test
    public void test_toStringExcludeNullCollection()","0","-","-","-","-"
"4805","validateNonSecretField","private void validateNonSecretField(final String toString)","0","-","-","-","-"
"4806","validateSecretFieldAbsent","private void validateSecretFieldAbsent(final String toString)","0","-","-","-","-"
"4807","validateSecretFieldPresent","private void validateSecretFieldPresent(final String toString)","0","-","-","-","-"
"4808","diff","@Override
        public DiffResult<TypeTestClass> diff(final TypeTestClass obj)","0","-","-","-","-"
"4809","diffBuilder","DiffBuilder<TypeTestClass> diffBuilder(final TypeTestClass obj)","0","-","-","-","-"
"4810","diffDeprecated","public DiffResult<TypeTestClass> diffDeprecated(final TypeTestClass obj)","0","-","-","-","-"
"4811","equals","@Override
        public boolean equals(final Object obj)","0","-","-","-","-"
"4812","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"4813","testArrayDifference","@Test
    public void testArrayDifference()","0","-","-","-","-"
"4814","testBigDecimalDifference","@Test
    public void testBigDecimalDifference()","0","-","-","-","-"
"4815","testBigIntegerDifference","@Test
    public void testBigIntegerDifference()","0","-","-","-","-"
"4816","testDifferenceInInherited_field","@Test
    public void testDifferenceInInherited_field()","0","-","-","-","-"
"4817","testGetExcludeFieldNamesWithNullExcludedFieldNames","@Test
    public void testGetExcludeFieldNamesWithNullExcludedFieldNames()","0","-","-","-","-"
"4818","testGetExcludeFieldNamesWithNullExcludedFieldNamesCtor","@Test
    public void testGetExcludeFieldNamesWithNullExcludedFieldNamesCtor()","0","-","-","-","-"
"4819","testGetExcludeFieldNamesWithNullValuesInExcludedFieldNames","@Test
    public void testGetExcludeFieldNamesWithNullValuesInExcludedFieldNames()","0","-","-","-","-"
"4820","testGetExcludeFieldNamesWithNullValuesInExcludedFieldNamesCtor","@Test
    public void testGetExcludeFieldNamesWithNullValuesInExcludedFieldNamesCtor()","0","-","-","-","-"
"4821","testNoDifferences","@Test
    public void testNoDifferences()","0","-","-","-","-"
"4822","testRetention","@Test
    public void testRetention() throws Exception","0","-","-","-","-"
"4823","testNoDifferencesDiffExcludeAnnotatedField","@Test
    public void testNoDifferencesDiffExcludeAnnotatedField()","0","-","-","-","-"
"4824","testNoDifferencesDiffExcludedFieldAndExcludeAnnotatedField","@Test
    public void testNoDifferencesDiffExcludedFieldAndExcludeAnnotatedField()","0","-","-","-","-"
"4825","testNoDifferencesExcludedField","@Test
    public void testNoDifferencesExcludedField()","0","-","-","-","-"
"4826","testNoDifferencesInheritance","@Test
    public void testNoDifferencesInheritance()","0","-","-","-","-"
"4827","testPrimitiveDifference","@Test
    public void testPrimitiveDifference()","0","-","-","-","-"
"4828","testTransientFieldDifference","@Test
    public void testTransientFieldDifference()","0","-","-","-","-"
"4829","testSummary","@Test
    public void testSummary()","0","-","-","-","-"
"4830","testConstructorWithNullObject","@Test
    public void testConstructorWithNullObject()","0","-","-","-","-"
"4831","equals","@Override
        public boolean equals(final Object o)","0","-","-","-","-"
"4832","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"4833","equals","@Override
        public boolean equals(final Object o)","0","-","-","-","-"
"4834","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"4835","TestObject","TestObject(final int a)","0","-","-","-","-"
"4836","equals","@Override
        public boolean equals(final Object o)","0","-","-","-","-"
"4837","getA","public int getA()","0","-","-","-","-"
"4838","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"4839","setA","public void setA(final int a)","0","-","-","-","-"
"4840","TestObjectHashCodeExclude","TestObjectHashCodeExclude(final int a, final int b)","0","-","-","-","-"
"4841","getA","public int getA()","0","-","-","-","-"
"4842","getB","public int getB()","0","-","-","-","-"
"4843","TestObjectHashCodeExclude2","TestObjectHashCodeExclude2(final int a, final int b)","0","-","-","-","-"
"4844","getA","public int getA()","0","-","-","-","-"
"4845","getB","public int getB()","0","-","-","-","-"
"4846","TestObjectWithMultipleFields","TestObjectWithMultipleFields(final int one, final int two, final int three)","0","-","-","-","-"
"4847","TestSubObject","TestSubObject()","0","-","-","-","-"
"4848","TestSubObject","TestSubObject(final int a, final int b, final int t)","0","-","-","-","-"
"4849","equals","@Override
        public boolean equals(final Object o)","0","-","-","-","-"
"4850","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"4851","testBoolean","@Test
    public void testBoolean()","0","-","-","-","-"
"4852","testBooleanArray","@Test
    public void testBooleanArray()","0","-","-","-","-"
"4853","testBooleanArrayAsObject","@Test
    public void testBooleanArrayAsObject()","0","-","-","-","-"
"4854","testBooleanMultiArray","@Test
    public void testBooleanMultiArray()","0","-","-","-","-"
"4855","testByte","@Test
    public void testByte()","0","-","-","-","-"
"4856","testByteArray","@Test
    public void testByteArray()","0","-","-","-","-"
"4857","testByteArrayAsObject","@Test
    public void testByteArrayAsObject()","0","-","-","-","-"
"4858","testChar","@Test
    public void testChar()","0","-","-","-","-"
"4859","testCharArray","@Test
    public void testCharArray()","0","-","-","-","-"
"4860","testCharArrayAsObject","@Test
    public void testCharArrayAsObject()","0","-","-","-","-"
"4861","testConstructorExEvenFirst","@Test
    public void testConstructorExEvenFirst()","0","-","-","-","-"
"4862","testConstructorExEvenNegative","@Test
    public void testConstructorExEvenNegative()","0","-","-","-","-"
"4863","testConstructorExEvenSecond","@Test
    public void testConstructorExEvenSecond()","0","-","-","-","-"
"4864","testConstructorExZero","@Test
    public void testConstructorExZero()","0","-","-","-","-"
"4865","testDouble","@Test
    public void testDouble()","0","-","-","-","-"
"4866","testDoubleArray","@Test
    public void testDoubleArray()","0","-","-","-","-"
"4867","testDoubleArrayAsObject","@Test
    public void testDoubleArrayAsObject()","0","-","-","-","-"
"4868","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"4869","testFloat","@Test
    public void testFloat()","0","-","-","-","-"
"4870","testFloatArray","@Test
    public void testFloatArray()","0","-","-","-","-"
"4871","testFloatArrayAsObject","@Test
    public void testFloatArrayAsObject()","0","-","-","-","-"
"4872","testInt","@Test
    public void testInt()","0","-","-","-","-"
"4873","testIntArray","@Test
    public void testIntArray()","0","-","-","-","-"
"4874","testIntArrayAsObject","@Test
    public void testIntArrayAsObject()","0","-","-","-","-"
"4875","testLong","@Test
    public void testLong()","0","-","-","-","-"
"4876","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"4877","testLongArrayAsObject","@Test
    public void testLongArrayAsObject()","0","-","-","-","-"
"4878","testObject","@Test
    public void testObject()","0","-","-","-","-"
"4879","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"4880","testObjectArrayAsObject","@Test
    public void testObjectArrayAsObject()","0","-","-","-","-"
"4881","testObjectBuild","@Test
    public void testObjectBuild()","0","-","-","-","-"
"4882","testReflectionHashCode","@Test
    public void testReflectionHashCode()","0","-","-","-","-"
"4883","testReflectionHashCodeEx1","@Test
    public void testReflectionHashCodeEx1()","0","-","-","-","-"
"4884","testReflectionHashCodeEx2","@Test
    public void testReflectionHashCodeEx2()","0","-","-","-","-"
"4885","testReflectionHashCodeEx3","@Test
    public void testReflectionHashCodeEx3()","0","-","-","-","-"
"4886","testReflectionHashCodeExcludeFields","@Test
    public void testReflectionHashCodeExcludeFields()","0","-","-","-","-"
"4887","testReflectionHierarchyHashCode","@Test
    public void testReflectionHierarchyHashCode()","0","-","-","-","-"
"4888","testReflectionHierarchyHashCodeEx1","@Test
    public void testReflectionHierarchyHashCodeEx1()","0","-","-","-","-"
"4889","testReflectionHierarchyHashCodeEx2","@Test
    public void testReflectionHierarchyHashCodeEx2()","0","-","-","-","-"
"4890","testReflectionObjectCycle","/**
     * Test Objects pointing to each other.
     */
    @Test
    public void testReflectionObjectCycle()","0","-","-","-","-"
"4891","testShort","@Test
    public void testShort()","0","-","-","-","-"
"4892","testShortArray","@Test
    public void testShortArray()","0","-","-","-","-"
"4893","testShortArrayAsObject","@Test
    public void testShortArrayAsObject()","0","-","-","-","-"
"4894","testSuper","@Test
    public void testSuper()","0","-","-","-","-"
"4895","testToHashCodeEqualsHashCode","/**
     * Ensures LANG-520 remains true
     */
    @Test
    public void testToHashCodeEqualsHashCode()","0","-","-","-","-"
"4896","testToHashCodeExclude","@Test
    public void testToHashCodeExclude()","0","-","-","-","-"
"4897","toString","@Override
        public String toString()","0","-","-","-","-"
"4898","toString","@Override
        public String toString()","0","-","-","-","-"
"4899","toString","@Override
            public String toString()","0","-","-","-","-"
"4900","toString","@Override
        public String toString()","0","-","-","-","-"
"4901","toString","@Override
        public String toString()","0","-","-","-","-"
"4902","toString","@Override
        public String toString()","0","-","-","-","-"
"4903","SelfInstanceTwoVarsReflectionTestFixture","SelfInstanceTwoVarsReflectionTestFixture()","0","-","-","-","-"
"4904","getOtherType","public String getOtherType()","0","-","-","-","-"
"4905","toString","@Override
        public String toString()","0","-","-","-","-"
"4906","SelfInstanceVarReflectionTestFixture","SelfInstanceVarReflectionTestFixture()","0","-","-","-","-"
"4907","toString","@Override
        public String toString()","0","-","-","-","-"
"4908","SimpleReflectionTestFixture","SimpleReflectionTestFixture()","0","-","-","-","-"
"4909","SimpleReflectionTestFixture","SimpleReflectionTestFixture(final Object o)","0","-","-","-","-"
"4910","toString","@Override
        public String toString()","0","-","-","-","-"
"4911","assertReflectionArray","public void assertReflectionArray(final String expected, final Object actual)","0","-","-","-","-"
"4912","test_setUpToClass_invalid","/**
     * Tests ReflectionToStringBuilder setUpToClass().
     */
    @Test
    public void test_setUpToClass_invalid()","0","-","-","-","-"
"4913","test_setUpToClass_valid","/**
     * Tests ReflectionToStringBuilder setUpToClass().
     */
    @Test
    public void test_setUpToClass_valid()","0","-","-","-","-"
"4914","testAppendAsObjectToString","@Test
    public void testAppendAsObjectToString()","0","-","-","-","-"
"4915","testAppendAsObjectToStringNullPointerException","@Test
    public void testAppendAsObjectToStringNullPointerException()","0","-","-","-","-"
"4916","testAppendBooleanArrayWithFieldName","@Test
    public void testAppendBooleanArrayWithFieldName()","0","-","-","-","-"
"4917","testAppendBooleanArrayWithFieldNameAndFullDetail","@Test
    public void testAppendBooleanArrayWithFieldNameAndFullDetail()","0","-","-","-","-"
"4918","testAppendByteArrayWithFieldName","@Test
    public void testAppendByteArrayWithFieldName()","0","-","-","-","-"
"4919","testAppendByteArrayWithFieldNameAndFullDetail","@Test
    public void testAppendByteArrayWithFieldNameAndFullDetail()","0","-","-","-","-"
"4920","testAppendCharArrayWithFieldName","@Test
    public void testAppendCharArrayWithFieldName()","0","-","-","-","-"
"4921","testAppendCharArrayWithFieldNameAndFullDetail","@Test
    public void testAppendCharArrayWithFieldNameAndFullDetail()","0","-","-","-","-"
"4922","testAppendDoubleArrayWithFieldName","@Test
    public void testAppendDoubleArrayWithFieldName()","0","-","-","-","-"
"4923","testAppendDoubleArrayWithFieldNameAndFullDetail","@Test
    public void testAppendDoubleArrayWithFieldNameAndFullDetail()","0","-","-","-","-"
"4924","testAppendFloatArrayWithFieldName","@Test
    public void testAppendFloatArrayWithFieldName()","0","-","-","-","-"
"4925","testAppendFloatArrayWithFieldNameAndFullDetail","@Test
    public void testAppendFloatArrayWithFieldNameAndFullDetail()","0","-","-","-","-"
"4926","testAppendIntArrayWithFieldName","@Test
    public void testAppendIntArrayWithFieldName()","0","-","-","-","-"
"4927","testAppendIntArrayWithFieldNameAndFullDetail","@Test
    public void testAppendIntArrayWithFieldNameAndFullDetail()","0","-","-","-","-"
"4928","testAppendLongArrayWithFieldName","@Test
    public void testAppendLongArrayWithFieldName()","0","-","-","-","-"
"4929","testAppendLongArrayWithFieldNameAndFullDetail","@Test
    public void testAppendLongArrayWithFieldNameAndFullDetail()","0","-","-","-","-"
"4930","testAppendObjectArrayWithFieldName","@Test
    public void testAppendObjectArrayWithFieldName()","0","-","-","-","-"
"4931","testAppendObjectArrayWithFieldNameAndFullDetail","@Test
    public void testAppendObjectArrayWithFieldNameAndFullDetail()","0","-","-","-","-"
"4932","testAppendShortArrayWithFieldName","@Test
    public void testAppendShortArrayWithFieldName()","0","-","-","-","-"
"4933","testAppendShortArrayWithFieldNameAndFullDetail","@Test
    public void testAppendShortArrayWithFieldNameAndFullDetail()","0","-","-","-","-"
"4934","testAppendSuper","@Test
    public void testAppendSuper()","0","-","-","-","-"
"4935","testAppendToString","@Test
    public void testAppendToString()","0","-","-","-","-"
"4936","testAppendToStringUsingMultiLineStyle","@Test
    public void testAppendToStringUsingMultiLineStyle()","0","-","-","-","-"
"4937","testBlank","@Test
    public void testBlank()","0","-","-","-","-"
"4938","testBoolean","@Test
    public void testBoolean()","0","-","-","-","-"
"4939","testBooleanArray","@Test
    public void testBooleanArray()","0","-","-","-","-"
"4940","testBooleanArrayArray","@Test
    public void testBooleanArrayArray()","0","-","-","-","-"
"4941","testByte","@Test
    public void testByte()","0","-","-","-","-"
"4942","testByteArray","@Test
    public void testByteArray()","0","-","-","-","-"
"4943","testByteArrayArray","@Test
    public void testByteArrayArray()","0","-","-","-","-"
"4944","testChar","@Test
    public void testChar()","0","-","-","-","-"
"4945","testCharArray","@Test
    public void testCharArray()","0","-","-","-","-"
"4946","testCharArrayArray","@Test
    public void testCharArrayArray()","0","-","-","-","-"
"4947","testConstructorEx1","@Test
    public void testConstructorEx1()","0","-","-","-","-"
"4948","testConstructorEx2","@Test
    public void testConstructorEx2()","0","-","-","-","-"
"4949","testConstructorEx3","@Test
    public void testConstructorEx3()","0","-","-","-","-"
"4950","testConstructToStringBuilder","@Test
    public void testConstructToStringBuilder()","0","-","-","-","-"
"4951","testDouble","@Test
    public void testDouble()","0","-","-","-","-"
"4952","testDoubleArray","@Test
    public void testDoubleArray()","0","-","-","-","-"
"4953","testDoubleArrayArray","@Test
    public void testDoubleArrayArray()","0","-","-","-","-"
"4954","testFloat","@Test
    public void testFloat()","0","-","-","-","-"
"4955","testFloatArray","@Test
    public void testFloatArray()","0","-","-","-","-"
"4956","testFloatArrayArray","@Test
    public void testFloatArrayArray()","0","-","-","-","-"
"4957","testGetSetDefault","@Test
    public void testGetSetDefault()","0","-","-","-","-"
"4958","testInheritedReflectionStatics","/**
     * Tests ReflectionToStringBuilder.toString() for statics.
     */
    @Test
    public void testInheritedReflectionStatics()","0","-","-","-","-"
"4959","testInnerClassReflection","@Test
    public void testInnerClassReflection()","0","-","-","-","-"
"4960","testInt","@Test
    public void testInt()","0","-","-","-","-"
"4961","testIntArray","@Test
    public void testIntArray()","0","-","-","-","-"
"4962","testIntArrayArray","@Test
    public void testIntArrayArray()","0","-","-","-","-"
"4963","testLong","@Test
    public void testLong()","0","-","-","-","-"
"4964","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"4965","testLongArrayArray","@Test
    public void testLongArrayArray()","0","-","-","-","-"
"4966","testObject","@Test
    public void testObject()","0","-","-","-","-"
"4967","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"4968","testObjectBuild","@Test
    public void testObjectBuild()","0","-","-","-","-"
"4969","testObjectCycle","@Test
    public void testObjectCycle()","0","-","-","-","-"
"4970","testReflectionArrayAndObjectCycle","/**
     * Test a nasty combination of arrays and Objects pointing to each other. objects[0] -&gt; SimpleReflectionTestFixture[ o -&gt; objects ]
     */
    @Test
    public void testReflectionArrayAndObjectCycle()","0","-","-","-","-"
"4971","testReflectionArrayArrayCycle","@Test
    public void testReflectionArrayArrayCycle()","0","-","-","-","-"
"4972","testReflectionArrayCycle","/**
     * Test an array element pointing to its container.
     */
    @Test
    public void testReflectionArrayCycle()","0","-","-","-","-"
"4973","testReflectionArrayCycleLevel2","/**
     * Test an array element pointing to its container.
     */
    @Test
    public void testReflectionArrayCycleLevel2()","0","-","-","-","-"
"4974","testReflectionBoolean","/**
     * Test wrapper for char boolean.
     */
    @Test
    public void testReflectionBoolean()","0","-","-","-","-"
"4975","testReflectionBooleanArray","@Test
    public void testReflectionBooleanArray()","0","-","-","-","-"
"4976","testReflectionBooleanArrayArray","@Test
    public void testReflectionBooleanArrayArray()","0","-","-","-","-"
"4977","testReflectionByteArray","@Test
    public void testReflectionByteArray()","0","-","-","-","-"
"4978","testReflectionByteArrayArray","@Test
    public void testReflectionByteArrayArray()","0","-","-","-","-"
"4979","testReflectionCharacter","/**
     * Test wrapper for char primitive.
     */
    @Test
    public void testReflectionCharacter()","0","-","-","-","-"
"4980","testReflectionCharArray","@Test
    public void testReflectionCharArray()","0","-","-","-","-"
"4981","testReflectionCharArrayArray","@Test
    public void testReflectionCharArrayArray()","0","-","-","-","-"
"4982","testReflectionDoubleArray","@Test
    public void testReflectionDoubleArray()","0","-","-","-","-"
"4983","testReflectionDoubleArrayArray","@Test
    public void testReflectionDoubleArrayArray()","0","-","-","-","-"
"4984","testReflectionFloatArray","@Test
    public void testReflectionFloatArray()","0","-","-","-","-"
"4985","testReflectionFloatArrayArray","@Test
    public void testReflectionFloatArrayArray()","0","-","-","-","-"
"4986","testReflectionHierarchy","@Test
    public void testReflectionHierarchy()","0","-","-","-","-"
"4987","testReflectionHierarchyArrayList","@Test
    public void testReflectionHierarchyArrayList()","0","-","-","-","-"
"4988","testReflectionIntArray","@Test
    public void testReflectionIntArray()","0","-","-","-","-"
"4989","testReflectionIntArrayArray","@Test
    public void testReflectionIntArrayArray()","0","-","-","-","-"
"4990","testReflectionInteger","/**
     * Test wrapper for int primitive.
     */
    @Test
    public void testReflectionInteger()","0","-","-","-","-"
"4991","testReflectionLongArray","@Test
    public void testReflectionLongArray()","0","-","-","-","-"
"4992","testReflectionLongArrayArray","@Test
    public void testReflectionLongArrayArray()","0","-","-","-","-"
"4993","testReflectionNull","@Test
    public void testReflectionNull()","0","-","-","-","-"
"4994","testReflectionObjectArray","@Test
    public void testReflectionObjectArray()","0","-","-","-","-"
"4995","testReflectionObjectCycle","/**
     * Test Objects pointing to each other.
     */
    @Test
    public void testReflectionObjectCycle()","0","-","-","-","-"
"4996","testReflectionShort2DArray","@Test
    public void testReflectionShort2DArray()","0","-","-","-","-"
"4997","testReflectionShortArray","@Test
    public void testReflectionShortArray()","0","-","-","-","-"
"4998","testReflectionStatics","/**
     * Tests ReflectionToStringBuilder.toString() for statics.
     */
    @Test
    public void testReflectionStatics()","0","-","-","-","-"
"4999","testSelfInstanceTwoVarsReflectionObjectCycle","/**
     * Test a class that defines an ivar pointing to itself. This test was created to show that handling cyclical object resulted in a missing endFieldSeparator
     * call.
     */
    @Test
    public void testSelfInstanceTwoVarsReflectionObjectCycle()","0","-","-","-","-"
"5000","testSelfInstanceVarReflectionObjectCycle","/**
     * Test a class that defines an ivar pointing to itself.
     */
    @Test
    public void testSelfInstanceVarReflectionObjectCycle()","0","-","-","-","-"
"5001","testSetDefaultEx","@Test
    public void testSetDefaultEx()","0","-","-","-","-"
"5002","testShort","@Test
    public void testShort()","0","-","-","-","-"
"5003","testShortArray","@Test
    public void testShortArray()","0","-","-","-","-"
"5004","testShortArrayArray","@Test
    public void testShortArrayArray()","0","-","-","-","-"
"5005","testSimpleReflectionObjectCycle","/**
     * Test an Object pointing to itself, the simplest test.
     */
    @Test
    public void testSimpleReflectionObjectCycle()","0","-","-","-","-"
"5006","testSimpleReflectionStatics","@Test
    public void testSimpleReflectionStatics()","0","-","-","-","-"
"5007","toBaseString","/**
     * Create the same toString() as Object.toString().
     *
     * @param o the object to create the string for.
     * @return a String in the Object.toString format.
     */
    private String toBaseString(final Object o)","0","-","-","-","-"
"5008","toStringWithStatics","/**
     * This method uses reflection to build a suitable","0","-","-","-","-"
"5009","AllTransientFixture","AllTransientFixture(final int i, final char c, final String string, final short s)","0","-","-","-","-"
"5010","SubAllTransientFixture","SubAllTransientFixture(final int i, final char c, final String string, final short s, final String tString)","0","-","-","-","-"
"5011","SubTestFixture","SubTestFixture(final int i, final char c, final String string, final short s, final String tString)","0","-","-","-","-"
"5012","TestFixture","TestFixture(final int i, final char c, final String string, final short s)","0","-","-","-","-"
"5013","assertEqualsAndHashCodeContract","/**
     * Asserts that if","0","-","-","-","-"
"5014","testFixture","@Test
    public void testFixture()","0","-","-","-","-"
"5015","testFixture","private void testFixture(final boolean testTransients)","0","-","-","-","-"
"5016","testFixtureWithTransients","@Test
    public void testFixtureWithTransients()","0","-","-","-","-"
"5017","testInteger","@Test
    public void testInteger()","0","-","-","-","-"
"5018","testInteger","private void testInteger(final boolean testTransients)","0","-","-","-","-"
"5019","testIntegerWithTransients","@Test
    public void testIntegerWithTransients()","0","-","-","-","-"
"5020","testRetention","@Test
    public void testRetention() throws Exception","0","-","-","-","-"
"5021","BooleanDiff","protected BooleanDiff(final String fieldName)","0","-","-","-","-"
"5022","getLeft","@Override
        public Boolean getLeft()","0","-","-","-","-"
"5023","getRight","@Override
        public Boolean getRight()","0","-","-","-","-"
"5024","testCannotModify","@Test
    public void testCannotModify()","0","-","-","-","-"
"5025","testGetFieldName","@Test
    public void testGetFieldName()","0","-","-","-","-"
"5026","testGetType","@Test
    public void testGetType()","0","-","-","-","-"
"5027","testToString","@Test
    public void testToString()","0","-","-","-","-"
"5028","TestObject","TestObject(final int a)","0","-","-","-","-"
"5029","compareTo","@Override
        public int compareTo(final TestObject rhs)","0","-","-","-","-"
"5030","equals","@Override
        public boolean equals(final Object o)","0","-","-","-","-"
"5031","getA","public int getA()","0","-","-","-","-"
"5032","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"5033","setA","public void setA(final int a)","0","-","-","-","-"
"5034","TestSubObject","TestSubObject()","0","-","-","-","-"
"5035","TestSubObject","TestSubObject(final int a, final int b)","0","-","-","-","-"
"5036","equals","@Override
        public boolean equals(final Object o)","0","-","-","-","-"
"5037","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"5038","TestTransientSubObject","TestTransientSubObject(final int a, final int t)","0","-","-","-","-"
"5039","assertReflectionCompareContract","/**
     * See ""Effective Java"" under ""Consider Implementing Comparable"".
     *
     * @param x an object to compare
     * @param y an object to compare
     * @param z an object to compare
     * @param testTransients Whether to include transients in the comparison
     * @param excludeFields fields to exclude
     */
    private void assertReflectionCompareContract(final Object x, final Object y, final Object z, final boolean testTransients, final String[] excludeFields)","0","-","-","-","-"
"5040","assertXYZCompareOrder","private void assertXYZCompareOrder(final Object x, final Object y, final Object z, final boolean testTransients, final String[] excludeFields)","0","-","-","-","-"
"5041","reflectionCompareSignum","/**
     * Returns the signum of the result of comparing x and y with
     *","0","-","-","-","-"
"5042","testAppendSuper","@Test
    public void testAppendSuper()","0","-","-","-","-"
"5043","testBoolean","@Test
    public void testBoolean()","0","-","-","-","-"
"5044","testBooleanArray","@Test
    public void testBooleanArray()","0","-","-","-","-"
"5045","testBooleanArrayHiddenByObject","@Test
    public void testBooleanArrayHiddenByObject()","0","-","-","-","-"
"5046","testByte","@Test
    public void testByte()","0","-","-","-","-"
"5047","testByteArray","@Test
    public void testByteArray()","0","-","-","-","-"
"5048","testByteArrayHiddenByObject","@Test
    public void testByteArrayHiddenByObject()","0","-","-","-","-"
"5049","testChar","@Test
    public void testChar()","0","-","-","-","-"
"5050","testCharArray","@Test
    public void testCharArray()","0","-","-","-","-"
"5051","testCharArrayHiddenByObject","@Test
    public void testCharArrayHiddenByObject()","0","-","-","-","-"
"5052","testDouble","@Test
    public void testDouble()","0","-","-","-","-"
"5053","testDoubleArray","@Test
    public void testDoubleArray()","0","-","-","-","-"
"5054","testDoubleArrayHiddenByObject","@Test
    public void testDoubleArrayHiddenByObject()","0","-","-","-","-"
"5055","testFloat","@Test
    public void testFloat()","0","-","-","-","-"
"5056","testFloatArray","@Test
    public void testFloatArray()","0","-","-","-","-"
"5057","testFloatArrayHiddenByObject","@Test
    public void testFloatArrayHiddenByObject()","0","-","-","-","-"
"5058","testInt","@Test
    public void testInt()","0","-","-","-","-"
"5059","testIntArray","@Test
    public void testIntArray()","0","-","-","-","-"
"5060","testIntArrayHiddenByObject","@Test
    public void testIntArrayHiddenByObject()","0","-","-","-","-"
"5061","testLong","@Test
    public void testLong()","0","-","-","-","-"
"5062","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"5063","testLongArrayHiddenByObject","@Test
    public void testLongArrayHiddenByObject()","0","-","-","-","-"
"5064","testMixedArray","@Test
    public void testMixedArray()","0","-","-","-","-"
"5065","testMultiBooleanArray","@Test
    public void testMultiBooleanArray()","0","-","-","-","-"
"5066","testMultiByteArray","@Test
    public void testMultiByteArray()","0","-","-","-","-"
"5067","testMultiCharArray","@Test
    public void testMultiCharArray()","0","-","-","-","-"
"5068","testMultiDoubleArray","@Test
    public void testMultiDoubleArray()","0","-","-","-","-"
"5069","testMultiFloatArray","@Test
    public void testMultiFloatArray()","0","-","-","-","-"
"5070","testMultiIntArray","@Test
    public void testMultiIntArray()","0","-","-","-","-"
"5071","testMultiLongArray","@Test
    public void testMultiLongArray()","0","-","-","-","-"
"5072","testMultiShortArray","@Test
    public void testMultiShortArray()","0","-","-","-","-"
"5073","testObject","@Test
    public void testObject()","0","-","-","-","-"
"5074","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"5075","testObjectArrayHiddenByObject","@Test
    public void testObjectArrayHiddenByObject()","0","-","-","-","-"
"5076","testObjectBuild","@Test
    public void testObjectBuild()","0","-","-","-","-"
"5077","testObjectComparator","@Test
    public void testObjectComparator()","0","-","-","-","-"
"5078","testObjectComparatorNull","@Test
    public void testObjectComparatorNull()","0","-","-","-","-"
"5079","testObjectEx2","@Test
    public void testObjectEx2()","0","-","-","-","-"
"5080","testRaggedArray","@Test
    public void testRaggedArray()","0","-","-","-","-"
"5081","testReflectionCompare","@Test
    public void testReflectionCompare()","0","-","-","-","-"
"5082","testReflectionCompareEx1","@Test
    public void testReflectionCompareEx1()","0","-","-","-","-"
"5083","testReflectionCompareEx2","@Test
    public void testReflectionCompareEx2()","0","-","-","-","-"
"5084","testReflectionHierarchyCompare","@Test
    public void testReflectionHierarchyCompare()","0","-","-","-","-"
"5085","testReflectionHierarchyCompare","private void testReflectionHierarchyCompare(final boolean testTransients, final String[] excludeFields)","0","-","-","-","-"
"5086","testReflectionHierarchyCompareExcludeFields","@Test
    public void testReflectionHierarchyCompareExcludeFields()","0","-","-","-","-"
"5087","testReflectionHierarchyCompareTransients","@Test
    public void testReflectionHierarchyCompareTransients()","0","-","-","-","-"
"5088","testShort","@Test
    public void testShort()","0","-","-","-","-"
"5089","testShortArray","@Test
    public void testShortArray()","0","-","-","-","-"
"5090","testShortArrayHiddenByObject","@Test
    public void testShortArrayHiddenByObject()","0","-","-","-","-"
"5091","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"5092","tearDown","@AfterEach
    public void tearDown()","0","-","-","-","-"
"5093","testAppendSuper","@Test
    public void testAppendSuper()","0","-","-","-","-"
"5094","testArray","@Test
    public void testArray()","0","-","-","-","-"
"5095","testBlank","@Test
    public void testBlank()","0","-","-","-","-"
"5096","testCollection","@Test
    public void testCollection()","0","-","-","-","-"
"5097","testLong","@Test
    public void testLong()","0","-","-","-","-"
"5098","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"5099","testLongArrayArray","@Test
    public void testLongArrayArray()","0","-","-","-","-"
"5100","testMap","@Test
    public void testMap()","0","-","-","-","-"
"5101","testObject","@Test
    public void testObject()","0","-","-","-","-"
"5102","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"5103","testPerson","@Test
    public void testPerson()","0","-","-","-","-"
"5104","CollectionHolder","CollectionHolder(final T collection)","0","-","-","-","-"
"5105","testArrayList","@Test
    public void testArrayList() throws InterruptedException","0","-","-","-","-"
"5106","testConcurrency","private void testConcurrency(final CollectionHolder<List<Integer>> holder) throws InterruptedException","0","-","-","-","-"
"5107","testCopyOnWriteArrayList","@Test
    public void testCopyOnWriteArrayList() throws InterruptedException","0","-","-","-","-"
"5108","testLinkedList","@Test
    public void testLinkedList() throws InterruptedException","0","-","-","-","-"
"5109","getBalance","public double getBalance()","0","-","-","-","-"
"5110","Bank","Bank(final String name)","0","-","-","-","-"
"5111","Customer","Customer(final String name)","0","-","-","-","-"
"5112","Transaction","Transaction(final String datum, final double betrag)","0","-","-","-","-"
"5113","boolArray","@Test
    public void boolArray()","0","-","-","-","-"
"5114","byteArray","@Test
    public void byteArray()","0","-","-","-","-"
"5115","charArray","@Test
    public void charArray()","0","-","-","-","-"
"5116","doubleArray","@Test
    public void doubleArray()","0","-","-","-","-"
"5117","floatArray","@Test
    public void floatArray()","0","-","-","-","-"
"5118","getClassPrefix","private String getClassPrefix(final Object object)","0","-","-","-","-"
"5119","getExpectedToString","/**
     * Create an expected to String for the given WithArraysInstance
     * @param wa                 Instance
     * @param arrayType          Type - empty used to indicate expect all nulls
     * @param expectedArrayValue Expected value for the array type
     * @return expected toString
     */
    private String getExpectedToString(final WithArrays wa, final WithArraysTestType arrayType, final String expectedArrayValue)","0","-","-","-","-"
"5120","intArray","@Test
    public void intArray()","0","-","-","-","-"
"5121","longArray","@Test
    public void longArray()","0","-","-","-","-"
"5122","nestedAndArray","@Test
    public void nestedAndArray()","0","-","-","-","-"
"5123","nestedElements","@Test
    public void nestedElements()","0","-","-","-","-"
"5124","noArray","@Test
    public void noArray()","0","-","-","-","-"
"5125","shortArray","@Test
    public void shortArray()","0","-","-","-","-"
"5126","simpleObject","@Test
    public void simpleObject()","0","-","-","-","-"
"5127","stringArray","@Test
    public void stringArray()","0","-","-","-","-"
"5128","testLANG1319","@Test
    public void testLANG1319()","0","-","-","-","-"
"5129","toString","private String toString(final Object object)","0","-","-","-","-"
"5130","getStudents","public List<Student> getStudents()","0","-","-","-","-"
"5131","getTeacher","public Teacher getTeacher()","0","-","-","-","-"
"5132","setStudents","public void setStudents(final List<Student> students)","0","-","-","-","-"
"5133","setTeacher","public void setTeacher(final Teacher teacher)","0","-","-","-","-"
"5134","toString","@Override
        public String toString()","0","-","-","-","-"
"5135","getHobbies","public List<Hobby> getHobbies()","0","-","-","-","-"
"5136","setHobbies","public void setHobbies(final List<Hobby> hobbies)","0","-","-","-","-"
"5137","toString","@Override
        public String toString()","0","-","-","-","-"
"5138","getHobbies","public Hobby[] getHobbies()","0","-","-","-","-"
"5139","setHobbies","public void setHobbies(final Hobby[] hobbies)","0","-","-","-","-"
"5140","toString","@Override
        public String toString()","0","-","-","-","-"
"5141","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"5142","tearDown","@AfterEach
    public void tearDown()","0","-","-","-","-"
"5143","testAppendSuper","@Test
    public void testAppendSuper()","0","-","-","-","-"
"5144","testArray","@Test
    public void testArray()","0","-","-","-","-"
"5145","toString","@Override
                            public String toString()","0","-","-","-","-"
"5146","testArrayEnum","@Test
    public void testArrayEnum()","0","-","-","-","-"
"5147","testBlank","@Test
    public void testBlank()","0","-","-","-","-"
"5148","testBooleanArray","@Test
    public void testBooleanArray()","0","-","-","-","-"
"5149","testByteArray","@Test
    public void testByteArray()","0","-","-","-","-"
"5150","testChar","@Test
    public void testChar()","0","-","-","-","-"
"5151","testCharArray","@Test
    public void testCharArray()","0","-","-","-","-"
"5152","testCombineListAndEnum","@Test
    public void testCombineListAndEnum()","0","-","-","-","-"
"5153","testDate","@Test
    public void testDate()","0","-","-","-","-"
"5154","testDoubleArray","@Test
    public void testDoubleArray()","0","-","-","-","-"
"5155","testFloatArray","@Test
    public void testFloatArray()","0","-","-","-","-"
"5156","testIntArray","@Test
    public void testIntArray()","0","-","-","-","-"
"5157","testLANG1395","@Test
    public void testLANG1395()","0","-","-","-","-"
"5158","testLANG1396","@Test
    public void testLANG1396()","0","-","-","-","-"
"5159","testList","@Test
    public void testList()","0","-","-","-","-"
"5160","testLong","@Test
    public void testLong()","0","-","-","-","-"
"5161","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"5162","testLongArrayArray","@Test
    public void testLongArrayArray()","0","-","-","-","-"
"5163","testMapSkipNullKey","@Test
    public void testMapSkipNullKey()","0","-","-","-","-"
"5164","testNestedMaps","@Test
    public void testNestedMaps()","0","-","-","-","-"
"5165","toString","@Override
            public String toString()","0","-","-","-","-"
"5166","testNestingPerson","@Test
    public void testNestingPerson()","0","-","-","-","-"
"5167","toString","@Override
            public String toString()","0","-","-","-","-"
"5168","testNull","@Test
    public void testNull()","0","-","-","-","-"
"5169","testObject","@Test
    public void testObject()","0","-","-","-","-"
"5170","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"5171","testObjectWithInnerMap","@Test
    public void testObjectWithInnerMap()","0","-","-","-","-"
"5172","toString","@Override
            public String toString()","0","-","-","-","-"
"5173","testPerson","@Test
    public void testPerson()","0","-","-","-","-"
"5174","testRootMap","@Test
    public void testRootMap()","0","-","-","-","-"
"5175","testShortArray","@Test
    public void testShortArray()","0","-","-","-","-"
"5176","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"5177","tearDown","@AfterEach
    public void tearDown()","0","-","-","-","-"
"5178","testAppendSuper","@Test
    public void testAppendSuper()","0","-","-","-","-"
"5179","testArray","@Test
    public void testArray()","0","-","-","-","-"
"5180","testBlank","@Test
    public void testBlank()","0","-","-","-","-"
"5181","testCollection","@Test
    public void testCollection()","0","-","-","-","-"
"5182","testLong","@Test
    public void testLong()","0","-","-","-","-"
"5183","testLongArray","@Test
    public void testLongArray()","0","-","-","-","-"
"5184","testLongArrayArray","@Test
    public void testLongArrayArray()","0","-","-","-","-"
"5185","testMap","@Test
    public void testMap()","0","-","-","-","-"
"5186","testObject","@Test
    public void testObject()","0","-","-","-","-"
"5187","testObjectArray","@Test
    public void testObjectArray()","0","-","-","-","-"
"5188","testPerson","@Test
    public void testPerson()","0","-","-","-","-"
"5189","testConstructWithCause","@Test
    public void testConstructWithCause()","0","-","-","-","-"
"5190","generateCause","protected Exception generateCause()","0","-","-","-","-"
"5191","testConstructWithCause","@Test
    public void testConstructWithCause()","0","-","-","-","-"
"5192","setUp","@BeforeEach
    @Override
    public void setUp() throws Exception","0","-","-","-","-"
"5193","testContextedException","@Test
    public void testContextedException()","0","-","-","-","-"
"5194","testContextedExceptionString","@Test
    public void testContextedExceptionString()","0","-","-","-","-"
"5195","testContextedExceptionStringThrowable","@Test
    public void testContextedExceptionStringThrowable()","0","-","-","-","-"
"5196","testContextedExceptionStringThrowableContext","@Test
    public void testContextedExceptionStringThrowableContext()","0","-","-","-","-"
"5197","testContextedExceptionThrowable","@Test
    public void testContextedExceptionThrowable()","0","-","-","-","-"
"5198","testNullException","@Test
    public void testNullException()","0","-","-","-","-"
"5199","testNullExceptionPassing","@Test
    public void testNullExceptionPassing()","0","-","-","-","-"
"5200","testRawMessage","@Test
    public void testRawMessage()","0","-","-","-","-"
"5201","setUp","@BeforeEach
    @Override
    public void setUp() throws Exception","0","-","-","-","-"
"5202","testContextedException","@Test
    public void testContextedException()","0","-","-","-","-"
"5203","testContextedExceptionString","@Test
    public void testContextedExceptionString()","0","-","-","-","-"
"5204","testContextedExceptionStringThrowable","@Test
    public void testContextedExceptionStringThrowable()","0","-","-","-","-"
"5205","testContextedExceptionStringThrowableContext","@Test
    public void testContextedExceptionStringThrowableContext()","0","-","-","-","-"
"5206","testContextedExceptionThrowable","@Test
    public void testContextedExceptionThrowable()","0","-","-","-","-"
"5207","testNullExceptionPassing","@Test
    public void testNullExceptionPassing()","0","-","-","-","-"
"5208","testRawMessage","@Test
    public void testRawMessage()","0","-","-","-","-"
"5209","CustomCheckedException","public CustomCheckedException()","0","-","-","-","-"
"5210","CustomCheckedException","public CustomCheckedException(final String message)","0","-","-","-","-"
"5211","CustomCheckedException","public CustomCheckedException(final String message, final Throwable cause)","0","-","-","-","-"
"5212","CustomCheckedException","public CustomCheckedException(final Throwable cause)","0","-","-","-","-"
"5213","testConstructWithCause","@Test
    public void testConstructWithCause()","0","-","-","-","-"
"5214","toString","@Override
        public String toString()","0","-","-","-","-"
"5215","setUp","@BeforeEach
    public void setUp() throws Exception","0","-","-","-","-"
"5216","testAddContextValue","@Test
    public void testAddContextValue()","0","-","-","-","-"
"5217","testGetContextEntries","@Test
    public void testGetContextEntries()","0","-","-","-","-"
"5218","testGetContextLabels","@Test
    public void testGetContextLabels()","0","-","-","-","-"
"5219","testGetContextValues","@Test
    public void testGetContextValues()","0","-","-","-","-"
"5220","testGetFirstContextValue","@Test
    public void testGetFirstContextValue()","0","-","-","-","-"
"5221","testJavaSerialization","@Test
    public void testJavaSerialization()","0","-","-","-","-"
"5222","testSetContextValue","@Test
    public void testSetContextValue()","0","-","-","-","-"
"5223","ExceptionWithCause","ExceptionWithCause(final String str, final Throwable cause)","0","-","-","-","-"
"5224","ExceptionWithCause","ExceptionWithCause(final Throwable cause)","0","-","-","-","-"
"5225","getCause","@Override
        public synchronized Throwable getCause()","0","-","-","-","-"
"5226","setCause","public void setCause(final Throwable cause)","0","-","-","-","-"
"5227","getTargetException","@SuppressWarnings(""unused"")
        public void getTargetException()","0","-","-","-","-"
"5228","NestableException","@SuppressWarnings(""unused"")
        NestableException()","0","-","-","-","-"
"5229","NestableException","NestableException(final Throwable t)","0","-","-","-","-"
"5230","redeclareCheckedException","private static int redeclareCheckedException()","0","-","-","-","-"
"5231","throwsCheckedException","private static int throwsCheckedException()","0","-","-","-","-"
"5232","createExceptionWithCause","private Throwable createExceptionWithCause()","0","-","-","-","-"
"5233","createExceptionWithoutCause","private Throwable createExceptionWithoutCause()","0","-","-","-","-"
"5234","setUp","@BeforeEach
    public void setUp()","0","-","-","-","-"
"5235","tearDown","@AfterEach
    public void tearDown()","0","-","-","-","-"
"5236","test_getMessage_Throwable","@Test
    public void test_getMessage_Throwable()","0","-","-","-","-"
"5237","test_getRootCauseMessage_Throwable","@Test
    public void test_getRootCauseMessage_Throwable()","0","-","-","-","-"
"5238","testAsRuntimeException","@Test
    public void testAsRuntimeException()","0","-","-","-","-"
"5239","testCatchTechniques","@Test
    public void testCatchTechniques()","0","-","-","-","-"
"5240","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"5241","testForEach_jdkNoCause","@Test
    public void testForEach_jdkNoCause()","0","-","-","-","-"
"5242","testForEach_nested","@Test
    public void testForEach_nested()","0","-","-","-","-"
"5243","testForEach_null","@Test
    public void testForEach_null()","0","-","-","-","-"
"5244","testForEach_recursiveCause","@Test
    public void testForEach_recursiveCause()","0","-","-","-","-"
"5245","testForEach_withCause","@Test
    public void testForEach_withCause()","0","-","-","-","-"
"5246","testForEach_withoutCause","@Test
    public void testForEach_withoutCause()","0","-","-","-","-"
"5247","testGetCause_Throwable","@SuppressWarnings(""deprecation"") // Specifically tests the deprecated methods
    @Test
    public void testGetCause_Throwable()","0","-","-","-","-"
"5248","testGetCause_ThrowableArray","@SuppressWarnings(""deprecation"") // Specifically tests the deprecated methods
    @Test
    public void testGetCause_ThrowableArray()","0","-","-","-","-"
"5249","testGetRootCause_Throwable","@Test
    public void testGetRootCause_Throwable()","0","-","-","-","-"
"5250","testGetRootCauseStackTrace_Throwable","@Test
    public void testGetRootCauseStackTrace_Throwable()","0","-","-","-","-"
"5251","testGetRootCauseStackTraceList_Throwable","@Test
    public void testGetRootCauseStackTraceList_Throwable()","0","-","-","-","-"
"5252","testgetStackFramesHappyPath","@Test
    @DisplayName(""getStackFrames returns empty string array when the argument is null"")
    public void testgetStackFramesHappyPath()","0","-","-","-","-"
"5253","printStackTrace","@Override
            public void printStackTrace(final PrintWriter s)","0","-","-","-","-"
"5254","testgetStackFramesNullArg","@Test
    @DisplayName(""getStackFrames returns the string array of the stack frames when there is a real exception"")
    public void testgetStackFramesNullArg()","0","-","-","-","-"
"5255","testGetThrowableCount_Throwable","@Test
    public void testGetThrowableCount_Throwable()","0","-","-","-","-"
"5256","testGetThrowableList_Throwable_jdkNoCause","@Test
    public void testGetThrowableList_Throwable_jdkNoCause()","0","-","-","-","-"
"5257","testGetThrowableList_Throwable_nested","@Test
    public void testGetThrowableList_Throwable_nested()","0","-","-","-","-"
"5258","testGetThrowableList_Throwable_null","@Test
    public void testGetThrowableList_Throwable_null()","0","-","-","-","-"
"5259","testGetThrowableList_Throwable_recursiveCause","@Test
    public void testGetThrowableList_Throwable_recursiveCause()","0","-","-","-","-"
"5260","testGetThrowableList_Throwable_withCause","@Test
    public void testGetThrowableList_Throwable_withCause()","0","-","-","-","-"
"5261","testGetThrowableList_Throwable_withoutCause","@Test
    public void testGetThrowableList_Throwable_withoutCause()","0","-","-","-","-"
"5262","testGetThrowables_Throwable_jdkNoCause","@Test
    public void testGetThrowables_Throwable_jdkNoCause()","0","-","-","-","-"
"5263","testGetThrowables_Throwable_nested","@Test
    public void testGetThrowables_Throwable_nested()","0","-","-","-","-"
"5264","testGetThrowables_Throwable_null","@Test
    public void testGetThrowables_Throwable_null()","0","-","-","-","-"
"5265","testGetThrowables_Throwable_recursiveCause","@Test
    public void testGetThrowables_Throwable_recursiveCause()","0","-","-","-","-"
"5266","testGetThrowables_Throwable_withCause","@Test
    public void testGetThrowables_Throwable_withCause()","0","-","-","-","-"
"5267","testGetThrowables_Throwable_withoutCause","@Test
    public void testGetThrowables_Throwable_withoutCause()","0","-","-","-","-"
"5268","testIndexOf_ThrowableClass","@Test
    public void testIndexOf_ThrowableClass()","0","-","-","-","-"
"5269","testIndexOf_ThrowableClassInt","@Test
    public void testIndexOf_ThrowableClassInt()","0","-","-","-","-"
"5270","testIndexOfType_ThrowableClass","@Test
    public void testIndexOfType_ThrowableClass()","0","-","-","-","-"
"5271","testIndexOfType_ThrowableClassInt","@Test
    public void testIndexOfType_ThrowableClassInt()","0","-","-","-","-"
"5272","testIsChecked_checked","@Test
    public void testIsChecked_checked()","0","-","-","-","-"
"5273","testIsChecked_error","@Test
    public void testIsChecked_error()","0","-","-","-","-"
"5274","testIsChecked_null","@Test
    public void testIsChecked_null()","0","-","-","-","-"
"5275","testIsChecked_unchecked","@Test
    public void testIsChecked_unchecked()","0","-","-","-","-"
"5276","testIsCheckedCustomThrowable","@Test
    public void testIsCheckedCustomThrowable()","0","-","-","-","-"
"5277","testIsUnchecked_checked","@Test
    public void testIsUnchecked_checked()","0","-","-","-","-"
"5278","testIsUnchecked_error","@Test
    public void testIsUnchecked_error()","0","-","-","-","-"
"5279","testIsUnchecked_null","@Test
    public void testIsUnchecked_null()","0","-","-","-","-"
"5280","testIsUnchecked_unchecked","@Test
    public void testIsUnchecked_unchecked()","0","-","-","-","-"
"5281","testIsUnCheckedCustomThrowable","@Test
    public void testIsUnCheckedCustomThrowable()","0","-","-","-","-"
"5282","testPrintRootCauseStackTrace_Throwable","@Test
    public void testPrintRootCauseStackTrace_Throwable()","0","-","-","-","-"
"5283","testPrintRootCauseStackTrace_ThrowableStream","@Test
    public void testPrintRootCauseStackTrace_ThrowableStream()","0","-","-","-","-"
"5284","testPrintRootCauseStackTrace_ThrowableWriter","@Test
    public void testPrintRootCauseStackTrace_ThrowableWriter()","0","-","-","-","-"
"5285","testRemoveCommonFrames_ListList","@Test
    public void testRemoveCommonFrames_ListList()","0","-","-","-","-"
"5286","testRethrow","@Test
    public void testRethrow()","0","-","-","-","-"
"5287","testStream_jdkNoCause","@Test
    public void testStream_jdkNoCause()","0","-","-","-","-"
"5288","testStream_nested","@Test
    public void testStream_nested()","0","-","-","-","-"
"5289","testStream_null","@Test
    public void testStream_null()","0","-","-","-","-"
"5290","testStream_recursiveCause","@Test
    public void testStream_recursiveCause()","0","-","-","-","-"
"5291","testStream_withCause","@Test
    public void testStream_withCause()","0","-","-","-","-"
"5292","testStream_withoutCause","@Test
    public void testStream_withoutCause()","0","-","-","-","-"
"5293","testThrowableOf_ThrowableClass","@Test
    public void testThrowableOf_ThrowableClass()","0","-","-","-","-"
"5294","testThrowableOf_ThrowableClassInt","@Test
    public void testThrowableOf_ThrowableClassInt()","0","-","-","-","-"
"5295","testThrowableOfType_ThrowableClass","@Test
    public void testThrowableOfType_ThrowableClass()","0","-","-","-","-"
"5296","testThrowableOfType_ThrowableClassInt","@Test
    public void testThrowableOfType_ThrowableClassInt()","0","-","-","-","-"
"5297","testWrapAndUnwrapCheckedException","@Test
    public void testWrapAndUnwrapCheckedException()","0","-","-","-","-"
"5298","testWrapAndUnwrapError","@Test
    public void testWrapAndUnwrapError()","0","-","-","-","-"
"5299","testWrapAndUnwrapRuntimeException","@Test
    public void testWrapAndUnwrapRuntimeException()","0","-","-","-","-"
"5300","testWrapAndUnwrapThrowable","@Test
    public void testWrapAndUnwrapThrowable()","0","-","-","-","-"
"5301","CustomUncheckedException","public CustomUncheckedException()","0","-","-","-","-"
"5302","CustomUncheckedException","public CustomUncheckedException(final String message)","0","-","-","-","-"
"5303","CustomUncheckedException","public CustomUncheckedException(final String message, final Throwable cause)","0","-","-","-","-"
"5304","CustomUncheckedException","public CustomUncheckedException(final Throwable cause)","0","-","-","-","-"
"5305","testThrowingExceptionWithCause","@Test
    public void testThrowingExceptionWithCause()","0","-","-","-","-"
"5306","testThrowingExceptionWithMessage","@Test
    public void testThrowingExceptionWithMessage()","0","-","-","-","-"
"5307","testThrowingInformativeException","@Test
    public void testThrowingInformativeException()","0","-","-","-","-"
"5308","testWithCauseAndMessage","@Test
    public void testWithCauseAndMessage()","0","-","-","-","-"
"5309","testWithoutCause","@Test
    public void testWithoutCause()","0","-","-","-","-"
"5310","testWithoutMessage","@Test
    public void testWithoutMessage()","0","-","-","-","-"
"5311","setUp","@Override
    @BeforeEach
    public void setUp() throws Exception","0","-","-","-","-"
"5312","testFormattedExceptionMessageExceptionHandling","@Test
    public void testFormattedExceptionMessageExceptionHandling()","0","-","-","-","-"
"5313","testFormattedExceptionMessageNull","@Test
    public void testFormattedExceptionMessageNull()","0","-","-","-","-"
"5314","testFormattedExceptionMessageNullValue","@Test
    public void testFormattedExceptionMessageNullValue()","0","-","-","-","-"
"5315","testConstructWithCause","@Test
    public void testConstructWithCause()","0","-","-","-","-"
"5316","invoke","abstract boolean invoke();","0","-","-","-","-"
"5317","run","void run(final TestData data, final String id)","0","-","-","-","-"
"5318","TestData","TestData(final String source, final boolean ignoreCase, final int toffset, final String other, final int ooffset, final int len,
                final boolean expected)","0","-","-","-","-"
"5319","TestData","TestData(final String source, final boolean ignoreCase, final int toffset, final String other, final int ooffset, final int len,
                final Class<? extends Throwable> throwable)","0","-","-","-","-"
"5320","toString","@Override
        public String toString()","0","-","-","-","-"
"5321","WrapperString","WrapperString(final CharSequence inner)","0","-","-","-","-"
"5322","charAt","@Override
        public char charAt(final int index)","0","-","-","-","-"
"5323","chars","@Override
        public IntStream chars()","0","-","-","-","-"
"5324","codePoints","@Override
        public IntStream codePoints()","0","-","-","-","-"
"5325","length","@Override
        public int length()","0","-","-","-","-"
"5326","subSequence","@Override
        public CharSequence subSequence(final int start, final int end)","0","-","-","-","-"
"5327","toString","@Override
        public String toString()","0","-","-","-","-"
"5328","lastIndexWithStandardCharSequence","static Stream<Arguments> lastIndexWithStandardCharSequence()","0","-","-","-","-"
"5329","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"5330","testLastIndexOfWithDifferentCharSequences","@ParameterizedTest
    @MethodSource(""lastIndexWithStandardCharSequence"")
    public void testLastIndexOfWithDifferentCharSequences(final CharSequence cs, final CharSequence search, final int start, final int expected)","0","-","-","-","-"
"5331","testNewLastIndexOf","@Test
    public void testNewLastIndexOf()","0","-","-","-","-"
"5332","testNewLastIndexOfSingle","private void testNewLastIndexOfSingle(final CharSequence a, final CharSequence b)","0","-","-","-","-"
"5333","testNewLastIndexOfSingle","private void testNewLastIndexOfSingle(final CharSequence a, final CharSequence b, final int start)","0","-","-","-","-"
"5334","testNewLastIndexOfSingleSingle","private void testNewLastIndexOfSingleSingle(final CharSequence a, final CharSequence b, final int start)","0","-","-","-","-"
"5335","testRegionMatches","@Test
    public void testRegionMatches()","0","-","-","-","-"
"5336","invoke","@Override
                boolean invoke()","0","-","-","-","-"
"5337","invoke","@Override
                boolean invoke()","0","-","-","-","-"
"5338","invoke","@Override
                boolean invoke()","0","-","-","-","-"
"5339","testSubSequence","@Test
    public void testSubSequence()","0","-","-","-","-"
"5340","testSubSequenceNegativeStart","@Test
    public void testSubSequenceNegativeStart()","0","-","-","-","-"
"5341","testSubSequenceTooLong","@Test
    public void testSubSequenceTooLong()","0","-","-","-","-"
"5342","testToCharArray","@Test
    public void testToCharArray()","0","-","-","-","-"
"5343","addDeregisterListener","private void addDeregisterListener(final EventListenerSupport<VetoableChangeListener> listenerSupport)","0","-","-","-","-"
"5344","vetoableChange","@Override
            public void vetoableChange(final PropertyChangeEvent e)","0","-","-","-","-"
"5345","createListener","private VetoableChangeListener createListener(final List<VetoableChangeListener> calledListeners)","0","-","-","-","-"
"5346","vetoableChange","@Override
            public void vetoableChange(final PropertyChangeEvent e)","0","-","-","-","-"
"5347","testAddListenerNoDuplicates","@Test
    public void testAddListenerNoDuplicates()","0","-","-","-","-"
"5348","testAddNullListener","@Test
    public void testAddNullListener()","0","-","-","-","-"
"5349","testCreateWithNonInterfaceParameter","@Test
    public void testCreateWithNonInterfaceParameter()","0","-","-","-","-"
"5350","testCreateWithNullParameter","@Test
    public void testCreateWithNullParameter()","0","-","-","-","-"
"5351","testEventDispatchOrder","@Test
    public void testEventDispatchOrder() throws PropertyVetoException","0","-","-","-","-"
"5352","testGetListeners","@Test
    public void testGetListeners()","0","-","-","-","-"
"5353","testRemoveListenerDuringEvent","@Test
    public void testRemoveListenerDuringEvent() throws PropertyVetoException","0","-","-","-","-"
"5354","testRemoveNullListener","@Test
    public void testRemoveNullListener()","0","-","-","-","-"
"5355","testSerialization","@Test
    public void testSerialization() throws IOException, ClassNotFoundException, PropertyVetoException","0","-","-","-","-"
"5356","testSubclassInvocationHandling","@Test
    public void testSubclassInvocationHandling() throws PropertyVetoException","0","-","-","-","-"
"5357","createInvocationHandler","@Override
            protected java.lang.reflect.InvocationHandler createInvocationHandler()","0","-","-","-","-"
"5358","invoke","@Override
                    public Object invoke(final Object proxy, final Method method, final Object[] args)
                            throws IllegalAccessException, IllegalArgumentException, InvocationTargetException","0","-","-","-","-"
"5359","testThrowingListener","/**
     * Tests that throwing an exception from a listener stops calling the remaining listeners.
     */
    @Test
    public void testThrowingListener()","0","-","-","-","-"
"5360","testThrowingListenerContinues","/**
     * Tests that throwing an exception from a listener continues calling the remaining listeners.
     */
    @Test
    public void testThrowingListenerContinues() throws PropertyVetoException","0","-","-","-","-"
"5361","createInvocationHandler","@Override
            protected InvocationHandler createInvocationHandler()","0","-","-","-","-"
"5362","eventOccurred","public void eventOccurred()","0","-","-","-","-"
"5363","getCount","public int getCount()","0","-","-","-","-"
"5364","eventOccurred","public void eventOccurred(final PropertyChangeEvent e)","0","-","-","-","-"
"5365","getCount","public int getCount()","0","-","-","-","-"
"5366","createListener","public <L> L createListener(final Class<L> listenerType)","0","-","-","-","-"
"5367","getEventCount","public int getEventCount(final String eventName)","0","-","-","-","-"
"5368","invoke","@Override
        public Object invoke(final Object proxy, final Method method, final Object[] args)","0","-","-","-","-"
"5369","addPropertyChangeListener","public void addPropertyChangeListener(final PropertyChangeListener listener)","0","-","-","-","-"
"5370","event1","void event1(PropertyChangeEvent e);","0","-","-","-","-"
"5371","event2","void event2(PropertyChangeEvent e);","0","-","-","-","-"
"5372","addMultipleEventListener","public void addMultipleEventListener(final MultipleEventListener listener)","0","-","-","-","-"
"5373","addPropertyChangeListener","public void addPropertyChangeListener(final PropertyChangeListener listener)","0","-","-","-","-"
"5374","addVetoableChangeListener","protected void addVetoableChangeListener(final VetoableChangeListener listener)","0","-","-","-","-"
"5375","removePropertyChangeListener","public void removePropertyChangeListener(final PropertyChangeListener listener)","0","-","-","-","-"
"5376","setProperty","public void setProperty(final String property)","0","-","-","-","-"
"5377","testAddEventListener","@Test
    public void testAddEventListener()","0","-","-","-","-"
"5378","testAddEventListenerThrowsException","@Test
    public void testAddEventListenerThrowsException()","0","-","-","-","-"
"5379","testAddEventListenerWithNoAddMethod","@Test
    public void testAddEventListenerWithNoAddMethod()","0","-","-","-","-"
"5380","testAddEventListenerWithPrivateAddMethod","@Test
    public void testAddEventListenerWithPrivateAddMethod()","0","-","-","-","-"
"5381","testBindEventsToMethod","@Test
    public void testBindEventsToMethod()","0","-","-","-","-"
"5382","testBindEventsToMethodWithEvent","@Test
    public void testBindEventsToMethodWithEvent()","0","-","-","-","-"
"5383","testBindFilteredEventsToMethod","@Test
    public void testBindFilteredEventsToMethod()","0","-","-","-","-"
"5384","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"5385","testAtLeast","@Test
    public void testAtLeast()","0","-","-","-","-"
"5386","testGetJavaVersion","@Test
    public void testGetJavaVersion() throws Exception","0","-","-","-","-"
"5387","testToString","@Test
    public void testToString()","0","-","-","-","-"
"5388","CustomCharSequence","CustomCharSequence(final CharSequence seq)","0","-","-","-","-"
"5389","charAt","@Override
        public char charAt(final int index)","0","-","-","-","-"
"5390","equals","@Override
        public boolean equals(final Object obj)","0","-","-","-","-"
"5391","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"5392","length","@Override
        public int length()","0","-","-","-","-"
"5393","subSequence","@Override
        public CharSequence subSequence(final int start, final int end)","0","-","-","-","-"
"5394","toString","@Override
        public String toString()","0","-","-","-","-"
"5395","indexOfAnyBut_withSurrogateChars","static Stream<Arguments> indexOfAnyBut_withSurrogateChars()","0","-","-","-","-"
"5396","testCompare_StringString","@Test
    public void testCompare_StringString()","0","-","-","-","-"
"5397","testCompare_StringStringBoolean","@Test
    public void testCompare_StringStringBoolean()","0","-","-","-","-"
"5398","testCompareIgnoreCase_StringString","@Test
    public void testCompareIgnoreCase_StringString()","0","-","-","-","-"
"5399","testCompareIgnoreCase_StringStringBoolean","@Test
    public void testCompareIgnoreCase_StringStringBoolean()","0","-","-","-","-"
"5400","testCustomCharSequence","@Test
    public void testCustomCharSequence()","0","-","-","-","-"
"5401","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"5402","testEqualsAny","@Test
    public void testEqualsAny()","0","-","-","-","-"
"5403","testEqualsAnyIgnoreCase","@Test
    public void testEqualsAnyIgnoreCase()","0","-","-","-","-"
"5404","testEqualsIgnoreCase","@Test
    public void testEqualsIgnoreCase()","0","-","-","-","-"
"5405","testEqualsOnStrings","@Test
    public void testEqualsOnStrings()","0","-","-","-","-"
"5406","testIndexOf_char","@Test
    public void testIndexOf_char()","0","-","-","-","-"
"5407","testIndexOf_charInt","@Test
    public void testIndexOf_charInt()","0","-","-","-","-"
"5408","testIndexOf_String","@Test
    public void testIndexOf_String()","0","-","-","-","-"
"5409","testIndexOf_StringInt","@Test
    public void testIndexOf_StringInt()","0","-","-","-","-"
"5410","testIndexOfAny_StringCharArray","@Test
    public void testIndexOfAny_StringCharArray()","0","-","-","-","-"
"5411","testIndexOfAny_StringCharArrayWithSupplementaryChars","/**
     * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html
     */
    @Test
    public void testIndexOfAny_StringCharArrayWithSupplementaryChars()","0","-","-","-","-"
"5412","testIndexOfAny_StringString","@Test
    public void testIndexOfAny_StringString()","0","-","-","-","-"
"5413","testIndexOfAny_StringStringArray","@Test
    public void testIndexOfAny_StringStringArray()","0","-","-","-","-"
"5414","testIndexOfAny_StringStringWithSupplementaryChars","/**
     * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html
     */
    @Test
    public void testIndexOfAny_StringStringWithSupplementaryChars()","0","-","-","-","-"
"5415","testIndexOfAnyBut_StringCharArray","@Test
    public void testIndexOfAnyBut_StringCharArray()","0","-","-","-","-"
"5416","testIndexOfAnyBut_StringCharArrayWithSurrogateChars","@ParameterizedTest
    @MethodSource(""indexOfAnyBut_withSurrogateChars"")
    public void testIndexOfAnyBut_StringCharArrayWithSurrogateChars(final CharSequence seq, final String searchChars, final int expected)","0","-","-","-","-"
"5417","testIndexOfAnyBut_StringString","@Test
    public void testIndexOfAnyBut_StringString()","0","-","-","-","-"
"5418","testIndexOfAnyBut_StringStringWithSurrogateChars","@ParameterizedTest
    @MethodSource(""indexOfAnyBut_withSurrogateChars"")
    public void testIndexOfAnyBut_StringStringWithSurrogateChars(final CharSequence seq, final CharSequence searchChars, final int expected)","0","-","-","-","-"
"5419","testIndexOfIgnoreCase_String","@Test
    public void testIndexOfIgnoreCase_String()","0","-","-","-","-"
"5420","testIndexOfIgnoreCase_StringInt","@Test
    public void testIndexOfIgnoreCase_StringInt()","0","-","-","-","-"
"5421","testLANG1193","@Test
    public void testLANG1193()","0","-","-","-","-"
"5422","testLANG1241_1","@Test
    // Non-overlapping test
    public void testLANG1241_1()","0","-","-","-","-"
"5423","testLANG1241_2","@Test
    // Overlapping matching test
    public void testLANG1241_2()","0","-","-","-","-"
"5424","testLastIndexOf_char","@Test
    public void testLastIndexOf_char()","0","-","-","-","-"
"5425","testLastIndexOf_charInt","@Test
    public void testLastIndexOf_charInt()","0","-","-","-","-"
"5426","testLastIndexOf_String","@Test
    public void testLastIndexOf_String()","0","-","-","-","-"
"5427","testLastIndexOf_StringInt","@Test
    public void testLastIndexOf_StringInt()","0","-","-","-","-"
"5428","testLastIndexOfAny_StringStringArray","@Test
    public void testLastIndexOfAny_StringStringArray()","0","-","-","-","-"
"5429","testLastIndexOfIgnoreCase_String","@Test
    public void testLastIndexOfIgnoreCase_String()","0","-","-","-","-"
"5430","testLastIndexOfIgnoreCase_StringInt","@Test
    public void testLastIndexOfIgnoreCase_StringInt()","0","-","-","-","-"
"5431","testLastOrdinalIndexOf","@Test
    public void testLastOrdinalIndexOf()","0","-","-","-","-"
"5432","testOrdinalIndexOf","@Test
    public void testOrdinalIndexOf()","0","-","-","-","-"
"5433","TestThread","TestThread(final String name)","0","-","-","-","-"
"5434","TestThread","TestThread(final ThreadGroup group, final String name)","0","-","-","-","-"
"5435","run","@Override
        public void run()","0","-","-","-","-"
"5436","start","@Override
        public synchronized void start()","0","-","-","-","-"
"5437","testAtLeastOneThreadExists","@Test
    public void testAtLeastOneThreadExists()","0","-","-","-","-"
"5438","testAtLeastOneThreadGroupsExists","@Test
    public void testAtLeastOneThreadGroupsExists()","0","-","-","-","-"
"5439","testComplexThreadGroups","@Test
    public void testComplexThreadGroups() throws Exception","0","-","-","-","-"
"5440","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"5441","testDepreacted","@SuppressWarnings(""deprecation"")
    @Test
    public void testDepreacted()","0","-","-","-","-"
"5442","testGetAllThreadGroupsDoesNotReturnNull","@Test
    public void testGetAllThreadGroupsDoesNotReturnNull()","0","-","-","-","-"
"5443","testGetAllThreadsDoesNotReturnNull","@Test
    public void testGetAllThreadsDoesNotReturnNull()","0","-","-","-","-"
"5444","testInvalidThreadId","@Test
    public void testInvalidThreadId()","0","-","-","-","-"
"5445","testJoinDuration","@Test
    public void testJoinDuration() throws InterruptedException","0","-","-","-","-"
"5446","testNoThread","@Test
    public void testNoThread()","0","-","-","-","-"
"5447","testNoThreadGroup","@Test
    public void testNoThreadGroup()","0","-","-","-","-"
"5448","testNullThreadGroupName","@Test
    public void testNullThreadGroupName()","0","-","-","-","-"
"5449","testNullThreadName","@Test
    public void testNullThreadName()","0","-","-","-","-"
"5450","testNullThreadThreadGroup1","@Test
    public void testNullThreadThreadGroup1()","0","-","-","-","-"
"5451","testNullThreadThreadGroup2","@Test
    public void testNullThreadThreadGroup2()","0","-","-","-","-"
"5452","testNullThreadThreadGroup3","@Test
    public void testNullThreadThreadGroup3()","0","-","-","-","-"
"5453","testNullThreadThreadGroupName1","@Test
    public void testNullThreadThreadGroupName1()","0","-","-","-","-"
"5454","testNullThreadThreadGroupName2","@Test
    public void testNullThreadThreadGroupName2()","0","-","-","-","-"
"5455","testNullThreadThreadGroupName3","@Test
    public void testNullThreadThreadGroupName3()","0","-","-","-","-"
"5456","testSleepDuration","@Test
    public void testSleepDuration() throws InterruptedException","0","-","-","-","-"
"5457","testSystemThreadGroupExists","@Test
    public void testSystemThreadGroupExists()","0","-","-","-","-"
"5458","testThreadGroups","@Test
    public void testThreadGroups() throws InterruptedException","0","-","-","-","-"
"5459","testThreadGroupsById","@Test
    public void testThreadGroupsById() throws InterruptedException","0","-","-","-","-"
"5460","testThreadGroupsByIdFail","@Test
    public void testThreadGroupsByIdFail()","0","-","-","-","-"
"5461","testThreadGroupsNullParent","@Test
    public void testThreadGroupsNullParent()","0","-","-","-","-"
"5462","testThreadGroupsNullPredicate","@Test
    public void testThreadGroupsNullPredicate()","0","-","-","-","-"
"5463","testThreadGroupsRef","@Test
    public void testThreadGroupsRef() throws InterruptedException","0","-","-","-","-"
"5464","testThreads","@Test
    public void testThreads() throws InterruptedException","0","-","-","-","-"
"5465","testThreadsById","@Test
    public void testThreadsById() throws InterruptedException","0","-","-","-","-"
"5466","testThreadsByIdWrongGroup","@Test
    public void testThreadsByIdWrongGroup() throws InterruptedException","0","-","-","-","-"
"5467","testThreadsNullPredicate","@Test
    public void testThreadsNullPredicate()","0","-","-","-","-"
"5468","testThreadsSameName","@Test
    public void testThreadsSameName() throws InterruptedException","0","-","-","-","-"
"5469","compare","@Override
        public int compare(final CharSequence o1, final CharSequence o2)","0","-","-","-","-"
"5470","CloneableString","CloneableString(final String s)","0","-","-","-","-"
"5471","clone","@Override
        public CloneableString clone() throws CloneNotSupportedException","0","-","-","-","-"
"5472","NonComparableCharSequence","/**
         * Create a new NonComparableCharSequence instance.
         *
         * @param value the CharSequence value
         */
        NonComparableCharSequence(final String value)","0","-","-","-","-"
"5473","charAt","@Override
        public char charAt(final int arg0)","0","-","-","-","-"
"5474","length","@Override
        public int length()","0","-","-","-","-"
"5475","subSequence","@Override
        public CharSequence subSequence(final int arg0, final int arg1)","0","-","-","-","-"
"5476","toString","@Override
        public String toString()","0","-","-","-","-"
"5477","UncloneableString","UncloneableString(final String s)","0","-","-","-","-"
"5478","testAllNotNull","/**
     * Tests","0","-","-","-","-"
"5479","testAllNull","/**
     * Tests","0","-","-","-","-"
"5480","testAnyNotNull","/**
     * Tests","0","-","-","-","-"
"5481","testAnyNull","/**
     * Tests","0","-","-","-","-"
"5482","testArray","/**
     * Test for","0","-","-","-","-"
"5483","testCloneOfCloneable","/**
     * Tests","0","-","-","-","-"
"5484","testCloneOfNotCloneable","/**
     * Tests","0","-","-","-","-"
"5485","testCloneOfPrimitiveArray","/**
     * Tests","0","-","-","-","-"
"5486","testCloneOfStringArray","/**
     * Tests","0","-","-","-","-"
"5487","testCloneOfUncloneable","/**
     * Tests","0","-","-","-","-"
"5488","testComparatorMedian","@Test
    public void testComparatorMedian()","0","-","-","-","-"
"5489","testComparatorMedian_emptyItems","@Test
    public void testComparatorMedian_emptyItems()","0","-","-","-","-"
"5490","testComparatorMedian_nullComparator","@Test
    public void testComparatorMedian_nullComparator()","0","-","-","-","-"
"5491","testComparatorMedian_nullItems","@Test
    public void testComparatorMedian_nullItems()","0","-","-","-","-"
"5492","testCompare","/**
     * Tests","0","-","-","-","-"
"5493","testConstMethods","@Test
    public void testConstMethods()","0","-","-","-","-"
"5494","testConstructor","@Test
    public void testConstructor()","0","-","-","-","-"
"5495","testDefaultIfNull","@Test
    public void testDefaultIfNull()","0","-","-","-","-"
"5496","testEquals","@Test
    public void testEquals()","0","-","-","-","-"
"5497","testFirstNonNull","@Test
    public void testFirstNonNull()","0","-","-","-","-"
"5498","testGetClass","@Test
    public void testGetClass()","0","-","-","-","-"
"5499","testGetFirstNonNull","@Test
    public void testGetFirstNonNull()","0","-","-","-","-"
"5500","testHashCode","@Test
    public void testHashCode()","0","-","-","-","-"
"5501","testHashCodeHex","@Test
    public void testHashCodeHex()","0","-","-","-","-"
"5502","testHashCodeMulti_multiple_emptyArray","@Test
    public void testHashCodeMulti_multiple_emptyArray()","0","-","-","-","-"
"5503","testHashCodeMulti_multiple_likeList","@Test
    public void testHashCodeMulti_multiple_likeList()","0","-","-","-","-"
"5504","testHashCodeMulti_multiple_nullArray","@Test
    public void testHashCodeMulti_multiple_nullArray()","0","-","-","-","-"
"5505","testIdentityHashCodeHex","@Test
    public void testIdentityHashCodeHex()","0","-","-","-","-"
"5506","testIdentityToStringAppendable","@Test
    public void testIdentityToStringAppendable() throws IOException","0","-","-","-","-"
"5507","testIdentityToStringInteger","@Test
    public void testIdentityToStringInteger()","0","-","-","-","-"
"5508","testIdentityToStringObjectNull","@Test
    public void testIdentityToStringObjectNull()","0","-","-","-","-"
"5509","testIdentityToStringStrBuilder","@Test
    public void testIdentityToStringStrBuilder()","0","-","-","-","-"
"5510","testIdentityToStringString","@Test
    public void testIdentityToStringString()","0","-","-","-","-"
"5511","testIdentityToStringStringBuffer","@Test
    public void testIdentityToStringStringBuffer()","0","-","-","-","-"
"5512","testIdentityToStringStringBuilder","@Test
    public void testIdentityToStringStringBuilder()","0","-","-","-","-"
"5513","testIdentityToStringStringBuilderInUse","@Test
    public void testIdentityToStringStringBuilderInUse()","0","-","-","-","-"
"5514","testIdentityToStringStringBuilderNullStringBuilder","@Test
    public  void testIdentityToStringStringBuilderNullStringBuilder()","0","-","-","-","-"
"5515","testIdentityToStringStringBuilderNullValue","@Test
    public void testIdentityToStringStringBuilderNullValue()","0","-","-","-","-"
"5516","testIsEmpty","@Test
    public void testIsEmpty()","0","-","-","-","-"
"5517","testIsNotEmpty","@Test
    public void testIsNotEmpty()","0","-","-","-","-"
"5518","testMax","@Test
    public void testMax()","0","-","-","-","-"
"5519","testMedian","@Test
    public void testMedian()","0","-","-","-","-"
"5520","testMedian_emptyItems","@Test
    public void testMedian_emptyItems()","0","-","-","-","-"
"5521","testMedian_nullItems","@Test
    public void testMedian_nullItems()","0","-","-","-","-"
"5522","testMin","@Test
    public void testMin()","0","-","-","-","-"
"5523","testMode","@Test
    public void testMode()","0","-","-","-","-"
"5524","testNotEqual","@Test
    public void testNotEqual()","0","-","-","-","-"
"5525","testNull","@SuppressWarnings(""cast"") // 1 OK, because we are checking for code change
    @Test
    public void testNull()","0","-","-","-","-"
"5526","testPossibleCloneOfCloneable","/**
     * Tests","0","-","-","-","-"
"5527","testPossibleCloneOfNotCloneable","/**
     * Tests","0","-","-","-","-"
"5528","testPossibleCloneOfUncloneable","/**
     * Tests","0","-","-","-","-"
"5529","testRequireNonEmpty","@Test
    public void testRequireNonEmpty()","0","-","-","-","-"
"5530","testToString_Object","@Test
    public void testToString_Object()","0","-","-","-","-"
"5531","testToString_Object_String","@Test
    public void testToString_Object_String()","0","-","-","-","-"
"5532","testToString_String_Supplier","@Test
    public void testToString_String_Supplier()","0","-","-","-","-"
"5533","testToString_Supplier_Supplier","@Test
    public void testToString_Supplier_Supplier()","0","-","-","-","-"
"5534","testWaitDuration","@Test
    public void testWaitDuration()","0","-","-","-","-"
"5535","after","/**
     * All tests should leave the","0","-","-","-","-"
"5536","availableLocaleList","/**
     * Obtains an unmodifiable list of installed locales.
     *
     * <p>This method is a wrapper around","0","-","-","-","-"
"5537","availableLocaleList","private static List<Locale> availableLocaleList(final Predicate<Locale> predicate)","0","-","-","-","-"
"5538","availableLocaleSet","/**
     * Obtains an unmodifiable set of installed locales.
     *
     * <p>This method is a wrapper around","0","-","-","-","-"
"5539","countriesByLanguage","/**
     * Obtains the list of countries supported for a given language.
     *
     * <p>This method takes a language code and searches to find the
     * countries available for that language. Variant locales are removed.</p>
     *
     * @param languageCode  the 2 letter language code, null returns empty
     * @return an unmodifiable List of Locale objects, not null
     */
    public static List<Locale> countriesByLanguage(final String languageCode)","0","-","-","-","-"
"5540","isAvailableLocale","/**
     * Checks if the locale specified is in the set of available locales.
     *
     * @param locale the Locale object to check if it is available
     * @return true if the locale is a known locale
     */
    public static boolean isAvailableLocale(final Locale locale)","0","-","-","-","-"
"5541","isISO3166CountryCode","/**
     * Tests whether the given String is a ISO 3166 alpha-2 country code.
     *
     * @param str the String to check
     * @return true, is the given String is a ISO 3166 compliant country code.
     */
    private static boolean isISO3166CountryCode(final String str)","0","-","-","-","-"
"5542","isISO639LanguageCode","/**
     * Tests whether the given String is a ISO 639 compliant language code.
     *
     * @param str the String to check.
     * @return true, if the given String is a ISO 639 compliant language code.
     */
    private static boolean isISO639LanguageCode(final String str)","0","-","-","-","-"
"5543","isLanguageUndetermined","/**
     * Tests whether a Locale's language is undetermined.
     * <p>
     * A Locale's language tag is undetermined if it's value is","0","-","-","-","-"
"5544","isNumericAreaCode","/**
     * TestsNo whether the given String is a UN M.49 numeric area code.
     *
     * @param str the String to check
     * @return true, is the given String is a UN M.49 numeric area code.
     */
    private static boolean isNumericAreaCode(final String str)","0","-","-","-","-"
"5545","languagesByCountry","/**
     * Obtains the list of languages supported for a given country.
     *
     * <p>This method takes a country code and searches to find the
     * languages available for that country. Variant locales are removed.</p>
     *
     * @param countryCode  the 2-letter country code, null returns empty
     * @return an unmodifiable List of Locale objects, not null
     */
    public static List<Locale> languagesByCountry(final String countryCode)","0","-","-","-","-"
"5546","localeLookupList","/**
     * Obtains the list of locales to search through when performing
     * a locale search.
     *
     * <pre>
     * localeLookupList(Locale(""fr"", ""CA"", ""xxx""))
     *   = [Locale(""fr"", ""CA"", ""xxx""), Locale(""fr"", ""CA""), Locale(""fr"")]
     * </pre>
     *
     * @param locale  the locale to start from
     * @return the unmodifiable list of Locale objects, 0 being locale, not null
     */
    public static List<Locale> localeLookupList(final Locale locale)","0","-","-","-","-"
"5547","localeLookupList","/**
     * Obtains the list of locales to search through when performing
     * a locale search.
     *
     * <pre>
     * localeLookupList(Locale(""fr"", ""CA"", ""xxx""), Locale(""en""))
     *   = [Locale(""fr"", ""CA"", ""xxx""), Locale(""fr"", ""CA""), Locale(""fr""), Locale(""en""]
     * </pre>
     *
     * <p>The result list begins with the most specific locale, then the
     * next more general and so on, finishing with the default locale.
     * The list will never contain the same locale twice.</p>
     *
     * @param locale  the locale to start from, null returns empty list
     * @param defaultLocale  the default locale to use if no other is found
     * @return the unmodifiable list of Locale objects, 0 being locale, not null
     */
    public static List<Locale> localeLookupList(final Locale locale, final Locale defaultLocale)","0","-","-","-","-"
"5548","parseLocale","/**
     * Tries to parse a Locale from the given String.
     * <p>
     * See","0","-","-","-","-"
"5549","toLocale","/**
     * Returns the given locale if non-","0","-","-","-","-"
"5550","toLocale","/**
     * Converts a String to a Locale.
     *
     * <p>This method takes the string format of a locale and creates the
     * locale object from it.</p>
     *
     * <pre>
     *   LocaleUtils.toLocale("""")           = new Locale("""", """")
     *   LocaleUtils.toLocale(""en"")         = new Locale(""en"", """")
     *   LocaleUtils.toLocale(""en_GB"")      = new Locale(""en"", ""GB"")
     *   LocaleUtils.toLocale(""en-GB"")      = new Locale(""en"", ""GB"")
     *   LocaleUtils.toLocale(""en_001"")     = new Locale(""en"", ""001"")
     *   LocaleUtils.toLocale(""en_GB_xxx"")  = new Locale(""en"", ""GB"", ""xxx"")   (#)
     * </pre>
     *
     * <p>(#) The behavior of the JDK variant constructor changed between JDK1.3 and JDK1.4.
     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
     * Thus, the result from getVariant() may vary depending on your JDK.</p>
     *
     * <p>This method validates the input strictly.
     * The language code must be lowercase.
     * The country code must be uppercase.
     * The separator must be an underscore or a dash.
     * The length must be correct.
     * </p>
     *
     * @param str  the locale String to convert, null returns null
     * @return a Locale, null if null input
     * @throws IllegalArgumentException if the string is an invalid format
     * @see Locale#forLanguageTag(String)
     */
    public static Locale toLocale(final String str)","0","-","-","-","-"
"5551","LocaleUtils","/**
     *","0","-","-","-","-"
"5552","ClassLoaderAwareObjectInputStream","/**
         * Constructs a new instance.
         * @param in The","0","-","-","-","-"
"5553","resolveClass","/**
         * Overridden version that uses the parameterized","0","-","-","-","-"
"5554","clone","/**
     * Deep clones an","0","-","-","-","-"
"5555","deserialize","/**
     * Deserializes a single","0","-","-","-","-"
"5556","deserialize","/**
     * Deserializes an","0","-","-","-","-"
"5557","roundtrip","/**
     * Performs a serialization roundtrip. Serializes and deserializes the given object, great for testing objects that
     * implement","0","-","-","-","-"
"5558","serialize","/**
     * Serializes an","0","-","-","-","-"
"5559","serialize","/**
     * Serializes an","0","-","-","-","-"
"5560","SerializationUtils","/**
     * SerializationUtils instances should NOT be constructed in standard programming.
     * Instead, the class should be used as","0","-","-","-","-"
"5561","of","/**
     * Creates a range with the specified minimum and maximum values (both inclusive).
     *
     * <p>
     * The range uses the natural ordering of the elements to determine where values lie in the range.
     * </p>
     *
     * <p>
     * The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.
     * </p>
     *
     * @param fromInclusive the first value that defines the edge of the range, inclusive.
     * @param toInclusive the second value that defines the edge of the range, inclusive.
     * @return the range object, not null.
     */
    public static DoubleRange of(final double fromInclusive, final double toInclusive)","0","-","-","-","-"
"5562","of","/**
     * Creates a range with the specified minimum and maximum values (both inclusive).
     *
     * <p>
     * The range uses the natural ordering of the elements to determine where values lie in the range.
     * </p>
     *
     * <p>
     * The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.
     * </p>
     *
     * @param fromInclusive the first value that defines the edge of the range, inclusive.
     * @param toInclusive the second value that defines the edge of the range, inclusive.
     * @return the range object, not null.
     * @throws IllegalArgumentException if either element is null.
     */
    public static DoubleRange of(final Double fromInclusive, final Double toInclusive)","0","-","-","-","-"
"5563","DoubleRange","/**
     * Creates an instance.
     *
     * @param number1 the first element, not null
     * @param number2 the second element, not null
     * @throws NullPointerException when element1 is null.
     * @throws NullPointerException when element2 is null.
     */
    private DoubleRange(final Double number1, final Double number2)","0","-","-","-","-"
"5564","binaryBeMsb0ToHexDigit","/**
     * Converts the first 4 bits of a binary (represented as boolean array) in big-endian Msb0
     * bit ordering to a hexadecimal digit.
     *
     * <p>
     * (1, 0, 0, 0) is converted as follow: '8' (1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0) is converted
     * to '4'
     * </p>
     *
     * @param src the binary to convert
     * @return a hexadecimal digit representing the selected bits
     * @throws IllegalArgumentException if","0","-","-","-","-"
"5565","binaryBeMsb0ToHexDigit","/**
     * Converts a binary (represented as boolean array) in big-endian Msb0 bit ordering to a
     * hexadecimal digit.
     *
     * <p>
     * (1, 0, 0, 0) with srcPos = 0 is converted as follow: '8' (1, 0, 0, 0, 0, 0, 0, 0,
     * 0, 0, 0, 1, 0, 1, 0, 0) with srcPos = 2 is converted to '5'
     * </p>
     *
     * @param src the binary to convert
     * @param srcPos the position of the lsb to start the conversion
     * @return a hexadecimal digit representing the selected bits
     * @throws IllegalArgumentException if","0","-","-","-","-"
"5566","binaryToByte","/**
     * Converts binary (represented as boolean array) into a byte using the default (little
     * endian, Lsb0) byte and bit ordering.
     *
     * @param src the binary to convert
     * @param srcPos the position in","0","-","-","-","-"
"5567","binaryToHexDigit","/**
     * Converts binary (represented as boolean array) to a hexadecimal digit using the default
     * (Lsb0) bit ordering.
     *
     * <p>
     * (1, 0, 0, 0) is converted as follow: '1'
     * </p>
     *
     * @param src the binary to convert
     * @return a hexadecimal digit representing the selected bits
     * @throws IllegalArgumentException if","0","-","-","-","-"
"5568","binaryToHexDigit","/**
     * Converts binary (represented as boolean array) to a hexadecimal digit using the default
     * (Lsb0) bit ordering.
     *
     * <p>
     * (1, 0, 0, 0) is converted as follow: '1'
     * </p>
     *
     * @param src the binary to convert
     * @param srcPos the position of the lsb to start the conversion
     * @return a hexadecimal digit representing the selected bits
     * @throws IllegalArgumentException if","0","-","-","-","-"
"5569","binaryToHexDigitMsb0_4bits","/**
     * Converts binary (represented as boolean array) to a hexadecimal digit using the Msb0 bit
     * ordering.
     *
     * <p>
     * (1, 0, 0, 0) is converted as follow: '8'
     * </p>
     *
     * @param src the binary to convert
     * @return a hexadecimal digit representing the selected bits
     * @throws IllegalArgumentException if","0","-","-","-","-"
"5570","binaryToHexDigitMsb0_4bits","/**
     * Converts binary (represented as boolean array) to a hexadecimal digit using the Msb0 bit
     * ordering.
     *
     * <p>
     * (1, 0, 0, 0) is converted as follow: '8' (1, 0, 0, 1, 1, 0, 1, 0) with srcPos = 3 is converted
     * to 'D'
     * </p>
     *
     * @param src the binary to convert
     * @param srcPos the position of the lsb to start the conversion
     * @return a hexadecimal digit representing the selected bits
     * @throws IllegalArgumentException if","0","-","-","-","-"
"5571","binaryToInt","/**
     * Converts binary (represented as boolean array) into an int using the default (little
     * endian, Lsb0) byte and bit ordering.
     *
     * @param src the binary to convert
     * @param srcPos the position in","0","-","-","-","-"
"5572","binaryToLong","/**
     * Converts binary (represented as boolean array) into a long using the default (little
     * endian, Lsb0) byte and bit ordering.
     *
     * @param src the binary to convert
     * @param srcPos the position in","0","-","-","-","-"
"5573","binaryToShort","/**
     * Converts binary (represented as boolean array) into a short using the default (little
     * endian, Lsb0) byte and bit ordering.
     *
     * @param src the binary to convert
     * @param srcPos the position in","0","-","-","-","-"
"5574","byteArrayToInt","/**
     * Converts an array of byte into an int using the default (little-endian, Lsb0) byte and bit
     * ordering.
     *
     * @param src the byte array to convert
     * @param srcPos the position in","0","-","-","-","-"
"5575","byteArrayToLong","/**
     * Converts an array of byte into a long using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the byte array to convert
     * @param srcPos the position in","0","-","-","-","-"
"5576","byteArrayToShort","/**
     * Converts an array of byte into a short using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the byte array to convert
     * @param srcPos the position in","0","-","-","-","-"
"5577","byteArrayToUuid","/**
     * Converts bytes from an array into a UUID using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the byte array to convert
     * @param srcPos the position in","0","-","-","-","-"
"5578","byteToBinary","/**
     * Converts a byte into an array of boolean using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the byte to convert
     * @param srcPos the position in","0","-","-","-","-"
"5579","byteToHex","/**
     * Converts a byte into an array of Char using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the byte to convert
     * @param srcPos the position in","0","-","-","-","-"
"5580","hexDigitMsb0ToBinary","/**
     * Converts a hexadecimal digit into binary (represented as boolean array) using the Msb0
     * bit ordering.
     *
     * <p>
     * '1' is converted as follow: (0, 0, 0, 1)
     * </p>
     *
     * @param hexDigit the hexadecimal digit to convert
     * @return a boolean array with the binary representation of","0","-","-","-","-"
"5581","hexDigitMsb0ToInt","/**
     * Converts a hexadecimal digit into an int using the Msb0 bit ordering.
     *
     * <p>
     * '1' is converted to 8
     * </p>
     *
     * @param hexDigit the hexadecimal digit to convert
     * @return an int equals to","0","-","-","-","-"
"5582","hexDigitToBinary","/**
     * Converts a hexadecimal digit into binary (represented as boolean array) using the default
     * (Lsb0) bit ordering.
     *
     * <p>
     * '1' is converted as follow: (1, 0, 0, 0)
     * </p>
     *
     * @param hexDigit the hexadecimal digit to convert
     * @return a boolean array with the binary representation of","0","-","-","-","-"
"5583","hexDigitToInt","/**
     * Converts a hexadecimal digit into an int using the default (Lsb0) bit ordering.
     *
     * <p>
     * '1' is converted to 1
     * </p>
     *
     * @param hexDigit the hexadecimal digit to convert
     * @return an int equals to","0","-","-","-","-"
"5584","hexToByte","/**
     * Converts a hexadecimal string into a byte using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the hexadecimal string to convert
     * @param srcPos the position in","0","-","-","-","-"
"5585","hexToInt","/**
     * Converts an array of Char into an int using the default (little-endian, Lsb0) byte and bit
     * ordering.
     *
     * @param src the hexadecimal string to convert
     * @param srcPos the position in","0","-","-","-","-"
"5586","hexToLong","/**
     * Converts an array of Char into a long using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the hexadecimal string to convert
     * @param srcPos the position in","0","-","-","-","-"
"5587","hexToShort","/**
     * Converts an array of Char into a short using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the hexadecimal string to convert
     * @param srcPos the position in","0","-","-","-","-"
"5588","intArrayToLong","/**
     * Converts an array of int into a long using the default (little-endian, Lsb0) byte and bit
     * ordering.
     *
     * @param src the int array to convert
     * @param srcPos the position in","0","-","-","-","-"
"5589","intToBinary","/**
     * Converts an int into an array of boolean using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the int to convert
     * @param srcPos the position in","0","-","-","-","-"
"5590","intToByteArray","/**
     * Converts an int into an array of byte using the default (little-endian, Lsb0) byte and bit
     * ordering.
     *
     * @param src the int to convert
     * @param srcPos the position in","0","-","-","-","-"
"5591","intToHex","/**
     * Converts an int into an array of Char using the default (little-endian, Lsb0) byte and bit
     * ordering.
     *
     * @param src the int to convert
     * @param srcPos the position in","0","-","-","-","-"
"5592","intToHexDigit","/**
     * Converts the 4 lsb of an int to a hexadecimal digit.
     *
     * <p>
     * 0 returns '0'
     * </p>
     * <p>
     * 1 returns '1'
     * </p>
     * <p>
     * 10 returns 'A' and so on...
     * </p>
     *
     * @param nibble the 4 bits to convert
     * @return a hexadecimal digit representing the 4 lsb of","0","-","-","-","-"
"5593","intToHexDigitMsb0","/**
     * Converts the 4 lsb of an int to a hexadecimal digit encoded using the Msb0 bit ordering.
     *
     * <p>
     * 0 returns '0'
     * </p>
     * <p>
     * 1 returns '8'
     * </p>
     * <p>
     * 10 returns '5' and so on...
     * </p>
     *
     * @param nibble the 4 bits to convert
     * @return a hexadecimal digit representing the 4 lsb of","0","-","-","-","-"
"5594","intToShortArray","/**
     * Converts an int into an array of short using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the int to convert
     * @param srcPos the position in","0","-","-","-","-"
"5595","longToBinary","/**
     * Converts a long into an array of boolean using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the long to convert
     * @param srcPos the position in","0","-","-","-","-"
"5596","longToByteArray","/**
     * Converts a long into an array of byte using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the long to convert
     * @param srcPos the position in","0","-","-","-","-"
"5597","longToHex","/**
     * Converts a long into an array of Char using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the long to convert
     * @param srcPos the position in","0","-","-","-","-"
"5598","longToIntArray","/**
     * Converts a long into an array of int using the default (little-endian, Lsb0) byte and bit
     * ordering.
     *
     * @param src the long to convert
     * @param srcPos the position in","0","-","-","-","-"
"5599","longToShortArray","/**
     * Converts a long into an array of short using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the long to convert
     * @param srcPos the position in","0","-","-","-","-"
"5600","shortArrayToInt","/**
     * Converts an array of short into an int using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the short array to convert
     * @param srcPos the position in","0","-","-","-","-"
"5601","shortArrayToLong","/**
     * Converts an array of short into a long using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the short array to convert
     * @param srcPos the position in","0","-","-","-","-"
"5602","shortToBinary","/**
     * Converts a short into an array of boolean using the default (little-endian, Lsb0) byte
     * and bit ordering.
     *
     * @param src the short to convert
     * @param srcPos the position in","0","-","-","-","-"
"5603","shortToByteArray","/**
     * Converts a short into an array of byte using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the short to convert
     * @param srcPos the position in","0","-","-","-","-"
"5604","shortToHex","/**
     * Converts a short into an array of Char using the default (little-endian, Lsb0) byte and
     * bit ordering.
     *
     * @param src the short to convert
     * @param srcPos the position in","0","-","-","-","-"
"5605","uuidToByteArray","/**
     * Converts UUID into an array of byte using the default (little-endian, Lsb0) byte and bit
     * ordering.
     *
     * @param src the UUID to convert
     * @param dst the destination array
     * @param dstPos the position in","0","-","-","-","-"
"5606","Conversion","/**
     * Constructs a new instance.
     *
     * @deprecated Will be removed in 4.0.0.
     */
    @Deprecated
    public Conversion()","0","-","-","-","-"
"5607","getEnvironmentVariable","/**
     * Gets an environment variable, defaulting to","0","-","-","-","-"
"5608","getHostName","/**
     * Gets the host name from an environment variable (","0","-","-","-","-"
"5609","getJavaHome","/**
     * Gets the current Java home directory as a","0","-","-","-","-"
"5610","getJavaHomePath","/**
     * Gets the current Java home directory as a","0","-","-","-","-"
"5611","getJavaIoTmpDir","/**
     * Gets the current Java IO temporary directory as a","0","-","-","-","-"
"5612","getJavaIoTmpDirPath","/**
     * Gets the current Java IO temporary directory as a","0","-","-","-","-"
"5613","getJavaVersionMatches","/**
     * Tests if the Java version matches the version we are running.
     * <p>
     * The result depends on the value of the","0","-","-","-","-"
"5614","getOsMatches","/**
     * Tests if the operating system matches the given name prefix and version prefix.
     * <p>
     * The result depends on the value of the","0","-","-","-","-"
"5615","getOsNameMatches","/**
     * Tests if the operating system matches the given string with a case-insensitive comparison.
     * <p>
     * The result depends on the value of the","0","-","-","-","-"
"5616","getUserDir","/**
     * Gets the current user directory as a","0","-","-","-","-"
"5617","getUserDirPath","/**
     * Gets the current user directory as a","0","-","-","-","-"
"5618","getUserHome","/**
     * Gets the current user home directory as a","0","-","-","-","-"
"5619","getUserHomePath","/**
     * Gets the current user home directory as a","0","-","-","-","-"
"5620","getUserName","/**
     * Gets the current user name.
     * <p>
     * The result is based on the system property","0","-","-","-","-"
"5621","getUserName","/**
     * Gets the user name.
     * <p>
     * The result is based on the system property","0","-","-","-","-"
"5622","isJavaAwtHeadless","/**
     * Tests whether the","0","-","-","-","-"
"5623","isJavaVersionAtLeast","/**
     * Tests whether the Java version at least the requested version.
     * <p>
     * The result is based on the system property saved in","0","-","-","-","-"
"5624","isJavaVersionAtMost","/**
     * Tests whether the Java version at most the requested version.
     * <p>
     * The result is based on the system property saved in","0","-","-","-","-"
"5625","isJavaVersionMatch","/**
     * Tests whether the Java version matches.
     *
     * <p>
     * This method is package private instead of private to support unit test invocation.
     * </p>
     *
     * @param version       the actual Java version
     * @param versionPrefix the prefix for the expected Java version
     * @return true if matches, or false if not or can't determine
     */
    static boolean isJavaVersionMatch(final String version, final String versionPrefix)","0","-","-","-","-"
"5626","isOsMatch","/**
     * Tests whether the operating system matches.
     * <p>
     * This method is package private instead of private to support unit test invocation.
     * </p>
     *
     * @param osName          the actual OS name
     * @param osVersion       the actual OS version
     * @param osNamePrefix    the prefix for the expected OS name
     * @param osVersionPrefix the prefix for the expected OS version
     * @return true if matches, or false if not or can't determine
     */
    static boolean isOsMatch(final String osName, final String osVersion, final String osNamePrefix, final String osVersionPrefix)","0","-","-","-","-"
"5627","isOsNameMatch","/**
     * Tests whether the operating system matches with a case-insensitive comparison.
     * <p>
     * This method is package private instead of private to support unit test invocation.
     * </p>
     *
     * @param osName       the actual OS name.
     * @param osNamePrefix the prefix for the expected OS name.
     * @return true for a case-insensitive match, or false if not.
     */
    static boolean isOsNameMatch(final String osName, final String osNamePrefix)","0","-","-","-","-"
"5628","isOsVersionMatch","/**
     * Tests whether the operating system version matches.
     * <p>
     * This method is package private instead of private to support unit test invocation.
     * </p>
     *
     * @param osVersion       the actual OS version
     * @param osVersionPrefix the prefix for the expected OS version
     * @return true if matches, or false if not or can't determine
     */
    static boolean isOsVersionMatch(final String osVersion, final String osVersionPrefix)","0","-","-","-","-"
"5629","SystemUtils","/**
     * SystemUtils instances shouldn't be constructed in standard programming. Instead, elements should be accessed directly, for example
     *","0","-","-","-","-"
"5630","MutableByte","/**
     * Constructs a new MutableByte with the default value of zero.
     */
    public MutableByte()","0","-","-","-","-"
"5631","MutableByte","/**
     * Constructs a new MutableByte with the specified value.
     *
     * @param value  the initial value to store
     */
    public MutableByte(final byte value)","0","-","-","-","-"
"5632","MutableByte","/**
     * Constructs a new MutableByte with the specified value.
     *
     * @param value  the initial value to store, not null
     * @throws NullPointerException if the object is null
     */
    public MutableByte(final Number value)","0","-","-","-","-"
"5633","MutableByte","/**
     * Constructs a new MutableByte parsing the given string.
     *
     * @param value  the string to parse, not null
     * @throws NumberFormatException if the string cannot be parsed into a byte, see","0","-","-","-","-"
"5634","add","/**
     * Adds a value to the value of this instance.
     *
     * @param operand  the value to add, not null
     * @since 2.2
     */
    public void add(final byte operand)","0","-","-","-","-"
"5635","add","/**
     * Adds a value to the value of this instance.
     *
     * @param operand  the value to add, not null
     * @throws NullPointerException if the object is null
     * @since 2.2
     */
    public void add(final Number operand)","0","-","-","-","-"
"5636","addAndGet","/**
     * Increments this instance's value by","0","-","-","-","-"
"5637","addAndGet","/**
     * Increments this instance's value by","0","-","-","-","-"
"5638","byteValue","/**
     * Returns the value of this MutableByte as a byte.
     *
     * @return the numeric value represented by this object after conversion to type byte.
     */
    @Override
    public byte byteValue()","0","-","-","-","-"
"5639","compareTo","/**
     * Compares this mutable to another in ascending order.
     *
     * @param other  the other mutable to compare to, not null
     * @return negative if this is less, zero if equal, positive if greater
     */
    @Override
    public int compareTo(final MutableByte other)","0","-","-","-","-"
"5640","decrement","/**
     * Decrements the value.
     *
     * @since 2.2
     */
    public void decrement()","0","-","-","-","-"
"5641","decrementAndGet","/**
     * Decrements this instance's value by 1; this method returns the value associated with the instance
     * immediately after the decrement operation. This method is not thread safe.
     *
     * @return the value associated with the instance after it is decremented
     * @since 3.5
     */
    public byte decrementAndGet()","0","-","-","-","-"
"5642","doubleValue","/**
     * Returns the value of this MutableByte as a double.
     *
     * @return the numeric value represented by this object after conversion to type double.
     */
    @Override
    public double doubleValue()","0","-","-","-","-"
"5643","equals","/**
     * Compares this object to the specified object. The result is","0","-","-","-","-"
"5644","floatValue","/**
     * Returns the value of this MutableByte as a float.
     *
     * @return the numeric value represented by this object after conversion to type float.
     */
    @Override
    public float floatValue()","0","-","-","-","-"
"5645","getAndAdd","/**
     * Increments this instance's value by","0","-","-","-","-"
"5646","getAndAdd","/**
     * Increments this instance's value by","0","-","-","-","-"
"5647","getAndDecrement","/**
     * Decrements this instance's value by 1; this method returns the value associated with the instance
     * immediately prior to the decrement operation. This method is not thread safe.
     *
     * @return the value associated with the instance before it was decremented
     * @since 3.5
     */
    public byte getAndDecrement()","0","-","-","-","-"
"5648","getAndIncrement","/**
     * Increments this instance's value by 1; this method returns the value associated with the instance
     * immediately prior to the increment operation. This method is not thread safe.
     *
     * @return the value associated with the instance before it was incremented
     * @since 3.5
     */
    public byte getAndIncrement()","0","-","-","-","-"
"5649","getValue","/**
     * Gets the value as a Byte instance.
     *
     * @return the value as a Byte, never null
     */
    @Override
    public Byte getValue()","0","-","-","-","-"
"5650","hashCode","/**
     * Returns a suitable hash code for this mutable.
     *
     * @return a suitable hash code
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"5651","increment","/**
     * Increments the value.
     *
     * @since 2.2
     */
    public void increment()","0","-","-","-","-"
"5652","incrementAndGet","/**
     * Increments this instance's value by 1; this method returns the value associated with the instance
     * immediately after the increment operation. This method is not thread safe.
     *
     * @return the value associated with the instance after it is incremented
     * @since 3.5
     */
    public byte incrementAndGet()","0","-","-","-","-"
"5653","intValue","/**
     * Returns the value of this MutableByte as an int.
     *
     * @return the numeric value represented by this object after conversion to type int.
     */
    @Override
    public int intValue()","0","-","-","-","-"
"5654","longValue","/**
     * Returns the value of this MutableByte as a long.
     *
     * @return the numeric value represented by this object after conversion to type long.
     */
    @Override
    public long longValue()","0","-","-","-","-"
"5655","setValue","/**
     * Sets the value.
     *
     * @param value  the value to set
     */
    public void setValue(final byte value)","0","-","-","-","-"
"5656","setValue","/**
     * Sets the value from any Number instance.
     *
     * @param value  the value to set, not null
     * @throws NullPointerException if the object is null
     */
    @Override
    public void setValue(final Number value)","0","-","-","-","-"
"5657","subtract","/**
     * Subtracts a value from the value of this instance.
     *
     * @param operand  the value to subtract, not null
     * @since 2.2
     */
    public void subtract(final byte operand)","0","-","-","-","-"
"5658","subtract","/**
     * Subtracts a value from the value of this instance.
     *
     * @param operand  the value to subtract, not null
     * @throws NullPointerException if the object is null
     * @since 2.2
     */
    public void subtract(final Number operand)","0","-","-","-","-"
"5659","toByte","/**
     * Gets this mutable as an instance of Byte.
     *
     * @return a Byte instance containing the value from this mutable
     */
    public Byte toByte()","0","-","-","-","-"
"5660","toString","/**
     * Returns the String value of this mutable.
     *
     * @return the mutable value as a string
     */
    @Override
    public String toString()","0","-","-","-","-"
"5661","MutableBoolean","/**
     * Constructs a new MutableBoolean with the default value of false.
     */
    public MutableBoolean()","0","-","-","-","-"
"5662","MutableBoolean","/**
     * Constructs a new MutableBoolean with the specified value.
     *
     * @param value  the initial value to store
     */
    public MutableBoolean(final boolean value)","0","-","-","-","-"
"5663","MutableBoolean","/**
     * Constructs a new MutableBoolean with the specified value.
     *
     * @param value  the initial value to store, not null
     * @throws NullPointerException if the object is null
     */
    public MutableBoolean(final Boolean value)","0","-","-","-","-"
"5664","booleanValue","/**
     * Returns the value of this MutableBoolean as a boolean.
     *
     * @return the boolean value represented by this object.
     */
    public boolean booleanValue()","0","-","-","-","-"
"5665","compareTo","/**
     * Compares this mutable to another in ascending order.
     *
     * @param other  the other mutable to compare to, not null
     * @return negative if this is less, zero if equal, positive if greater
     *  where false is less than true
     */
    @Override
    public int compareTo(final MutableBoolean other)","0","-","-","-","-"
"5666","equals","/**
     * Compares this object to the specified object. The result is","0","-","-","-","-"
"5667","getValue","/**
     * Gets the value as a Boolean instance.
     *
     * @return the value as a Boolean, never null
     */
    @Override
    public Boolean getValue()","0","-","-","-","-"
"5668","hashCode","/**
     * Returns a suitable hash code for this mutable.
     *
     * @return the hash code returned by","0","-","-","-","-"
"5669","isFalse","/**
     * Checks if the current value is","0","-","-","-","-"
"5670","isTrue","/**
     * Checks if the current value is","0","-","-","-","-"
"5671","setFalse","/**
     * Sets the value to false.
     *
     * @since 3.3
     */
    public void setFalse()","0","-","-","-","-"
"5672","setTrue","/**
     * Sets the value to true.
     *
     * @since 3.3
     */
    public void setTrue()","0","-","-","-","-"
"5673","setValue","/**
     * Sets the value.
     *
     * @param value  the value to set
     */
    public void setValue(final boolean value)","0","-","-","-","-"
"5674","setValue","/**
     * Sets the value from any Boolean instance.
     *
     * @param value  the value to set, not null
     * @throws NullPointerException if the object is null
     */
    @Override
    public void setValue(final Boolean value)","0","-","-","-","-"
"5675","toBoolean","/**
     * Gets this mutable as an instance of Boolean.
     *
     * @return a Boolean instance containing the value from this mutable, never null
     * @since 2.5
     */
    public Boolean toBoolean()","0","-","-","-","-"
"5676","toString","/**
     * Returns the String value of this mutable.
     *
     * @return the mutable value as a string
     */
    @Override
    public String toString()","0","-","-","-","-"
"5677","MutableLong","/**
     * Constructs a new MutableLong with the default value of zero.
     */
    public MutableLong()","0","-","-","-","-"
"5678","MutableLong","/**
     * Constructs a new MutableLong with the specified value.
     *
     * @param value  the initial value to store
     */
    public MutableLong(final long value)","0","-","-","-","-"
"5679","MutableLong","/**
     * Constructs a new MutableLong with the specified value.
     *
     * @param value  the initial value to store, not null
     * @throws NullPointerException if the object is null
     */
    public MutableLong(final Number value)","0","-","-","-","-"
"5680","MutableLong","/**
     * Constructs a new MutableLong parsing the given string.
     *
     * @param value  the string to parse, not null
     * @throws NumberFormatException if the string cannot be parsed into a long, see","0","-","-","-","-"
"5681","add","/**
     * Adds a value to the value of this instance.
     *
     * @param operand  the value to add, not null
     * @since 2.2
     */
    public void add(final long operand)","0","-","-","-","-"
"5682","add","/**
     * Adds a value to the value of this instance.
     *
     * @param operand  the value to add, not null
     * @throws NullPointerException if the object is null
     * @since 2.2
     */
    public void add(final Number operand)","0","-","-","-","-"
"5683","addAndGet","/**
     * Increments this instance's value by","0","-","-","-","-"
"5684","addAndGet","/**
     * Increments this instance's value by","0","-","-","-","-"
"5685","compareTo","/**
     * Compares this mutable to another in ascending order.
     *
     * @param other  the other mutable to compare to, not null
     * @return negative if this is less, zero if equal, positive if greater
     */
    @Override
    public int compareTo(final MutableLong other)","0","-","-","-","-"
"5686","decrement","/**
     * Decrements the value.
     *
     * @since 2.2
     */
    public void decrement()","0","-","-","-","-"
"5687","decrementAndGet","/**
     * Decrements this instance's value by 1; this method returns the value associated with the instance
     * immediately after the decrement operation. This method is not thread safe.
     *
     * @return the value associated with the instance after it is decremented
     * @since 3.5
     */
    public long decrementAndGet()","0","-","-","-","-"
"5688","doubleValue","/**
     * Returns the value of this MutableLong as a double.
     *
     * @return the numeric value represented by this object after conversion to type double.
     */
    @Override
    public double doubleValue()","0","-","-","-","-"
"5689","equals","/**
     * Compares this object to the specified object. The result is","0","-","-","-","-"
"5690","floatValue","/**
     * Returns the value of this MutableLong as a float.
     *
     * @return the numeric value represented by this object after conversion to type float.
     */
    @Override
    public float floatValue()","0","-","-","-","-"
"5691","getAndAdd","/**
     * Increments this instance's value by","0","-","-","-","-"
"5692","getAndAdd","/**
     * Increments this instance's value by","0","-","-","-","-"
"5693","getAndDecrement","/**
     * Decrements this instance's value by 1; this method returns the value associated with the instance
     * immediately prior to the decrement operation. This method is not thread safe.
     *
     * @return the value associated with the instance before it was decremented
     * @since 3.5
     */
    public long getAndDecrement()","0","-","-","-","-"
"5694","getAndIncrement","/**
     * Increments this instance's value by 1; this method returns the value associated with the instance
     * immediately prior to the increment operation. This method is not thread safe.
     *
     * @return the value associated with the instance before it was incremented
     * @since 3.5
     */
    public long getAndIncrement()","0","-","-","-","-"
"5695","getValue","/**
     * Gets the value as a Long instance.
     *
     * @return the value as a Long, never null
     */
    @Override
    public Long getValue()","0","-","-","-","-"
"5696","hashCode","/**
     * Returns a suitable hash code for this mutable.
     *
     * @return a suitable hash code
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"5697","increment","/**
     * Increments the value.
     *
     * @since 2.2
     */
    public void increment()","0","-","-","-","-"
"5698","incrementAndGet","/**
     * Increments this instance's value by 1; this method returns the value associated with the instance
     * immediately after the increment operation. This method is not thread safe.
     *
     * @return the value associated with the instance after it is incremented
     * @since 3.5
     */
    public long incrementAndGet()","0","-","-","-","-"
"5699","intValue","/**
     * Returns the value of this MutableLong as an int.
     *
     * @return the numeric value represented by this object after conversion to type int.
     */
    @Override
    public int intValue()","0","-","-","-","-"
"5700","longValue","/**
     * Returns the value of this MutableLong as a long.
     *
     * @return the numeric value represented by this object after conversion to type long.
     */
    @Override
    public long longValue()","0","-","-","-","-"
"5701","setValue","/**
     * Sets the value.
     *
     * @param value  the value to set
     */
    public void setValue(final long value)","0","-","-","-","-"
"5702","setValue","/**
     * Sets the value from any Number instance.
     *
     * @param value  the value to set, not null
     * @throws NullPointerException if the object is null
     */
    @Override
    public void setValue(final Number value)","0","-","-","-","-"
"5703","subtract","/**
     * Subtracts a value from the value of this instance.
     *
     * @param operand  the value to subtract, not null
     * @since 2.2
     */
    public void subtract(final long operand)","0","-","-","-","-"
"5704","subtract","/**
     * Subtracts a value from the value of this instance.
     *
     * @param operand  the value to subtract, not null
     * @throws NullPointerException if the object is null
     * @since 2.2
     */
    public void subtract(final Number operand)","0","-","-","-","-"
"5705","toLong","/**
     * Gets this mutable as an instance of Long.
     *
     * @return a Long instance containing the value from this mutable, never null
     */
    public Long toLong()","0","-","-","-","-"
"5706","toString","/**
     * Returns the String value of this mutable.
     *
     * @return the mutable value as a string
     */
    @Override
    public String toString()","0","-","-","-","-"
"5707","getValue","/**
     * Gets the value of this mutable.
     *
     * @return the stored value
     */
    T getValue();","0","-","-","-","-"
"5708","setValue","/**
     * Sets the value of this mutable.
     *
     * @param value
     *            the value to store
     * @throws NullPointerException
     *             if the object is null and null is invalid
     * @throws ClassCastException
     *             if the type is invalid
     */
    void setValue(T value);","0","-","-","-","-"
"5709","MutableDouble","/**
     * Constructs a new MutableDouble with the default value of zero.
     */
    public MutableDouble()","0","-","-","-","-"
"5710","MutableDouble","/**
     * Constructs a new MutableDouble with the specified value.
     *
     * @param value  the initial value to store
     */
    public MutableDouble(final double value)","0","-","-","-","-"
"5711","MutableDouble","/**
     * Constructs a new MutableDouble with the specified value.
     *
     * @param value  the initial value to store, not null
     * @throws NullPointerException if the object is null
     */
    public MutableDouble(final Number value)","0","-","-","-","-"
"5712","MutableDouble","/**
     * Constructs a new MutableDouble parsing the given string.
     *
     * @param value  the string to parse, not null
     * @throws NumberFormatException if the string cannot be parsed into a double, see","0","-","-","-","-"
"5713","add","/**
     * Adds a value to the value of this instance.
     *
     * @param operand  the value to add
     * @since 2.2
     */
    public void add(final double operand)","0","-","-","-","-"
"5714","add","/**
     * Adds a value to the value of this instance.
     *
     * @param operand  the value to add, not null
     * @throws NullPointerException if the object is null
     * @since 2.2
     */
    public void add(final Number operand)","0","-","-","-","-"
"5715","addAndGet","/**
     * Increments this instance's value by","0","-","-","-","-"
"5716","addAndGet","/**
     * Increments this instance's value by","0","-","-","-","-"
"5717","compareTo","/**
     * Compares this mutable to another in ascending order.
     *
     * @param other  the other mutable to compare to, not null
     * @return negative if this is less, zero if equal, positive if greater
     */
    @Override
    public int compareTo(final MutableDouble other)","0","-","-","-","-"
"5718","decrement","/**
     * Decrements the value.
     *
     * @since 2.2
     */
    public void decrement()","0","-","-","-","-"
"5719","decrementAndGet","/**
     * Decrements this instance's value by 1; this method returns the value associated with the instance
     * immediately after the decrement operation. This method is not thread safe.
     *
     * @return the value associated with the instance after it is decremented
     * @since 3.5
     */
    public double decrementAndGet()","0","-","-","-","-"
"5720","doubleValue","/**
     * Returns the value of this MutableDouble as a double.
     *
     * @return the numeric value represented by this object after conversion to type double.
     */
    @Override
    public double doubleValue()","0","-","-","-","-"
"5721","equals","/**
     * Compares this object against the specified object. The result is","0","-","-","-","-"
"5722","floatValue","/**
     * Returns the value of this MutableDouble as a float.
     *
     * @return the numeric value represented by this object after conversion to type float.
     */
    @Override
    public float floatValue()","0","-","-","-","-"
"5723","getAndAdd","/**
     * Increments this instance's value by","0","-","-","-","-"
"5724","getAndAdd","/**
     * Increments this instance's value by","0","-","-","-","-"
"5725","getAndDecrement","/**
     * Decrements this instance's value by 1; this method returns the value associated with the instance
     * immediately prior to the decrement operation. This method is not thread safe.
     *
     * @return the value associated with the instance before it was decremented
     * @since 3.5
     */
    public double getAndDecrement()","0","-","-","-","-"
"5726","getAndIncrement","/**
     * Increments this instance's value by 1; this method returns the value associated with the instance
     * immediately prior to the increment operation. This method is not thread safe.
     *
     * @return the value associated with the instance before it was incremented
     * @since 3.5
     */
    public double getAndIncrement()","0","-","-","-","-"
"5727","getValue","/**
     * Gets the value as a Double instance.
     *
     * @return the value as a Double, never null
     */
    @Override
    public Double getValue()","0","-","-","-","-"
"5728","hashCode","/**
     * Returns a suitable hash code for this mutable.
     *
     * @return a suitable hash code
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"5729","increment","/**
     * Increments the value.
     *
     * @since 2.2
     */
    public void increment()","0","-","-","-","-"
"5730","incrementAndGet","/**
     * Increments this instance's value by 1; this method returns the value associated with the instance
     * immediately after the increment operation. This method is not thread safe.
     *
     * @return the value associated with the instance after it is incremented
     * @since 3.5
     */
    public double incrementAndGet()","0","-","-","-","-"
"5731","intValue","/**
     * Returns the value of this MutableDouble as an int.
     *
     * @return the numeric value represented by this object after conversion to type int.
     */
    @Override
    public int intValue()","0","-","-","-","-"
"5732","isInfinite","/**
     * Checks whether the double value is infinite.
     *
     * @return true if infinite
     */
    public boolean isInfinite()","0","-","-","-","-"
"5733","isNaN","/**
     * Checks whether the double value is the special NaN value.
     *
     * @return true if NaN
     */
    public boolean isNaN()","0","-","-","-","-"
"5734","longValue","/**
     * Returns the value of this MutableDouble as a long.
     *
     * @return the numeric value represented by this object after conversion to type long.
     */
    @Override
    public long longValue()","0","-","-","-","-"
"5735","setValue","/**
     * Sets the value.
     *
     * @param value  the value to set
     */
    public void setValue(final double value)","0","-","-","-","-"
"5736","setValue","/**
     * Sets the value from any Number instance.
     *
     * @param value  the value to set, not null
     * @throws NullPointerException if the object is null
     */
    @Override
    public void setValue(final Number value)","0","-","-","-","-"
"5737","subtract","/**
     * Subtracts a value from the value of this instance.
     *
     * @param operand  the value to subtract, not null
     * @since 2.2
     */
    public void subtract(final double operand)","0","-","-","-","-"
"5738","subtract","/**
     * Subtracts a value from the value of this instance.
     *
     * @param operand  the value to subtract, not null
     * @throws NullPointerException if the object is null
     * @since 2.2
     */
    public void subtract(final Number operand)","0","-","-","-","-"
"5739","toDouble","/**
     * Gets this mutable as an instance of Double.
     *
     * @return a Double instance containing the value from this mutable, never null
     */
    public Double toDouble()","0","-","-","-","-"
"5740","toString","/**
     * Returns the String value of this mutable.
     *
     * @return the mutable value as a string
     */
    @Override
    public String toString()","0","-","-","-","-"
"5741","MutableInt","/**
     * Constructs a new MutableInt with the default value of zero.
     */
    public MutableInt()","0","-","-","-","-"
"5742","MutableInt","/**
     * Constructs a new MutableInt with the specified value.
     *
     * @param value  the initial value to store
     */
    public MutableInt(final int value)","0","-","-","-","-"
"5743","MutableInt","/**
     * Constructs a new MutableInt with the specified value.
     *
     * @param value  the initial value to store, not null
     * @throws NullPointerException if the object is null
     */
    public MutableInt(final Number value)","0","-","-","-","-"
"5744","MutableInt","/**
     * Constructs a new MutableInt parsing the given string.
     *
     * @param value  the string to parse, not null
     * @throws NumberFormatException if the string cannot be parsed into an int, see","0","-","-","-","-"
"5745","add","/**
     * Adds a value to the value of this instance.
     *
     * @param operand  the value to add, not null
     * @since 2.2
     */
    public void add(final int operand)","0","-","-","-","-"
"5746","add","/**
     * Adds a value to the value of this instance.
     *
     * @param operand  the value to add, not null
     * @throws NullPointerException if the object is null
     * @since 2.2
     */
    public void add(final Number operand)","0","-","-","-","-"
"5747","addAndGet","/**
     * Increments this instance's value by","0","-","-","-","-"
"5748","addAndGet","/**
     * Increments this instance's value by","0","-","-","-","-"
"5749","compareTo","/**
     * Compares this mutable to another in ascending order.
     *
     * @param other  the other mutable to compare to, not null
     * @return negative if this is less, zero if equal, positive if greater
     */
    @Override
    public int compareTo(final MutableInt other)","0","-","-","-","-"
"5750","decrement","/**
     * Decrements the value.
     *
     * @since 2.2
     */
    public void decrement()","0","-","-","-","-"
"5751","decrementAndGet","/**
     * Decrements this instance's value by 1; this method returns the value associated with the instance
     * immediately after the decrement operation. This method is not thread safe.
     *
     * @return the value associated with the instance after it is decremented
     * @since 3.5
     */
    public int decrementAndGet()","0","-","-","-","-"
"5752","doubleValue","/**
     * Returns the value of this MutableInt as a double.
     *
     * @return the numeric value represented by this object after conversion to type double.
     */
    @Override
    public double doubleValue()","0","-","-","-","-"
"5753","equals","/**
     * Compares this object to the specified object. The result is","0","-","-","-","-"
"5754","floatValue","/**
     * Returns the value of this MutableInt as a float.
     *
     * @return the numeric value represented by this object after conversion to type float.
     */
    @Override
    public float floatValue()","0","-","-","-","-"
"5755","getAndAdd","/**
     * Increments this instance's value by","0","-","-","-","-"
"5756","getAndAdd","/**
     * Increments this instance's value by","0","-","-","-","-"
"5757","getAndDecrement","/**
     * Decrements this instance's value by 1; this method returns the value associated with the instance
     * immediately prior to the decrement operation. This method is not thread safe.
     *
     * @return the value associated with the instance before it was decremented
     * @since 3.5
     */
    public int getAndDecrement()","0","-","-","-","-"
"5758","getAndIncrement","/**
     * Increments this instance's value by 1; this method returns the value associated with the instance
     * immediately prior to the increment operation. This method is not thread safe.
     *
     * @return the value associated with the instance before it was incremented
     * @since 3.5
     */
    public int getAndIncrement()","0","-","-","-","-"
"5759","getValue","/**
     * Gets the value as a Integer instance.
     *
     * @return the value as a Integer, never null
     */
    @Override
    public Integer getValue()","0","-","-","-","-"
"5760","hashCode","/**
     * Returns a suitable hash code for this mutable.
     *
     * @return a suitable hash code
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"5761","increment","/**
     * Increments the value.
     *
     * @since 2.2
     */
    public void increment()","0","-","-","-","-"
"5762","incrementAndGet","/**
     * Increments this instance's value by 1; this method returns the value associated with the instance
     * immediately after the increment operation. This method is not thread safe.
     *
     * @return the value associated with the instance after it is incremented
     * @since 3.5
     */
    public int incrementAndGet()","0","-","-","-","-"
"5763","intValue","/**
     * Returns the value of this MutableInt as an int.
     *
     * @return the numeric value represented by this object after conversion to type int.
     */
    @Override
    public int intValue()","0","-","-","-","-"
"5764","longValue","/**
     * Returns the value of this MutableInt as a long.
     *
     * @return the numeric value represented by this object after conversion to type long.
     */
    @Override
    public long longValue()","0","-","-","-","-"
"5765","setValue","/**
     * Sets the value.
     *
     * @param value  the value to set
     */
    public void setValue(final int value)","0","-","-","-","-"
"5766","setValue","/**
     * Sets the value from any Number instance.
     *
     * @param value  the value to set, not null
     * @throws NullPointerException if the object is null
     */
    @Override
    public void setValue(final Number value)","0","-","-","-","-"
"5767","subtract","/**
     * Subtracts a value from the value of this instance.
     *
     * @param operand  the value to subtract, not null
     * @since 2.2
     */
    public void subtract(final int operand)","0","-","-","-","-"
"5768","subtract","/**
     * Subtracts a value from the value of this instance.
     *
     * @param operand  the value to subtract, not null
     * @throws NullPointerException if the object is null
     * @since 2.2
     */
    public void subtract(final Number operand)","0","-","-","-","-"
"5769","toInteger","/**
     * Gets this mutable as an instance of Integer.
     *
     * @return an Integer instance containing the value from this mutable, never null
     */
    public Integer toInteger()","0","-","-","-","-"
"5770","toString","/**
     * Returns the String value of this mutable.
     *
     * @return the mutable value as a string
     */
    @Override
    public String toString()","0","-","-","-","-"
"5771","MutableObject","/**
     * Constructs a new MutableObject with the default value of","0","-","-","-","-"
"5772","MutableObject","/**
     * Constructs a new MutableObject with the specified value.
     *
     * @param value  the initial value to store
     */
    public MutableObject(final T value)","0","-","-","-","-"
"5773","equals","/**
     * Compares this object against the specified object. The result is","0","-","-","-","-"
"5774","getValue","/**
     * Gets the value.
     *
     * @return the value, may be null
     */
    @Override
    public T getValue()","0","-","-","-","-"
"5775","hashCode","/**
     * Returns the value's hash code or","0","-","-","-","-"
"5776","setValue","/**
     * Sets the value.
     *
     * @param value  the value to set
     */
    @Override
    public void setValue(final T value)","0","-","-","-","-"
"5777","toString","/**
     * Returns the String value of this mutable.
     *
     * @return the mutable value as a string
     */
    @Override
    public String toString()","0","-","-","-","-"
"5778","MutableFloat","/**
     * Constructs a new MutableFloat with the default value of zero.
     */
    public MutableFloat()","0","-","-","-","-"
"5779","MutableFloat","/**
     * Constructs a new MutableFloat with the specified value.
     *
     * @param value  the initial value to store
     */
    public MutableFloat(final float value)","0","-","-","-","-"
"5780","MutableFloat","/**
     * Constructs a new MutableFloat with the specified value.
     *
     * @param value  the initial value to store, not null
     * @throws NullPointerException if the object is null
     */
    public MutableFloat(final Number value)","0","-","-","-","-"
"5781","MutableFloat","/**
     * Constructs a new MutableFloat parsing the given string.
     *
     * @param value  the string to parse, not null
     * @throws NumberFormatException if the string cannot be parsed into a float, see","0","-","-","-","-"
"5782","add","/**
     * Adds a value to the value of this instance.
     *
     * @param operand  the value to add, not null
     * @since 2.2
     */
    public void add(final float operand)","0","-","-","-","-"
"5783","add","/**
     * Adds a value to the value of this instance.
     *
     * @param operand  the value to add, not null
     * @throws NullPointerException if the object is null
     * @since 2.2
     */
    public void add(final Number operand)","0","-","-","-","-"
"5784","addAndGet","/**
     * Increments this instance's value by","0","-","-","-","-"
"5785","addAndGet","/**
     * Increments this instance's value by","0","-","-","-","-"
"5786","compareTo","/**
     * Compares this mutable to another in ascending order.
     *
     * @param other  the other mutable to compare to, not null
     * @return negative if this is less, zero if equal, positive if greater
     */
    @Override
    public int compareTo(final MutableFloat other)","0","-","-","-","-"
"5787","decrement","/**
     * Decrements the value.
     *
     * @since 2.2
     */
    public void decrement()","0","-","-","-","-"
"5788","decrementAndGet","/**
     * Decrements this instance's value by 1; this method returns the value associated with the instance
     * immediately after the decrement operation. This method is not thread safe.
     *
     * @return the value associated with the instance after it is decremented
     * @since 3.5
     */
    public float decrementAndGet()","0","-","-","-","-"
"5789","doubleValue","/**
     * Returns the value of this MutableFloat as a double.
     *
     * @return the numeric value represented by this object after conversion to type double.
     */
    @Override
    public double doubleValue()","0","-","-","-","-"
"5790","equals","/**
     * Compares this object against some other object. The result is","0","-","-","-","-"
"5791","floatValue","/**
     * Returns the value of this MutableFloat as a float.
     *
     * @return the numeric value represented by this object after conversion to type float.
     */
    @Override
    public float floatValue()","0","-","-","-","-"
"5792","getAndAdd","/**
     * Increments this instance's value by","0","-","-","-","-"
"5793","getAndAdd","/**
     * Increments this instance's value by","0","-","-","-","-"
"5794","getAndDecrement","/**
     * Decrements this instance's value by 1; this method returns the value associated with the instance
     * immediately prior to the decrement operation. This method is not thread safe.
     *
     * @return the value associated with the instance before it was decremented
     * @since 3.5
     */
    public float getAndDecrement()","0","-","-","-","-"
"5795","getAndIncrement","/**
     * Increments this instance's value by 1; this method returns the value associated with the instance
     * immediately prior to the increment operation. This method is not thread safe.
     *
     * @return the value associated with the instance before it was incremented
     * @since 3.5
     */
    public float getAndIncrement()","0","-","-","-","-"
"5796","getValue","/**
     * Gets the value as a Float instance.
     *
     * @return the value as a Float, never null
     */
    @Override
    public Float getValue()","0","-","-","-","-"
"5797","hashCode","/**
     * Returns a suitable hash code for this mutable.
     *
     * @return a suitable hash code
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"5798","increment","/**
     * Increments the value.
     *
     * @since 2.2
     */
    public void increment()","0","-","-","-","-"
"5799","incrementAndGet","/**
     * Increments this instance's value by 1; this method returns the value associated with the instance
     * immediately after the increment operation. This method is not thread safe.
     *
     * @return the value associated with the instance after it is incremented
     * @since 3.5
     */
    public float incrementAndGet()","0","-","-","-","-"
"5800","intValue","/**
     * Returns the value of this MutableFloat as an int.
     *
     * @return the numeric value represented by this object after conversion to type int.
     */
    @Override
    public int intValue()","0","-","-","-","-"
"5801","isInfinite","/**
     * Checks whether the float value is infinite.
     *
     * @return true if infinite
     */
    public boolean isInfinite()","0","-","-","-","-"
"5802","isNaN","/**
     * Checks whether the float value is the special NaN value.
     *
     * @return true if NaN
     */
    public boolean isNaN()","0","-","-","-","-"
"5803","longValue","/**
     * Returns the value of this MutableFloat as a long.
     *
     * @return the numeric value represented by this object after conversion to type long.
     */
    @Override
    public long longValue()","0","-","-","-","-"
"5804","setValue","/**
     * Sets the value.
     *
     * @param value  the value to set
     */
    public void setValue(final float value)","0","-","-","-","-"
"5805","setValue","/**
     * Sets the value from any Number instance.
     *
     * @param value  the value to set, not null
     * @throws NullPointerException if the object is null
     */
    @Override
    public void setValue(final Number value)","0","-","-","-","-"
"5806","subtract","/**
     * Subtracts a value from the value of this instance.
     *
     * @param operand  the value to subtract
     * @since 2.2
     */
    public void subtract(final float operand)","0","-","-","-","-"
"5807","subtract","/**
     * Subtracts a value from the value of this instance.
     *
     * @param operand  the value to subtract, not null
     * @throws NullPointerException if the object is null
     * @since 2.2
     */
    public void subtract(final Number operand)","0","-","-","-","-"
"5808","toFloat","/**
     * Gets this mutable as an instance of Float.
     *
     * @return a Float instance containing the value from this mutable, never null
     */
    public Float toFloat()","0","-","-","-","-"
"5809","toString","/**
     * Returns the String value of this mutable.
     *
     * @return the mutable value as a string
     */
    @Override
    public String toString()","0","-","-","-","-"
"5810","MutableShort","/**
     * Constructs a new MutableShort with the default value of zero.
     */
    public MutableShort()","0","-","-","-","-"
"5811","MutableShort","/**
     * Constructs a new MutableShort with the specified value.
     *
     * @param value  the initial value to store, not null
     * @throws NullPointerException if the object is null
     */
    public MutableShort(final Number value)","0","-","-","-","-"
"5812","MutableShort","/**
     * Constructs a new MutableShort with the specified value.
     *
     * @param value  the initial value to store
     */
    public MutableShort(final short value)","0","-","-","-","-"
"5813","MutableShort","/**
     * Constructs a new MutableShort parsing the given string.
     *
     * @param value  the string to parse, not null
     * @throws NumberFormatException if the string cannot be parsed into a short, see","0","-","-","-","-"
"5814","add","/**
     * Adds a value to the value of this instance.
     *
     * @param operand  the value to add, not null
     * @throws NullPointerException if the object is null
     * @since 2.2
     */
    public void add(final Number operand)","0","-","-","-","-"
"5815","add","/**
     * Adds a value to the value of this instance.
     *
     * @param operand  the value to add, not null
     * @since 2.2
     */
    public void add(final short operand)","0","-","-","-","-"
"5816","addAndGet","/**
     * Increments this instance's value by","0","-","-","-","-"
"5817","addAndGet","/**
     * Increments this instance's value by","0","-","-","-","-"
"5818","compareTo","/**
     * Compares this mutable to another in ascending order.
     *
     * @param other  the other mutable to compare to, not null
     * @return negative if this is less, zero if equal, positive if greater
     */
    @Override
    public int compareTo(final MutableShort other)","0","-","-","-","-"
"5819","decrement","/**
     * Decrements the value.
     *
     * @since 2.2
     */
    public void decrement()","0","-","-","-","-"
"5820","decrementAndGet","/**
     * Decrements this instance's value by 1; this method returns the value associated with the instance
     * immediately after the decrement operation. This method is not thread safe.
     *
     * @return the value associated with the instance after it is decremented
     * @since 3.5
     */
    public short decrementAndGet()","0","-","-","-","-"
"5821","doubleValue","/**
     * Returns the value of this MutableShort as a double.
     *
     * @return the numeric value represented by this object after conversion to type double.
     */
    @Override
    public double doubleValue()","0","-","-","-","-"
"5822","equals","/**
     * Compares this object to the specified object. The result is","0","-","-","-","-"
"5823","floatValue","/**
     * Returns the value of this MutableShort as a float.
     *
     * @return the numeric value represented by this object after conversion to type float.
     */
    @Override
    public float floatValue()","0","-","-","-","-"
"5824","getAndAdd","/**
     * Increments this instance's value by","0","-","-","-","-"
"5825","getAndAdd","/**
     * Increments this instance's value by","0","-","-","-","-"
"5826","getAndDecrement","/**
     * Decrements this instance's value by 1; this method returns the value associated with the instance
     * immediately prior to the decrement operation. This method is not thread safe.
     *
     * @return the value associated with the instance before it was decremented
     * @since 3.5
     */
    public short getAndDecrement()","0","-","-","-","-"
"5827","getAndIncrement","/**
     * Increments this instance's value by 1; this method returns the value associated with the instance
     * immediately prior to the increment operation. This method is not thread safe.
     *
     * @return the value associated with the instance before it was incremented
     * @since 3.5
     */
    public short getAndIncrement()","0","-","-","-","-"
"5828","getValue","/**
     * Gets the value as a Short instance.
     *
     * @return the value as a Short, never null
     */
    @Override
    public Short getValue()","0","-","-","-","-"
"5829","hashCode","/**
     * Returns a suitable hash code for this mutable.
     *
     * @return a suitable hash code
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"5830","increment","/**
     * Increments the value.
     *
     * @since 2.2
     */
    public void increment()","0","-","-","-","-"
"5831","incrementAndGet","/**
     * Increments this instance's value by 1; this method returns the value associated with the instance
     * immediately after the increment operation. This method is not thread safe.
     *
     * @return the value associated with the instance after it is incremented
     * @since 3.5
     */
    public short incrementAndGet()","0","-","-","-","-"
"5832","intValue","/**
     * Returns the value of this MutableShort as an int.
     *
     * @return the numeric value represented by this object after conversion to type int.
     */
    @Override
    public int intValue()","0","-","-","-","-"
"5833","longValue","/**
     * Returns the value of this MutableShort as a long.
     *
     * @return the numeric value represented by this object after conversion to type long.
     */
    @Override
    public long longValue()","0","-","-","-","-"
"5834","setValue","/**
     * Sets the value from any Number instance.
     *
     * @param value  the value to set, not null
     * @throws NullPointerException if the object is null
     */
    @Override
    public void setValue(final Number value)","0","-","-","-","-"
"5835","setValue","/**
     * Sets the value.
     *
     * @param value  the value to set
     */
    public void setValue(final short value)","0","-","-","-","-"
"5836","shortValue","/**
     * Returns the value of this MutableShort as a short.
     *
     * @return the numeric value represented by this object after conversion to type short.
     */
    @Override
    public short shortValue()","0","-","-","-","-"
"5837","subtract","/**
     * Subtracts a value from the value of this instance.
     *
     * @param operand  the value to subtract, not null
     * @throws NullPointerException if the object is null
     * @since 2.2
     */
    public void subtract(final Number operand)","0","-","-","-","-"
"5838","subtract","/**
     * Subtracts a value from the value of this instance.
     *
     * @param operand  the value to subtract, not null
     * @since 2.2
     */
    public void subtract(final short operand)","0","-","-","-","-"
"5839","toShort","/**
     * Gets this mutable as an instance of Short.
     *
     * @return a Short instance containing the value from this mutable, never null
     */
    public Short toShort()","0","-","-","-","-"
"5840","toString","/**
     * Returns the String value of this mutable.
     *
     * @return the mutable value as a string
     */
    @Override
    public String toString()","0","-","-","-","-"
"5841","abbreviate","/**
     * Abbreviates a String using ellipses. This will turn
     * ""Now is the time for all good men"" into ""Now is the time for...""
     *
     * <p>Specifically:</p>
     * <ul>
     *   <li>If the number of characters in","0","-","-","-","-"
"5842","abbreviate","/**
     * Abbreviates a String using ellipses. This will turn
     * ""Now is the time for all good men"" into ""...is the time for...""
     *
     * <p>Works like","0","-","-","-","-"
"5843","abbreviate","/**
     * Abbreviates a String using another given String as replacement marker. This will turn
     * ""Now is the time for all good men"" into ""Now is the time for..."" if ""..."" was defined
     * as the replacement marker.
     *
     * <p>Specifically:</p>
     * <ul>
     *   <li>If the number of characters in","0","-","-","-","-"
"5844","abbreviate","/**
     * Abbreviates a String using a given replacement marker. This will turn
     * ""Now is the time for all good men"" into ""...is the time for..."" if ""..."" was defined
     * as the replacement marker.
     *
     * <p>Works like","0","-","-","-","-"
"5845","abbreviateMiddle","/**
     * Abbreviates a String to the length passed, replacing the middle characters with the supplied
     * replacement String.
     *
     * <p>This abbreviation only occurs if the following criteria is met:</p>
     * <ul>
     * <li>Neither the String for abbreviation nor the replacement String are null or empty </li>
     * <li>The length to truncate to is less than the length of the supplied String</li>
     * <li>The length to truncate to is greater than 0</li>
     * <li>The abbreviated String will have enough room for the length supplied replacement String
     * and the first and last characters of the supplied String for abbreviation</li>
     * </ul>
     * <p>Otherwise, the returned String will be the same as the supplied String for abbreviation.
     * </p>
     *
     * <pre>
     * StringUtils.abbreviateMiddle(null, null, 0)    = null
     * StringUtils.abbreviateMiddle(""abc"", null, 0)   = ""abc""
     * StringUtils.abbreviateMiddle(""abc"", ""."", 0)    = ""abc""
     * StringUtils.abbreviateMiddle(""abc"", ""."", 3)    = ""abc""
     * StringUtils.abbreviateMiddle(""abcdef"", ""."", 4) = ""ab.f""
     * </pre>
     *
     * @param str  the String to abbreviate, may be null
     * @param middle the String to replace the middle characters with, may be null
     * @param length the length to abbreviate","0","-","-","-","-"
"5846","appendIfMissing","/**
     * Appends the suffix to the end of the string if the string does not already end with any of the suffixes.
     *
     * <pre>
     * StringUtils.appendIfMissing(null, null)      = null
     * StringUtils.appendIfMissing(""abc"", null)     = ""abc""
     * StringUtils.appendIfMissing("""", ""xyz""        = ""xyz""
     * StringUtils.appendIfMissing(""abc"", ""xyz"")    = ""abcxyz""
     * StringUtils.appendIfMissing(""abcxyz"", ""xyz"") = ""abcxyz""
     * StringUtils.appendIfMissing(""abcXYZ"", ""xyz"") = ""abcXYZxyz""
     * </pre>
     * <p>
     * With additional suffixes,
     * </p>
     *
     * <pre>
     * StringUtils.appendIfMissing(null, null, null)       = null
     * StringUtils.appendIfMissing(""abc"", null, null)      = ""abc""
     * StringUtils.appendIfMissing("""", ""xyz"", null)        = ""xyz""
     * StringUtils.appendIfMissing(""abc"", ""xyz"", new CharSequence[]","0","-","-","-","-"
"5847","appendIfMissingIgnoreCase","/**
     * Appends the suffix to the end of the string if the string does not
     * already end, case-insensitive, with any of the suffixes.
     *
     * <pre>
     * StringUtils.appendIfMissingIgnoreCase(null, null)      = null
     * StringUtils.appendIfMissingIgnoreCase(""abc"", null)     = ""abc""
     * StringUtils.appendIfMissingIgnoreCase("""", ""xyz"")       = ""xyz""
     * StringUtils.appendIfMissingIgnoreCase(""abc"", ""xyz"")    = ""abcxyz""
     * StringUtils.appendIfMissingIgnoreCase(""abcxyz"", ""xyz"") = ""abcxyz""
     * StringUtils.appendIfMissingIgnoreCase(""abcXYZ"", ""xyz"") = ""abcXYZ""
     * </pre>
     * <p>With additional suffixes,</p>
     * <pre>
     * StringUtils.appendIfMissingIgnoreCase(null, null, null)       = null
     * StringUtils.appendIfMissingIgnoreCase(""abc"", null, null)      = ""abc""
     * StringUtils.appendIfMissingIgnoreCase("""", ""xyz"", null)        = ""xyz""
     * StringUtils.appendIfMissingIgnoreCase(""abc"", ""xyz"", new CharSequence[]","0","-","-","-","-"
"5848","capitalize","/**
     * Capitalizes a String changing the first character to title case as
     * per","0","-","-","-","-"
"5849","center","/**
     * Centers a String in a larger String of size","0","-","-","-","-"
"5850","center","/**
     * Centers a String in a larger String of size","0","-","-","-","-"
"5851","center","/**
     * Centers a String in a larger String of size","0","-","-","-","-"
"5852","chomp","/**
     * Removes one newline from end of a String if it's there,
     * otherwise leave it alone.  A newline is &quot;","0","-","-","-","-"
"5853","chomp","/**
     * Removes","0","-","-","-","-"
"5854","chop","/**
     * Remove the last character from a String.
     *
     * <p>If the String ends in","0","-","-","-","-"
"5855","compare","/**
     * Compare two Strings lexicographically, as per","0","-","-","-","-"
"5856","compare","/**
     * Compare two Strings lexicographically, as per","0","-","-","-","-"
"5857","compareIgnoreCase","/**
     * Compare two Strings lexicographically, ignoring case differences,
     * as per","0","-","-","-","-"
"5858","compareIgnoreCase","/**
     * Compare two Strings lexicographically, ignoring case differences,
     * as per","0","-","-","-","-"
"5859","contains","/**
     * Tests if CharSequence contains a search CharSequence, handling","0","-","-","-","-"
"5860","contains","/**
     * Tests if CharSequence contains a search character, handling","0","-","-","-","-"
"5861","containsAny","/**
     * Tests if the CharSequence contains any character in the given
     * set of characters.
     *
     * <p>A","0","-","-","-","-"
"5862","containsAny","/**
     * Tests if the CharSequence contains any character in the given set of characters.
     *
     * <p>
     * A","0","-","-","-","-"
"5863","containsAny","/**
     * Tests if the CharSequence contains any of the CharSequences in the given array.
     *
     * <p>
     * A","0","-","-","-","-"
"5864","containsAnyIgnoreCase","/**
     * Tests if the CharSequence contains any of the CharSequences in the given array, ignoring case.
     *
     * <p>
     * A","0","-","-","-","-"
"5865","containsIgnoreCase","/**
     * Tests if CharSequence contains a search CharSequence irrespective of case,
     * handling","0","-","-","-","-"
"5866","containsNone","/**
     * Tests that the CharSequence does not contain certain characters.
     *
     * <p>A","0","-","-","-","-"
"5867","containsNone","/**
     * Tests that the CharSequence does not contain certain characters.
     *
     * <p>A","0","-","-","-","-"
"5868","containsOnly","/**
     * Tests if the CharSequence contains only certain characters.
     *
     * <p>A","0","-","-","-","-"
"5869","containsOnly","/**
     * Tests if the CharSequence contains only certain characters.
     *
     * <p>A","0","-","-","-","-"
"5870","containsWhitespace","/**
     * Tests whether the given CharSequence contains any whitespace characters.
     *
     * <p>Whitespace is defined by","0","-","-","-","-"
"5871","convertRemainingAccentCharacters","private static void convertRemainingAccentCharacters(final StringBuilder decomposed)","0","-","-","-","-"
"5872","countMatches","/**
     * Counts how many times the char appears in the given string.
     *
     * <p>A","0","-","-","-","-"
"5873","countMatches","/**
     * Counts how many times the substring appears in the larger string.
     * Note that the code only counts non-overlapping matches.
     *
     * <p>A","0","-","-","-","-"
"5874","defaultIfBlank","/**
     * Returns either the passed in CharSequence, or if the CharSequence is
     * whitespace, empty ("""") or","0","-","-","-","-"
"5875","defaultIfEmpty","/**
     * Returns either the passed in CharSequence, or if the CharSequence is
     * empty or","0","-","-","-","-"
"5876","defaultString","/**
     * Returns either the passed in String,
     * or if the String is","0","-","-","-","-"
"5877","defaultString","/**
     * Returns either the given String, or if the String is
     *","0","-","-","-","-"
"5878","deleteWhitespace","/**
     * Deletes all whitespaces from a String as defined by
     *","0","-","-","-","-"
"5879","difference","/**
     * Compares two Strings, and returns the portion where they differ.
     * More precisely, return the remainder of the second String,
     * starting from where it's different from the first. This means that
     * the difference between ""abc"" and ""ab"" is the empty String and not ""c"".
     *
     * <p>For example,
     *","0","-","-","-","-"
"5880","endsWith","/**
     * Tests if a CharSequence ends with a specified suffix.
     *
     * <p>","0","-","-","-","-"
"5881","endsWithAny","/**
     * Tests if a CharSequence ends with any of the provided case-sensitive suffixes.
     *
     * <pre>
     * StringUtils.endsWithAny(null, null)                  = false
     * StringUtils.endsWithAny(null, new String[]","0","-","-","-","-"
"5882","endsWithIgnoreCase","/**
     * Case-insensitive check if a CharSequence ends with a specified suffix.
     *
     * <p>","0","-","-","-","-"
"5883","equals","/**
     * Compares two CharSequences, returning","0","-","-","-","-"
"5884","equalsAny","/**
     * Compares given","0","-","-","-","-"
"5885","equalsAnyIgnoreCase","/**
     * Compares given","0","-","-","-","-"
"5886","equalsIgnoreCase","/**
     * Compares two CharSequences, returning","0","-","-","-","-"
"5887","firstNonBlank","/**
     * Returns the first value in the array which is not empty (""""),
     *","0","-","-","-","-"
"5888","firstNonEmpty","/**
     * Returns the first value in the array which is not empty.
     *
     * <p>If all values are empty or the array is","0","-","-","-","-"
"5889","getBytes","/**
     * Calls","0","-","-","-","-"
"5890","getBytes","/**
     * Calls","0","-","-","-","-"
"5891","getCommonPrefix","/**
     * Compares all Strings in an array and returns the initial sequence of
     * characters that is common to all of them.
     *
     * <p>For example,
     *","0","-","-","-","-"
"5892","getDigits","/**
     * Checks if a String","0","-","-","-","-"
"5893","getFuzzyDistance","/**
     * Find the Fuzzy Distance which indicates the similarity score between two Strings.
     *
     * <p>This string matching algorithm is similar to the algorithms of editors such as Sublime Text,
     * TextMate, Atom and others. One point is given for every matched character. Subsequent
     * matches yield two bonus points. A higher score indicates a higher similarity.</p>
     *
     * <pre>
     * StringUtils.getFuzzyDistance(null, null, null)                                    = IllegalArgumentException
     * StringUtils.getFuzzyDistance("""", """", Locale.ENGLISH)                              = 0
     * StringUtils.getFuzzyDistance(""Workshop"", ""b"", Locale.ENGLISH)                     = 0
     * StringUtils.getFuzzyDistance(""Room"", ""o"", Locale.ENGLISH)                         = 1
     * StringUtils.getFuzzyDistance(""Workshop"", ""w"", Locale.ENGLISH)                     = 1
     * StringUtils.getFuzzyDistance(""Workshop"", ""ws"", Locale.ENGLISH)                    = 2
     * StringUtils.getFuzzyDistance(""Workshop"", ""wo"", Locale.ENGLISH)                    = 4
     * StringUtils.getFuzzyDistance(""Apache Software Foundation"", ""asf"", Locale.ENGLISH) = 3
     * </pre>
     *
     * @param term a full term that should be matched against, must not be null
     * @param query the query that will be matched against a term, must not be null
     * @param locale This string matching logic is case-insensitive. A locale is necessary to normalize
     *  both Strings to lower case.
     * @return result score
     * @throws IllegalArgumentException if either String input","0","-","-","-","-"
"5894","getIfBlank","/**
     * Returns either the passed in CharSequence, or if the CharSequence is
     * whitespace, empty ("""") or","0","-","-","-","-"
"5895","getIfEmpty","/**
     * Returns either the passed in CharSequence, or if the CharSequence is
     * empty or","0","-","-","-","-"
"5896","getJaroWinklerDistance","/**
     * Find the Jaro Winkler Distance which indicates the similarity score between two Strings.
     *
     * <p>The Jaro measure is the weighted sum of percentage of matched characters from each file and transposed characters.
     * Winkler increased this measure for matching initial characters.</p>
     *
     * <p>This implementation is based on the Jaro Winkler similarity algorithm
     * from <a href=""https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance"">https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance</a>.</p>
     *
     * <pre>
     * StringUtils.getJaroWinklerDistance(null, null)          = IllegalArgumentException
     * StringUtils.getJaroWinklerDistance("""", """")              = 0.0
     * StringUtils.getJaroWinklerDistance("""", ""a"")             = 0.0
     * StringUtils.getJaroWinklerDistance(""aaapppp"", """")       = 0.0
     * StringUtils.getJaroWinklerDistance(""frog"", ""fog"")       = 0.93
     * StringUtils.getJaroWinklerDistance(""fly"", ""ant"")        = 0.0
     * StringUtils.getJaroWinklerDistance(""elephant"", ""hippo"") = 0.44
     * StringUtils.getJaroWinklerDistance(""hippo"", ""elephant"") = 0.44
     * StringUtils.getJaroWinklerDistance(""hippo"", ""zzzzzzzz"") = 0.0
     * StringUtils.getJaroWinklerDistance(""hello"", ""hallo"")    = 0.88
     * StringUtils.getJaroWinklerDistance(""ABC Corporation"", ""ABC Corp"") = 0.93
     * StringUtils.getJaroWinklerDistance(""D N H Enterprises Inc"", ""D &amp; H Enterprises, Inc."") = 0.95
     * StringUtils.getJaroWinklerDistance(""My Gym Children's Fitness Center"", ""My Gym. Childrens Fitness"") = 0.92
     * StringUtils.getJaroWinklerDistance(""PENNSYLVANIA"", ""PENNCISYLVNIA"") = 0.88
     * </pre>
     *
     * @param first the first String, must not be null
     * @param second the second String, must not be null
     * @return result distance
     * @throws IllegalArgumentException if either String input","0","-","-","-","-"
"5897","getLevenshteinDistance","/**
     * Find the Levenshtein distance between two Strings.
     *
     * <p>This is the number of changes needed to change one String into
     * another, where each change is a single character modification (deletion,
     * insertion or substitution).</p>
     *
     * <p>The implementation uses a single-dimensional array of length s.length() + 1. See
     * <a href=""https://blog.softwx.net/2014/12/optimizing-levenshtein-algorithm-in-c.html"">
     * https://blog.softwx.net/2014/12/optimizing-levenshtein-algorithm-in-c.html</a> for details.</p>
     *
     * <pre>
     * StringUtils.getLevenshteinDistance(null, *)             = IllegalArgumentException
     * StringUtils.getLevenshteinDistance(*, null)             = IllegalArgumentException
     * StringUtils.getLevenshteinDistance("""", """")              = 0
     * StringUtils.getLevenshteinDistance("""", ""a"")             = 1
     * StringUtils.getLevenshteinDistance(""aaapppp"", """")       = 7
     * StringUtils.getLevenshteinDistance(""frog"", ""fog"")       = 1
     * StringUtils.getLevenshteinDistance(""fly"", ""ant"")        = 3
     * StringUtils.getLevenshteinDistance(""elephant"", ""hippo"") = 7
     * StringUtils.getLevenshteinDistance(""hippo"", ""elephant"") = 7
     * StringUtils.getLevenshteinDistance(""hippo"", ""zzzzzzzz"") = 8
     * StringUtils.getLevenshteinDistance(""hello"", ""hallo"")    = 1
     * </pre>
     *
     * @param s  the first String, must not be null
     * @param t  the second String, must not be null
     * @return result distance
     * @throws IllegalArgumentException if either String input","0","-","-","-","-"
"5898","getLevenshteinDistance","/**
     * Find the Levenshtein distance between two Strings if it's less than or equal to a given
     * threshold.
     *
     * <p>This is the number of changes needed to change one String into
     * another, where each change is a single character modification (deletion,
     * insertion or substitution).</p>
     *
     * <p>This implementation follows from Algorithms on Strings, Trees and Sequences by Dan Gusfield
     * and Chas Emerick's implementation of the Levenshtein distance algorithm from
     * <a href=""https://web.archive.org/web/20120212021906/http%3A//www.merriampark.com/ld.htm"">http://www.merriampark.com/ld.htm</a></p>
     *
     * <pre>
     * StringUtils.getLevenshteinDistance(null, *, *)             = IllegalArgumentException
     * StringUtils.getLevenshteinDistance(*, null, *)             = IllegalArgumentException
     * StringUtils.getLevenshteinDistance(*, *, -1)               = IllegalArgumentException
     * StringUtils.getLevenshteinDistance("""", """", 0)              = 0
     * StringUtils.getLevenshteinDistance(""aaapppp"", """", 8)       = 7
     * StringUtils.getLevenshteinDistance(""aaapppp"", """", 7)       = 7
     * StringUtils.getLevenshteinDistance(""aaapppp"", """", 6))      = -1
     * StringUtils.getLevenshteinDistance(""elephant"", ""hippo"", 7) = 7
     * StringUtils.getLevenshteinDistance(""elephant"", ""hippo"", 6) = -1
     * StringUtils.getLevenshteinDistance(""hippo"", ""elephant"", 7) = 7
     * StringUtils.getLevenshteinDistance(""hippo"", ""elephant"", 6) = -1
     * </pre>
     *
     * @param s  the first String, must not be null
     * @param t  the second String, must not be null
     * @param threshold the target threshold, must not be negative
     * @return result distance, or","0","-","-","-","-"
"5899","indexOf","/**
     * Finds the first index within a CharSequence, handling","0","-","-","-","-"
"5900","indexOf","/**
     * Finds the first index within a CharSequence, handling","0","-","-","-","-"
"5901","indexOf","/**
     * Returns the index within","0","-","-","-","-"
"5902","indexOf","/**
     * Returns the index within","0","-","-","-","-"
"5903","indexOfAny","/**
     * Search a CharSequence to find the first index of any
     * character in the given set of characters.
     *
     * <p>A","0","-","-","-","-"
"5904","indexOfAny","/**
     * Find the first index of any of a set of potential substrings.
     *
     * <p>A","0","-","-","-","-"
"5905","indexOfAny","/**
     * Search a CharSequence to find the first index of any
     * character in the given set of characters.
     *
     * <p>A","0","-","-","-","-"
"5906","indexOfAnyBut","/**
     * Searches a CharSequence to find the first index of any
     * character not in the given set of characters, i.e.,
     * find index i of first char in cs such that (cs.codePointAt(i) ∉","0","-","-","-","-"
"5907","indexOfAnyBut","/**
     * Search a CharSequence to find the first index of any
     * character not in the given set of characters, i.e.,
     * find index i of first char in seq such that (seq.codePointAt(i) ∉","0","-","-","-","-"
"5908","indexOfDifference","/**
     * Compares all CharSequences in an array and returns the index at which the
     * CharSequences begin to differ.
     *
     * <p>For example,
     *","0","-","-","-","-"
"5909","indexOfDifference","/**
     * Compares two CharSequences, and returns the index at which the
     * CharSequences begin to differ.
     *
     * <p>For example,
     *","0","-","-","-","-"
"5910","indexOfIgnoreCase","/**
     * Case in-sensitive find of the first index within a CharSequence.
     *
     * <p>A","0","-","-","-","-"
"5911","indexOfIgnoreCase","/**
     * Case in-sensitive find of the first index within a CharSequence
     * from the specified position.
     *
     * <p>A","0","-","-","-","-"
"5912","isAllBlank","/**
     * Tests if all of the CharSequences are empty (""""), null or whitespace only.
     *
     * <p>Whitespace is defined by","0","-","-","-","-"
"5913","isAllEmpty","/**
     * Tests if all of the CharSequences are empty ("""") or null.
     *
     * <pre>
     * StringUtils.isAllEmpty(null)             = true
     * StringUtils.isAllEmpty(null, """")         = true
     * StringUtils.isAllEmpty(new String[]","0","-","-","-","-"
"5914","isAllLowerCase","/**
     * Tests if the CharSequence contains only lowercase characters.
     *
     * <p>","0","-","-","-","-"
"5915","isAllUpperCase","/**
     * Tests if the CharSequence contains only uppercase characters.
     *
     * <p>","0","-","-","-","-"
"5916","isAlpha","/**
     * Tests if the CharSequence contains only Unicode letters.
     *
     * <p>","0","-","-","-","-"
"5917","isAlphanumeric","/**
     * Tests if the CharSequence contains only Unicode letters or digits.
     *
     * <p>","0","-","-","-","-"
"5918","isAlphanumericSpace","/**
     * Tests if the CharSequence contains only Unicode letters, digits
     * or space (","0","-","-","-","-"
"5919","isAlphaSpace","/**
     * Tests if the CharSequence contains only Unicode letters and
     * space (' ').
     *
     * <p>","0","-","-","-","-"
"5920","isAnyBlank","/**
     * Tests if any of the CharSequences are empty ("""") or null or whitespace only.
     *
     * <p>Whitespace is defined by","0","-","-","-","-"
"5921","isAnyEmpty","/**
     * Tests if any of the CharSequences are empty ("""") or null.
     *
     * <pre>
     * StringUtils.isAnyEmpty((String) null)    = true
     * StringUtils.isAnyEmpty((String[]) null)  = false
     * StringUtils.isAnyEmpty(null, ""foo"")      = true
     * StringUtils.isAnyEmpty("""", ""bar"")        = true
     * StringUtils.isAnyEmpty(""bob"", """")        = true
     * StringUtils.isAnyEmpty(""  bob  "", null)  = true
     * StringUtils.isAnyEmpty("" "", ""bar"")       = false
     * StringUtils.isAnyEmpty(""foo"", ""bar"")     = false
     * StringUtils.isAnyEmpty(new String[]","0","-","-","-","-"
"5922","isAsciiPrintable","/**
     * Tests if the CharSequence contains only ASCII printable characters.
     *
     * <p>","0","-","-","-","-"
"5923","isBlank","/**
     * Tests if a CharSequence is empty (""""), null or whitespace only.
     *
     * <p>Whitespace is defined by","0","-","-","-","-"
"5924","isEmpty","/**
     * Tests if a CharSequence is empty ("""") or null.
     *
     * <pre>
     * StringUtils.isEmpty(null)      = true
     * StringUtils.isEmpty("""")        = true
     * StringUtils.isEmpty("" "")       = false
     * StringUtils.isEmpty(""bob"")     = false
     * StringUtils.isEmpty(""  bob  "") = false
     * </pre>
     *
     * <p>NOTE: This method changed in Lang version 2.0.
     * It no longer trims the CharSequence.
     * That functionality is available in isBlank().</p>
     *
     * @param cs  the CharSequence to check, may be null
     * @return","0","-","-","-","-"
"5925","isMixedCase","/**
     * Tests if the CharSequence contains mixed casing of both uppercase and lowercase characters.
     *
     * <p>","0","-","-","-","-"
"5926","isNoneBlank","/**
     * Tests if none of the CharSequences are empty (""""), null or whitespace only.
     *
     * <p>Whitespace is defined by","0","-","-","-","-"
"5927","isNoneEmpty","/**
     * Tests if none of the CharSequences are empty ("""") or null.
     *
     * <pre>
     * StringUtils.isNoneEmpty((String) null)    = false
     * StringUtils.isNoneEmpty((String[]) null)  = true
     * StringUtils.isNoneEmpty(null, ""foo"")      = false
     * StringUtils.isNoneEmpty("""", ""bar"")        = false
     * StringUtils.isNoneEmpty(""bob"", """")        = false
     * StringUtils.isNoneEmpty(""  bob  "", null)  = false
     * StringUtils.isNoneEmpty(new String[]","0","-","-","-","-"
"5928","isNotBlank","/**
     * Tests if a CharSequence is not empty (""""), not null and not whitespace only.
     *
     * <p>Whitespace is defined by","0","-","-","-","-"
"5929","isNotEmpty","/**
     * Tests if a CharSequence is not empty ("""") and not null.
     *
     * <pre>
     * StringUtils.isNotEmpty(null)      = false
     * StringUtils.isNotEmpty("""")        = false
     * StringUtils.isNotEmpty("" "")       = true
     * StringUtils.isNotEmpty(""bob"")     = true
     * StringUtils.isNotEmpty(""  bob  "") = true
     * </pre>
     *
     * @param cs  the CharSequence to check, may be null
     * @return","0","-","-","-","-"
"5930","isNumeric","/**
     * Tests if the CharSequence contains only Unicode digits.
     * A decimal point is not a Unicode digit and returns false.
     *
     * <p>","0","-","-","-","-"
"5931","isNumericSpace","/**
     * Tests if the CharSequence contains only Unicode digits or space
     * (","0","-","-","-","-"
"5932","isWhitespace","/**
     * Tests if the CharSequence contains only whitespace.
     *
     * <p>Whitespace is defined by","0","-","-","-","-"
"5933","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)             = null
     * StringUtils.join([], *)               = """"
     * StringUtils.join([null], *)           = """"
     * StringUtils.join([false, false], ';') = ""false;false""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @return the joined String,","0","-","-","-","-"
"5934","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)                  = null
     * StringUtils.join([], *)                    = """"
     * StringUtils.join([null], *)                = """"
     * StringUtils.join([true, false, true], ';') = ""true;false;true""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @param startIndex
     *            the first index to start joining from. It is an error to pass in a start index past the end of the
     *            array
     * @param endIndex
     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of
     *            the array
     * @return the joined String,","0","-","-","-","-"
"5935","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)         = null
     * StringUtils.join([], *)           = """"
     * StringUtils.join([null], *)       = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @return the joined String,","0","-","-","-","-"
"5936","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)         = null
     * StringUtils.join([], *)           = """"
     * StringUtils.join([null], *)       = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @param startIndex
     *            the first index to start joining from. It is an error to pass in a start index past the end of the
     *            array
     * @param endIndex
     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of
     *            the array
     * @return the joined String,","0","-","-","-","-"
"5937","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)         = null
     * StringUtils.join([], *)           = """"
     * StringUtils.join([null], *)       = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @return the joined String,","0","-","-","-","-"
"5938","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)         = null
     * StringUtils.join([], *)           = """"
     * StringUtils.join([null], *)       = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @param startIndex
     *            the first index to start joining from. It is an error to pass in a start index past the end of the
     *            array
     * @param endIndex
     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of
     *            the array
     * @return the joined String,","0","-","-","-","-"
"5939","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)               = null
     * StringUtils.join([], *)                 = """"
     * StringUtils.join([null], *)             = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @return the joined String,","0","-","-","-","-"
"5940","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)               = null
     * StringUtils.join([], *)                 = """"
     * StringUtils.join([null], *)             = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @param startIndex
     *            the first index to start joining from. It is an error to pass in a start index past the end of the
     *            array
     * @param endIndex
     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of
     *            the array
     * @return the joined String,","0","-","-","-","-"
"5941","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)               = null
     * StringUtils.join([], *)                 = """"
     * StringUtils.join([null], *)             = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @return the joined String,","0","-","-","-","-"
"5942","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)               = null
     * StringUtils.join([], *)                 = """"
     * StringUtils.join([null], *)             = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @param startIndex
     *            the first index to start joining from. It is an error to pass in a start index past the end of the
     *            array
     * @param endIndex
     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of
     *            the array
     * @return the joined String,","0","-","-","-","-"
"5943","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)               = null
     * StringUtils.join([], *)                 = """"
     * StringUtils.join([null], *)             = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param separator
     *            the separator character to use
     * @return the joined String,","0","-","-","-","-"
"5944","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)               = null
     * StringUtils.join([], *)                 = """"
     * StringUtils.join([null], *)             = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @param startIndex
     *            the first index to start joining from. It is an error to pass in a start index past the end of the
     *            array
     * @param endIndex
     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of
     *            the array
     * @return the joined String,","0","-","-","-","-"
"5945","join","/**
     * Joins the elements of the provided","0","-","-","-","-"
"5946","join","/**
     * Joins the elements of the provided","0","-","-","-","-"
"5947","join","/**
     * Joins the elements of the provided","0","-","-","-","-"
"5948","join","/**
     * Joins the elements of the provided","0","-","-","-","-"
"5949","join","/**
     * Joins the elements of the provided","0","-","-","-","-"
"5950","join","/**
     * Joins the elements of the provided","0","-","-","-","-"
"5951","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)               = null
     * StringUtils.join([], *)                 = """"
     * StringUtils.join([null], *)             = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param separator
     *            the separator character to use
     * @return the joined String,","0","-","-","-","-"
"5952","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)               = null
     * StringUtils.join([], *)                 = """"
     * StringUtils.join([null], *)             = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @param startIndex
     *            the first index to start joining from. It is an error to pass in a start index past the end of the
     *            array
     * @param endIndex
     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of
     *            the array
     * @return the joined String,","0","-","-","-","-"
"5953","join","/**
     * Joins the elements of the provided array into a single String
     * containing the provided list of elements.
     *
     * <p>No delimiter is added before or after the list.
     * Null objects or empty strings within the array are represented by
     * empty strings.</p>
     *
     * <pre>
     * StringUtils.join(null, *)               = null
     * StringUtils.join([], *)                 = """"
     * StringUtils.join([null], *)             = """"
     * StringUtils.join([""a"", ""b"", ""c""], ';')  = ""a;b;c""
     * StringUtils.join([""a"", ""b"", ""c""], null) = ""abc""
     * StringUtils.join([null, """", ""a""], ';')  = "";;a""
     * </pre>
     *
     * @param array  the array of values to join together, may be null
     * @param delimiter  the separator character to use
     * @return the joined String,","0","-","-","-","-"
"5954","join","/**
     * Joins the elements of the provided array into a single String
     * containing the provided list of elements.
     *
     * <p>No delimiter is added before or after the list.
     * Null objects or empty strings within the array are represented by
     * empty strings.</p>
     *
     * <pre>
     * StringUtils.join(null, *)               = null
     * StringUtils.join([], *)                 = """"
     * StringUtils.join([null], *)             = """"
     * StringUtils.join([""a"", ""b"", ""c""], ';')  = ""a;b;c""
     * StringUtils.join([""a"", ""b"", ""c""], null) = ""abc""
     * StringUtils.join([null, """", ""a""], ';')  = "";;a""
     * </pre>
     *
     * @param array  the array of values to join together, may be null
     * @param delimiter  the separator character to use
     * @param startIndex the first index to start joining from.  It is
     * an error to pass in a start index past the end of the array
     * @param endIndex the index to stop joining from (exclusive). It is
     * an error to pass in an end index past the end of the array
     * @return the joined String,","0","-","-","-","-"
"5955","join","/**
     * Joins the elements of the provided array into a single String
     * containing the provided list of elements.
     *
     * <p>No delimiter is added before or after the list.
     * A","0","-","-","-","-"
"5956","join","/**
     * Joins the elements of the provided array into a single String
     * containing the provided list of elements.
     *
     * <p>No delimiter is added before or after the list.
     * A","0","-","-","-","-"
"5957","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)               = null
     * StringUtils.join([], *)                 = """"
     * StringUtils.join([null], *)             = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @return the joined String,","0","-","-","-","-"
"5958","join","/**
     * Joins the elements of the provided array into a single String containing the provided list of elements.
     *
     * <p>
     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented
     * by empty strings.
     * </p>
     *
     * <pre>
     * StringUtils.join(null, *)               = null
     * StringUtils.join([], *)                 = """"
     * StringUtils.join([null], *)             = """"
     * StringUtils.join([1, 2, 3], ';')  = ""1;2;3""
     * StringUtils.join([1, 2, 3], null) = ""123""
     * </pre>
     *
     * @param array
     *            the array of values to join together, may be null
     * @param delimiter
     *            the separator character to use
     * @param startIndex
     *            the first index to start joining from. It is an error to pass in a start index past the end of the
     *            array
     * @param endIndex
     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of
     *            the array
     * @return the joined String,","0","-","-","-","-"
"5959","join","/**
     * Joins the elements of the provided array into a single String
     * containing the provided list of elements.
     *
     * <p>No separator is added to the joined String.
     * Null objects or empty strings within the array are represented by
     * empty strings.</p>
     *
     * <pre>
     * StringUtils.join(null)            = null
     * StringUtils.join([])              = """"
     * StringUtils.join([null])          = """"
     * StringUtils.join([""a"", ""b"", ""c""]) = ""abc""
     * StringUtils.join([null, """", ""a""]) = ""a""
     * </pre>
     *
     * @param <T> the specific type of values to join together
     * @param elements  the values to join together, may be null
     * @return the joined String,","0","-","-","-","-"
"5960","joinWith","/**
     * Joins the elements of the provided varargs into a
     * single String containing the provided elements.
     *
     * <p>No delimiter is added before or after the list.
     *","0","-","-","-","-"
"5961","lastIndexOf","/**
     * Finds the last index within a CharSequence, handling","0","-","-","-","-"
"5962","lastIndexOf","/**
     * Finds the last index within a CharSequence, handling","0","-","-","-","-"
"5963","lastIndexOf","/**
     * Returns the index within","0","-","-","-","-"
"5964","lastIndexOf","/**
     * Returns the index within","0","-","-","-","-"
"5965","lastIndexOfAny","/**
     * Find the latest index of any substring in a set of potential substrings.
     *
     * <p>A","0","-","-","-","-"
"5966","lastIndexOfIgnoreCase","/**
     * Case in-sensitive find of the last index within a CharSequence.
     *
     * <p>A","0","-","-","-","-"
"5967","lastIndexOfIgnoreCase","/**
     * Case in-sensitive find of the last index within a CharSequence
     * from the specified position.
     *
     * <p>A","0","-","-","-","-"
"5968","lastOrdinalIndexOf","/**
     * Finds the n-th last index within a String, handling","0","-","-","-","-"
"5969","left","/**
     * Gets the leftmost","0","-","-","-","-"
"5970","leftPad","/**
     * Left pad a String with spaces (' ').
     *
     * <p>The String is padded to the size of","0","-","-","-","-"
"5971","leftPad","/**
     * Left pad a String with a specified character.
     *
     * <p>Pad to a size of","0","-","-","-","-"
"5972","leftPad","/**
     * Left pad a String with a specified String.
     *
     * <p>Pad to a size of","0","-","-","-","-"
"5973","length","/**
     * Gets a CharSequence length or","0","-","-","-","-"
"5974","lowerCase","/**
     * Converts a String to lower case as per","0","-","-","-","-"
"5975","lowerCase","/**
     * Converts a String to lower case as per","0","-","-","-","-"
"5976","matches","private static int[] matches(final CharSequence first, final CharSequence second)","0","-","-","-","-"
"5977","mid","/**
     * Gets","0","-","-","-","-"
"5978","normalizeSpace","/**
     * Similar to <a
     * href=""https://www.w3.org/TR/xpath/#function-normalize-space"">https://www.w3.org/TR/xpath/#function-normalize
     * -space</a>
     *
     * <p>
     * The function returns the argument string with whitespace normalized by using
     *","0","-","-","-","-"
"5979","ordinalIndexOf","/**
     * Finds the n-th index within a CharSequence, handling","0","-","-","-","-"
"5980","ordinalIndexOf","/**
     * Finds the n-th index within a String, handling","0","-","-","-","-"
"5981","overlay","/**
     * Overlays part of a String with another String.
     *
     * <p>A","0","-","-","-","-"
"5982","prependIfMissing","/**
     * Prepends the prefix to the start of the string if the string does not already start with any of the prefixes.
     *
     * <pre>
     * StringUtils.prependIfMissing(null, null) = null
     * StringUtils.prependIfMissing(""abc"", null) = ""abc""
     * StringUtils.prependIfMissing("""", ""xyz"") = ""xyz""
     * StringUtils.prependIfMissing(""abc"", ""xyz"") = ""xyzabc""
     * StringUtils.prependIfMissing(""xyzabc"", ""xyz"") = ""xyzabc""
     * StringUtils.prependIfMissing(""XYZabc"", ""xyz"") = ""xyzXYZabc""
     * </pre>
     * <p>
     * With additional prefixes,
     * </p>
     *
     * <pre>
     * StringUtils.prependIfMissing(null, null, null) = null
     * StringUtils.prependIfMissing(""abc"", null, null) = ""abc""
     * StringUtils.prependIfMissing("""", ""xyz"", null) = ""xyz""
     * StringUtils.prependIfMissing(""abc"", ""xyz"", new CharSequence[]","0","-","-","-","-"
"5983","prependIfMissingIgnoreCase","/**
     * Prepends the prefix to the start of the string if the string does not
     * already start, case-insensitive, with any of the prefixes.
     *
     * <pre>
     * StringUtils.prependIfMissingIgnoreCase(null, null) = null
     * StringUtils.prependIfMissingIgnoreCase(""abc"", null) = ""abc""
     * StringUtils.prependIfMissingIgnoreCase("""", ""xyz"") = ""xyz""
     * StringUtils.prependIfMissingIgnoreCase(""abc"", ""xyz"") = ""xyzabc""
     * StringUtils.prependIfMissingIgnoreCase(""xyzabc"", ""xyz"") = ""xyzabc""
     * StringUtils.prependIfMissingIgnoreCase(""XYZabc"", ""xyz"") = ""XYZabc""
     * </pre>
     * <p>With additional prefixes,</p>
     * <pre>
     * StringUtils.prependIfMissingIgnoreCase(null, null, null) = null
     * StringUtils.prependIfMissingIgnoreCase(""abc"", null, null) = ""abc""
     * StringUtils.prependIfMissingIgnoreCase("""", ""xyz"", null) = ""xyz""
     * StringUtils.prependIfMissingIgnoreCase(""abc"", ""xyz"", new CharSequence[]","0","-","-","-","-"
"5984","remove","/**
     * Removes all occurrences of a character from within the source string.
     *
     * <p>A","0","-","-","-","-"
"5985","remove","/**
     * Removes all occurrences of a substring from within the source string.
     *
     * <p>A","0","-","-","-","-"
"5986","removeAll","/**
     * Removes each substring of the text String that matches the given regular expression.
     *
     * This method is a","0","-","-","-","-"
"5987","removeEnd","/**
     * Removes a substring only if it is at the end of a source string,
     * otherwise returns the source string.
     *
     * <p>A","0","-","-","-","-"
"5988","removeEndIgnoreCase","/**
     * Case-insensitive removal of a substring if it is at the end of a source string,
     * otherwise returns the source string.
     *
     * <p>A","0","-","-","-","-"
"5989","removeFirst","/**
     * Removes the first substring of the text string that matches the given regular expression.
     *
     * This method is a","0","-","-","-","-"
"5990","removeIgnoreCase","/**
     * Case-insensitive removal of all occurrences of a substring from within
     * the source string.
     *
     * <p>
     * A","0","-","-","-","-"
"5991","removePattern","/**
     * Removes each substring of the source String that matches the given regular expression using the DOTALL option.
     *
     * This call is a","0","-","-","-","-"
"5992","removeStart","/**
     * Removes a char only if it is at the beginning of a source string,
     * otherwise returns the source string.
     *
     * <p>A","0","-","-","-","-"
"5993","removeStart","/**
     * Removes a substring only if it is at the beginning of a source string,
     * otherwise returns the source string.
     *
     * <p>A","0","-","-","-","-"
"5994","removeStartIgnoreCase","/**
     * Case-insensitive removal of a substring if it is at the beginning of a source string,
     * otherwise returns the source string.
     *
     * <p>A","0","-","-","-","-"
"5995","repeat","/**
     * Returns padding using the specified delimiter repeated
     * to a given length.
     *
     * <pre>
     * StringUtils.repeat('e', 0)  = """"
     * StringUtils.repeat('e', 3)  = ""eee""
     * StringUtils.repeat('e', -2) = """"
     * </pre>
     *
     * <p>Note: this method does not support padding with
     * <a href=""https://www.unicode.org/glossary/#supplementary_character"">Unicode Supplementary Characters</a>
     * as they require a pair of","0","-","-","-","-"
"5996","repeat","/**
     * Repeat a String","0","-","-","-","-"
"5997","repeat","/**
     * Repeat a String","0","-","-","-","-"
"5998","replace","/**
     * Replaces all occurrences of a String within another String.
     *
     * <p>A","0","-","-","-","-"
"5999","replace","/**
     * Replaces a String with another String inside a larger String,
     * for the first","0","-","-","-","-"
"6000","replaceAll","/**
     * Replaces each substring of the text String that matches the given regular expression
     * with the given replacement.
     *
     * This method is a","0","-","-","-","-"
"6001","replaceChars","/**
     * Replaces all occurrences of a character in a String with another.
     * This is a null-safe version of","0","-","-","-","-"
"6002","replaceChars","/**
     * Replaces multiple characters in a String in one go.
     * This method can also be used to delete characters.
     *
     * <p>For example:<br>
     *","0","-","-","-","-"
"6003","replaceEach","/**
     * Replaces all occurrences of Strings within another String.
     *
     * <p>
     * A","0","-","-","-","-"
"6004","replaceEach","/**
     * Replace all occurrences of Strings within another String.
     * This is a private recursive helper method for","0","-","-","-","-"
"6005","replaceEachRepeatedly","/**
     * Replaces all occurrences of Strings within another String.
     *
     * <p>
     * A","0","-","-","-","-"
"6006","replaceFirst","/**
     * Replaces the first substring of the text string that matches the given regular expression
     * with the given replacement.
     *
     * This method is a","0","-","-","-","-"
"6007","replaceIgnoreCase","/**
     * Case insensitively replaces all occurrences of a String within another String.
     *
     * <p>A","0","-","-","-","-"
"6008","replaceIgnoreCase","/**
     * Case insensitively replaces a String with another String inside a larger String,
     * for the first","0","-","-","-","-"
"6009","replaceOnce","/**
     * Replaces a String with another String inside a larger String, once.
     *
     * <p>A","0","-","-","-","-"
"6010","replaceOnceIgnoreCase","/**
     * Case insensitively replaces a String with another String inside a larger String, once.
     *
     * <p>A","0","-","-","-","-"
"6011","replacePattern","/**
     * Replaces each substring of the source String that matches the given regular expression with the given
     * replacement using the","0","-","-","-","-"
"6012","reverse","/**
     * Reverses a String as per","0","-","-","-","-"
"6013","reverseDelimited","/**
     * Reverses a String that is delimited by a specific character.
     *
     * <p>The Strings between the delimiters are not reversed.
     * Thus java.lang.String becomes String.lang.java (if the delimiter
     * is","0","-","-","-","-"
"6014","right","/**
     * Gets the rightmost","0","-","-","-","-"
"6015","rightPad","/**
     * Right pad a String with spaces (' ').
     *
     * <p>The String is padded to the size of","0","-","-","-","-"
"6016","rightPad","/**
     * Right pad a String with a specified character.
     *
     * <p>The String is padded to the size of","0","-","-","-","-"
"6017","rightPad","/**
     * Right pad a String with a specified String.
     *
     * <p>The String is padded to the size of","0","-","-","-","-"
"6018","rotate","/**
     * Rotate (circular shift) a String of","0","-","-","-","-"
"6019","split","/**
     * Splits the provided text into an array, using whitespace as the
     * separator.
     * Whitespace is defined by","0","-","-","-","-"
"6020","split","/**
     * Splits the provided text into an array, separator specified.
     * This is an alternative to using StringTokenizer.
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as one separator.
     * For more control over the split use the StrTokenizer class.</p>
     *
     * <p>A","0","-","-","-","-"
"6021","split","/**
     * Splits the provided text into an array, separators specified.
     * This is an alternative to using StringTokenizer.
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as one separator.
     * For more control over the split use the StrTokenizer class.</p>
     *
     * <p>A","0","-","-","-","-"
"6022","split","/**
     * Splits the provided text into an array with a maximum length,
     * separators specified.
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as one separator.</p>
     *
     * <p>A","0","-","-","-","-"
"6023","splitByCharacterType","/**
     * Splits a String by Character type as returned by
     *","0","-","-","-","-"
"6024","splitByCharacterType","/**
     * <p>Splits a String by Character type as returned by
     *","0","-","-","-","-"
"6025","splitByCharacterTypeCamelCase","/**
     * <p>Splits a String by Character type as returned by
     *","0","-","-","-","-"
"6026","splitByWholeSeparator","/**
     * <p>Splits the provided text into an array, separator string specified.
     *
     * <p>The separator(s) will not be included in the returned String array.
     * Adjacent separators are treated as one separator.</p>
     *
     * <p>A","0","-","-","-","-"
"6027","splitByWholeSeparator","/**
     * Splits the provided text into an array, separator string specified.
     * Returns a maximum of","0","-","-","-","-"
"6028","splitByWholeSeparatorPreserveAllTokens","/**
     * Splits the provided text into an array, separator string specified.
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as separators for empty tokens.
     * For more control over the split use the StrTokenizer class.</p>
     *
     * <p>A","0","-","-","-","-"
"6029","splitByWholeSeparatorPreserveAllTokens","/**
     * Splits the provided text into an array, separator string specified.
     * Returns a maximum of","0","-","-","-","-"
"6030","splitByWholeSeparatorWorker","/**
     * Performs the logic for the","0","-","-","-","-"
"6031","splitPreserveAllTokens","/**
     * Splits the provided text into an array, using whitespace as the
     * separator, preserving all tokens, including empty tokens created by
     * adjacent separators. This is an alternative to using StringTokenizer.
     * Whitespace is defined by","0","-","-","-","-"
"6032","splitPreserveAllTokens","/**
     * Splits the provided text into an array, separator specified,
     * preserving all tokens, including empty tokens created by adjacent
     * separators. This is an alternative to using StringTokenizer.
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as separators for empty tokens.
     * For more control over the split use the StrTokenizer class.</p>
     *
     * <p>A","0","-","-","-","-"
"6033","splitPreserveAllTokens","/**
     * Splits the provided text into an array, separators specified,
     * preserving all tokens, including empty tokens created by adjacent
     * separators. This is an alternative to using StringTokenizer.
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as separators for empty tokens.
     * For more control over the split use the StrTokenizer class.</p>
     *
     * <p>A","0","-","-","-","-"
"6034","splitPreserveAllTokens","/**
     * Splits the provided text into an array with a maximum length,
     * separators specified, preserving all tokens, including empty tokens
     * created by adjacent separators.
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as separators for empty tokens.
     * Adjacent separators are treated as one separator.</p>
     *
     * <p>A","0","-","-","-","-"
"6035","splitWorker","/**
     * Performs the logic for the","0","-","-","-","-"
"6036","splitWorker","/**
     * Performs the logic for the","0","-","-","-","-"
"6037","startsWith","/**
     * Tests if a CharSequence starts with a specified prefix.
     *
     * <p>","0","-","-","-","-"
"6038","startsWithAny","/**
     * Tests if a CharSequence starts with any of the provided case-sensitive prefixes.
     *
     * <pre>
     * StringUtils.startsWithAny(null, null)      = false
     * StringUtils.startsWithAny(null, new String[]","0","-","-","-","-"
"6039","startsWithIgnoreCase","/**
     * Case-insensitive check if a CharSequence starts with a specified prefix.
     *
     * <p>","0","-","-","-","-"
"6040","strip","/**
     * Strips whitespace from the start and end of a String.
     *
     * <p>This is similar to","0","-","-","-","-"
"6041","strip","/**
     * Strips any of a set of characters from the start and end of a String.
     * This is similar to","0","-","-","-","-"
"6042","stripAccents","/**
     * Removes diacritics (~= accents) from a string. The case will not be altered.
     * <p>
     * For instance, '&agrave;' will be replaced by 'a'.
     * </p>
     * <p>
     * Decomposes ligatures and digraphs per the KD column in the <a href = ""https://www.unicode.org/charts/normalization/"">Unicode Normalization Chart.</a>
     * </p>
     * <pre>
     * StringUtils.stripAccents(null)         = null
     * StringUtils.stripAccents("""")           = """"
     * StringUtils.stripAccents(""control"")    = ""control""
     * StringUtils.stripAccents(""&eacute;clair"")     = ""eclair""
     * StringUtils.stripAccents(""\u1d43\u1d47\u1d9c\u00b9\u00b2\u00b3"")     = ""abc123""
     * StringUtils.stripAccents(""\u00BC \u00BD \u00BE"")      = ""1⁄4 1⁄2 3⁄4""
     * </pre>
     * <p>
     * See also <a href=""http://www.unicode.org/unicode/reports/tr15/tr15-23.html"">Unicode Standard Annex #15 Unicode Normalization Forms</a>.
     * </p>
     *
     * @param input String to be stripped
     * @return input text with diacritics removed
     * @since 3.0
     */
    // See also Lucene's ASCIIFoldingFilter (Lucene 2.9) that replaces accented characters by their unaccented equivalent (and uncommitted bug fix: https://issues.apache.org/jira/browse/LUCENE-1343?focusedCommentId=12858907&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12858907).
    public static String stripAccents(final String input)","0","-","-","-","-"
"6043","stripAll","/**
     * Strips whitespace from the start and end of every String in an array.
     * Whitespace is defined by","0","-","-","-","-"
"6044","stripAll","/**
     * Strips any of a set of characters from the start and end of every
     * String in an array.
     * <p>Whitespace is defined by","0","-","-","-","-"
"6045","stripEnd","/**
     * Strips any of a set of characters from the end of a String.
     *
     * <p>A","0","-","-","-","-"
"6046","stripStart","/**
     * Strips any of a set of characters from the start of a String.
     *
     * <p>A","0","-","-","-","-"
"6047","stripToEmpty","/**
     * Strips whitespace from the start and end of a String  returning
     * an empty String if","0","-","-","-","-"
"6048","stripToNull","/**
     * Strips whitespace from the start and end of a String  returning
     *","0","-","-","-","-"
"6049","substring","/**
     * Gets a substring from the specified String avoiding exceptions.
     *
     * <p>A negative start position can be used to start","0","-","-","-","-"
"6050","substring","/**
     * Gets a substring from the specified String avoiding exceptions.
     *
     * <p>A negative start position can be used to start/end","0","-","-","-","-"
"6051","substringAfter","/**
     * Gets the substring after the first occurrence of a separator.
     * The separator is not returned.
     *
     * <p>A","0","-","-","-","-"
"6052","substringAfter","/**
     * Gets the substring after the first occurrence of a separator.
     * The separator is not returned.
     *
     * <p>A","0","-","-","-","-"
"6053","substringAfterLast","/**
     * Gets the substring after the last occurrence of a separator.
     * The separator is not returned.
     *
     * <p>A","0","-","-","-","-"
"6054","substringAfterLast","/**
     * Gets the substring after the last occurrence of a separator.
     * The separator is not returned.
     *
     * <p>A","0","-","-","-","-"
"6055","substringBefore","/**
     * Gets the substring before the first occurrence of a separator. The separator is not returned.
     *
     * <p>
     * A","0","-","-","-","-"
"6056","substringBefore","/**
     * Gets the substring before the first occurrence of a separator.
     * The separator is not returned.
     *
     * <p>A","0","-","-","-","-"
"6057","substringBeforeLast","/**
     * Gets the substring before the last occurrence of a separator.
     * The separator is not returned.
     *
     * <p>A","0","-","-","-","-"
"6058","substringBetween","/**
     * Gets the String that is nested in between two instances of the
     * same String.
     *
     * <p>A","0","-","-","-","-"
"6059","substringBetween","/**
     * Gets the String that is nested in between two Strings.
     * Only the first match is returned.
     *
     * <p>A","0","-","-","-","-"
"6060","substringsBetween","/**
     * Searches a String for substrings delimited by a start and end tag,
     * returning all matching substrings in an array.
     *
     * <p>A","0","-","-","-","-"
"6061","swapCase","/**
     * Swaps the case of a String changing upper and title case to
     * lower case, and lower case to upper case.
     *
     * <ul>
     *  <li>Upper case character converts to Lower case</li>
     *  <li>Title case character converts to Lower case</li>
     *  <li>Lower case character converts to Upper case</li>
     * </ul>
     *
     * <p>For a word based algorithm, see","0","-","-","-","-"
"6062","toCodePoints","/**
     * Converts a","0","-","-","-","-"
"6063","toEncodedString","/**
     * Converts a","0","-","-","-","-"
"6064","toRootLowerCase","/**
     * Converts the given source String as a lower-case using the","0","-","-","-","-"
"6065","toRootUpperCase","/**
     * Converts the given source String as an upper-case using the","0","-","-","-","-"
"6066","toString","/**
     * Converts a","0","-","-","-","-"
"6067","trim","/**
     * Removes control characters (char &lt;= 32) from both
     * ends of this String, handling","0","-","-","-","-"
"6068","trimToEmpty","/**
     * Removes control characters (char &lt;= 32) from both
     * ends of this String returning an empty String ("""") if the String
     * is empty ("""") after the trim or if it is","0","-","-","-","-"
"6069","trimToNull","/**
     * Removes control characters (char &lt;= 32) from both
     * ends of this String returning","0","-","-","-","-"
"6070","truncate","/**
     * Truncates a String. This will turn
     * ""Now is the time for all good men"" into ""Now is the time for"".
     *
     * <p>Specifically:</p>
     * <ul>
     *   <li>If","0","-","-","-","-"
"6071","truncate","/**
     * Truncates a String. This will turn
     * ""Now is the time for all good men"" into ""is the time for all"".
     *
     * <p>Works like","0","-","-","-","-"
"6072","uncapitalize","/**
     * Uncapitalizes a String, changing the first character to lower case as
     * per","0","-","-","-","-"
"6073","unwrap","/**
     * Unwraps a given string from a character.
     *
     * <pre>
     * StringUtils.unwrap(null, null)         = null
     * StringUtils.unwrap(null, '\0')         = null
     * StringUtils.unwrap(null, '1')          = null
     * StringUtils.unwrap(""a"", 'a')           = ""a""
     * StringUtils.unwrap(""aa"", 'a')           = """"
     * StringUtils.unwrap(""\'abc\'"", '\'')    = ""abc""
     * StringUtils.unwrap(""AABabcBAA"", 'A')   = ""ABabcBA""
     * StringUtils.unwrap(""A"", '#')           = ""A""
     * StringUtils.unwrap(""#A"", '#')          = ""#A""
     * StringUtils.unwrap(""A#"", '#')          = ""A#""
     * </pre>
     *
     * @param str
     *          the String to be unwrapped, can be null
     * @param wrapChar
     *          the character used to unwrap
     * @return unwrapped String or the original string
     *          if it is not quoted properly with the wrapChar
     * @since 3.6
     */
    public static String unwrap(final String str, final char wrapChar)","0","-","-","-","-"
"6074","unwrap","/**
     * Unwraps a given string from another string.
     *
     * <pre>
     * StringUtils.unwrap(null, null)         = null
     * StringUtils.unwrap(null, """")           = null
     * StringUtils.unwrap(null, ""1"")          = null
     * StringUtils.unwrap(""a"", ""a"")           = ""a""
     * StringUtils.unwrap(""aa"", ""a"")          = """"
     * StringUtils.unwrap(""\'abc\'"", ""\'"")    = ""abc""
     * StringUtils.unwrap(""\""abc\"""", ""\"""")    = ""abc""
     * StringUtils.unwrap(""AABabcBAA"", ""AA"")  = ""BabcB""
     * StringUtils.unwrap(""A"", ""#"")           = ""A""
     * StringUtils.unwrap(""#A"", ""#"")          = ""#A""
     * StringUtils.unwrap(""A#"", ""#"")          = ""A#""
     * </pre>
     *
     * @param str
     *          the String to be unwrapped, can be null
     * @param wrapToken
     *          the String used to unwrap
     * @return unwrapped String or the original string
     *          if it is not quoted properly with the wrapToken
     * @since 3.6
     */
    public static String unwrap(final String str, final String wrapToken)","0","-","-","-","-"
"6075","upperCase","/**
     * Converts a String to upper case as per","0","-","-","-","-"
"6076","upperCase","/**
     * Converts a String to upper case as per","0","-","-","-","-"
"6077","valueOf","/**
     * Returns the string representation of the","0","-","-","-","-"
"6078","wrap","/**
     * Wraps a string with a char.
     *
     * <pre>
     * StringUtils.wrap(null, *)        = null
     * StringUtils.wrap("""", *)          = """"
     * StringUtils.wrap(""ab"", '\0')     = ""ab""
     * StringUtils.wrap(""ab"", 'x')      = ""xabx""
     * StringUtils.wrap(""ab"", '\'')     = ""'ab'""
     * StringUtils.wrap(""\""ab\"""", '\""') = ""\""\""ab\""\""""
     * </pre>
     *
     * @param str
     *            the string to be wrapped, may be","0","-","-","-","-"
"6079","wrap","/**
     * Wraps a String with another String.
     *
     * <p>
     * A","0","-","-","-","-"
"6080","wrapIfMissing","/**
     * Wraps a string with a char if that char is missing from the start or end of the given string.
     *
     * <p>A new","0","-","-","-","-"
"6081","wrapIfMissing","/**
     * Wraps a string with a string if that string is missing from the start or end of the given string.
     *
     * <p>A new","0","-","-","-","-"
"6082","StringUtils","/**
     *","0","-","-","-","-"
"6083","accept","/**
         * Accepts the consumer.
         *
         * @param object1 the first parameter for the consumable to accept
         * @param object2 the second parameter for the consumable to accept
         * @throws T Thrown when the consumer fails.
         */
        void accept(O1 object1, O2 object2) throws T;","0","-","-","-","-"
"6084","apply","/**
         * Applies this function.
         *
         * @param input1 the first input for the function
         * @param input2 the second input for the function
         * @return the result of the function
         * @throws T Thrown when the function fails.
         */
        R apply(O1 input1, O2 input2) throws T;","0","-","-","-","-"
"6085","test","/**
         * Tests the predicate.
         *
         * @param object1 the first object to test the predicate on
         * @param object2 the second object to test the predicate on
         * @return the predicate's evaluation
         * @throws T if the predicate fails
         */
        boolean test(O1 object1, O2 object2) throws T;","0","-","-","-","-"
"6086","call","/**
         * Calls the callable.
         *
         * @return The value returned from the callable
         * @throws T if the callable fails
         */
        R call() throws T;","0","-","-","-","-"
"6087","accept","/**
         * Accepts the consumer.
         *
         * @param object the parameter for the consumable to accept
         * @throws T Thrown when the consumer fails.
         */
        void accept(O object) throws T;","0","-","-","-","-"
"6088","apply","/**
         * Applies this function.
         *
         * @param input the input for the function
         * @return the result of the function
         * @throws T Thrown when the function fails.
         */
        R apply(I input) throws T;","0","-","-","-","-"
"6089","test","/**
         * Tests the predicate.
         *
         * @param object the object to test the predicate on
         * @return the predicate's evaluation
         * @throws T if the predicate fails
         */
        boolean test(I object) throws T;","0","-","-","-","-"
"6090","run","/**
         * Runs the function.
         *
         * @throws T Thrown when the function fails.
         */
        void run() throws T;","0","-","-","-","-"
"6091","get","/**
         * Supplies an object
         *
         * @return a result
         * @throws T if the supplier fails
         */
        R get() throws T;","0","-","-","-","-"
"6092","accept","/**
     * Consumes a consumer and rethrows any exception as a","0","-","-","-","-"
"6093","accept","/**
     * Consumes a consumer and rethrows any exception as a","0","-","-","-","-"
"6094","apply","/**
     * Applies a function and rethrows any exception as a","0","-","-","-","-"
"6095","apply","/**
     * Applies a function and rethrows any exception as a","0","-","-","-","-"
"6096","asBiConsumer","/**
     * Converts the given","0","-","-","-","-"
"6097","asBiFunction","/**
     * Converts the given","0","-","-","-","-"
"6098","asBiPredicate","/**
     * Converts the given","0","-","-","-","-"
"6099","asCallable","/**
     * Converts the given","0","-","-","-","-"
"6100","asConsumer","/**
     * Converts the given","0","-","-","-","-"
"6101","asFunction","/**
     * Converts the given","0","-","-","-","-"
"6102","asPredicate","/**
     * Converts the given","0","-","-","-","-"
"6103","asRunnable","/**
     * Converts the given","0","-","-","-","-"
"6104","asSupplier","/**
     * Converts the given","0","-","-","-","-"
"6105","call","/**
     * Calls a callable and rethrows any exception as a","0","-","-","-","-"
"6106","get","/**
     * Invokes a supplier, and returns the result.
     *
     * @param supplier The supplier to invoke.
     * @param <O> The suppliers output type.
     * @param <T> The type of checked exception, which the supplier can throw.
     * @return The object, which has been created by the supplier
     * @since 3.10
     */
    public static <O, T extends Throwable> O get(final FailableSupplier<O, T> supplier)","0","-","-","-","-"
"6107","getAsBoolean","/**
     * Invokes a boolean supplier, and returns the result.
     *
     * @param supplier The boolean supplier to invoke.
     * @param <T> The type of checked exception, which the supplier can throw.
     * @return The boolean, which has been created by the supplier
     */
    private static <T extends Throwable> boolean getAsBoolean(final FailableBooleanSupplier<T> supplier)","0","-","-","-","-"
"6108","rethrow","/**
     * Rethrows a","0","-","-","-","-"
"6109","run","/**
     * Runs a runnable and rethrows any exception as a","0","-","-","-","-"
"6110","stream","/**
     * Converts the given collection into a","0","-","-","-","-"
"6111","stream","/**
     * Converts the given stream into a","0","-","-","-","-"
"6112","test","/**
     * Tests a predicate and rethrows any exception as a","0","-","-","-","-"
"6113","test","/**
     * Tests a predicate and rethrows any exception as a","0","-","-","-","-"
"6114","tryWithResources","/**
     * A simple try-with-resources implementation, that can be used, if your objects do not implement the
     *","0","-","-","-","-"
"6115","tryWithResources","/**
     * A simple try-with-resources implementation, that can be used, if your objects do not implement the
     *","0","-","-","-","-"
"6116","Functions","/**
     * Constructs a new instance.
     */
    public Functions()","0","-","-","-","-"
"6117","FluentBitSet","/**
     * Creates a new bit set. All bits are initially","0","-","-","-","-"
"6118","FluentBitSet","/**
     * Creates a new instance for the given bit set.
     *
     * @param set The bit set to wrap.
     */
    public FluentBitSet(final BitSet set)","0","-","-","-","-"
"6119","FluentBitSet","/**
     * Creates a bit set whose initial size is large enough to explicitly represent bits with indices in the range","0","-","-","-","-"
"6120","and","/**
     * Performs a logical <strong>AND</strong> of this target bit set with the argument bit set. This bit set is modified so that each
     * bit in it has the value","0","-","-","-","-"
"6121","and","/**
     * Performs a logical <strong>AND</strong> of this target bit set with the argument bit set. This bit set is modified so that each
     * bit in it has the value","0","-","-","-","-"
"6122","andNot","/**
     * Clears all of the bits in this","0","-","-","-","-"
"6123","andNot","/**
     * Clears all of the bits in this","0","-","-","-","-"
"6124","bitSet","/**
     * Gets the wrapped bit set.
     *
     * @return the wrapped bit set.
     */
    public BitSet bitSet()","0","-","-","-","-"
"6125","cardinality","/**
     * Returns the number of bits set to","0","-","-","-","-"
"6126","clear","/**
     * Sets all of the bits in this BitSet to","0","-","-","-","-"
"6127","clear","/**
     * Sets the bits specified by the indexes to","0","-","-","-","-"
"6128","clear","/**
     * Sets the bit specified by the index to","0","-","-","-","-"
"6129","clear","/**
     * Sets the bits from the specified","0","-","-","-","-"
"6130","clone","/**
     * Cloning this","0","-","-","-","-"
"6131","equals","@Override
    public boolean equals(final Object obj)","0","-","-","-","-"
"6132","flip","/**
     * Sets the bit at the specified index to the complement of its current value.
     *
     * @param bitIndex the index of the bit to flip.
     * @throws IndexOutOfBoundsException if the specified index is negative.
     * @return","0","-","-","-","-"
"6133","flip","/**
     * Sets each bit from the specified","0","-","-","-","-"
"6134","get","/**
     * Returns the value of the bit with the specified index. The value is","0","-","-","-","-"
"6135","get","/**
     * Returns a new","0","-","-","-","-"
"6136","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"6137","intersects","/**
     * Returns true if the specified","0","-","-","-","-"
"6138","intersects","/**
     * Returns true if the specified","0","-","-","-","-"
"6139","isEmpty","/**
     * Returns true if this","0","-","-","-","-"
"6140","length","/**
     * Returns the ""logical size"" of this","0","-","-","-","-"
"6141","nextClearBit","/**
     * Returns the index of the first bit that is set to","0","-","-","-","-"
"6142","nextSetBit","/**
     * Returns the index of the first bit that is set to","0","-","-","-","-"
"6143","or","/**
     * Performs a logical <strong>OR</strong> of this bit set with the bit set argument. This bit set is modified so that a bit in it
     * has the value","0","-","-","-","-"
"6144","or","/**
     * Performs a logical <strong>OR</strong> of this bit set with the bit set arguments. This bit set is modified so that a bit in it
     * has the value","0","-","-","-","-"
"6145","or","/**
     * Performs a logical <strong>OR</strong> of this bit set with the bit set argument. This bit set is modified so that a bit in it
     * has the value","0","-","-","-","-"
"6146","previousClearBit","/**
     * Returns the index of the nearest bit that is set to","0","-","-","-","-"
"6147","previousSetBit","/**
     * Returns the index of the nearest bit that is set to","0","-","-","-","-"
"6148","set","/**
     * Sets the bit at the specified indexes to","0","-","-","-","-"
"6149","set","/**
     * Sets the bit at the specified index to","0","-","-","-","-"
"6150","set","/**
     * Sets the bit at the specified index to the specified value.
     *
     * @param bitIndex a bit index.
     * @param value a boolean value to set.
     * @throws IndexOutOfBoundsException if the specified index is negative.
     * @return","0","-","-","-","-"
"6151","set","/**
     * Sets the bits from the specified","0","-","-","-","-"
"6152","set","/**
     * Sets the bits from the specified","0","-","-","-","-"
"6153","setInclusive","/**
     * Sets the bits from the specified","0","-","-","-","-"
"6154","size","/**
     * Returns the number of bits of space actually in use by this","0","-","-","-","-"
"6155","stream","/**
     * Returns a stream of indices for which this","0","-","-","-","-"
"6156","toByteArray","/**
     * Returns a new byte array containing all the bits in this bit set.
     *
     * <p>
     * More precisely, if:
     * </p>
     * <ol>
     * <li>","0","-","-","-","-"
"6157","toLongArray","/**
     * Returns a new byte array containing all the bits in this bit set.
     *
     * <p>
     * More precisely, if:
     * </p>
     * <ol>
     * <li>","0","-","-","-","-"
"6158","toString","@Override
    public String toString()","0","-","-","-","-"
"6159","xor","/**
     * Performs a logical <strong>XOR</strong> of this bit set with the bit set argument. This bit set is modified so that a bit in it
     * has the value","0","-","-","-","-"
"6160","xor","/**
     * Performs a logical <strong>XOR</strong> of this bit set with the bit set argument. This bit set is modified so that a bit in it
     * has the value","0","-","-","-","-"
"6161","IterableStringTokenizer","/**
     * Constructs a new instance like","0","-","-","-","-"
"6162","IterableStringTokenizer","/**
     * Constructs a new instance like","0","-","-","-","-"
"6163","IterableStringTokenizer","/**
     * Constructs a new instance like","0","-","-","-","-"
"6164","iterator","@Override
    public Iterator<String> iterator()","0","-","-","-","-"
"6165","hasNext","@Override
            public boolean hasNext()","0","-","-","-","-"
"6166","next","@Override
            public String next()","0","-","-","-","-"
"6167","toArray","/**
     * Returns a new","0","-","-","-","-"
"6168","toList","/**
     * Returns a new","0","-","-","-","-"
"6169","toStream","/**
     * Returns a sequential stream on this Iterable instance.
     *
     * @return a sequential stream on this Iterable instance.
     */
    public Stream<String> toStream()","0","-","-","-","-"
"6170","fileExists","private static boolean fileExists(final String path)","0","-","-","-","-"
"6171","inContainer","/**
     * Tests whether we are running in a container like Docker or Podman.
     *
     * @return whether we are running in a container like Docker or Podman. Never null
     */
    public static Boolean inContainer()","0","-","-","-","-"
"6172","inContainer","static boolean inContainer(final String dirPrefix)","0","-","-","-","-"
"6173","readFile","/**
     * Tests whether the","0","-","-","-","-"
"6174","RuntimeEnvironment","/**
     * Constructs a new instance.
     *
     * @deprecated Will be removed in 4.0.0.
     */
    @Deprecated
    public RuntimeEnvironment()","0","-","-","-","-"
"6175","translate","@Override
        public int translate(final CharSequence input, final int index, final Writer out) throws IOException","0","-","-","-","-"
"6176","translate","@Override
        public int translate(final CharSequence input, final int index, final Writer out) throws IOException","0","-","-","-","-"
"6177","escapeCsv","/**
     * Returns a","0","-","-","-","-"
"6178","escapeEcmaScript","/**
     * Escapes the characters in a","0","-","-","-","-"
"6179","escapeHtml3","/**
     * Escapes the characters in a","0","-","-","-","-"
"6180","escapeHtml4","/**
     * Escapes the characters in a","0","-","-","-","-"
"6181","escapeJava","/**
     * Escapes the characters in a","0","-","-","-","-"
"6182","escapeJson","/**
     * Escapes the characters in a","0","-","-","-","-"
"6183","escapeXml","/**
     * Escapes the characters in a","0","-","-","-","-"
"6184","escapeXml10","/**
     * Escapes the characters in a","0","-","-","-","-"
"6185","escapeXml11","/**
     * Escapes the characters in a","0","-","-","-","-"
"6186","unescapeCsv","/**
     * Returns a","0","-","-","-","-"
"6187","unescapeEcmaScript","/**
     * Unescapes any EcmaScript literals found in the","0","-","-","-","-"
"6188","unescapeHtml3","/**
     * Unescapes a string containing entity escapes to a string
     * containing the actual Unicode characters corresponding to the
     * escapes. Supports only HTML 3.0 entities.
     *
     * @param input  the","0","-","-","-","-"
"6189","unescapeHtml4","/**
     * Unescapes a string containing entity escapes to a string
     * containing the actual Unicode characters corresponding to the
     * escapes. Supports HTML 4.0 entities.
     *
     * <p>For example, the string","0","-","-","-","-"
"6190","unescapeJava","/**
     * Unescapes any Java literals found in the","0","-","-","-","-"
"6191","unescapeJson","/**
     * Unescapes any Json literals found in the","0","-","-","-","-"
"6192","unescapeXml","/**
     * Unescapes a string containing XML entity escapes to a string
     * containing the actual Unicode characters corresponding to the
     * escapes.
     *
     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).
     * Does not support DTDs or external entities.</p>
     *
     * <p>Note that numerical \\u Unicode codes are unescaped to their respective
     *    Unicode characters. This may change in future releases.</p>
     *
     * @param input  the","0","-","-","-","-"
"6193","StringEscapeUtils","/**
     *","0","-","-","-","-"
"6194","emptyArray","/**
     * Returns the empty array singleton that can be assigned without compiler warning.
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @return the empty array singleton that can be assigned without compiler warning.
     * @since 3.10.
     */
    @SuppressWarnings(""unchecked"")
    public static <L, R> Pair<L, R>[] emptyArray()","0","-","-","-","-"
"6195","of","/**
     * Creates an immutable pair of two objects inferring the generic types.
     *
     * <p>This factory allows the pair to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @param left  the left element, may be null
     * @param right  the right element, may be null
     * @return a pair formed from the two parameters, not null
     */
    public static <L, R> Pair<L, R> of(final L left, final R right)","0","-","-","-","-"
"6196","of","/**
     * Creates an immutable pair from a map entry.
     *
     * <p>This factory allows the pair to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @param pair the map entry.
     * @return a pair formed from the map entry
     * @since 3.10
     */
    public static <L, R> Pair<L, R> of(final Map.Entry<L, R> pair)","0","-","-","-","-"
"6197","ofNonNull","/**
     * Creates an immutable pair of two non-null objects inferring the generic types.
     *
     * <p>This factory allows the pair to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @param left  the left element, may not be null
     * @param right  the right element, may not  be null
     * @return a pair formed from the two parameters, not null
     * @throws NullPointerException if any input is null
     * @since 3.13.0
     */
    public static <L, R> Pair<L, R> ofNonNull(final L left, final R right)","0","-","-","-","-"
"6198","Pair","/**
     * Constructs a new instance.
     */
    public Pair()","0","-","-","-","-"
"6199","accept","/**
     * Accepts this key and value as arguments to the given consumer.
     *
     * @param <E> The kind of thrown exception or error.
     * @param consumer the consumer to call.
     * @throws E Thrown when the consumer fails.
     * @since 3.13.0
     */
    public <E extends Throwable> void accept(final FailableBiConsumer<L, R, E> consumer) throws E","0","-","-","-","-"
"6200","apply","/**
     * Applies this key and value as arguments to the given function.
     *
     * @param <V> The function return type.
     * @param <E> The kind of thrown exception or error.
     * @param function the consumer to call.
     * @return the function's return value.
     * @throws E Thrown when the consumer fails.
     * @since 3.13.0
     */
    public <V, E extends Throwable> V apply(final FailableBiFunction<L, R, V, E> function) throws E","0","-","-","-","-"
"6201","compareTo","/**
     * Compares the pair based on the left element followed by the right element.
     * The types must be","0","-","-","-","-"
"6202","equals","/**
     * Compares this pair to another based on the two elements.
     *
     * @param obj  the object to compare to, null returns false
     * @return true if the elements of the pair are equal
     */
    @Override
    public boolean equals(final Object obj)","0","-","-","-","-"
"6203","getKey","/**
     * Gets the key from this pair.
     *
     * <p>This method implements the","0","-","-","-","-"
"6204","getLeft","/**
     * Gets the left element from this pair.
     *
     * <p>When treated as a key-value pair, this is the key.</p>
     *
     * @return the left element, may be null
     */
    public abstract L getLeft();","0","-","-","-","-"
"6205","getRight","/**
     * Gets the right element from this pair.
     *
     * <p>When treated as a key-value pair, this is the value.</p>
     *
     * @return the right element, may be null
     */
    public abstract R getRight();","0","-","-","-","-"
"6206","getValue","/**
     * Gets the value from this pair.
     *
     * <p>This method implements the","0","-","-","-","-"
"6207","hashCode","/**
     * Returns a suitable hash code.
     * <p>
     * The hash code follows the definition in","0","-","-","-","-"
"6208","toString","/**
     * Returns a String representation of this pair using the format","0","-","-","-","-"
"6209","toString","/**
     * Formats the receiver using the given format.
     *
     * <p>
     * This uses","0","-","-","-","-"
"6210","emptyArray","/**
     * Returns the empty array singleton that can be assigned without compiler warning.
     *
     * @param <L> the left element type
     * @param <M> the middle element type
     * @param <R> the right element type
     * @return the empty array singleton that can be assigned without compiler warning.
     * @since 3.10.
     */
    @SuppressWarnings(""unchecked"")
    public static <L, M, R> MutableTriple<L, M, R>[] emptyArray()","0","-","-","-","-"
"6211","of","/**
     * Obtains a mutable triple of three objects inferring the generic types.
     *
     * <p>This factory allows the triple to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <M> the middle element type
     * @param <R> the right element type
     * @param left  the left element, may be null
     * @param middle  the middle element, may be null
     * @param right  the right element, may be null
     * @return a triple formed from the three parameters, not null
     */
    public static <L, M, R> MutableTriple<L, M, R> of(final L left, final M middle, final R right)","0","-","-","-","-"
"6212","ofNonNull","/**
     * Obtains a mutable triple of three non-null objects inferring the generic types.
     *
     * <p>This factory allows the triple to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <M> the middle element type
     * @param <R> the right element type
     * @param left  the left element, may not be null
     * @param middle  the middle element, may not be null
     * @param right  the right element, may not be null
     * @return a triple formed from the three parameters, not null
     * @throws NullPointerException if any input is null
     * @since 3.13.0
     */
    public static <L, M, R> MutableTriple<L, M, R> ofNonNull(final L left, final M middle, final R right)","0","-","-","-","-"
"6213","MutableTriple","/**
     * Create a new triple instance of three nulls.
     */
    public MutableTriple()","0","-","-","-","-"
"6214","MutableTriple","/**
     * Create a new triple instance.
     *
     * @param left  the left value, may be null
     * @param middle  the middle value, may be null
     * @param right  the right value, may be null
     */
    public MutableTriple(final L left, final M middle, final R right)","0","-","-","-","-"
"6215","getLeft","/**
     *","0","-","-","-","-"
"6216","getMiddle","/**
     *","0","-","-","-","-"
"6217","getRight","/**
     *","0","-","-","-","-"
"6218","setLeft","/**
     * Sets the left element of the triple.
     *
     * @param left  the new value of the left element, may be null
     */
    public void setLeft(final L left)","0","-","-","-","-"
"6219","setMiddle","/**
     * Sets the middle element of the triple.
     *
     * @param middle  the new value of the middle element, may be null
     */
    public void setMiddle(final M middle)","0","-","-","-","-"
"6220","setRight","/**
     * Sets the right element of the triple.
     *
     * @param right  the new value of the right element, may be null
     */
    public void setRight(final R right)","0","-","-","-","-"
"6221","emptyArray","/**
     * Returns the empty array singleton that can be assigned without compiler warning.
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @return the empty array singleton that can be assigned without compiler warning.
     * @since 3.10.
     */
    @SuppressWarnings(""unchecked"")
    public static <L, R> MutablePair<L, R>[] emptyArray()","0","-","-","-","-"
"6222","of","/**
     * Creates a mutable pair of two objects inferring the generic types.
     *
     * <p>This factory allows the pair to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @param left  the left element, may be null
     * @param right  the right element, may be null
     * @return a pair formed from the two parameters, not null
     */
    public static <L, R> MutablePair<L, R> of(final L left, final R right)","0","-","-","-","-"
"6223","of","/**
     * Creates a mutable pair from a map entry.
     *
     * <p>This factory allows the pair to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @param pair the existing map entry.
     * @return a pair formed from the map entry
     */
    public static <L, R> MutablePair<L, R> of(final Map.Entry<L, R> pair)","0","-","-","-","-"
"6224","ofNonNull","/**
     * Creates a mutable pair of two non-null objects inferring the generic types.
     *
     * <p>This factory allows the pair to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @param left  the left element, may not be null
     * @param right  the right element, may not be null
     * @return a pair formed from the two parameters, not null
     * @throws NullPointerException if any input is null
     * @since 3.13.0
     */
    public static <L, R> MutablePair<L, R> ofNonNull(final L left, final R right)","0","-","-","-","-"
"6225","MutablePair","/**
     * Create a new pair instance of two nulls.
     */
    public MutablePair()","0","-","-","-","-"
"6226","MutablePair","/**
     * Create a new pair instance.
     *
     * @param left  the left value, may be null
     * @param right  the right value, may be null
     */
    public MutablePair(final L left, final R right)","0","-","-","-","-"
"6227","getLeft","/**
     *","0","-","-","-","-"
"6228","getRight","/**
     *","0","-","-","-","-"
"6229","setLeft","/**
     * Sets the left element of the pair.
     *
     * @param left  the new value of the left element, may be null
     */
    public void setLeft(final L left)","0","-","-","-","-"
"6230","setRight","/**
     * Sets the right element of the pair.
     *
     * @param right  the new value of the right element, may be null
     */
    public void setRight(final R right)","0","-","-","-","-"
"6231","setValue","/**
     * Sets the","0","-","-","-","-"
"6232","emptyArray","/**
     * Returns the empty array singleton that can be assigned without compiler warning.
     *
     * @param <L> the left element type
     * @param <M> the middle element type
     * @param <R> the right element type
     * @return the empty array singleton that can be assigned without compiler warning.
     * @since 3.10.
     */
    @SuppressWarnings(""unchecked"")
    public static <L, M, R> ImmutableTriple<L, M, R>[] emptyArray()","0","-","-","-","-"
"6233","nullTriple","/**
     * Returns an immutable triple of nulls.
     *
     * @param <L> the left element of this triple. Value is","0","-","-","-","-"
"6234","of","/**
     * Obtains an immutable triple of three objects inferring the generic types.
     *
     * <p>This factory allows the triple to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <M> the middle element type
     * @param <R> the right element type
     * @param left  the left element, may be null
     * @param middle  the middle element, may be null
     * @param right  the right element, may be null
     * @return a triple formed from the three parameters, not null
     */
    public static <L, M, R> ImmutableTriple<L, M, R> of(final L left, final M middle, final R right)","0","-","-","-","-"
"6235","ofNonNull","/**
     * Obtains an immutable triple of three non-null objects inferring the generic types.
     *
     * <p>This factory allows the triple to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <M> the middle element type
     * @param <R> the right element type
     * @param left  the left element, may not be null
     * @param middle  the middle element, may not be null
     * @param right  the right element, may not be null
     * @return a triple formed from the three parameters, not null
     * @throws NullPointerException if any input is null
     * @since 3.13.0
     */
    public static <L, M, R> ImmutableTriple<L, M, R> ofNonNull(final L left, final M middle, final R right)","0","-","-","-","-"
"6236","ImmutableTriple","/**
     * Create a new triple instance.
     *
     * @param left  the left value, may be null
     * @param middle the middle value, may be null
     * @param right  the right value, may be null
     */
    public ImmutableTriple(final L left, final M middle, final R right)","0","-","-","-","-"
"6237","getLeft","/**
     *","0","-","-","-","-"
"6238","getMiddle","/**
     *","0","-","-","-","-"
"6239","getRight","/**
     *","0","-","-","-","-"
"6240","emptyArray","/**
     * Returns the empty array singleton that can be assigned without compiler warning.
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @return the empty array singleton that can be assigned without compiler warning.
     * @since 3.10.
     */
    @SuppressWarnings(""unchecked"")
    public static <L, R> ImmutablePair<L, R>[] emptyArray()","0","-","-","-","-"
"6241","left","/**
     * Creates an immutable pair of two objects inferring the generic types.
     *
     * <p>This factory allows the pair to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @param left  the left element, may be null
     * @return a pair formed from the two parameters, not null
     * @since 3.11
     */
    public static <L, R> Pair<L, R> left(final L left)","0","-","-","-","-"
"6242","nullPair","/**
     * Returns an immutable pair of nulls.
     *
     * @param <L> the left element of this pair. Value is","0","-","-","-","-"
"6243","of","/**
     * Creates an immutable pair of two objects inferring the generic types.
     *
     * <p>This factory allows the pair to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @param left  the left element, may be null
     * @param right  the right element, may be null
     * @return a pair formed from the two parameters, not null
     */
    public static <L, R> ImmutablePair<L, R> of(final L left, final R right)","0","-","-","-","-"
"6244","of","/**
     * Creates an immutable pair from a map entry.
     *
     * <p>This factory allows the pair to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @param pair the existing map entry.
     * @return a pair formed from the map entry
     * @since 3.10
     */
    public static <L, R> ImmutablePair<L, R> of(final Map.Entry<L, R> pair)","0","-","-","-","-"
"6245","ofNonNull","/**
     * Creates an immutable pair of two non-null objects inferring the generic types.
     *
     * <p>This factory allows the pair to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @param left  the left element, may not be null
     * @param right  the right element, may not  be null
     * @return a pair formed from the two parameters, not null
     * @throws NullPointerException if any input is null
     * @since 3.13.0
     */
    public static <L, R> ImmutablePair<L, R> ofNonNull(final L left, final R right)","0","-","-","-","-"
"6246","right","/**
     * Creates an immutable pair of two objects inferring the generic types.
     *
     * <p>This factory allows the pair to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @param right  the right element, may be null
     * @return a pair formed from the two parameters, not null
     * @since 3.11
     */
    public static <L, R> Pair<L, R> right(final R right)","0","-","-","-","-"
"6247","ImmutablePair","/**
     * Create a new pair instance.
     *
     * @param left  the left value, may be null
     * @param right  the right value, may be null
     */
    public ImmutablePair(final L left, final R right)","0","-","-","-","-"
"6248","getLeft","/**
     *","0","-","-","-","-"
"6249","getRight","/**
     *","0","-","-","-","-"
"6250","setValue","/**
     * Throws","0","-","-","-","-"
"6251","emptyArray","/**
     * Returns the empty array singleton that can be assigned without compiler warning.
     *
     * @param <L> the left element type
     * @param <M> the middle element type
     * @param <R> the right element type
     * @return the empty array singleton that can be assigned without compiler warning.
     * @since 3.10.
     */
    @SuppressWarnings(""unchecked"")
    public static <L, M, R> Triple<L, M, R>[] emptyArray()","0","-","-","-","-"
"6252","of","/**
     * Obtains an immutable triple of three objects inferring the generic types.
     *
     * <p>This factory allows the triple to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <M> the middle element type
     * @param <R> the right element type
     * @param left  the left element, may be null
     * @param middle the middle element, may be null
     * @param right  the right element, may be null
     * @return a triple formed from the three parameters, not null
     */
    public static <L, M, R> Triple<L, M, R> of(final L left, final M middle, final R right)","0","-","-","-","-"
"6253","ofNonNull","/**
     * Obtains an immutable triple of three non-null objects inferring the generic types.
     *
     * <p>This factory allows the triple to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <M> the middle element type
     * @param <R> the right element type
     * @param left  the left element, may not be null
     * @param middle  the middle element, may not be null
     * @param right  the right element, may not be null
     * @return a triple formed from the three parameters, not null
     * @throws NullPointerException if any input is null
     * @since 3.13.0
     */
    public static <L, M, R> Triple<L, M, R> ofNonNull(final L left, final M middle, final R right)","0","-","-","-","-"
"6254","Triple","/**
     * Constructs a new instance.
     */
    public Triple()","0","-","-","-","-"
"6255","compareTo","/**
     * Compares the triple based on the left element, followed by the middle element,
     * finally the right element.
     * The types must be","0","-","-","-","-"
"6256","equals","/**
     * Compares this triple to another based on the three elements.
     *
     * @param obj  the object to compare to, null returns false
     * @return true if the elements of the triple are equal
     */
    @Override
    public boolean equals(final Object obj)","0","-","-","-","-"
"6257","getLeft","/**
     * Gets the left element from this triple.
     *
     * @return the left element, may be null
     */
    public abstract L getLeft();","0","-","-","-","-"
"6258","getMiddle","/**
     * Gets the middle element from this triple.
     *
     * @return the middle element, may be null
     */
    public abstract M getMiddle();","0","-","-","-","-"
"6259","getRight","/**
     * Gets the right element from this triple.
     *
     * @return the right element, may be null
     */
    public abstract R getRight();","0","-","-","-","-"
"6260","hashCode","/**
     * Returns a suitable hash code.
     * <p>
     * The hash code is adapted from the definition in","0","-","-","-","-"
"6261","toString","/**
     * Returns a String representation of this triple using the format","0","-","-","-","-"
"6262","toString","/**
     * Formats the receiver using the given format.
     *
     * <p>This uses","0","-","-","-","-"
"6263","toCharset","/**
     * Returns the given","0","-","-","-","-"
"6264","toCharset","/**
     * Returns the given","0","-","-","-","-"
"6265","toCharsetName","/**
     * Returns the given","0","-","-","-","-"
"6266","Builder","/**
         * Constructs a new instance.
         */
        private Builder()","0","-","-","-","-"
"6267","get","/**
         * Gets a new","0","-","-","-","-"
"6268","setIgnoreCase","/**
         * Sets the ignoreCase property for new Strings instances.
         *
         * @param ignoreCase the ignoreCase property for new Strings instances.
         * @return this instance.
         */
        public Builder setIgnoreCase(final boolean ignoreCase)","0","-","-","-","-"
"6269","setNullIsLess","/**
         * Sets the nullIsLess property for new Strings instances.
         *
         * @param nullIsLess the nullIsLess property for new Strings instances.
         * @return this instance.
         */
        public Builder setNullIsLess(final boolean nullIsLess)","0","-","-","-","-"
"6270","CiStrings","private CiStrings(final boolean nullIsLess)","0","-","-","-","-"
"6271","compare","@Override
        public int compare(final String s1, final String s2)","0","-","-","-","-"
"6272","contains","@Override
        public boolean contains(final CharSequence str, final CharSequence searchStr)","0","-","-","-","-"
"6273","equals","@Override
        public boolean equals(final CharSequence cs1, final CharSequence cs2)","0","-","-","-","-"
"6274","equals","@Override
        public boolean equals(final String s1, final String s2)","0","-","-","-","-"
"6275","indexOf","@Override
        public int indexOf(final CharSequence str, final CharSequence searchStr, int startPos)","0","-","-","-","-"
"6276","lastIndexOf","@Override
        public int lastIndexOf(final CharSequence str, final CharSequence searchStr, int startPos)","0","-","-","-","-"
"6277","CsStrings","private CsStrings(final boolean nullIsLess)","0","-","-","-","-"
"6278","compare","@Override
        public int compare(final String s1, final String s2)","0","-","-","-","-"
"6279","contains","@Override
        public boolean contains(final CharSequence seq, final CharSequence searchSeq)","0","-","-","-","-"
"6280","equals","@Override
        public boolean equals(final CharSequence cs1, final CharSequence cs2)","0","-","-","-","-"
"6281","equals","@Override
        public boolean equals(final String s1, final String s2)","0","-","-","-","-"
"6282","indexOf","@Override
        public int indexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos)","0","-","-","-","-"
"6283","lastIndexOf","@Override
        public int lastIndexOf(final CharSequence seq, final CharSequence searchSeq, final int startPos)","0","-","-","-","-"
"6284","builder","/**
     * Constructs a new","0","-","-","-","-"
"6285","containsAny","/**
     * Tests if the CharSequence contains any of the CharSequences in the given array.
     *
     * <p>
     * A","0","-","-","-","-"
"6286","eq","/**
     * Tests for equality in a null-safe manner.
     *
     * See JDK-8015417.
     */
    private static boolean eq(final Object o1, final Object o2)","0","-","-","-","-"
"6287","Strings","/**
     * Constructs a new instance.
     *
     * @param ignoreCase Ignores case when possible.
     * @param nullIsLess Compares null as less when possible.
     */
    private Strings(final boolean ignoreCase, final boolean nullIsLess)","0","-","-","-","-"
"6288","appendIfMissing","/**
     * Appends the suffix to the end of the string if the string does not already end with the suffix.
     *
     * <p>
     * Case-sensitive examples
     * </p>
     *
     * <pre>
     * Strings.CS.appendIfMissing(null, null)      = null
     * Strings.CS.appendIfMissing(""abc"", null)     = ""abc""
     * Strings.CS.appendIfMissing("""", ""xyz""        = ""xyz""
     * Strings.CS.appendIfMissing(""abc"", ""xyz"")    = ""abcxyz""
     * Strings.CS.appendIfMissing(""abcxyz"", ""xyz"") = ""abcxyz""
     * Strings.CS.appendIfMissing(""abcXYZ"", ""xyz"") = ""abcXYZxyz""
     * </pre>
     * <p>
     * With additional suffixes:
     * </p>
     *
     * <pre>
     * Strings.CS.appendIfMissing(null, null, null)       = null
     * Strings.CS.appendIfMissing(""abc"", null, null)      = ""abc""
     * Strings.CS.appendIfMissing("""", ""xyz"", null)        = ""xyz""
     * Strings.CS.appendIfMissing(""abc"", ""xyz"", new CharSequence[]","0","-","-","-","-"
"6289","compare","/**
     * Compare two Strings lexicographically, like","0","-","-","-","-"
"6290","contains","/**
     * Tests if CharSequence contains a search CharSequence, handling","0","-","-","-","-"
"6291","containsAny","/**
     * Tests if the CharSequence contains any of the CharSequences in the given array.
     *
     * <p>
     * A","0","-","-","-","-"
"6292","endsWith","/**
     * Tests if a CharSequence ends with a specified suffix.
     *
     * <p>
     * Case-sensitive examples
     * </p>
     *
     * <pre>
     * Strings.CS.endsWith(null, null)      = true
     * Strings.CS.endsWith(null, ""def"")     = false
     * Strings.CS.endsWith(""abcdef"", null)  = false
     * Strings.CS.endsWith(""abcdef"", ""def"") = true
     * Strings.CS.endsWith(""ABCDEF"", ""def"") = false
     * Strings.CS.endsWith(""ABCDEF"", ""cde"") = false
     * Strings.CS.endsWith(""ABCDEF"", """")    = true
     * </pre>
     *
     * <p>
     * Case-insensitive examples
     * </p>
     *
     * <pre>
     * Strings.CI.endsWith(null, null)      = true
     * Strings.CI.endsWith(null, ""def"")     = false
     * Strings.CI.endsWith(""abcdef"", null)  = false
     * Strings.CI.endsWith(""abcdef"", ""def"") = true
     * Strings.CI.endsWith(""ABCDEF"", ""def"") = true
     * Strings.CI.endsWith(""ABCDEF"", ""cde"") = false
     * </pre>
     *
     * @param str    the CharSequence to check, may be null.
     * @param suffix the suffix to find, may be null.
     * @return","0","-","-","-","-"
"6293","endsWithAny","/**
     * Tests if a CharSequence ends with any of the provided suffixes.
     *
     * <p>
     * Case-sensitive examples
     * </p>
     *
     * <pre>
     * Strings.CS.endsWithAny(null, null)                  = false
     * Strings.CS.endsWithAny(null, new String[]","0","-","-","-","-"
"6294","equals","/**
     * Compares two CharSequences, returning","0","-","-","-","-"
"6295","equals","/**
     * Compares two CharSequences, returning","0","-","-","-","-"
"6296","equalsAny","/**
     * Compares given","0","-","-","-","-"
"6297","indexOf","/**
     * Finds the first index within a CharSequence, handling","0","-","-","-","-"
"6298","indexOf","/**
     * Finds the first index within a CharSequence, handling","0","-","-","-","-"
"6299","isCaseSensitive","/**
     * Tests whether to ignore case.
     *
     * @return whether to ignore case.
     */
    public boolean isCaseSensitive()","0","-","-","-","-"
"6300","isNullIsLess","/**
     * Tests whether null is less when comparing.
     *
     * @return whether null is less when comparing.
     */
    boolean isNullIsLess()","0","-","-","-","-"
"6301","lastIndexOf","/**
     * Finds the last index within a CharSequence, handling","0","-","-","-","-"
"6302","lastIndexOf","/**
     * Finds the last index within a CharSequence, handling","0","-","-","-","-"
"6303","prependIfMissing","/**
     * Prepends the prefix to the start of the string if the string does not already start with any of the prefixes.
     *
     * <p>
     * Case-sensitive examples
     * </p>
     *
     * <pre>
     * Strings.CS.prependIfMissing(null, null) = null
     * Strings.CS.prependIfMissing(""abc"", null) = ""abc""
     * Strings.CS.prependIfMissing("""", ""xyz"") = ""xyz""
     * Strings.CS.prependIfMissing(""abc"", ""xyz"") = ""xyzabc""
     * Strings.CS.prependIfMissing(""xyzabc"", ""xyz"") = ""xyzabc""
     * Strings.CS.prependIfMissing(""XYZabc"", ""xyz"") = ""xyzXYZabc""
     * </pre>
     * <p>
     * With additional prefixes,
     * </p>
     *
     * <pre>
     * Strings.CS.prependIfMissing(null, null, null) = null
     * Strings.CS.prependIfMissing(""abc"", null, null) = ""abc""
     * Strings.CS.prependIfMissing("""", ""xyz"", null) = ""xyz""
     * Strings.CS.prependIfMissing(""abc"", ""xyz"", new CharSequence[]","0","-","-","-","-"
"6304","remove","/**
     * Removes all occurrences of a substring from within the source string.
     *
     * <p>
     * A","0","-","-","-","-"
"6305","removeEnd","/**
     * Case-insensitive removal of a substring if it is at the end of a source string, otherwise returns the source string.
     *
     * <p>
     * A","0","-","-","-","-"
"6306","removeStart","/**
     * Case-insensitive removal of a substring if it is at the beginning of a source string, otherwise returns the source string.
     *
     * <p>
     * A","0","-","-","-","-"
"6307","replace","/**
     * Case insensitively replaces all occurrences of a String within another String.
     *
     * <p>
     * A","0","-","-","-","-"
"6308","replace","/**
     * Replaces a String with another String inside a larger String, for the first","0","-","-","-","-"
"6309","replaceOnce","/**
     * Replaces a String with another String inside a larger String, once.
     *
     * <p>
     * A","0","-","-","-","-"
"6310","startsWith","/**
     * Tests if a CharSequence starts with a specified prefix.
     *
     * <p>
     *","0","-","-","-","-"
"6311","startsWithAny","/**
     * Tests if a CharSequence starts with any of the provided prefixes.
     *
     * <p>
     * Case-sensitive examples
     * </p>
     *
     * <pre>
     * Strings.CS.startsWithAny(null, null)      = false
     * Strings.CS.startsWithAny(null, new String[]","0","-","-","-","-"
"6312","getInstance","/**
     * Factory method to create a new CharSet using a special syntax.
     *
     * <ul>
     *  <li>","0","-","-","-","-"
"6313","CharSet","/**
     * Constructs a new CharSet using the set syntax.
     * Each string is merged in with the set.
     *
     * @param set  Strings to merge into the initial set
     * @throws NullPointerException if set is","0","-","-","-","-"
"6314","add","/**
     * Add a set definition string to the","0","-","-","-","-"
"6315","contains","/**
     * Does the","0","-","-","-","-"
"6316","equals","/**
     * Compares two","0","-","-","-","-"
"6317","getCharRanges","/**
     * Gets the internal set as an array of CharRange objects.
     *
     * @return an array of immutable CharRange objects
     * @since 2.0
     */
// NOTE: This is no longer public as CharRange is no longer a public class.
//       It may be replaced when CharSet moves to Range.
    /*public*/ CharRange[] getCharRanges()","0","-","-","-","-"
"6318","hashCode","/**
     * Gets a hash code compatible with the equals method.
     *
     * @return a suitable hash code
     * @since 2.0
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"6319","toString","/**
     * Gets a string representation of the set.
     *
     * @return string representation of the set
     */
    @Override
    public String toString()","0","-","-","-","-"
"6320","BitField","/**
     * Creates a BitField instance.
     *
     * @param mask the mask specifying which bits apply to this
     *  BitField. Bits that are set in this mask are the bits
     *  that this BitField operates on
     */
    public BitField(final int mask)","0","-","-","-","-"
"6321","clear","/**
     * Clears the bits.
     *
     * @param holder the int data containing the bits we're
     *  interested in
     * @return the value of holder with the specified bits cleared
     *  (set to","0","-","-","-","-"
"6322","clearByte","/**
     * Clears the bits.
     *
     * @param holder the byte data containing the bits we're
     *  interested in
     *
     * @return the value of holder with the specified bits cleared
     *  (set to","0","-","-","-","-"
"6323","clearShort","/**
     * Clears the bits.
     *
     * @param holder the short data containing the bits we're
     *  interested in
     * @return the value of holder with the specified bits cleared
     *  (set to","0","-","-","-","-"
"6324","getRawValue","/**
     * Obtains the value for the specified BitField, unshifted.
     *
     * @param holder the int data containing the bits we're
     *  interested in
     * @return the selected bits
     */
    public int getRawValue(final int holder)","0","-","-","-","-"
"6325","getShortRawValue","/**
     * Obtains the value for the specified BitField, unshifted.
     *
     * @param holder the short data containing the bits we're
     *  interested in
     * @return the selected bits
     */
    public short getShortRawValue(final short holder)","0","-","-","-","-"
"6326","getShortValue","/**
     * Obtains the value for the specified BitField, appropriately
     * shifted right, as a short.
     *
     * <p>Many users of a BitField will want to treat the specified
     * bits as an int value, and will not want to be aware that the
     * value is stored as a BitField (and so shifted left so many
     * bits).</p>
     *
     * @see #setShortValue(short,short)
     * @param holder the short data containing the bits we're
     *  interested in
     * @return the selected bits, shifted right appropriately
     */
    public short getShortValue(final short holder)","0","-","-","-","-"
"6327","getValue","/**
     * Obtains the value for the specified BitField, appropriately
     * shifted right.
     *
     * <p>Many users of a BitField will want to treat the specified
     * bits as an int value, and will not want to be aware that the
     * value is stored as a BitField (and so shifted left so many
     * bits).</p>
     *
     * @see #setValue(int,int)
     * @param holder the int data containing the bits we're interested
     *  in
     * @return the selected bits, shifted right appropriately
     */
    public int getValue(final int holder)","0","-","-","-","-"
"6328","isAllSet","/**
     * Returns whether all of the bits are set or not.
     *
     * <p>This is a stricter test than","0","-","-","-","-"
"6329","isSet","/**
     * Returns whether the field is set or not.
     *
     * <p>This is most commonly used for a single-bit field, which is
     * often used to represent a boolean value; the results of using
     * it for a multi-bit field is to determine whether *any* of its
     * bits are set.</p>
     *
     * @param holder the int data containing the bits we're interested
     *  in
     * @return","0","-","-","-","-"
"6330","set","/**
     * Sets the bits.
     *
     * @param holder the int data containing the bits we're
     *  interested in
     * @return the value of holder with the specified bits set
     *  to","0","-","-","-","-"
"6331","setBoolean","/**
     * Sets a boolean BitField.
     *
     * @param holder the int data containing the bits we're
     *  interested in
     * @param flag indicating whether to set or clear the bits
     * @return the value of holder with the specified bits set or
     *         cleared
     */
    public int setBoolean(final int holder, final boolean flag)","0","-","-","-","-"
"6332","setByte","/**
     * Sets the bits.
     *
     * @param holder the byte data containing the bits we're
     *  interested in
     *
     * @return the value of holder with the specified bits set
     *  to","0","-","-","-","-"
"6333","setByteBoolean","/**
     * Sets a boolean BitField.
     *
     * @param holder the byte data containing the bits we're
     *  interested in
     * @param flag indicating whether to set or clear the bits
     * @return the value of holder with the specified bits set or
     *  cleared
     */
    public byte setByteBoolean(final byte holder, final boolean flag)","0","-","-","-","-"
"6334","setShort","/**
     * Sets the bits.
     *
     * @param holder the short data containing the bits we're
     *  interested in
     * @return the value of holder with the specified bits set
     *  to","0","-","-","-","-"
"6335","setShortBoolean","/**
     * Sets a boolean BitField.
     *
     * @param holder the short data containing the bits we're
     *  interested in
     * @param flag indicating whether to set or clear the bits
     * @return the value of holder with the specified bits set or
     *  cleared
     */
    public short setShortBoolean(final short holder, final boolean flag)","0","-","-","-","-"
"6336","setShortValue","/**
     * Replaces the bits with new values.
     *
     * @see #getShortValue(short)
     * @param holder the short data containing the bits we're
     *  interested in
     * @param value the new value for the specified bits
     * @return the value of holder with the bits from the value
     *  parameter replacing the old bits
     */
    public short setShortValue(final short holder, final short value)","0","-","-","-","-"
"6337","setValue","/**
     * Replaces the bits with new values.
     *
     * @see #getValue(int)
     * @param holder the int data containing the bits we're
     *  interested in
     * @param value the new value for the specified bits
     * @return the value of holder with the bits from the value
     *  parameter replacing the old bits
     */
    public int setValue(final int holder, final int value)","0","-","-","-","-"
"6338","CharacterIterator","/**
         * Constructs a new iterator for the character range.
         *
         * @param r The character range
         */
        private CharacterIterator(final CharRange r)","0","-","-","-","-"
"6339","hasNext","/**
         * Has the iterator not reached the end character yet?
         *
         * @return","0","-","-","-","-"
"6340","next","/**
         * Returns the next character in the iteration
         *
         * @return","0","-","-","-","-"
"6341","prepareNext","/**
         * Prepares the next character in the range.
         */
        private void prepareNext()","0","-","-","-","-"
"6342","remove","/**
         * Always throws UnsupportedOperationException.
         *
         * @throws UnsupportedOperationException Always thrown.
         * @see java.util.Iterator#remove()
         */
        @Override
        public void remove()","0","-","-","-","-"
"6343","is","/**
     * Constructs a","0","-","-","-","-"
"6344","isIn","/**
     * Constructs a","0","-","-","-","-"
"6345","isNot","/**
     * Constructs a negated","0","-","-","-","-"
"6346","isNotIn","/**
     * Constructs a negated","0","-","-","-","-"
"6347","CharRange","/**
     * Constructs a","0","-","-","-","-"
"6348","contains","/**
     * Is the character specified contained in this range.
     *
     * @param ch  the character to check
     * @return","0","-","-","-","-"
"6349","contains","/**
     * Are all the characters of the passed in range contained in
     * this range.
     *
     * @param range  the range to check against
     * @return","0","-","-","-","-"
"6350","equals","/**
     * Compares two CharRange objects, returning true if they represent
     * exactly the same range of characters defined in the same way.
     *
     * @param obj  the object to compare to
     * @return true if equal
     */
    @Override
    public boolean equals(final Object obj)","0","-","-","-","-"
"6351","getEnd","/**
     * Gets the end character for this character range.
     *
     * @return the end char (inclusive)
     */
    public char getEnd()","0","-","-","-","-"
"6352","getStart","/**
     * Gets the start character for this character range.
     *
     * @return the start char (inclusive)
     */
    public char getStart()","0","-","-","-","-"
"6353","hashCode","/**
     * Gets a hashCode compatible with the equals method.
     *
     * @return a suitable hashCode
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"6354","isNegated","/**
     * Is this","0","-","-","-","-"
"6355","iterator","/**
     * Returns an iterator which can be used to walk through the characters described by this range.
     *
     * <p>#NotThreadSafe# the iterator is not thread-safe</p>
     * @return an iterator to the chars represented by this range
     * @since 2.5
     */
    @Override
    public Iterator<Character> iterator()","0","-","-","-","-"
"6356","toString","/**
     * Gets a string representation of the character range.
     *
     * @return string representation of this range
     */
    @Override
    public String toString()","0","-","-","-","-"
"6357","SimpleCollector","private SimpleCollector(final Supplier<A> supplier, final BiConsumer<A, T> accumulator, final BinaryOperator<A> combiner, final Function<A, R> finisher,
            final Set<Characteristics> characteristics)","0","-","-","-","-"
"6358","accumulator","@Override
        public BiConsumer<A, T> accumulator()","0","-","-","-","-"
"6359","characteristics","@Override
        public Set<Characteristics> characteristics()","0","-","-","-","-"
"6360","combiner","@Override
        public BinaryOperator<A> combiner()","0","-","-","-","-"
"6361","finisher","@Override
        public Function<A, R> finisher()","0","-","-","-","-"
"6362","supplier","@Override
        public Supplier<A> supplier()","0","-","-","-","-"
"6363","collect","/**
     * Delegates to","0","-","-","-","-"
"6364","joining","/**
     * Returns a","0","-","-","-","-"
"6365","joining","/**
     * Returns a","0","-","-","-","-"
"6366","joining","/**
     * Returns a","0","-","-","-","-"
"6367","joining","/**
     * Returns a","0","-","-","-","-"
"6368","LangCollectors","private LangCollectors()","0","-","-","-","-"
"6369","of","/**
     * Null-safe version of","0","-","-","-","-"
"6370","range","/**
     * Shorthand for","0","-","-","-","-"
"6371","rangeClosed","/**
     * Shorthand for","0","-","-","-","-"
"6372","IntStreams","/**
     * Make private in 4.0.
     *
     * @deprecated TODO Make private in 4.0.
     */
    @Deprecated
    public IntStreams()","0","-","-","-","-"
"6373","ArrayCollector","/**
         * Constructs a new instance for the given element type.
         *
         * @param elementType The element type.
         */
        public ArrayCollector(final Class<E> elementType)","0","-","-","-","-"
"6374","accumulator","@Override
        public BiConsumer<List<E>, E> accumulator()","0","-","-","-","-"
"6375","characteristics","@Override
        public Set<Characteristics> characteristics()","0","-","-","-","-"
"6376","combiner","@Override
        public BinaryOperator<List<E>> combiner()","0","-","-","-","-"
"6377","finisher","@Override
        public Function<List<E>, E[]> finisher()","0","-","-","-","-"
"6378","supplier","@Override
        public Supplier<List<E>> supplier()","0","-","-","-","-"
"6379","EnumerationSpliterator","/**
         * Creates a spliterator reporting the given estimated size and additionalCharacteristics.
         *
         * @param estimatedSize the estimated size of this spliterator if known, otherwise","0","-","-","-","-"
"6380","forEachRemaining","@Override
        public void forEachRemaining(final Consumer<? super T> action)","0","-","-","-","-"
"6381","next","private boolean next(final Consumer<? super T> action)","0","-","-","-","-"
"6382","tryAdvance","@Override
        public boolean tryAdvance(final Consumer<? super T> action)","0","-","-","-","-"
"6383","FailableStream","/**
         * Constructs a new instance with the given","0","-","-","-","-"
"6384","allMatch","/**
         * Returns whether all elements of this stream match the provided predicate. May not evaluate the predicate on all
         * elements if not necessary for determining the result. If the stream is empty then","0","-","-","-","-"
"6385","anyMatch","/**
         * Returns whether any elements of this stream match the provided predicate. May not evaluate the predicate on all
         * elements if not necessary for determining the result. If the stream is empty then","0","-","-","-","-"
"6386","assertNotTerminated","/**
         * Throws IllegalStateException if this stream is already terminated.
         *
         * @throws IllegalStateException if this stream is already terminated.
         */
        protected void assertNotTerminated()","0","-","-","-","-"
"6387","collect","/**
         * Performs a mutable reduction operation on the elements of this stream using a","0","-","-","-","-"
"6388","collect","/**
         * Performs a mutable reduction operation on the elements of this FailableStream. A mutable reduction is one in which
         * the reduced value is a mutable result container, such as an","0","-","-","-","-"
"6389","filter","/**
         * Returns a FailableStream consisting of the elements of this stream that match the given FailablePredicate.
         * <p>
         * This is an intermediate operation.
         * </p>
         *
         * @param predicate a non-interfering, stateless predicate to apply to each element to determine if it should be
         *        included.
         * @return the new stream
         */
        public FailableStream<T> filter(final FailablePredicate<T, ?> predicate)","0","-","-","-","-"
"6390","forEach","/**
         * Performs an action for each element of this stream.
         * <p>
         * This is a terminal operation.
         * </p>
         * <p>
         * The behavior of this operation is explicitly nondeterministic. For parallel stream pipelines, this operation does
         * <em>not</em> guarantee to respect the encounter order of the stream, as doing so would sacrifice the benefit of
         * parallelism. For any given element, the action may be performed at whatever time and in whatever thread the library
         * chooses. If the action accesses shared state, it is responsible for providing the required synchronization.
         * </p>
         *
         * @param action a non-interfering action to perform on the elements
         */
        public void forEach(final FailableConsumer<T, ?> action)","0","-","-","-","-"
"6391","makeTerminated","/**
         * Marks this stream as terminated.
         *
         * @throws IllegalStateException if this stream is already terminated.
         */
        protected void makeTerminated()","0","-","-","-","-"
"6392","map","/**
         * Returns a stream consisting of the results of applying the given function to the elements of this stream.
         *
         * <p>
         * This is an intermediate operation.
         * </p>
         *
         * @param <R> The element type of the new stream
         * @param mapper A non-interfering, stateless function to apply to each element
         * @return the new stream
         */
        public <R> FailableStream<R> map(final FailableFunction<T, R, ?> mapper)","0","-","-","-","-"
"6393","reduce","/**
         * Performs a reduction on the elements of this stream, using the provided identity value and an associative
         * accumulation function, and returns the reduced value. This is equivalent to:
         *
         * <pre>
         *","0","-","-","-","-"
"6394","stream","/**
         * Converts the FailableStream into an equivalent stream.
         *
         * @return A stream, which will return the same elements, which this FailableStream would return.
         */
        public Stream<T> stream()","0","-","-","-","-"
"6395","failableStream","/**
     * Converts the given","0","-","-","-","-"
"6396","failableStream","/**
     * Converts the given","0","-","-","-","-"
"6397","failableStream","/**
     * Shorthand for","0","-","-","-","-"
"6398","failableStream","/**
     * Shorthand for","0","-","-","-","-"
"6399","instancesOf","/**
     * Streams only instances of the give Class in a collection.
     * <p>
     * This method shorthand for:
     * </p>
     * <pre>
     *","0","-","-","-","-"
"6400","instancesOf","@SuppressWarnings(""unchecked"") // After the isInstance check, we still need to type-cast.
    private static <E> Stream<E> instancesOf(final Class<? super E> clazz, final Stream<?> stream)","0","-","-","-","-"
"6401","nonNull","/**
     * Streams the non-null elements of a collection.
     *
     * @param <E> the type of elements in the collection.
     * @param collection the collection to stream or null.
     * @return A non-null stream that filters out null elements.
     * @since 3.13.0
     */
    public static <E> Stream<E> nonNull(final Collection<E> collection)","0","-","-","-","-"
"6402","nonNull","/**
     * Streams the non-null element.
     *
     * @param <E> the type of elements in the collection.
     * @param array the element to stream or null.
     * @return A non-null stream that filters out a null element.
     * @since 3.15.0
     */
    public static <E> Stream<E> nonNull(final E array)","0","-","-","-","-"
"6403","nonNull","/**
     * Streams the non-null elements of an array.
     *
     * @param <E> the type of elements in the collection.
     * @param array the array to stream or null.
     * @return A non-null stream that filters out null elements.
     * @since 3.13.0
     */
    @SafeVarargs
    public static <E> Stream<E> nonNull(final E... array)","0","-","-","-","-"
"6404","nonNull","/**
     * Streams the non-null elements of a stream.
     *
     * @param <E> the type of elements in the collection.
     * @param stream the stream to stream or null.
     * @return A non-null stream that filters out null elements.
     * @since 3.13.0
     */
    public static <E> Stream<E> nonNull(final Stream<E> stream)","0","-","-","-","-"
"6405","of","/**
     * Delegates to","0","-","-","-","-"
"6406","of","/**
     * Streams the elements of the given enumeration in order.
     *
     * @param <E> The enumeration element type.
     * @param enumeration The enumeration to stream.
     * @return a new stream.
     * @since 3.13.0
     */
    public static <E> Stream<E> of(final Enumeration<E> enumeration)","0","-","-","-","-"
"6407","of","/**
     * Creates a sequential stream on the given Iterable.
     *
     * @param <E> the type of elements in the Iterable.
     * @param iterable the Iterable to stream or null.
     * @return a new Stream or","0","-","-","-","-"
"6408","of","/**
     * Creates a sequential stream on the given Iterator.
     *
     * @param <E> the type of elements in the Iterator.
     * @param iterator the Iterator to stream or null.
     * @return a new Stream or","0","-","-","-","-"
"6409","of","/**
     * Returns the stream or","0","-","-","-","-"
"6410","of","/**
     * Null-safe version of","0","-","-","-","-"
"6411","stream","/**
     * Converts the given","0","-","-","-","-"
"6412","stream","/**
     * Converts the given","0","-","-","-","-"
"6413","streamOf","private static <T> Stream<T> streamOf(final T value)","0","-","-","-","-"
"6414","toArray","/**
     * Returns a","0","-","-","-","-"
"6415","Streams","/**
     * Constructs a new instance.
     *
     * @deprecated Will be private in 4.0.0.
     */
    @Deprecated
    public Streams()","0","-","-","-","-"
"6416","comparator","/**
     * Gets the class comparator, comparing by class name.
     *
     * @return the class comparator.
     * @since 3.13.0
     */
    public static Comparator<Class<?>> comparator()","0","-","-","-","-"
"6417","convertClassesToClassNames","/**
     * Given a","0","-","-","-","-"
"6418","convertClassNamesToClasses","/**
     * Given a","0","-","-","-","-"
"6419","getAbbreviatedName","/**
     * Gets the abbreviated name of a","0","-","-","-","-"
"6420","getAbbreviatedName","/**
     * Gets the abbreviated class name from a","0","-","-","-","-"
"6421","getAllInterfaces","/**
     * Gets a","0","-","-","-","-"
"6422","getAllInterfaces","/**
     * Gets the interfaces for the specified class.
     *
     * @param cls the class to look up, may be","0","-","-","-","-"
"6423","getAllSuperclasses","/**
     * Gets a","0","-","-","-","-"
"6424","getCanonicalName","/**
     * Gets the canonical class name for a","0","-","-","-","-"
"6425","getCanonicalName","/**
     * Gets the canonical name for a","0","-","-","-","-"
"6426","getCanonicalName","/**
     * Gets the canonical name for an","0","-","-","-","-"
"6427","getCanonicalName","/**
     * Gets the canonical name for an","0","-","-","-","-"
"6428","getCanonicalName","/**
     * Converts a given name of class into canonical format. If name of class is not a name of array class it returns
     * unchanged name.
     *
     * <p>
     * The method does not change the","0","-","-","-","-"
"6429","getClass","/**
     * Returns the (initialized) class represented by","0","-","-","-","-"
"6430","getClass","/**
     * Returns the class represented by","0","-","-","-","-"
"6431","getClass","/**
     * Returns the (initialized) class represented by","0","-","-","-","-"
"6432","getClass","/**
     * Returns the class represented by","0","-","-","-","-"
"6433","getComponentType","/**
     * Delegates to","0","-","-","-","-"
"6434","getName","/**
     * Null-safe version of","0","-","-","-","-"
"6435","getName","/**
     * Null-safe version of","0","-","-","-","-"
"6436","getName","/**
     * Null-safe version of","0","-","-","-","-"
"6437","getName","/**
     * Null-safe version of","0","-","-","-","-"
"6438","getPackageCanonicalName","/**
     * Gets the package name from the canonical name of a","0","-","-","-","-"
"6439","getPackageCanonicalName","/**
     * Gets the package name from the class name of an","0","-","-","-","-"
"6440","getPackageCanonicalName","/**
     * Gets the package name from the class name.
     *
     * <p>
     * The string passed in is assumed to be a class name - it is not checked.
     * </p>
     * <p>
     * If the class is in the default package, return an empty string.
     * </p>
     *
     * @param name the name to get the package name for, may be","0","-","-","-","-"
"6441","getPackageName","/**
     * Gets the package name of a","0","-","-","-","-"
"6442","getPackageName","/**
     * Gets the package name of an","0","-","-","-","-"
"6443","getPackageName","/**
     * Gets the package name from a","0","-","-","-","-"
"6444","getPrimitiveClass","/**
     * Gets the primitive class for the given class name, for example ""byte"".
     *
     * @param className the primitive class for the given class name.
     * @return the primitive class.
     */
    static Class<?> getPrimitiveClass(final String className)","0","-","-","-","-"
"6445","getPublicMethod","/**
     * Returns the desired Method much like","0","-","-","-","-"
"6446","getShortCanonicalName","/**
     * Gets the canonical name minus the package name from a","0","-","-","-","-"
"6447","getShortCanonicalName","/**
     * Gets the canonical name minus the package name for an","0","-","-","-","-"
"6448","getShortCanonicalName","/**
     * Gets the canonical name minus the package name from a String.
     *
     * <p>
     * The string passed in is assumed to be a class name - it is not checked.
     * </p>
     *
     * <p>
     * Note that this method is mainly designed to handle the arrays and primitives properly. If the class is an inner class
     * then the result value will not contain the outer classes. This way the behavior of this method is different from
     *","0","-","-","-","-"
"6449","getShortClassName","/**
     * Gets the class name minus the package name from a","0","-","-","-","-"
"6450","getShortClassName","/**
     * Gets the class name of the","0","-","-","-","-"
"6451","getShortClassName","/**
     * Gets the class name minus the package name from a String.
     *
     * <p>
     * The string passed in is assumed to be a class name - it is not checked. The string has to be formatted the way as the
     * JDK method","0","-","-","-","-"
"6452","getSimpleName","/**
     * Null-safe version of","0","-","-","-","-"
"6453","getSimpleName","/**
     * Null-safe version of","0","-","-","-","-"
"6454","getSimpleName","/**
     * Null-safe version of","0","-","-","-","-"
"6455","getSimpleName","/**
     * Null-safe version of","0","-","-","-","-"
"6456","hierarchy","/**
     * Gets an","0","-","-","-","-"
"6457","hierarchy","/**
     * Gets an","0","-","-","-","-"
"6458","hasNext","@Override
                public boolean hasNext()","0","-","-","-","-"
"6459","next","@Override
                public Class<?> next()","0","-","-","-","-"
"6460","remove","@Override
                public void remove()","0","-","-","-","-"
"6461","hasNext","@Override
                public boolean hasNext()","0","-","-","-","-"
"6462","next","@Override
                public Class<?> next()","0","-","-","-","-"
"6463","remove","@Override
                public void remove()","0","-","-","-","-"
"6464","walkInterfaces","private void walkInterfaces(final Set<Class<?>> addTo, final Class<?> c)","0","-","-","-","-"
"6465","isAssignable","/**
     * Checks if one","0","-","-","-","-"
"6466","isAssignable","/**
     * Checks if one","0","-","-","-","-"
"6467","isAssignable","/**
     * Checks if an array of Classes can be assigned to another array of Classes.
     *
     * <p>
     * This method calls","0","-","-","-","-"
"6468","isAssignable","/**
     * Checks if an array of Classes can be assigned to another array of Classes.
     *
     * <p>
     * This method calls","0","-","-","-","-"
"6469","isInnerClass","/**
     * Is the specified class an inner class or static nested class.
     *
     * @param cls the class to check, may be null
     * @return","0","-","-","-","-"
"6470","isPrimitiveOrWrapper","/**
     * Returns whether the given","0","-","-","-","-"
"6471","isPrimitiveWrapper","/**
     * Returns whether the given","0","-","-","-","-"
"6472","isPublic","/**
     * Tests whether a","0","-","-","-","-"
"6473","primitivesToWrappers","/**
     * Converts the specified array of primitive Class objects to an array of its corresponding wrapper Class objects.
     *
     * @param classes the class array to convert, may be null or empty
     * @return an array which contains for each given class, the wrapper class or the original class if class is not a
     *         primitive.","0","-","-","-","-"
"6474","primitiveToWrapper","/**
     * Converts the specified primitive Class object to its corresponding wrapper Class object.
     *
     * <p>
     * NOTE: From v2.2, this method handles","0","-","-","-","-"
"6475","toCanonicalName","/**
     * Converts a class name to a JLS style class name.
     *
     * @param className the class name
     * @return the converted name
     * @throws NullPointerException if the className is null
     */
    private static String toCanonicalName(final String className)","0","-","-","-","-"
"6476","toClass","/**
     * Converts an array of","0","-","-","-","-"
"6477","useFull","/**
     * Decides if the part that was just copied to its destination location in the work array can be kept as it was copied
     * or must be abbreviated. It must be kept when the part is the last one, which is the simple name of the class. In this
     * case the","0","-","-","-","-"
"6478","wrappersToPrimitives","/**
     * Converts the specified array of wrapper Class objects to an array of its corresponding primitive Class objects.
     *
     * <p>
     * This method invokes","0","-","-","-","-"
"6479","wrapperToPrimitive","/**
     * Converts the specified wrapper class to its corresponding primitive class.
     *
     * <p>
     * This method is the counter part of","0","-","-","-","-"
"6480","ClassUtils","/**
     * ClassUtils instances should NOT be constructed in standard programming. Instead, the class should be used as
     *","0","-","-","-","-"
"6481","add","/**
     * Copies the given array and adds the given element at the end of the new array.
     * <p>
     * The new array contains the same elements of the input
     * array plus the given element in the last position. The component type of
     * the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6482","add","/**
     * Inserts the specified element at the specified position in the array.
     * Shifts the element currently at that position (if any) and any subsequent
     * elements to the right (adds one to their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array plus the given element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6483","add","/**
     * Copies the given array and adds the given element at the end of the new array.
     * <p>
     * The new array contains the same elements of the input
     * array plus the given element in the last position. The component type of
     * the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6484","add","/**
     * Inserts the specified element at the specified position in the array.
     * Shifts the element currently at that position (if any) and any subsequent
     * elements to the right (adds one to their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array plus the given element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6485","add","/**
     * Copies the given array and adds the given element at the end of the new array.
     * <p>
     * The new array contains the same elements of the input
     * array plus the given element in the last position. The component type of
     * the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6486","add","/**
     * Inserts the specified element at the specified position in the array.
     * Shifts the element currently at that position (if any) and any subsequent
     * elements to the right (adds one to their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array plus the given element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6487","add","/**
     * Copies the given array and adds the given element at the end of the new array.
     *
     * <p>
     * The new array contains the same elements of the input
     * array plus the given element in the last position. The component type of
     * the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6488","add","/**
     * Inserts the specified element at the specified position in the array.
     * Shifts the element currently at that position (if any) and any subsequent
     * elements to the right (adds one to their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array plus the given element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6489","add","/**
     * Copies the given array and adds the given element at the end of the new array.
     * <p>
     * The new array contains the same elements of the input
     * array plus the given element in the last position. The component type of
     * the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6490","add","/**
     * Inserts the specified element at the specified position in the array.
     * Shifts the element currently at that position (if any) and any subsequent
     * elements to the right (adds one to their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array plus the given element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6491","add","/**
     * Copies the given array and adds the given element at the end of the new array.
     * <p>
     * The new array contains the same elements of the input
     * array plus the given element in the last position. The component type of
     * the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6492","add","/**
     * Inserts the specified element at the specified position in the array.
     * Shifts the element currently at that position (if any) and any subsequent
     * elements to the right (adds one to their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array plus the given element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6493","add","/**
     * Inserts the specified element at the specified position in the array.
     * Shifts the element currently at that position (if any) and any subsequent
     * elements to the right (adds one to their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array plus the given element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6494","add","/**
     * Copies the given array and adds the given element at the end of the new array.
     * <p>
     * The new array contains the same elements of the input
     * array plus the given element in the last position. The component type of
     * the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6495","add","/**
     * Underlying implementation of add(array, index, element) methods.
     * The last parameter is the class, which may not equal element.getClass
     * for primitives.
     *
     * @param array  the array to add the element to, may be","0","-","-","-","-"
"6496","add","/**
     * Inserts the specified element at the specified position in the array.
     * Shifts the element currently at that position (if any) and any subsequent
     * elements to the right (adds one to their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array plus the given element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6497","add","/**
     * Copies the given array and adds the given element at the end of the new array.
     * <p>
     * The new array contains the same elements of the input
     * array plus the given element in the last position. The component type of
     * the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6498","add","/**
     * Inserts the specified element at the specified position in the array.
     * Shifts the element currently at that position (if any) and any subsequent
     * elements to the right (adds one to their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array plus the given element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6499","add","/**
     * Copies the given array and adds the given element at the end of the new array.
     * <p>
     * The new array contains the same elements of the input
     * array plus the given element in the last position. The component type of
     * the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6500","addAll","/**
     * Adds all the elements of the given arrays into a new array.
     * <p>
     * The new array contains all of the element of","0","-","-","-","-"
"6501","addAll","/**
     * Adds all the elements of the given arrays into a new array.
     * <p>
     * The new array contains all of the element of","0","-","-","-","-"
"6502","addAll","/**
     * Adds all the elements of the given arrays into a new array.
     * <p>
     * The new array contains all of the element of","0","-","-","-","-"
"6503","addAll","/**
     * Adds all the elements of the given arrays into a new array.
     * <p>
     * The new array contains all of the element of","0","-","-","-","-"
"6504","addAll","/**
     * Adds all the elements of the given arrays into a new array.
     * <p>
     * The new array contains all of the element of","0","-","-","-","-"
"6505","addAll","/**
     * Adds all the elements of the given arrays into a new array.
     * <p>
     * The new array contains all of the element of","0","-","-","-","-"
"6506","addAll","/**
     * Adds all the elements of the given arrays into a new array.
     * <p>
     * The new array contains all of the element of","0","-","-","-","-"
"6507","addAll","/**
     * Adds all the elements of the given arrays into a new array.
     * <p>
     * The new array contains all of the element of","0","-","-","-","-"
"6508","addAll","/**
     * Adds all the elements of the given arrays into a new array.
     * <p>
     * The new array contains all of the element of","0","-","-","-","-"
"6509","addFirst","/**
     * Copies the given array and adds the given element at the beginning of the new array.
     * <p>
     * The new array contains the same elements of the input array plus the given element in the first position. The
     * component type of the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6510","addFirst","/**
     * Copies the given array and adds the given element at the beginning of the new array.
     * <p>
     * The new array contains the same elements of the input array plus the given element in the first position. The
     * component type of the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6511","addFirst","/**
     * Copies the given array and adds the given element at the beginning of the new array.
     * <p>
     * The new array contains the same elements of the input array plus the given element in the first position. The
     * component type of the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6512","addFirst","/**
     * Copies the given array and adds the given element at the beginning of the new array.
     * <p>
     * The new array contains the same elements of the input array plus the given element in the first position. The
     * component type of the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6513","addFirst","/**
     * Copies the given array and adds the given element at the beginning of the new array.
     * <p>
     * The new array contains the same elements of the input array plus the given element in the first position. The
     * component type of the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6514","addFirst","/**
     * Copies the given array and adds the given element at the beginning of the new array.
     * <p>
     * The new array contains the same elements of the input array plus the given element in the first position. The
     * component type of the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6515","addFirst","/**
     * Copies the given array and adds the given element at the beginning of the new array.
     * <p>
     * The new array contains the same elements of the input array plus the given element in the first position. The
     * component type of the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6516","addFirst","/**
     * Copies the given array and adds the given element at the beginning of the new array.
     * <p>
     * The new array contains the same elements of the input array plus the given element in the first position. The
     * component type of the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6517","addFirst","/**
     * Copies the given array and adds the given element at the beginning of the new array.
     * <p>
     * The new array contains the same elements of the input array plus the given element in the first position. The
     * component type of the new array is the same as that of the input array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6518","arraycopy","/**
     * A fluent version of","0","-","-","-","-"
"6519","arraycopy","/**
     * A fluent version of","0","-","-","-","-"
"6520","arraycopy","/**
     * A fluent version of","0","-","-","-","-"
"6521","clone","/**
     * Clones an array or returns","0","-","-","-","-"
"6522","clone","/**
     * Clones an array or returns","0","-","-","-","-"
"6523","clone","/**
     * Clones an array or returns","0","-","-","-","-"
"6524","clone","/**
     * Clones an array or returns","0","-","-","-","-"
"6525","clone","/**
     * Clones an array or returns","0","-","-","-","-"
"6526","clone","/**
     * Clones an array or returns","0","-","-","-","-"
"6527","clone","/**
     * Clones an array or returns","0","-","-","-","-"
"6528","clone","/**
     * Clones an array or returns","0","-","-","-","-"
"6529","clone","/**
     * Shallow clones an array or returns","0","-","-","-","-"
"6530","contains","/**
     * Checks if the value is in the given array.
     * <p>
     * The method returns","0","-","-","-","-"
"6531","contains","/**
     * Checks if the value is in the given array.
     * <p>
     * The method returns","0","-","-","-","-"
"6532","contains","/**
     * Checks if the value is in the given array.
     * <p>
     * The method returns","0","-","-","-","-"
"6533","contains","/**
     * Checks if the value is in the given array.
     * <p>
     * The method returns","0","-","-","-","-"
"6534","contains","/**
     * Checks if a value falling within the given tolerance is in the
     * given array.  If the array contains a value within the inclusive range
     * defined by (value - tolerance) to (value + tolerance).
     * <p>
     * The method returns","0","-","-","-","-"
"6535","contains","/**
     * Checks if the value is in the given array.
     * <p>
     * The method returns","0","-","-","-","-"
"6536","contains","/**
     * Checks if the value is in the given array.
     * <p>
     * The method returns","0","-","-","-","-"
"6537","contains","/**
     * Checks if the value is in the given array.
     * <p>
     * The method returns","0","-","-","-","-"
"6538","contains","/**
     * Checks if the object is in the given array.
     * <p>
     * The method returns","0","-","-","-","-"
"6539","contains","/**
     * Checks if the value is in the given array.
     * <p>
     * The method returns","0","-","-","-","-"
"6540","containsAny","/**
     * Checks if any of the ints are in the given array.
     * <p>
     * The method returns","0","-","-","-","-"
"6541","containsAny","/**
     * Checks if any of the objects are in the given array.
     * <p>
     * The method returns","0","-","-","-","-"
"6542","copyArrayGrow1","/**
     * Returns a copy of the given array of size 1 greater than the argument.
     * The last value of the array is left to the default value.
     *
     * @param array The array to copy, must not be","0","-","-","-","-"
"6543","get","/**
     * Gets the nTh element of an array or null if the index is out of bounds or the array is null.
     *
     * @param <T> The type of array elements.
     * @param array The array to index.
     * @param index The index
     * @return the nTh element of an array or null if the index is out of bounds or the array is null.
     * @since 3.11
     */
    public static <T> T get(final T[] array, final int index)","0","-","-","-","-"
"6544","get","/**
     * Gets the nTh element of an array or a default value if the index is out of bounds.
     *
     * @param <T> The type of array elements.
     * @param array The array to index.
     * @param index The index
     * @param defaultValue The return value of the given index is out of bounds.
     * @return the nTh element of an array or a default value if the index is out of bounds.
     * @since 3.11
     */
    public static <T> T get(final T[] array, final int index, final T defaultValue)","0","-","-","-","-"
"6545","getComponentType","/**
     * Gets an array's component type.
     *
     * @param <T> The array type.
     * @param array The array.
     * @return The component type.
     * @since 3.13.0
     */
    public static <T> Class<T> getComponentType(final T[] array)","0","-","-","-","-"
"6546","getLength","/**
     * Returns the length of the specified array.
     * This method can deal with","0","-","-","-","-"
"6547","hashCode","/**
     * Gets a hash code for an array handling multidimensional arrays correctly.
     * <p>
     * Multi-dimensional primitive arrays are also handled correctly by this method.
     * </p>
     *
     * @param array  the array to get a hash code for,","0","-","-","-","-"
"6548","indexesOf","/**
     * Finds the indices of the given value in the array.
     * <p>
     * This method returns an empty BitSet for a","0","-","-","-","-"
"6549","indexesOf","/**
     * Finds the indices of the given value in the array starting at the given index.
     * <p>
     * This method returns an empty BitSet for a","0","-","-","-","-"
"6550","indexesOf","/**
     * Finds the indices of the given value in the array.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6551","indexesOf","/**
     * Finds the indices of the given value in the array starting at the given index.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6552","indexesOf","/**
     * Finds the indices of the given value in the array.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6553","indexesOf","/**
     * Finds the indices of the given value in the array starting at the given index.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6554","indexesOf","/**
     * Finds the indices of the given value in the array.
     *
     * <p>This method returns empty BitSet for a","0","-","-","-","-"
"6555","indexesOf","/**
     * Finds the indices of the given value within a given tolerance in the array.
     *
     * <p>
     * This method will return all the indices of the value which fall between the region
     * defined by valueToFind - tolerance and valueToFind + tolerance, each time between the nearest integers.
     * </p>
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6556","indexesOf","/**
     * Finds the indices of the given value in the array starting at the given index.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6557","indexesOf","/**
     * Finds the indices of the given value in the array starting at the given index.
     *
     * <p>
     * This method will return the indices of the values which fall between the region
     * defined by valueToFind - tolerance and valueToFind + tolerance, between the nearest integers.
     * </p>
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6558","indexesOf","/**
     * Finds the indices of the given value in the array.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6559","indexesOf","/**
     * Finds the indices of the given value in the array starting at the given index.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6560","indexesOf","/**
     * Finds the indices of the given value in the array.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6561","indexesOf","/**
     * Finds the indices of the given value in the array starting at the given index.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6562","indexesOf","/**
     * Finds the indices of the given value in the array.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6563","indexesOf","/**
     * Finds the indices of the given value in the array starting at the given index.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6564","indexesOf","/**
     * Finds the indices of the given object in the array.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6565","indexesOf","/**
     * Finds the indices of the given object in the array starting at the given index.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6566","indexesOf","/**
     * Finds the indices of the given value in the array.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6567","indexesOf","/**
     * Finds the indices of the given value in the array starting at the given index.
     *
     * <p>This method returns an empty BitSet for a","0","-","-","-","-"
"6568","indexOf","/**
     * Finds the index of the given value in the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6569","indexOf","/**
     * Finds the index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6570","indexOf","/**
     * Finds the index of the given value in the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6571","indexOf","/**
     * Finds the index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6572","indexOf","/**
     * Finds the index of the given value in the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6573","indexOf","/**
     * Finds the index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6574","indexOf","/**
     * Finds the index of the given value in the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6575","indexOf","/**
     * Finds the index of the given value within a given tolerance in the array.
     * This method will return the index of the first value which falls between the region
     * defined by valueToFind - tolerance and valueToFind + tolerance.
     * <p>
     * This method returns","0","-","-","-","-"
"6576","indexOf","/**
     * Finds the index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6577","indexOf","/**
     * Finds the index of the given value in the array starting at the given index.
     * This method will return the index of the first value which falls between the region
     * defined by valueToFind - tolerance and valueToFind + tolerance.
     * <p>
     * This method returns","0","-","-","-","-"
"6578","indexOf","/**
     * Finds the index of the given value in the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6579","indexOf","/**
     * Finds the index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6580","indexOf","/**
     * Finds the index of the given value in the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6581","indexOf","/**
     * Finds the index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6582","indexOf","/**
     * Finds the index of the given value in the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6583","indexOf","/**
     * Finds the index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6584","indexOf","/**
     * Finds the index of the given object in the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6585","indexOf","/**
     * Finds the index of the given object in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6586","indexOf","/**
     * Finds the index of the given value in the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6587","indexOf","/**
     * Finds the index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6588","insert","/**
     * Inserts elements into an array at the given index (starting from zero).
     *
     * <p>When an array is returned, it is always a new array.</p>
     *
     * <pre>
     * ArrayUtils.insert(index, null, null)      = null
     * ArrayUtils.insert(index, array, null)     = cloned copy of 'array'
     * ArrayUtils.insert(index, null, values)    = null
     * </pre>
     *
     * @param index the position within","0","-","-","-","-"
"6589","insert","/**
     * Inserts elements into an array at the given index (starting from zero).
     *
     * <p>When an array is returned, it is always a new array.</p>
     *
     * <pre>
     * ArrayUtils.insert(index, null, null)      = null
     * ArrayUtils.insert(index, array, null)     = cloned copy of 'array'
     * ArrayUtils.insert(index, null, values)    = null
     * </pre>
     *
     * @param index the position within","0","-","-","-","-"
"6590","insert","/**
     * Inserts elements into an array at the given index (starting from zero).
     *
     * <p>When an array is returned, it is always a new array.</p>
     *
     * <pre>
     * ArrayUtils.insert(index, null, null)      = null
     * ArrayUtils.insert(index, array, null)     = cloned copy of 'array'
     * ArrayUtils.insert(index, null, values)    = null
     * </pre>
     *
     * @param index the position within","0","-","-","-","-"
"6591","insert","/**
     * Inserts elements into an array at the given index (starting from zero).
     *
     * <p>When an array is returned, it is always a new array.</p>
     *
     * <pre>
     * ArrayUtils.insert(index, null, null)      = null
     * ArrayUtils.insert(index, array, null)     = cloned copy of 'array'
     * ArrayUtils.insert(index, null, values)    = null
     * </pre>
     *
     * @param index the position within","0","-","-","-","-"
"6592","insert","/**
     * Inserts elements into an array at the given index (starting from zero).
     *
     * <p>When an array is returned, it is always a new array.</p>
     *
     * <pre>
     * ArrayUtils.insert(index, null, null)      = null
     * ArrayUtils.insert(index, array, null)     = cloned copy of 'array'
     * ArrayUtils.insert(index, null, values)    = null
     * </pre>
     *
     * @param index the position within","0","-","-","-","-"
"6593","insert","/**
     * Inserts elements into an array at the given index (starting from zero).
     *
     * <p>When an array is returned, it is always a new array.</p>
     *
     * <pre>
     * ArrayUtils.insert(index, null, null)      = null
     * ArrayUtils.insert(index, array, null)     = cloned copy of 'array'
     * ArrayUtils.insert(index, null, values)    = null
     * </pre>
     *
     * @param index the position within","0","-","-","-","-"
"6594","insert","/**
     * Inserts elements into an array at the given index (starting from zero).
     *
     * <p>When an array is returned, it is always a new array.</p>
     *
     * <pre>
     * ArrayUtils.insert(index, null, null)      = null
     * ArrayUtils.insert(index, array, null)     = cloned copy of 'array'
     * ArrayUtils.insert(index, null, values)    = null
     * </pre>
     *
     * @param index the position within","0","-","-","-","-"
"6595","insert","/**
     * Inserts elements into an array at the given index (starting from zero).
     *
     * <p>When an array is returned, it is always a new array.</p>
     *
     * <pre>
     * ArrayUtils.insert(index, null, null)      = null
     * ArrayUtils.insert(index, array, null)     = cloned copy of 'array'
     * ArrayUtils.insert(index, null, values)    = null
     * </pre>
     *
     * @param index the position within","0","-","-","-","-"
"6596","insert","/**
     * Inserts elements into an array at the given index (starting from zero).
     *
     * <p>When an array is returned, it is always a new array.</p>
     *
     * <pre>
     * ArrayUtils.insert(index, null, null)      = null
     * ArrayUtils.insert(index, array, null)     = cloned copy of 'array'
     * ArrayUtils.insert(index, null, values)    = null
     * </pre>
     *
     * @param <T> The type of elements in","0","-","-","-","-"
"6597","isArrayEmpty","/**
     * Checks if an array is empty or","0","-","-","-","-"
"6598","isArrayIndexValid","/**
     * Returns whether a given array can safely be accessed at the given index.
     *
     * <pre>
     * ArrayUtils.isArrayIndexValid(null, 0)       = false
     * ArrayUtils.isArrayIndexValid([], 0)         = false
     * ArrayUtils.isArrayIndexValid([""a""], 0)      = true
     * </pre>
     *
     * @param <T> the component type of the array
     * @param array the array to inspect, may be","0","-","-","-","-"
"6599","isEmpty","/**
     * Checks if an array of primitive booleans is empty or","0","-","-","-","-"
"6600","isEmpty","/**
     * Checks if an array of primitive bytes is empty or","0","-","-","-","-"
"6601","isEmpty","/**
     * Checks if an array of primitive chars is empty or","0","-","-","-","-"
"6602","isEmpty","/**
     * Checks if an array of primitive doubles is empty or","0","-","-","-","-"
"6603","isEmpty","/**
     * Checks if an array of primitive floats is empty or","0","-","-","-","-"
"6604","isEmpty","/**
     * Checks if an array of primitive ints is empty or","0","-","-","-","-"
"6605","isEmpty","/**
     * Checks if an array of primitive longs is empty or","0","-","-","-","-"
"6606","isEmpty","/**
     * Checks if an array of Objects is empty or","0","-","-","-","-"
"6607","isEmpty","/**
     * Checks if an array of primitive shorts is empty or","0","-","-","-","-"
"6608","isEquals","/**
     * Compares two arrays, using equals(), handling multidimensional arrays
     * correctly.
     * <p>
     * Multi-dimensional primitive arrays are also handled correctly by this method.
     * </p>
     *
     * @param array1  the left-hand side array to compare, may be","0","-","-","-","-"
"6609","isNotEmpty","/**
     * Checks if an array of primitive booleans is not empty and not","0","-","-","-","-"
"6610","isNotEmpty","/**
     * Checks if an array of primitive bytes is not empty and not","0","-","-","-","-"
"6611","isNotEmpty","/**
     * Checks if an array of primitive chars is not empty and not","0","-","-","-","-"
"6612","isNotEmpty","/**
     * Checks if an array of primitive doubles is not empty and not","0","-","-","-","-"
"6613","isNotEmpty","/**
     * Checks if an array of primitive floats is not empty and not","0","-","-","-","-"
"6614","isNotEmpty","/**
     * Checks if an array of primitive ints is not empty and not","0","-","-","-","-"
"6615","isNotEmpty","/**
     * Checks if an array of primitive longs is not empty and not","0","-","-","-","-"
"6616","isNotEmpty","/**
     * Checks if an array of primitive shorts is not empty and not","0","-","-","-","-"
"6617","isNotEmpty","/**
     * Checks if an array of Objects is not empty and not","0","-","-","-","-"
"6618","isSameLength","/**
     * Checks whether two arrays are the same length, treating
     *","0","-","-","-","-"
"6619","isSameLength","/**
     * Checks whether two arrays are the same length, treating
     *","0","-","-","-","-"
"6620","isSameLength","/**
     * Checks whether two arrays are the same length, treating
     *","0","-","-","-","-"
"6621","isSameLength","/**
     * Checks whether two arrays are the same length, treating
     *","0","-","-","-","-"
"6622","isSameLength","/**
     * Checks whether two arrays are the same length, treating
     *","0","-","-","-","-"
"6623","isSameLength","/**
     * Checks whether two arrays are the same length, treating
     *","0","-","-","-","-"
"6624","isSameLength","/**
     * Checks whether two arrays are the same length, treating
     *","0","-","-","-","-"
"6625","isSameLength","/**
     * Checks whether two arrays are the same length, treating
     *","0","-","-","-","-"
"6626","isSameLength","/**
     * Checks whether two arrays are the same length, treating
     *","0","-","-","-","-"
"6627","isSameLength","/**
     * Checks whether two arrays are the same length, treating
     *","0","-","-","-","-"
"6628","isSameType","/**
     * Checks whether two arrays are the same type taking into account
     * multidimensional arrays.
     *
     * @param array1 the first array, must not be","0","-","-","-","-"
"6629","isSorted","/**
     * This method checks whether the provided array is sorted according to natural ordering
     * (","0","-","-","-","-"
"6630","isSorted","/**
     * Checks whether the provided array is sorted according to natural ordering.
     *
     * @param array the array to check
     * @return whether the array is sorted according to natural ordering
     * @since 3.4
     */
    public static boolean isSorted(final byte[] array)","0","-","-","-","-"
"6631","isSorted","/**
     * Checks whether the provided array is sorted according to natural ordering.
     *
     * @param array the array to check
     * @return whether the array is sorted according to natural ordering
     * @since 3.4
     */
    public static boolean isSorted(final char[] array)","0","-","-","-","-"
"6632","isSorted","/**
     * This method checks whether the provided array is sorted according to natural ordering.
     *
     * @param array the array to check
     * @return whether the array is sorted according to natural ordering
     * @since 3.4
     */
    public static boolean isSorted(final double[] array)","0","-","-","-","-"
"6633","isSorted","/**
     * This method checks whether the provided array is sorted according to natural ordering.
     *
     * @param array the array to check
     * @return whether the array is sorted according to natural ordering
     * @since 3.4
     */
    public static boolean isSorted(final float[] array)","0","-","-","-","-"
"6634","isSorted","/**
     * This method checks whether the provided array is sorted according to natural ordering.
     *
     * @param array the array to check
     * @return whether the array is sorted according to natural ordering
     * @since 3.4
     */
    public static boolean isSorted(final int[] array)","0","-","-","-","-"
"6635","isSorted","/**
     * This method checks whether the provided array is sorted according to natural ordering.
     *
     * @param array the array to check
     * @return whether the array is sorted according to natural ordering
     * @since 3.4
     */
    public static boolean isSorted(final long[] array)","0","-","-","-","-"
"6636","isSorted","/**
     * This method checks whether the provided array is sorted according to natural ordering.
     *
     * @param array the array to check
     * @return whether the array is sorted according to natural ordering
     * @since 3.4
     */
    public static boolean isSorted(final short[] array)","0","-","-","-","-"
"6637","isSorted","/**
     * This method checks whether the provided array is sorted according to the class's
     *","0","-","-","-","-"
"6638","isSorted","/**
     * This method checks whether the provided array is sorted according to the provided","0","-","-","-","-"
"6639","lastIndexOf","/**
     * Finds the last index of the given value within the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6640","lastIndexOf","/**
     * Finds the last index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6641","lastIndexOf","/**
     * Finds the last index of the given value within the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6642","lastIndexOf","/**
     * Finds the last index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6643","lastIndexOf","/**
     * Finds the last index of the given value within the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6644","lastIndexOf","/**
     * Finds the last index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6645","lastIndexOf","/**
     * Finds the last index of the given value within the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6646","lastIndexOf","/**
     * Finds the last index of the given value within a given tolerance in the array.
     * This method will return the index of the last value which falls between the region
     * defined by valueToFind - tolerance and valueToFind + tolerance.
     * <p>
     * This method returns","0","-","-","-","-"
"6647","lastIndexOf","/**
     * Finds the last index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6648","lastIndexOf","/**
     * Finds the last index of the given value in the array starting at the given index.
     * This method will return the index of the last value which falls between the region
     * defined by valueToFind - tolerance and valueToFind + tolerance.
     * <p>
     * This method returns","0","-","-","-","-"
"6649","lastIndexOf","/**
     * Finds the last index of the given value within the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6650","lastIndexOf","/**
     * Finds the last index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6651","lastIndexOf","/**
     * Finds the last index of the given value within the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6652","lastIndexOf","/**
     * Finds the last index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6653","lastIndexOf","/**
     * Finds the last index of the given value within the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6654","lastIndexOf","/**
     * Finds the last index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6655","lastIndexOf","/**
     * Finds the last index of the given object within the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6656","lastIndexOf","/**
     * Finds the last index of the given object in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6657","lastIndexOf","/**
     * Finds the last index of the given value within the array.
     * <p>
     * This method returns","0","-","-","-","-"
"6658","lastIndexOf","/**
     * Finds the last index of the given value in the array starting at the given index.
     * <p>
     * This method returns","0","-","-","-","-"
"6659","map","/**
     * Maps elements from an array into elements of a new array of a given type, while mapping old elements to new elements.
     *
     * @param <T>           The input array type.
     * @param <R>           The output array type.
     * @param <E>           The type of exceptions thrown when the mapper function fails.
     * @param array         The input array.
     * @param componentType the component type of the result array.
     * @param mapper        a non-interfering, stateless function to apply to each element
     * @return a new array
     * @throws E Thrown when the mapper function fails.
     */
    private static <T, R, E extends Throwable> R[] map(final T[] array, final Class<R> componentType, final FailableFunction<? super T, ? extends R, E> mapper)
            throws E","0","-","-","-","-"
"6660","max0","private static int max0(final int other)","0","-","-","-","-"
"6661","newInstance","/**
     * Delegates to","0","-","-","-","-"
"6662","nullTo","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6663","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6664","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6665","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6666","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6667","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6668","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6669","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6670","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6671","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6672","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6673","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6674","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6675","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6676","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6677","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6678","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6679","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6680","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6681","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6682","nullToEmpty","/**
     * Defensive programming technique to change a","0","-","-","-","-"
"6683","random","/**
     * Gets the","0","-","-","-","-"
"6684","remove","/**
     * Removes the element at the specified position from the specified array.
     * All subsequent elements are shifted to the left (subtracts one from
     * their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6685","remove","/**
     * Removes the element at the specified position from the specified array.
     * All subsequent elements are shifted to the left (subtracts one from
     * their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6686","remove","/**
     * Removes the element at the specified position from the specified array.
     * All subsequent elements are shifted to the left (subtracts one from
     * their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6687","remove","/**
     * Removes the element at the specified position from the specified array.
     * All subsequent elements are shifted to the left (subtracts one from
     * their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6688","remove","/**
     * Removes the element at the specified position from the specified array.
     * All subsequent elements are shifted to the left (subtracts one from
     * their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6689","remove","/**
     * Removes the element at the specified position from the specified array.
     * All subsequent elements are shifted to the left (subtracts one from
     * their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6690","remove","/**
     * Removes the element at the specified position from the specified array.
     * All subsequent elements are shifted to the left (subtracts one from
     * their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6691","remove","/**
     * Removes the element at the specified position from the specified array.
     * All subsequent elements are shifted to the left (subtracts one from
     * their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6692","remove","/**
     * Removes the element at the specified position from the specified array.
     * All subsequent elements are shifted to the left (subtracts one from
     * their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6693","remove","/**
     * Removes the element at the specified position from the specified array.
     * All subsequent elements are shifted to the left (subtracts one from
     * their indices).
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the element on the specified position. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6694","removeAll","/**
     * Removes the elements at the specified positions from the specified array.
     * All remaining elements are shifted to the left.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except those at the specified positions. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6695","removeAll","/**
     * Removes the elements at the specified positions from the specified array.
     * All remaining elements are shifted to the left.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except those at the specified positions. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6696","removeAll","/**
     * Removes the elements at the specified positions from the specified array.
     * All remaining elements are shifted to the left.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except those at the specified positions. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6697","removeAll","/**
     * Removes the elements at the specified positions from the specified array.
     * All remaining elements are shifted to the left.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except those at the specified positions. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6698","removeAll","/**
     * Removes the elements at the specified positions from the specified array.
     * All remaining elements are shifted to the left.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except those at the specified positions. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6699","removeAll","/**
     * Removes the elements at the specified positions from the specified array.
     * All remaining elements are shifted to the left.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except those at the specified positions. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6700","removeAll","/**
     * Removes the elements at the specified positions from the specified array.
     * All remaining elements are shifted to the left.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except those at the specified positions. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6701","removeAll","/**
     * Removes multiple array elements specified by indices.
     *
     * @param array the input array, will not be modified, and may be","0","-","-","-","-"
"6702","removeAll","/**
     * Removes multiple array elements specified by index.
     *
     * @param array source
     * @param indices to remove
     * @return new array of same type minus elements specified by unique values of","0","-","-","-","-"
"6703","removeAll","/**
     * Removes the elements at the specified positions from the specified array.
     * All remaining elements are shifted to the left.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except those at the specified positions. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6704","removeAll","/**
     * Removes the elements at the specified positions from the specified array.
     * All remaining elements are shifted to the left.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except those at the specified positions. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <p>
     * If the input array is","0","-","-","-","-"
"6705","removeAllOccurences","/**
     * Removes the occurrences of the specified element from the specified boolean array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6706","removeAllOccurences","/**
     * Removes the occurrences of the specified element from the specified byte array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6707","removeAllOccurences","/**
     * Removes the occurrences of the specified element from the specified char array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6708","removeAllOccurences","/**
     * Removes the occurrences of the specified element from the specified double array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6709","removeAllOccurences","/**
     * Removes the occurrences of the specified element from the specified float array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6710","removeAllOccurences","/**
     * Removes the occurrences of the specified element from the specified int array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6711","removeAllOccurences","/**
     * Removes the occurrences of the specified element from the specified long array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6712","removeAllOccurences","/**
     * Removes the occurrences of the specified element from the specified short array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6713","removeAllOccurences","/**
     * Removes the occurrences of the specified element from the specified array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6714","removeAllOccurrences","/**
     * Removes the occurrences of the specified element from the specified boolean array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6715","removeAllOccurrences","/**
     * Removes the occurrences of the specified element from the specified byte array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6716","removeAllOccurrences","/**
     * Removes the occurrences of the specified element from the specified char array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6717","removeAllOccurrences","/**
     * Removes the occurrences of the specified element from the specified double array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6718","removeAllOccurrences","/**
     * Removes the occurrences of the specified element from the specified float array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6719","removeAllOccurrences","/**
     * Removes the occurrences of the specified element from the specified int array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6720","removeAllOccurrences","/**
     * Removes the occurrences of the specified element from the specified long array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6721","removeAllOccurrences","/**
     * Removes the occurrences of the specified element from the specified short array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6722","removeAllOccurrences","/**
     * Removes the occurrences of the specified element from the specified array.
     * <p>
     * All subsequent elements are shifted to the left (subtracts one from their indices).
     * If the array doesn't contain such an element, no elements are removed from the array.
     *","0","-","-","-","-"
"6723","removeElement","/**
     * Removes the first occurrence of the specified element from the
     * specified array. All subsequent elements are shifted to the left
     * (subtracts one from their indices). If the array doesn't contain
     * such an element, no elements are removed from the array.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the first occurrence of the specified element. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <pre>
     * ArrayUtils.removeElement(null, true)                = null
     * ArrayUtils.removeElement([], true)                  = []
     * ArrayUtils.removeElement([true], false)             = [true]
     * ArrayUtils.removeElement([true, false], false)      = [true]
     * ArrayUtils.removeElement([true, false, true], true) = [false, true]
     * </pre>
     *
     * @param array the input array, may be","0","-","-","-","-"
"6724","removeElement","/**
     * Removes the first occurrence of the specified element from the
     * specified array. All subsequent elements are shifted to the left
     * (subtracts one from their indices). If the array doesn't contain
     * such an element, no elements are removed from the array.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the first occurrence of the specified element. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <pre>
     * ArrayUtils.removeElement(null, 1)        = null
     * ArrayUtils.removeElement([], 1)          = []
     * ArrayUtils.removeElement([1], 0)         = [1]
     * ArrayUtils.removeElement([1, 0], 0)      = [1]
     * ArrayUtils.removeElement([1, 0, 1], 1)   = [0, 1]
     * </pre>
     *
     * @param array the input array, may be","0","-","-","-","-"
"6725","removeElement","/**
     * Removes the first occurrence of the specified element from the
     * specified array. All subsequent elements are shifted to the left
     * (subtracts one from their indices). If the array doesn't contain
     * such an element, no elements are removed from the array.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the first occurrence of the specified element. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <pre>
     * ArrayUtils.removeElement(null, 'a')            = null
     * ArrayUtils.removeElement([], 'a')              = []
     * ArrayUtils.removeElement(['a'], 'b')           = ['a']
     * ArrayUtils.removeElement(['a', 'b'], 'a')      = ['b']
     * ArrayUtils.removeElement(['a', 'b', 'a'], 'a') = ['b', 'a']
     * </pre>
     *
     * @param array the input array, may be","0","-","-","-","-"
"6726","removeElement","/**
     * Removes the first occurrence of the specified element from the
     * specified array. All subsequent elements are shifted to the left
     * (subtracts one from their indices). If the array doesn't contain
     * such an element, no elements are removed from the array.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the first occurrence of the specified element. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <pre>
     * ArrayUtils.removeElement(null, 1.1)            = null
     * ArrayUtils.removeElement([], 1.1)              = []
     * ArrayUtils.removeElement([1.1], 1.2)           = [1.1]
     * ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3]
     * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]
     * </pre>
     *
     * @param array the input array, may be","0","-","-","-","-"
"6727","removeElement","/**
     * Removes the first occurrence of the specified element from the
     * specified array. All subsequent elements are shifted to the left
     * (subtracts one from their indices). If the array doesn't contain
     * such an element, no elements are removed from the array.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the first occurrence of the specified element. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <pre>
     * ArrayUtils.removeElement(null, 1.1)            = null
     * ArrayUtils.removeElement([], 1.1)              = []
     * ArrayUtils.removeElement([1.1], 1.2)           = [1.1]
     * ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3]
     * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]
     * </pre>
     *
     * @param array the input array, may be","0","-","-","-","-"
"6728","removeElement","/**
     * Removes the first occurrence of the specified element from the
     * specified array. All subsequent elements are shifted to the left
     * (subtracts one from their indices). If the array doesn't contain
     * such an element, no elements are removed from the array.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the first occurrence of the specified element. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <pre>
     * ArrayUtils.removeElement(null, 1)      = null
     * ArrayUtils.removeElement([], 1)        = []
     * ArrayUtils.removeElement([1], 2)       = [1]
     * ArrayUtils.removeElement([1, 3], 1)    = [3]
     * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
     * </pre>
     *
     * @param array the input array, may be","0","-","-","-","-"
"6729","removeElement","/**
     * Removes the first occurrence of the specified element from the
     * specified array. All subsequent elements are shifted to the left
     * (subtracts one from their indices). If the array doesn't contain
     * such an element, no elements are removed from the array.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the first occurrence of the specified element. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <pre>
     * ArrayUtils.removeElement(null, 1)      = null
     * ArrayUtils.removeElement([], 1)        = []
     * ArrayUtils.removeElement([1], 2)       = [1]
     * ArrayUtils.removeElement([1, 3], 1)    = [3]
     * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
     * </pre>
     *
     * @param array the input array, may be","0","-","-","-","-"
"6730","removeElement","/**
     * Removes the first occurrence of the specified element from the
     * specified array. All subsequent elements are shifted to the left
     * (subtracts one from their indices). If the array doesn't contain
     * such an element, no elements are removed from the array.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the first occurrence of the specified element. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <pre>
     * ArrayUtils.removeElement(null, 1)      = null
     * ArrayUtils.removeElement([], 1)        = []
     * ArrayUtils.removeElement([1], 2)       = [1]
     * ArrayUtils.removeElement([1, 3], 1)    = [3]
     * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
     * </pre>
     *
     * @param array the input array, may be","0","-","-","-","-"
"6731","removeElement","/**
     * Removes the first occurrence of the specified element from the
     * specified array. All subsequent elements are shifted to the left
     * (subtracts one from their indices). If the array doesn't contain
     * such an element, no elements are removed from the array.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except the first occurrence of the specified element. The component
     * type of the returned array is always the same as that of the input
     * array.
     * </p>
     * <pre>
     * ArrayUtils.removeElement(null, ""a"")            = null
     * ArrayUtils.removeElement([], ""a"")              = []
     * ArrayUtils.removeElement([""a""], ""b"")           = [""a""]
     * ArrayUtils.removeElement([""a"", ""b""], ""a"")      = [""b""]
     * ArrayUtils.removeElement([""a"", ""b"", ""a""], ""a"") = [""b"", ""a""]
     * </pre>
     *
     * @param <T> the component type of the array
     * @param array the input array, may be","0","-","-","-","-"
"6732","removeElements","/**
     * Removes occurrences of specified elements, in specified quantities,
     * from the specified array. All subsequent elements are shifted left.
     * For any element-to-be-removed specified in greater quantities than
     * contained in the original array, no change occurs beyond the
     * removal of the existing matching items.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except for the earliest-encountered occurrences of the specified
     * elements. The component type of the returned array is always the same
     * as that of the input array.
     * </p>
     * <pre>
     * ArrayUtils.removeElements(null, true, false)               = null
     * ArrayUtils.removeElements([], true, false)                 = []
     * ArrayUtils.removeElements([true], false, false)            = [true]
     * ArrayUtils.removeElements([true, false], true, true)       = [false]
     * ArrayUtils.removeElements([true, false, true], true)       = [false, true]
     * ArrayUtils.removeElements([true, false, true], true, true) = [false]
     * </pre>
     *
     * @param array the input array, will not be modified, and may be","0","-","-","-","-"
"6733","removeElements","/**
     * Removes occurrences of specified elements, in specified quantities,
     * from the specified array. All subsequent elements are shifted left.
     * For any element-to-be-removed specified in greater quantities than
     * contained in the original array, no change occurs beyond the
     * removal of the existing matching items.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except for the earliest-encountered occurrences of the specified
     * elements. The component type of the returned array is always the same
     * as that of the input array.
     * </p>
     * <pre>
     * ArrayUtils.removeElements(null, 1, 2)      = null
     * ArrayUtils.removeElements([], 1, 2)        = []
     * ArrayUtils.removeElements([1], 2, 3)       = [1]
     * ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
     * ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
     * ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
     * </pre>
     *
     * @param array the input array, will not be modified, and may be","0","-","-","-","-"
"6734","removeElements","/**
     * Removes occurrences of specified elements, in specified quantities,
     * from the specified array. All subsequent elements are shifted left.
     * For any element-to-be-removed specified in greater quantities than
     * contained in the original array, no change occurs beyond the
     * removal of the existing matching items.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except for the earliest-encountered occurrences of the specified
     * elements. The component type of the returned array is always the same
     * as that of the input array.
     * </p>
     * <pre>
     * ArrayUtils.removeElements(null, 1, 2)      = null
     * ArrayUtils.removeElements([], 1, 2)        = []
     * ArrayUtils.removeElements([1], 2, 3)       = [1]
     * ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
     * ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
     * ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
     * </pre>
     *
     * @param array the input array, will not be modified, and may be","0","-","-","-","-"
"6735","removeElements","/**
     * Removes occurrences of specified elements, in specified quantities,
     * from the specified array. All subsequent elements are shifted left.
     * For any element-to-be-removed specified in greater quantities than
     * contained in the original array, no change occurs beyond the
     * removal of the existing matching items.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except for the earliest-encountered occurrences of the specified
     * elements. The component type of the returned array is always the same
     * as that of the input array.
     * </p>
     * <pre>
     * ArrayUtils.removeElements(null, 1, 2)      = null
     * ArrayUtils.removeElements([], 1, 2)        = []
     * ArrayUtils.removeElements([1], 2, 3)       = [1]
     * ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
     * ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
     * ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
     * </pre>
     *
     * @param array the input array, will not be modified, and may be","0","-","-","-","-"
"6736","removeElements","/**
     * Removes occurrences of specified elements, in specified quantities,
     * from the specified array. All subsequent elements are shifted left.
     * For any element-to-be-removed specified in greater quantities than
     * contained in the original array, no change occurs beyond the
     * removal of the existing matching items.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except for the earliest-encountered occurrences of the specified
     * elements. The component type of the returned array is always the same
     * as that of the input array.
     * </p>
     * <pre>
     * ArrayUtils.removeElements(null, 1, 2)      = null
     * ArrayUtils.removeElements([], 1, 2)        = []
     * ArrayUtils.removeElements([1], 2, 3)       = [1]
     * ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
     * ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
     * ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
     * </pre>
     *
     * @param array the input array, will not be modified, and may be","0","-","-","-","-"
"6737","removeElements","/**
     * Removes occurrences of specified elements, in specified quantities,
     * from the specified array. All subsequent elements are shifted left.
     * For any element-to-be-removed specified in greater quantities than
     * contained in the original array, no change occurs beyond the
     * removal of the existing matching items.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except for the earliest-encountered occurrences of the specified
     * elements. The component type of the returned array is always the same
     * as that of the input array.
     * </p>
     * <pre>
     * ArrayUtils.removeElements(null, 1, 2)      = null
     * ArrayUtils.removeElements([], 1, 2)        = []
     * ArrayUtils.removeElements([1], 2, 3)       = [1]
     * ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
     * ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
     * ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
     * </pre>
     *
     * @param array the input array, will not be modified, and may be","0","-","-","-","-"
"6738","removeElements","/**
     * Removes occurrences of specified elements, in specified quantities,
     * from the specified array. All subsequent elements are shifted left.
     * For any element-to-be-removed specified in greater quantities than
     * contained in the original array, no change occurs beyond the
     * removal of the existing matching items.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except for the earliest-encountered occurrences of the specified
     * elements. The component type of the returned array is always the same
     * as that of the input array.
     * </p>
     * <pre>
     * ArrayUtils.removeElements(null, 1, 2)      = null
     * ArrayUtils.removeElements([], 1, 2)        = []
     * ArrayUtils.removeElements([1], 2, 3)       = [1]
     * ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
     * ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
     * ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
     * </pre>
     *
     * @param array the input array, will not be modified, and may be","0","-","-","-","-"
"6739","removeElements","/**
     * Removes occurrences of specified elements, in specified quantities,
     * from the specified array. All subsequent elements are shifted left.
     * For any element-to-be-removed specified in greater quantities than
     * contained in the original array, no change occurs beyond the
     * removal of the existing matching items.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except for the earliest-encountered occurrences of the specified
     * elements. The component type of the returned array is always the same
     * as that of the input array.
     * </p>
     * <pre>
     * ArrayUtils.removeElements(null, 1, 2)      = null
     * ArrayUtils.removeElements([], 1, 2)        = []
     * ArrayUtils.removeElements([1], 2, 3)       = [1]
     * ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
     * ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
     * ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
     * </pre>
     *
     * @param array the input array, will not be modified, and may be","0","-","-","-","-"
"6740","removeElements","/**
     * Removes occurrences of specified elements, in specified quantities,
     * from the specified array. All subsequent elements are shifted left.
     * For any element-to-be-removed specified in greater quantities than
     * contained in the original array, no change occurs beyond the
     * removal of the existing matching items.
     * <p>
     * This method returns a new array with the same elements of the input
     * array except for the earliest-encountered occurrences of the specified
     * elements. The component type of the returned array is always the same
     * as that of the input array.
     * </p>
     * <pre>
     * ArrayUtils.removeElements(null, ""a"", ""b"")            = null
     * ArrayUtils.removeElements([], ""a"", ""b"")              = []
     * ArrayUtils.removeElements([""a""], ""b"", ""c"")           = [""a""]
     * ArrayUtils.removeElements([""a"", ""b""], ""a"", ""c"")      = [""b""]
     * ArrayUtils.removeElements([""a"", ""b"", ""a""], ""a"")      = [""b"", ""a""]
     * ArrayUtils.removeElements([""a"", ""b"", ""a""], ""a"", ""a"") = [""b""]
     * </pre>
     *
     * @param <T> the component type of the array
     * @param array the input array, will not be modified, and may be","0","-","-","-","-"
"6741","reverse","/**
     * Reverses the order of the given array.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6742","reverse","/**
     * Reverses the order of the given array in the given range.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6743","reverse","/**
     * Reverses the order of the given array.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6744","reverse","/**
     * Reverses the order of the given array in the given range.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6745","reverse","/**
     * Reverses the order of the given array.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6746","reverse","/**
     * Reverses the order of the given array in the given range.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6747","reverse","/**
     * Reverses the order of the given array.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6748","reverse","/**
     * Reverses the order of the given array in the given range.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6749","reverse","/**
     * Reverses the order of the given array.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6750","reverse","/**
     * Reverses the order of the given array in the given range.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6751","reverse","/**
     * Reverses the order of the given array.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6752","reverse","/**
     * Reverses the order of the given array in the given range.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6753","reverse","/**
     * Reverses the order of the given array.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6754","reverse","/**
     * Reverses the order of the given array in the given range.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6755","reverse","/**
     * Reverses the order of the given array.
     * <p>
     * There is no special handling for multi-dimensional arrays.
     * </p>
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6756","reverse","/**
     * Reverses the order of the given array in the given range.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6757","reverse","/**
     * Reverses the order of the given array.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6758","reverse","/**
     * Reverses the order of the given array in the given range.
     * <p>
     * This method does nothing for a","0","-","-","-","-"
"6759","setAll","/**
     * Sets all elements of the specified array, using the provided generator supplier to compute each element.
     * <p>
     * If the generator supplier throws an exception, it is relayed to the caller and the array is left in an indeterminate
     * state.
     * </p>
     *
     * @param <T> type of elements of the array, may be","0","-","-","-","-"
"6760","setAll","/**
     * Sets all elements of the specified array, using the provided generator supplier to compute each element.
     * <p>
     * If the generator supplier throws an exception, it is relayed to the caller and the array is left in an indeterminate
     * state.
     * </p>
     *
     * @param <T> type of elements of the array, may be","0","-","-","-","-"
"6761","shift","/**
     * Shifts the order of the given boolean array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6762","shift","/**
     * Shifts the order of a series of elements in the given boolean array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6763","shift","/**
     * Shifts the order of the given byte array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6764","shift","/**
     * Shifts the order of a series of elements in the given byte array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6765","shift","/**
     * Shifts the order of the given char array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6766","shift","/**
     * Shifts the order of a series of elements in the given char array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6767","shift","/**
     * Shifts the order of the given double array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6768","shift","/**
     * Shifts the order of a series of elements in the given double array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6769","shift","/**
     * Shifts the order of the given float array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6770","shift","/**
     * Shifts the order of a series of elements in the given float array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6771","shift","/**
     * Shifts the order of the given int array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6772","shift","/**
     * Shifts the order of a series of elements in the given int array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6773","shift","/**
     * Shifts the order of the given long array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6774","shift","/**
     * Shifts the order of a series of elements in the given long array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6775","shift","/**
     * Shifts the order of the given array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6776","shift","/**
     * Shifts the order of a series of elements in the given array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6777","shift","/**
     * Shifts the order of the given short array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6778","shift","/**
     * Shifts the order of a series of elements in the given short array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for","0","-","-","-","-"
"6779","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     * <p>
     * This method uses the current","0","-","-","-","-"
"6780","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     *
     * @param array  the array to shuffle
     * @param random the source of randomness used to permute the elements
     * @see <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle algorithm</a>
     * @since 3.6
     */
    public static void shuffle(final boolean[] array, final Random random)","0","-","-","-","-"
"6781","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     * <p>
     * This method uses the current","0","-","-","-","-"
"6782","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     *
     * @param array  the array to shuffle
     * @param random the source of randomness used to permute the elements
     * @see <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle algorithm</a>
     * @since 3.6
     */
    public static void shuffle(final byte[] array, final Random random)","0","-","-","-","-"
"6783","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     * <p>
     * This method uses the current","0","-","-","-","-"
"6784","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     *
     * @param array  the array to shuffle
     * @param random the source of randomness used to permute the elements
     * @see <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle algorithm</a>
     * @since 3.6
     */
    public static void shuffle(final char[] array, final Random random)","0","-","-","-","-"
"6785","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     * <p>
     * This method uses the current","0","-","-","-","-"
"6786","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     *
     * @param array  the array to shuffle
     * @param random the source of randomness used to permute the elements
     * @see <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle algorithm</a>
     * @since 3.6
     */
    public static void shuffle(final double[] array, final Random random)","0","-","-","-","-"
"6787","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     * <p>
     * This method uses the current","0","-","-","-","-"
"6788","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     *
     * @param array  the array to shuffle
     * @param random the source of randomness used to permute the elements
     * @see <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle algorithm</a>
     * @since 3.6
     */
    public static void shuffle(final float[] array, final Random random)","0","-","-","-","-"
"6789","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     * <p>
     * This method uses the current","0","-","-","-","-"
"6790","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     *
     * @param array  the array to shuffle
     * @param random the source of randomness used to permute the elements
     * @see <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle algorithm</a>
     * @since 3.6
     */
    public static void shuffle(final int[] array, final Random random)","0","-","-","-","-"
"6791","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     * <p>
     * This method uses the current","0","-","-","-","-"
"6792","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     *
     * @param array  the array to shuffle
     * @param random the source of randomness used to permute the elements
     * @see <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle algorithm</a>
     * @since 3.6
     */
    public static void shuffle(final long[] array, final Random random)","0","-","-","-","-"
"6793","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     * <p>
     * This method uses the current","0","-","-","-","-"
"6794","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     *
     * @param array  the array to shuffle
     * @param random the source of randomness used to permute the elements
     * @see <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle algorithm</a>
     * @since 3.6
     */
    public static void shuffle(final Object[] array, final Random random)","0","-","-","-","-"
"6795","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     * <p>
     * This method uses the current","0","-","-","-","-"
"6796","shuffle","/**
     * Shuffles randomly the elements of the specified array using the <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle
     * algorithm</a>.
     *
     * @param array  the array to shuffle
     * @param random the source of randomness used to permute the elements
     * @see <a href=""https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"">Fisher-Yates shuffle algorithm</a>
     * @since 3.6
     */
    public static void shuffle(final short[] array, final Random random)","0","-","-","-","-"
"6797","startsWith","/**
     * Tests whether the given data array starts with an expected array, for example, signature bytes.
     * <p>
     * If both arrays are null, the method returns true. The method return false when one array is null and the other not.
     * </p>
     *
     * @param data     The data to search, maybe larger than the expected data.
     * @param expected The expected data to find.
     * @return whether a match was found.
     * @since 3.18.0
     */
    public static boolean startsWith(final byte[] data, final byte[] expected)","0","-","-","-","-"
"6798","subarray","/**
     * Produces a new","0","-","-","-","-"
"6799","subarray","/**
     * Produces a new","0","-","-","-","-"
"6800","subarray","/**
     * Produces a new","0","-","-","-","-"
"6801","subarray","/**
     * Produces a new","0","-","-","-","-"
"6802","subarray","/**
     * Produces a new","0","-","-","-","-"
"6803","subarray","/**
     * Produces a new","0","-","-","-","-"
"6804","subarray","/**
     * Produces a new","0","-","-","-","-"
"6805","subarray","/**
     * Produces a new","0","-","-","-","-"
"6806","subarray","/**
     * Produces a new array containing the elements between
     * the start and end indices.
     * <p>
     * The start index is inclusive, the end index exclusive.
     * Null array input produces null output.
     * </p>
     * <p>
     * The component type of the subarray is always the same as
     * that of the input array. Thus, if the input is an array of type
     *","0","-","-","-","-"
"6807","swap","/**
     * Swaps two elements in the given boolean array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for a","0","-","-","-","-"
"6808","swap","/**
     * Swaps a series of elements in the given boolean array.
     *
     * <p>This method does nothing for a","0","-","-","-","-"
"6809","swap","/**
     * Swaps two elements in the given byte array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for a","0","-","-","-","-"
"6810","swap","/**
     * Swaps a series of elements in the given byte array.
     *
     * <p>This method does nothing for a","0","-","-","-","-"
"6811","swap","/**
     * Swaps two elements in the given char array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for a","0","-","-","-","-"
"6812","swap","/**
     * Swaps a series of elements in the given char array.
     *
     * <p>This method does nothing for a","0","-","-","-","-"
"6813","swap","/**
     * Swaps two elements in the given double array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for a","0","-","-","-","-"
"6814","swap","/**
     * Swaps a series of elements in the given double array.
     *
     * <p>This method does nothing for a","0","-","-","-","-"
"6815","swap","/**
     * Swaps two elements in the given float array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for a","0","-","-","-","-"
"6816","swap","/**
     * Swaps a series of elements in the given float array.
     *
     * <p>This method does nothing for a","0","-","-","-","-"
"6817","swap","/**
     * Swaps two elements in the given int array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for a","0","-","-","-","-"
"6818","swap","/**
     * Swaps a series of elements in the given int array.
     *
     * <p>This method does nothing for a","0","-","-","-","-"
"6819","swap","/**
     * Swaps two elements in the given long array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for a","0","-","-","-","-"
"6820","swap","/**
     * Swaps a series of elements in the given long array.
     *
     * <p>This method does nothing for a","0","-","-","-","-"
"6821","swap","/**
     * Swaps two elements in the given array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for a","0","-","-","-","-"
"6822","swap","/**
     * Swaps a series of elements in the given array.
     *
     * <p>This method does nothing for a","0","-","-","-","-"
"6823","swap","/**
     * Swaps two elements in the given short array.
     *
     * <p>There is no special handling for multi-dimensional arrays. This method
     * does nothing for a","0","-","-","-","-"
"6824","swap","/**
     * Swaps a series of elements in the given short array.
     *
     * <p>This method does nothing for a","0","-","-","-","-"
"6825","toArray","/**
     * Create a type-safe generic array.
     * <p>
     * The Java language does not allow an array to be created from a generic type:
     * </p>
     * <pre>
    public static &lt;T&gt; T[] createAnArray(int size)","0","-","-","-","-"
"6826","toMap","/**
     * Converts the given array into a","0","-","-","-","-"
"6827","toObject","/**
     * Converts an array of primitive booleans to objects.
     *
     * <p>This method returns","0","-","-","-","-"
"6828","toObject","/**
     * Converts an array of primitive bytes to objects.
     *
     * <p>This method returns","0","-","-","-","-"
"6829","toObject","/**
     * Converts an array of primitive chars to objects.
     *
     * <p>This method returns","0","-","-","-","-"
"6830","toObject","/**
     * Converts an array of primitive doubles to objects.
     *
     * <p>This method returns","0","-","-","-","-"
"6831","toObject","/**
     * Converts an array of primitive floats to objects.
     *
     * <p>This method returns","0","-","-","-","-"
"6832","toObject","/**
     * Converts an array of primitive ints to objects.
     *
     * <p>This method returns","0","-","-","-","-"
"6833","toObject","/**
     * Converts an array of primitive longs to objects.
     *
     * <p>This method returns","0","-","-","-","-"
"6834","toObject","/**
     * Converts an array of primitive shorts to objects.
     *
     * <p>This method returns","0","-","-","-","-"
"6835","toPrimitive","/**
     * Converts an array of object Booleans to primitives.
     * <p>
     * This method returns","0","-","-","-","-"
"6836","toPrimitive","/**
     * Converts an array of object Booleans to primitives handling","0","-","-","-","-"
"6837","toPrimitive","/**
     * Converts an array of object Bytes to primitives.
     * <p>
     * This method returns","0","-","-","-","-"
"6838","toPrimitive","/**
     * Converts an array of object Bytes to primitives handling","0","-","-","-","-"
"6839","toPrimitive","/**
     * Converts an array of object Characters to primitives.
     * <p>
     * This method returns","0","-","-","-","-"
"6840","toPrimitive","/**
     * Converts an array of object Character to primitives handling","0","-","-","-","-"
"6841","toPrimitive","/**
     * Converts an array of object Doubles to primitives.
     * <p>
     * This method returns","0","-","-","-","-"
"6842","toPrimitive","/**
     * Converts an array of object Doubles to primitives handling","0","-","-","-","-"
"6843","toPrimitive","/**
     * Converts an array of object Floats to primitives.
     * <p>
     * This method returns","0","-","-","-","-"
"6844","toPrimitive","/**
     * Converts an array of object Floats to primitives handling","0","-","-","-","-"
"6845","toPrimitive","/**
     * Converts an array of object Integers to primitives.
     * <p>
     * This method returns","0","-","-","-","-"
"6846","toPrimitive","/**
     * Converts an array of object Integer to primitives handling","0","-","-","-","-"
"6847","toPrimitive","/**
     * Converts an array of object Longs to primitives.
     * <p>
     * This method returns","0","-","-","-","-"
"6848","toPrimitive","/**
     * Converts an array of object Long to primitives handling","0","-","-","-","-"
"6849","toPrimitive","/**
     * Create an array of primitive type from an array of wrapper types.
     * <p>
     * This method returns","0","-","-","-","-"
"6850","toPrimitive","/**
     * Converts an array of object Shorts to primitives.
     * <p>
     * This method returns","0","-","-","-","-"
"6851","toPrimitive","/**
     * Converts an array of object Short to primitives handling","0","-","-","-","-"
"6852","toString","/**
     * Outputs an array as a String, treating","0","-","-","-","-"
"6853","toString","/**
     * Outputs an array as a String handling","0","-","-","-","-"
"6854","toStringArray","/**
     * Returns an array containing the string representation of each element in the argument array.
     * <p>
     * This method returns","0","-","-","-","-"
"6855","toStringArray","/**
     * Returns an array containing the string representation of each element in the argument
     * array handling","0","-","-","-","-"
"6856","ArrayUtils","/**
     * ArrayUtils instances should NOT be constructed in standard programming.
     * Instead, the class should be used as","0","-","-","-","-"
"6857","GenericArrayTypeImpl","/**
         * Constructor
         *
         * @param componentType of this array type
         */
        private GenericArrayTypeImpl(final Type componentType)","0","-","-","-","-"
"6858","equals","/**
         *","0","-","-","-","-"
"6859","getGenericComponentType","/**
         *","0","-","-","-","-"
"6860","hashCode","/**
         *","0","-","-","-","-"
"6861","toString","/**
         *","0","-","-","-","-"
"6862","ParameterizedTypeImpl","/**
         * Constructor
         *
         * @param rawClass      type
         * @param useOwner      owner type to use, if any
         * @param typeArguments formal type arguments
         */
        private ParameterizedTypeImpl(final Class<?> rawClass, final Type useOwner, final Type[] typeArguments)","0","-","-","-","-"
"6863","equals","/**
         *","0","-","-","-","-"
"6864","getActualTypeArguments","/**
         *","0","-","-","-","-"
"6865","getOwnerType","/**
         *","0","-","-","-","-"
"6866","getRawType","/**
         *","0","-","-","-","-"
"6867","hashCode","/**
         *","0","-","-","-","-"
"6868","toString","/**
         *","0","-","-","-","-"
"6869","WildcardTypeBuilder","/**
         * Constructor
         */
        private WildcardTypeBuilder()","0","-","-","-","-"
"6870","build","/**
         *","0","-","-","-","-"
"6871","withLowerBounds","/**
         * Specify lower bounds of the wildcard type to build.
         *
         * @param bounds to set
         * @return","0","-","-","-","-"
"6872","withUpperBounds","/**
         * Specify upper bounds of the wildcard type to build.
         *
         * @param bounds to set
         * @return","0","-","-","-","-"
"6873","WildcardTypeImpl","/**
         * Constructor
         *
         * @param upperBounds of this type
         * @param lowerBounds of this type
         */
        private WildcardTypeImpl(final Type[] upperBounds, final Type[] lowerBounds)","0","-","-","-","-"
"6874","equals","/**
         *","0","-","-","-","-"
"6875","getLowerBounds","/**
         *","0","-","-","-","-"
"6876","getUpperBounds","/**
         *","0","-","-","-","-"
"6877","hashCode","/**
         *","0","-","-","-","-"
"6878","toString","/**
         *","0","-","-","-","-"
"6879","anyToString","private static <T> String anyToString(final T object)","0","-","-","-","-"
"6880","appendRecursiveTypes","private static void appendRecursiveTypes(final StringBuilder builder, final int[] recursiveTypeIndexes, final Type[] argumentTypes)","0","-","-","-","-"
"6881","classToString","/**
     * Formats a","0","-","-","-","-"
"6882","containsTypeVariables","/**
     * Tests, recursively, whether any of the type parameters associated with","0","-","-","-","-"
"6883","containsVariableTypeSameParametrizedTypeBound","private static boolean containsVariableTypeSameParametrizedTypeBound(final TypeVariable<?> typeVariable, final ParameterizedType parameterizedType)","0","-","-","-","-"
"6884","determineTypeArguments","/**
     * Tries to determine the type arguments of a class/interface based on a super parameterized type's type arguments. This method is the inverse of
     *","0","-","-","-","-"
"6885","equals","/**
     * Tests whether","0","-","-","-","-"
"6886","equals","/**
     * Tests whether","0","-","-","-","-"
"6887","equals","/**
     * Tests equality of types.
     *
     * @param type1 the first type
     * @param type2 the second type
     * @return boolean
     * @since 3.2
     */
    public static boolean equals(final Type type1, final Type type2)","0","-","-","-","-"
"6888","equals","/**
     * Tests whether","0","-","-","-","-"
"6889","equals","/**
     * Tests whether","0","-","-","-","-"
"6890","extractTypeArgumentsFrom","/**
     * Helper method to establish the formal parameters for a parameterized type.
     *
     * @param mappings  map containing the assignments
     * @param variables expected map keys
     * @return array of map values corresponding to specified keys
     */
    private static Type[] extractTypeArgumentsFrom(final Map<TypeVariable<?>, Type> mappings, final TypeVariable<?>[] variables)","0","-","-","-","-"
"6891","findRecursiveTypes","private static int[] findRecursiveTypes(final ParameterizedType parameterizedType)","0","-","-","-","-"
"6892","genericArrayType","/**
     * Creates a generic array type instance.
     *
     * @param componentType the type of the elements of the array. For example the component type of","0","-","-","-","-"
"6893","genericArrayTypeToString","/**
     * Formats a","0","-","-","-","-"
"6894","getArrayComponentType","/**
     * Gets the array component type of","0","-","-","-","-"
"6895","getClosestParentType","/**
     * Gets the closest parent type to the super class specified by","0","-","-","-","-"
"6896","getImplicitBounds","/**
     * Gets an array containing the sole type of","0","-","-","-","-"
"6897","getImplicitLowerBounds","/**
     * Gets an array containing a single value of","0","-","-","-","-"
"6898","getImplicitUpperBounds","/**
     * Gets an array containing the sole value of","0","-","-","-","-"
"6899","getRawType","/**
     * Transforms the passed in type to a","0","-","-","-","-"
"6900","getRawType","/**
     * Gets the raw type of a Java type, given its context. Primarily for use with","0","-","-","-","-"
"6901","getTypeArguments","/**
     * Gets a map of the type arguments of a class in the context of","0","-","-","-","-"
"6902","getTypeArguments","/**
     * Gets all the type arguments for this parameterized type including owner hierarchy arguments such as","0","-","-","-","-"
"6903","getTypeArguments","/**
     * Gets a map of the type arguments of a parameterized type in the context of","0","-","-","-","-"
"6904","getTypeArguments","/**
     * Gets the type arguments of a class/interface based on a subtype. For instance, this method will determine that both of the parameters for the interface
     *","0","-","-","-","-"
"6905","getTypeArguments","/**
     * Gets a map of the type arguments of","0","-","-","-","-"
"6906","isArrayType","/**
     * Tests whether the specified type denotes an array type.
     *
     * @param type the type to be checked
     * @return","0","-","-","-","-"
"6907","isAssignable","/**
     * Tests if the subject type may be implicitly cast to the target class following the Java generics rules.
     *
     * @param type    the subject type to be assigned to the target type
     * @param toClass the target class
     * @return","0","-","-","-","-"
"6908","isAssignable","/**
     * Tests if the subject type may be implicitly cast to the target generic array type following the Java generics rules.
     *
     * @param type               the subject type to be assigned to the target type
     * @param toGenericArrayType the target generic array type
     * @param typeVarAssigns     a map with type variables
     * @return","0","-","-","-","-"
"6909","isAssignable","/**
     * Tests if the subject type may be implicitly cast to the target parameterized type following the Java generics rules.
     *
     * @param type                the subject type to be assigned to the target type
     * @param toParameterizedType the target parameterized type
     * @param typeVarAssigns      a map with type variables
     * @return","0","-","-","-","-"
"6910","isAssignable","/**
     * Tests if the subject type may be implicitly cast to the target type following the Java generics rules. If both types are","0","-","-","-","-"
"6911","isAssignable","/**
     * Tests if the subject type may be implicitly cast to the target type following the Java generics rules.
     *
     * @param type           the subject type to be assigned to the target type
     * @param toType         the target type
     * @param typeVarAssigns optional map of type variable assignments
     * @return","0","-","-","-","-"
"6912","isAssignable","/**
     * Tests if the subject type may be implicitly cast to the target type variable following the Java generics rules.
     *
     * @param type           the subject type to be assigned to the target type
     * @param toTypeVariable the target type variable
     * @param typeVarAssigns a map with type variables
     * @return","0","-","-","-","-"
"6913","isAssignable","/**
     * Tests if the subject type may be implicitly cast to the target wildcard type following the Java generics rules.
     *
     * @param type           the subject type to be assigned to the target type
     * @param toWildcardType the target wildcard type
     * @param typeVarAssigns a map with type variables
     * @return","0","-","-","-","-"
"6914","isCyclical","/**
     * Tests whether the class contains a cyclical reference in the qualified name of a class. If any of the type parameters of A class is extending X class
     * which is in scope of A class, then it forms cycle.
     *
     * @param cls the class to test.
     * @return whether the class contains a cyclical reference.
     */
    private static boolean isCyclical(final Class<?> cls)","0","-","-","-","-"
"6915","isInstance","/**
     * Tests if the given value can be assigned to the target type following the Java generics rules.
     *
     * @param value the value to be checked
     * @param type  the target type
     * @return","0","-","-","-","-"
"6916","mapTypeVariablesToArguments","/**
     * Maps type variables.
     *
     * @param <T>               the generic type of the class in question
     * @param cls               the class in question
     * @param parameterizedType the parameterized type
     * @param typeVarAssigns    the map to be filled
     */
    private static <T> void mapTypeVariablesToArguments(final Class<T> cls, final ParameterizedType parameterizedType,
            final Map<TypeVariable<?>, Type> typeVarAssigns)","0","-","-","-","-"
"6917","normalizeUpperBounds","/**
     * Strips out the redundant upper bound types in type variable types and wildcard types (or it would with wildcard types if multiple upper bounds were
     * allowed).
     *
     * <p>
     * Example, with the variable type declaration:
     * </p>
     *
     * <pre>","0","-","-","-","-"
"6918","parameterize","/**
     * Creates a parameterized type instance.
     *
     * @param rawClass        the raw class to create a parameterized type instance for
     * @param typeVariableMap the map used for parameterization
     * @return","0","-","-","-","-"
"6919","parameterize","/**
     * Creates a parameterized type instance.
     *
     * @param rawClass      the raw class to create a parameterized type instance for
     * @param typeArguments the types used for parameterization
     * @return","0","-","-","-","-"
"6920","parameterizedTypeToString","/**
     * Formats a","0","-","-","-","-"
"6921","parameterizeWithOwner","/**
     * Creates a parameterized type instance.
     *
     * @param owner           the owning type
     * @param rawClass        the raw class to create a parameterized type instance for
     * @param typeVariableMap the map used for parameterization
     * @return","0","-","-","-","-"
"6922","parameterizeWithOwner","/**
     * Creates a parameterized type instance.
     *
     * @param owner         the owning type
     * @param rawClass      the raw class to create a parameterized type instance for
     * @param typeArguments the types used for parameterization
     * @return","0","-","-","-","-"
"6923","substituteTypeVariables","/**
     * Finds the mapping for","0","-","-","-","-"
"6924","toLongString","/**
     * Formats a","0","-","-","-","-"
"6925","toString","/**
     * Formats a given type as a Java-esque String.
     *
     * @param type the type to create a String representation for, not","0","-","-","-","-"
"6926","typesSatisfyVariables","/**
     * Determines whether or not specified types satisfy the bounds of their mapped type variables. When a type parameter extends another (such as
     *","0","-","-","-","-"
"6927","typeVariableToString","/**
     * Formats a","0","-","-","-","-"
"6928","unrollBounds","/**
     * Unrolls variables in a type bounds array.
     *
     * @param typeArguments assignments","0","-","-","-","-"
"6929","unrollVariableAssignments","/**
     * Looks up","0","-","-","-","-"
"6930","unrollVariables","/**
     * Gets a type representing","0","-","-","-","-"
"6931","wildcardType","/**
     * Gets a","0","-","-","-","-"
"6932","wildcardTypeToString","/**
     * Formats a","0","-","-","-","-"
"6933","wrap","/**
     * Wraps the specified","0","-","-","-","-"
"6934","wrap","/**
     * Wraps the specified","0","-","-","-","-"
"6935","TypeUtils","/**
     *","0","-","-","-","-"
"6936","distance","/**
     * Returns the number of inheritance hops between two classes.
     *
     * @param child the child class, may be","0","-","-","-","-"
"6937","InheritanceUtils","/**
     *","0","-","-","-","-"
"6938","distance","/**
     * Returns the aggregate number of inheritance hops between assignable argument class types.  Returns -1
     * if the arguments aren't assignable.  Fills a specific purpose for getMatchingMethod and is not generalized.
     *
     * @param fromClassArray the Class array to calculate the distance from.
     * @param toClassArray the Class array to calculate the distance to.
     * @return the aggregate number of inheritance hops between assignable argument class types.
     */
    private static int distance(final Class<?>[] fromClassArray, final Class<?>[] toClassArray)","0","-","-","-","-"
"6939","getAccessibleMethod","/**
     * Gets an accessible method (that is, one that can be invoked via reflection) with given name and parameters. If no such method can be found, return
     *","0","-","-","-","-"
"6940","getAccessibleMethod","/**
     * Gets an accessible method (that is, one that can be invoked via
     * reflection) that implements the specified Method. If no such method
     * can be found, return","0","-","-","-","-"
"6941","getAccessibleMethodFromInterfaceNest","/**
     * Gets an accessible method (that is, one that can be invoked via
     * reflection) that implements the specified method, by scanning through
     * all implemented interfaces and subinterfaces. If no such method
     * can be found, return","0","-","-","-","-"
"6942","getAccessibleMethodFromSuperclass","/**
     * Gets an accessible method (that is, one that can be invoked via
     * reflection) by scanning through the superclasses. If no such method
     * can be found, return","0","-","-","-","-"
"6943","getAllSuperclassesAndInterfaces","/**
     * Gets a combination of","0","-","-","-","-"
"6944","getAnnotation","/**
     * Gets the annotation object with the given annotation type that is present on the given method
     * or optionally on any equivalent method in super classes and interfaces. Returns null if the annotation
     * type was not present.
     *
     * <p>Stops searching for an annotation once the first annotation of the specified type has been
     * found. Additional annotations of the specified type will be silently ignored.</p>
     * @param <A>
     *            the annotation type
     * @param method
     *            the","0","-","-","-","-"
"6945","getMatchingAccessibleMethod","/**
     * Gets an accessible method that matches the given name and has compatible parameters.
     * Compatible parameters mean that every method parameter is assignable from
     * the given parameters.
     * In other words, it finds a method with the given name
     * that will take the parameters given.
     *
     * <p>This method is used by
     *","0","-","-","-","-"
"6946","getMatchingMethod","/**
     * Gets a method whether or not it's accessible. If no such method
     * can be found, return","0","-","-","-","-"
"6947","getMethodObject","/**
     * Gets a Method or null if a","0","-","-","-","-"
"6948","getMethodsListWithAnnotation","/**
     * Gets all class level public methods of the given class that are annotated with the given annotation.
     * @param cls
     *            the","0","-","-","-","-"
"6949","getMethodsListWithAnnotation","/**
     * Gets all methods of the given class that are annotated with the given annotation.
     *
     * @param cls
     *            the","0","-","-","-","-"
"6950","getMethodsWithAnnotation","/**
     * Gets all class level public methods of the given class that are annotated with the given annotation.
     *
     * @param cls
     *            the","0","-","-","-","-"
"6951","getMethodsWithAnnotation","/**
     * Gets all methods of the given class that are annotated with the given annotation.
     *
     * @param cls
     *            the","0","-","-","-","-"
"6952","getOverrideHierarchy","/**
     * Gets the hierarchy of overridden methods down to","0","-","-","-","-"
"6953","getVarArgs","/**
     * Gets an array of arguments in the canonical form, given an arguments array passed to a varargs method,
     * for example an array with the declared number of parameters, and whose last parameter is an array of the varargs type.
     *
     * @param args the array of arguments passed to the varags method
     * @param methodParameterTypes the declared array of method parameter types
     * @return an array of the variadic arguments passed to the method
     * @since 3.5
     */
    static Object[] getVarArgs(final Object[] args, final Class<?>[] methodParameterTypes)","0","-","-","-","-"
"6954","invokeExactMethod","/**
     * Invokes a method whose parameter types match exactly the object
     * types.
     *
     * <p>This uses reflection to invoke the method obtained from a call to
     *","0","-","-","-","-"
"6955","invokeExactMethod","/**
     * Invokes a method with no parameters.
     *
     * <p>This uses reflection to invoke the method obtained from a call to
     *","0","-","-","-","-"
"6956","invokeExactMethod","/**
     * Invokes a method whose parameter types match exactly the parameter
     * types given.
     *
     * <p>This uses reflection to invoke the method obtained from a call to
     *","0","-","-","-","-"
"6957","invokeExactStaticMethod","/**
     * Invokes a","0","-","-","-","-"
"6958","invokeExactStaticMethod","/**
     * Invokes a","0","-","-","-","-"
"6959","invokeMethod","/**
     * Invokes a named method without parameters.
     *
     * <p>This is a convenient wrapper for
     *","0","-","-","-","-"
"6960","invokeMethod","/**
     * Invokes a named method whose parameter type matches the object type.
     *
     * <p>This method supports calls to methods taking primitive parameters
     * via passing in wrapping classes. So, for example, a","0","-","-","-","-"
"6961","invokeMethod","/**
     * Invokes a named method whose parameter type matches the object type.
     *
     * <p>This method supports calls to methods taking primitive parameters
     * via passing in wrapping classes. So, for example, a","0","-","-","-","-"
"6962","invokeMethod","/**
     * Invokes a named method without parameters.
     *
     * <p>This method delegates the method search to","0","-","-","-","-"
"6963","invokeMethod","/**
     * Invokes a named method whose parameter type matches the object type.
     *
     * <p>This method delegates the method search to","0","-","-","-","-"
"6964","invokeMethod","/**
     * Invokes a named method whose parameter type matches the object type.
     *
     * <p>This method delegates the method search to","0","-","-","-","-"
"6965","invokeStaticMethod","/**
     * Invokes a named","0","-","-","-","-"
"6966","invokeStaticMethod","/**
     * Invokes a named","0","-","-","-","-"
"6967","toVarArgs","private static Object[] toVarArgs(final Method method, Object[] args)","0","-","-","-","-"
"6968","MethodUtils","/**
     *","0","-","-","-","-"
"6969","getType","/**
     * Gets the","0","-","-","-","-"
"6970","of","private static Executable of(final Constructor<?> constructor)","0","-","-","-","-"
"6971","of","private static Executable of(final Method method)","0","-","-","-","-"
"6972","Executable","private Executable(final Constructor<?> constructor)","0","-","-","-","-"
"6973","Executable","private Executable(final Method method)","0","-","-","-","-"
"6974","getParameterTypes","public Class<?>[] getParameterTypes()","0","-","-","-","-"
"6975","isVarArgs","public boolean isVarArgs()","0","-","-","-","-"
"6976","compareConstructorFit","/**
     * Compares the relative fitness of two Constructors in terms of how well they
     * match a set of runtime parameter types, such that a list ordered
     * by the results of the comparison would return the best match first
     * (least).
     *
     * @param left the ""left"" Constructor
     * @param right the ""right"" Constructor
     * @param actual the runtime parameter types to match against
     *","0","-","-","-","-"
"6977","compareMethodFit","/**
     * Compares the relative fitness of two Methods in terms of how well they
     * match a set of runtime parameter types, such that a list ordered
     * by the results of the comparison would return the best match first
     * (least).
     *
     * @param left the ""left"" Method
     * @param right the ""right"" Method
     * @param actual the runtime parameter types to match against
     *","0","-","-","-","-"
"6978","compareParameterTypes","/**
     * Compares the relative fitness of two Executables in terms of how well they
     * match a set of runtime parameter types, such that a list ordered
     * by the results of the comparison would return the best match first
     * (least).
     *
     * @param left the ""left"" Executable
     * @param right the ""right"" Executable
     * @param actual the runtime parameter types to match against
     *","0","-","-","-","-"
"6979","getObjectTransformationCost","/**
     * Gets the number of steps needed to turn the source class into
     * the destination class. This represents the number of steps in the object
     * hierarchy graph.
     * @param srcClass The source class
     * @param destClass The destination class
     * @return The cost of transforming an object
     */
    private static float getObjectTransformationCost(Class<?> srcClass, final Class<?> destClass)","0","-","-","-","-"
"6980","getPrimitivePromotionCost","/**
     * Gets the number of steps required to promote a primitive number to another
     * type.
     * @param srcClass the (primitive) source class
     * @param destClass the (primitive) destination class
     * @return The cost of promoting the primitive
     */
    private static float getPrimitivePromotionCost(final Class<?> srcClass, final Class<?> destClass)","0","-","-","-","-"
"6981","getTotalTransformationCost","/**
     * Returns the sum of the object transformation cost for each class in the
     * source argument list.
     * @param srcArgs The source arguments
     * @param executable The executable to calculate transformation costs for
     * @return The total transformation cost
     */
    private static float getTotalTransformationCost(final Class<?>[] srcArgs, final Executable executable)","0","-","-","-","-"
"6982","isAccessible","/**
     * Tests whether a","0","-","-","-","-"
"6983","isMatchingConstructor","static boolean isMatchingConstructor(final Constructor<?> method, final Class<?>[] parameterTypes)","0","-","-","-","-"
"6984","isMatchingExecutable","private static boolean isMatchingExecutable(final Executable method, final Class<?>[] parameterTypes)","0","-","-","-","-"
"6985","isMatchingMethod","static boolean isMatchingMethod(final Method method, final Class<?>[] parameterTypes)","0","-","-","-","-"
"6986","isPackageAccess","/**
     * Tests whether a given set of modifiers implies package access.
     *
     * @param modifiers to test
     * @return","0","-","-","-","-"
"6987","isPublic","/**
     * Tests whether a","0","-","-","-","-"
"6988","isStatic","/**
     * Tests whether a","0","-","-","-","-"
"6989","setAccessibleWorkaround","/**
     * Default access superclass workaround.
     * <p>
     * When a","0","-","-","-","-"
"6990","TypeLiteral","/**
     * Constructs a new instance.
     */
    protected TypeLiteral()","0","-","-","-","-"
"6991","equals","@Override
    public final boolean equals(final Object obj)","0","-","-","-","-"
"6992","getType","@Override
    public Type getType()","0","-","-","-","-"
"6993","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"6994","toString","@Override
    public String toString()","0","-","-","-","-"
"6995","getAccessibleConstructor","/**
     * Finds a constructor given a class and signature, checking accessibility.
     *
     * <p>This finds the constructor and ensures that it is accessible.
     * The constructor signature must match the parameter types exactly.</p>
     *
     * @param <T> the constructor type
     * @param cls the class to find a constructor for, not","0","-","-","-","-"
"6996","getAccessibleConstructor","/**
     * Checks if the specified constructor is accessible.
     *
     * <p>This simply ensures that the constructor is accessible.</p>
     *
     * @param <T> the constructor type
     * @param ctor  the prototype constructor object, not","0","-","-","-","-"
"6997","getMatchingAccessibleConstructor","/**
     * Finds an accessible constructor with compatible parameters.
     *
     * <p>This checks all the constructor and finds one with compatible parameters
     * This requires that every parameter is assignable from the given parameter types.
     * This is a more flexible search than the normal exact matching algorithm.</p>
     *
     * <p>First it checks if there is a constructor matching the exact signature.
     * If not then all the constructors of the class are checked to see if their
     * signatures are assignment-compatible with the parameter types.
     * The first assignment-compatible matching constructor is returned.</p>
     *
     * @param <T> the constructor type
     * @param cls  the class to find a constructor for, not","0","-","-","-","-"
"6998","invokeConstructor","/**
     * Returns a new instance of the specified class inferring the right constructor
     * from the types of the arguments.
     *
     * <p>This locates and calls a constructor.
     * The constructor signature must match the argument types by assignment compatibility.</p>
     *
     * @param <T> the type to be constructed
     * @param cls  the class to be constructed, not","0","-","-","-","-"
"6999","invokeConstructor","/**
     * Returns a new instance of the specified class choosing the right constructor
     * from the list of parameter types.
     *
     * <p>This locates and calls a constructor.
     * The constructor signature must match the parameter types by assignment compatibility.</p>
     *
     * @param <T> the type to be constructed
     * @param cls  the class to be constructed, not","0","-","-","-","-"
"7000","invokeExactConstructor","/**
     * Returns a new instance of the specified class inferring the right constructor
     * from the types of the arguments.
     *
     * <p>This locates and calls a constructor.
     * The constructor signature must match the argument types exactly.</p>
     *
     * @param <T> the type to be constructed
     * @param cls the class to be constructed, not","0","-","-","-","-"
"7001","invokeExactConstructor","/**
     * Returns a new instance of the specified class choosing the right constructor
     * from the list of parameter types.
     *
     * <p>This locates and calls a constructor.
     * The constructor signature must match the parameter types exactly.</p>
     *
     * @param <T> the type to be constructed
     * @param cls the class to be constructed, not","0","-","-","-","-"
"7002","isAccessible","/**
     * Tests whether the specified class is generally accessible, i.e. is
     * declared in an entirely","0","-","-","-","-"
"7003","ConstructorUtils","/**
     * ConstructorUtils instances should NOT be constructed in standard
     * programming. Instead, the class should be used as
     *","0","-","-","-","-"
"7004","getAllFields","/**
     * Gets all fields of the given class and its parents (if any).
     *
     * @param cls
     *            the","0","-","-","-","-"
"7005","getAllFieldsList","/**
     * Gets all fields of the given class and its parents (if any).
     *
     * @param cls
     *            the","0","-","-","-","-"
"7006","getDeclaredField","/**
     * Gets an accessible","0","-","-","-","-"
"7007","getDeclaredField","/**
     * Gets an accessible","0","-","-","-","-"
"7008","getField","/**
     * Gets an accessible","0","-","-","-","-"
"7009","getField","/**
     * Gets an accessible","0","-","-","-","-"
"7010","getFieldsListWithAnnotation","/**
     * Gets all fields of the given class and its parents (if any) that are annotated with the given annotation.
     * @param cls
     *            the","0","-","-","-","-"
"7011","getFieldsWithAnnotation","/**
     * Gets all fields of the given class and its parents (if any) that are annotated with the given annotation.
     * @param cls
     *            the","0","-","-","-","-"
"7012","readDeclaredField","/**
     * Reads the named","0","-","-","-","-"
"7013","readDeclaredField","/**
     * Gets a","0","-","-","-","-"
"7014","readDeclaredStaticField","/**
     * Gets the value of a","0","-","-","-","-"
"7015","readDeclaredStaticField","/**
     * Gets the value of a","0","-","-","-","-"
"7016","readField","/**
     * Reads an accessible","0","-","-","-","-"
"7017","readField","/**
     * Reads a","0","-","-","-","-"
"7018","readField","/**
     * Reads the named","0","-","-","-","-"
"7019","readField","/**
     * Reads the named","0","-","-","-","-"
"7020","readStaticField","/**
     * Reads the named","0","-","-","-","-"
"7021","readStaticField","/**
     * Reads the named","0","-","-","-","-"
"7022","readStaticField","/**
     * Reads an accessible","0","-","-","-","-"
"7023","readStaticField","/**
     * Reads a static","0","-","-","-","-"
"7024","removeFinalModifier","/**
     * Removes the final modifier from a","0","-","-","-","-"
"7025","removeFinalModifier","/**
     * Removes the final modifier from a","0","-","-","-","-"
"7026","writeDeclaredField","/**
     * Writes a","0","-","-","-","-"
"7027","writeDeclaredField","/**
     * Writes a","0","-","-","-","-"
"7028","writeDeclaredStaticField","/**
     * Writes a named","0","-","-","-","-"
"7029","writeDeclaredStaticField","/**
     * Writes a named","0","-","-","-","-"
"7030","writeField","/**
     * Writes an accessible","0","-","-","-","-"
"7031","writeField","/**
     * Writes a","0","-","-","-","-"
"7032","writeField","/**
     * Writes a","0","-","-","-","-"
"7033","writeField","/**
     * Writes a","0","-","-","-","-"
"7034","writeStaticField","/**
     * Writes a named","0","-","-","-","-"
"7035","writeStaticField","/**
     * Writes a named","0","-","-","-","-"
"7036","writeStaticField","/**
     * Writes a","0","-","-","-","-"
"7037","writeStaticField","/**
     * Writes a static","0","-","-","-","-"
"7038","FieldUtils","/**
     *","0","-","-","-","-"
"7039","sort","/**
     * Sorts the given array into ascending order and returns it.
     *
     * @param array the array to sort (may be null).
     * @return the given array.
     * @see Arrays#sort(byte[])
     */
    public static byte[] sort(final byte[] array)","0","-","-","-","-"
"7040","sort","/**
     * Sorts the given array into ascending order and returns it.
     *
     * @param array the array to sort (may be null).
     * @return the given array.
     * @see Arrays#sort(char[])
     */
    public static char[] sort(final char[] array)","0","-","-","-","-"
"7041","sort","/**
     * Sorts the given array into ascending order and returns it.
     *
     * @param array the array to sort (may be null).
     * @return the given array.
     * @see Arrays#sort(double[])
     */
    public static double[] sort(final double[] array)","0","-","-","-","-"
"7042","sort","/**
     * Sorts the given array into ascending order and returns it.
     *
     * @param array the array to sort (may be null).
     * @return the given array.
     * @see Arrays#sort(float[])
     */
    public static float[] sort(final float[] array)","0","-","-","-","-"
"7043","sort","/**
     * Sorts the given array into ascending order and returns it.
     *
     * @param array the array to sort (may be null).
     * @return the given array.
     * @see Arrays#sort(int[])
     */
    public static int[] sort(final int[] array)","0","-","-","-","-"
"7044","sort","/**
     * Sorts the given array into ascending order and returns it.
     *
     * @param array the array to sort (may be null).
     * @return the given array.
     * @see Arrays#sort(long[])
     */
    public static long[] sort(final long[] array)","0","-","-","-","-"
"7045","sort","/**
     * Sorts the given array into ascending order and returns it.
     *
     * @param array the array to sort (may be null).
     * @return the given array.
     * @see Arrays#sort(short[])
     */
    public static short[] sort(final short[] array)","0","-","-","-","-"
"7046","sort","/**
     * Sorts the given array into ascending order and returns it.
     *
     * @param <T> the array type.
     * @param array the array to sort (may be null).
     * @return the given array.
     * @see Arrays#sort(Object[])
     */
    public static <T> T[] sort(final T[] array)","0","-","-","-","-"
"7047","sort","/**
     * Sorts the given array into ascending order and returns it.
     *
     * @param <T> the array type.
     * @param array the array to sort (may be null).
     * @param comparator the comparator to determine the order of the array. A","0","-","-","-","-"
"7048","ArraySorter","/**
     * Constructs a new instance.
     *
     * @deprecated Will be removed in 4.0.0.
     */
    @Deprecated
    public ArraySorter()","0","-","-","-","-"
"7049","NotImplementedException","/**
     * Constructs a NotImplementedException.
     *
     * @since 3.10
     */
    public NotImplementedException()","0","-","-","-","-"
"7050","NotImplementedException","/**
     * Constructs a NotImplementedException.
     *
     * @param message description of the exception
     * @since 3.2
     */
    public NotImplementedException(final String message)","0","-","-","-","-"
"7051","NotImplementedException","/**
     * Constructs a NotImplementedException.
     *
     * @param message description of the exception
     * @param code code indicating a resource for more information regarding the lack of implementation
     * @since 3.2
     */
    public NotImplementedException(final String message, final String code)","0","-","-","-","-"
"7052","NotImplementedException","/**
     * Constructs a NotImplementedException.
     *
     * @param message description of the exception
     * @param cause cause of the exception
     * @since 3.2
     */
    public NotImplementedException(final String message, final Throwable cause)","0","-","-","-","-"
"7053","NotImplementedException","/**
     * Constructs a NotImplementedException.
     *
     * @param message description of the exception
     * @param cause cause of the exception
     * @param code code indicating a resource for more information regarding the lack of implementation
     * @since 3.2
     */
    public NotImplementedException(final String message, final Throwable cause, final String code)","0","-","-","-","-"
"7054","NotImplementedException","/**
     * Constructs a NotImplementedException.
     *
     * @param cause cause of the exception
     * @since 3.2
     */
    public NotImplementedException(final Throwable cause)","0","-","-","-","-"
"7055","NotImplementedException","/**
     * Constructs a NotImplementedException.
     *
     * @param cause cause of the exception
     * @param code code indicating a resource for more information regarding the lack of implementation
     * @since 3.2
     */
    public NotImplementedException(final Throwable cause, final String code)","0","-","-","-","-"
"7056","getCode","/**
     * Obtain the not implemented code. This is an unformatted piece of text intended to point to
     * further information regarding the lack of implementation. It might, for example, be an issue
     * tracker ID or a URL.
     *
     * @return a code indicating a resource for more information regarding the lack of implementation
     */
    public String getCode()","0","-","-","-","-"
"7057","insecure","/**
     * Gets the singleton instance based on","0","-","-","-","-"
"7058","random","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of all characters.
     * </p>
     *
     * @param count the length of random string to create
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7059","random","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.
     * </p>
     *
     * @param count   the length of random string to create
     * @param letters if","0","-","-","-","-"
"7060","random","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of characters specified.
     * </p>
     *
     * @param count the length of random string to create
     * @param chars the character array containing the set of characters to use, may be null
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7061","random","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.
     * </p>
     *
     * @param count   the length of random string to create
     * @param start   the position in set of chars to start at
     * @param end     the position in set of chars to end before
     * @param letters if","0","-","-","-","-"
"7062","random","/**
     * Creates a random string based on a variety of options, using default source of randomness.
     *
     * <p>
     * This method has exactly the same semantics as","0","-","-","-","-"
"7063","random","/**
     * Creates a random string based on a variety of options, using supplied source of randomness.
     *
     * <p>
     * If start and end are both","0","-","-","-","-"
"7064","random","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of characters specified by the string, must not be empty. If null, the set
     * of all characters is used.
     * </p>
     *
     * @param count the length of random string to create
     * @param chars the String containing the set of characters to use, may be null, but must not be empty
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7065","randomAlphabetic","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of Latin alphabetic characters (a-z, A-Z).
     * </p>
     *
     * @param count the length of random string to create
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7066","randomAlphabetic","/**
     * Creates a random string whose length is between the inclusive minimum and the exclusive maximum.
     *
     * <p>
     * Characters will be chosen from the set of Latin alphabetic characters (a-z, A-Z).
     * </p>
     *
     * @param minLengthInclusive the inclusive minimum length of the string to generate
     * @param maxLengthExclusive the exclusive maximum length of the string to generate
     * @return the random string
     * @since 3.5
     * @deprecated Use","0","-","-","-","-"
"7067","randomAlphanumeric","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of Latin alphabetic characters (a-z, A-Z) and the digits 0-9.
     * </p>
     *
     * @param count the length of random string to create
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7068","randomAlphanumeric","/**
     * Creates a random string whose length is between the inclusive minimum and the exclusive maximum.
     *
     * <p>
     * Characters will be chosen from the set of Latin alphabetic characters (a-z, A-Z) and the digits 0-9.
     * </p>
     *
     * @param minLengthInclusive the inclusive minimum length of the string to generate
     * @param maxLengthExclusive the exclusive maximum length of the string to generate
     * @return the random string
     * @since 3.5
     * @deprecated Use","0","-","-","-","-"
"7069","randomAscii","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of characters whose ASCII value is between","0","-","-","-","-"
"7070","randomAscii","/**
     * Creates a random string whose length is between the inclusive minimum and the exclusive maximum.
     *
     * <p>
     * Characters will be chosen from the set of characters whose ASCII value is between","0","-","-","-","-"
"7071","randomGraph","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of characters which match the POSIX [:graph:] regular expression character
     * class. This class contains all visible ASCII characters (i.e. anything except spaces and control characters).
     * </p>
     *
     * @param count the length of random string to create
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7072","randomGraph","/**
     * Creates a random string whose length is between the inclusive minimum and the exclusive maximum.
     *
     * <p>
     * Characters will be chosen from the set of \p","0","-","-","-","-"
"7073","randomNumeric","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of numeric characters.
     * </p>
     *
     * @param count the length of random string to create
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7074","randomNumeric","/**
     * Creates a random string whose length is between the inclusive minimum and the exclusive maximum.
     *
     * <p>
     * Characters will be chosen from the set of \p","0","-","-","-","-"
"7075","randomPrint","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of characters which match the POSIX [:print:] regular expression character
     * class. This class includes all visible ASCII characters and spaces (i.e. anything except control characters).
     * </p>
     *
     * @param count the length of random string to create
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7076","randomPrint","/**
     * Creates a random string whose length is between the inclusive minimum and the exclusive maximum.
     *
     * <p>
     * Characters will be chosen from the set of \p","0","-","-","-","-"
"7077","secure","/**
     * Gets the singleton instance based on","0","-","-","-","-"
"7078","secureStrong","/**
     * Gets the singleton instance based on","0","-","-","-","-"
"7079","RandomStringUtils","/**
     *","0","-","-","-","-"
"7080","RandomStringUtils","private RandomStringUtils(final Supplier<RandomUtils> random)","0","-","-","-","-"
"7081","next","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of all characters.
     * </p>
     *
     * @param count the length of random string to create
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7082","next","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.
     * </p>
     *
     * @param count   the length of random string to create
     * @param letters if","0","-","-","-","-"
"7083","next","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of characters specified.
     * </p>
     *
     * @param count the length of random string to create
     * @param chars the character array containing the set of characters to use, may be null
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7084","next","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.
     * </p>
     *
     * @param count   the length of random string to create
     * @param start   the position in set of chars to start at
     * @param end     the position in set of chars to end before
     * @param letters if","0","-","-","-","-"
"7085","next","/**
     * Creates a random string based on a variety of options, using default source of randomness.
     *
     * <p>
     * This method has exactly the same semantics as","0","-","-","-","-"
"7086","next","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of characters specified by the string, must not be empty. If null, the set
     * of all characters is used.
     * </p>
     *
     * @param count the length of random string to create
     * @param chars the String containing the set of characters to use, may be null, but must not be empty
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7087","nextAlphabetic","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of Latin alphabetic characters (a-z, A-Z).
     * </p>
     *
     * @param count the length of random string to create
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7088","nextAlphabetic","/**
     * Creates a random string whose length is between the inclusive minimum and the exclusive maximum.
     *
     * <p>
     * Characters will be chosen from the set of Latin alphabetic characters (a-z, A-Z).
     * </p>
     *
     * @param minLengthInclusive the inclusive minimum length of the string to generate
     * @param maxLengthExclusive the exclusive maximum length of the string to generate
     * @return the random string
     * @since 3.5
     */
    public String nextAlphabetic(final int minLengthInclusive, final int maxLengthExclusive)","0","-","-","-","-"
"7089","nextAlphanumeric","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of Latin alphabetic characters (a-z, A-Z) and the digits 0-9.
     * </p>
     *
     * @param count the length of random string to create
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7090","nextAlphanumeric","/**
     * Creates a random string whose length is between the inclusive minimum and the exclusive maximum.
     *
     * <p>
     * Characters will be chosen from the set of Latin alphabetic characters (a-z, A-Z) and the digits 0-9.
     * </p>
     *
     * @param minLengthInclusive the inclusive minimum length of the string to generate
     * @param maxLengthExclusive the exclusive maximum length of the string to generate
     * @return the random string
     * @since 3.5
     */
    public String nextAlphanumeric(final int minLengthInclusive, final int maxLengthExclusive)","0","-","-","-","-"
"7091","nextAscii","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of characters whose ASCII value is between","0","-","-","-","-"
"7092","nextAscii","/**
     * Creates a random string whose length is between the inclusive minimum and the exclusive maximum.
     *
     * <p>
     * Characters will be chosen from the set of characters whose ASCII value is between","0","-","-","-","-"
"7093","nextGraph","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of characters which match the POSIX [:graph:] regular expression character
     * class. This class contains all visible ASCII characters (i.e. anything except spaces and control characters).
     * </p>
     *
     * @param count the length of random string to create
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7094","nextGraph","/**
     * Creates a random string whose length is between the inclusive minimum and the exclusive maximum.
     *
     * <p>
     * Characters will be chosen from the set of \p","0","-","-","-","-"
"7095","nextNumeric","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of numeric characters.
     * </p>
     *
     * @param count the length of random string to create
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7096","nextNumeric","/**
     * Creates a random string whose length is between the inclusive minimum and the exclusive maximum.
     *
     * <p>
     * Characters will be chosen from the set of \p","0","-","-","-","-"
"7097","nextPrint","/**
     * Creates a random string whose length is the number of characters specified.
     *
     * <p>
     * Characters will be chosen from the set of characters which match the POSIX [:print:] regular expression character
     * class. This class includes all visible ASCII characters and spaces (i.e. anything except control characters).
     * </p>
     *
     * @param count the length of random string to create
     * @return the random string
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7098","nextPrint","/**
     * Creates a random string whose length is between the inclusive minimum and the exclusive maximum.
     *
     * <p>
     * Characters will be chosen from the set of \p","0","-","-","-","-"
"7099","random","/**
     * Gets the Random.
     *
     * @return the Random.
     */
    private Random random()","0","-","-","-","-"
"7100","randomUtils","/**
     * Gets the RandomUtils.
     *
     * @return the RandomUtils.
     */
    private RandomUtils randomUtils()","0","-","-","-","-"
"7101","toString","@Override
    public String toString()","0","-","-","-","-"
"7102","getAsBoolean","/**
     * Supplies a boolean.
     *
     * @return a result
     * @throws E if the supplier fails
     */
    boolean getAsBoolean() throws E;","0","-","-","-","-"
"7103","run","/**
     * Runs the function.
     *
     * @throws E Thrown when the function fails.
     */
    void run() throws E;","0","-","-","-","-"
"7104","getAsInt","/**
     * Supplies an int.
     *
     * @return a result
     * @throws E if the supplier fails
     */
    int getAsInt() throws E;","0","-","-","-","-"
"7105","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> Consumed type 1.
     * @param <U> Consumed type 2.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, U, E extends Throwable> FailableBiConsumer<T, U, E> nop()","0","-","-","-","-"
"7106","accept","/**
     * Accepts the given arguments.
     *
     * @param t the first parameter for the consumable to accept
     * @param u the second parameter for the consumable to accept
     * @throws E Thrown when the consumer fails.
     */
    void accept(T t, U u) throws E;","0","-","-","-","-"
"7107","andThen","/**
     * Returns a composed","0","-","-","-","-"
"7108","nop","/**
     * Returns the NOP singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableIntToDoubleFunction<E> nop()","0","-","-","-","-"
"7109","applyAsDouble","/**
     * Applies this function to the given argument.
     *
     * @param value the function argument
     * @return the function result
     * @throws E Thrown when the function fails.
     */
    double applyAsDouble(int value) throws E;","0","-","-","-","-"
"7110","get","/**
     * Null-safe call to","0","-","-","-","-"
"7111","nul","/**
     * Returns the singleton supplier that always returns null.
     * <p>
     * This supplier never throws an exception.
     * </p>
     *
     * @param <T> Supplied type.
     * @return The NUL singleton.
     * @since 3.14.0
     */
    @SuppressWarnings(""unchecked"")
    public static <T> Supplier<T> nul()","0","-","-","-","-"
"7112","Suppliers","/**
     * Make private in 4.0.
     *
     * @deprecated TODO Make private in 4.0.
     */
    @Deprecated
    public Suppliers()","0","-","-","-","-"
"7113","identity","/**
     * Returns a unary operator that always returns its input argument.
     *
     * @param <E> The kind of thrown exception or error.
     * @return a unary operator that always returns its input argument
     */
    static <E extends Throwable> FailableLongUnaryOperator<E> identity()","0","-","-","-","-"
"7114","nop","/**
     * Returns the NOP singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableLongUnaryOperator<E> nop()","0","-","-","-","-"
"7115","andThen","/**
     * Returns a composed","0","-","-","-","-"
"7116","applyAsLong","/**
     * Applies this operator to the given operand.
     *
     * @param operand the operand
     * @return the operator result
     * @throws E Thrown when a consumer fails.
     */
    long applyAsLong(long operand) throws E;","0","-","-","-","-"
"7117","compose","/**
     * Returns a composed","0","-","-","-","-"
"7118","apply","/**
     * Applies the","0","-","-","-","-"
"7119","function","/**
     * Starts a fluent chain like","0","-","-","-","-"
"7120","Functions","private Functions()","0","-","-","-","-"
"7121","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> the type of the object argument to the operation.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, E extends Throwable> FailableObjIntConsumer<T, E> nop()","0","-","-","-","-"
"7122","accept","/**
     * Accepts the given arguments.
     *
     * @param object the object parameter for the consumable to accept.
     * @param value the int parameter for the consumable to accept.
     * @throws E Thrown when the consumer fails.
     */
    void accept(T object, int value) throws E;","0","-","-","-","-"
"7123","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> the type of the object argument to the operation.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, E extends Throwable> FailableObjLongConsumer<T, E> nop()","0","-","-","-","-"
"7124","accept","/**
     * Accepts the given arguments.
     *
     * @param object the object parameter for the consumable to accept.
     * @param value the long parameter for the consumable to accept.
     * @throws E Thrown when the consumer fails.
     */
    void accept(T object, long value) throws E;","0","-","-","-","-"
"7125","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> the type of the first argument to the function
     * @param <U> the type of the second argument to the function
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, U, E extends Throwable> FailableToLongBiFunction<T, U, E> nop()","0","-","-","-","-"
"7126","applyAsLong","/**
     * Applies this function to the given arguments.
     *
     * @param t the first function argument
     * @param u the second function argument
     * @return the function result
     * @throws E Thrown when the function fails.
     */
    long applyAsLong(T t, U u) throws E;","0","-","-","-","-"
"7127","getAsDouble","/**
     * Supplies a double.
     *
     * @return a result
     * @throws E if the supplier fails
     */
    double getAsDouble() throws E;","0","-","-","-","-"
"7128","falsePredicate","/**
     * Returns the FALSE singleton.
     *
     * @param <T> Consumed type 1.
     * @param <U> Consumed type 2.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, U, E extends Throwable> FailableBiPredicate<T, U, E> falsePredicate()","0","-","-","-","-"
"7129","truePredicate","/**
     * Returns the TRUE singleton.
     *
     * @param <T> Consumed type 1.
     * @param <U> Consumed type 2.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, U, E extends Throwable> FailableBiPredicate<T, U, E> truePredicate()","0","-","-","-","-"
"7130","and","/**
     * Returns a composed","0","-","-","-","-"
"7131","negate","/**
     * Returns a predicate that negates this predicate.
     *
     * @return a predicate that negates this predicate.
     */
    default FailableBiPredicate<T, U, E> negate()","0","-","-","-","-"
"7132","or","/**
     * Returns a composed","0","-","-","-","-"
"7133","test","/**
     * Tests the predicate.
     *
     * @param object1 the first object to test the predicate on
     * @param object2 the second object to test the predicate on
     * @return the predicate's evaluation
     * @throws E Thrown when this predicate fails.
     */
    boolean test(T object1, U object2) throws E;","0","-","-","-","-"
"7134","nop","/**
     * Returns the NOP singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableDoubleToLongFunction<E> nop()","0","-","-","-","-"
"7135","applyAsLong","/**
     * Applies this function to the given argument.
     *
     * @param value the function argument
     * @return the function result
     * @throws E if the operation fails
     */
    int applyAsLong(double value) throws E;","0","-","-","-","-"
"7136","falsePredicate","/**
     * Returns the FALSE singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableIntPredicate<E> falsePredicate()","0","-","-","-","-"
"7137","truePredicate","/**
     * Returns the TRUE singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableIntPredicate<E> truePredicate()","0","-","-","-","-"
"7138","and","/**
     * Returns a composed","0","-","-","-","-"
"7139","negate","/**
     * Returns a predicate that negates this predicate.
     *
     * @return a predicate that negates this predicate.
     */
    default FailableIntPredicate<E> negate()","0","-","-","-","-"
"7140","or","/**
     * Returns a composed","0","-","-","-","-"
"7141","test","/**
     * Tests the predicate.
     *
     * @param value the parameter for the predicate to accept.
     * @return","0","-","-","-","-"
"7142","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> Consumed type 1.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, E extends Throwable> FailableConsumer<T, E> nop()","0","-","-","-","-"
"7143","accept","/**
     * Accepts the given arguments.
     *
     * @param object the parameter for the consumable to accept
     * @throws E Thrown when the consumer fails.
     */
    void accept(T object) throws E;","0","-","-","-","-"
"7144","andThen","/**
     * Returns a composed","0","-","-","-","-"
"7145","identity","/**
     * Returns a unary operator that always returns its input argument.
     *
     * @param <E> The kind of thrown exception or error.
     * @return a unary operator that always returns its input argument
     */
    static <E extends Throwable> FailableDoubleUnaryOperator<E> identity()","0","-","-","-","-"
"7146","nop","/**
     * Returns the NOP singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableDoubleUnaryOperator<E> nop()","0","-","-","-","-"
"7147","andThen","/**
     * Returns a composed","0","-","-","-","-"
"7148","applyAsDouble","/**
     * Applies this operator to the given operand.
     *
     * @param operand the operand
     * @return the operator result
     * @throws E Thrown when a consumer fails.
     */
    double applyAsDouble(double operand) throws E;","0","-","-","-","-"
"7149","compose","/**
     * Returns a composed","0","-","-","-","-"
"7150","function","/**
     * Starts a fluent chain like","0","-","-","-","-"
"7151","identity","/**
     * Returns a function that always returns its input argument.
     *
     * @param <T> the type of the input and output objects to the function
     * @param <E> The kind of thrown exception or error.
     * @return a function that always returns its input argument
     */
    static <T, E extends Throwable> FailableFunction<T, T, E> identity()","0","-","-","-","-"
"7152","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> Consumed type.
     * @param <R> Return type.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, R, E extends Throwable> FailableFunction<T, R, E> nop()","0","-","-","-","-"
"7153","andThen","/**
     * Returns a composed","0","-","-","-","-"
"7154","apply","/**
     * Applies this function.
     *
     * @param input the input for the function
     * @return the result of the function
     * @throws E Thrown when the function fails.
     */
    R apply(T input) throws E;","0","-","-","-","-"
"7155","compose","/**
     * Returns a composed","0","-","-","-","-"
"7156","identity","/**
     * Returns a unary operator that always returns its input argument.
     *
     * @param <E> The kind of thrown exception or error.
     * @return a unary operator that always returns its input argument
     */
    static <E extends Throwable> FailableIntUnaryOperator<E> identity()","0","-","-","-","-"
"7157","nop","/**
     * Returns the NOP singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableIntUnaryOperator<E> nop()","0","-","-","-","-"
"7158","andThen","/**
     * Returns a composed","0","-","-","-","-"
"7159","applyAsInt","/**
     * Applies this operator to the given operand.
     *
     * @param operand the operand
     * @return the operator result
     * @throws E Thrown when a consumer fails.
     */
    int applyAsInt(int operand) throws E;","0","-","-","-","-"
"7160","compose","/**
     * Returns a composed","0","-","-","-","-"
"7161","applyAsDouble","/**
     * Applies this operator to the given operands.
     *
     * @param left the first operand
     * @param right the second operand
     * @return the operator result
     * @throws E if the operation fails
     */
    double applyAsDouble(double left, double right) throws E;","0","-","-","-","-"
"7162","getAsLong","/**
     * Supplies a long.
     *
     * @return a result
     * @throws E if the supplier fails
     */
    long getAsLong() throws E;","0","-","-","-","-"
"7163","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> Consumed type 1.
     * @param <U> Consumed type 2.
     * @param <R> Return type.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, U, R, E extends Throwable> FailableBiFunction<T, U, R, E> nop()","0","-","-","-","-"
"7164","andThen","/**
     * Returns a composed","0","-","-","-","-"
"7165","apply","/**
     * Applies this function.
     *
     * @param input1 the first input for the function
     * @param input2 the second input for the function
     * @return the result of the function
     * @throws E Thrown when the function fails.
     */
    R apply(T input1, U input2) throws E;","0","-","-","-","-"
"7166","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> the type of the first argument to the function
     * @param <U> the type of the second argument to the function
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, U, E extends Throwable> FailableToIntBiFunction<T, U, E> nop()","0","-","-","-","-"
"7167","applyAsInt","/**
     * Applies this function to the given arguments.
     *
     * @param t the first function argument
     * @param u the second function argument
     * @return the function result
     * @throws E Thrown when the function fails.
     */
    int applyAsInt(T t, U u) throws E;","0","-","-","-","-"
"7168","falsePredicate","/**
     * Returns the FALSE singleton.
     *
     * @param <T> Predicate type.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, E extends Throwable> FailablePredicate<T, E> falsePredicate()","0","-","-","-","-"
"7169","truePredicate","/**
     * Returns the TRUE singleton.
     *
     * @param <T> Predicate type.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, E extends Throwable> FailablePredicate<T, E> truePredicate()","0","-","-","-","-"
"7170","and","/**
     * Returns a composed","0","-","-","-","-"
"7171","negate","/**
     * Returns a predicate that negates this predicate.
     *
     * @return a predicate that negates this predicate.
     */
    default FailablePredicate<T, E> negate()","0","-","-","-","-"
"7172","or","/**
     * Returns a composed","0","-","-","-","-"
"7173","test","/**
     * Tests the predicate.
     *
     * @param object the object to test the predicate on
     * @return the predicate's evaluation
     * @throws E if the predicate fails
     */
    boolean test(T object) throws E;","0","-","-","-","-"
"7174","andThen","/**
     * Returns a composed function that first applies this function to its input, and then applies the","0","-","-","-","-"
"7175","apply","/**
     * Applies this function to the given arguments.
     *
     * @param t the first function argument
     * @param u the second function argument
     * @param v the third function argument
     * @return the function result
     */
    R apply(T t, U u, V v);","0","-","-","-","-"
"7176","applyAsLong","/**
     * Applies this operator to the given operands.
     *
     * @param left the first operand
     * @param right the second operand
     * @return the operator result
     * @throws E if the operation fails
     */
    long applyAsLong(long left, long right) throws E;","0","-","-","-","-"
"7177","applyAsChar","/**
     * Applies this function to the given argument.
     *
     * @param value the function argument.
     * @return the function result.
     */
    char applyAsChar(int value);","0","-","-","-","-"
"7178","nop","/**
     * Returns the NOP singleton.
     *
     * @param <R> Return type.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <R, E extends Throwable> FailableDoubleFunction<R, E> nop()","0","-","-","-","-"
"7179","apply","/**
     * Applies this function.
     *
     * @param input the input for the function
     * @return the result of the function
     * @throws E Thrown when the function fails.
     */
    R apply(double input) throws E;","0","-","-","-","-"
"7180","nop","/**
     * Returns the NOP singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableIntToLongFunction<E> nop()","0","-","-","-","-"
"7181","applyAsLong","/**
     * Applies this function to the given argument.
     *
     * @param value the function argument
     * @return the function result
     * @throws E Thrown when the function fails.
     */
    long applyAsLong(int value) throws E;","0","-","-","-","-"
"7182","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> the type of the object argument to the operation.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, E extends Throwable> FailableObjDoubleConsumer<T, E> nop()","0","-","-","-","-"
"7183","accept","/**
     * Accepts the given arguments.
     *
     * @param object the object parameter for the consumable to accept.
     * @param value the double parameter for the consumable to accept.
     * @throws E Thrown when the consumer fails.
     */
    void accept(T object, double value) throws E;","0","-","-","-","-"
"7184","applyAsBoolean","/**
     * Applies this function to the given arguments.
     *
     * @param t the first function argument.
     * @param u the second function argument.
     * @return the function result.
     */
    boolean applyAsBoolean(T t, U u);","0","-","-","-","-"
"7185","nop","/**
     * Returns the NOP singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableLongConsumer<E> nop()","0","-","-","-","-"
"7186","accept","/**
     * Accepts the given arguments.
     *
     * @param object the parameter for the consumable to accept
     * @throws E Thrown when the consumer fails.
     */
    void accept(long object) throws E;","0","-","-","-","-"
"7187","andThen","/**
     * Returns a composed","0","-","-","-","-"
"7188","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> the type of the first argument to the function
     * @param <U> the type of the second argument to the function
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, U, E extends Throwable> FailableToDoubleBiFunction<T, U, E> nop()","0","-","-","-","-"
"7189","applyAsDouble","/**
     * Applies this function to the given arguments.
     *
     * @param t the first function argument
     * @param u the second function argument
     * @return the function result
     * @throws E Thrown when the function fails.
     */
    double applyAsDouble(T t, U u) throws E;","0","-","-","-","-"
"7190","nop","/**
     * Returns the NOP singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableLongToIntFunction<E> nop()","0","-","-","-","-"
"7191","applyAsInt","/**
     * Applies this function to the given argument.
     *
     * @param value the function argument
     * @return the function result
     * @throws E Thrown when the function fails.
     */
    int applyAsInt(long value) throws E;","0","-","-","-","-"
"7192","nop","/**
     * Returns the NOP singleton.
     *
     * @return The NOP singleton.
     */
    static BooleanConsumer nop()","0","-","-","-","-"
"7193","accept","/**
     * Accepts the given arguments.
     *
     * @param value the input argument
     */
    void accept(boolean value);","0","-","-","-","-"
"7194","andThen","/**
     * Returns a composed","0","-","-","-","-"
"7195","nop","/**
     * Returns the NOP singleton.
     *
     * @param <R> Return type.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <R, E extends Throwable> FailableIntFunction<R, E> nop()","0","-","-","-","-"
"7196","apply","/**
     * Applies this function.
     *
     * @param input the input for the function
     * @return the result of the function
     * @throws E Thrown when the function fails.
     */
    R apply(int input) throws E;","0","-","-","-","-"
"7197","falsePredicate","/**
     * Returns the FALSE singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
   @SuppressWarnings(""unchecked"")
   static <E extends Throwable> FailableLongPredicate<E> falsePredicate()","0","-","-","-","-"
"7198","truePredicate","/**
     * Returns the TRUE singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableLongPredicate<E> truePredicate()","0","-","-","-","-"
"7199","and","/**
     * Returns a composed","0","-","-","-","-"
"7200","negate","/**
     * Returns a predicate that negates this predicate.
     *
     * @return a predicate that negates this predicate.
     */
    default FailableLongPredicate<E> negate()","0","-","-","-","-"
"7201","or","/**
     * Returns a composed","0","-","-","-","-"
"7202","test","/**
     * Tests the predicate.
     *
     * @param value the parameter for the predicate to accept.
     * @return","0","-","-","-","-"
"7203","call","/**
     * Calls the callable.
     *
     * @return The value returned from the callable
     * @throws E if the callable fails
     */
    R call() throws E;","0","-","-","-","-"
"7204","falsePredicate","/**
     * Returns the Predicate singleton that always returns false.
     *
     * @param <T> the type of the input to the predicate.
     * @return the Predicate singleton.
     */
    @SuppressWarnings(""unchecked"")
    // method name cannot be ""false"".
    public static <T> Predicate<T> falsePredicate()","0","-","-","-","-"
"7205","truePredicate","/**
     * Returns the Predicate singleton that always returns true.
     *
     * @param <T> the type of the input to the predicate.
     * @return the Predicate singleton.
     */
    @SuppressWarnings(""unchecked"")
    // method name cannot be ""true"".
    public static <T> Predicate<T> truePredicate()","0","-","-","-","-"
"7206","Predicates","/**
     * No instances needed.
     */
    private Predicates()","0","-","-","-","-"
"7207","asBiConsumer","/**
     * Produces a","0","-","-","-","-"
"7208","asBiFunction","/**
     * Produces a","0","-","-","-","-"
"7209","asFailableBiConsumer","/**
     * Produces a","0","-","-","-","-"
"7210","asFailableBiFunction","/**
     * Produces a","0","-","-","-","-"
"7211","asFailableFunction","/**
     * Produces a","0","-","-","-","-"
"7212","asFailableSupplier","/**
     * Produces a","0","-","-","-","-"
"7213","asFunction","/**
     * Produces a","0","-","-","-","-"
"7214","asInterfaceInstance","/**
     * Produces an instance of the given single-method interface which redirects its calls to the given method.
     * <p>
     * For the definition of ""single-method"", see","0","-","-","-","-"
"7215","asSupplier","/**
     * Produces a","0","-","-","-","-"
"7216","requireMethod","/**
     * Throws NullPointerException if","0","-","-","-","-"
"7217","unreflect","private static MethodHandle unreflect(final Method method) throws IllegalAccessException","0","-","-","-","-"
"7218","unreflectUnchecked","private static MethodHandle unreflectUnchecked(final Method method)","0","-","-","-","-"
"7219","MethodInvokers","/**
     * No need to create instances.
     */
    private MethodInvokers()","0","-","-","-","-"
"7220","applyAsInt","/**
     * Applies this operator to the given operands.
     *
     * @param left the first operand
     * @param right the second operand
     * @return the operator result
     * @throws E if the operation fails
     */
    int applyAsInt(int left, int right) throws E;","0","-","-","-","-"
"7221","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> the type of the argument to the function
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, E extends Throwable> FailableToDoubleFunction<T, E> nop()","0","-","-","-","-"
"7222","applyAsDouble","/**
     * Applies this function to the given arguments.
     *
     * @param t the first function argument
     * @return the function result
     * @throws E Thrown when the function fails.
     */
    double applyAsDouble(T t) throws E;","0","-","-","-","-"
"7223","nop","/**
     * Returns the NOP singleton.
     *
     * @param <R> Return type.
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
   @SuppressWarnings(""unchecked"")
   static <R, E extends Throwable> FailableLongFunction<R, E> nop()","0","-","-","-","-"
"7224","apply","/**
     * Applies this function.
     *
     * @param input the input for the function
     * @return the result of the function
     * @throws E Thrown when the function fails.
     */
    R apply(long input) throws E;","0","-","-","-","-"
"7225","nop","/**
     * Returns the NOP singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableLongToDoubleFunction<E> nop()","0","-","-","-","-"
"7226","applyAsDouble","/**
     * Applies this function to the given argument.
     *
     * @param value the function argument
     * @return the function result
     * @throws E Thrown when the function fails.
     */
    double applyAsDouble(long value) throws E;","0","-","-","-","-"
"7227","accept","/**
     * Consumes a consumer and rethrows any exception as a","0","-","-","-","-"
"7228","accept","/**
     * Consumes a consumer and rethrows any exception as a","0","-","-","-","-"
"7229","accept","/**
     * Consumes a consumer and rethrows any exception as a","0","-","-","-","-"
"7230","accept","/**
     * Consumes a consumer and rethrows any exception as a","0","-","-","-","-"
"7231","accept","/**
     * Consumes a consumer and rethrows any exception as a","0","-","-","-","-"
"7232","apply","/**
     * Applies a function and rethrows any exception as a","0","-","-","-","-"
"7233","apply","/**
     * Applies a function and rethrows any exception as a","0","-","-","-","-"
"7234","applyAsDouble","/**
     * Applies a function and rethrows any exception as a","0","-","-","-","-"
"7235","asBiConsumer","/**
     * Converts the given","0","-","-","-","-"
"7236","asBiFunction","/**
     * Converts the given","0","-","-","-","-"
"7237","asBiPredicate","/**
     * Converts the given","0","-","-","-","-"
"7238","asCallable","/**
     * Converts the given","0","-","-","-","-"
"7239","asConsumer","/**
     * Converts the given","0","-","-","-","-"
"7240","asFunction","/**
     * Converts the given","0","-","-","-","-"
"7241","asPredicate","/**
     * Converts the given","0","-","-","-","-"
"7242","asRunnable","/**
     * Converts the given","0","-","-","-","-"
"7243","asSupplier","/**
     * Converts the given","0","-","-","-","-"
"7244","call","/**
     * Calls a callable and rethrows any exception as a","0","-","-","-","-"
"7245","get","/**
     * Invokes a supplier, and returns the result.
     *
     * @param supplier The supplier to invoke.
     * @param <T> The suppliers output type.
     * @param <E> The type of checked exception, which the supplier can throw.
     * @return The object, which has been created by the supplier
     */
    public static <T, E extends Throwable> T get(final FailableSupplier<T, E> supplier)","0","-","-","-","-"
"7246","getAsBoolean","/**
     * Invokes a boolean supplier, and returns the result.
     *
     * @param supplier The boolean supplier to invoke.
     * @param <E> The type of checked exception, which the supplier can throw.
     * @return The boolean, which has been created by the supplier
     */
    public static <E extends Throwable> boolean getAsBoolean(final FailableBooleanSupplier<E> supplier)","0","-","-","-","-"
"7247","getAsDouble","/**
     * Invokes a double supplier, and returns the result.
     *
     * @param supplier The double supplier to invoke.
     * @param <E> The type of checked exception, which the supplier can throw.
     * @return The double, which has been created by the supplier
     */
    public static <E extends Throwable> double getAsDouble(final FailableDoubleSupplier<E> supplier)","0","-","-","-","-"
"7248","getAsInt","/**
     * Invokes an int supplier, and returns the result.
     *
     * @param supplier The int supplier to invoke.
     * @param <E> The type of checked exception, which the supplier can throw.
     * @return The int, which has been created by the supplier
     */
    public static <E extends Throwable> int getAsInt(final FailableIntSupplier<E> supplier)","0","-","-","-","-"
"7249","getAsLong","/**
     * Invokes a long supplier, and returns the result.
     *
     * @param supplier The long supplier to invoke.
     * @param <E> The type of checked exception, which the supplier can throw.
     * @return The long, which has been created by the supplier
     */
    public static <E extends Throwable> long getAsLong(final FailableLongSupplier<E> supplier)","0","-","-","-","-"
"7250","getAsShort","/**
     * Invokes a short supplier, and returns the result.
     *
     * @param supplier The short supplier to invoke.
     * @param <E> The type of checked exception, which the supplier can throw.
     * @return The short, which has been created by the supplier
     */
    public static <E extends Throwable> short getAsShort(final FailableShortSupplier<E> supplier)","0","-","-","-","-"
"7251","rethrow","/**
     * Rethrows a","0","-","-","-","-"
"7252","run","/**
     * Runs a runnable and rethrows any exception as a","0","-","-","-","-"
"7253","run","private static <E extends Throwable> void run(final Object test, final FailableRunnable<E> runnable)","0","-","-","-","-"
"7254","stream","/**
     * Converts the given collection into a","0","-","-","-","-"
"7255","stream","/**
     * Converts the given stream into a","0","-","-","-","-"
"7256","test","/**
     * Tests a predicate and rethrows any exception as a","0","-","-","-","-"
"7257","test","/**
     * Tests a predicate and rethrows any exception as a","0","-","-","-","-"
"7258","tryWithResources","/**
     * A simple try-with-resources implementation, that can be used, if your objects do not implement the
     *","0","-","-","-","-"
"7259","tryWithResources","/**
     * A simple try-with-resources implementation, that can be used, if your objects do not implement the
     *","0","-","-","-","-"
"7260","Failable","private Failable()","0","-","-","-","-"
"7261","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> the type of the argument to the function
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, E extends Throwable> FailableToLongFunction<T, E> nop()","0","-","-","-","-"
"7262","applyAsLong","/**
     * Applies this function to the given arguments.
     *
     * @param t the first function argument
     * @return the function result
     * @throws E Thrown when the function fails.
     */
    long applyAsLong(T t) throws E;","0","-","-","-","-"
"7263","nop","/**
     * Returns the NOP singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableIntConsumer<E> nop()","0","-","-","-","-"
"7264","accept","/**
     * Accepts the given arguments.
     *
     * @param value the parameter for the consumable to accept
     * @throws E Thrown when the consumer fails.
     */
    void accept(int value) throws E;","0","-","-","-","-"
"7265","andThen","/**
     * Returns a composed","0","-","-","-","-"
"7266","nop","/**
     * Returns the NOP singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableIntToFloatFunction<E> nop()","0","-","-","-","-"
"7267","applyAsFloat","/**
     * Applies this function to the given argument.
     *
     * @param value the function argument
     * @return the function result
     * @throws E Thrown when the function fails.
     */
    float applyAsFloat(int value) throws E;","0","-","-","-","-"
"7268","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> the type of the argument to the function
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, E extends Throwable> FailableToIntFunction<T, E> nop()","0","-","-","-","-"
"7269","applyAsInt","/**
     * Applies this function to the given arguments.
     *
     * @param t the first function argument
     * @return the function result
     * @throws E Thrown when the function fails.
     */
    int applyAsInt(T t) throws E;","0","-","-","-","-"
"7270","nop","/**
     * Returns the NOP singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableDoubleToIntFunction<E> nop()","0","-","-","-","-"
"7271","applyAsInt","/**
     * Applies this function to the given argument.
     *
     * @param value the function argument
     * @return the function result
     * @throws E Thrown when the function fails.
     */
    int applyAsInt(double value) throws E;","0","-","-","-","-"
"7272","accept","/**
     * Performs the operation given the specified arguments.
     *
     * @param k the first input argument
     * @param v the second input argument
     * @param s the third input argument
     */
    void accept(T k, U v, V s);","0","-","-","-","-"
"7273","andThen","/**
     * Returns a composed","0","-","-","-","-"
"7274","getAsShort","/**
     * Supplies an int.
     *
     * @return a result
     * @throws E if the supplier fails
     */
    short getAsShort() throws E;","0","-","-","-","-"
"7275","accept","/**
     * Applies the given","0","-","-","-","-"
"7276","nop","/**
     * Gets the NOP Consumer singleton.
     *
     * @param <T> type type to consume.
     * @return the NOP Consumer singleton.
     */
    @SuppressWarnings(""unchecked"")
    public static <T> Consumer<T> nop()","0","-","-","-","-"
"7277","Consumers","private Consumers()","0","-","-","-","-"
"7278","nul","/**
     * Returns the singleton supplier that always returns null.
     * <p>
     * This supplier never throws an exception.
     * </p>
     *
     * @param <T> Supplied type.
     * @param <E> The kind of thrown exception or error.
     * @return The NUL singleton.
     * @since 3.14.0
     */
    @SuppressWarnings(""unchecked"")
    static <T, E extends Exception> FailableSupplier<T, E> nul()","0","-","-","-","-"
"7279","get","/**
     * Supplies an object
     *
     * @return a result
     * @throws E if the supplier fails
     */
    T get() throws E;","0","-","-","-","-"
"7280","nop","/**
     * Returns the NOP singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <E extends Throwable> FailableDoubleConsumer<E> nop()","0","-","-","-","-"
"7281","accept","/**
     * Accepts the given arguments.
     *
     * @param value the parameter for the consumable to accept
     * @throws E Thrown when the consumer fails.
     */
    void accept(double value) throws E;","0","-","-","-","-"
"7282","andThen","/**
     * Returns a composed","0","-","-","-","-"
"7283","falsePredicate","/**
     * Returns the FALSE singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
   @SuppressWarnings(""unchecked"")
   static <E extends Throwable> FailableDoublePredicate<E> falsePredicate()","0","-","-","-","-"
"7284","truePredicate","/**
     * Returns the TRUE singleton.
     *
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
   @SuppressWarnings(""unchecked"")
   static <E extends Throwable> FailableDoublePredicate<E> truePredicate()","0","-","-","-","-"
"7285","and","/**
     * Returns a composed","0","-","-","-","-"
"7286","negate","/**
     * Returns a predicate that negates this predicate.
     *
     * @return a predicate that negates this predicate.
     */
    default FailableDoublePredicate<E> negate()","0","-","-","-","-"
"7287","or","/**
     * Returns a composed","0","-","-","-","-"
"7288","test","/**
     * Tests the predicate.
     *
     * @param value the parameter for the predicate to accept.
     * @return","0","-","-","-","-"
"7289","nop","/**
     * Returns the NOP singleton.
     *
     * @param <T> the type of the argument to the function
     * @param <E> The kind of thrown exception or error.
     * @return The NOP singleton.
     */
    @SuppressWarnings(""unchecked"")
    static <T, E extends Throwable> FailableToBooleanFunction<T, E> nop()","0","-","-","-","-"
"7290","applyAsBoolean","/**
     * Applies this function to the given arguments.
     *
     * @param t the first function argument
     * @return the function result
     * @throws E Thrown when the function fails.
     */
    boolean applyAsBoolean(T t) throws E;","0","-","-","-","-"
"7291","of","/**
     * Creates a closed range with the specified minimum and maximum values (both inclusive).
     *
     * <p>
     * The range uses the natural ordering of the elements to determine where values lie in the range.
     * </p>
     *
     * <p>
     * The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.
     * </p>
     *
     * @param fromInclusive the first value that defines the edge of the range, inclusive.
     * @param toInclusive the second value that defines the edge of the range, inclusive.
     * @return the range object, not null.
     */
    public static LongRange of(final long fromInclusive, final long toInclusive)","0","-","-","-","-"
"7292","of","/**
     * Creates a closed range with the specified minimum and maximum values (both inclusive).
     *
     * <p>
     * The range uses the natural ordering of the elements to determine where values lie in the range.
     * </p>
     *
     * <p>
     * The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.
     * </p>
     *
     * @param fromInclusive the first value that defines the edge of the range, inclusive.
     * @param toInclusive the second value that defines the edge of the range, inclusive.
     * @return the range object, not null.
     * @throws IllegalArgumentException if either element is null.
     */
    public static LongRange of(final Long fromInclusive, final Long toInclusive)","0","-","-","-","-"
"7293","LongRange","/**
     * Creates a new instance.
     *
     * @param number1 the first element, not null
     * @param number2 the second element, not null
     * @throws NullPointerException when element1 is null.
     * @throws NullPointerException when element2 is null.
     */
    private LongRange(final Long number1, final Long number2)","0","-","-","-","-"
"7294","toLongStream","/**
     * Returns a sequential ordered","0","-","-","-","-"
"7295","Builder","/**
         * Constructs a new instance.
         */
        Builder()","0","-","-","-","-"
"7296","get","/**
         * Gets a new instance of","0","-","-","-","-"
"7297","setDelimiter","/**
         * Sets the delimiter that separates each element.
         *
         * @param delimiter The delimiter that separates each element.
         * @return this instance.
         */
        public Builder<T> setDelimiter(final CharSequence delimiter)","0","-","-","-","-"
"7298","setElementAppender","/**
         * Sets the consumer used to render each element of type","0","-","-","-","-"
"7299","setPrefix","/**
         * Sets the sequence of characters to be used at the beginning.
         *
         * @param prefix The sequence of characters to be used at the beginning.
         * @return this instance.
         */
        public Builder<T> setPrefix(final CharSequence prefix)","0","-","-","-","-"
"7300","setSuffix","/**
         * Sets the sequence of characters to be used at the end.
         *
         * @param suffix The sequence of characters to be used at the end.
         * @return this instance.
         */
        public Builder<T> setSuffix(final CharSequence suffix)","0","-","-","-","-"
"7301","builder","/**
     * Creates a new builder.
     *
     * @param <T> The type of elements.
     * @return a new builder.
     */
    public static <T> Builder<T> builder()","0","-","-","-","-"
"7302","joinA","/** Could be public in the future, in some form. */
    @SafeVarargs
    static <A extends Appendable, T> A joinA(final A appendable, final CharSequence prefix, final CharSequence suffix, final CharSequence delimiter,
            final FailableBiConsumer<Appendable, T, IOException> appender, final T... elements) throws IOException","0","-","-","-","-"
"7303","joinArray","private static <A extends Appendable, T> A joinArray(final A appendable, final CharSequence prefix, final CharSequence suffix, final CharSequence delimiter,
            final FailableBiConsumer<Appendable, T, IOException> appender, final T[] elements) throws IOException","0","-","-","-","-"
"7304","joinI","/** Could be public in the future, in some form. */
    static <T> StringBuilder joinI(final StringBuilder stringBuilder, final CharSequence prefix, final CharSequence suffix, final CharSequence delimiter,
            final FailableBiConsumer<Appendable, T, IOException> appender, final Iterable<T> elements)","0","-","-","-","-"
"7305","joinIterable","private static <A extends Appendable, T> A joinIterable(final A appendable, final CharSequence prefix, final CharSequence suffix,
            final CharSequence delimiter, final FailableBiConsumer<Appendable, T, IOException> appender, final Iterable<T> elements) throws IOException","0","-","-","-","-"
"7306","joinSB","/** Could be public in the future, in some form. */
    @SafeVarargs
    static <T> StringBuilder joinSB(final StringBuilder stringBuilder, final CharSequence prefix, final CharSequence suffix, final CharSequence delimiter,
            final FailableBiConsumer<Appendable, T, IOException> appender, final T... elements)","0","-","-","-","-"
"7307","nonNull","private static CharSequence nonNull(final CharSequence value)","0","-","-","-","-"
"7308","AppendableJoiner","/**
     * Constructs a new instance.
     */
    private AppendableJoiner(final CharSequence prefix, final CharSequence suffix, final CharSequence delimiter,
            final FailableBiConsumer<Appendable, T, IOException> appender)","0","-","-","-","-"
"7309","join","/**
     * Joins stringified objects from the given Iterable into a StringBuilder.
     *
     * @param stringBuilder The target.
     * @param elements      The source.
     * @return The given StringBuilder.
     */
    public StringBuilder join(final StringBuilder stringBuilder, final Iterable<T> elements)","0","-","-","-","-"
"7310","join","/**
     * Joins stringified objects from the given array into a StringBuilder.
     *
     * @param stringBuilder The target.
     * @param elements      The source.
     * @return the given target StringBuilder.
     */
    public StringBuilder join(final StringBuilder stringBuilder, @SuppressWarnings(""unchecked"") final T... elements)","0","-","-","-","-"
"7311","joinA","/**
     * Joins stringified objects from the given Iterable into an Appendable.
     *
     * @param <A>        the Appendable type.
     * @param appendable The target.
     * @param elements   The source.
     * @return The given StringBuilder.
     * @throws IOException If an I/O error occurs
     */
    public <A extends Appendable> A joinA(final A appendable, final Iterable<T> elements) throws IOException","0","-","-","-","-"
"7312","joinA","/**
     * Joins stringified objects from the given array into an Appendable.
     *
     * @param <A>        the Appendable type.
     * @param appendable The target.
     * @param elements   The source.
     * @return The given StringBuilder.
     * @throws IOException If an I/O error occurs
     */
    public <A extends Appendable> A joinA(final A appendable, @SuppressWarnings(""unchecked"") final T... elements) throws IOException","0","-","-","-","-"
"7313","addAndCheck","/**
     * Adds two integers, checking for overflow.
     *
     * @param x an addend
     * @param y an addend
     * @return the sum","0","-","-","-","-"
"7314","getFraction","/**
     * Creates a","0","-","-","-","-"
"7315","getFraction","/**
     * Creates a","0","-","-","-","-"
"7316","getFraction","/**
     * Creates a","0","-","-","-","-"
"7317","getFraction","/**
     * Creates a Fraction from a","0","-","-","-","-"
"7318","getReducedFraction","/**
     * Creates a reduced","0","-","-","-","-"
"7319","greatestCommonDivisor","/**
     * Gets the greatest common divisor of the absolute value of
     * two numbers, using the ""binary gcd"" method which avoids
     * division and modulo operations.  See Knuth 4.5.2 algorithm B.
     * This algorithm is due to Josef Stein (1961).
     *
     * @param u  a non-zero number
     * @param v  a non-zero number
     * @return the greatest common divisor, never zero
     */
    private static int greatestCommonDivisor(int u, int v)","0","-","-","-","-"
"7320","mulAndCheck","/**
     * Multiplies two integers, checking for overflow.
     *
     * @param x a factor
     * @param y a factor
     * @return the product","0","-","-","-","-"
"7321","mulPosAndCheck","/**
     *  Multiplies two non-negative integers, checking for overflow.
     *
     * @param x a non-negative factor
     * @param y a non-negative factor
     * @return the product","0","-","-","-","-"
"7322","subAndCheck","/**
     * Subtracts two integers, checking for overflow.
     *
     * @param x the minuend
     * @param y the subtrahend
     * @return the difference","0","-","-","-","-"
"7323","Fraction","/**
     * Constructs a","0","-","-","-","-"
"7324","abs","/**
     * Gets a fraction that is the positive equivalent of this one.
     * <p>
     * More precisely:","0","-","-","-","-"
"7325","add","/**
     * Adds the value of this fraction to another, returning the result in reduced form.
     * The algorithm follows Knuth, 4.5.1.
     *
     * @param fraction  the fraction to add, must not be","0","-","-","-","-"
"7326","addSub","/**
     * Implements add and subtract using the algorithm described in <a href=""https://www-cs-faculty.stanford.edu/~knuth/taocp.html"">
     * The Art of Computer Programming (TAOCP)</a> 4.5.1 by Donald Knuth.
     *
     * @param fraction the fraction to subtract, must not be","0","-","-","-","-"
"7327","compareTo","/**
     * Compares this object to another based on size.
     * <p>
     * Note: this class has a natural ordering that is inconsistent with equals, because, for example, equals treats 1/2 and 2/4 as different, whereas compareTo
     * treats them as equal.
     * </p>
     *
     * @param other the object to compare to
     * @return -1 if this is less, 0 if equal, +1 if greater
     * @throws ClassCastException   if the object is not a","0","-","-","-","-"
"7328","divideBy","/**
     * Divide the value of this fraction by another.
     *
     * @param fraction  the fraction to divide by, must not be","0","-","-","-","-"
"7329","doubleValue","/**
     * Gets the fraction as a","0","-","-","-","-"
"7330","equals","/**
     * Compares this fraction to another object to test if they are equal.
     * <p>
     * To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.
     * </p>
     *
     * @param obj the reference object with which to compare
     * @return","0","-","-","-","-"
"7331","floatValue","/**
     * Gets the fraction as a","0","-","-","-","-"
"7332","getDenominator","/**
     * Gets the denominator part of the fraction.
     *
     * @return the denominator fraction part
     */
    public int getDenominator()","0","-","-","-","-"
"7333","getNumerator","/**
     * Gets the numerator part of the fraction.
     * <p>
     * This method may return a value greater than the denominator, an improper fraction, such as the seven in 7/4.
     * </p>
     *
     * @return the numerator fraction part
     */
    public int getNumerator()","0","-","-","-","-"
"7334","getProperNumerator","/**
     * Gets the proper numerator, always positive.
     * <p>
     * An improper fraction 7/4 can be resolved into a proper one, 1 3/4. This method returns the 3 from the proper fraction.
     * </p>
     *
     * <p>
     * If the fraction is negative such as -7/4, it can be resolved into -1 3/4, so this method returns the positive proper numerator, 3.
     * </p>
     *
     * @return the numerator fraction part of a proper fraction, always positive
     */
    public int getProperNumerator()","0","-","-","-","-"
"7335","getProperWhole","/**
     * Gets the proper whole part of the fraction.
     * <p>
     * An improper fraction 7/4 can be resolved into a proper one, 1 3/4. This method returns the 1 from the proper fraction.
     * </p>
     *
     * <p>
     * If the fraction is negative such as -7/4, it can be resolved into -1 3/4, so this method returns the positive whole part -1.
     * </p>
     *
     * @return the whole fraction part of a proper fraction, that includes the sign
     */
    public int getProperWhole()","0","-","-","-","-"
"7336","hashCode","/**
     * Gets a hashCode for the fraction.
     *
     * @return a hash code value for this object
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"7337","intValue","/**
     * Gets the fraction as an","0","-","-","-","-"
"7338","invert","/**
     * Gets a fraction that is the inverse (1/fraction) of this one.
     * <p>
     * The returned fraction is not reduced.
     * </p>
     *
     * @return a new fraction instance with the numerator and denominator inverted.
     * @throws ArithmeticException if the fraction represents zero.
     */
    public Fraction invert()","0","-","-","-","-"
"7339","longValue","/**
     * Gets the fraction as a","0","-","-","-","-"
"7340","multiplyBy","/**
     * Multiplies the value of this fraction by another, returning the
     * result in reduced form.
     *
     * @param fraction  the fraction to multiply by, must not be","0","-","-","-","-"
"7341","negate","/**
     * Gets a fraction that is the negative (-fraction) of this one.
     * <p>
     * The returned fraction is not reduced.
     * </p>
     *
     * @return a new fraction instance with the opposite signed numerator
     */
    public Fraction negate()","0","-","-","-","-"
"7342","pow","/**
     * Gets a fraction that is raised to the passed in power.
     * <p>
     * The returned fraction is in reduced form.
     * </p>
     *
     * @param power the power to raise the fraction to
     * @return","0","-","-","-","-"
"7343","reduce","/**
     * Reduce the fraction to the smallest values for the numerator and denominator, returning the result.
     * <p>
     * For example, if this fraction represents 2/4, then the result will be 1/2.
     * </p>
     *
     * @return a new reduced fraction instance, or this if no simplification possible
     */
    public Fraction reduce()","0","-","-","-","-"
"7344","subtract","/**
     * Subtracts the value of another fraction from the value of this one,
     * returning the result in reduced form.
     *
     * @param fraction  the fraction to subtract, must not be","0","-","-","-","-"
"7345","toProperString","/**
     * Gets the fraction as a proper","0","-","-","-","-"
"7346","toString","/**
     * Gets the fraction as a","0","-","-","-","-"
"7347","compare","/**
     * Compares two","0","-","-","-","-"
"7348","compare","/**
     * Compares two","0","-","-","-","-"
"7349","compare","/**
     * Compares to","0","-","-","-","-"
"7350","compare","/**
     * Compares to","0","-","-","-","-"
"7351","createBigDecimal","/**
     * Creates a","0","-","-","-","-"
"7352","createBigInteger","/**
     * Creates a","0","-","-","-","-"
"7353","createDouble","/**
     * Creates a","0","-","-","-","-"
"7354","createFloat","/**
     * Creates a","0","-","-","-","-"
"7355","createInteger","/**
     * Creates an","0","-","-","-","-"
"7356","createLong","/**
     * Creates a","0","-","-","-","-"
"7357","createNumber","/**
     * Creates a","0","-","-","-","-"
"7358","getMantissa","/**
     * Utility method for","0","-","-","-","-"
"7359","isAllZeros","/**
     * Utility method for","0","-","-","-","-"
"7360","isCreatable","/**
     * Checks whether the String is a valid Java number.
     *
     * <p>Valid numbers include hexadecimal marked with the","0","-","-","-","-"
"7361","isDigits","/**
     * Checks whether the","0","-","-","-","-"
"7362","isNumber","/**
     * Checks whether the String is a valid Java number.
     *
     * <p>Valid numbers include hexadecimal marked with the","0","-","-","-","-"
"7363","isParsable","/**
     * Checks whether the given String is a parsable number.
     *
     * <p>Parsable numbers include those Strings understood by","0","-","-","-","-"
"7364","isZero","/**
     * Utility method for","0","-","-","-","-"
"7365","max","/**
     * Returns the maximum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the maximum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7366","max","/**
     * Gets the maximum of three","0","-","-","-","-"
"7367","max","/**
     * Returns the maximum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the maximum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7368","max","/**
     * Gets the maximum of three","0","-","-","-","-"
"7369","max","/**
     * Returns the maximum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the maximum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7370","max","/**
     * Gets the maximum of three","0","-","-","-","-"
"7371","max","/**
     * Returns the maximum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the maximum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7372","max","/**
     * Gets the maximum of three","0","-","-","-","-"
"7373","max","/**
     * Returns the maximum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the maximum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7374","max","/**
     * Gets the maximum of three","0","-","-","-","-"
"7375","max","/**
     * Returns the maximum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the maximum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7376","max","/**
     * Gets the maximum of three","0","-","-","-","-"
"7377","min","/**
     * Returns the minimum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the minimum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7378","min","/**
     * Gets the minimum of three","0","-","-","-","-"
"7379","min","/**
     * Returns the minimum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the minimum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7380","min","/**
     * Gets the minimum of three","0","-","-","-","-"
"7381","min","/**
     * Returns the minimum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the minimum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7382","min","/**
     * Gets the minimum of three","0","-","-","-","-"
"7383","min","/**
     * Returns the minimum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the minimum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7384","min","/**
     * Gets the minimum of three","0","-","-","-","-"
"7385","min","/**
     * Returns the minimum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the minimum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7386","min","/**
     * Gets the minimum of three","0","-","-","-","-"
"7387","min","/**
     * Returns the minimum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the minimum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7388","min","/**
     * Gets the minimum of three","0","-","-","-","-"
"7389","toByte","/**
     * Converts a","0","-","-","-","-"
"7390","toByte","/**
     * Converts a","0","-","-","-","-"
"7391","toDouble","/**
     * Converts a","0","-","-","-","-"
"7392","toDouble","/**
     * Converts a","0","-","-","-","-"
"7393","toDouble","/**
     * Converts a","0","-","-","-","-"
"7394","toDouble","/**
     * Converts a","0","-","-","-","-"
"7395","toFloat","/**
     * Converts a","0","-","-","-","-"
"7396","toFloat","/**
     * Converts a","0","-","-","-","-"
"7397","toInt","/**
     * Converts a","0","-","-","-","-"
"7398","toInt","/**
     * Converts a","0","-","-","-","-"
"7399","toLong","/**
     * Converts a","0","-","-","-","-"
"7400","toLong","/**
     * Converts a","0","-","-","-","-"
"7401","toScaledBigDecimal","/**
     * Converts a","0","-","-","-","-"
"7402","toScaledBigDecimal","/**
     * Converts a","0","-","-","-","-"
"7403","toScaledBigDecimal","/**
     * Converts a","0","-","-","-","-"
"7404","toScaledBigDecimal","/**
     * Converts a","0","-","-","-","-"
"7405","toScaledBigDecimal","/**
     * Converts a","0","-","-","-","-"
"7406","toScaledBigDecimal","/**
     * Converts a","0","-","-","-","-"
"7407","toScaledBigDecimal","/**
     * Converts a","0","-","-","-","-"
"7408","toScaledBigDecimal","/**
     * Converts a","0","-","-","-","-"
"7409","toShort","/**
     * Converts a","0","-","-","-","-"
"7410","toShort","/**
     * Converts a","0","-","-","-","-"
"7411","validateArray","/**
     * Checks if the specified array is neither null nor empty.
     *
     * @param array  the array to check
     * @throws IllegalArgumentException if","0","-","-","-","-"
"7412","withDecimalsParsing","private static boolean withDecimalsParsing(final String str, final int beginIdx)","0","-","-","-","-"
"7413","NumberUtils","/**
     *","0","-","-","-","-"
"7414","max","/**
     * Returns the maximum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the minimum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7415","max","/**
     * Gets the maximum of two","0","-","-","-","-"
"7416","max","/**
     * Gets the maximum of three","0","-","-","-","-"
"7417","max","/**
     * Returns the maximum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the minimum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7418","max","/**
     * Gets the maximum of two","0","-","-","-","-"
"7419","max","/**
     * Gets the maximum of three","0","-","-","-","-"
"7420","min","/**
     * Returns the minimum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the minimum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7421","min","/**
     * Gets the minimum of two","0","-","-","-","-"
"7422","min","/**
     * Gets the minimum of three","0","-","-","-","-"
"7423","min","/**
     * Returns the minimum value in an array.
     *
     * @param array  an array, must not be null or empty
     * @return the minimum value in the array
     * @throws NullPointerException if","0","-","-","-","-"
"7424","min","/**
     * Gets the minimum of two","0","-","-","-","-"
"7425","min","/**
     * Gets the minimum of three","0","-","-","-","-"
"7426","IEEE754rUtils","/**
     * Make private in 4.0.
     *
     * @deprecated TODO Make private in 4.0.
     */
    @Deprecated
    public IEEE754rUtils()","0","-","-","-","-"
"7427","CaseInsensitiveTextStrategy","/**
         * Constructs a Strategy that parses a Text field
         *
         * @param field            The Calendar field
         * @param definingCalendar The Calendar to use
         * @param locale           The Locale to use
         */
        CaseInsensitiveTextStrategy(final int field, final Calendar definingCalendar, final Locale locale)","0","-","-","-","-"
"7428","setCalendar","/**
         *","0","-","-","-","-"
"7429","toString","/**
         * Converts this instance to a handy debug string.
         *
         * @since 3.12.0
         */
        @Override
        public String toString()","0","-","-","-","-"
"7430","CopyQuotedStrategy","/**
         * Constructs a Strategy that ensures the formatField has literal text
         *
         * @param formatField The literal text to match
         */
        CopyQuotedStrategy(final String formatField)","0","-","-","-","-"
"7431","isNumber","/**
         *","0","-","-","-","-"
"7432","parse","@Override
        boolean parse(final FastDateParser parser, final Calendar calendar, final String source, final ParsePosition pos, final int maxWidth)","0","-","-","-","-"
"7433","toString","/**
         * Converts this instance to a handy debug string.
         *
         * @since 3.12.0
         */
        @Override
        public String toString()","0","-","-","-","-"
"7434","getStrategy","/**
         * Factory method for ISO8601TimeZoneStrategies.
         *
         * @param tokenLen a token indicating the length of the TimeZone String to be formatted.
         * @return a ISO8601TimeZoneStrategy that can format TimeZone String of length","0","-","-","-","-"
"7435","ISO8601TimeZoneStrategy","/**
         * Constructs a Strategy that parses a TimeZone
         *
         * @param pattern The Pattern
         */
        ISO8601TimeZoneStrategy(final String pattern)","0","-","-","-","-"
"7436","setCalendar","/**
         *","0","-","-","-","-"
"7437","NumberStrategy","/**
         * Constructs a Strategy that parses a Number field
         *
         * @param field The Calendar field
         */
        NumberStrategy(final int field)","0","-","-","-","-"
"7438","isNumber","/**
         *","0","-","-","-","-"
"7439","modify","/**
         * Make any modifications to parsed integer
         *
         * @param parser The parser
         * @param iValue The parsed integer
         * @return The modified value
         */
        int modify(final FastDateParser parser, final int iValue)","0","-","-","-","-"
"7440","parse","@Override
        boolean parse(final FastDateParser parser, final Calendar calendar, final String source, final ParsePosition pos, final int maxWidth)","0","-","-","-","-"
"7441","toString","/**
         * Converts this instance to a handy debug string.
         *
         * @since 3.12.0
         */
        @Override
        public String toString()","0","-","-","-","-"
"7442","createPattern","void createPattern(final String regex)","0","-","-","-","-"
"7443","createPattern","void createPattern(final StringBuilder regex)","0","-","-","-","-"
"7444","isNumber","/**
         * Is this field a number? The default implementation returns false.
         *
         * @return true, if field is a number
         */
        @Override
        boolean isNumber()","0","-","-","-","-"
"7445","parse","@Override
        boolean parse(final FastDateParser parser, final Calendar calendar, final String source, final ParsePosition pos, final int maxWidth)","0","-","-","-","-"
"7446","setCalendar","abstract void setCalendar(FastDateParser parser, Calendar calendar, String value);","0","-","-","-","-"
"7447","toString","/**
         * Converts this instance to a handy debug string.
         *
         * @since 3.12.0
         */
        @Override
        public String toString()","0","-","-","-","-"
"7448","isNumber","/**
         * Is this field a number? The default implementation returns false.
         *
         * @return true, if field is a number
         */
        boolean isNumber()","0","-","-","-","-"
"7449","parse","abstract boolean parse(FastDateParser parser, Calendar calendar, String source, ParsePosition pos, int maxWidth);","0","-","-","-","-"
"7450","StrategyAndWidth","StrategyAndWidth(final Strategy strategy, final int width)","0","-","-","-","-"
"7451","getMaxWidth","int getMaxWidth(final ListIterator<StrategyAndWidth> lt)","0","-","-","-","-"
"7452","toString","@Override
        public String toString()","0","-","-","-","-"
"7453","StrategyParser","StrategyParser(final Calendar definingCalendar)","0","-","-","-","-"
"7454","getNextStrategy","StrategyAndWidth getNextStrategy()","0","-","-","-","-"
"7455","letterPattern","private StrategyAndWidth letterPattern(final char c)","0","-","-","-","-"
"7456","literal","private StrategyAndWidth literal()","0","-","-","-","-"
"7457","TzInfo","TzInfo(final TimeZone tz, final boolean useDst)","0","-","-","-","-"
"7458","toString","@Override
            public String toString()","0","-","-","-","-"
"7459","TimeZoneStrategy","/**
         * Constructs a Strategy that parses a TimeZone
         *
         * @param locale The Locale
         */
        TimeZoneStrategy(final Locale locale)","0","-","-","-","-"
"7460","setCalendar","/**
         *","0","-","-","-","-"
"7461","toString","/**
         * Converts this instance to a handy debug string.
         *
         * @since 3.12.0
         */
        @Override
        public String toString()","0","-","-","-","-"
"7462","modify","/**
         *","0","-","-","-","-"
"7463","modify","@Override
        int modify(final FastDateParser parser, final int iValue)","0","-","-","-","-"
"7464","modify","@Override
        int modify(final FastDateParser parser, final int iValue)","0","-","-","-","-"
"7465","modify","@Override
        int modify(final FastDateParser parser, final int iValue)","0","-","-","-","-"
"7466","modify","@Override
        int modify(final FastDateParser parser, final int iValue)","0","-","-","-","-"
"7467","appendDisplayNames","/**
     * Gets the short and long values displayed for a field
     *
     * @param calendar The calendar to obtain the short and long values
     * @param locale   The locale of display names
     * @param field    The field of interest
     * @param regex    The regular expression to build
     * @return The map of string display names to field values
     */
    private static Map<String, Integer> appendDisplayNames(final Calendar calendar, final Locale locale, final int field, final StringBuilder regex)","0","-","-","-","-"
"7468","getCache","/**
     * Gets a cache of Strategies for a particular field
     *
     * @param field The Calendar field
     * @return a cache of Locale to Strategy
     */
    private static ConcurrentMap<Locale, Strategy> getCache(final int field)","0","-","-","-","-"
"7469","isFormatLetter","private static boolean isFormatLetter(final char c)","0","-","-","-","-"
"7470","simpleQuote","private static StringBuilder simpleQuote(final StringBuilder sb, final String value)","0","-","-","-","-"
"7471","FastDateParser","/**
     * Constructs a new FastDateParser.
     *
     * Use","0","-","-","-","-"
"7472","FastDateParser","/**
     * Constructs a new FastDateParser.
     *
     * @param pattern      non-null","0","-","-","-","-"
"7473","adjustYear","/**
     * Adjusts dates to be within appropriate century
     *
     * @param twoDigitYear The year to adjust
     * @return A value between centuryStart(inclusive) to centuryStart+100(exclusive)
     */
    private int adjustYear(final int twoDigitYear)","0","-","-","-","-"
"7474","equals","/**
     * Compares another object for equality with this object.
     *
     * @param obj the object to compare to
     * @return","0","-","-","-","-"
"7475","getLocale","@Override
    public Locale getLocale()","0","-","-","-","-"
"7476","getLocaleSpecificStrategy","/**
     * Constructs a Strategy that parses a Text field
     *
     * @param field            The Calendar field
     * @param definingCalendar The calendar to obtain the short and long values
     * @return a TextStrategy for the field and Locale
     */
    private Strategy getLocaleSpecificStrategy(final int field, final Calendar definingCalendar)","0","-","-","-","-"
"7477","getPattern","@Override
    public String getPattern()","0","-","-","-","-"
"7478","getStrategy","/**
     * Gets a Strategy given a field from a SimpleDateFormat pattern
     *
     * @param f                A sub-sequence of the SimpleDateFormat pattern
     * @param width            formatting width
     * @param definingCalendar The calendar to obtain the short and long values
     * @return The Strategy that will handle parsing for the field
     */
    private Strategy getStrategy(final char f, final int width, final Calendar definingCalendar)","0","-","-","-","-"
"7479","getTimeZone","@Override
    public TimeZone getTimeZone()","0","-","-","-","-"
"7480","hashCode","/**
     * Returns a hash code compatible with equals.
     *
     * @return a hash code compatible with equals
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"7481","init","/**
     * Initializes derived fields from defining fields. This is called from constructor and from readObject (de-serialization)
     *
     * @param definingCalendar the","0","-","-","-","-"
"7482","parse","@Override
    public Date parse(final String source) throws ParseException","0","-","-","-","-"
"7483","parse","/**
     * This implementation updates the ParsePosition if the parse succeeds. However, it sets the error index to the position before the failed field unlike the
     * method","0","-","-","-","-"
"7484","parse","/**
     * Parses a formatted date string according to the format. Updates the Calendar with parsed fields. Upon success, the ParsePosition index is updated to
     * indicate how much of the source text was consumed. Not all source text needs to be consumed. Upon parse failure, ParsePosition error index is updated to
     * the offset of the source text which does not match the supplied format.
     *
     * @param source   The text to parse.
     * @param pos      On input, the position in the source to start parsing, on output, updated position.
     * @param calendar The calendar into which to set parsed fields.
     * @return true, if source has been parsed (pos parsePosition is updated); otherwise false (and pos errorIndex is updated)
     * @throws IllegalArgumentException when Calendar has been set to be not lenient, and a parsed field is out of range.
     */
    @Override
    public boolean parse(final String source, final ParsePosition pos, final Calendar calendar)","0","-","-","-","-"
"7485","parseObject","@Override
    public Object parseObject(final String source) throws ParseException","0","-","-","-","-"
"7486","parseObject","@Override
    public Object parseObject(final String source, final ParsePosition pos)","0","-","-","-","-"
"7487","readObject","/**
     * Creates the object after serialization. This implementation reinitializes the transient properties.
     *
     * @param in ObjectInputStream from which the object is being deserialized.
     * @throws IOException            if there is an IO issue.
     * @throws ClassNotFoundException if a class cannot be found.
     */
    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException","0","-","-","-","-"
"7488","toString","/**
     * Gets a string version of this formatter.
     *
     * @return a debugging string
     */
    @Override
    public String toString()","0","-","-","-","-"
"7489","toStringAll","/**
     * Converts all state of this instance to a String handy for debugging.
     *
     * @return a string.
     * @since 3.12.0
     */
    public String toStringAll()","0","-","-","-","-"
"7490","createInstance","@Override
        protected FastDateFormat createInstance(final String pattern, final TimeZone timeZone, final Locale locale)","0","-","-","-","-"
"7491","getDateInstance","/**
     * Gets a date formatter instance using the specified style in the
     * default time zone and locale.
     *
     * @param style  date style: FULL, LONG, MEDIUM, or SHORT
     * @return a localized standard date formatter
     * @throws IllegalArgumentException if the Locale has no date
     *  pattern defined
     * @since 2.1
     */
    public static FastDateFormat getDateInstance(final int style)","0","-","-","-","-"
"7492","getDateInstance","/**
     * Gets a date formatter instance using the specified style and
     * locale in the default time zone.
     *
     * @param style  date style: FULL, LONG, MEDIUM, or SHORT
     * @param locale  optional locale, overrides system locale
     * @return a localized standard date formatter
     * @throws IllegalArgumentException if the Locale has no date
     *  pattern defined
     * @since 2.1
     */
    public static FastDateFormat getDateInstance(final int style, final Locale locale)","0","-","-","-","-"
"7493","getDateInstance","/**
     * Gets a date formatter instance using the specified style and
     * time zone in the default locale.
     *
     * @param style  date style: FULL, LONG, MEDIUM, or SHORT
     * @param timeZone  optional time zone, overrides time zone of
     *  formatted date
     * @return a localized standard date formatter
     * @throws IllegalArgumentException if the Locale has no date
     *  pattern defined
     * @since 2.1
     */
    public static FastDateFormat getDateInstance(final int style, final TimeZone timeZone)","0","-","-","-","-"
"7494","getDateInstance","/**
     * Gets a date formatter instance using the specified style, time
     * zone and locale.
     *
     * @param style  date style: FULL, LONG, MEDIUM, or SHORT
     * @param timeZone  optional time zone, overrides time zone of
     *  formatted date
     * @param locale  optional locale, overrides system locale
     * @return a localized standard date formatter
     * @throws IllegalArgumentException if the Locale has no date
     *  pattern defined
     */
    public static FastDateFormat getDateInstance(final int style, final TimeZone timeZone, final Locale locale)","0","-","-","-","-"
"7495","getDateTimeInstance","/**
     * Gets a date/time formatter instance using the specified style
     * in the default time zone and locale.
     *
     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT
     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT
     * @return a localized standard date/time formatter
     * @throws IllegalArgumentException if the Locale has no date/time
     *  pattern defined
     * @since 2.1
     */
    public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle)","0","-","-","-","-"
"7496","getDateTimeInstance","/**
     * Gets a date/time formatter instance using the specified style and
     * locale in the default time zone.
     *
     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT
     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT
     * @param locale  optional locale, overrides system locale
     * @return a localized standard date/time formatter
     * @throws IllegalArgumentException if the Locale has no date/time
     *  pattern defined
     * @since 2.1
     */
    public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle, final Locale locale)","0","-","-","-","-"
"7497","getDateTimeInstance","/**
     * Gets a date/time formatter instance using the specified style and
     * time zone in the default locale.
     *
     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT
     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT
     * @param timeZone  optional time zone, overrides time zone of
     *  formatted date
     * @return a localized standard date/time formatter
     * @throws IllegalArgumentException if the Locale has no date/time
     *  pattern defined
     * @since 2.1
     */
    public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle, final TimeZone timeZone)","0","-","-","-","-"
"7498","getDateTimeInstance","/**
     * Gets a date/time formatter instance using the specified style,
     * time zone and locale.
     *
     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT
     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT
     * @param timeZone  optional time zone, overrides time zone of
     *  formatted date
     * @param locale  optional locale, overrides system locale
     * @return a localized standard date/time formatter
     * @throws IllegalArgumentException if the Locale has no date/time
     *  pattern defined
     */
    public static FastDateFormat getDateTimeInstance(
            final int dateStyle, final int timeStyle, final TimeZone timeZone, final Locale locale)","0","-","-","-","-"
"7499","getInstance","/**
     * Gets a formatter instance using the default pattern in the
     * default locale.
     *
     * @return a date/time formatter
     */
    public static FastDateFormat getInstance()","0","-","-","-","-"
"7500","getInstance","/**
     * Gets a formatter instance using the specified pattern in the
     * default locale.
     *
     * @param pattern","0","-","-","-","-"
"7501","getInstance","/**
     * Gets a formatter instance using the specified pattern and
     * locale.
     *
     * @param pattern","0","-","-","-","-"
"7502","getInstance","/**
     * Gets a formatter instance using the specified pattern and
     * time zone.
     *
     * @param pattern","0","-","-","-","-"
"7503","getInstance","/**
     * Gets a formatter instance using the specified pattern, time zone
     * and locale.
     *
     * @param pattern","0","-","-","-","-"
"7504","getTimeInstance","/**
     * Gets a time formatter instance using the specified style in the
     * default time zone and locale.
     *
     * @param style  time style: FULL, LONG, MEDIUM, or SHORT
     * @return a localized standard time formatter
     * @throws IllegalArgumentException if the Locale has no time
     *  pattern defined
     * @since 2.1
     */
    public static FastDateFormat getTimeInstance(final int style)","0","-","-","-","-"
"7505","getTimeInstance","/**
     * Gets a time formatter instance using the specified style and
     * locale in the default time zone.
     *
     * @param style  time style: FULL, LONG, MEDIUM, or SHORT
     * @param locale  optional locale, overrides system locale
     * @return a localized standard time formatter
     * @throws IllegalArgumentException if the Locale has no time
     *  pattern defined
     * @since 2.1
     */
    public static FastDateFormat getTimeInstance(final int style, final Locale locale)","0","-","-","-","-"
"7506","getTimeInstance","/**
     * Gets a time formatter instance using the specified style and
     * time zone in the default locale.
     *
     * @param style  time style: FULL, LONG, MEDIUM, or SHORT
     * @param timeZone  optional time zone, overrides time zone of
     *  formatted time
     * @return a localized standard time formatter
     * @throws IllegalArgumentException if the Locale has no time
     *  pattern defined
     * @since 2.1
     */
    public static FastDateFormat getTimeInstance(final int style, final TimeZone timeZone)","0","-","-","-","-"
"7507","getTimeInstance","/**
     * Gets a time formatter instance using the specified style, time
     * zone and locale.
     *
     * @param style  time style: FULL, LONG, MEDIUM, or SHORT
     * @param timeZone  optional time zone, overrides time zone of
     *  formatted time
     * @param locale  optional locale, overrides system locale
     * @return a localized standard time formatter
     * @throws IllegalArgumentException if the Locale has no time
     *  pattern defined
     */
    public static FastDateFormat getTimeInstance(final int style, final TimeZone timeZone, final Locale locale)","0","-","-","-","-"
"7508","FastDateFormat","/**
     * Constructs a new FastDateFormat.
     *
     * @param pattern","0","-","-","-","-"
"7509","FastDateFormat","/**
     * Constructs a new FastDateFormat.
     *
     * @param pattern","0","-","-","-","-"
"7510","applyRules","/**
     * Performs the formatting by applying the rules to the
     * specified calendar.
     *
     * @param calendar the calendar to format
     * @param buf  the buffer to format into
     * @return the specified string buffer
     * @deprecated Use","0","-","-","-","-"
"7511","equals","/**
     * Compares two objects for equality.
     *
     * @param obj  the object to compare to
     * @return","0","-","-","-","-"
"7512","format","/**
     * Formats a","0","-","-","-","-"
"7513","format","/**
     * Formats a","0","-","-","-","-"
"7514","format","/**
     * Formats a","0","-","-","-","-"
"7515","format","/**
     * Formats a","0","-","-","-","-"
"7516","format","/**
     * Formats a","0","-","-","-","-"
"7517","format","/**
     * Formats a","0","-","-","-","-"
"7518","format","/**
     * Formats a millisecond","0","-","-","-","-"
"7519","format","/**
     * Formats a millisecond","0","-","-","-","-"
"7520","format","/**
     * Formats a millisecond","0","-","-","-","-"
"7521","format","/**
     * Formats a","0","-","-","-","-"
"7522","getLocale","/**
     * Gets the locale used by this formatter.
     *
     * @return the locale
     */
    @Override
    public Locale getLocale()","0","-","-","-","-"
"7523","getMaxLengthEstimate","/**
     * Gets an estimate for the maximum string length that the
     * formatter will produce.
     *
     * <p>The actual formatted length will almost always be less than or
     * equal to this amount.</p>
     *
     * @return the maximum formatted length
     */
    public int getMaxLengthEstimate()","0","-","-","-","-"
"7524","getPattern","/**
     * Gets the pattern used by this formatter.
     *
     * @return the pattern,","0","-","-","-","-"
"7525","getTimeZone","/**
     * Gets the time zone used by this formatter.
     *
     * <p>This zone is always used for","0","-","-","-","-"
"7526","hashCode","/**
     * Returns a hash code compatible with equals.
     *
     * @return a hash code compatible with equals
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"7527","parse","@Override
    public Date parse(final String source) throws ParseException","0","-","-","-","-"
"7528","parse","@Override
    public Date parse(final String source, final ParsePosition pos)","0","-","-","-","-"
"7529","parse","@Override
    public boolean parse(final String source, final ParsePosition pos, final Calendar calendar)","0","-","-","-","-"
"7530","parseObject","@Override
    public Object parseObject(final String source, final ParsePosition pos)","0","-","-","-","-"
"7531","toString","/**
     * Gets a debugging string version of this formatter.
     *
     * @return a debugging string
     */
    @Override
    public String toString()","0","-","-","-","-"
"7532","isStarted","@Override
            boolean isStarted()","0","-","-","-","-"
"7533","isStopped","@Override
            boolean isStopped()","0","-","-","-","-"
"7534","isSuspended","@Override
            boolean isSuspended()","0","-","-","-","-"
"7535","isStarted","@Override
            boolean isStarted()","0","-","-","-","-"
"7536","isStopped","@Override
            boolean isStopped()","0","-","-","-","-"
"7537","isSuspended","@Override
            boolean isSuspended()","0","-","-","-","-"
"7538","isStarted","@Override
            boolean isStarted()","0","-","-","-","-"
"7539","isStopped","@Override
            boolean isStopped()","0","-","-","-","-"
"7540","isSuspended","@Override
            boolean isSuspended()","0","-","-","-","-"
"7541","isStarted","@Override
            boolean isStarted()","0","-","-","-","-"
"7542","isStopped","@Override
            boolean isStopped()","0","-","-","-","-"
"7543","isSuspended","@Override
            boolean isSuspended()","0","-","-","-","-"
"7544","isStarted","/**
         * Tests whether this StopWatch is started. A suspended StopWatch is also started.
         *
         * @return boolean If this StopWatch is started.
         */
        abstract boolean isStarted();","0","-","-","-","-"
"7545","isStopped","/**
         * Tests whether this StopWatch is stopped. A StopWatch which is not yet started and explicitly stopped is considered stopped.
         *
         * @return boolean If this StopWatch is stopped.
         */
        abstract boolean isStopped();","0","-","-","-","-"
"7546","isSuspended","/**
         * Tests whether this StopWatch is suspended.
         *
         * @return boolean If this StopWatch is suspended.
         */
        abstract boolean isSuspended();","0","-","-","-","-"
"7547","create","/**
     * Creates a StopWatch.
     *
     * @return StopWatch a StopWatch.
     * @since 3.10
     */
    public static StopWatch create()","0","-","-","-","-"
"7548","createStarted","/**
     * Creates and starts a StopWatch.
     *
     * @return StopWatch a started StopWatch.
     * @since 3.5
     */
    public static StopWatch createStarted()","0","-","-","-","-"
"7549","StopWatch","/**
     * Constructs a new instance.
     */
    public StopWatch()","0","-","-","-","-"
"7550","StopWatch","/**
     * Constructs a new instance.
     *
     * @param message A message for string presentation.
     * @since 3.10
     */
    public StopWatch(final String message)","0","-","-","-","-"
"7551","formatSplitTime","/**
     * Formats the split time with","0","-","-","-","-"
"7552","formatTime","/**
     * Formats the time formatted with","0","-","-","-","-"
"7553","get","/**
     * Delegates to","0","-","-","-","-"
"7554","getDuration","/**
     * Gets the Duration on this StopWatch.
     *
     * <p>
     * This is either the Duration between the start and the moment this method is called, or the Duration between start and stop.
     * </p>
     *
     * @return the Duration.
     * @since 3.16.0
     */
    public Duration getDuration()","0","-","-","-","-"
"7555","getMessage","/**
     * Gets the message for string presentation.
     *
     * @return the message for string presentation.
     * @since 3.10
     */
    public String getMessage()","0","-","-","-","-"
"7556","getNanoTime","/**
     * Gets the <em>elapsed</em> time in nanoseconds.
     *
     * <p>
     * This is either the time between the start and the moment this method is called, or the amount of time between start and stop.
     * </p>
     *
     * @return the <em>elapsed</em> time in nanoseconds.
     * @see System#nanoTime()
     * @since 3.0
     */
    public long getNanoTime()","0","-","-","-","-"
"7557","getSplitDuration","/**
     * Gets the split Duration on this StopWatch.
     *
     * <p>
     * This is the Duration between start and latest split.
     * </p>
     *
     * @return the split Duration
     * @throws IllegalStateException if this StopWatch has not yet been split.
     * @since 3.16.0
     */
    public Duration getSplitDuration()","0","-","-","-","-"
"7558","getSplitNanoTime","/**
     * Gets the split time in nanoseconds.
     *
     * <p>
     * This is the time between start and latest split.
     * </p>
     *
     * @return the split time in nanoseconds
     * @throws IllegalStateException if this StopWatch has not yet been split.
     * @since 3.0
     */
    public long getSplitNanoTime()","0","-","-","-","-"
"7559","getSplitTime","/**
     * Gets the split time on this StopWatch.
     *
     * <p>
     * This is the time between start and latest split.
     * </p>
     *
     * @return the split time in milliseconds
     * @throws IllegalStateException if this StopWatch has not yet been split.
     * @since 2.1
     * @deprecated Use","0","-","-","-","-"
"7560","getStartInstant","/**
     * Gets the Instant this StopWatch was started, between the current time and midnight, January 1, 1970 UTC.
     *
     * @return the Instant this StopWatch was started, between the current time and midnight, January 1, 1970 UTC.
     * @throws IllegalStateException if this StopWatch has not been started
     * @since 3.16.0
     */
    public Instant getStartInstant()","0","-","-","-","-"
"7561","getStartTime","/**
     * Gets the time this StopWatch was started in milliseconds, between the current time and midnight, January 1, 1970 UTC.
     *
     * @return the time this StopWatch was started in milliseconds, between the current time and midnight, January 1, 1970 UTC.
     * @throws IllegalStateException if this StopWatch has not been started
     * @since 2.4
     * @deprecated Use","0","-","-","-","-"
"7562","getStopInstant","/**
     * Gets the Instant this StopWatch was stopped, between the current time and midnight, January 1, 1970 UTC.
     *
     * @return the Instant this StopWatch was stopped in milliseconds, between the current time and midnight, January 1, 1970 UTC.
     * @throws IllegalStateException if this StopWatch has not been started
     * @since 3.16.0
     */
    public Instant getStopInstant()","0","-","-","-","-"
"7563","getStopTime","/**
     * Gets the time this StopWatch was stopped in milliseconds, between the current time and midnight, January 1, 1970 UTC.
     *
     * @return the time this StopWatch was stopped in milliseconds, between the current time and midnight, January 1, 1970 UTC.
     * @throws IllegalStateException if this StopWatch has not been started
     * @since 3.12.0
     * @deprecated Use","0","-","-","-","-"
"7564","getT","/**
     * Delegates to","0","-","-","-","-"
"7565","getTime","/**
     * Gets the time on this StopWatch.
     *
     * <p>
     * This is either the time between the start and the moment this method is called, or the amount of time between start and stop.
     * </p>
     *
     * @return the time in milliseconds
     * @see #getDuration()
     */
    public long getTime()","0","-","-","-","-"
"7566","getTime","/**
     * Gets the time in the specified TimeUnit.
     *
     * <p>
     * This is either the time between the start and the moment this method is called, or the amount of time between start and stop. The resulting time will be
     * expressed in the desired TimeUnit with any remainder rounded down. For example, if the specified unit is","0","-","-","-","-"
"7567","isStarted","/**
     * Tests whether this StopWatch is started. A suspended StopWatch is also started watch.
     *
     * @return boolean If this StopWatch is started.
     * @since 3.2
     */
    public boolean isStarted()","0","-","-","-","-"
"7568","isStopped","/**
     * Tests whether StopWatch is stopped. this StopWatch which's not yet started and explicitly stopped StopWatch is considered as stopped.
     *
     * @return boolean If this StopWatch is stopped.
     * @since 3.2
     */
    public boolean isStopped()","0","-","-","-","-"
"7569","isSuspended","/**
     * Tests whether this StopWatch is suspended.
     *
     * @return boolean If this StopWatch is suspended.
     * @since 3.2
     */
    public boolean isSuspended()","0","-","-","-","-"
"7570","nanosToMillis","/**
     * Converts nanoseconds to milliseconds.
     *
     * @param nanos nanoseconds to convert.
     * @return milliseconds conversion result.
     */
    private long nanosToMillis(final long nanos)","0","-","-","-","-"
"7571","reset","/**
     * Resets this StopWatch. Stops it if need be.
     *
     * <p>
     * This method clears the internal values to allow the object to be reused.
     * </p>
     */
    public void reset()","0","-","-","-","-"
"7572","resume","/**
     * Resumes this StopWatch after a suspend.
     *
     * <p>
     * This method resumes the watch after it was suspended. The watch will not include time between the suspend and resume calls in the total time.
     * </p>
     *
     * @throws IllegalStateException if this StopWatch has not been suspended.
     */
    public void resume()","0","-","-","-","-"
"7573","run","/**
     * Delegates to","0","-","-","-","-"
"7574","runT","/**
     * Delegates to","0","-","-","-","-"
"7575","split","/**
     * Splits the time.
     *
     * <p>
     * This method sets the stop time of the watch to allow a time to be extracted. The start time is unaffected, enabling","0","-","-","-","-"
"7576","start","/**
     * Starts this StopWatch.
     *
     * <p>
     * This method starts a new timing session, clearing any previous values.
     * </p>
     *
     * @throws IllegalStateException if this StopWatch is already running.
     */
    public void start()","0","-","-","-","-"
"7577","startResume","/**
     * Starts or resumes this StopWatch.
     */
    private void startResume()","0","-","-","-","-"
"7578","stop","/**
     * Stops this StopWatch.
     *
     * <p>
     * This method ends a new timing session, allowing the time to be retrieved.
     * </p>
     *
     * @throws IllegalStateException if this StopWatch is not running.
     */
    public void stop()","0","-","-","-","-"
"7579","suspend","/**
     * Suspends this StopWatch for later resumption.
     *
     * <p>
     * This method suspends the watch until it is resumed. The watch will not include time between the suspend and resume calls in the total time.
     * </p>
     *
     * @throws IllegalStateException if this StopWatch is not currently running.
     */
    public void suspend()","0","-","-","-","-"
"7580","toSplitString","/**
     * Gets a summary of the split time that this StopWatch recorded as a string.
     *
     * <p>
     * The format used is ISO 8601-like, [<em>message</em> ]<em>hours</em>:<em>minutes</em>:<em>seconds</em>.<em>milliseconds</em>.
     * </p>
     *
     * @return the split time as a String
     * @since 2.1
     * @since 3.10 Returns the prefix","0","-","-","-","-"
"7581","toString","/**
     * Gets a summary of the time that this StopWatch recorded as a string.
     *
     * <p>
     * The format used is ISO 8601-like, [<em>message</em> ]<em>hours</em>:<em>minutes</em>:<em>seconds</em>.<em>milliseconds</em>.
     * </p>
     *
     * @return the time as a String
     * @since 3.10 Returns the prefix","0","-","-","-","-"
"7582","unsplit","/**
     * Removes the split.
     *
     * <p>
     * This method clears the stop time. The start time is unaffected, enabling timing from the original start point to continue.
     * </p>
     *
     * @throws IllegalStateException if this StopWatch has not been split.
     */
    public void unsplit()","0","-","-","-","-"
"7583","twoDigits","private static StringBuilder twoDigits(final StringBuilder sb, final int n)","0","-","-","-","-"
"7584","GmtTimeZone","GmtTimeZone(final boolean negate, final int hours, final int minutes)","0","-","-","-","-"
"7585","equals","@Override
    public boolean equals(final Object obj)","0","-","-","-","-"
"7586","getID","@Override
    public String getID()","0","-","-","-","-"
"7587","getOffset","@Override
    public int getOffset(final int era, final int year, final int month, final int day, final int dayOfWeek, final int milliseconds)","0","-","-","-","-"
"7588","getRawOffset","@Override
    public int getRawOffset()","0","-","-","-","-"
"7589","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"7590","inDaylightTime","@Override
    public boolean inDaylightTime(final Date date)","0","-","-","-","-"
"7591","setRawOffset","@Override
    public void setRawOffset(final int offsetMillis)","0","-","-","-","-"
"7592","toString","@Override
    public String toString()","0","-","-","-","-"
"7593","useDaylightTime","@Override
    public boolean useDaylightTime()","0","-","-","-","-"
"7594","toTimeZone","/**
     * Returns the given TimeZone if non-","0","-","-","-","-"
"7595","TimeZones","/** Do not instantiate. */
    private TimeZones()","0","-","-","-","-"
"7596","getLocale","/**
     * Gets the locale used by this parser.
     *
     * @return the locale
     */
    Locale getLocale();","0","-","-","-","-"
"7597","getPattern","/**
     * Gets the pattern used by this parser.
     *
     * @return the pattern,","0","-","-","-","-"
"7598","getTimeZone","/**
     * Gets the time zone used by this parser.
     *
     * <p>
     * The default","0","-","-","-","-"
"7599","parse","/**
     * Equivalent to DateFormat.parse(String).
     *
     * See","0","-","-","-","-"
"7600","parse","/**
     * Equivalent to DateFormat.parse(String, ParsePosition).
     *
     * See","0","-","-","-","-"
"7601","parse","/**
     * Parses a formatted date string according to the format.  Updates the Calendar with parsed fields.
     * Upon success, the ParsePosition index is updated to indicate how much of the source text was consumed.
     * Not all source text needs to be consumed.  Upon parse failure, ParsePosition error index is updated to
     * the offset of the source text which does not match the supplied format.
     *
     * @param source The text to parse.
     * @param pos On input, the position in the source to start parsing, on output, updated position.
     * @param calendar The calendar into which to set parsed fields.
     * @return true, if source has been parsed (pos parsePosition is updated); otherwise false (and pos errorIndex is updated)
     * @throws IllegalArgumentException when Calendar has been set to be not lenient, and a parsed field is
     * out of range.
     *
     * @since 3.5
     */
    boolean parse(String source, ParsePosition pos, Calendar calendar);","0","-","-","-","-"
"7602","parseObject","/**
     * Parses text from a string to produce a Date.
     *
     * @param source A","0","-","-","-","-"
"7603","parseObject","/**
     * Parses a date/time string according to the given parse position.
     *
     * @param source A","0","-","-","-","-"
"7604","getInstance","/**
     * Creates a new instance based on the current time in the default time zone with the default","0","-","-","-","-"
"7605","getInstance","/**
     * Gets a CalendarUtils using the default time zone and specified locale. The","0","-","-","-","-"
"7606","toLocalDateTime","/**
     * Converts a Calendar to a LocalDateTime.
     *
     * @param calendar the Calendar to convert.
     * @return a LocalDateTime.
     * @since 3.17.0
     */
    public static LocalDateTime toLocalDateTime(final Calendar calendar)","0","-","-","-","-"
"7607","toOffsetDateTime","/**
     * Converts a Calendar to a OffsetDateTime.
     *
     * @param calendar the Calendar to convert.
     * @return a OffsetDateTime.
     * @since 3.17.0
     */
    public static OffsetDateTime toOffsetDateTime(final Calendar calendar)","0","-","-","-","-"
"7608","toZonedDateTime","/**
     * Converts a Calendar to a ZonedDateTime.
     *
     * @param calendar the Calendar to convert.
     * @return a ZonedDateTime.
     * @since 3.17.0
     */
    public static ZonedDateTime toZonedDateTime(final Calendar calendar)","0","-","-","-","-"
"7609","toZoneId","private static ZoneId toZoneId(final Calendar calendar)","0","-","-","-","-"
"7610","CalendarUtils","/**
     * Creates an instance for the given Calendar.
     *
     * @param calendar A Calendar.
     */
    public CalendarUtils(final Calendar calendar)","0","-","-","-","-"
"7611","CalendarUtils","/**
     * Creates an instance for the given Calendar.
     *
     * @param calendar A Calendar.
     * @param locale A Locale.
     */
    CalendarUtils(final Calendar calendar, final Locale locale)","0","-","-","-","-"
"7612","getDayOfMonth","/**
     * Gets the current day of month.
     *
     * @return the current day of month.
     */
    public int getDayOfMonth()","0","-","-","-","-"
"7613","getDayOfYear","/**
     * Gets the current day of year.
     *
     * @return the current day of year.
     * @since 3.13.0
     */
    public int getDayOfYear()","0","-","-","-","-"
"7614","getMonth","/**
     * Gets the current month.
     *
     * @return the current month.
     */
    public int getMonth()","0","-","-","-","-"
"7615","getMonthDisplayNames","/**
     * Gets month names in the requested style.
     * @param style Must be a valid","0","-","-","-","-"
"7616","getStandaloneLongMonthNames","/**
     * Gets full standalone month names as used in ""LLLL"" date formatting.
     * @return Long names of months
     */
    String[] getStandaloneLongMonthNames()","0","-","-","-","-"
"7617","getStandaloneShortMonthNames","/**
     * Gets short standalone month names as used in ""LLLL"" date formatting.
     * @return Short names of months
     */
    String[] getStandaloneShortMonthNames()","0","-","-","-","-"
"7618","getYear","/**
     * Gets the current year.
     *
     * @return the current year.
     */
    public int getYear()","0","-","-","-","-"
"7619","toLocalDate","/**
     * Converts this instance to a","0","-","-","-","-"
"7620","toLocalDateTime","/**
     * Converts this instance to a","0","-","-","-","-"
"7621","toOffsetDateTime","/**
     * Converts this instance to a","0","-","-","-","-"
"7622","toZonedDateTime","/**
     * Converts this instance to a","0","-","-","-","-"
"7623","accept","/**
     * Accepts the function with the duration as a long milliseconds and int nanoseconds.
     *
     * @param <T> The function exception.
     * @param consumer Accepting function.
     * @param duration The duration to pick apart.
     * @throws T See the function signature.
     * @see StopWatch
     */
    @SuppressWarnings(""boxing"") // boxing unavoidable
    public static <T extends Throwable> void accept(final FailableBiConsumer<Long, Integer, T> consumer, final Duration duration)
            throws T","0","-","-","-","-"
"7624","getNanosOfMiili","/**
     * Gets the nanosecond part of a Duration converted to milliseconds.
     * <p>
     * Handy when calling an API that takes a long of milliseconds and an int of nanoseconds. For example,
     *","0","-","-","-","-"
"7625","getNanosOfMilli","/**
     * Gets the nanosecond part of a Duration converted to milliseconds.
     * <p>
     * Handy when calling an API that takes a long of milliseconds and an int of nanoseconds. For example,
     *","0","-","-","-","-"
"7626","isPositive","/**
     * Tests whether the given Duration is positive (&gt;0).
     *
     * @param duration the value to test
     * @return whether the given Duration is positive (&gt;0).
     */
    public static boolean isPositive(final Duration duration)","0","-","-","-","-"
"7627","now","private static <E extends Throwable> Instant now(final FailableConsumer<Instant, E> nowConsumer) throws E","0","-","-","-","-"
"7628","of","/**
     * Runs the lambda and returns the duration of its execution.
     *
     * @param <E> The type of exception throw by the lambda.
     * @param consumer What to execute.
     * @return The Duration of execution.
     * @throws E thrown by the lambda.
     * @see StopWatch
     * @since 3.13.0
     */
    public static <E extends Throwable> Duration of(final FailableConsumer<Instant, E> consumer) throws E","0","-","-","-","-"
"7629","of","/**
     * Runs the lambda and returns the duration of its execution.
     *
     * @param <E> The type of exception throw by the lambda.
     * @param runnable What to execute.
     * @return The Duration of execution.
     * @throws E thrown by the lambda.
     * @see StopWatch
     * @since 3.13.0
     */
    public static <E extends Throwable> Duration of(final FailableRunnable<E> runnable) throws E","0","-","-","-","-"
"7630","since","/**
     * Computes the Duration between a start instant and now.
     *
     * @param startInclusive the start instant, inclusive, not null.
     * @return a","0","-","-","-","-"
"7631","toChronoUnit","/**
     * Converts a","0","-","-","-","-"
"7632","toDuration","/**
     * Converts an amount and TimeUnit into a Duration.
     *
     * @param amount   the amount of the duration, measured in terms of the unit, positive or negative
     * @param timeUnit the unit that the duration is measured in, must have an exact duration, not null
     * @return a Duration.
     */
    public static Duration toDuration(final long amount, final TimeUnit timeUnit)","0","-","-","-","-"
"7633","toMillisInt","/**
     * Converts a Duration to milliseconds bound to an int (instead of a long).
     * <p>
     * Handy for low-level APIs that take millisecond timeouts in ints rather than longs.
     * </p>
     * <ul>
     * <li>If the duration milliseconds are greater than","0","-","-","-","-"
"7634","zeroIfNull","/**
     * Returns the given non-null value or","0","-","-","-","-"
"7635","DurationUtils","/**
     * Make private in 4.0.
     *
     * @deprecated TODO Make private in 4.0.
     */
    @Deprecated
    public DurationUtils()","0","-","-","-","-"
"7636","DateIterator","/**
         * Constructs a DateIterator that ranges from one date to another.
         *
         * @param startFinal start date (inclusive)
         * @param endFinal end date (inclusive)
         */
        DateIterator(final Calendar startFinal, final Calendar endFinal)","0","-","-","-","-"
"7637","hasNext","/**
         * Has the iterator not reached the end date yet?
         *
         * @return","0","-","-","-","-"
"7638","next","/**
         * Returns the next calendar in the iteration
         *
         * @return Object calendar for the next date
         */
        @Override
        public Calendar next()","0","-","-","-","-"
"7639","remove","/**
         * Always throws UnsupportedOperationException.
         *
         * @throws UnsupportedOperationException Always thrown.
         * @see java.util.Iterator#remove()
         */
        @Override
        public void remove()","0","-","-","-","-"
"7640","add","/**
     * Adds to a date returning a new object.
     * The original","0","-","-","-","-"
"7641","addDays","/**
     * Adds a number of days to a date returning a new object.
     * The original","0","-","-","-","-"
"7642","addHours","/**
     * Adds a number of hours to a date returning a new object.
     * The original","0","-","-","-","-"
"7643","addMilliseconds","/**
     * Adds a number of milliseconds to a date returning a new object.
     * The original","0","-","-","-","-"
"7644","addMinutes","/**
     * Adds a number of minutes to a date returning a new object.
     * The original","0","-","-","-","-"
"7645","addMonths","/**
     * Adds a number of months to a date returning a new object.
     * The original","0","-","-","-","-"
"7646","addSeconds","/**
     * Adds a number of seconds to a date returning a new object.
     * The original","0","-","-","-","-"
"7647","addWeeks","/**
     * Adds a number of weeks to a date returning a new object.
     * The original","0","-","-","-","-"
"7648","addYears","/**
     * Adds a number of years to a date returning a new object.
     * The original","0","-","-","-","-"
"7649","ceiling","/**
     * Gets a date ceiling, leaving the field specified as the most
     * significant field.
     *
     * <p>For example, if you had the date-time of 28 Mar 2002
     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar
     * 2002 14:00:00.000.  If this was passed with MONTH, it would
     * return 1 Apr 2002 0:00:00.000.</p>
     *
     * @param calendar  the date to work with, not null
     * @param field  the field from","0","-","-","-","-"
"7650","ceiling","/**
     * Gets a date ceiling, leaving the field specified as the most
     * significant field.
     *
     * <p>For example, if you had the date-time of 28 Mar 2002
     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar
     * 2002 14:00:00.000.  If this was passed with MONTH, it would
     * return 1 Apr 2002 0:00:00.000.</p>
     *
     * @param date  the date to work with, not null
     * @param field  the field from","0","-","-","-","-"
"7651","ceiling","/**
     * Gets a date ceiling, leaving the field specified as the most
     * significant field.
     *
     * <p>For example, if you had the date-time of 28 Mar 2002
     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar
     * 2002 14:00:00.000.  If this was passed with MONTH, it would
     * return 1 Apr 2002 0:00:00.000.</p>
     *
     * @param date  the date to work with, either","0","-","-","-","-"
"7652","getFragment","/**
     * Gets a Calendar fragment for any unit.
     *
     * @param calendar the calendar to work with, not null
     * @param fragment the Calendar field part of calendar to calculate
     * @param unit the time unit
     * @return number of units within the fragment of the calendar
     * @throws NullPointerException if the date is","0","-","-","-","-"
"7653","getFragment","/**
     * Gets a Date fragment for any unit.
     *
     * @param date the date to work with, not null
     * @param fragment the Calendar field part of date to calculate
     * @param unit the time unit
     * @return number of units within the fragment of the date
     * @throws NullPointerException if the date is","0","-","-","-","-"
"7654","getFragmentInDays","/**
     * Returns the number of days within the
     * fragment. All datefields greater than the fragment will be ignored.
     *
     * <p>Asking the days of any date will only return the number of days
     * of the current month (resulting in a number between 1 and 31). This
     * method will retrieve the number of days for any fragment.
     * For example, if you want to calculate the number of days past this year,
     * your fragment is Calendar.YEAR. The result will be all days of the
     * past month(s).</p>
     *
     * <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both
     * Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,
     * Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND
     * A fragment less than or equal to a DAY field will return 0.</p>
     *
     * <ul>
     *  <li>January 28, 2008 with Calendar.MONTH as fragment will return 28
     *   (equivalent to calendar.get(Calendar.DAY_OF_MONTH))</li>
     *  <li>February 28, 2008 with Calendar.MONTH as fragment will return 28
     *   (equivalent to calendar.get(Calendar.DAY_OF_MONTH))</li>
     *  <li>January 28, 2008 with Calendar.YEAR as fragment will return 28
     *   (equivalent to calendar.get(Calendar.DAY_OF_YEAR))</li>
     *  <li>February 28, 2008 with Calendar.YEAR as fragment will return 59
     *   (equivalent to calendar.get(Calendar.DAY_OF_YEAR))</li>
     *  <li>January 28, 2008 with Calendar.MILLISECOND as fragment will return 0
     *   (a millisecond cannot be split in days)</li>
     * </ul>
     *
     * @param calendar the calendar to work with, not null
     * @param fragment the","0","-","-","-","-"
"7655","getFragmentInDays","/**
     * Returns the number of days within the
     * fragment. All date fields greater than the fragment will be ignored.
     *
     * <p>Asking the days of any date will only return the number of days
     * of the current month (resulting in a number between 1 and 31). This
     * method will retrieve the number of days for any fragment.
     * For example, if you want to calculate the number of days past this year,
     * your fragment is Calendar.YEAR. The result will be all days of the
     * past month(s).</p>
     *
     * <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both
     * Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,
     * Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND
     * A fragment less than or equal to a DAY field will return 0.</p>
     *
     * <ul>
     *  <li>January 28, 2008 with Calendar.MONTH as fragment will return 28
     *   (equivalent to deprecated date.getDay())</li>
     *  <li>February 28, 2008 with Calendar.MONTH as fragment will return 28
     *   (equivalent to deprecated date.getDay())</li>
     *  <li>January 28, 2008 with Calendar.YEAR as fragment will return 28</li>
     *  <li>February 28, 2008 with Calendar.YEAR as fragment will return 59</li>
     *  <li>January 28, 2008 with Calendar.MILLISECOND as fragment will return 0
     *   (a millisecond cannot be split in days)</li>
     * </ul>
     *
     * @param date the date to work with, not null
     * @param fragment the","0","-","-","-","-"
"7656","getFragmentInHours","/**
     * Returns the number of hours within the
     * fragment. All date fields greater than the fragment will be ignored.
     *
     * <p>Asking the hours of any date will only return the number of hours
     * of the current day (resulting in a number between 0 and 23). This
     * method will retrieve the number of hours for any fragment.
     * For example, if you want to calculate the number of hours past this month,
     * your fragment is Calendar.MONTH. The result will be all hours of the
     * past day(s).</p>
     *
     * <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both
     * Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,
     * Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND
     * A fragment less than or equal to a HOUR field will return 0.</p>
     *
     * <ul>
     *  <li>January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7
     *   (equivalent to calendar.get(Calendar.HOUR_OF_DAY))</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7
     *   (equivalent to calendar.get(Calendar.HOUR_OF_DAY))</li>
     *  <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 7</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 127 (5*24 + 7)</li>
     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0
     *   (a millisecond cannot be split in hours)</li>
     * </ul>
     *
     * @param calendar the calendar to work with, not null
     * @param fragment the","0","-","-","-","-"
"7657","getFragmentInHours","/**
     * Returns the number of hours within the
     * fragment. All date fields greater than the fragment will be ignored.
     *
     * <p>Asking the hours of any date will only return the number of hours
     * of the current day (resulting in a number between 0 and 23). This
     * method will retrieve the number of hours for any fragment.
     * For example, if you want to calculate the number of hours past this month,
     * your fragment is Calendar.MONTH. The result will be all hours of the
     * past day(s).</p>
     *
     * <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both
     * Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,
     * Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND
     * A fragment less than or equal to a HOUR field will return 0.</p>
     *
     * <ul>
     *  <li>January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7
     *   (equivalent to deprecated date.getHours())</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7
     *   (equivalent to deprecated date.getHours())</li>
     *  <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 7</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 127 (5*24 + 7)</li>
     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0
     *   (a millisecond cannot be split in hours)</li>
     * </ul>
     *
     * @param date the date to work with, not null
     * @param fragment the","0","-","-","-","-"
"7658","getFragmentInMilliseconds","/**
     * Returns the number of milliseconds within the
     * fragment. All date fields greater than the fragment will be ignored.
     *
     * <p>Asking the milliseconds of any date will only return the number of milliseconds
     * of the current second (resulting in a number between 0 and 999). This
     * method will retrieve the number of milliseconds for any fragment.
     * For example, if you want to calculate the number of seconds past today,
     * your fragment is Calendar.DATE or Calendar.DAY_OF_YEAR. The result will
     * be all seconds of the past hour(s), minutes(s) and second(s).</p>
     *
     * <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both
     * Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,
     * Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND
     * A fragment less than or equal to a MILLISECOND field will return 0.</p>
     *
     * <ul>
     *  <li>January 1, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538
     *   (equivalent to calendar.get(Calendar.MILLISECOND))</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538
     *   (equivalent to calendar.get(Calendar.MILLISECOND))</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10538
     *   (10*1000 + 538)</li>
     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0
     *   (a millisecond cannot be split in milliseconds)</li>
     * </ul>
     *
     * @param calendar the calendar to work with, not null
     * @param fragment the","0","-","-","-","-"
"7659","getFragmentInMilliseconds","/**
     * Returns the number of milliseconds within the
     * fragment. All date fields greater than the fragment will be ignored.
     *
     * <p>Asking the milliseconds of any date will only return the number of milliseconds
     * of the current second (resulting in a number between 0 and 999). This
     * method will retrieve the number of milliseconds for any fragment.
     * For example, if you want to calculate the number of milliseconds past today,
     * your fragment is Calendar.DATE or Calendar.DAY_OF_YEAR. The result will
     * be all milliseconds of the past hour(s), minutes(s) and second(s).</p>
     *
     * <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both
     * Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,
     * Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND
     * A fragment less than or equal to a SECOND field will return 0.</p>
     *
     * <ul>
     *  <li>January 1, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10538 (10*1000 + 538)</li>
     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0
     *   (a millisecond cannot be split in milliseconds)</li>
     * </ul>
     *
     * @param date the date to work with, not null
     * @param fragment the","0","-","-","-","-"
"7660","getFragmentInMinutes","/**
     * Returns the number of minutes within the
     * fragment. All date fields greater than the fragment will be ignored.
     *
     * <p>Asking the minutes of any date will only return the number of minutes
     * of the current hour (resulting in a number between 0 and 59). This
     * method will retrieve the number of minutes for any fragment.
     * For example, if you want to calculate the number of minutes past this month,
     * your fragment is Calendar.MONTH. The result will be all minutes of the
     * past day(s) and hour(s).</p>
     *
     * <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both
     * Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,
     * Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND
     * A fragment less than or equal to a MINUTE field will return 0.</p>
     *
     * <ul>
     *  <li>January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15
     *   (equivalent to calendar.get(Calendar.MINUTES))</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15
     *   (equivalent to calendar.get(Calendar.MINUTES))</li>
     *  <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 15</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 435 (7*60 + 15)</li>
     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0
     *   (a millisecond cannot be split in minutes)</li>
     * </ul>
     *
     * @param calendar the calendar to work with, not null
     * @param fragment the","0","-","-","-","-"
"7661","getFragmentInMinutes","/**
     * Returns the number of minutes within the
     * fragment. All date fields greater than the fragment will be ignored.
     *
     * <p>Asking the minutes of any date will only return the number of minutes
     * of the current hour (resulting in a number between 0 and 59). This
     * method will retrieve the number of minutes for any fragment.
     * For example, if you want to calculate the number of minutes past this month,
     * your fragment is Calendar.MONTH. The result will be all minutes of the
     * past day(s) and hour(s).</p>
     *
     * <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both
     * Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,
     * Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND
     * A fragment less than or equal to a MINUTE field will return 0.</p>
     *
     * <ul>
     *  <li>January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15
     *   (equivalent to deprecated date.getMinutes())</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15
     *   (equivalent to deprecated date.getMinutes())</li>
     *  <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 15</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 435 (7*60 + 15)</li>
     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0
     *   (a millisecond cannot be split in minutes)</li>
     * </ul>
     *
     * @param date the date to work with, not null
     * @param fragment the","0","-","-","-","-"
"7662","getFragmentInSeconds","/**
     * Returns the number of seconds within the
     * fragment. All date fields greater than the fragment will be ignored.
     *
     * <p>Asking the seconds of any date will only return the number of seconds
     * of the current minute (resulting in a number between 0 and 59). This
     * method will retrieve the number of seconds for any fragment.
     * For example, if you want to calculate the number of seconds past today,
     * your fragment is Calendar.DATE or Calendar.DAY_OF_YEAR. The result will
     * be all seconds of the past hour(s) and minutes(s).</p>
     *
     * <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both
     * Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,
     * Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND
     * A fragment less than or equal to a SECOND field will return 0.</p>
     *
     * <ul>
     *  <li>January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10
     *   (equivalent to calendar.get(Calendar.SECOND))</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10
     *   (equivalent to calendar.get(Calendar.SECOND))</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110
     *   (7*3600 + 15*60 + 10)</li>
     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0
     *   (a millisecond cannot be split in seconds)</li>
     * </ul>
     *
     * @param calendar the calendar to work with, not null
     * @param fragment the","0","-","-","-","-"
"7663","getFragmentInSeconds","/**
     * Returns the number of seconds within the
     * fragment. All date fields greater than the fragment will be ignored.
     *
     * <p>Asking the seconds of any date will only return the number of seconds
     * of the current minute (resulting in a number between 0 and 59). This
     * method will retrieve the number of seconds for any fragment.
     * For example, if you want to calculate the number of seconds past today,
     * your fragment is Calendar.DATE or Calendar.DAY_OF_YEAR. The result will
     * be all seconds of the past hour(s) and minutes(s).</p>
     *
     * <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both
     * Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,
     * Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND
     * A fragment less than or equal to a SECOND field will return 0.</p>
     *
     * <ul>
     *  <li>January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10
     *   (equivalent to deprecated date.getSeconds())</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10
     *   (equivalent to deprecated date.getSeconds())</li>
     *  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110
     *   (7*3600 + 15*60 + 10)</li>
     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0
     *   (a millisecond cannot be split in seconds)</li>
     * </ul>
     *
     * @param date the date to work with, not null
     * @param fragment the","0","-","-","-","-"
"7664","isSameDay","/**
     * Checks if two calendar objects are on the same day ignoring time.
     *
     * <p>28 Mar 2002 13:45 and 28 Mar 2002 06:01 would return true.
     * 28 Mar 2002 13:45 and 12 Mar 2002 13:45 would return false.
     * </p>
     *
     * @param cal1  the first calendar, not altered, not null
     * @param cal2  the second calendar, not altered, not null
     * @return true if they represent the same day
     * @throws NullPointerException if either calendar is","0","-","-","-","-"
"7665","isSameDay","/**
     * Checks if two date objects are on the same day ignoring time.
     *
     * <p>28 Mar 2002 13:45 and 28 Mar 2002 06:01 would return true.
     * 28 Mar 2002 13:45 and 12 Mar 2002 13:45 would return false.
     * </p>
     *
     * @param date1  the first date, not altered, not null
     * @param date2  the second date, not altered, not null
     * @return true if they represent the same day
     * @throws NullPointerException if either date is","0","-","-","-","-"
"7666","isSameInstant","/**
     * Checks if two calendar objects represent the same instant in time.
     *
     * <p>This method compares the long millisecond time of the two objects.</p>
     *
     * @param cal1  the first calendar, not altered, not null
     * @param cal2  the second calendar, not altered, not null
     * @return true if they represent the same millisecond instant
     * @throws NullPointerException if either date is","0","-","-","-","-"
"7667","isSameInstant","/**
     * Checks if two date objects represent the same instant in time.
     *
     * <p>This method compares the long millisecond time of the two objects.</p>
     *
     * @param date1  the first date, not altered, not null
     * @param date2  the second date, not altered, not null
     * @return true if they represent the same millisecond instant
     * @throws NullPointerException if either date is","0","-","-","-","-"
"7668","isSameLocalTime","/**
     * Checks if two calendar objects represent the same local time.
     *
     * <p>This method compares the values of the fields of the two objects.
     * In addition, both calendars must be the same of the same type.</p>
     *
     * @param cal1  the first calendar, not altered, not null
     * @param cal2  the second calendar, not altered, not null
     * @return true if they represent the same millisecond instant
     * @throws NullPointerException if either date is","0","-","-","-","-"
"7669","iterator","/**
     * Constructs an","0","-","-","-","-"
"7670","iterator","/**
     * Constructs an","0","-","-","-","-"
"7671","iterator","/**
     * Constructs an","0","-","-","-","-"
"7672","modify","/**
     * Internal calculation method.
     *
     * @param val  the calendar, not null
     * @param field  the field constant
     * @param modType  type to truncate, round or ceiling
     * @return the given calendar
     * @throws ArithmeticException if the year is over 280 million
     */
    private static Calendar modify(final Calendar val, final int field, final ModifyType modType)","0","-","-","-","-"
"7673","parseDate","/**
     * Parses a string representing a date by trying a variety of different parsers,
     * using the default date format symbols for the given locale.
     *
     * <p>The parse will try each parse pattern in turn.
     * A parse is only deemed successful if it parses the whole of the input string.
     * If no parse patterns match, a ParseException is thrown.</p>
     * The parser will be lenient toward the parsed date.
     *
     * @param str  the date to parse, not null
     * @param locale the locale whose date format symbols should be used. If","0","-","-","-","-"
"7674","parseDate","/**
     * Parses a string representing a date by trying a variety of different parsers.
     *
     * <p>The parse will try each parse pattern in turn.
     * A parse is only deemed successful if it parses the whole of the input string.
     * If no parse patterns match, a ParseException is thrown.</p>
     * The parser will be lenient toward the parsed date.
     *
     * @param str  the date to parse, not null
     * @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null
     * @return the parsed date
     * @throws NullPointerException if the date string or pattern array is null
     * @throws ParseException if none of the date patterns were suitable (or there were none)
     */
    public static Date parseDate(final String str, final String... parsePatterns) throws ParseException","0","-","-","-","-"
"7675","parseDateStrictly","/**
     * Parses a string representing a date by trying a variety of different parsers,
     * using the default date format symbols for the given locale.
     *
     * <p>The parse will try each parse pattern in turn.
     * A parse is only deemed successful if it parses the whole of the input string.
     * If no parse patterns match, a ParseException is thrown.</p>
     * The parser parses strictly - it does not allow for dates such as ""February 942, 1996"".
     *
     * @param str  the date to parse, not null
     * @param locale the locale whose date format symbols should be used. If","0","-","-","-","-"
"7676","parseDateStrictly","/**
     * Parses a string representing a date by trying a variety of different parsers.
     *
     * <p>The parse will try each parse pattern in turn.
     * A parse is only deemed successful if it parses the whole of the input string.
     * If no parse patterns match, a ParseException is thrown.</p>
     * The parser parses strictly - it does not allow for dates such as ""February 942, 1996"".
     *
     * @param str  the date to parse, not null
     * @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null
     * @return the parsed date
     * @throws NullPointerException if the date string or pattern array is null
     * @throws ParseException if none of the date patterns were suitable
     * @since 2.5
     */
    public static Date parseDateStrictly(final String str, final String... parsePatterns) throws ParseException","0","-","-","-","-"
"7677","parseDateWithLeniency","/**
     * Parses a string representing a date by trying a variety of different parsers.
     *
     * <p>The parse will try each parse pattern in turn.
     * A parse is only deemed successful if it parses the whole of the input string.
     * If no parse patterns match, a ParseException is thrown.</p>
     *
     * @param dateStr  the date to parse, not null
     * @param locale the locale to use when interpreting the pattern, can be null in which
     * case the default system locale is used
     * @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null
     * @param lenient Specify whether or not date/time parsing is to be lenient.
     * @return the parsed date
     * @throws NullPointerException if the date string or pattern array is null
     * @throws ParseException if none of the date patterns were suitable
     * @see java.util.Calendar#isLenient()
     */
    private static Date parseDateWithLeniency(final String dateStr, final Locale locale, final String[] parsePatterns,
        final boolean lenient) throws ParseException","0","-","-","-","-"
"7678","round","/**
     * Rounds a date, leaving the field specified as the most
     * significant field.
     *
     * <p>For example, if you had the date-time of 28 Mar 2002
     * 13:45:01.231, if this was passed with HOUR, it would return
     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it
     * would return 1 April 2002 0:00:00.000.</p>
     *
     * <p>For a date in a time zone that handles the change to daylight
     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.
     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a
     * date that crosses this time would produce the following values:
     * </p>
     * <ul>
     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>
     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>
     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>
     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>
     * </ul>
     *
     * @param calendar  the date to work with, not null
     * @param field  the field from","0","-","-","-","-"
"7679","round","/**
     * Rounds a date, leaving the field specified as the most
     * significant field.
     *
     * <p>For example, if you had the date-time of 28 Mar 2002
     * 13:45:01.231, if this was passed with HOUR, it would return
     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it
     * would return 1 April 2002 0:00:00.000.</p>
     *
     * <p>For a date in a time zone that handles the change to daylight
     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.
     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a
     * date that crosses this time would produce the following values:
     * </p>
     * <ul>
     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>
     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>
     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>
     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>
     * </ul>
     *
     * @param date  the date to work with, not null
     * @param field  the field from","0","-","-","-","-"
"7680","round","/**
     * Rounds a date, leaving the field specified as the most
     * significant field.
     *
     * <p>For example, if you had the date-time of 28 Mar 2002
     * 13:45:01.231, if this was passed with HOUR, it would return
     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it
     * would return 1 April 2002 0:00:00.000.</p>
     *
     * <p>For a date in a time zone that handles the change to daylight
     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.
     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a
     * date that crosses this time would produce the following values:
     * </p>
     * <ul>
     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>
     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>
     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>
     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>
     * </ul>
     *
     * @param date  the date to work with, either","0","-","-","-","-"
"7681","set","/**
     * Sets the specified field to a date returning a new object.
     * This does not use a lenient calendar.
     * The original","0","-","-","-","-"
"7682","setDays","/**
     * Sets the day of month field to a date returning a new object.
     * The original","0","-","-","-","-"
"7683","setHours","/**
     * Sets the hours field to a date returning a new object.  Hours range
     * from  0-23.
     * The original","0","-","-","-","-"
"7684","setMilliseconds","/**
     * Sets the milliseconds field to a date returning a new object.
     * The original","0","-","-","-","-"
"7685","setMinutes","/**
     * Sets the minute field to a date returning a new object.
     * The original","0","-","-","-","-"
"7686","setMonths","/**
     * Sets the months field to a date returning a new object.
     * The original","0","-","-","-","-"
"7687","setSeconds","/**
     * Sets the seconds field to a date returning a new object.
     * The original","0","-","-","-","-"
"7688","setYears","/**
     * Sets the years field to a date returning a new object.
     * The original","0","-","-","-","-"
"7689","toCalendar","/**
     * Converts a","0","-","-","-","-"
"7690","toCalendar","/**
     * Converts a","0","-","-","-","-"
"7691","truncate","/**
     * Truncates a date, leaving the field specified as the most
     * significant field.
     *
     * <p>For example, if you had the date-time of 28 Mar 2002
     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar
     * 2002 13:00:00.000.  If this was passed with MONTH, it would
     * return 1 Mar 2002 0:00:00.000.</p>
     *
     * @param date  the date to work with, not null
     * @param field  the field from","0","-","-","-","-"
"7692","truncate","/**
     * Truncates a date, leaving the field specified as the most
     * significant field.
     *
     * <p>For example, if you had the date-time of 28 Mar 2002
     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar
     * 2002 13:00:00.000.  If this was passed with MONTH, it would
     * return 1 Mar 2002 0:00:00.000.</p>
     *
     * @param date  the date to work with, not null
     * @param field  the field from","0","-","-","-","-"
"7693","truncate","/**
     * Truncates a date, leaving the field specified as the most
     * significant field.
     *
     * <p>For example, if you had the date-time of 28 Mar 2002
     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar
     * 2002 13:00:00.000.  If this was passed with MONTH, it would
     * return 1 Mar 2002 0:00:00.000.</p>
     *
     * @param date  the date to work with, either","0","-","-","-","-"
"7694","truncatedCompareTo","/**
     * Determines how two calendars compare up to no more than the specified
     * most significant field.
     *
     * @param cal1 the first calendar, not","0","-","-","-","-"
"7695","truncatedCompareTo","/**
     * Determines how two dates compare up to no more than the specified
     * most significant field.
     *
     * @param date1 the first date, not","0","-","-","-","-"
"7696","truncatedEquals","/**
     * Determines if two calendars are equal up to no more than the specified
     * most significant field.
     *
     * @param cal1 the first calendar, not","0","-","-","-","-"
"7697","truncatedEquals","/**
     * Determines if two dates are equal up to no more than the specified
     * most significant field.
     *
     * @param date1 the first date, not","0","-","-","-","-"
"7698","validateDateNotNull","/**
     * @param date Date to validate.
     * @throws NullPointerException if","0","-","-","-","-"
"7699","DateUtils","/**
     *","0","-","-","-","-"
"7700","CharacterLiteral","/**
         * Constructs a new instance of","0","-","-","-","-"
"7701","appendTo","/**
         *","0","-","-","-","-"
"7702","estimateLength","/**
         *","0","-","-","-","-"
"7703","DayInWeekField","DayInWeekField(final NumberRule rule)","0","-","-","-","-"
"7704","appendTo","@Override
        public void appendTo(final Appendable buffer, final Calendar calendar) throws IOException","0","-","-","-","-"
"7705","appendTo","@Override
        public void appendTo(final Appendable buffer, final int value) throws IOException","0","-","-","-","-"
"7706","estimateLength","@Override
        public int estimateLength()","0","-","-","-","-"
"7707","getRule","/**
         * Factory method for Iso8601_Rules.
         *
         * @param tokenLen a token indicating the length of the TimeZone String to be formatted.
         * @return an Iso8601_Rule that can format TimeZone String of length","0","-","-","-","-"
"7708","Iso8601_Rule","/**
         * Constructs an instance of","0","-","-","-","-"
"7709","appendTo","/**
         *","0","-","-","-","-"
"7710","estimateLength","/**
         *","0","-","-","-","-"
"7711","appendTo","/**
         * Appends the specified value to the output buffer based on the rule implementation.
         *
         * @param buffer the output buffer
         * @param value the value to be appended
         * @throws IOException if an I/O error occurs.
         */
        void appendTo(Appendable buffer, int value) throws IOException;","0","-","-","-","-"
"7712","PaddedNumberField","/**
         * Constructs an instance of","0","-","-","-","-"
"7713","appendTo","/**
         *","0","-","-","-","-"
"7714","appendTo","/**
         *","0","-","-","-","-"
"7715","estimateLength","/**
         *","0","-","-","-","-"
"7716","appendTo","/**
         * Appends the value of the specified calendar to the output buffer based on the rule implementation.
         *
         * @param buf the output buffer
         * @param calendar calendar to be appended
         * @throws IOException if an I/O error occurs.
         */
        void appendTo(Appendable buf, Calendar calendar) throws IOException;","0","-","-","-","-"
"7717","estimateLength","/**
         * Returns the estimated length of the result.
         *
         * @return the estimated length
         */
        int estimateLength();","0","-","-","-","-"
"7718","StringLiteral","/**
         * Constructs a new instance of","0","-","-","-","-"
"7719","appendTo","/**
         *","0","-","-","-","-"
"7720","estimateLength","/**
         *","0","-","-","-","-"
"7721","TextField","/**
         * Constructs an instance of","0","-","-","-","-"
"7722","appendTo","/**
         *","0","-","-","-","-"
"7723","estimateLength","/**
         *","0","-","-","-","-"
"7724","TimeZoneDisplayKey","/**
         * Constructs an instance of","0","-","-","-","-"
"7725","equals","/**
         *","0","-","-","-","-"
"7726","hashCode","/**
         *","0","-","-","-","-"
"7727","TimeZoneNameRule","/**
         * Constructs an instance of","0","-","-","-","-"
"7728","appendTo","/**
         *","0","-","-","-","-"
"7729","estimateLength","/**
         *","0","-","-","-","-"
"7730","TimeZoneNumberRule","/**
         * Constructs an instance of","0","-","-","-","-"
"7731","appendTo","/**
         *","0","-","-","-","-"
"7732","estimateLength","/**
         *","0","-","-","-","-"
"7733","TwelveHourField","/**
         * Constructs an instance of","0","-","-","-","-"
"7734","appendTo","/**
         *","0","-","-","-","-"
"7735","appendTo","/**
         *","0","-","-","-","-"
"7736","estimateLength","/**
         *","0","-","-","-","-"
"7737","TwentyFourHourField","/**
         * Constructs an instance of","0","-","-","-","-"
"7738","appendTo","/**
         *","0","-","-","-","-"
"7739","appendTo","/**
         *","0","-","-","-","-"
"7740","estimateLength","/**
         *","0","-","-","-","-"
"7741","TwoDigitMonthField","/**
         * Constructs an instance of","0","-","-","-","-"
"7742","appendTo","/**
         *","0","-","-","-","-"
"7743","appendTo","/**
         *","0","-","-","-","-"
"7744","estimateLength","/**
         *","0","-","-","-","-"
"7745","TwoDigitNumberField","/**
         * Constructs an instance of","0","-","-","-","-"
"7746","appendTo","/**
         *","0","-","-","-","-"
"7747","appendTo","/**
         *","0","-","-","-","-"
"7748","estimateLength","/**
         *","0","-","-","-","-"
"7749","TwoDigitYearField","/**
         * Constructs an instance of","0","-","-","-","-"
"7750","appendTo","/**
         *","0","-","-","-","-"
"7751","appendTo","/**
         *","0","-","-","-","-"
"7752","estimateLength","/**
         *","0","-","-","-","-"
"7753","UnpaddedMonthField","/**
         * Constructs an instance of","0","-","-","-","-"
"7754","appendTo","/**
         *","0","-","-","-","-"
"7755","appendTo","/**
         *","0","-","-","-","-"
"7756","estimateLength","/**
         *","0","-","-","-","-"
"7757","UnpaddedNumberField","/**
         * Constructs an instance of","0","-","-","-","-"
"7758","appendTo","/**
         *","0","-","-","-","-"
"7759","appendTo","/**
         *","0","-","-","-","-"
"7760","estimateLength","/**
         *","0","-","-","-","-"
"7761","WeekYear","WeekYear(final NumberRule rule)","0","-","-","-","-"
"7762","appendTo","@Override
        public void appendTo(final Appendable buffer, final Calendar calendar) throws IOException","0","-","-","-","-"
"7763","appendTo","@Override
        public void appendTo(final Appendable buffer, final int value) throws IOException","0","-","-","-","-"
"7764","estimateLength","@Override
        public int estimateLength()","0","-","-","-","-"
"7765","appendDigits","/**
     * Appends two digits to the given buffer.
     *
     * @param buffer the buffer to append to.
     * @param value the value to append digits from.
     * @throws IOException If an I/O error occurs
     */
    private static void appendDigits(final Appendable buffer, final int value) throws IOException","0","-","-","-","-"
"7766","appendFullDigits","/**
     * Appends all digits to the given buffer.
     *
     * @param buffer the buffer to append to.
     * @param value the value to append digits from.
     * @param minFieldWidth Minimum field width.
     * @throws IOException If an I/O error occurs
     */
    private static void appendFullDigits(final Appendable buffer, int value, int minFieldWidth) throws IOException","0","-","-","-","-"
"7767","getTimeZoneDisplay","/**
     * Gets the time zone display name, using a cache for performance.
     *
     * @param tz  the zone to query
     * @param daylight  true if daylight savings
     * @param style  the style to use","0","-","-","-","-"
"7768","FastDatePrinter","/**
     * Constructs a new FastDatePrinter.
     * Use","0","-","-","-","-"
"7769","applyRules","/**
     * Performs the formatting by applying the rules to the
     * specified calendar.
     *
     * @param calendar  the calendar to format
     * @param buf  the buffer to format into
     * @param <B> the Appendable class type, usually StringBuilder or StringBuffer.
     * @return the specified string buffer
     */
    private <B extends Appendable> B applyRules(final Calendar calendar, final B buf)","0","-","-","-","-"
"7770","applyRules","/**
     * Performs the formatting by applying the rules to the
     * specified calendar.
     *
     * @param calendar the calendar to format
     * @param buf the buffer to format into
     * @return the specified string buffer
     * @deprecated use","0","-","-","-","-"
"7771","applyRulesToString","/**
     * Creates a String representation of the given Calendar by applying the rules of this printer to it.
     * @param c the Calendar to apply the rules to.
     * @return a String representation of the given Calendar.
     */
    private String applyRulesToString(final Calendar c)","0","-","-","-","-"
"7772","equals","/**
     * Compares two objects for equality.
     *
     * @param obj  the object to compare to
     * @return","0","-","-","-","-"
"7773","format","@Override
    public String format(final Calendar calendar)","0","-","-","-","-"
"7774","format","@Override
    public <B extends Appendable> B format(Calendar calendar, final B buf)","0","-","-","-","-"
"7775","format","@Override
    public StringBuffer format(final Calendar calendar, final StringBuffer buf)","0","-","-","-","-"
"7776","format","@Override
    public String format(final Date date)","0","-","-","-","-"
"7777","format","@Override
    public <B extends Appendable> B format(final Date date, final B buf)","0","-","-","-","-"
"7778","format","@Override
    public StringBuffer format(final Date date, final StringBuffer buf)","0","-","-","-","-"
"7779","format","@Override
    public String format(final long millis)","0","-","-","-","-"
"7780","format","@Override
    public <B extends Appendable> B format(final long millis, final B buf)","0","-","-","-","-"
"7781","format","@Override
    public StringBuffer format(final long millis, final StringBuffer buf)","0","-","-","-","-"
"7782","format","/**
     * Formats a","0","-","-","-","-"
"7783","format","/**
     * Formats a","0","-","-","-","-"
"7784","getLocale","@Override
    public Locale getLocale()","0","-","-","-","-"
"7785","getMaxLengthEstimate","/**
     * Gets an estimate for the maximum string length that the
     * formatter will produce.
     *
     * <p>The actual formatted length will almost always be less than or
     * equal to this amount.</p>
     *
     * @return the maximum formatted length
     */
    public int getMaxLengthEstimate()","0","-","-","-","-"
"7786","getPattern","@Override
    public String getPattern()","0","-","-","-","-"
"7787","getTimeZone","@Override
    public TimeZone getTimeZone()","0","-","-","-","-"
"7788","hashCode","/**
     * Returns a hash code compatible with equals.
     *
     * @return a hash code compatible with equals
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"7789","init","/**
     * Initializes the instance for first use.
     */
    private void init()","0","-","-","-","-"
"7790","newCalendar","/**
     * Creates a new Calendar instance.
     * @return a new Calendar instance.
     */
    private Calendar newCalendar()","0","-","-","-","-"
"7791","parsePattern","/**
     * Returns a list of Rules given a pattern.
     *
     * @return a","0","-","-","-","-"
"7792","parseToken","/**
     * Performs the parsing of tokens.
     *
     * @param pattern  the pattern
     * @param indexRef  index references
     * @return parsed token
     */
    protected String parseToken(final String pattern, final int[] indexRef)","0","-","-","-","-"
"7793","readObject","/**
     * Create the object after serialization. This implementation reinitializes the
     * transient properties.
     *
     * @param in ObjectInputStream from which the object is being deserialized.
     * @throws IOException if there is an IO issue.
     * @throws ClassNotFoundException if a class cannot be found.
     */
    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException","0","-","-","-","-"
"7794","selectNumberRule","/**
     * Gets an appropriate rule for the padding required.
     *
     * @param field  the field to get a rule for
     * @param padding  the padding required
     * @return a new rule with the correct padding
     */
    protected NumberRule selectNumberRule(final int field, final int padding)","0","-","-","-","-"
"7795","toString","/**
     * Gets a debugging string version of this formatter.
     *
     * @return a debugging string
     */
    @Override
    public String toString()","0","-","-","-","-"
"7796","format","/**
     * Formats a","0","-","-","-","-"
"7797","format","/**
     * Formats a","0","-","-","-","-"
"7798","format","/**
     * Formats a","0","-","-","-","-"
"7799","format","/**
     * Formats a","0","-","-","-","-"
"7800","format","/**
     * Formats a","0","-","-","-","-"
"7801","format","/**
     * Formats a","0","-","-","-","-"
"7802","format","/**
     * Formats a millisecond","0","-","-","-","-"
"7803","format","/**
     * Formats a millisecond","0","-","-","-","-"
"7804","format","/**
     * Formats a millisecond","0","-","-","-","-"
"7805","format","/**
     * Formats a","0","-","-","-","-"
"7806","getLocale","/**
     * Gets the locale used by this printer.
     *
     * @return the locale
     */
    Locale getLocale();","0","-","-","-","-"
"7807","getPattern","/**
     * Gets the pattern used by this printer.
     *
     * @return the pattern,","0","-","-","-","-"
"7808","getTimeZone","/**
     * Gets the time zone used by this printer.
     *
     * <p>This zone is always used for","0","-","-","-","-"
"7809","getGmtTimeZone","/**
     * Gets the GMT TimeZone.
     * @return A TimeZone with a raw offset of zero.
     */
    public static TimeZone getGmtTimeZone()","0","-","-","-","-"
"7810","getGmtTimeZone","/**
     * Gets a TimeZone with GMT offsets.  A GMT offset must be either 'Z', or 'UTC', or match
     * <em>(GMT)? hh?(:?mm?)?</em>, where h and m are digits representing hours and minutes.
     *
     * @param pattern The GMT offset
     * @return A TimeZone with offset from GMT or null, if pattern does not match.
     */
    public static TimeZone getGmtTimeZone(final String pattern)","0","-","-","-","-"
"7811","getTimeZone","/**
     * Gets a TimeZone, looking first for GMT custom ids, then falling back to Olson ids.
     * A GMT custom id can be 'Z', or 'UTC', or has an optional prefix of GMT,
     * followed by sign, hours digit(s), optional colon(':'), and optional minutes digits.
     * i.e. <em>[GMT] (+|-) Hours [[:] Minutes]</em>
     *
     * @param id A GMT custom id (or Olson id
     * @return A time zone
     */
    public static TimeZone getTimeZone(final String id)","0","-","-","-","-"
"7812","parseInt","private static int parseInt(final String group)","0","-","-","-","-"
"7813","parseSign","private static boolean parseSign(final String group)","0","-","-","-","-"
"7814","FastTimeZone","private FastTimeZone()","0","-","-","-","-"
"7815","containsTokenWithValue","/**
         * Helper method to determine if a set of tokens contain a value
         *
         * @param tokens set to look in
         * @param value to look for
         * @return boolean","0","-","-","-","-"
"7816","Token","/**
         * Wraps a token around a value. A value would be something like a 'Y'.
         *
         * @param value value to wrap, non-null.
         * @param optional whether the token is optional
         * @param optionalIndex the index of the optional token within the pattern
         */
        Token(final CharSequence value, final boolean optional, final int optionalIndex)","0","-","-","-","-"
"7817","equals","/**
         * Supports equality of this Token to another Token.
         *
         * @param obj2 Object to consider equality of
         * @return boolean","0","-","-","-","-"
"7818","getCount","/**
         * Gets the current number of values represented
         *
         * @return int number of values represented
         */
        int getCount()","0","-","-","-","-"
"7819","getValue","/**
         * Gets the particular value this token represents.
         *
         * @return Object value, non-null.
         */
        Object getValue()","0","-","-","-","-"
"7820","hashCode","/**
         * Returns a hash code for the token equal to the
         * hash code for the token's value. Thus 'TT' and 'TTTT'
         * will have the same hash code.
         *
         * @return The hash code for the token
         */
        @Override
        public int hashCode()","0","-","-","-","-"
"7821","increment","/**
         * Adds another one of the value
         */
        void increment()","0","-","-","-","-"
"7822","toString","/**
         * Represents this token as a String.
         *
         * @return String representation of the token
         */
        @Override
        public String toString()","0","-","-","-","-"
"7823","format","/**
     * The internal method to do the formatting.
     *
     * @param tokens  the tokens
     * @param years  the number of years
     * @param months  the number of months
     * @param days  the number of days
     * @param hours  the number of hours
     * @param minutes  the number of minutes
     * @param seconds  the number of seconds
     * @param milliseconds  the number of millis
     * @param padWithZeros  whether to pad
     * @return the formatted string
     */
    static String format(final Token[] tokens, final long years, final long months, final long days, final long hours, final long minutes,
            final long seconds,
            final long milliseconds, final boolean padWithZeros)","0","-","-","-","-"
"7824","formatDuration","/**
     * Formats the time gap as a string, using the specified format, and padding with zeros.
     *
     * <p>This method formats durations using the days and lower fields of the
     * format pattern. Months and larger are not used.</p>
     *
     * @param durationMillis  the duration to format
     * @param format  the way in which to format the duration, not null
     * @return the formatted duration, not null
     * @throws IllegalArgumentException if durationMillis is negative
     */
    public static String formatDuration(final long durationMillis, final String format)","0","-","-","-","-"
"7825","formatDuration","/**
     * Formats the time gap as a string, using the specified format.
     * Padding the left-hand side side of numbers with zeroes is optional.
     *
     * <p>This method formats durations using the days and lower fields of the
     * format pattern. Months and larger are not used.</p>
     *
     * @param durationMillis  the duration to format
     * @param format  the way in which to format the duration, not null
     * @param padWithZeros  whether to pad the left-hand side side of numbers with 0's
     * @return the formatted duration, not null
     * @throws IllegalArgumentException if durationMillis is negative
     */
    public static String formatDuration(final long durationMillis, final String format, final boolean padWithZeros)","0","-","-","-","-"
"7826","formatDurationHMS","/**
     * Formats the time gap as a string.
     *
     * <p>The format used is ISO 8601-like:","0","-","-","-","-"
"7827","formatDurationISO","/**
     * Formats the time gap as a string.
     *
     * <p>The format used is the ISO 8601 period format.</p>
     *
     * <p>This method formats durations using the days and lower fields of the
     * ISO format pattern, such as P7D6TH5M4.321S.</p>
     *
     * @param durationMillis  the duration to format
     * @return the formatted duration, not null
     * @throws IllegalArgumentException if durationMillis is negative
     */
    public static String formatDurationISO(final long durationMillis)","0","-","-","-","-"
"7828","formatDurationWords","/**
     * Formats an elapsed time into a pluralization correct string.
     *
     * <p>This method formats durations using the days and lower fields of the
     * format pattern. Months and larger are not used.</p>
     *
     * @param durationMillis  the elapsed time to report in milliseconds
     * @param suppressLeadingZeroElements  suppresses leading 0 elements
     * @param suppressTrailingZeroElements  suppresses trailing 0 elements
     * @return the formatted text in days/hours/minutes/seconds, not null
     * @throws IllegalArgumentException if durationMillis is negative
     */
    public static String formatDurationWords(
        final long durationMillis,
        final boolean suppressLeadingZeroElements,
        final boolean suppressTrailingZeroElements)","0","-","-","-","-"
"7829","formatPeriod","/**
     * Formats the time gap as a string, using the specified format.
     * Padding the left-hand side side of numbers with zeroes is optional.
     *
     * @param startMillis  the start of the duration
     * @param endMillis  the end of the duration
     * @param format  the way in which to format the duration, not null
     * @return the formatted duration, not null
     * @throws IllegalArgumentException if startMillis is greater than endMillis
     */
    public static String formatPeriod(final long startMillis, final long endMillis, final String format)","0","-","-","-","-"
"7830","formatPeriod","/**
     * <p>Formats the time gap as a string, using the specified format.
     * Padding the left-hand side side of numbers with zeroes is optional and
     * the time zone may be specified.
     *
     * <p>When calculating the difference between months/days, it chooses to
     * calculate months first. So when working out the number of months and
     * days between January 15th and March 10th, it choose 1 month and
     * 23 days gained by choosing January-&gt;February = 1 month and then
     * calculating days forwards, and not the 1 month and 26 days gained by
     * choosing March -&gt; February = 1 month and then calculating days
     * backwards.</p>
     *
     * <p>For more control, the <a href=""https://www.joda.org/joda-time/"">Joda-Time</a>
     * library is recommended.</p>
     *
     * @param startMillis  the start of the duration
     * @param endMillis  the end of the duration
     * @param format  the way in which to format the duration, not null
     * @param padWithZeros  whether to pad the left-hand side side of numbers with 0's
     * @param timezone  the millis are defined in
     * @return the formatted duration, not null
     * @throws IllegalArgumentException if startMillis is greater than endMillis
     */
    public static String formatPeriod(final long startMillis, final long endMillis, final String format, final boolean padWithZeros,
            final TimeZone timezone)","0","-","-","-","-"
"7831","formatPeriodISO","/**
     * Formats the time gap as a string.
     *
     * <p>The format used is the ISO 8601 period format.</p>
     *
     * @param startMillis  the start of the duration to format
     * @param endMillis  the end of the duration to format
     * @return the formatted duration, not null
     * @throws IllegalArgumentException if startMillis is greater than endMillis
     */
    public static String formatPeriodISO(final long startMillis, final long endMillis)","0","-","-","-","-"
"7832","lexx","/**
     * Parses a classic date format string into Tokens
     *
     * @param format  the format to parse, not null
     * @return array of Token[]
     */
    static Token[] lexx(final String format)","0","-","-","-","-"
"7833","paddedValue","/**
     * Converts a","0","-","-","-","-"
"7834","DurationFormatUtils","/**
     * DurationFormatUtils instances should NOT be constructed in standard programming.
     *
     * <p>This constructor is public to permit tools that require a JavaBean instance
     * to operate.</p>
     *
     * @deprecated TODO Make private in 4.0.
     */
    @Deprecated
    public DurationFormatUtils()","0","-","-","-","-"
"7835","format","/**
     * Formats a calendar into a specific pattern. The TimeZone from the calendar
     * will be used for formatting.
     *
     * @param calendar  the calendar to format, not null
     * @param pattern  the pattern to use to format the calendar, not null
     * @return the formatted calendar
     * @see FastDateFormat#format(Calendar)
     * @since 2.4
     */
    public static String format(final Calendar calendar, final String pattern)","0","-","-","-","-"
"7836","format","/**
     * Formats a calendar into a specific pattern in a locale. The TimeZone from the calendar
     * will be used for formatting.
     *
     * @param calendar  the calendar to format, not null
     * @param pattern  the pattern to use to format the calendar, not null
     * @param locale  the locale to use, may be","0","-","-","-","-"
"7837","format","/**
     * Formats a calendar into a specific pattern in a time zone.
     *
     * @param calendar  the calendar to format, not null
     * @param pattern  the pattern to use to format the calendar, not null
     * @param timeZone  the time zone  to use, may be","0","-","-","-","-"
"7838","format","/**
     * Formats a calendar into a specific pattern in a time zone and locale.
     *
     * @param calendar  the calendar to format, not null
     * @param pattern  the pattern to use to format the calendar, not null
     * @param timeZone  the time zone  to use, may be","0","-","-","-","-"
"7839","format","/**
     * Formats a date/time into a specific pattern.
     *
     * @param date  the date to format, not null
     * @param pattern  the pattern to use to format the date, not null
     * @return the formatted date
     */
    public static String format(final Date date, final String pattern)","0","-","-","-","-"
"7840","format","/**
     * Formats a date/time into a specific pattern in a locale.
     *
     * @param date  the date to format, not null
     * @param pattern  the pattern to use to format the date, not null
     * @param locale  the locale to use, may be","0","-","-","-","-"
"7841","format","/**
     * Formats a date/time into a specific pattern in a time zone.
     *
     * @param date  the date to format, not null
     * @param pattern  the pattern to use to format the date, not null
     * @param timeZone  the time zone  to use, may be","0","-","-","-","-"
"7842","format","/**
     * Formats a date/time into a specific pattern in a time zone and locale.
     *
     * @param date  the date to format, not null
     * @param pattern  the pattern to use to format the date, not null, not null
     * @param timeZone  the time zone  to use, may be","0","-","-","-","-"
"7843","format","/**
     * Formats a date/time into a specific pattern.
     *
     * @param millis  the date to format expressed in milliseconds
     * @param pattern  the pattern to use to format the date, not null
     * @return the formatted date
     */
    public static String format(final long millis, final String pattern)","0","-","-","-","-"
"7844","format","/**
     * Formats a date/time into a specific pattern in a locale.
     *
     * @param millis  the date to format expressed in milliseconds
     * @param pattern  the pattern to use to format the date, not null
     * @param locale  the locale to use, may be","0","-","-","-","-"
"7845","format","/**
     * Formats a date/time into a specific pattern in a time zone.
     *
     * @param millis  the time expressed in milliseconds
     * @param pattern  the pattern to use to format the date, not null
     * @param timeZone  the time zone  to use, may be","0","-","-","-","-"
"7846","format","/**
     * Formats a date/time into a specific pattern in a time zone and locale.
     *
     * @param millis  the date to format expressed in milliseconds
     * @param pattern  the pattern to use to format the date, not null
     * @param timeZone  the time zone  to use, may be","0","-","-","-","-"
"7847","formatUTC","/**
     * Formats a date/time into a specific pattern using the UTC time zone.
     *
     * @param date  the date to format, not null
     * @param pattern  the pattern to use to format the date, not null
     * @return the formatted date
     */
    public static String formatUTC(final Date date, final String pattern)","0","-","-","-","-"
"7848","formatUTC","/**
     * Formats a date/time into a specific pattern using the UTC time zone.
     *
     * @param date  the date to format, not null
     * @param pattern  the pattern to use to format the date, not null
     * @param locale  the locale to use, may be","0","-","-","-","-"
"7849","formatUTC","/**
     * Formats a date/time into a specific pattern using the UTC time zone.
     *
     * @param millis  the date to format expressed in milliseconds
     * @param pattern  the pattern to use to format the date, not null
     * @return the formatted date
     */
    public static String formatUTC(final long millis, final String pattern)","0","-","-","-","-"
"7850","formatUTC","/**
     * Formats a date/time into a specific pattern using the UTC time zone.
     *
     * @param millis  the date to format expressed in milliseconds
     * @param pattern  the pattern to use to format the date, not null
     * @param locale  the locale to use, may be","0","-","-","-","-"
"7851","getTimeZone","private static TimeZone getTimeZone(final Calendar calendar)","0","-","-","-","-"
"7852","DateFormatUtils","/**
     * DateFormatUtils instances should NOT be constructed in standard programming.
     *
     * <p>This constructor is public to permit tools that require a JavaBean instance
     * to operate.</p>
     *
     * @deprecated TODO Make private in 4.0.
     */
    @Deprecated
    public DateFormatUtils()","0","-","-","-","-"
"7853","computeHashCode","private static int computeHashCode(final Object[] keys)","0","-","-","-","-"
"7854","ArrayKey","/**
         * Constructs an instance of","0","-","-","-","-"
"7855","equals","@Override
        public boolean equals(final Object obj)","0","-","-","-","-"
"7856","hashCode","@Override
        public int hashCode()","0","-","-","-","-"
"7857","getPatternForStyle","/**
     * Gets a date/time format for the specified styles and locale.
     *
     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT, null indicates no date in format
     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT, null indicates no time in format
     * @param locale  The non-null locale of the desired format
     * @return a localized standard date/time format
     * @throws IllegalArgumentException if the Locale has no date/time pattern defined
     */
    // package protected, for access from test code; do not make public or protected
    static String getPatternForStyle(final Integer dateStyle, final Integer timeStyle, final Locale locale)","0","-","-","-","-"
"7858","createInstance","/**
     * Create a format instance using the specified pattern, time zone
     * and locale.
     *
     * @param pattern","0","-","-","-","-"
"7859","getDateInstance","/**
     * Gets a date formatter instance using the specified style,
     * time zone and locale.
     *
     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT
     * @param timeZone  optional time zone, overrides time zone of
     *  formatted date, null means use default Locale
     * @param locale  optional locale, overrides system locale
     * @return a localized standard date/time formatter
     * @throws IllegalArgumentException if the Locale has no date/time
     *  pattern defined
     */
    // package protected, for access from FastDateFormat; do not make public or protected
    F getDateInstance(final int dateStyle, final TimeZone timeZone, final Locale locale)","0","-","-","-","-"
"7860","getDateTimeInstance","/**
     * Gets a date/time formatter instance using the specified style,
     * time zone and locale.
     *
     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT
     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT
     * @param timeZone  optional time zone, overrides time zone of
     *  formatted date, null means use default Locale
     * @param locale  optional locale, overrides system locale
     * @return a localized standard date/time formatter
     * @throws IllegalArgumentException if the Locale has no date/time
     *  pattern defined
     */
    // package protected, for access from FastDateFormat; do not make public or protected
    F getDateTimeInstance(final int dateStyle, final int timeStyle, final TimeZone timeZone, final Locale locale)","0","-","-","-","-"
"7861","getDateTimeInstance","/**
     * Gets a date/time formatter instance using the specified style,
     * time zone and locale.
     *
     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT, null indicates no date in format
     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT, null indicates no time in format
     * @param timeZone  optional time zone, overrides time zone of
     *  formatted date, null means use default Locale
     * @param locale  optional locale, overrides system locale
     * @return a localized standard date/time formatter
     * @throws IllegalArgumentException if the Locale has no date/time
     *  pattern defined
     */
    // This must remain private, see LANG-884
    private F getDateTimeInstance(final Integer dateStyle, final Integer timeStyle, final TimeZone timeZone, Locale locale)","0","-","-","-","-"
"7862","getInstance","/**
     * Gets a formatter instance using the default pattern in the
     * default time zone and locale.
     *
     * @return a date/time formatter
     */
    public F getInstance()","0","-","-","-","-"
"7863","getInstance","/**
     * Gets a formatter instance using the specified pattern, time zone
     * and locale.
     *
     * @param pattern","0","-","-","-","-"
"7864","getTimeInstance","/**
     * Gets a time formatter instance using the specified style,
     * time zone and locale.
     *
     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT
     * @param timeZone  optional time zone, overrides time zone of
     *  formatted date, null means use default Locale
     * @param locale  optional locale, overrides system locale
     * @return a localized standard date/time formatter
     * @throws IllegalArgumentException if the Locale has no date/time
     *  pattern defined
     */
    // package protected, for access from FastDateFormat; do not make public or protected
    F getTimeInstance(final int timeStyle, final TimeZone timeZone, final Locale locale)","0","-","-","-","-"
"7865","getSystemURLs","/**
     * Gets the system class loader's URLs, if any.
     *
     * @return the system class loader's URLs, if any.
     * @since 3.13.0
     */
    public static URL[] getSystemURLs()","0","-","-","-","-"
"7866","getThreadURLs","/**
     * Gets the current thread's context class loader's URLs, if any.
     *
     * @return the current thread's context class loader's URLs, if any.
     * @since 3.13.0
     */
    public static URL[] getThreadURLs()","0","-","-","-","-"
"7867","getURLs","private static URL[] getURLs(final ClassLoader cl)","0","-","-","-","-"
"7868","toString","/**
     * Converts the given class loader to a String calling","0","-","-","-","-"
"7869","toString","/**
     * Converts the given URLClassLoader to a String in the format","0","-","-","-","-"
"7870","ClassLoaderUtils","/**
     * Make private in 4.0.
     *
     * @deprecated TODO Make private in 4.0.
     */
    @Deprecated
    public ClassLoaderUtils()","0","-","-","-","-"
"7871","getAppleAwtEnableTemplateImages","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7872","getAwtToolkit","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7873","getBoolean","/**
     * Gets the current value for the property named","0","-","-","-","-"
"7874","getComSunJndiLdapObjectTrustSerialData","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7875","getComSunNetHttpServerHttpServerProvider","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7876","getFileEncoding","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7877","getFileSeparator","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7878","getFtpNonProxyHost","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7879","getFtpProxyHost","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7880","getFtpProxyPort","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7881","getHttpAgent","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7882","getHttpAuthDigestCnonceRepeat","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7883","getHttpAuthDigestReenabledAlgorithms","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7884","getHttpAuthDigestValidateProxy","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7885","getHttpAuthDigestValidateServer","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7886","getHttpAuthNtlmDomain","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7887","getHttpKeepAlive","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7888","getHttpKeepAliveTimeProxy","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7889","getHttpKeepAliveTimeServer","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7890","getHttpMaxConnections","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7891","getHttpMaxRedirects","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7892","getHttpNonProxyHosts","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7893","getHttpProxyHost","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7894","getHttpProxyPort","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7895","getHttpsProxyHost","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7896","getHttpsProxyPort","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7897","getInt","/**
     * Gets the current value for the property named","0","-","-","-","-"
"7898","getJavaAwtFonts","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7899","getJavaAwtGraphicsenv","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7900","getJavaAwtHeadless","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7901","getJavaAwtPrinterjob","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7902","getJavaClassPath","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7903","getJavaClassVersion","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7904","getJavaCompiler","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7905","getJavaContentHandlerPkgs","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7906","getJavaEndorsedDirs","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7907","getJavaExtDirs","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7908","getJavaHome","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7909","getJavaIoTmpdir","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7910","getJavaLibraryPath","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7911","getJavaLocaleProviders","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7912","getJavaLocaleUseOldIsoCodes","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7913","getJavaNetPreferIpv4Stack","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7914","getJavaNetPreferIpv6Addresses","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7915","getJavaNetSocksPassword","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7916","getJavaNetSocksUserName","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7917","getJavaNetUseSystemProxies","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7918","getJavaNioChannelsDefaultThreadPoolInitialSize","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7919","getJavaNioChannelsDefaultThreadPoolThreadFactory","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7920","getJavaNioChannelsSpiAsynchronousChannelProvider","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7921","getJavaNioChannelsSpiSelectorProvider","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7922","getJavaNioFileSpiDefaultFileSystemProvider","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7923","getJavaPropertiesDate","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7924","getJavaProtocolHandlerPkgs","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7925","getJavaRmiServerCodebase","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7926","getJavaRmiServerHostName","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7927","getJavaRmiServerRandomIds","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7928","getJavaRmiServerRmiClassLoaderSpi","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7929","getJavaRuntimeName","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7930","getJavaRuntimeVersion","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7931","getJavaSecurityAuthLoginConfig","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7932","getJavaSecurityManager","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7933","getJavaSpecificationMaintenanceVersion","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7934","getJavaSpecificationName","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7935","getJavaSpecificationVendor","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7936","getJavaSpecificationVersion","/**
     * Gets the current value from the system properties map.
     * <p>
     * Returns","0","-","-","-","-"
"7937","getJavaSpecificationVersion","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7938","getJavaSystemClassLoader","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7939","getJavaTimeZoneDefaultZoneRulesProvider","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7940","getJavaUtilConcurrentForkJoinPoolCommonExceptionHandler","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7941","getJavaUtilConcurrentForkJoinPoolCommonMaximumSpares","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7942","getJavaUtilConcurrentForkJoinPoolCommonParallelism","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7943","getJavaUtilConcurrentForkJoinPoolCommonThreadFactory","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7944","getJavaUtilCurrencyData","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7945","getJavaUtilLoggingConfigClass","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7946","getJavaUtilLoggingConfigFile","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7947","getJavaUtilLoggingSimpleFormatterFormat","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7948","getJavaUtilPrefsPreferencesFactory","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7949","getJavaUtilPropertyResourceBundleEncoding","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7950","getJavaVendor","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7951","getJavaVendorUrl","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7952","getJavaVendorVersion","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7953","getJavaVersion","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7954","getJavaVersionDate","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7955","getJavaVmInfo","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7956","getJavaVmName","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7957","getJavaVmSpecificationName","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7958","getJavaVmSpecificationVendor","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7959","getJavaVmSpecificationVersion","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7960","getJavaVmVendor","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7961","getJavaVmVersion","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7962","getJavaxAccessibilityAssistiveTechnologies","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7963","getJavaXmlConfigFile","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7964","getJavaxNetSslSessionCacheSize","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7965","getJavaxRmiSslClientEnabledCipherSuites","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7966","getJavaxRmiSslClientEnabledProtocols","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7967","getJavaxSecurityAuthUseSubjectCredsOnly","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7968","getJavaxSmartCardIoTerminalFactoryDefaultType","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7969","getJdbcDrivers","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7970","getJdkHttpAuthProxyingDisabledSchemes","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7971","getJdkHttpAuthTunnelingDisabledSchemes","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7972","getJdkHttpClientAllowRestrictedHeaders","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7973","getJdkHttpClientAuthRetryLimit","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7974","getJdkHttpClientBufSize","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7975","getJdkHttpClientConnectionPoolSize","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7976","getJdkHttpClientConnectionWindowSize","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7977","getJdkHttpClientDisableRetryConnect","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7978","getJdkHttpClientEnableAllMethodRetry","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7979","getJdkHttpClientEnablePush","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7980","getJdkHttpClientHpackMaxHeaderTableSize","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7981","getJdkHttpClientHttpClientLog","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7982","getJdkHttpClientKeepAliveTimeout","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7983","getJdkHttpClientKeepAliveTimeoutH2","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7984","getJdkHttpClientMaxFrameSize","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7985","getJdkHttpClientMaxStreams","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7986","getJdkHttpClientReceiveBufferSize","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7987","getJdkHttpClientRedirectsRetryLimit","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7988","getJdkHttpClientSendBufferSize","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7989","getJdkHttpClientWebSocketWriteBufferSize","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7990","getJdkHttpClientWindowSize","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7991","getJdkHttpServerMaxConnections","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7992","getJdkHttpsNegotiateCbt","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7993","getJdkIncludeInExceptions","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7994","getJdkInternalHttpClientDisableHostNameVerification","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7995","getJdkIoPermissionsUseCanonicalPath","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7996","getJdkJndiLdapObjectFactoriesFilter","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7997","getJdkJndiObjectFactoriesFilter","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7998","getJdkJndiRmiObjectFactoriesFilter","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"7999","getJdkModuleMain","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8000","getJdkModuleMainClass","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8001","getJdkModulePath","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8002","getJdkModuleUpgradePath","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8003","getJdkNetUnixDomainTmpDir","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8004","getJdkNetUrlClassPathShowIgnoredClassPathEntries","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8005","getJdkSerialFilter","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8006","getJdkSerialFilterFactory","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8007","getJdkTlsClientSignatureSchemes","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8008","getJdkTlsNamedGroups","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8009","getJdkTlsServerSignatureSchemes","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8010","getJdkVirtualThreadSchedulerMaxPoolSize","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8011","getJdkVirtualThreadSchedulerParallelism","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8012","getJdkXmlCdataChunkSize","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8013","getJdkXmlDtdSupport","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8014","getJdkXmlElementAttributeLimit","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8015","getJdkXmlEnableExtensionFunctions","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8016","getJdkXmlEntityExpansionLimit","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8017","getJdkXmlEntityReplacementLimit","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8018","getJdkXmlIsStandalone","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8019","getJdkXmlJdkCatalogResolve","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8020","getJdkXmlMaxElementDepth","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8021","getJdkXmlMaxGeneralEntitySizeLimit","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8022","getJdkXmlMaxOccurLimit","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8023","getJdkXmlMaxParameterEntitySizeLimit","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8024","getJdkXmlMaxXmlNameLimit","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8025","getJdkXmlOverrideDefaultParser","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8026","getJdkXmlResetSymbolTable","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8027","getJdkXmlTotalEntitySizeLimit","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8028","getJdkXmlXsltcIsStandalone","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8029","getLineSeparator","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8030","getLineSeparator","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8031","getLong","/**
     * Gets the current value for the property named","0","-","-","-","-"
"8032","getNativeEncoding","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8033","getNetworkAddressCacheNegativeTtl","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8034","getNetworkAddressCacheStaleTtl","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8035","getNetworkAddressCacheTtl","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8036","getOrgJcpXmlDsigSecureValidation","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8037","getOrgOpenJdkJavaUtilStreamTripwire","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8038","getOsArch","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8039","getOsName","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8040","getOsVersion","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8041","getPathSeparator","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8042","getProperty","/**
     * Gets a System property, defaulting to","0","-","-","-","-"
"8043","getProperty","/**
     * Gets a System property, defaulting to","0","-","-","-","-"
"8044","getProperty","/**
     * Gets a System property, defaulting to","0","-","-","-","-"
"8045","getSocksProxyHost","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8046","getSocksProxyPort","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8047","getSocksProxyVersion","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8048","getStdErrEncoding","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8049","getStdOutEncoding","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8050","getSunNetHttpServerDrainAmount","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8051","getSunNetHttpServerIdleInterval","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8052","getSunNetHttpServerMaxIdleConnections","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8053","getSunNetHttpServerMaxReqHeaders","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8054","getSunNetHttpServerMaxReqTime","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8055","getSunNetHttpServerMaxRspTime","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8056","getSunNetHttpServerNoDelay","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8057","getSunSecurityKrb5Principal","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8058","getUserCountry","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8059","getUserDir","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8060","getUserExtensions","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8061","getUserHome","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8062","getUserLanguage","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8063","getUserName","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8064","getUserName","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8065","getUserRegion","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8066","getUserScript","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8067","getUserTimezone","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8068","getUserVariant","/**
     * Gets the current value from the system properties map for","0","-","-","-","-"
"8069","SystemProperties","/**
     * Make private in 4.0.
     *
     * @deprecated TODO Make private in 4.0.
     */
    @Deprecated
    public SystemProperties()","0","-","-","-","-"
"8070","of","/**
     * Creates a closed range with the specified minimum and maximum values (both inclusive).
     *
     * <p>
     * The range uses the natural ordering of the elements to determine where values lie in the range.
     * </p>
     *
     * <p>
     * The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.
     * </p>
     *
     * @param fromInclusive the first value that defines the edge of the range, inclusive.
     * @param toInclusive the second value that defines the edge of the range, inclusive.
     * @return the range object, not null.
     */
    public static IntegerRange of(final int fromInclusive, final int toInclusive)","0","-","-","-","-"
"8071","of","/**
     * Creates a closed range with the specified minimum and maximum values (both inclusive).
     *
     * <p>
     * The range uses the natural ordering of the elements to determine where values lie in the range.
     * </p>
     *
     * <p>
     * The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.
     * </p>
     *
     * @param fromInclusive the first value that defines the edge of the range, inclusive.
     * @param toInclusive the second value that defines the edge of the range, inclusive.
     * @return the range object, not null.
     * @throws IllegalArgumentException if either element is null.
     */
    public static IntegerRange of(final Integer fromInclusive, final Integer toInclusive)","0","-","-","-","-"
"8072","IntegerRange","/**
     * Creates a new instance.
     *
     * @param number1 the first element, not null
     * @param number2 the second element, not null
     * @throws NullPointerException when element1 is null.
     * @throws NullPointerException when element2 is null.
     */
    private IntegerRange(final Integer number1, final Integer number2)","0","-","-","-","-"
"8073","toIntStream","/**
     * Returns a sequential ordered","0","-","-","-","-"
"8074","CachedRandomBits","/**
     * Creates a new instance.
     *
     * @param cacheSize number of bytes cached (only affects performance)
     * @param random random source
     */
    CachedRandomBits(final int cacheSize, final Random random)","0","-","-","-","-"
"8075","nextBits","/**
     * Generates a random integer with the specified number of bits.
     *
     * @param bits number of bits to generate, MUST be between 1 and 32
     * @return random integer with","0","-","-","-","-"
"8076","checkLaterThan1","private static boolean checkLaterThan1(final CharSequence cs, final CharSequence searchChar, final int len2, final int start1)","0","-","-","-","-"
"8077","indexOf","/**
     * Used by the indexOf(CharSequence methods) as a green implementation of indexOf.
     *
     * @param cs         the","0","-","-","-","-"
"8078","indexOf","/**
     * Returns the index within","0","-","-","-","-"
"8079","lastIndexOf","/**
     * Used by the lastIndexOf(CharSequence methods) as a green implementation of lastIndexOf
     *
     * @param cs the","0","-","-","-","-"
"8080","lastIndexOf","/**
     * Returns the index within","0","-","-","-","-"
"8081","regionMatches","/**
     * Green implementation of regionMatches.
     *
     * @param cs the","0","-","-","-","-"
"8082","subSequence","/**
     * Returns a new","0","-","-","-","-"
"8083","toCharArray","/**
     * Converts the given CharSequence to a char[].
     *
     * @param source the","0","-","-","-","-"
"8084","CharSequenceUtils","/**
     *","0","-","-","-","-"
"8085","isSupported","/**
     * Returns whether the named charset is supported.
     *
     * <p>This is similar to <a
     * href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html#isSupported%28java.lang.String%29"">
     * java.nio.charset.Charset.isSupported(String)</a> but handles more formats</p>
     *
     * @param name  the name of the requested charset; may be either a canonical name or an alias, null returns false
     * @return","0","-","-","-","-"
"8086","CharEncoding","/**
     * Constructs a new instance.
     *
     * @deprecated Will be removed in 4.0.0.
     */
    @Deprecated
    public CharEncoding()","0","-","-","-","-"
"8087","addProcessor","/**
     * Adds the given","0","-","-","-","-"
"8088","addProcessors","/**
     * Adds the given","0","-","-","-","-"
"8089","getProcessor","/**
     * Gets a","0","-","-","-","-"
"8090","getProcessor","/**
     * Gets a","0","-","-","-","-"
"8091","init","private static void init()","0","-","-","-","-"
"8092","init_Aarch_64Bit","private static void init_Aarch_64Bit()","0","-","-","-","-"
"8093","init_IA64_32Bit","private static void init_IA64_32Bit()","0","-","-","-","-"
"8094","init_IA64_64Bit","private static void init_IA64_64Bit()","0","-","-","-","-"
"8095","init_PPC_32Bit","private static void init_PPC_32Bit()","0","-","-","-","-"
"8096","init_PPC_64Bit","private static void init_PPC_64Bit()","0","-","-","-","-"
"8097","init_RISCV_32Bit","private static void init_RISCV_32Bit()","0","-","-","-","-"
"8098","init_RISCV_64Bit","private static void init_RISCV_64Bit()","0","-","-","-","-"
"8099","init_X86_32Bit","private static void init_X86_32Bit()","0","-","-","-","-"
"8100","init_X86_64Bit","private static void init_X86_64Bit()","0","-","-","-","-"
"8101","ArchUtils","/**
     * Make private in 4.0.
     *
     * @deprecated TODO Make private in 4.0.
     */
    @Deprecated
    public ArchUtils()","0","-","-","-","-"
"8102","compare","/**
     * Compares two","0","-","-","-","-"
"8103","isAscii","/**
     * Checks whether the character is ASCII 7 bit.
     *
     * <pre>
     *   CharUtils.isAscii('a')  = true
     *   CharUtils.isAscii('A')  = true
     *   CharUtils.isAscii('3')  = true
     *   CharUtils.isAscii('-')  = true
     *   CharUtils.isAscii('\n') = true
     *   CharUtils.isAscii('&copy;') = false
     * </pre>
     *
     * @param ch  the character to check
     * @return true if less than 128
     */
    public static boolean isAscii(final char ch)","0","-","-","-","-"
"8104","isAsciiAlpha","/**
     * Checks whether the character is ASCII 7 bit alphabetic.
     *
     * <pre>
     *   CharUtils.isAsciiAlpha('a')  = true
     *   CharUtils.isAsciiAlpha('A')  = true
     *   CharUtils.isAsciiAlpha('3')  = false
     *   CharUtils.isAsciiAlpha('-')  = false
     *   CharUtils.isAsciiAlpha('\n') = false
     *   CharUtils.isAsciiAlpha('&copy;') = false
     * </pre>
     *
     * @param ch  the character to check
     * @return true if between 65 and 90 or 97 and 122 inclusive
     */
    public static boolean isAsciiAlpha(final char ch)","0","-","-","-","-"
"8105","isAsciiAlphaLower","/**
     * Checks whether the character is ASCII 7 bit alphabetic lower case.
     *
     * <pre>
     *   CharUtils.isAsciiAlphaLower('a')  = true
     *   CharUtils.isAsciiAlphaLower('A')  = false
     *   CharUtils.isAsciiAlphaLower('3')  = false
     *   CharUtils.isAsciiAlphaLower('-')  = false
     *   CharUtils.isAsciiAlphaLower('\n') = false
     *   CharUtils.isAsciiAlphaLower('&copy;') = false
     * </pre>
     *
     * @param ch  the character to check
     * @return true if between 97 and 122 inclusive
     */
    public static boolean isAsciiAlphaLower(final char ch)","0","-","-","-","-"
"8106","isAsciiAlphanumeric","/**
     * Checks whether the character is ASCII 7 bit numeric.
     *
     * <pre>
     *   CharUtils.isAsciiAlphanumeric('a')  = true
     *   CharUtils.isAsciiAlphanumeric('A')  = true
     *   CharUtils.isAsciiAlphanumeric('3')  = true
     *   CharUtils.isAsciiAlphanumeric('-')  = false
     *   CharUtils.isAsciiAlphanumeric('\n') = false
     *   CharUtils.isAsciiAlphanumeric('&copy;') = false
     * </pre>
     *
     * @param ch  the character to check
     * @return true if between 48 and 57 or 65 and 90 or 97 and 122 inclusive
     */
    public static boolean isAsciiAlphanumeric(final char ch)","0","-","-","-","-"
"8107","isAsciiAlphaUpper","/**
     * Checks whether the character is ASCII 7 bit alphabetic upper case.
     *
     * <pre>
     *   CharUtils.isAsciiAlphaUpper('a')  = false
     *   CharUtils.isAsciiAlphaUpper('A')  = true
     *   CharUtils.isAsciiAlphaUpper('3')  = false
     *   CharUtils.isAsciiAlphaUpper('-')  = false
     *   CharUtils.isAsciiAlphaUpper('\n') = false
     *   CharUtils.isAsciiAlphaUpper('&copy;') = false
     * </pre>
     *
     * @param ch  the character to check
     * @return true if between 65 and 90 inclusive
     */
    public static boolean isAsciiAlphaUpper(final char ch)","0","-","-","-","-"
"8108","isAsciiControl","/**
     * Checks whether the character is ASCII 7 bit control.
     *
     * <pre>
     *   CharUtils.isAsciiControl('a')  = false
     *   CharUtils.isAsciiControl('A')  = false
     *   CharUtils.isAsciiControl('3')  = false
     *   CharUtils.isAsciiControl('-')  = false
     *   CharUtils.isAsciiControl('\n') = true
     *   CharUtils.isAsciiControl('&copy;') = false
     * </pre>
     *
     * @param ch  the character to check
     * @return true if less than 32 or equals 127
     */
    public static boolean isAsciiControl(final char ch)","0","-","-","-","-"
"8109","isAsciiNumeric","/**
     * Checks whether the character is ASCII 7 bit numeric.
     *
     * <pre>
     *   CharUtils.isAsciiNumeric('a')  = false
     *   CharUtils.isAsciiNumeric('A')  = false
     *   CharUtils.isAsciiNumeric('3')  = true
     *   CharUtils.isAsciiNumeric('-')  = false
     *   CharUtils.isAsciiNumeric('\n') = false
     *   CharUtils.isAsciiNumeric('&copy;') = false
     * </pre>
     *
     * @param ch  the character to check
     * @return true if between 48 and 57 inclusive
     */
    public static boolean isAsciiNumeric(final char ch)","0","-","-","-","-"
"8110","isAsciiPrintable","/**
     * Checks whether the character is ASCII 7 bit printable.
     *
     * <pre>
     *   CharUtils.isAsciiPrintable('a')  = true
     *   CharUtils.isAsciiPrintable('A')  = true
     *   CharUtils.isAsciiPrintable('3')  = true
     *   CharUtils.isAsciiPrintable('-')  = true
     *   CharUtils.isAsciiPrintable('\n') = false
     *   CharUtils.isAsciiPrintable('&copy;') = false
     * </pre>
     *
     * @param ch  the character to check
     * @return true if between 32 and 126 inclusive
     */
    public static boolean isAsciiPrintable(final char ch)","0","-","-","-","-"
"8111","toChar","/**
     * Converts the Character to a char throwing an exception for","0","-","-","-","-"
"8112","toChar","/**
     * Converts the Character to a char handling","0","-","-","-","-"
"8113","toChar","/**
     * Converts the String to a char using the first character, throwing
     * an exception on empty Strings.
     *
     * <pre>
     *   CharUtils.toChar(""A"")  = 'A'
     *   CharUtils.toChar(""BA"") = 'B'
     *   CharUtils.toChar(null) throws IllegalArgumentException
     *   CharUtils.toChar("""")   throws IllegalArgumentException
     * </pre>
     *
     * @param str  the character to convert
     * @return the char value of the first letter of the String
     * @throws NullPointerException if the string is null
     * @throws IllegalArgumentException if the String is empty
     */
    public static char toChar(final String str)","0","-","-","-","-"
"8114","toChar","/**
     * Converts the String to a char using the first character, defaulting
     * the value on empty Strings.
     *
     * <pre>
     *   CharUtils.toChar(null, 'X') = 'X'
     *   CharUtils.toChar("""", 'X')   = 'X'
     *   CharUtils.toChar(""A"", 'X')  = 'A'
     *   CharUtils.toChar(""BA"", 'X') = 'B'
     * </pre>
     *
     * @param str  the character to convert
     * @param defaultValue  the value to use if the  Character is null
     * @return the char value of the first letter of the String or the default if null
     */
    public static char toChar(final String str, final char defaultValue)","0","-","-","-","-"
"8115","toCharacterObject","/**
     * Delegates to","0","-","-","-","-"
"8116","toCharacterObject","/**
     * Converts the String to a Character using the first character, returning
     * null for empty Strings.
     *
     * <p>For ASCII 7 bit characters, this uses a cache that will return the
     * same Character object each time.</p>
     *
     * <pre>
     *   CharUtils.toCharacterObject(null) = null
     *   CharUtils.toCharacterObject("""")   = null
     *   CharUtils.toCharacterObject(""A"")  = 'A'
     *   CharUtils.toCharacterObject(""BA"") = 'B'
     * </pre>
     *
     * @param str  the character to convert
     * @return the Character value of the first letter of the String
     */
    public static Character toCharacterObject(final String str)","0","-","-","-","-"
"8117","toIntValue","/**
     * Converts the character to the Integer it represents, throwing an
     * exception if the character is not numeric.
     *
     * <p>This method converts the char '1' to the int 1 and so on.</p>
     *
     * <pre>
     *   CharUtils.toIntValue('3')  = 3
     *   CharUtils.toIntValue('A')  throws IllegalArgumentException
     * </pre>
     *
     * @param ch  the character to convert
     * @return the int value of the character
     * @throws IllegalArgumentException if the character is not ASCII numeric
     */
    public static int toIntValue(final char ch)","0","-","-","-","-"
"8118","toIntValue","/**
     * Converts the character to the Integer it represents, throwing an
     * exception if the character is not numeric.
     *
     * <p>This method converts the char '1' to the int 1 and so on.</p>
     *
     * <pre>
     *   CharUtils.toIntValue('3', -1)  = 3
     *   CharUtils.toIntValue('A', -1)  = -1
     * </pre>
     *
     * @param ch  the character to convert
     * @param defaultValue  the default value to use if the character is not numeric
     * @return the int value of the character
     */
    public static int toIntValue(final char ch, final int defaultValue)","0","-","-","-","-"
"8119","toIntValue","/**
     * Converts the character to the Integer it represents, throwing an
     * exception if the character is not numeric.
     *
     * <p>This method converts the char '1' to the int 1 and so on.</p>
     *
     * <pre>
     *   CharUtils.toIntValue('3')  = 3
     *   CharUtils.toIntValue(null) throws IllegalArgumentException
     *   CharUtils.toIntValue('A')  throws IllegalArgumentException
     * </pre>
     *
     * @param ch  the character to convert, not null
     * @return the int value of the character
     * @throws NullPointerException if the Character is null
     * @throws IllegalArgumentException if the Character is not ASCII numeric
     */
    public static int toIntValue(final Character ch)","0","-","-","-","-"
"8120","toIntValue","/**
     * Converts the character to the Integer it represents, throwing an
     * exception if the character is not numeric.
     *
     * <p>This method converts the char '1' to the int 1 and so on.</p>
     *
     * <pre>
     *   CharUtils.toIntValue(null, -1) = -1
     *   CharUtils.toIntValue('3', -1)  = 3
     *   CharUtils.toIntValue('A', -1)  = -1
     * </pre>
     *
     * @param ch  the character to convert
     * @param defaultValue  the default value to use if the character is not numeric
     * @return the int value of the character
     */
    public static int toIntValue(final Character ch, final int defaultValue)","0","-","-","-","-"
"8121","toString","/**
     * Converts the character to a String that contains the one character.
     *
     * <p>For ASCII 7 bit characters, this uses a cache that will return the
     * same String object each time.</p>
     *
     * <pre>
     *   CharUtils.toString(' ')  = "" ""
     *   CharUtils.toString('A')  = ""A""
     * </pre>
     *
     * @param ch  the character to convert
     * @return a String containing the one specified character
     */
    public static String toString(final char ch)","0","-","-","-","-"
"8122","toString","/**
     * Converts the character to a String that contains the one character.
     *
     * <p>For ASCII 7 bit characters, this uses a cache that will return the
     * same String object each time.</p>
     *
     * <p>If","0","-","-","-","-"
"8123","unicodeEscaped","/**
     * Converts the string to the Unicode format '\u0020'.
     *
     * <p>This format is the Java source code format.</p>
     *
     * <pre>
     *   CharUtils.unicodeEscaped(' ') = ""\u0020""
     *   CharUtils.unicodeEscaped('A') = ""\u0041""
     * </pre>
     *
     * @param ch  the character to convert
     * @return the escaped Unicode string
     */
    public static String unicodeEscaped(final char ch)","0","-","-","-","-"
"8124","unicodeEscaped","/**
     * Converts the string to the Unicode format '\u0020'.
     *
     * <p>This format is the Java source code format.</p>
     *
     * <p>If","0","-","-","-","-"
"8125","CharUtils","/**
     *","0","-","-","-","-"
"8126","SerializationException","/**
     * Constructs a new","0","-","-","-","-"
"8127","SerializationException","/**
     * Constructs a new","0","-","-","-","-"
"8128","SerializationException","/**
     * Constructs a new","0","-","-","-","-"
"8129","SerializationException","/**
     * Constructs a new","0","-","-","-","-"
"8130","Arch","Arch(final String label)","0","-","-","-","-"
"8131","getLabel","/**
         * Gets the label suitable for display.
         *
         * @return the label.
         */
        public String getLabel()","0","-","-","-","-"
"8132","AARCH_64","/**
         * ARM 64-bit.
         *
         * @since 3.13.0
         */
        AARCH_64(""AArch64""),

        /**
         * Intel x86 series of instruction set architectures.
         */
        X86(""x86""),

        /**
         * Intel Itanium 64-bit architecture.
         */
        IA_64(""IA-64""),

        /**
         * Apple–IBM–Motorola PowerPC architecture.
         */
        PPC(""PPC""),

        /**
         * RISC-V architecture.
         *
         * @since 3.14.0
         */
        RISC_V(""RISC-V""),

        /**
         * Unknown architecture.
         */
        UNKNOWN(""Unknown"");","0","-","-","-","-"
"8133","Type","Type(final String label)","0","-","-","-","-"
"8134","getLabel","/**
         * Gets the label suitable for display.
         *
         * @return the label.
         * @since 3.13.0
         */
        public String getLabel()","0","-","-","-","-"
"8135","Processor","/**
     * Constructs a","0","-","-","-","-"
"8136","getArch","/**
     * Gets the processor architecture as an","0","-","-","-","-"
"8137","getType","/**
     * Gets the processor type as","0","-","-","-","-"
"8138","is32Bit","/**
     * Tests if","0","-","-","-","-"
"8139","is64Bit","/**
     * Tests if","0","-","-","-","-"
"8140","isAarch64","/**
     * Tests if","0","-","-","-","-"
"8141","isIA64","/**
     * Tests if","0","-","-","-","-"
"8142","isPPC","/**
     * Tests if","0","-","-","-","-"
"8143","isRISCV","/**
     * Tests if","0","-","-","-","-"
"8144","isX86","/**
     * Tests if","0","-","-","-","-"
"8145","toString","@Override
    public String toString()","0","-","-","-","-"
"8146","checkState","/**
     * Checks the state of this circuit breaker and changes it if necessary. The return
     * value indicates whether the circuit breaker is now in state <em>closed</em>; a value
     * of <strong>true</strong> typically means that the current operation can continue.
     *
     * @return <strong>true</strong> if the circuit breaker is now closed;
     * <strong>false</strong> otherwise.
     */
    boolean checkState();","0","-","-","-","-"
"8147","close","/**
     * Closes this circuit breaker. Its state is changed to closed. If this circuit
     * breaker is already closed, this method has no effect.
     */
    void close();","0","-","-","-","-"
"8148","incrementAndCheckState","/**
     * Increments the monitored value and performs a check of the current state of this
     * circuit breaker. This method works like","0","-","-","-","-"
"8149","isClosed","/**
     * Tests the current closed state of this circuit breaker. A return value of
     * <strong>true</strong> means that the circuit breaker is currently closed. This
     * means that everything is okay with the monitored subsystem.
     *
     * @return the current closed state of this circuit breaker.
     */
    boolean isClosed();","0","-","-","-","-"
"8150","isOpen","/**
     * Tests the current open state of this circuit breaker. A return value of
     * <strong>true</strong> means that the circuit breaker is currently open indicating a
     * problem in the monitored subsystem.
     *
     * @return the current open state of this circuit breaker.
     */
    boolean isOpen();","0","-","-","-","-"
"8151","open","/**
     * Opens this circuit breaker. Its state is changed to open. Depending on a concrete
     * implementation, it may close itself again if the monitored subsystem becomes
     * available. If this circuit breaker is already open, this method has no effect.
     */
    void open();","0","-","-","-","-"
"8152","Builder","/**
         * Constructs a new instance.
         */
        public Builder()","0","-","-","-","-"
"8153","get","@SuppressWarnings(""unchecked"")
        @Override
        public I get()","0","-","-","-","-"
"8154","builder","/**
     * Creates a new builder.
     *
     * @param <T> the type of object to build.
     * @return a new builder.
     * @since 3.14.0
     */
    public static <T> Builder<AtomicInitializer<T>, T> builder()","0","-","-","-","-"
"8155","AtomicInitializer","/**
     * Constructs a new instance.
     */
    public AtomicInitializer()","0","-","-","-","-"
"8156","AtomicInitializer","/**
     * Constructs a new instance.
     *
     * @param initializer the initializer supplier called by","0","-","-","-","-"
"8157","get","/**
     * Returns the object managed by this initializer. The object is created if
     * it is not available yet and stored internally. This method always returns
     * the same object.
     *
     * @return the object created by this","0","-","-","-","-"
"8158","getNoInit","/** Gets the internal no-init object cast for this instance. */
    @SuppressWarnings(""unchecked"")
    private T getNoInit()","0","-","-","-","-"
"8159","getTypedException","/**
     *","0","-","-","-","-"
"8160","isInitialized","/**
     * Tests whether this instance is initialized. Once initialized, always returns true.
     *
     * @return whether this instance is initialized. Once initialized, always returns true.
     * @since 3.14.0
     */
    @Override
    public boolean isInitialized()","0","-","-","-","-"
"8161","LockVisitor","/**
         * Constructs an instance.
         *
         * @param object The object to guard.
         * @param lock The locking object.
         * @param readLockSupplier Supplies the read lock, usually from the lock object.
         * @param writeLockSupplier Supplies the write lock, usually from the lock object.
         */
        protected LockVisitor(final O object, final L lock, final Supplier<Lock> readLockSupplier, final Supplier<Lock> writeLockSupplier)","0","-","-","-","-"
"8162","acceptReadLocked","/**
         * Provides read (shared, non-exclusive) access to the locked (hidden) object. More precisely, what the method
         * will do (in the given order):
         *
         * <ol>
         * <li>Obtain a read (shared) lock on the locked (hidden) object. The current thread may block, until such a
         * lock is granted.</li>
         * <li>Invokes the given","0","-","-","-","-"
"8163","acceptWriteLocked","/**
         * Provides write (exclusive) access to the locked (hidden) object. More precisely, what the method will do (in
         * the given order):
         *
         * <ol>
         * <li>Obtain a write (shared) lock on the locked (hidden) object. The current thread may block, until such a
         * lock is granted.</li>
         * <li>Invokes the given","0","-","-","-","-"
"8164","applyReadLocked","/**
         * Provides read (shared, non-exclusive) access to the locked (hidden) object for the purpose of computing a
         * result object. More precisely, what the method will do (in the given order):
         *
         * <ol>
         * <li>Obtain a read (shared) lock on the locked (hidden) object. The current thread may block, until such a
         * lock is granted.</li>
         * <li>Invokes the given","0","-","-","-","-"
"8165","applyWriteLocked","/**
         * Provides write (exclusive) access to the locked (hidden) object for the purpose of computing a result object.
         * More precisely, what the method will do (in the given order):
         *
         * <ol>
         * <li>Obtain a read (shared) lock on the locked (hidden) object. The current thread may block, until such a
         * lock is granted.</li>
         * <li>Invokes the given","0","-","-","-","-"
"8166","getLock","/**
         * Gets the lock.
         *
         * @return the lock.
         */
        public L getLock()","0","-","-","-","-"
"8167","getObject","/**
         * Gets the guarded object.
         *
         * @return the object.
         */
        public O getObject()","0","-","-","-","-"
"8168","lockAcceptUnlock","/**
         * This method provides the default implementation for","0","-","-","-","-"
"8169","lockApplyUnlock","/**
         * This method provides the actual implementation for","0","-","-","-","-"
"8170","ReadWriteLockVisitor","/**
         * Creates a new instance with the given locked object. This constructor is supposed to be used for subclassing
         * only. In general, it is suggested to use","0","-","-","-","-"
"8171","StampedLockVisitor","/**
         * Creates a new instance with the given locked object. This constructor is supposed to be used for subclassing
         * only. In general, it is suggested to use","0","-","-","-","-"
"8172","create","/**
     * Creates a new instance of","0","-","-","-","-"
"8173","reentrantReadWriteLockVisitor","/**
     * Creates a new instance of","0","-","-","-","-"
"8174","stampedLockVisitor","/**
     * Creates a new instance of","0","-","-","-","-"
"8175","LockingVisitors","/**
     * Make private in 4.0.
     *
     * @deprecated TODO Make private in 4.0.
     */
    @Deprecated
    public LockingVisitors()","0","-","-","-","-"
"8176","ConstantInitializer","/**
     * Creates a new instance of","0","-","-","-","-"
"8177","equals","/**
     * Compares this object with another one. This implementation returns
     * <strong>true</strong> if and only if the passed in object is an instance of
     *","0","-","-","-","-"
"8178","get","/**
     * Returns the object managed by this initializer. This implementation just
     * returns the object passed to the constructor.
     *
     * @return the object managed by this initializer
     * @throws ConcurrentException if an error occurs
     */
    @Override
    public T get() throws ConcurrentException","0","-","-","-","-"
"8179","getObject","/**
     * Directly returns the object that was passed to the constructor. This is
     * the same object as returned by","0","-","-","-","-"
"8180","hashCode","/**
     * Returns a hash code for this object. This implementation returns the hash
     * code of the managed object.
     *
     * @return a hash code for this object
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"8181","isInitialized","/**
     * As a","0","-","-","-","-"
"8182","toString","/**
     * Returns a string representation for this object. This string also
     * contains a string representation of the object managed by this
     * initializer.
     *
     * @return a string for this object
     */
    @Override
    public String toString()","0","-","-","-","-"
"8183","TimedSemaphore","/**
     * Creates a new instance of","0","-","-","-","-"
"8184","TimedSemaphore","/**
     * Creates a new instance of","0","-","-","-","-"
"8185","acquire","/**
     * Acquires a permit from this semaphore. This method will block if
     * the limit for the current period has already been reached. If
     *","0","-","-","-","-"
"8186","acquirePermit","/**
     * Internal helper method for acquiring a permit. This method checks whether currently
     * a permit can be acquired and - if so - increases the internal counter. The return
     * value indicates whether a permit could be acquired. This method must be called with
     * the lock of this object held.
     *
     * @return a flag whether a permit could be acquired
     */
    private boolean acquirePermit()","0","-","-","-","-"
"8187","endOfPeriod","/**
     * The current time period is finished. This method is called by the timer
     * used internally to monitor the time period. It resets the counter and
     * releases the threads waiting for this barrier.
     */
    synchronized void endOfPeriod()","0","-","-","-","-"
"8188","getAcquireCount","/**
     * Returns the number of invocations of the","0","-","-","-","-"
"8189","getAvailablePermits","/**
     * Returns the number of calls to the","0","-","-","-","-"
"8190","getAverageCallsPerPeriod","/**
     * Returns the average number of successful (i.e. non-blocking)
     *","0","-","-","-","-"
"8191","getExecutorService","/**
     * Returns the executor service used by this instance.
     *
     * @return the executor service
     */
    protected ScheduledExecutorService getExecutorService()","0","-","-","-","-"
"8192","getLastAcquiresPerPeriod","/**
     * Returns the number of (successful) acquire invocations during the last
     * period. This is the number of times the","0","-","-","-","-"
"8193","getLimit","/**
     * Returns the limit enforced by this semaphore. The limit determines how
     * many invocations of","0","-","-","-","-"
"8194","getPeriod","/**
     * Returns the time period. This is the time monitored by this semaphore.
     * Only a given number of invocations of the","0","-","-","-","-"
"8195","getUnit","/**
     * Returns the time unit. This is the unit used by","0","-","-","-","-"
"8196","isShutdown","/**
     * Tests whether the","0","-","-","-","-"
"8197","prepareAcquire","/**
     * Prepares an acquire operation. Checks for the current state and starts the internal
     * timer if necessary. This method must be called with the lock of this object held.
     */
    private void prepareAcquire()","0","-","-","-","-"
"8198","setLimit","/**
     * Sets the limit. This is the number of times the","0","-","-","-","-"
"8199","shutdown","/**
     * Initializes a shutdown. After that the object cannot be used anymore.
     * This method can be invoked an arbitrary number of times. All invocations
     * after the first one do not have any effect.
     */
    public synchronized void shutdown()","0","-","-","-","-"
"8200","startTimer","/**
     * Starts the timer. This method is called when","0","-","-","-","-"
"8201","tryAcquire","/**
     * Tries to acquire a permit from this semaphore. If the limit of this semaphore has
     * not yet been reached, a permit is acquired, and this method returns
     * <strong>true</strong>. Otherwise, this method returns immediately with the result
     * <strong>false</strong>.
     *
     * @return <strong>true</strong> if a permit could be acquired; <strong>false</strong>
     * otherwise
     * @throws IllegalStateException if this semaphore is already shut down
     * @since 3.5
     */
    public synchronized boolean tryAcquire()","0","-","-","-","-"
"8202","compute","/**
     * This method carries out the given operation with the provided argument.
     *
     * @param arg
     *            the argument for the calculation
     * @return the result of the calculation
     * @throws InterruptedException
     *             thrown if the calculation is interrupted
     */
    O compute(I arg) throws InterruptedException;","0","-","-","-","-"
"8203","AbstractBuilder","/**
         * Constructs a new instance.
         */
        public AbstractBuilder()","0","-","-","-","-"
"8204","getCloser","/**
         * Gets the closer consumer called by","0","-","-","-","-"
"8205","getInitializer","/**
         * Gets the initializer supplier called by","0","-","-","-","-"
"8206","setCloser","/**
         * Sets the closer consumer called by","0","-","-","-","-"
"8207","setInitializer","/**
         * Sets the initializer supplier called by","0","-","-","-","-"
"8208","AbstractConcurrentInitializer","/**
     * Constructs a new instance.
     */
    public AbstractConcurrentInitializer()","0","-","-","-","-"
"8209","AbstractConcurrentInitializer","/**
     * Constructs a new instance.
     *
     * @param initializer the initializer supplier called by","0","-","-","-","-"
"8210","close","/**
     * Calls the closer with the manager object.
     *
     * @throws ConcurrentException Thrown by the closer.
     * @since 3.14.0
     */
    public void close() throws ConcurrentException","0","-","-","-","-"
"8211","getTypedException","/**
     * Gets an Exception with a type of E as defined by a concrete subclass of this class.
     *
     * @param e The actual exception that was thrown
     * @return a new exception with the actual type of E, that wraps e.
     */
    protected abstract E getTypedException(Exception e);","0","-","-","-","-"
"8212","initialize","/**
     * Creates and initializes the object managed by this","0","-","-","-","-"
"8213","isInitialized","/**
     * Returns true if initialization has been completed. If initialization threw an exception this will return false, but it will return true if a subsequent
     * call to initialize completes successfully. If the implementation of ConcurrentInitializer can initialize multiple objects, this will only return true if
     * all objects have been initialized.
     *
     * @return true if all initialization is complete, otherwise false
     */
    protected abstract boolean isInitialized();","0","-","-","-","-"
"8214","ConcurrentException","/**
     * Creates a new, uninitialized instance of","0","-","-","-","-"
"8215","ConcurrentException","/**
     * Creates a new instance of","0","-","-","-","-"
"8216","ConcurrentException","/**
     * Creates a new instance of","0","-","-","-","-"
"8217","ConstantFuture","/**
         * Creates a new instance of","0","-","-","-","-"
"8218","cancel","/**
         *","0","-","-","-","-"
"8219","get","/**
         *","0","-","-","-","-"
"8220","get","/**
         *","0","-","-","-","-"
"8221","isCancelled","/**
         *","0","-","-","-","-"
"8222","isDone","/**
         *","0","-","-","-","-"
"8223","checkedException","/**
     * Tests whether the specified","0","-","-","-","-"
"8224","constantFuture","/**
     * Gets an implementation of","0","-","-","-","-"
"8225","createIfAbsent","/**
     * Checks if a concurrent map contains a key and creates a corresponding
     * value if not. This method first checks the presence of the key in the
     * given map. If it is already contained, its value is returned. Otherwise
     * the","0","-","-","-","-"
"8226","createIfAbsentUnchecked","/**
     * Checks if a concurrent map contains a key and creates a corresponding
     * value if not, suppressing checked exceptions. This method calls
     *","0","-","-","-","-"
"8227","extractCause","/**
     * Inspects the cause of the specified","0","-","-","-","-"
"8228","extractCauseUnchecked","/**
     * Inspects the cause of the specified","0","-","-","-","-"
"8229","handleCause","/**
     * Handles the specified","0","-","-","-","-"
"8230","handleCauseUnchecked","/**
     * Handles the specified","0","-","-","-","-"
"8231","initialize","/**
     * Invokes the specified","0","-","-","-","-"
"8232","initializeUnchecked","/**
     * Invokes the specified","0","-","-","-","-"
"8233","putIfAbsent","/**
     * Puts a value in the specified","0","-","-","-","-"
"8234","ConcurrentUtils","/**
     * Private constructor so that no instances can be created. This class
     * contains only static utility methods.
     */
    private ConcurrentUtils()","0","-","-","-","-"
"8235","ConcurrentRuntimeException","/**
     * Creates a new, uninitialized instance of","0","-","-","-","-"
"8236","ConcurrentRuntimeException","/**
     * Creates a new instance of","0","-","-","-","-"
"8237","ConcurrentRuntimeException","/**
     * Creates a new instance of","0","-","-","-","-"
"8238","ThresholdCircuitBreaker","/**
     * Creates a new instance of","0","-","-","-","-"
"8239","checkState","/**
     *","0","-","-","-","-"
"8240","close","/**
     *","0","-","-","-","-"
"8241","getThreshold","/**
     * Gets the threshold.
     *
     * @return the threshold
     */
    public long getThreshold()","0","-","-","-","-"
"8242","incrementAndCheckState","/**
     *","0","-","-","-","-"
"8243","Builder","/**
         * Constructs a new instance.
         */
        public Builder()","0","-","-","-","-"
"8244","get","@SuppressWarnings(""unchecked"")
        @Override
        public I get()","0","-","-","-","-"
"8245","setExternalExecutor","/**
         * Sets the external executor service for executing tasks. null is a permitted value.
         *
         * @see org.apache.commons.lang3.concurrent.BackgroundInitializer#setExternalExecutor(ExecutorService)
         * @param externalExecutor the","0","-","-","-","-"
"8246","InitializationTask","/**
         * Creates a new instance of","0","-","-","-","-"
"8247","call","/**
         * Initiates initialization and returns the result.
         *
         * @return the result object
         * @throws Exception if an error occurs
         */
        @Override
        public T call() throws Exception","0","-","-","-","-"
"8248","builder","/**
     * Creates a new builder.
     *
     * @param <T> the type of object to build.
     * @return a new builder.
     * @since 3.14.0
     */
    public static <T> Builder<BackgroundInitializer<T>, T> builder()","0","-","-","-","-"
"8249","BackgroundInitializer","/**
     * Creates a new instance of","0","-","-","-","-"
"8250","BackgroundInitializer","/**
     * Creates a new instance of","0","-","-","-","-"
"8251","BackgroundInitializer","/**
     * Constructs a new instance.
     *
     * @param initializer the initializer supplier called by","0","-","-","-","-"
"8252","createExecutor","/**
     * Creates the","0","-","-","-","-"
"8253","createTask","/**
     * Creates a task for the background initialization. The","0","-","-","-","-"
"8254","get","/**
     * Returns the result of the background initialization. This method blocks
     * until initialization is complete. If the background processing caused a
     * runtime exception, it is directly thrown by this method. Checked
     * exceptions, including","0","-","-","-","-"
"8255","getActiveExecutor","/**
     * Returns the","0","-","-","-","-"
"8256","getExternalExecutor","/**
     * Returns the external","0","-","-","-","-"
"8257","getFuture","/**
     * Returns the","0","-","-","-","-"
"8258","getTaskCount","/**
     * Returns the number of background tasks to be created for this
     * initializer. This information is evaluated when a temporary","0","-","-","-","-"
"8259","getTypedException","/**
     *","0","-","-","-","-"
"8260","isInitialized","/**
     * Tests whether this instance is initialized. Once initialized, always returns true.
     * If initialization failed then the failure will be cached and this will never return
     * true.
     *
     * @return true if initialization completed successfully, otherwise false
     * @since 3.14.0
     */
    @Override
    public synchronized boolean isInitialized()","0","-","-","-","-"
"8261","isStarted","/**
     * Returns a flag whether this","0","-","-","-","-"
"8262","setExternalExecutor","/**
     * Sets an","0","-","-","-","-"
"8263","start","/**
     * Starts the background initialization. With this method the initializer
     * becomes active and invokes the","0","-","-","-","-"
"8264","Builder","/**
         * Constructs a new instance.
         *
         * @deprecated Use","0","-","-","-","-"
"8265","build","/**
         * Creates a new","0","-","-","-","-"
"8266","daemon","/**
         * Sets the daemon flag for the new","0","-","-","-","-"
"8267","daemon","/**
         * Sets the daemon flag for the new","0","-","-","-","-"
"8268","namingPattern","/**
         * Sets the naming pattern to be used by the new","0","-","-","-","-"
"8269","priority","/**
         * Sets the priority for the threads created by the new","0","-","-","-","-"
"8270","reset","/**
         * Resets this builder. All configuration options are set to default
         * values. Note: If the","0","-","-","-","-"
"8271","uncaughtExceptionHandler","/**
         * Sets the uncaught exception handler for the threads created by the
         * new","0","-","-","-","-"
"8272","wrappedFactory","/**
         * Sets the","0","-","-","-","-"
"8273","builder","/**
     * Creates a new builder.
     *
     * @return a new builder.
     * @since 3.18.0
     */
    public static Builder builder()","0","-","-","-","-"
"8274","BasicThreadFactory","/**
     * Creates a new instance of","0","-","-","-","-"
"8275","getDaemonFlag","/**
     * Gets the daemon flag. This flag determines whether newly created
     * threads should be daemon threads. If <strong>true</strong>, this factory object
     * calls","0","-","-","-","-"
"8276","getNamingPattern","/**
     * Gets the naming pattern for naming newly created threads. Result can
     * be <strong>null</strong> if no naming pattern was provided.
     *
     * @return the naming pattern
     */
    public final String getNamingPattern()","0","-","-","-","-"
"8277","getPriority","/**
     * Gets the priority of the threads created by this factory. Result can
     * be <strong>null</strong> if no priority was specified.
     *
     * @return the priority for newly created threads
     */
    public final Integer getPriority()","0","-","-","-","-"
"8278","getThreadCount","/**
     * Gets the number of threads this factory has already created. This
     * class maintains an internal counter that is incremented each time the
     *","0","-","-","-","-"
"8279","getUncaughtExceptionHandler","/**
     * Gets the","0","-","-","-","-"
"8280","getWrappedFactory","/**
     * Gets the wrapped","0","-","-","-","-"
"8281","initializeThread","/**
     * Initializes the specified thread. This method is called by
     *","0","-","-","-","-"
"8282","newThread","/**
     * Creates a new thread. This implementation delegates to the wrapped
     * factory for creating the thread. Then, on the newly created thread the
     * corresponding configuration options are set.
     *
     * @param runnable the","0","-","-","-","-"
"8283","UncheckedFutureImpl","UncheckedFutureImpl(final Future<V> future)","0","-","-","-","-"
"8284","get","@Override
    public V get()","0","-","-","-","-"
"8285","get","@Override
    public V get(final long timeout, final TimeUnit unit)","0","-","-","-","-"
"8286","UncheckedTimeoutException","/**
     * Constructs an instance initialized to the given","0","-","-","-","-"
"8287","oppositeState","/**
             *","0","-","-","-","-"
"8288","oppositeState","/**
             *","0","-","-","-","-"
"8289","oppositeState","/**
         * Returns the opposite state to the represented state. This is useful
         * for flipping the current state.
         *
         * @return the opposite state
         */
        public abstract State oppositeState();","0","-","-","-","-"
"8290","isOpen","/**
     * Converts the given state value to a boolean <em>open</em> property.
     *
     * @param state the state to be converted
     * @return the boolean open flag
     */
    protected static boolean isOpen(final State state)","0","-","-","-","-"
"8291","AbstractCircuitBreaker","/**
     * Creates an","0","-","-","-","-"
"8292","addChangeListener","/**
     * Adds a change listener to this circuit breaker. This listener is notified whenever
     * the state of this circuit breaker changes. If the listener is
     * <strong>null</strong>, it is silently ignored.
     *
     * @param listener the listener to be added
     */
    public void addChangeListener(final PropertyChangeListener listener)","0","-","-","-","-"
"8293","changeState","/**
     * Changes the internal state of this circuit breaker. If there is actually a change
     * of the state value, all registered change listeners are notified.
     *
     * @param newState the new state to be set
     */
    protected void changeState(final State newState)","0","-","-","-","-"
"8294","checkState","/**
     *","0","-","-","-","-"
"8295","close","/**
     *","0","-","-","-","-"
"8296","incrementAndCheckState","/**
     *","0","-","-","-","-"
"8297","isClosed","/**
     *","0","-","-","-","-"
"8298","isOpen","/**
     *","0","-","-","-","-"
"8299","open","/**
     *","0","-","-","-","-"
"8300","removeChangeListener","/**
     * Removes the specified change listener from this circuit breaker.
     *
     * @param listener the listener to be removed
     */
    public void removeChangeListener(final PropertyChangeListener listener)","0","-","-","-","-"
"8301","Builder","/**
         * Constructs a new instance.
         */
        public Builder()","0","-","-","-","-"
"8302","get","@SuppressWarnings(""unchecked"")
        @Override
        public I get()","0","-","-","-","-"
"8303","builder","/**
     * Creates a new builder.
     *
     * @param <T> the type of object to build.
     * @return a new builder.
     * @since 3.14.0
     */
    public static <T> Builder<LazyInitializer<T>, T> builder()","0","-","-","-","-"
"8304","LazyInitializer","/**
     * Constructs a new instance.
     */
    public LazyInitializer()","0","-","-","-","-"
"8305","LazyInitializer","/**
     * Constructs a new instance.
     *
     * @param initializer the initializer supplier called by","0","-","-","-","-"
"8306","get","/**
     * Returns the object wrapped by this instance. On first access the object is created. After that it is cached and can be accessed pretty fast.
     *
     * @return the object initialized by this","0","-","-","-","-"
"8307","getTypedException","/**
     *","0","-","-","-","-"
"8308","isInitialized","/**
     * Tests whether this instance is initialized. Once initialized, always returns true.
     *
     * @return whether this instance is initialized. Once initialized, always returns true.
     * @since 3.14.0
     */
    @Override
    public boolean isInitialized()","0","-","-","-","-"
"8309","CircuitBreakingException","/**
     * Creates a new, uninitialized instance of","0","-","-","-","-"
"8310","CircuitBreakingException","/**
     * Creates a new instance of","0","-","-","-","-"
"8311","CircuitBreakingException","/**
     * Creates a new instance of","0","-","-","-","-"
"8312","CircuitBreakingException","/**
     * Creates a new instance of","0","-","-","-","-"
"8313","AbstractFutureProxy","/**
     * Constructs a new instance.
     *
     * @param future the delegate.
     */
    public AbstractFutureProxy(final Future<V> future)","0","-","-","-","-"
"8314","cancel","@Override
    public boolean cancel(final boolean mayInterruptIfRunning)","0","-","-","-","-"
"8315","get","@Override
    public V get() throws InterruptedException, ExecutionException","0","-","-","-","-"
"8316","get","@Override
    public V get(final long timeout, final TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException","0","-","-","-","-"
"8317","getFuture","/**
     * Gets the delegate.
     *
     * @return the delegate.
     */
    public Future<V> getFuture()","0","-","-","-","-"
"8318","isCancelled","@Override
    public boolean isCancelled()","0","-","-","-","-"
"8319","isDone","@Override
    public boolean isDone()","0","-","-","-","-"
"8320","map","/**
     * Maps the given instances as unchecked.
     *
     * @param <T> The result type returned by the Futures'","0","-","-","-","-"
"8321","on","/**
     * Maps the given instances as unchecked.
     *
     * @param <T> The result type returned by the Futures'","0","-","-","-","-"
"8322","on","/**
     * Creates a new instance on the given Future.
     *
     * @param <T> The result type returned by this Future's","0","-","-","-","-"
"8323","get","/**
     * Gets per","0","-","-","-","-"
"8324","get","/**
     * Gets per","0","-","-","-","-"
"8325","MultiBackgroundInitializerResults","/**
         * Creates a new instance of","0","-","-","-","-"
"8326","checkName","/**
         * Checks whether an initializer with the given name exists. If not,
         * throws an exception. If it exists, the associated child initializer
         * is returned.
         *
         * @param name the name to check
         * @return the initializer with this name
         * @throws NoSuchElementException if the name is unknown
         */
        private BackgroundInitializer<?> checkName(final String name)","0","-","-","-","-"
"8327","getException","/**
         * Returns the","0","-","-","-","-"
"8328","getInitializer","/**
         * Returns the","0","-","-","-","-"
"8329","getResultObject","/**
         * Returns the result object produced by the","0","-","-","-","-"
"8330","initializerNames","/**
         * Returns a set with the names of all","0","-","-","-","-"
"8331","isException","/**
         * Returns a flag whether the","0","-","-","-","-"
"8332","isSuccessful","/**
         * Returns a flag whether the whole initialization was successful. This
         * is the case if no child initializer has thrown an exception.
         *
         * @return a flag whether the initialization was successful
         */
        public boolean isSuccessful()","0","-","-","-","-"
"8333","MultiBackgroundInitializer","/**
     * Creates a new instance of","0","-","-","-","-"
"8334","MultiBackgroundInitializer","/**
     * Creates a new instance of","0","-","-","-","-"
"8335","addInitializer","/**
     * Adds a new","0","-","-","-","-"
"8336","close","/**
     * Calls the closer of all child","0","-","-","-","-"
"8337","getTaskCount","/**
     * Returns the number of tasks needed for executing all child","0","-","-","-","-"
"8338","initialize","/**
     * Creates the results object. This implementation starts all child","0","-","-","-","-"
"8339","isInitialized","/**
     * Tests whether this all child","0","-","-","-","-"
"8340","CheckIntervalData","/**
         * Creates a new instance of","0","-","-","-","-"
"8341","getCheckIntervalStart","/**
         * Returns the start time of the current check interval.
         *
         * @return the check interval start time
         */
        public long getCheckIntervalStart()","0","-","-","-","-"
"8342","getEventCount","/**
         * Returns the event counter.
         *
         * @return the number of received events
         */
        public int getEventCount()","0","-","-","-","-"
"8343","increment","/**
         * Returns a new instance of","0","-","-","-","-"
"8344","fetchCheckInterval","/**
         * Obtains the check interval to applied for the represented state from the given
         *","0","-","-","-","-"
"8345","isCheckIntervalFinished","/**
         * Returns a flag whether the end of the current check interval is reached.
         *
         * @param breaker the","0","-","-","-","-"
"8346","isStateTransition","/**
         * Checks whether the specified","0","-","-","-","-"
"8347","fetchCheckInterval","/**
         *","0","-","-","-","-"
"8348","isStateTransition","/**
         *","0","-","-","-","-"
"8349","fetchCheckInterval","/**
         *","0","-","-","-","-"
"8350","isStateTransition","/**
         *","0","-","-","-","-"
"8351","createStrategyMap","/**
     * Creates the map with strategy objects. It allows access for a strategy for a given
     * state.
     *
     * @return the strategy map
     */
    private static Map<State, StateStrategy> createStrategyMap()","0","-","-","-","-"
"8352","stateStrategy","/**
     * Returns the","0","-","-","-","-"
"8353","EventCountCircuitBreaker","/**
     * Creates a new instance of","0","-","-","-","-"
"8354","EventCountCircuitBreaker","/**
     * Creates a new instance of","0","-","-","-","-"
"8355","EventCountCircuitBreaker","/**
     * Creates a new instance of","0","-","-","-","-"
"8356","changeStateAndStartNewCheckInterval","/**
     * Changes the state of this circuit breaker and also initializes a new
     *","0","-","-","-","-"
"8357","checkState","/**
     *","0","-","-","-","-"
"8358","close","/**
     *","0","-","-","-","-"
"8359","getClosingInterval","/**
     * Returns the interval (in nanoseconds) for checking for the closing threshold.
     *
     * @return the opening check interval
     */
    public long getClosingInterval()","0","-","-","-","-"
"8360","getClosingThreshold","/**
     * Returns the threshold value for closing the circuit breaker. If the number of
     * events received in the time span determined by the closing interval goes below this
     * threshold, the circuit breaker is closed again.
     *
     * @return the closing threshold
     */
    public int getClosingThreshold()","0","-","-","-","-"
"8361","getOpeningInterval","/**
     * Returns the interval (in nanoseconds) for checking for the opening threshold.
     *
     * @return the opening check interval
     */
    public long getOpeningInterval()","0","-","-","-","-"
"8362","getOpeningThreshold","/**
     * Returns the threshold value for opening the circuit breaker. If this number of
     * events is received in the time span determined by the opening interval, the circuit
     * breaker is opened.
     *
     * @return the opening threshold
     */
    public int getOpeningThreshold()","0","-","-","-","-"
"8363","incrementAndCheckState","/**
     * Increments the monitored value by <strong>1</strong> and performs a check of the current state of this
     * circuit breaker. This method works like","0","-","-","-","-"
"8364","incrementAndCheckState","/**
     *","0","-","-","-","-"
"8365","nanoTime","/**
     * Returns the current time in nanoseconds. This method is used to obtain the current
     * time. This is needed to calculate the check intervals correctly.
     *
     * @return the current time in nanoseconds
     */
    long nanoTime()","0","-","-","-","-"
"8366","nextCheckIntervalData","/**
     * Calculates the next","0","-","-","-","-"
"8367","open","/**
     *","0","-","-","-","-"
"8368","performStateCheck","/**
     * Actually checks the state of this circuit breaker and executes a state transition
     * if necessary.
     *
     * @param increment the increment for the internal counter
     * @return a flag whether the circuit breaker is now closed
     */
    private boolean performStateCheck(final int increment)","0","-","-","-","-"
"8369","updateCheckIntervalData","/**
     * Updates the","0","-","-","-","-"
"8370","UncheckedExecutionException","/**
     * Constructs an instance initialized to the given","0","-","-","-","-"
"8371","CallableBackgroundInitializer","/**
     * Creates a new instance of","0","-","-","-","-"
"8372","CallableBackgroundInitializer","/**
     * Creates a new instance of","0","-","-","-","-"
"8373","checkCallable","/**
     * Tests the passed in","0","-","-","-","-"
"8374","getTypedException","/**
     *","0","-","-","-","-"
"8375","initialize","/**
     * Performs initialization in a background thread. This implementation
     * delegates to the","0","-","-","-","-"
"8376","Builder","/**
         * Constructs a new instance.
         */
        public Builder()","0","-","-","-","-"
"8377","get","@SuppressWarnings(""unchecked"")
        @Override
        public I get()","0","-","-","-","-"
"8378","builder","/**
     * Creates a new builder.
     *
     * @param <T> the type of object to build.
     * @return a new builder.
     * @since 3.14.0
     */
    public static <T> Builder<AtomicSafeInitializer<T>, T> builder()","0","-","-","-","-"
"8379","AtomicSafeInitializer","/**
     * Constructs a new instance.
     */
    public AtomicSafeInitializer()","0","-","-","-","-"
"8380","AtomicSafeInitializer","/**
     * Constructs a new instance.
     *
     * @param initializer the initializer supplier called by","0","-","-","-","-"
"8381","get","/**
     * Gets (and initialize, if not initialized yet) the required object
     *
     * @return lazily initialized object
     * @throws ConcurrentException if the initialization of the object causes an
     * exception
     */
    @Override
    public final T get() throws ConcurrentException","0","-","-","-","-"
"8382","getNoInit","/** Gets the internal no-init object cast for this instance. */
    @SuppressWarnings(""unchecked"")
    private T getNoInit()","0","-","-","-","-"
"8383","getTypedException","/**
     *","0","-","-","-","-"
"8384","isInitialized","/**
     * Tests whether this instance is initialized. Once initialized, always returns true.
     *
     * @return whether this instance is initialized. Once initialized, always returns true.
     * @since 3.14.0
     */
    @Override
    public boolean isInitialized()","0","-","-","-","-"
"8385","run","/**
     * Creates a","0","-","-","-","-"
"8386","FutureTasks","private FutureTasks()","0","-","-","-","-"
"8387","Memoizer","/**
     * Constructs a Memoizer for the provided Computable calculation.
     *
     * <p>
     * If a calculation throws an exception for any reason, this exception will be cached and returned for all future
     * calls with the provided parameter.
     * </p>
     *
     * @param computable the computation whose results should be memorized
     */
    public Memoizer(final Computable<I, O> computable)","0","-","-","-","-"
"8388","Memoizer","/**
     * Constructs a Memoizer for the provided Computable calculation, with the option of whether a Computation that
     * experiences an error should recalculate on subsequent calls or return the same cached exception.
     *
     * @param computable the computation whose results should be memorized
     * @param recalculate determines whether the computation should be recalculated on subsequent calls if the previous call
     *        failed
     */
    public Memoizer(final Computable<I, O> computable, final boolean recalculate)","0","-","-","-","-"
"8389","Memoizer","/**
     * Constructs a Memoizer for the provided Function calculation.
     *
     * <p>
     * If a calculation throws an exception for any reason, this exception will be cached and returned for all future
     * calls with the provided parameter.
     * </p>
     *
     * @param function the function whose results should be memorized
     * @since 2.13.0
     */
    public Memoizer(final Function<I, O> function)","0","-","-","-","-"
"8390","Memoizer","/**
     * Constructs a Memoizer for the provided Function calculation, with the option of whether a Function that
     * experiences an error should recalculate on subsequent calls or return the same cached exception.
     *
     * @param function the computation whose results should be memorized
     * @param recalculate determines whether the computation should be recalculated on subsequent calls if the previous call
     *        failed
     * @since 2.13.0
     */
     public Memoizer(final Function<I, O> function, final boolean recalculate)","0","-","-","-","-"
"8391","compute","/**
     * This method will return the result of the calculation and cache it, if it has not previously been calculated.
     *
     * <p>
     * This cache will also cache exceptions that occur during the computation if the","0","-","-","-","-"
"8392","launderException","/**
     * This method launders a Throwable to either a RuntimeException, Error or any other Exception wrapped in an
     * IllegalStateException.
     *
     * @param throwable the throwable to laundered
     * @return a RuntimeException, Error or an IllegalStateException
     */
    private RuntimeException launderException(final Throwable throwable)","0","-","-","-","-"
"8393","exclusiveBetween","/**
     * Validate that the specified primitive value falls between the two
     * exclusive values specified; otherwise, throws an exception.
     *
     * <pre>Validate.exclusiveBetween(0.1, 2.1, 1.1);</pre>
     *
     * @param start the exclusive start value
     * @param end   the exclusive end value
     * @param value the value to validate
     * @throws IllegalArgumentException if the value falls out of the boundaries
     * @since 3.3
     */
    @SuppressWarnings(""boxing"")
    public static void exclusiveBetween(final double start, final double end, final double value)","0","-","-","-","-"
"8394","exclusiveBetween","/**
     * Validate that the specified primitive value falls between the two
     * exclusive values specified; otherwise, throws an exception with the
     * specified message.
     *
     * <pre>Validate.exclusiveBetween(0.1, 2.1, 1.1, ""Not in range"");</pre>
     *
     * @param start the exclusive start value
     * @param end   the exclusive end value
     * @param value the value to validate
     * @param message the exception message if invalid, not null
     * @throws IllegalArgumentException if the value falls outside the boundaries
     * @since 3.3
     */
    public static void exclusiveBetween(final double start, final double end, final double value, final String message)","0","-","-","-","-"
"8395","exclusiveBetween","/**
     * Validate that the specified primitive value falls between the two
     * exclusive values specified; otherwise, throws an exception.
     *
     * <pre>Validate.exclusiveBetween(0, 2, 1);</pre>
     *
     * @param start the exclusive start value
     * @param end   the exclusive end value
     * @param value the value to validate
     * @throws IllegalArgumentException if the value falls out of the boundaries
     * @since 3.3
     */
    @SuppressWarnings(""boxing"")
    public static void exclusiveBetween(final long start, final long end, final long value)","0","-","-","-","-"
"8396","exclusiveBetween","/**
     * Validate that the specified primitive value falls between the two
     * exclusive values specified; otherwise, throws an exception with the
     * specified message.
     *
     * <pre>Validate.exclusiveBetween(0, 2, 1, ""Not in range"");</pre>
     *
     * @param start the exclusive start value
     * @param end   the exclusive end value
     * @param value the value to validate
     * @param message the exception message if invalid, not null
     * @throws IllegalArgumentException if the value falls outside the boundaries
     * @since 3.3
     */
    public static void exclusiveBetween(final long start, final long end, final long value, final String message)","0","-","-","-","-"
"8397","exclusiveBetween","/**
     * Validate that the specified argument object fall between the two
     * exclusive values specified; otherwise, throws an exception.
     *
     * <pre>Validate.exclusiveBetween(0, 2, 1);</pre>
     *
     * @param <T> the type of the argument object
     * @param start  the exclusive start value, not null
     * @param end  the exclusive end value, not null
     * @param value  the object to validate, not null
     * @throws IllegalArgumentException if the value falls outside the boundaries
     * @see #exclusiveBetween(Object, Object, Comparable, String, Object...)
     * @since 3.0
     */
    public static <T> void exclusiveBetween(final T start, final T end, final Comparable<T> value)","0","-","-","-","-"
"8398","exclusiveBetween","/**
     * Validate that the specified argument object fall between the two
     * exclusive values specified; otherwise, throws an exception with the
     * specified message.
     *
     * <pre>Validate.exclusiveBetween(0, 2, 1, ""Not in boundaries"");</pre>
     *
     * @param <T> the type of the argument object
     * @param start  the exclusive start value, not null
     * @param end  the exclusive end value, not null
     * @param value  the object to validate, not null
     * @param message  the","0","-","-","-","-"
"8399","finite","/**
     * Validates that the specified argument is not infinite or Not-a-Number (NaN);
     * otherwise throwing an exception.
     *
     * <pre>Validate.finite(myDouble);</pre>
     *
     * <p>The message of the exception is &quot;The value is invalid: %f&quot;.</p>
     *
     * @param value  the value to validate
     * @throws IllegalArgumentException if the value is infinite or Not-a-Number (NaN)
     * @see #finite(double, String, Object...)
     * @since 3.5
     */
    public static void finite(final double value)","0","-","-","-","-"
"8400","finite","/**
     * Validates that the specified argument is not infinite or Not-a-Number (NaN);
     * otherwise throwing an exception with the specified message.
     *
     * <pre>Validate.finite(myDouble, ""The argument must contain a numeric value"");</pre>
     *
     * @param value the value to validate
     * @param message  the","0","-","-","-","-"
"8401","getMessage","/**
     * Gets the message using","0","-","-","-","-"
"8402","inclusiveBetween","/**
     * Validate that the specified primitive value falls between the two
     * inclusive values specified; otherwise, throws an exception.
     *
     * <pre>Validate.inclusiveBetween(0.1, 2.1, 1.1);</pre>
     *
     * @param start the inclusive start value
     * @param end   the inclusive end value
     * @param value the value to validate
     * @throws IllegalArgumentException if the value falls outside the boundaries (inclusive)
     * @since 3.3
     */
    @SuppressWarnings(""boxing"")
    public static void inclusiveBetween(final double start, final double end, final double value)","0","-","-","-","-"
"8403","inclusiveBetween","/**
     * Validate that the specified primitive value falls between the two
     * inclusive values specified; otherwise, throws an exception with the
     * specified message.
     *
     * <pre>Validate.inclusiveBetween(0.1, 2.1, 1.1, ""Not in range"");</pre>
     *
     * @param start the inclusive start value
     * @param end   the inclusive end value
     * @param value the value to validate
     * @param message the exception message if invalid, not null
     * @throws IllegalArgumentException if the value falls outside the boundaries
     * @since 3.3
     */
    public static void inclusiveBetween(final double start, final double end, final double value, final String message)","0","-","-","-","-"
"8404","inclusiveBetween","/**
     * Validate that the specified primitive value falls between the two
     * inclusive values specified; otherwise, throws an exception.
     *
     * <pre>Validate.inclusiveBetween(0, 2, 1);</pre>
     *
     * @param start the inclusive start value
     * @param end   the inclusive end value
     * @param value the value to validate
     * @throws IllegalArgumentException if the value falls outside the boundaries (inclusive)
     * @since 3.3
     */
    @SuppressWarnings(""boxing"")
    public static void inclusiveBetween(final long start, final long end, final long value)","0","-","-","-","-"
"8405","inclusiveBetween","/**
     * Validate that the specified primitive value falls between the two
     * inclusive values specified; otherwise, throws an exception with the
     * specified message.
     *
     * <pre>Validate.inclusiveBetween(0, 2, 1, ""Not in range"");</pre>
     *
     * @param start the inclusive start value
     * @param end   the inclusive end value
     * @param value the value to validate
     * @param message the exception message if invalid, not null
     * @throws IllegalArgumentException if the value falls outside the boundaries
     * @since 3.3
     */
    public static void inclusiveBetween(final long start, final long end, final long value, final String message)","0","-","-","-","-"
"8406","inclusiveBetween","/**
     * Validate that the specified argument object fall between the two
     * inclusive values specified; otherwise, throws an exception.
     *
     * <pre>Validate.inclusiveBetween(0, 2, 1);</pre>
     *
     * @param <T> the type of the argument object
     * @param start  the inclusive start value, not null
     * @param end  the inclusive end value, not null
     * @param value  the object to validate, not null
     * @throws IllegalArgumentException if the value falls outside the boundaries
     * @see #inclusiveBetween(Object, Object, Comparable, String, Object...)
     * @since 3.0
     */
    public static <T> void inclusiveBetween(final T start, final T end, final Comparable<T> value)","0","-","-","-","-"
"8407","inclusiveBetween","/**
     * Validate that the specified argument object fall between the two
     * inclusive values specified; otherwise, throws an exception with the
     * specified message.
     *
     * <pre>Validate.inclusiveBetween(0, 2, 1, ""Not in boundaries"");</pre>
     *
     * @param <T> the type of the argument object
     * @param start  the inclusive start value, not null
     * @param end  the inclusive end value, not null
     * @param value  the object to validate, not null
     * @param message  the","0","-","-","-","-"
"8408","isAssignableFrom","/**
     * Validates that the argument can be converted to the specified class, if not, throws an exception.
     *
     * <p>This method is useful when validating that there will be no casting errors.</p>
     *
     * <pre>Validate.isAssignableFrom(SuperClass.class, object.getClass());</pre>
     *
     * <p>The message format of the exception is &quot;Cannot assign","0","-","-","-","-"
"8409","isAssignableFrom","/**
     * Validates that the argument can be converted to the specified class, if not throws an exception.
     *
     * <p>This method is useful when validating if there will be no casting errors.</p>
     *
     * <pre>Validate.isAssignableFrom(SuperClass.class, object.getClass());</pre>
     *
     * <p>The message of the exception is &quot;The validated object cannot be converted to the&quot;
     * followed by the name of the class and &quot;class&quot;</p>
     *
     * @param superType  the class must be validated against, not null
     * @param type  the class to check, not null
     * @param message  the","0","-","-","-","-"
"8410","isInstanceOf","/**
     * Validates that the argument is an instance of the specified class, if not throws an exception.
     *
     * <p>This method is useful when validating according to an arbitrary class</p>
     *
     * <pre>Validate.isInstanceOf(OkClass.class, object);</pre>
     *
     * <p>The message of the exception is &quot;Expected type:","0","-","-","-","-"
"8411","isInstanceOf","/**
     * Validate that the argument is an instance of the specified class; otherwise
     * throwing an exception with the specified message. This method is useful when
     * validating according to an arbitrary class
     *
     * <pre>Validate.isInstanceOf(OkClass.class, object, ""Wrong class, object is of class %s"",
     *   object.getClass().getName());</pre>
     *
     * @param type  the class the object must be validated against, not null
     * @param obj  the object to check, null throws an exception
     * @param message  the","0","-","-","-","-"
"8412","isTrue","/**
     * Validate that the argument condition is","0","-","-","-","-"
"8413","isTrue","/**
     * Validate that the argument condition is","0","-","-","-","-"
"8414","isTrue","/**
     * Validate that the argument condition is","0","-","-","-","-"
"8415","isTrue","/**
     * Validate that the argument condition is","0","-","-","-","-"
"8416","isTrue","/**
     * Validate that the argument condition is","0","-","-","-","-"
"8417","matchesPattern","/**
     * Validate that the specified argument character sequence matches the specified regular
     * expression pattern; otherwise throwing an exception.
     *
     * <pre>Validate.matchesPattern(""hi"", ""[a-z]*"");</pre>
     *
     * <p>The syntax of the pattern is the one used in the","0","-","-","-","-"
"8418","matchesPattern","/**
     * Validate that the specified argument character sequence matches the specified regular
     * expression pattern; otherwise throwing an exception with the specified message.
     *
     * <pre>Validate.matchesPattern(""hi"", ""[a-z]*"", ""%s does not match %s"", ""hi"" ""[a-z]*"");</pre>
     *
     * <p>The syntax of the pattern is the one used in the","0","-","-","-","-"
"8419","noNullElements","/**
     * Validate that the specified argument iterable is neither
     *","0","-","-","-","-"
"8420","noNullElements","/**
     * Validate that the specified argument iterable is neither
     *","0","-","-","-","-"
"8421","noNullElements","/**
     * Validate that the specified argument array is neither
     *","0","-","-","-","-"
"8422","noNullElements","/**
     * Validate that the specified argument array is neither
     *","0","-","-","-","-"
"8423","notBlank","/**
     * <p>Validate that the specified argument character sequence is
     * neither","0","-","-","-","-"
"8424","notBlank","/**
     * Validate that the specified argument character sequence is
     * neither","0","-","-","-","-"
"8425","notEmpty","/**
     * <p>Validate that the specified argument collection is neither","0","-","-","-","-"
"8426","notEmpty","/**
     * <p>Validate that the specified argument map is neither","0","-","-","-","-"
"8427","notEmpty","/**
     * <p>Validate that the specified argument character sequence is
     * neither","0","-","-","-","-"
"8428","notEmpty","/**
     * <p>Validate that the specified argument collection is neither","0","-","-","-","-"
"8429","notEmpty","/**
     * Validate that the specified argument map is neither","0","-","-","-","-"
"8430","notEmpty","/**
     * Validate that the specified argument character sequence is
     * neither","0","-","-","-","-"
"8431","notEmpty","/**
     * <p>Validate that the specified argument array is neither","0","-","-","-","-"
"8432","notEmpty","/**
     * <p>Validate that the specified argument array is neither","0","-","-","-","-"
"8433","notNaN","/**
     * Validates that the specified argument is not Not-a-Number (NaN); otherwise
     * throwing an exception.
     *
     * <pre>Validate.notNaN(myDouble);</pre>
     *
     * <p>The message of the exception is &quot;The validated value is not a
     * number&quot;.</p>
     *
     * @param value  the value to validate
     * @throws IllegalArgumentException if the value is not a number
     * @see #notNaN(double, String, Object...)
     * @since 3.5
     */
    public static void notNaN(final double value)","0","-","-","-","-"
"8434","notNaN","/**
     * Validates that the specified argument is not Not-a-Number (NaN); otherwise
     * throwing an exception with the specified message.
     *
     * <pre>Validate.notNaN(myDouble, ""The value must be a number"");</pre>
     *
     * @param value  the value to validate
     * @param message  the","0","-","-","-","-"
"8435","notNull","/**
     * Validate that the specified argument is not","0","-","-","-","-"
"8436","notNull","/**
     * Validate that the specified argument is not","0","-","-","-","-"
"8437","toSupplier","private static Supplier<String> toSupplier(final String message, final Object... values)","0","-","-","-","-"
"8438","validIndex","/**
     * Validates that the index is within the bounds of the argument
     * collection; otherwise throwing an exception.
     *
     * <pre>Validate.validIndex(myCollection, 2);</pre>
     *
     * <p>If the index is invalid, then the message of the exception
     * is &quot;The validated collection index is invalid: &quot;
     * followed by the index.</p>
     *
     * @param <T> the collection type
     * @param collection  the collection to check, validated not null by this method
     * @param index  the index to check
     * @return the validated collection (never","0","-","-","-","-"
"8439","validIndex","/**
     * Validates that the index is within the bounds of the argument
     * character sequence; otherwise throwing an exception.
     *
     * <pre>Validate.validIndex(myStr, 2);</pre>
     *
     * <p>If the character sequence is","0","-","-","-","-"
"8440","validIndex","/**
     * Validates that the index is within the bounds of the argument
     * collection; otherwise throwing an exception with the specified message.
     *
     * <pre>Validate.validIndex(myCollection, 2, ""The collection index is invalid: "");</pre>
     *
     * <p>If the collection is","0","-","-","-","-"
"8441","validIndex","/**
     * Validates that the index is within the bounds of the argument
     * character sequence; otherwise throwing an exception with the
     * specified message.
     *
     * <pre>Validate.validIndex(myStr, 2, ""The string index is invalid: "");</pre>
     *
     * <p>If the character sequence is","0","-","-","-","-"
"8442","validIndex","/**
     * Validates that the index is within the bounds of the argument
     * array; otherwise throwing an exception.
     *
     * <pre>Validate.validIndex(myArray, 2);</pre>
     *
     * <p>If the array is","0","-","-","-","-"
"8443","validIndex","/**
     * Validates that the index is within the bounds of the argument
     * array; otherwise throwing an exception with the specified message.
     *
     * <pre>Validate.validIndex(myArray, 2, ""The array index is invalid: "");</pre>
     *
     * <p>If the array is","0","-","-","-","-"
"8444","validState","/**
     * Validate that the stateful condition is","0","-","-","-","-"
"8445","validState","/**
     * Validate that the stateful condition is","0","-","-","-","-"
"8446","Validate","/**
     * Constructs a new instance. This class should not normally be instantiated.
     */
    public Validate()","0","-","-","-","-"
"8447","insecure","/**
     * Gets the singleton instance based on","0","-","-","-","-"
"8448","nextBoolean","/**
     * Generates a random boolean value.
     *
     * @return the random boolean
     * @since 3.5
     * @deprecated Use","0","-","-","-","-"
"8449","nextBytes","/**
     * Generates an array of random bytes.
     *
     * @param count the size of the returned array
     * @return the random byte array
     * @throws IllegalArgumentException if","0","-","-","-","-"
"8450","nextDouble","/**
     * Generates a random double between 0 (inclusive) and Double.MAX_VALUE (exclusive).
     *
     * @return the random double
     * @see #nextDouble(double, double)
     * @since 3.5
     * @deprecated Use","0","-","-","-","-"
"8451","nextDouble","/**
     * Generates a random double within the specified range.
     *
     * @param startInclusive the smallest value that can be returned, must be non-negative
     * @param endExclusive   the upper bound (not included)
     * @throws IllegalArgumentException if","0","-","-","-","-"
"8452","nextFloat","/**
     * Generates a random float between 0 (inclusive) and Float.MAX_VALUE (exclusive).
     *
     * @return the random float
     * @see #nextFloat(float, float)
     * @since 3.5
     * @deprecated Use","0","-","-","-","-"
"8453","nextFloat","/**
     * Generates a random float within the specified range.
     *
     * @param startInclusive the smallest value that can be returned, must be non-negative
     * @param endExclusive   the upper bound (not included)
     * @throws IllegalArgumentException if","0","-","-","-","-"
"8454","nextInt","/**
     * Generates a random int between 0 (inclusive) and Integer.MAX_VALUE (exclusive).
     *
     * @return the random integer
     * @see #nextInt(int, int)
     * @since 3.5
     * @deprecated Use","0","-","-","-","-"
"8455","nextInt","/**
     * Generates a random integer within the specified range.
     *
     * @param startInclusive the smallest value that can be returned, must be non-negative
     * @param endExclusive   the upper bound (not included)
     * @throws IllegalArgumentException if","0","-","-","-","-"
"8456","nextLong","/**
     * Generates a random long between 0 (inclusive) and Long.MAX_VALUE (exclusive).
     *
     * @return the random long
     * @see #nextLong(long, long)
     * @since 3.5
     * @deprecated Use","0","-","-","-","-"
"8457","nextLong","/**
     * Generates a random long within the specified range.
     *
     * @param startInclusive the smallest value that can be returned, must be non-negative
     * @param endExclusive   the upper bound (not included)
     * @throws IllegalArgumentException if","0","-","-","-","-"
"8458","secure","/**
     * Gets the singleton instance based on","0","-","-","-","-"
"8459","secureRandom","static SecureRandom secureRandom()","0","-","-","-","-"
"8460","secureStrong","/**
     * Gets the singleton instance based on","0","-","-","-","-"
"8461","RandomUtils","/**
     *","0","-","-","-","-"
"8462","RandomUtils","private RandomUtils(final Supplier<Random> random)","0","-","-","-","-"
"8463","random","Random random()","0","-","-","-","-"
"8464","randomBoolean","/**
     * Generates a random boolean value.
     *
     * @return the random boolean
     * @since 3.16.0
     */
    public boolean randomBoolean()","0","-","-","-","-"
"8465","randomBytes","/**
     * Generates an array of random bytes.
     *
     * @param count the size of the returned array
     * @return the random byte array
     * @throws IllegalArgumentException if","0","-","-","-","-"
"8466","randomDouble","/**
     * Generates a random double between 0 (inclusive) and Double.MAX_VALUE (exclusive).
     *
     * @return the random double
     * @see #randomDouble(double, double)
     * @since 3.16.0
     */
    public double randomDouble()","0","-","-","-","-"
"8467","randomDouble","/**
     * Generates a random double within the specified range.
     *
     * @param startInclusive the smallest value that can be returned, must be non-negative
     * @param endExclusive   the upper bound (not included)
     * @throws IllegalArgumentException if","0","-","-","-","-"
"8468","randomFloat","/**
     * Generates a random float between 0 (inclusive) and Float.MAX_VALUE (exclusive).
     *
     * @return the random float
     * @see #randomFloat(float, float)
     * @since 3.16.0
     */
    public float randomFloat()","0","-","-","-","-"
"8469","randomFloat","/**
     * Generates a random float within the specified range.
     *
     * @param startInclusive the smallest value that can be returned, must be non-negative
     * @param endExclusive   the upper bound (not included)
     * @throws IllegalArgumentException if","0","-","-","-","-"
"8470","randomInt","/**
     * Generates a random int between 0 (inclusive) and Integer.MAX_VALUE (exclusive).
     *
     * @return the random integer
     * @see #randomInt(int, int)
     * @since 3.16.0
     */
    public int randomInt()","0","-","-","-","-"
"8471","randomInt","/**
     * Generates a random integer within the specified range.
     *
     * @param startInclusive the smallest value that can be returned, must be non-negative
     * @param endExclusive   the upper bound (not included)
     * @throws IllegalArgumentException if","0","-","-","-","-"
"8472","randomLong","/**
     * Generates a random long between 0 (inclusive) and Long.MAX_VALUE (exclusive).
     *
     * @return the random long
     * @see #randomLong(long, long)
     * @since 3.16.0
     */
    public long randomLong()","0","-","-","-","-"
"8473","randomLong","/**
     * Generates a","0","-","-","-","-"
"8474","randomLong","/**
     * Generates a random long within the specified range.
     *
     * @param startInclusive the smallest value that can be returned, must be non-negative
     * @param endExclusive   the upper bound (not included)
     * @throws IllegalArgumentException if","0","-","-","-","-"
"8475","toString","@Override
    public String toString()","0","-","-","-","-"
"8476","dotAll","/**
     * Compiles the given regular expression into a pattern with the","0","-","-","-","-"
"8477","dotAllMatcher","/**
     * Compiles the given regular expression into a pattern with the","0","-","-","-","-"
"8478","dotAllMatcher","/**
     * Compiles the given regular expression into a pattern with the","0","-","-","-","-"
"8479","removeAll","/**
     * Removes each substring of the text String that matches the given regular expression pattern.
     *
     * This method is a","0","-","-","-","-"
"8480","removeAll","/**
     * Removes each substring of the text String that matches the given regular expression pattern.
     *
     * This method is a","0","-","-","-","-"
"8481","removeAll","/**
     * Removes each substring of the text String that matches the given regular expression.
     *
     * This method is a","0","-","-","-","-"
"8482","removeFirst","/**
     * Removes the first substring of the text string that matches the given regular expression pattern.
     *
     * This method is a","0","-","-","-","-"
"8483","removeFirst","/**
     * Removes the first substring of the text string that matches the given regular expression pattern.
     *
     * This method is a","0","-","-","-","-"
"8484","removeFirst","/**
     * Removes the first substring of the text string that matches the given regular expression.
     *
     * This method is a","0","-","-","-","-"
"8485","removePattern","/**
     * Removes each substring of the source String that matches the given regular expression using the DOTALL option.
     *
     * This call is a","0","-","-","-","-"
"8486","removePattern","/**
     * Removes each substring of the source String that matches the given regular expression using the DOTALL option.
     *
     * This call is a","0","-","-","-","-"
"8487","replaceAll","/**
     * Replaces each substring of the text String that matches the given regular expression pattern with the given replacement.
     *
     * This method is a","0","-","-","-","-"
"8488","replaceAll","/**
     * Replaces each substring of the text String that matches the given regular expression pattern with the given replacement.
     *
     * This method is a","0","-","-","-","-"
"8489","replaceAll","/**
     * Replaces each substring of the text String that matches the given regular expression
     * with the given replacement.
     *
     * This method is a","0","-","-","-","-"
"8490","replaceFirst","/**
     * Replaces the first substring of the text string that matches the given regular expression pattern
     * with the given replacement.
     *
     * This method is a","0","-","-","-","-"
"8491","replaceFirst","/**
     * Replaces the first substring of the text string that matches the given regular expression pattern
     * with the given replacement.
     *
     * This method is a","0","-","-","-","-"
"8492","replaceFirst","/**
     * Replaces the first substring of the text string that matches the given regular expression
     * with the given replacement.
     *
     * This method is a","0","-","-","-","-"
"8493","replacePattern","/**
     * Replaces each substring of the source String that matches the given regular expression with the given
     * replacement using the","0","-","-","-","-"
"8494","replacePattern","/**
     * Replaces each substring of the source String that matches the given regular expression with the given
     * replacement using the","0","-","-","-","-"
"8495","toStringOrNull","private static String toStringOrNull(final CharSequence text)","0","-","-","-","-"
"8496","RegExUtils","/**
     * Make private in 4.0.
     *
     * @deprecated TODO Make private in 4.0.
     */
    @Deprecated
    public RegExUtils()","0","-","-","-","-"
"8497","compare","/**
         * Comparable based compare implementation.
         *
         * @param obj1 left-hand side side of comparison
         * @param obj2 right-hand side side of comparison
         * @return negative, 0, positive comparison value
         */
        @Override
        public int compare(final Object obj1, final Object obj2)","0","-","-","-","-"
"8498","between","/**
     * Creates a range with the specified minimum and maximum values (both inclusive).
     *
     * <p>The range uses the natural ordering of the elements to determine where
     * values lie in the range.</p>
     *
     * <p>The arguments may be passed in the order (min,max) or (max,min).
     * The getMinimum and getMaximum methods will return the correct values.</p>
     *
     * @param <T> the type of the elements in this range
     * @param fromInclusive  the first value that defines the edge of the range, inclusive
     * @param toInclusive  the second value that defines the edge of the range, inclusive
     * @return the range object, not null
     * @throws NullPointerException when fromInclusive is null.
     * @throws NullPointerException when toInclusive is null.
     * @throws ClassCastException if the elements are not","0","-","-","-","-"
"8499","between","/**
     * Creates a range with the specified minimum and maximum values (both inclusive).
     *
     * <p>The range uses the specified","0","-","-","-","-"
"8500","is","/**
     * Creates a range using the specified element as both the minimum
     * and maximum in this range.
     *
     * <p>The range uses the natural ordering of the elements to determine where
     * values lie in the range.</p>
     *
     * @param <T> the type of the elements in this range
     * @param element  the value to use for this range, not null
     * @return the range object, not null
     * @throws NullPointerException if the element is null
     * @throws ClassCastException if the element is not","0","-","-","-","-"
"8501","is","/**
     * Creates a range using the specified element as both the minimum
     * and maximum in this range.
     *
     * <p>The range uses the specified","0","-","-","-","-"
"8502","of","/**
     * Creates a range with the specified minimum and maximum values (both inclusive).
     *
     * <p>The range uses the natural ordering of the elements to determine where
     * values lie in the range.</p>
     *
     * <p>The arguments may be passed in the order (min,max) or (max,min).
     * The getMinimum and getMaximum methods will return the correct values.</p>
     *
     * @param <T> the type of the elements in this range
     * @param fromInclusive  the first value that defines the edge of the range, inclusive
     * @param toInclusive  the second value that defines the edge of the range, inclusive
     * @return the range object, not null
     * @throws NullPointerException if either element is null
     * @throws ClassCastException if the elements are not","0","-","-","-","-"
"8503","of","/**
     * Creates a range with the specified minimum and maximum values (both inclusive).
     *
     * <p>The range uses the specified","0","-","-","-","-"
"8504","Range","/**
     * Creates an instance.
     *
     * @param element1  the first element, not null
     * @param element2  the second element, not null
     * @param comp  the comparator to be used, null for natural ordering
     * @throws NullPointerException when element1 is null.
     * @throws NullPointerException when element2 is null.
     */
    @SuppressWarnings(""unchecked"")
    Range(final T element1, final T element2, final Comparator<T> comp)","0","-","-","-","-"
"8505","contains","/**
     * Checks whether the specified element occurs within this range.
     *
     * @param element  the element to check for, null returns false
     * @return true if the specified element occurs within this range
     */
    public boolean contains(final T element)","0","-","-","-","-"
"8506","containsRange","/**
     * Checks whether this range contains all the elements of the specified range.
     *
     * <p>This method may fail if the ranges have two different comparators or element types.</p>
     *
     * @param otherRange  the range to check, null returns false
     * @return true if this range contains the specified range
     * @throws RuntimeException if ranges cannot be compared
     */
    public boolean containsRange(final Range<T> otherRange)","0","-","-","-","-"
"8507","elementCompareTo","/**
     * Checks where the specified element occurs relative to this range.
     *
     * <p>The API is reminiscent of the Comparable interface returning","0","-","-","-","-"
"8508","equals","/**
     * Compares this range to another object to test if they are equal.
     *
     * <p>To be equal, the minimum and maximum values must be equal, which
     * ignores any differences in the comparator.</p>
     *
     * @param obj the reference object with which to compare
     * @return true if this object is equal
     */
    @Override
    public boolean equals(final Object obj)","0","-","-","-","-"
"8509","fit","/**
     * Fits the given element into this range by returning the given element or, if out of bounds, the range minimum if
     * below, or the range maximum if above.
     *
     * <pre>","0","-","-","-","-"
"8510","getComparator","/**
     * Gets the comparator being used to determine if objects are within the range.
     *
     * <p>Natural ordering uses an internal comparator implementation, thus this
     * method never returns null. See","0","-","-","-","-"
"8511","getMaximum","/**
     * Gets the maximum value in this range.
     *
     * @return the maximum value in this range, not null
     */
    public T getMaximum()","0","-","-","-","-"
"8512","getMinimum","/**
     * Gets the minimum value in this range.
     *
     * @return the minimum value in this range, not null
     */
    public T getMinimum()","0","-","-","-","-"
"8513","hashCode","/**
     * Gets a suitable hash code for the range.
     *
     * @return a hash code value for this object
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"8514","intersectionWith","/**
     * Calculate the intersection of","0","-","-","-","-"
"8515","isAfter","/**
     * Checks whether this range is after the specified element.
     *
     * @param element  the element to check for, null returns false
     * @return true if this range is entirely after the specified element
     */
    public boolean isAfter(final T element)","0","-","-","-","-"
"8516","isAfterRange","/**
     * Checks whether this range is completely after the specified range.
     *
     * <p>This method may fail if the ranges have two different comparators or element types.</p>
     *
     * @param otherRange  the range to check, null returns false
     * @return true if this range is completely after the specified range
     * @throws RuntimeException if ranges cannot be compared
     */
    public boolean isAfterRange(final Range<T> otherRange)","0","-","-","-","-"
"8517","isBefore","/**
     * Checks whether this range is before the specified element.
     *
     * @param element  the element to check for, null returns false
     * @return true if this range is entirely before the specified element
     */
    public boolean isBefore(final T element)","0","-","-","-","-"
"8518","isBeforeRange","/**
     * Checks whether this range is completely before the specified range.
     *
     * <p>This method may fail if the ranges have two different comparators or element types.</p>
     *
     * @param otherRange  the range to check, null returns false
     * @return true if this range is completely before the specified range
     * @throws RuntimeException if ranges cannot be compared
     */
    public boolean isBeforeRange(final Range<T> otherRange)","0","-","-","-","-"
"8519","isEndedBy","/**
     * Checks whether this range ends with the specified element.
     *
     * @param element  the element to check for, null returns false
     * @return true if the specified element occurs within this range
     */
    public boolean isEndedBy(final T element)","0","-","-","-","-"
"8520","isNaturalOrdering","/**
     * Tests whether or not the Range is using the natural ordering of the elements.
     *
     * <p>Natural ordering uses an internal comparator implementation, thus this
     * method is the only way to check if a null comparator was specified.</p>
     *
     * @return true if using natural ordering
     */
    public boolean isNaturalOrdering()","0","-","-","-","-"
"8521","isOverlappedBy","/**
     * Tests whether this range is overlapped by the specified range.
     *
     * <p>Two ranges overlap if there is at least one element in common.</p>
     *
     * <p>This method may fail if the ranges have two different comparators or element types.</p>
     *
     * @param otherRange  the range to test, null returns false
     * @return true if the specified range overlaps with this
     *  range; otherwise,","0","-","-","-","-"
"8522","isStartedBy","/**
     * Tests whether this range starts with the specified element.
     *
     * @param element  the element to check for, null returns false
     * @return true if the specified element occurs within this range
     */
    public boolean isStartedBy(final T element)","0","-","-","-","-"
"8523","toString","/**
     * Gets the range as a","0","-","-","-","-"
"8524","toString","/**
     * Formats the receiver using the given format.
     *
     * <p>This uses","0","-","-","-","-"
"8525","ObjectToStringComparator","/**
     * Constructs a new instance.
     *
     * @deprecated Will be private in 4.0.0.
     */
    @Deprecated
    public ObjectToStringComparator()","0","-","-","-","-"
"8526","compare","@Override
    public int compare(final Object o1, final Object o2)","0","-","-","-","-"
"8527","ComparableCheckBuilder","private ComparableCheckBuilder(final A a)","0","-","-","-","-"
"8528","between","/**
         * Checks if","0","-","-","-","-"
"8529","betweenExclusive","/**
         * Checks if","0","-","-","-","-"
"8530","betweenOrdered","private boolean betweenOrdered(final A b, final A c)","0","-","-","-","-"
"8531","betweenOrderedExclusive","private boolean betweenOrderedExclusive(final A b, final A c)","0","-","-","-","-"
"8532","equalTo","/**
         * Checks if the object passed to","0","-","-","-","-"
"8533","greaterThan","/**
         * Checks if the object passed to","0","-","-","-","-"
"8534","greaterThanOrEqualTo","/**
         * Checks if the object passed to","0","-","-","-","-"
"8535","lessThan","/**
         * Checks if the object passed to","0","-","-","-","-"
"8536","lessThanOrEqualTo","/**
         * Checks if the object passed to","0","-","-","-","-"
"8537","between","/**
     * Checks if","0","-","-","-","-"
"8538","betweenExclusive","/**
     * Checks if","0","-","-","-","-"
"8539","ge","/**
     * Checks if the tested object is greater than or equal to","0","-","-","-","-"
"8540","gt","/**
     * Checks if the tested object is greater than","0","-","-","-","-"
"8541","is","/**
     * Provides access to the available methods
     *
     * @param a base object in the further comparison
     * @param <A> type of the base object
     * @return a builder object with further methods
     */
    public static <A extends Comparable<A>> ComparableCheckBuilder<A> is(final A a)","0","-","-","-","-"
"8542","le","/**
     * Checks if the tested object is less than or equal to","0","-","-","-","-"
"8543","lt","/**
     * Checks if the tested object is less than","0","-","-","-","-"
"8544","max","/**
     * Returns the greater of two","0","-","-","-","-"
"8545","min","/**
     * Returns the lesser of two","0","-","-","-","-"
"8546","ComparableUtils","private ComparableUtils()","0","-","-","-","-"
"8547","Null","/**
         * Restricted constructor - singleton.
         */
        Null()","0","-","-","-","-"
"8548","readResolve","/**
         * Ensure Singleton after serialization.
         *
         * @return the singleton value
         */
        private Object readResolve()","0","-","-","-","-"
"8549","allNotNull","/**
     * Tests if all values in the array are not","0","-","-","-","-"
"8550","allNull","/**
     * Tests if all values in the given array are","0","-","-","-","-"
"8551","anyNotNull","/**
     * Tests if any value in the given array is not","0","-","-","-","-"
"8552","anyNull","/**
     * Tests if any value in the given array is","0","-","-","-","-"
"8553","clone","/**
     * Clones an object.
     *
     * @param <T> the type of the object
     * @param obj  the object to clone, null returns null
     * @return the clone if the object implements","0","-","-","-","-"
"8554","cloneIfPossible","/**
     * Clones an object if possible.
     *
     * <p>This method is similar to","0","-","-","-","-"
"8555","compare","/**
     * Null safe comparison of Comparables.
     *","0","-","-","-","-"
"8556","compare","/**
     * Null safe comparison of Comparables.
     * <p>TODO Move to ComparableUtils.</p>
     *
     * @param <T> type of the values processed by this method
     * @param c1  the first comparable, may be null
     * @param c2  the second comparable, may be null
     * @param nullGreater if true","0","-","-","-","-"
"8557","CONST","/**
     * Returns the provided value unchanged.
     * This can prevent javac from inlining a constant
     * field, e.g.,
     *
     * <pre>
     *     public final static boolean MAGIC_FLAG = ObjectUtils.CONST(true);
     * </pre>
     *
     * This way any jars that refer to this field do not
     * have to recompile themselves if the field's value
     * changes at some future date.
     *
     * @param v the boolean value to return
     * @return the boolean v, unchanged
     * @since 3.2
     */
    public static boolean CONST(final boolean v)","0","-","-","-","-"
"8558","CONST","/**
     * Returns the provided value unchanged.
     * This can prevent javac from inlining a constant
     * field, e.g.,
     *
     * <pre>
     *     public final static byte MAGIC_BYTE = ObjectUtils.CONST((byte) 127);
     * </pre>
     *
     * This way any jars that refer to this field do not
     * have to recompile themselves if the field's value
     * changes at some future date.
     *
     * @param v the byte value to return
     * @return the byte v, unchanged
     * @since 3.2
     */
    public static byte CONST(final byte v)","0","-","-","-","-"
"8559","CONST","/**
     * Returns the provided value unchanged.
     * This can prevent javac from inlining a constant
     * field, e.g.,
     *
     * <pre>
     *     public final static char MAGIC_CHAR = ObjectUtils.CONST('a');
     * </pre>
     *
     * This way any jars that refer to this field do not
     * have to recompile themselves if the field's value
     * changes at some future date.
     *
     * @param v the char value to return
     * @return the char v, unchanged
     * @since 3.2
     */
    public static char CONST(final char v)","0","-","-","-","-"
"8560","CONST","/**
     * Returns the provided value unchanged.
     * This can prevent javac from inlining a constant
     * field, e.g.,
     *
     * <pre>
     *     public final static double MAGIC_DOUBLE = ObjectUtils.CONST(1.0);
     * </pre>
     *
     * This way any jars that refer to this field do not
     * have to recompile themselves if the field's value
     * changes at some future date.
     *
     * @param v the double value to return
     * @return the double v, unchanged
     * @since 3.2
     */
    public static double CONST(final double v)","0","-","-","-","-"
"8561","CONST","/**
     * Returns the provided value unchanged.
     * This can prevent javac from inlining a constant
     * field, e.g.,
     *
     * <pre>
     *     public final static float MAGIC_FLOAT = ObjectUtils.CONST(1.0f);
     * </pre>
     *
     * This way any jars that refer to this field do not
     * have to recompile themselves if the field's value
     * changes at some future date.
     *
     * @param v the float value to return
     * @return the float v, unchanged
     * @since 3.2
     */
    public static float CONST(final float v)","0","-","-","-","-"
"8562","CONST","/**
     * Returns the provided value unchanged.
     * This can prevent javac from inlining a constant
     * field, e.g.,
     *
     * <pre>
     *     public final static int MAGIC_INT = ObjectUtils.CONST(123);
     * </pre>
     *
     * This way any jars that refer to this field do not
     * have to recompile themselves if the field's value
     * changes at some future date.
     *
     * @param v the int value to return
     * @return the int v, unchanged
     * @since 3.2
     */
    public static int CONST(final int v)","0","-","-","-","-"
"8563","CONST","/**
     * Returns the provided value unchanged.
     * This can prevent javac from inlining a constant
     * field, e.g.,
     *
     * <pre>
     *     public final static long MAGIC_LONG = ObjectUtils.CONST(123L);
     * </pre>
     *
     * This way any jars that refer to this field do not
     * have to recompile themselves if the field's value
     * changes at some future date.
     *
     * @param v the long value to return
     * @return the long v, unchanged
     * @since 3.2
     */
    public static long CONST(final long v)","0","-","-","-","-"
"8564","CONST","/**
     * Returns the provided value unchanged.
     * This can prevent javac from inlining a constant
     * field, e.g.,
     *
     * <pre>
     *     public final static short MAGIC_SHORT = ObjectUtils.CONST((short) 123);
     * </pre>
     *
     * This way any jars that refer to this field do not
     * have to recompile themselves if the field's value
     * changes at some future date.
     *
     * @param v the short value to return
     * @return the short v, unchanged
     * @since 3.2
     */
    public static short CONST(final short v)","0","-","-","-","-"
"8565","CONST","/**
     * Returns the provided value unchanged.
     * This can prevent javac from inlining a constant
     * field, e.g.,
     *
     * <pre>
     *     public final static String MAGIC_STRING = ObjectUtils.CONST(""abc"");
     * </pre>
     *
     * This way any jars that refer to this field do not
     * have to recompile themselves if the field's value
     * changes at some future date.
     *
     * @param <T> the Object type
     * @param v the genericized Object value to return (typically a String).
     * @return the genericized Object v, unchanged (typically a String).
     * @since 3.2
     */
    public static <T> T CONST(final T v)","0","-","-","-","-"
"8566","CONST_BYTE","/**
     * Returns the provided value unchanged.
     * This can prevent javac from inlining a constant
     * field, e.g.,
     *
     * <pre>
     *     public final static byte MAGIC_BYTE = ObjectUtils.CONST_BYTE(127);
     * </pre>
     *
     * This way any jars that refer to this field do not
     * have to recompile themselves if the field's value
     * changes at some future date.
     *
     * @param v the byte literal (as an int) value to return
     * @throws IllegalArgumentException if the value passed to v
     *         is larger than a byte, that is, smaller than -128 or
     *         larger than 127.
     * @return the byte v, unchanged
     * @since 3.2
     */
    public static byte CONST_BYTE(final int v)","0","-","-","-","-"
"8567","CONST_SHORT","/**
     * Returns the provided value unchanged.
     * This can prevent javac from inlining a constant
     * field, e.g.,
     *
     * <pre>
     *     public final static short MAGIC_SHORT = ObjectUtils.CONST_SHORT(127);
     * </pre>
     *
     * This way any jars that refer to this field do not
     * have to recompile themselves if the field's value
     * changes at some future date.
     *
     * @param v the short literal (as an int) value to return
     * @throws IllegalArgumentException if the value passed to v
     *         is larger than a short, that is, smaller than -32768 or
     *         larger than 32767.
     * @return the byte v, unchanged
     * @since 3.2
     */
    public static short CONST_SHORT(final int v)","0","-","-","-","-"
"8568","defaultIfNull","/**
     * Returns a default value if the object passed is","0","-","-","-","-"
"8569","equals","/**
     * Compares two objects for equality, where either one or both
     * objects may be","0","-","-","-","-"
"8570","firstNonNull","/**
     * Returns the first value in the array which is not","0","-","-","-","-"
"8571","getClass","/**
     * Delegates to","0","-","-","-","-"
"8572","getFirstNonNull","/**
     * Executes the given suppliers in order and returns the first return
     * value where a value other than","0","-","-","-","-"
"8573","getIfNull","/**
     * Returns the given","0","-","-","-","-"
"8574","hashCode","/**
     * Gets the hash code of an object returning zero when the
     * object is","0","-","-","-","-"
"8575","hashCodeHex","/**
     * Returns the hexadecimal hash code for the given object per","0","-","-","-","-"
"8576","hashCodeMulti","/**
     * Gets the hash code for multiple objects.
     *
     * <p>This allows a hash code to be rapidly calculated for a number of objects.
     * The hash code for a single object is the <em>not</em> same as","0","-","-","-","-"
"8577","identityHashCodeHex","/**
     * Returns the hexadecimal hash code for the given object per","0","-","-","-","-"
"8578","identityToString","/**
     * Appends the toString that would be produced by","0","-","-","-","-"
"8579","identityToString","/**
     * Gets the toString that would be produced by","0","-","-","-","-"
"8580","identityToString","/**
     * Appends the toString that would be produced by","0","-","-","-","-"
"8581","identityToString","/**
     * Appends the toString that would be produced by","0","-","-","-","-"
"8582","identityToString","/**
     * Appends the toString that would be produced by","0","-","-","-","-"
"8583","isArray","/**
     * Tests whether the given object is an Object array or a primitive array in a null-safe manner.
     *
     * <p>
     * A","0","-","-","-","-"
"8584","isEmpty","/**
     * Tests if an Object is empty or null.
     *
     * The following types are supported:
     * <ul>
     * <li>","0","-","-","-","-"
"8585","isNotEmpty","/**
     * Tests if an Object is not empty and not null.
     *
     * The following types are supported:
     * <ul>
     * <li>","0","-","-","-","-"
"8586","max","/**
     * Null safe comparison of Comparables.
     * <p>TODO Move to ComparableUtils.</p>
     *
     * @param <T> type of the values processed by this method
     * @param values the set of comparable values, may be null
     * @return
     *  <ul>
     *   <li>If any objects are non-null and unequal, the greater object.
     *   <li>If all objects are non-null and equal, the first.
     *   <li>If any of the comparables are null, the greater of the non-null objects.
     *   <li>If all the comparables are null, null is returned.
     *  </ul>
     */
    @SafeVarargs
    public static <T extends Comparable<? super T>> T max(final T... values)","0","-","-","-","-"
"8587","median","/**
     * Find the ""best guess"" middle value among comparables. If there is an even
     * number of total values, the lower of the two middle values will be returned.
     * @param <T> type of values processed by this method
     * @param comparator to use for comparisons
     * @param items to compare
     * @return T at middle position
     * @throws NullPointerException if items or comparator is","0","-","-","-","-"
"8588","median","/**
     * Find the ""best guess"" middle value among comparables. If there is an even
     * number of total values, the lower of the two middle values will be returned.
     * @param <T> type of values processed by this method
     * @param items to compare
     * @return T at middle position
     * @throws NullPointerException if items is","0","-","-","-","-"
"8589","min","/**
     * Null safe comparison of Comparables.
     * <p>TODO Move to ComparableUtils.</p>
     *
     * @param <T> type of the values processed by this method
     * @param values the set of comparable values, may be null
     * @return
     *  <ul>
     *   <li>If any objects are non-null and unequal, the lesser object.
     *   <li>If all objects are non-null and equal, the first.
     *   <li>If any of the comparables are null, the lesser of the non-null objects.
     *   <li>If all the comparables are null, null is returned.
     *  </ul>
     */
    @SafeVarargs
    public static <T extends Comparable<? super T>> T min(final T... values)","0","-","-","-","-"
"8590","mode","/**
     * Find the most frequently occurring item.
     *
     * @param <T> type of values processed by this method
     * @param items to check
     * @return most populous T,","0","-","-","-","-"
"8591","notEqual","/**
     * Compares two objects for inequality, where either one or both
     * objects may be","0","-","-","-","-"
"8592","requireNonEmpty","/**
     * Checks that the specified object reference is not","0","-","-","-","-"
"8593","requireNonEmpty","/**
     * Checks that the specified object reference is not","0","-","-","-","-"
"8594","toString","/**
     * Gets the","0","-","-","-","-"
"8595","toString","/**
     * Gets the","0","-","-","-","-"
"8596","toString","/**
     * Gets the","0","-","-","-","-"
"8597","toString","/**
     * Gets the","0","-","-","-","-"
"8598","wait","/**
     * Calls","0","-","-","-","-"
"8599","ObjectUtils","/**
     *","0","-","-","-","-"
"8600","replace","/**
     * Replaces all the occurrences of variables in the given source object with
     * their matching values from the map.
     *
     * @param <V> the type of the values in the map
     * @param source  the source text containing the variables to substitute, null returns null
     * @param valueMap  the map with the values, may be null
     * @return the result of the replace operation
     */
    public static <V> String replace(final Object source, final Map<String, V> valueMap)","0","-","-","-","-"
"8601","replace","/**
     * Replaces all the occurrences of variables in the given source object with
     * their matching values from the map. This method allows to specify a
     * custom variable prefix and suffix
     *
     * @param <V> the type of the values in the map
     * @param source  the source text containing the variables to substitute, null returns null
     * @param valueMap  the map with the values, may be null
     * @param prefix  the prefix of variables, not null
     * @param suffix  the suffix of variables, not null
     * @return the result of the replace operation
     * @throws IllegalArgumentException if the prefix or suffix is null
     */
    public static <V> String replace(final Object source, final Map<String, V> valueMap, final String prefix, final String suffix)","0","-","-","-","-"
"8602","replace","/**
     * Replaces all the occurrences of variables in the given source object with their matching
     * values from the properties.
     *
     * @param source the source text containing the variables to substitute, null returns null
     * @param valueProperties the properties with values, may be null
     * @return the result of the replace operation
     */
    public static String replace(final Object source, final Properties valueProperties)","0","-","-","-","-"
"8603","replaceSystemProperties","/**
     * Replaces all the occurrences of variables in the given source object with
     * their matching values from the system properties.
     *
     * @param source  the source text containing the variables to substitute, null returns null
     * @return the result of the replace operation
     */
    public static String replaceSystemProperties(final Object source)","0","-","-","-","-"
"8604","StrSubstitutor","/**
     * Creates a new instance with defaults for variable prefix and suffix
     * and the escaping character.
     */
    public StrSubstitutor()","0","-","-","-","-"
"8605","StrSubstitutor","/**
     * Creates a new instance and initializes it. Uses defaults for variable
     * prefix and suffix and the escaping character.
     *
     * @param <V> the type of the values in the map
     * @param valueMap  the map with the variables' values, may be null
     */
    public <V> StrSubstitutor(final Map<String, V> valueMap)","0","-","-","-","-"
"8606","StrSubstitutor","/**
     * Creates a new instance and initializes it. Uses a default escaping character.
     *
     * @param <V> the type of the values in the map
     * @param valueMap  the map with the variables' values, may be null
     * @param prefix  the prefix for variables, not null
     * @param suffix  the suffix for variables, not null
     * @throws IllegalArgumentException if the prefix or suffix is null
     */
    public <V> StrSubstitutor(final Map<String, V> valueMap, final String prefix, final String suffix)","0","-","-","-","-"
"8607","StrSubstitutor","/**
     * Creates a new instance and initializes it.
     *
     * @param <V> the type of the values in the map
     * @param valueMap  the map with the variables' values, may be null
     * @param prefix  the prefix for variables, not null
     * @param suffix  the suffix for variables, not null
     * @param escape  the escape character
     * @throws IllegalArgumentException if the prefix or suffix is null
     */
    public <V> StrSubstitutor(final Map<String, V> valueMap, final String prefix, final String suffix,
                              final char escape)","0","-","-","-","-"
"8608","StrSubstitutor","/**
     * Creates a new instance and initializes it.
     *
     * @param <V> the type of the values in the map
     * @param valueMap  the map with the variables' values, may be null
     * @param prefix  the prefix for variables, not null
     * @param suffix  the suffix for variables, not null
     * @param escape  the escape character
     * @param valueDelimiter  the variable default value delimiter, may be null
     * @throws IllegalArgumentException if the prefix or suffix is null
     * @since 3.2
     */
    public <V> StrSubstitutor(final Map<String, V> valueMap, final String prefix, final String suffix,
                              final char escape, final String valueDelimiter)","0","-","-","-","-"
"8609","StrSubstitutor","/**
     * Creates a new instance and initializes it.
     *
     * @param variableResolver  the variable resolver, may be null
     */
    public StrSubstitutor(final StrLookup<?> variableResolver)","0","-","-","-","-"
"8610","StrSubstitutor","/**
     * Creates a new instance and initializes it.
     *
     * @param variableResolver  the variable resolver, may be null
     * @param prefix  the prefix for variables, not null
     * @param suffix  the suffix for variables, not null
     * @param escape  the escape character
     * @throws IllegalArgumentException if the prefix or suffix is null
     */
    public StrSubstitutor(final StrLookup<?> variableResolver, final String prefix, final String suffix,
                          final char escape)","0","-","-","-","-"
"8611","StrSubstitutor","/**
     * Creates a new instance and initializes it.
     *
     * @param variableResolver  the variable resolver, may be null
     * @param prefix  the prefix for variables, not null
     * @param suffix  the suffix for variables, not null
     * @param escape  the escape character
     * @param valueDelimiter  the variable default value delimiter string, may be null
     * @throws IllegalArgumentException if the prefix or suffix is null
     * @since 3.2
     */
    public StrSubstitutor(final StrLookup<?> variableResolver, final String prefix, final String suffix,
                          final char escape, final String valueDelimiter)","0","-","-","-","-"
"8612","StrSubstitutor","/**
     * Creates a new instance and initializes it.
     *
     * @param variableResolver  the variable resolver, may be null
     * @param prefixMatcher  the prefix for variables, not null
     * @param suffixMatcher  the suffix for variables, not null
     * @param escape  the escape character
     * @throws IllegalArgumentException if the prefix or suffix is null
     */
    public StrSubstitutor(
            final StrLookup<?> variableResolver, final StrMatcher prefixMatcher, final StrMatcher suffixMatcher,
            final char escape)","0","-","-","-","-"
"8613","StrSubstitutor","/**
     * Creates a new instance and initializes it.
     *
     * @param variableResolver  the variable resolver, may be null
     * @param prefixMatcher  the prefix for variables, not null
     * @param suffixMatcher  the suffix for variables, not null
     * @param escape  the escape character
     * @param valueDelimiterMatcher  the variable default value delimiter matcher, may be null
     * @throws IllegalArgumentException if the prefix or suffix is null
     * @since 3.2
     */
    public StrSubstitutor(
            final StrLookup<?> variableResolver, final StrMatcher prefixMatcher, final StrMatcher suffixMatcher,
            final char escape, final StrMatcher valueDelimiterMatcher)","0","-","-","-","-"
"8614","checkCyclicSubstitution","/**
     * Checks if the specified variable is already in the stack (list) of variables.
     *
     * @param varName  the variable name to check
     * @param priorVariables  the list of prior variables
     */
    private void checkCyclicSubstitution(final String varName, final List<String> priorVariables)","0","-","-","-","-"
"8615","getEscapeChar","/**
     * Returns the escape character.
     *
     * @return the character used for escaping variable references
     */
    public char getEscapeChar()","0","-","-","-","-"
"8616","getValueDelimiterMatcher","/**
     * Gets the variable default value delimiter matcher currently in use.
     * <p>
     * The variable default value delimiter is the character or characters that delimit the
     * variable name and the variable default value. This delimiter is expressed in terms of a matcher
     * allowing advanced variable default value delimiter matches.
     * </p>
     * <p>
     * If it returns null, then the variable default value resolution is disabled.
     * </p>
     *
     * @return the variable default value delimiter matcher in use, may be null
     * @since 3.2
     */
    public StrMatcher getValueDelimiterMatcher()","0","-","-","-","-"
"8617","getVariablePrefixMatcher","/**
     * Gets the variable prefix matcher currently in use.
     * <p>
     * The variable prefix is the character or characters that identify the
     * start of a variable. This prefix is expressed in terms of a matcher
     * allowing advanced prefix matches.
     * </p>
     *
     * @return the prefix matcher in use
     */
    public StrMatcher getVariablePrefixMatcher()","0","-","-","-","-"
"8618","getVariableResolver","/**
     * Gets the VariableResolver that is used to lookup variables.
     *
     * @return the VariableResolver
     */
    public StrLookup<?> getVariableResolver()","0","-","-","-","-"
"8619","getVariableSuffixMatcher","/**
     * Gets the variable suffix matcher currently in use.
     * <p>
     * The variable suffix is the character or characters that identify the
     * end of a variable. This suffix is expressed in terms of a matcher
     * allowing advanced suffix matches.
     * </p>
     *
     * @return the suffix matcher in use
     */
    public StrMatcher getVariableSuffixMatcher()","0","-","-","-","-"
"8620","isEnableSubstitutionInVariables","/**
     * Returns a flag whether substitution is done in variable names.
     *
     * @return the substitution in variable names flag
     * @since 3.0
     */
    public boolean isEnableSubstitutionInVariables()","0","-","-","-","-"
"8621","isPreserveEscapes","/**
     * Returns the flag controlling whether escapes are preserved during
     * substitution.
     *
     * @return the preserve escape flag
     * @since 3.5
     */
    public boolean isPreserveEscapes()","0","-","-","-","-"
"8622","replace","/**
     * Replaces all the occurrences of variables with their matching values
     * from the resolver using the given source array as a template.
     * The array is not altered by this method.
     *
     * @param source  the character array to replace in, not altered, null returns null
     * @return the result of the replace operation
     */
    public String replace(final char[] source)","0","-","-","-","-"
"8623","replace","/**
     * Replaces all the occurrences of variables with their matching values
     * from the resolver using the given source array as a template.
     * The array is not altered by this method.
     * <p>
     * Only the specified portion of the array will be processed.
     * The rest of the array is not processed, and is not returned.
     * </p>
     *
     * @param source  the character array to replace in, not altered, null returns null
     * @param offset  the start offset within the array, must be valid
     * @param length  the length within the array to be processed, must be valid
     * @return the result of the replace operation
     */
    public String replace(final char[] source, final int offset, final int length)","0","-","-","-","-"
"8624","replace","/**
     * Replaces all the occurrences of variables with their matching values
     * from the resolver using the given source as a template.
     * The source is not altered by this method.
     *
     * @param source  the buffer to use as a template, not changed, null returns null
     * @return the result of the replace operation
     * @since 3.2
     */
    public String replace(final CharSequence source)","0","-","-","-","-"
"8625","replace","/**
     * Replaces all the occurrences of variables with their matching values
     * from the resolver using the given source as a template.
     * The source is not altered by this method.
     * <p>
     * Only the specified portion of the buffer will be processed.
     * The rest of the buffer is not processed, and is not returned.
     * </p>
     *
     * @param source  the buffer to use as a template, not changed, null returns null
     * @param offset  the start offset within the array, must be valid
     * @param length  the length within the array to be processed, must be valid
     * @return the result of the replace operation
     * @since 3.2
     */
    public String replace(final CharSequence source, final int offset, final int length)","0","-","-","-","-"
"8626","replace","/**
     * Replaces all the occurrences of variables in the given source object with
     * their matching values from the resolver. The input source object is
     * converted to a string using","0","-","-","-","-"
"8627","replace","/**
     * Replaces all the occurrences of variables with their matching values
     * from the resolver using the given source builder as a template.
     * The builder is not altered by this method.
     *
     * @param source  the builder to use as a template, not changed, null returns null
     * @return the result of the replace operation
     */
    public String replace(final StrBuilder source)","0","-","-","-","-"
"8628","replace","/**
     * Replaces all the occurrences of variables with their matching values
     * from the resolver using the given source builder as a template.
     * The builder is not altered by this method.
     * <p>
     * Only the specified portion of the builder will be processed.
     * The rest of the builder is not processed, and is not returned.
     * </p>
     *
     * @param source  the builder to use as a template, not changed, null returns null
     * @param offset  the start offset within the array, must be valid
     * @param length  the length within the array to be processed, must be valid
     * @return the result of the replace operation
     */
    public String replace(final StrBuilder source, final int offset, final int length)","0","-","-","-","-"
"8629","replace","/**
     * Replaces all the occurrences of variables with their matching values
     * from the resolver using the given source string as a template.
     *
     * @param source  the string to replace in, null returns null
     * @return the result of the replace operation
     */
    public String replace(final String source)","0","-","-","-","-"
"8630","replace","/**
     * Replaces all the occurrences of variables with their matching values
     * from the resolver using the given source string as a template.
     * <p>
     * Only the specified portion of the string will be processed.
     * The rest of the string is not processed, and is not returned.
     * </p>
     *
     * @param source  the string to replace in, null returns null
     * @param offset  the start offset within the array, must be valid
     * @param length  the length within the array to be processed, must be valid
     * @return the result of the replace operation
     */
    public String replace(final String source, final int offset, final int length)","0","-","-","-","-"
"8631","replace","/**
     * Replaces all the occurrences of variables with their matching values
     * from the resolver using the given source buffer as a template.
     * The buffer is not altered by this method.
     *
     * @param source  the buffer to use as a template, not changed, null returns null
     * @return the result of the replace operation
     */
    public String replace(final StringBuffer source)","0","-","-","-","-"
"8632","replace","/**
     * Replaces all the occurrences of variables with their matching values
     * from the resolver using the given source buffer as a template.
     * The buffer is not altered by this method.
     * <p>
     * Only the specified portion of the buffer will be processed.
     * The rest of the buffer is not processed, and is not returned.
     * </p>
     *
     * @param source  the buffer to use as a template, not changed, null returns null
     * @param offset  the start offset within the array, must be valid
     * @param length  the length within the array to be processed, must be valid
     * @return the result of the replace operation
     */
    public String replace(final StringBuffer source, final int offset, final int length)","0","-","-","-","-"
"8633","replaceIn","/**
     * Replaces all the occurrences of variables within the given source
     * builder with their matching values from the resolver.
     *
     * @param source  the builder to replace in, updated, null returns zero
     * @return true if altered
     */
    public boolean replaceIn(final StrBuilder source)","0","-","-","-","-"
"8634","replaceIn","/**
     * Replaces all the occurrences of variables within the given source
     * builder with their matching values from the resolver.
     * <p>
     * Only the specified portion of the builder will be processed.
     * The rest of the builder is not processed, but it is not deleted.
     * </p>
     *
     * @param source  the builder to replace in, null returns zero
     * @param offset  the start offset within the array, must be valid
     * @param length  the length within the builder to be processed, must be valid
     * @return true if altered
     */
    public boolean replaceIn(final StrBuilder source, final int offset, final int length)","0","-","-","-","-"
"8635","replaceIn","/**
     * Replaces all the occurrences of variables within the given source buffer
     * with their matching values from the resolver.
     * The buffer is updated with the result.
     *
     * @param source  the buffer to replace in, updated, null returns zero
     * @return true if altered
     */
    public boolean replaceIn(final StringBuffer source)","0","-","-","-","-"
"8636","replaceIn","/**
     * Replaces all the occurrences of variables within the given source buffer
     * with their matching values from the resolver.
     * The buffer is updated with the result.
     * <p>
     * Only the specified portion of the buffer will be processed.
     * The rest of the buffer is not processed, but it is not deleted.
     * </p>
     *
     * @param source  the buffer to replace in, updated, null returns zero
     * @param offset  the start offset within the array, must be valid
     * @param length  the length within the buffer to be processed, must be valid
     * @return true if altered
     */
    public boolean replaceIn(final StringBuffer source, final int offset, final int length)","0","-","-","-","-"
"8637","replaceIn","/**
     * Replaces all the occurrences of variables within the given source buffer
     * with their matching values from the resolver.
     * The buffer is updated with the result.
     *
     * @param source  the buffer to replace in, updated, null returns zero
     * @return true if altered
     * @since 3.2
     */
    public boolean replaceIn(final StringBuilder source)","0","-","-","-","-"
"8638","replaceIn","/**
     * Replaces all the occurrences of variables within the given source builder
     * with their matching values from the resolver.
     * The builder is updated with the result.
     * <p>
     * Only the specified portion of the buffer will be processed.
     * The rest of the buffer is not processed, but it is not deleted.
     * </p>
     *
     * @param source  the buffer to replace in, updated, null returns zero
     * @param offset  the start offset within the array, must be valid
     * @param length  the length within the buffer to be processed, must be valid
     * @return true if altered
     * @since 3.2
     */
    public boolean replaceIn(final StringBuilder source, final int offset, final int length)","0","-","-","-","-"
"8639","resolveVariable","/**
     * Internal method that resolves the value of a variable.
     * <p>
     * Most users of this class do not need to call this method. This method is
     * called automatically by the substitution process.
     * </p>
     * <p>
     * Writers of subclasses can override this method if they need to alter
     * how each substitution occurs. The method is passed the variable's name
     * and must return the corresponding value. This implementation uses the
     *","0","-","-","-","-"
"8640","setEnableSubstitutionInVariables","/**
     * Sets a flag whether substitution is done in variable names. If set to
     * <strong>true</strong>, the names of variables can contain other variables which are
     * processed first before the original variable is evaluated, e.g.
     *","0","-","-","-","-"
"8641","setEscapeChar","/**
     * Sets the escape character.
     * If this character is placed before a variable reference in the source
     * text, this variable will be ignored.
     *
     * @param escapeCharacter  the escape character (0 for disabling escaping)
     */
    public void setEscapeChar(final char escapeCharacter)","0","-","-","-","-"
"8642","setPreserveEscapes","/**
     * Sets a flag controlling whether escapes are preserved during
     * substitution.  If set to <strong>true</strong>, the escape character is retained
     * during substitution (e.g.","0","-","-","-","-"
"8643","setValueDelimiter","/**
     * Sets the variable default value delimiter to use.
     * <p>
     * The variable default value delimiter is the character or characters that delimit the
     * variable name and the variable default value. This method allows a single character
     * variable default value delimiter to be easily set.
     * </p>
     *
     * @param valueDelimiter  the variable default value delimiter character to use
     * @return this, to enable chaining
     * @since 3.2
     */
    public StrSubstitutor setValueDelimiter(final char valueDelimiter)","0","-","-","-","-"
"8644","setValueDelimiter","/**
     * Sets the variable default value delimiter to use.
     * <p>
     * The variable default value delimiter is the character or characters that delimit the
     * variable name and the variable default value. This method allows a string
     * variable default value delimiter to be easily set.
     * </p>
     * <p>
     * If the","0","-","-","-","-"
"8645","setValueDelimiterMatcher","/**
     * Sets the variable default value delimiter matcher to use.
     * <p>
     * The variable default value delimiter is the character or characters that delimit the
     * variable name and the variable default value. This delimiter is expressed in terms of a matcher
     * allowing advanced variable default value delimiter matches.
     * </p>
     * <p>
     * If the","0","-","-","-","-"
"8646","setVariablePrefix","/**
     * Sets the variable prefix to use.
     * <p>
     * The variable prefix is the character or characters that identify the
     * start of a variable. This method allows a single character prefix to
     * be easily set.
     * </p>
     *
     * @param prefix  the prefix character to use
     * @return this, to enable chaining
     */
    public StrSubstitutor setVariablePrefix(final char prefix)","0","-","-","-","-"
"8647","setVariablePrefix","/**
     * Sets the variable prefix to use.
     * <p>
     * The variable prefix is the character or characters that identify the
     * start of a variable. This method allows a string prefix to be easily set.
     * </p>
     *
     * @param prefix  the prefix for variables, not null
     * @return this, to enable chaining
     * @throws NullPointerException if the prefix is null
     */
    public StrSubstitutor setVariablePrefix(final String prefix)","0","-","-","-","-"
"8648","setVariablePrefixMatcher","/**
     * Sets the variable prefix matcher currently in use.
     * <p>
     * The variable prefix is the character or characters that identify the
     * start of a variable. This prefix is expressed in terms of a matcher
     * allowing advanced prefix matches.
     * </p>
     *
     * @param prefixMatcher  the prefix matcher to use, null ignored
     * @return this, to enable chaining
     * @throws NullPointerException if the prefix matcher is null
     */
    public StrSubstitutor setVariablePrefixMatcher(final StrMatcher prefixMatcher)","0","-","-","-","-"
"8649","setVariableResolver","/**
     * Sets the VariableResolver that is used to lookup variables.
     *
     * @param variableResolver  the VariableResolver
     */
    public void setVariableResolver(final StrLookup<?> variableResolver)","0","-","-","-","-"
"8650","setVariableSuffix","/**
     * Sets the variable suffix to use.
     * <p>
     * The variable suffix is the character or characters that identify the
     * end of a variable. This method allows a single character suffix to
     * be easily set.
     * </p>
     *
     * @param suffix  the suffix character to use
     * @return this, to enable chaining
     */
    public StrSubstitutor setVariableSuffix(final char suffix)","0","-","-","-","-"
"8651","setVariableSuffix","/**
     * Sets the variable suffix to use.
     * <p>
     * The variable suffix is the character or characters that identify the
     * end of a variable. This method allows a string suffix to be easily set.
     * </p>
     *
     * @param suffix  the suffix for variables, not null
     * @return this, to enable chaining
     * @throws NullPointerException if the suffix is null
     */
    public StrSubstitutor setVariableSuffix(final String suffix)","0","-","-","-","-"
"8652","setVariableSuffixMatcher","/**
     * Sets the variable suffix matcher currently in use.
     * <p>
     * The variable suffix is the character or characters that identify the
     * end of a variable. This suffix is expressed in terms of a matcher
     * allowing advanced suffix matches.
     * </p>
     *
     * @param suffixMatcher  the suffix matcher to use, null ignored
     * @return this, to enable chaining
     * @throws NullPointerException if the suffix matcher is null
     */
    public StrSubstitutor setVariableSuffixMatcher(final StrMatcher suffixMatcher)","0","-","-","-","-"
"8653","substitute","/**
     * Internal method that substitutes the variables.
     * <p>
     * Most users of this class do not need to call this method. This method will
     * be called automatically by another (public) method.
     * </p>
     * <p>
     * Writers of subclasses can override this method if they need access to
     * the substitution process at the start or end.
     * </p>
     *
     * @param buf  the string builder to substitute into, not null
     * @param offset  the start offset within the builder, must be valid
     * @param length  the length within the builder to be processed, must be valid
     * @return true if altered
     */
    protected boolean substitute(final StrBuilder buf, final int offset, final int length)","0","-","-","-","-"
"8654","substitute","/**
     * Recursive handler for multiple levels of interpolation. This is the main
     * interpolation method, which resolves the values of all variable references
     * contained in the passed-in text.
     *
     * @param buf  the string builder to substitute into, not null
     * @param offset  the start offset within the builder, must be valid
     * @param length  the length within the builder to be processed, must be valid
     * @param priorVariables  the stack keeping track of the replaced variables, may be null
     * @return the length change that occurs, unless priorVariables is null when the int
     *  represents a boolean flag as to whether any change occurred.
     */
    private int substitute(final StrBuilder buf, final int offset, final int length, List<String> priorVariables)","0","-","-","-","-"
"8655","NumericEntityUnescaper","/**
     * Create a UnicodeUnescaper.
     *
     * The constructor takes a list of options, only one type of which is currently
     * available (whether to allow, error or ignore the semicolon on the end of a
     * numeric entity to being missing).
     *
     * For example, to support numeric entities without a ';':
     *    new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional)
     * and to throw an IllegalArgumentException when they're missing:
     *    new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon)
     *
     * Note that the default behavior is to ignore them.
     *
     * @param options to apply to this unescaper
     */
    public NumericEntityUnescaper(final OPTION... options)","0","-","-","-","-"
"8656","isSet","/**
     * Tests whether the passed in option is currently set.
     *
     * @param option to check state of
     * @return whether the option is set
     */
    public boolean isSet(final OPTION option)","0","-","-","-","-"
"8657","translate","/**
     *","0","-","-","-","-"
"8658","AggregateTranslator","/**
     * Specify the translators to be used at creation time.
     *
     * @param translators CharSequenceTranslator array to aggregate
     */
    public AggregateTranslator(final CharSequenceTranslator... translators)","0","-","-","-","-"
"8659","translate","/**
     * The first translator to consume code points from the input is the 'winner'.
     * Execution stops with the number of consumed code points being returned.
     *","0","-","-","-","-"
"8660","hex","/**
     * Returns an upper case hexadecimal","0","-","-","-","-"
"8661","CharSequenceTranslator","/**
     * Constructs a new instance.
     */
    public CharSequenceTranslator()","0","-","-","-","-"
"8662","translate","/**
     * Helper for non-Writer usage.
     * @param input CharSequence to be translated
     * @return String output of translation
     */
    public final String translate(final CharSequence input)","0","-","-","-","-"
"8663","translate","/**
     * Translate a set of code points, represented by an int index into a CharSequence,
     * into another set of code points. The number of code points consumed must be returned,
     * and the only IOExceptions thrown must be from interacting with the Writer so that
     * the top level API may reliably ignore StringWriter IOExceptions.
     *
     * @param input CharSequence that is being translated
     * @param index int representing the current point of translation
     * @param out Writer to translate the text to
     * @return int count of code points consumed
     * @throws IOException if and only if the Writer produces an IOException
     */
    public abstract int translate(CharSequence input, int index, Writer out) throws IOException;","0","-","-","-","-"
"8664","translate","/**
     * Translate an input onto a Writer. This is intentionally final as its algorithm is
     * tightly coupled with the abstract method of this class.
     *
     * @param input CharSequence that is being translated
     * @param writer Writer to translate the text to
     * @throws IOException if and only if the Writer produces an IOException
     */
    @SuppressWarnings(""resource"") // Caller closes writer
    public final void translate(final CharSequence input, final Writer writer) throws IOException","0","-","-","-","-"
"8665","with","/**
     * Helper method to create a merger of this translator with another set of
     * translators. Useful in customizing the standard functionality.
     *
     * @param translators CharSequenceTranslator array of translators to merge with this one
     * @return CharSequenceTranslator merging this translator with the others
     */
    public final CharSequenceTranslator with(final CharSequenceTranslator... translators)","0","-","-","-","-"
"8666","OctalUnescaper","/**
     * Constructs a new instance.
     */
    public OctalUnescaper()","0","-","-","-","-"
"8667","isOctalDigit","/**
     * Checks if the given char is an octal digit. Octal digits are the character representations of the digits 0 to 7.
     * @param ch the char to check
     * @return true if the given char is the character representation of one of the digits from 0 to 7
     */
    private boolean isOctalDigit(final char ch)","0","-","-","-","-"
"8668","isZeroToThree","/**
     * Checks if the given char is the character representation of one of the digit from 0 to 3.
     * @param ch the char to check
     * @return true if the given char is the character representation of one of the digits from 0 to 3
     */
    private boolean isZeroToThree(final char ch)","0","-","-","-","-"
"8669","translate","/**
     *","0","-","-","-","-"
"8670","above","/**
     * Constructs a","0","-","-","-","-"
"8671","below","/**
     * Constructs a","0","-","-","-","-"
"8672","between","/**
     * Constructs a","0","-","-","-","-"
"8673","outsideOf","/**
     * Constructs a","0","-","-","-","-"
"8674","JavaUnicodeEscaper","/**
     * Constructs a","0","-","-","-","-"
"8675","toUtf16Escape","/**
     * Converts the given code point to a hexadecimal string of the form","0","-","-","-","-"
"8676","LookupTranslator","/**
     * Define the lookup table to be used in translation
     *
     * Note that, as of Lang 3.1, the key to the lookup table is converted to a
     * java.lang.String. This is because we need the key to support hashCode and
     * equals(Object), allowing it to be the key for a HashMap. See LANG-882.
     *
     * @param lookup CharSequence[][] table of size [*][2]
     */
    public LookupTranslator(final CharSequence[]... lookup)","0","-","-","-","-"
"8677","translate","/**
     *","0","-","-","-","-"
"8678","UnicodeUnescaper","/**
     * Constructs a new instance.
     */
    public UnicodeUnescaper()","0","-","-","-","-"
"8679","translate","/**
     *","0","-","-","-","-"
"8680","above","/**
     * Constructs a","0","-","-","-","-"
"8681","below","/**
     * Constructs a","0","-","-","-","-"
"8682","between","/**
     * Constructs a","0","-","-","-","-"
"8683","outsideOf","/**
     * Constructs a","0","-","-","-","-"
"8684","UnicodeEscaper","/**
     * Constructs a","0","-","-","-","-"
"8685","UnicodeEscaper","/**
     * Constructs a","0","-","-","-","-"
"8686","toUtf16Escape","/**
     * Converts the given code point to a hexadecimal string of the form","0","-","-","-","-"
"8687","translate","/**
     *","0","-","-","-","-"
"8688","UnicodeUnpairedSurrogateRemover","/**
     * Constructs a new instance.
     */
    public UnicodeUnpairedSurrogateRemover()","0","-","-","-","-"
"8689","translate","/**
     * Implements translate that throws out unpaired surrogates.
     *","0","-","-","-","-"
"8690","APOS_ESCAPE","/**
     * Mapping to escape the apostrophe character to its XML character entity.
     * @return the mapping table
     */
    public static String[][] APOS_ESCAPE()","0","-","-","-","-"
"8691","APOS_UNESCAPE","/**
     * Reverse of","0","-","-","-","-"
"8692","BASIC_ESCAPE","/**
     * Mapping to escape the basic XML and HTML character entities.
     *
     * Namely:","0","-","-","-","-"
"8693","BASIC_UNESCAPE","/**
     * Reverse of","0","-","-","-","-"
"8694","HTML40_EXTENDED_ESCAPE","/**
     * Mapping to escape additional <a href=""https://www.w3.org/TR/REC-html40/sgml/entities.html"">character entity
     * references</a>. Note that this must be used with","0","-","-","-","-"
"8695","HTML40_EXTENDED_UNESCAPE","/**
     * Reverse of","0","-","-","-","-"
"8696","invert","/**
     * Used to invert an escape array into an unescape array
     * @param array String[][] to be inverted
     * @return String[][] inverted array
     */
    public static String[][] invert(final String[][] array)","0","-","-","-","-"
"8697","ISO8859_1_ESCAPE","/**
     * Mapping to escape <a href=""https://secure.wikimedia.org/wikipedia/en/wiki/ISO/IEC_8859-1"">ISO-8859-1</a>
     * characters to their named HTML 3.x equivalents.
     * @return the mapping table
     */
    public static String[][] ISO8859_1_ESCAPE()","0","-","-","-","-"
"8698","ISO8859_1_UNESCAPE","/**
     * Reverse of","0","-","-","-","-"
"8699","JAVA_CTRL_CHARS_ESCAPE","/**
     * Mapping to escape the Java control characters.
     *
     * Namely:","0","-","-","-","-"
"8700","JAVA_CTRL_CHARS_UNESCAPE","/**
     * Reverse of","0","-","-","-","-"
"8701","EntityArrays","/**
     * Constructs a new instance.
     *
     * @deprecated Will be removed in 4.0.0.
     */
    @Deprecated
    public EntityArrays()","0","-","-","-","-"
"8702","above","/**
     * Constructs a","0","-","-","-","-"
"8703","below","/**
     * Constructs a","0","-","-","-","-"
"8704","between","/**
     * Constructs a","0","-","-","-","-"
"8705","outsideOf","/**
     * Constructs a","0","-","-","-","-"
"8706","NumericEntityEscaper","/**
     * Constructs a","0","-","-","-","-"
"8707","NumericEntityEscaper","/**
     * Constructs a","0","-","-","-","-"
"8708","translate","/**
     *","0","-","-","-","-"
"8709","CodePointTranslator","/**
     * Constructs a new instance.
     */
    public CodePointTranslator()","0","-","-","-","-"
"8710","translate","/**
     * Implements translate to map onto the abstract translate(int, Writer) method.
     *","0","-","-","-","-"
"8711","translate","/**
     * Translate the specified code point into another.
     *
     * @param codePoint int character input to translate
     * @param out Writer to optionally push the translated output to
     * @return boolean as to whether translation occurred or not
     * @throws IOException if and only if the Writer produces an IOException
     */
    public abstract boolean translate(int codePoint, Writer out) throws IOException;","0","-","-","-","-"
"8712","StrBuilderReader","/**
         * Default constructor.
         */
        StrBuilderReader()","0","-","-","-","-"
"8713","close","/**","0","-","-","-","-"
"8714","mark","/**","0","-","-","-","-"
"8715","markSupported","/**","0","-","-","-","-"
"8716","read","/**","0","-","-","-","-"
"8717","read","/**","0","-","-","-","-"
"8718","ready","/**","0","-","-","-","-"
"8719","reset","/**","0","-","-","-","-"
"8720","skip","/**","0","-","-","-","-"
"8721","StrBuilderTokenizer","/**
         * Default constructor.
         */
        StrBuilderTokenizer()","0","-","-","-","-"
"8722","getContent","/**","0","-","-","-","-"
"8723","tokenize","/**","0","-","-","-","-"
"8724","StrBuilderWriter","/**
         * Default constructor.
         */
        StrBuilderWriter()","0","-","-","-","-"
"8725","close","/**","0","-","-","-","-"
"8726","flush","/**","0","-","-","-","-"
"8727","write","/**","0","-","-","-","-"
"8728","write","/**","0","-","-","-","-"
"8729","write","/**","0","-","-","-","-"
"8730","write","/**","0","-","-","-","-"
"8731","write","/**","0","-","-","-","-"
"8732","StrBuilder","/**
     * Constructor that creates an empty builder initial capacity 32 characters.
     */
    public StrBuilder()","0","-","-","-","-"
"8733","StrBuilder","/**
     * Constructor that creates an empty builder the specified initial capacity.
     *
     * @param initialCapacity  the initial capacity, zero or less will be converted to 32
     */
    public StrBuilder(int initialCapacity)","0","-","-","-","-"
"8734","StrBuilder","/**
     * Constructor that creates a builder from the string, allocating
     * 32 extra characters for growth.
     *
     * @param str  the string to copy, null treated as blank string
     */
    public StrBuilder(final String str)","0","-","-","-","-"
"8735","append","/**
     * Appends a boolean value to the string builder.
     *
     * @param value  the value to append
     * @return this, to enable chaining
     */
    public StrBuilder append(final boolean value)","0","-","-","-","-"
"8736","append","/**
     * Appends a char value to the string builder.
     *
     * @param ch  the value to append
     * @return this, to enable chaining
     * @since 3.0
     */
    @Override
    public StrBuilder append(final char ch)","0","-","-","-","-"
"8737","append","/**
     * Appends a char array to the string builder.
     * Appending null will call","0","-","-","-","-"
"8738","append","/**
     * Appends a char array to the string builder.
     * Appending null will call","0","-","-","-","-"
"8739","append","/**
     * Appends the contents of a char buffer to this string builder.
     * Appending null will call","0","-","-","-","-"
"8740","append","/**
     * Appends the contents of a char buffer to this string builder.
     * Appending null will call","0","-","-","-","-"
"8741","append","/**
     * Appends a CharSequence to this string builder.
     * Appending null will call","0","-","-","-","-"
"8742","append","/**
     * Appends part of a CharSequence to this string builder.
     * Appending null will call","0","-","-","-","-"
"8743","append","/**
     * Appends a double value to the string builder using","0","-","-","-","-"
"8744","append","/**
     * Appends a float value to the string builder using","0","-","-","-","-"
"8745","append","/**
     * Appends an int value to the string builder using","0","-","-","-","-"
"8746","append","/**
     * Appends a long value to the string builder using","0","-","-","-","-"
"8747","append","/**
     * Appends an object to this string builder.
     * Appending null will call","0","-","-","-","-"
"8748","append","/**
     * Appends another string builder to this string builder.
     * Appending null will call","0","-","-","-","-"
"8749","append","/**
     * Appends part of a string builder to this string builder.
     * Appending null will call","0","-","-","-","-"
"8750","append","/**
     * Appends a string to this string builder.
     * Appending null will call","0","-","-","-","-"
"8751","append","/**
     * Appends part of a string to this string builder.
     * Appending null will call","0","-","-","-","-"
"8752","append","/**
     * Calls","0","-","-","-","-"
"8753","append","/**
     * Appends a string buffer to this string builder.
     * Appending null will call","0","-","-","-","-"
"8754","append","/**
     * Appends part of a string buffer to this string builder.
     * Appending null will call","0","-","-","-","-"
"8755","append","/**
     * Appends a StringBuilder to this string builder.
     * Appending null will call","0","-","-","-","-"
"8756","append","/**
     * Appends part of a StringBuilder to this string builder.
     * Appending null will call","0","-","-","-","-"
"8757","appendAll","/**
     * Appends each item in an iterable to the builder without any separators.
     * Appending a null iterable will have no effect.
     * Each object is appended using","0","-","-","-","-"
"8758","appendAll","/**
     * Appends each item in an iterator to the builder without any separators.
     * Appending a null iterator will have no effect.
     * Each object is appended using","0","-","-","-","-"
"8759","appendAll","/**
     * Appends each item in an array to the builder without any separators.
     * Appending a null array will have no effect.
     * Each object is appended using","0","-","-","-","-"
"8760","appendFixedWidthPadLeft","/**
     * Appends an object to the builder padding on the left to a fixed width.
     * The","0","-","-","-","-"
"8761","appendFixedWidthPadLeft","/**
     * Appends an object to the builder padding on the left to a fixed width.
     * The","0","-","-","-","-"
"8762","appendFixedWidthPadRight","/**
     * Appends an object to the builder padding on the right to a fixed length.
     * The","0","-","-","-","-"
"8763","appendFixedWidthPadRight","/**
     * Appends an object to the builder padding on the right to a fixed length.
     * The","0","-","-","-","-"
"8764","appendln","/**
     * Appends a boolean value followed by a new line to the string builder.
     *
     * @param value  the value to append
     * @return this, to enable chaining
     * @since 2.3
     */
    public StrBuilder appendln(final boolean value)","0","-","-","-","-"
"8765","appendln","/**
     * Appends a char value followed by a new line to the string builder.
     *
     * @param ch  the value to append
     * @return this, to enable chaining
     * @since 2.3
     */
    public StrBuilder appendln(final char ch)","0","-","-","-","-"
"8766","appendln","/**
     * Appends a char array followed by a new line to the string builder.
     * Appending null will call","0","-","-","-","-"
"8767","appendln","/**
     * Appends a char array followed by a new line to the string builder.
     * Appending null will call","0","-","-","-","-"
"8768","appendln","/**
     * Appends a double value followed by a new line to the string builder using","0","-","-","-","-"
"8769","appendln","/**
     * Appends a float value followed by a new line to the string builder using","0","-","-","-","-"
"8770","appendln","/**
     * Appends an int value followed by a new line to the string builder using","0","-","-","-","-"
"8771","appendln","/**
     * Appends a long value followed by a new line to the string builder using","0","-","-","-","-"
"8772","appendln","/**
     * Appends an object followed by a new line to this string builder.
     * Appending null will call","0","-","-","-","-"
"8773","appendln","/**
     * Appends another string builder followed by a new line to this string builder.
     * Appending null will call","0","-","-","-","-"
"8774","appendln","/**
     * Appends part of a string builder followed by a new line to this string builder.
     * Appending null will call","0","-","-","-","-"
"8775","appendln","/**
     * Appends a string followed by a new line to this string builder.
     * Appending null will call","0","-","-","-","-"
"8776","appendln","/**
     * Appends part of a string followed by a new line to this string builder.
     * Appending null will call","0","-","-","-","-"
"8777","appendln","/**
     * Calls","0","-","-","-","-"
"8778","appendln","/**
     * Appends a string buffer followed by a new line to this string builder.
     * Appending null will call","0","-","-","-","-"
"8779","appendln","/**
     * Appends part of a string buffer followed by a new line to this string builder.
     * Appending null will call","0","-","-","-","-"
"8780","appendln","/**
     * Appends a string builder followed by a new line to this string builder.
     * Appending null will call","0","-","-","-","-"
"8781","appendln","/**
     * Appends part of a string builder followed by a new line to this string builder.
     * Appending null will call","0","-","-","-","-"
"8782","appendNewLine","/**
     * Appends this builder's new line string to this builder.
     * <p>
     * By default, the new line is the system default from","0","-","-","-","-"
"8783","appendNull","/**
     * Appends the text representing","0","-","-","-","-"
"8784","appendPadding","/**
     * Appends the pad character to the builder the specified number of times.
     *
     * @param length  the length to append, negative means no append
     * @param padChar  the character to append
     * @return this, to enable chaining
     */
    public StrBuilder appendPadding(final int length, final char padChar)","0","-","-","-","-"
"8785","appendSeparator","/**
     * Appends a separator if the builder is currently non-empty.
     * The separator is appended using","0","-","-","-","-"
"8786","appendSeparator","/**
     * Append one of both separators to the builder
     * If the builder is currently empty it will append the defaultIfEmpty-separator
     * Otherwise it will append the standard-separator
     *
     * The separator is appended using","0","-","-","-","-"
"8787","appendSeparator","/**
     * Appends a separator to the builder if the loop index is greater than zero.
     * The separator is appended using","0","-","-","-","-"
"8788","appendSeparator","/**
     * Appends a separator if the builder is currently non-empty.
     * Appending a null separator will have no effect.
     * The separator is appended using","0","-","-","-","-"
"8789","appendSeparator","/**
     * Appends a separator to the builder if the loop index is greater than zero.
     * Appending a null separator will have no effect.
     * The separator is appended using","0","-","-","-","-"
"8790","appendSeparator","/**
     * Appends one of both separators to the StrBuilder.
     * If the builder is currently empty it will append the defaultIfEmpty-separator
     * Otherwise it will append the standard-separator
     *
     * Appending a null separator will have no effect.
     * The separator is appended using","0","-","-","-","-"
"8791","appendTo","/**
     * Appends current contents of this","0","-","-","-","-"
"8792","appendWithSeparators","/**
     * Appends an iterable placing separators between each value, but
     * not before the first or after the last.
     * Appending a null iterable will have no effect.
     * Each object is appended using","0","-","-","-","-"
"8793","appendWithSeparators","/**
     * Appends an iterator placing separators between each value, but
     * not before the first or after the last.
     * Appending a null iterator will have no effect.
     * Each object is appended using","0","-","-","-","-"
"8794","appendWithSeparators","/**
     * Appends an array placing separators between each value, but
     * not before the first or after the last.
     * Appending a null array will have no effect.
     * Each object is appended using","0","-","-","-","-"
"8795","asReader","/**
     * Gets the contents of this builder as a Reader.
     * <p>
     * This method allows the contents of the builder to be read
     * using any standard method that expects a Reader.
     * </p>
     * <p>
     * To use, simply create a","0","-","-","-","-"
"8796","asTokenizer","/**
     * Creates a tokenizer that can tokenize the contents of this builder.
     * <p>
     * This method allows the contents of this builder to be tokenized.
     * The tokenizer will be setup by default to tokenize on space, tab,
     * newline and formfeed (as per StringTokenizer). These values can be
     * changed on the tokenizer class, before retrieving the tokens.
     * </p>
     * <p>
     * The returned tokenizer is linked to this builder. You may intermix
     * calls to the builder and tokenizer within certain limits, however
     * there is no synchronization. Once the tokenizer has been used once,
     * it must be","0","-","-","-","-"
"8797","asWriter","/**
     * Gets this builder as a Writer that can be written to.
     * <p>
     * This method allows you to populate the contents of the builder
     * using any standard method that takes a Writer.
     * </p>
     * <p>
     * To use, simply create a","0","-","-","-","-"
"8798","build","/**
     * Implement the","0","-","-","-","-"
"8799","capacity","/**
     * Gets the current size of the internal character array buffer.
     *
     * @return the capacity
     */
    public int capacity()","0","-","-","-","-"
"8800","charAt","/**
     * Gets the character at the specified index.
     *
     * @see #setCharAt(int, char)
     * @see #deleteCharAt(int)
     * @param index  the index to retrieve, must be valid
     * @return the character at the index
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    @Override
    public char charAt(final int index)","0","-","-","-","-"
"8801","clear","/**
     * Clears the string builder (convenience Collections API style method).
     * <p>
     * This method does not reduce the size of the internal character buffer.
     * To do that, call","0","-","-","-","-"
"8802","contains","/**
     * Checks if the string builder contains the specified char.
     *
     * @param ch  the character to find
     * @return true if the builder contains the character
     */
    public boolean contains(final char ch)","0","-","-","-","-"
"8803","contains","/**
     * Checks if the string builder contains the specified string.
     *
     * @param str  the string to find
     * @return true if the builder contains the string
     */
    public boolean contains(final String str)","0","-","-","-","-"
"8804","contains","/**
     * Checks if the string builder contains a string matched using the
     * specified matcher.
     * <p>
     * Matchers can be used to perform advanced searching behavior.
     * For example you could write a matcher to search for the character
     * 'a' followed by a number.
     * </p>
     *
     * @param matcher  the matcher to use, null returns -1
     * @return true if the matcher finds a match in the builder
     */
    public boolean contains(final StrMatcher matcher)","0","-","-","-","-"
"8805","delete","/**
     * Deletes the characters between the two specified indices.
     *
     * @param startIndex  the start index, inclusive, must be valid
     * @param endIndex  the end index, exclusive, must be valid except
     *  that if too large it is treated as end of string
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public StrBuilder delete(final int startIndex, int endIndex)","0","-","-","-","-"
"8806","deleteAll","/**
     * Deletes the character wherever it occurs in the builder.
     *
     * @param ch  the character to delete
     * @return this, to enable chaining
     */
    public StrBuilder deleteAll(final char ch)","0","-","-","-","-"
"8807","deleteAll","/**
     * Deletes the string wherever it occurs in the builder.
     *
     * @param str  the string to delete, null causes no action
     * @return this, to enable chaining
     */
    public StrBuilder deleteAll(final String str)","0","-","-","-","-"
"8808","deleteAll","/**
     * Deletes all parts of the builder that the matcher matches.
     * <p>
     * Matchers can be used to perform advanced deletion behavior.
     * For example you could write a matcher to delete all occurrences
     * where the character 'a' is followed by a number.
     * </p>
     *
     * @param matcher  the matcher to use to find the deletion, null causes no action
     * @return this, to enable chaining
     */
    public StrBuilder deleteAll(final StrMatcher matcher)","0","-","-","-","-"
"8809","deleteCharAt","/**
     * Deletes the character at the specified index.
     *
     * @see #charAt(int)
     * @see #setCharAt(int, char)
     * @param index  the index to delete
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public StrBuilder deleteCharAt(final int index)","0","-","-","-","-"
"8810","deleteFirst","/**
     * Deletes the character wherever it occurs in the builder.
     *
     * @param ch  the character to delete
     * @return this, to enable chaining
     */
    public StrBuilder deleteFirst(final char ch)","0","-","-","-","-"
"8811","deleteFirst","/**
     * Deletes the string wherever it occurs in the builder.
     *
     * @param str  the string to delete, null causes no action
     * @return this, to enable chaining
     */
    public StrBuilder deleteFirst(final String str)","0","-","-","-","-"
"8812","deleteFirst","/**
     * Deletes the first match within the builder using the specified matcher.
     * <p>
     * Matchers can be used to perform advanced deletion behavior.
     * For example you could write a matcher to delete
     * where the character 'a' is followed by a number.
     * </p>
     *
     * @param matcher  the matcher to use to find the deletion, null causes no action
     * @return this, to enable chaining
     */
    public StrBuilder deleteFirst(final StrMatcher matcher)","0","-","-","-","-"
"8813","deleteImpl","/**
     * Internal method to delete a range without validation.
     *
     * @param startIndex  the start index, must be valid
     * @param endIndex  the end index (exclusive), must be valid
     * @param len  the length, must be valid
     * @throws IndexOutOfBoundsException if any index is invalid
     */
    private void deleteImpl(final int startIndex, final int endIndex, final int len)","0","-","-","-","-"
"8814","endsWith","/**
     * Checks whether this builder ends with the specified string.
     * <p>
     * Note that this method handles null input quietly, unlike String.
     * </p>
     *
     * @param str  the string to search for, null returns false
     * @return true if the builder ends with the string
     */
    public boolean endsWith(final String str)","0","-","-","-","-"
"8815","ensureCapacity","/**
     * Checks the capacity and ensures that it is at least the size specified.
     *
     * @param capacity  the capacity to ensure
     * @return this, to enable chaining
     */
    public StrBuilder ensureCapacity(final int capacity)","0","-","-","-","-"
"8816","equals","/**
     * Checks the contents of this builder against another to see if they
     * contain the same character content.
     *
     * @param obj  the object to check, null returns false
     * @return true if the builders contain the same characters in the same order
     */
    @Override
    public boolean equals(final Object obj)","0","-","-","-","-"
"8817","equals","/**
     * Checks the contents of this builder against another to see if they
     * contain the same character content.
     *
     * @param other  the object to check, null returns false
     * @return true if the builders contain the same characters in the same order
     */
    public boolean equals(final StrBuilder other)","0","-","-","-","-"
"8818","equalsIgnoreCase","/**
     * Checks the contents of this builder against another to see if they
     * contain the same character content ignoring case.
     *
     * @param other  the object to check, null returns false
     * @return true if the builders contain the same characters in the same order
     */
    public boolean equalsIgnoreCase(final StrBuilder other)","0","-","-","-","-"
"8819","getChars","/**
     * Copies the character array into the specified array.
     *
     * @param destination  the destination array, null will cause an array to be created
     * @return the input array, unless that was null or too small
     */
    public char[] getChars(char[] destination)","0","-","-","-","-"
"8820","getChars","/**
     * Copies the character array into the specified array.
     *
     * @param startIndex  first index to copy, inclusive, must be valid
     * @param endIndex  last index, exclusive, must be valid
     * @param destination  the destination array, must not be null or too small
     * @param destinationIndex  the index to start copying in destination
     * @throws NullPointerException if the array is null
     * @throws IndexOutOfBoundsException if any index is invalid
     */
    public void getChars(final int startIndex, final int endIndex, final char[] destination, final int destinationIndex)","0","-","-","-","-"
"8821","getNewLineText","/**
     * Gets the text to be appended when a","0","-","-","-","-"
"8822","getNullText","/**
     * Gets the text to be appended when null is added.
     *
     * @return the null text, null means no append
     */
    public String getNullText()","0","-","-","-","-"
"8823","hashCode","/**
     * Gets a suitable hash code for this builder.
     *
     * @return a hash code
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"8824","indexOf","/**
     * Searches the string builder to find the first reference to the specified char.
     *
     * @param ch  the character to find
     * @return the first index of the character, or -1 if not found
     */
    public int indexOf(final char ch)","0","-","-","-","-"
"8825","indexOf","/**
     * Searches the string builder to find the first reference to the specified char.
     *
     * @param ch  the character to find
     * @param startIndex  the index to start at, invalid index rounded to edge
     * @return the first index of the character, or -1 if not found
     */
    public int indexOf(final char ch, int startIndex)","0","-","-","-","-"
"8826","indexOf","/**
     * Searches the string builder to find the first reference to the specified string.
     * <p>
     * Note that a null input string will return -1, whereas the JDK throws an exception.
     * </p>
     *
     * @param str  the string to find, null returns -1
     * @return the first index of the string, or -1 if not found
     */
    public int indexOf(final String str)","0","-","-","-","-"
"8827","indexOf","/**
     * Searches the string builder to find the first reference to the specified
     * string starting searching from the given index.
     * <p>
     * Note that a null input string will return -1, whereas the JDK throws an exception.
     * </p>
     *
     * @param str  the string to find, null returns -1
     * @param startIndex  the index to start at, invalid index rounded to edge
     * @return the first index of the string, or -1 if not found
     */
    public int indexOf(final String str, final int startIndex)","0","-","-","-","-"
"8828","indexOf","/**
     * Searches the string builder using the matcher to find the first match.
     * <p>
     * Matchers can be used to perform advanced searching behavior.
     * For example you could write a matcher to find the character 'a'
     * followed by a number.
     * </p>
     *
     * @param matcher  the matcher to use, null returns -1
     * @return the first index matched, or -1 if not found
     */
    public int indexOf(final StrMatcher matcher)","0","-","-","-","-"
"8829","indexOf","/**
     * Searches the string builder using the matcher to find the first
     * match searching from the given index.
     * <p>
     * Matchers can be used to perform advanced searching behavior.
     * For example you could write a matcher to find the character 'a'
     * followed by a number.
     * </p>
     *
     * @param matcher  the matcher to use, null returns -1
     * @param startIndex  the index to start at, invalid index rounded to edge
     * @return the first index matched, or -1 if not found
     */
    public int indexOf(final StrMatcher matcher, int startIndex)","0","-","-","-","-"
"8830","insert","/**
     * Inserts the value into this builder.
     *
     * @param index  the index to add at, must be valid
     * @param value  the value to insert
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public StrBuilder insert(int index, final boolean value)","0","-","-","-","-"
"8831","insert","/**
     * Inserts the value into this builder.
     *
     * @param index  the index to add at, must be valid
     * @param value  the value to insert
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public StrBuilder insert(final int index, final char value)","0","-","-","-","-"
"8832","insert","/**
     * Inserts the character array into this builder.
     * Inserting null will use the stored null text value.
     *
     * @param index  the index to add at, must be valid
     * @param chars  the char array to insert
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public StrBuilder insert(final int index, final char[] chars)","0","-","-","-","-"
"8833","insert","/**
     * Inserts part of the character array into this builder.
     * Inserting null will use the stored null text value.
     *
     * @param index  the index to add at, must be valid
     * @param chars  the char array to insert
     * @param offset  the offset into the character array to start at, must be valid
     * @param length  the length of the character array part to copy, must be positive
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if any index is invalid
     */
    public StrBuilder insert(final int index, final char[] chars, final int offset, final int length)","0","-","-","-","-"
"8834","insert","/**
     * Inserts the value into this builder.
     *
     * @param index  the index to add at, must be valid
     * @param value  the value to insert
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public StrBuilder insert(final int index, final double value)","0","-","-","-","-"
"8835","insert","/**
     * Inserts the value into this builder.
     *
     * @param index  the index to add at, must be valid
     * @param value  the value to insert
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public StrBuilder insert(final int index, final float value)","0","-","-","-","-"
"8836","insert","/**
     * Inserts the value into this builder.
     *
     * @param index  the index to add at, must be valid
     * @param value  the value to insert
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public StrBuilder insert(final int index, final int value)","0","-","-","-","-"
"8837","insert","/**
     * Inserts the value into this builder.
     *
     * @param index  the index to add at, must be valid
     * @param value  the value to insert
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public StrBuilder insert(final int index, final long value)","0","-","-","-","-"
"8838","insert","/**
     * Inserts the string representation of an object into this builder.
     * Inserting null will use the stored null text value.
     *
     * @param index  the index to add at, must be valid
     * @param obj  the object to insert
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public StrBuilder insert(final int index, final Object obj)","0","-","-","-","-"
"8839","insert","/**
     * Inserts the string into this builder.
     * Inserting null will use the stored null text value.
     *
     * @param index  the index to add at, must be valid
     * @param str  the string to insert
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public StrBuilder insert(final int index, String str)","0","-","-","-","-"
"8840","isEmpty","/**
     * Checks is the string builder is empty (convenience Collections API style method).
     * <p>
     * This method is the same as checking","0","-","-","-","-"
"8841","isNotEmpty","/**
     * Checks is the string builder is not empty (convenience Collections API style method).
     * <p>
     * This method is the same as checking","0","-","-","-","-"
"8842","lastIndexOf","/**
     * Searches the string builder to find the last reference to the specified char.
     *
     * @param ch  the character to find
     * @return the last index of the character, or -1 if not found
     */
    public int lastIndexOf(final char ch)","0","-","-","-","-"
"8843","lastIndexOf","/**
     * Searches the string builder to find the last reference to the specified char.
     *
     * @param ch  the character to find
     * @param startIndex  the index to start at, invalid index rounded to edge
     * @return the last index of the character, or -1 if not found
     */
    public int lastIndexOf(final char ch, int startIndex)","0","-","-","-","-"
"8844","lastIndexOf","/**
     * Searches the string builder to find the last reference to the specified string.
     * <p>
     * Note that a null input string will return -1, whereas the JDK throws an exception.
     * </p>
     *
     * @param str  the string to find, null returns -1
     * @return the last index of the string, or -1 if not found
     */
    public int lastIndexOf(final String str)","0","-","-","-","-"
"8845","lastIndexOf","/**
     * Searches the string builder to find the last reference to the specified
     * string starting searching from the given index.
     * <p>
     * Note that a null input string will return -1, whereas the JDK throws an exception.
     * </p>
     *
     * @param str  the string to find, null returns -1
     * @param startIndex  the index to start at, invalid index rounded to edge
     * @return the last index of the string, or -1 if not found
     */
    public int lastIndexOf(final String str, final int startIndex)","0","-","-","-","-"
"8846","lastIndexOf","/**
     * Searches the string builder using the matcher to find the last match.
     * <p>
     * Matchers can be used to perform advanced searching behavior.
     * For example you could write a matcher to find the character 'a'
     * followed by a number.
     * </p>
     *
     * @param matcher  the matcher to use, null returns -1
     * @return the last index matched, or -1 if not found
     */
    public int lastIndexOf(final StrMatcher matcher)","0","-","-","-","-"
"8847","lastIndexOf","/**
     * Searches the string builder using the matcher to find the last
     * match searching from the given index.
     * <p>
     * Matchers can be used to perform advanced searching behavior.
     * For example you could write a matcher to find the character 'a'
     * followed by a number.
     * </p>
     *
     * @param matcher  the matcher to use, null returns -1
     * @param startIndex  the index to start at, invalid index rounded to edge
     * @return the last index matched, or -1 if not found
     */
    public int lastIndexOf(final StrMatcher matcher, int startIndex)","0","-","-","-","-"
"8848","leftString","/**
     * Extracts the leftmost characters from the string builder without
     * throwing an exception.
     * <p>
     * This method extracts the left","0","-","-","-","-"
"8849","length","/**
     * Gets the length of the string builder.
     *
     * @return the length
     */
    @Override
    public int length()","0","-","-","-","-"
"8850","midString","/**
     * Extracts some characters from the middle of the string builder without
     * throwing an exception.
     * <p>
     * This method extracts","0","-","-","-","-"
"8851","minimizeCapacity","/**
     * Minimizes the capacity to the actual length of the string.
     *
     * @return this, to enable chaining
     */
    public StrBuilder minimizeCapacity()","0","-","-","-","-"
"8852","readFrom","/**
     * If possible, reads chars from the provided","0","-","-","-","-"
"8853","replace","/**
     * Replaces a portion of the string builder with another string.
     * The length of the inserted string does not have to match the removed length.
     *
     * @param startIndex  the start index, inclusive, must be valid
     * @param endIndex  the end index, exclusive, must be valid except
     *  that if too large it is treated as end of string
     * @param replaceStr  the string to replace with, null means delete range
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public StrBuilder replace(final int startIndex, int endIndex, final String replaceStr)","0","-","-","-","-"
"8854","replace","/**
     * Advanced search and replaces within the builder using a matcher.
     * <p>
     * Matchers can be used to perform advanced behavior.
     * For example you could write a matcher to delete all occurrences
     * where the character 'a' is followed by a number.
     * </p>
     *
     * @param matcher  the matcher to use to find the deletion, null causes no action
     * @param replaceStr  the string to replace the match with, null is a delete
     * @param startIndex  the start index, inclusive, must be valid
     * @param endIndex  the end index, exclusive, must be valid except
     *  that if too large it is treated as end of string
     * @param replaceCount  the number of times to replace, -1 for replace all
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if start index is invalid
     */
    public StrBuilder replace(
            final StrMatcher matcher, final String replaceStr,
            final int startIndex, int endIndex, final int replaceCount)","0","-","-","-","-"
"8855","replaceAll","/**
     * Replaces the search character with the replace character
     * throughout the builder.
     *
     * @param search  the search character
     * @param replace  the replace character
     * @return this, to enable chaining
     */
    public StrBuilder replaceAll(final char search, final char replace)","0","-","-","-","-"
"8856","replaceAll","/**
     * Replaces the search string with the replace string throughout the builder.
     *
     * @param searchStr  the search string, null causes no action to occur
     * @param replaceStr  the replace string, null is equivalent to an empty string
     * @return this, to enable chaining
     */
    public StrBuilder replaceAll(final String searchStr, final String replaceStr)","0","-","-","-","-"
"8857","replaceAll","/**
     * Replaces all matches within the builder with the replace string.
     * <p>
     * Matchers can be used to perform advanced replace behavior.
     * For example you could write a matcher to replace all occurrences
     * where the character 'a' is followed by a number.
     * </p>
     *
     * @param matcher  the matcher to use to find the deletion, null causes no action
     * @param replaceStr  the replace string, null is equivalent to an empty string
     * @return this, to enable chaining
     */
    public StrBuilder replaceAll(final StrMatcher matcher, final String replaceStr)","0","-","-","-","-"
"8858","replaceFirst","/**
     * Replaces the first instance of the search character with the
     * replace character in the builder.
     *
     * @param search  the search character
     * @param replace  the replace character
     * @return this, to enable chaining
     */
    public StrBuilder replaceFirst(final char search, final char replace)","0","-","-","-","-"
"8859","replaceFirst","/**
     * Replaces the first instance of the search string with the replace string.
     *
     * @param searchStr  the search string, null causes no action to occur
     * @param replaceStr  the replace string, null is equivalent to an empty string
     * @return this, to enable chaining
     */
    public StrBuilder replaceFirst(final String searchStr, final String replaceStr)","0","-","-","-","-"
"8860","replaceFirst","/**
     * Replaces the first match within the builder with the replace string.
     * <p>
     * Matchers can be used to perform advanced replace behavior.
     * For example you could write a matcher to replace
     * where the character 'a' is followed by a number.
     * </p>
     *
     * @param matcher  the matcher to use to find the deletion, null causes no action
     * @param replaceStr  the replace string, null is equivalent to an empty string
     * @return this, to enable chaining
     */
    public StrBuilder replaceFirst(final StrMatcher matcher, final String replaceStr)","0","-","-","-","-"
"8861","replaceImpl","/**
     * Internal method to delete a range without validation.
     *
     * @param startIndex  the start index, must be valid
     * @param endIndex  the end index (exclusive), must be valid
     * @param removeLen  the length to remove (endIndex - startIndex), must be valid
     * @param insertStr  the string to replace with, null means delete range
     * @param insertLen  the length of the insert string, must be valid
     * @throws IndexOutOfBoundsException if any index is invalid
     */
    private void replaceImpl(final int startIndex, final int endIndex, final int removeLen, final String insertStr, final int insertLen)","0","-","-","-","-"
"8862","replaceImpl","/**
     * Replaces within the builder using a matcher.
     * <p>
     * Matchers can be used to perform advanced behavior.
     * For example you could write a matcher to delete all occurrences
     * where the character 'a' is followed by a number.
     * </p>
     *
     * @param matcher  the matcher to use to find the deletion, null causes no action
     * @param replaceStr  the string to replace the match with, null is a delete
     * @param from  the start index, must be valid
     * @param to  the end index (exclusive), must be valid
     * @param replaceCount  the number of times to replace, -1 for replace all
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if any index is invalid
     */
    private StrBuilder replaceImpl(
            final StrMatcher matcher, final String replaceStr,
            final int from, int to, int replaceCount)","0","-","-","-","-"
"8863","reverse","/**
     * Reverses the string builder placing each character in the opposite index.
     *
     * @return this, to enable chaining
     */
    public StrBuilder reverse()","0","-","-","-","-"
"8864","rightString","/**
     * Extracts the rightmost characters from the string builder without
     * throwing an exception.
     * <p>
     * This method extracts the right","0","-","-","-","-"
"8865","setCharAt","/**
     * Sets the character at the specified index.
     *
     * @see #charAt(int)
     * @see #deleteCharAt(int)
     * @param index  the index to set
     * @param ch  the new character
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public StrBuilder setCharAt(final int index, final char ch)","0","-","-","-","-"
"8866","setLength","/**
     * Updates the length of the builder by either dropping the last characters
     * or adding filler of Unicode zero.
     *
     * @param length  the length to set to, must be zero or positive
     * @return this, to enable chaining
     * @throws IndexOutOfBoundsException if the length is negative
     */
    public StrBuilder setLength(final int length)","0","-","-","-","-"
"8867","setNewLineText","/**
     * Sets the text to be appended when","0","-","-","-","-"
"8868","setNullText","/**
     * Sets the text to be appended when null is added.
     *
     * @param nullText  the null text, null means no append
     * @return this, to enable chaining
     */
    public StrBuilder setNullText(String nullText)","0","-","-","-","-"
"8869","size","/**
     * Gets the length of the string builder.
     * <p>
     * This method is the same as","0","-","-","-","-"
"8870","startsWith","/**
     * Checks whether this builder starts with the specified string.
     * <p>
     * Note that this method handles null input quietly, unlike String.
     * </p>
     *
     * @param str  the string to search for, null returns false
     * @return true if the builder starts with the string
     */
    public boolean startsWith(final String str)","0","-","-","-","-"
"8871","subSequence","/**
     *","0","-","-","-","-"
"8872","substring","/**
     * Extracts a portion of this string builder as a string.
     *
     * @param start  the start index, inclusive, must be valid
     * @return the new string
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public String substring(final int start)","0","-","-","-","-"
"8873","substring","/**
     * Extracts a portion of this string builder as a string.
     * <p>
     * Note: This method treats an endIndex greater than the length of the
     * builder as equal to the length of the builder, and continues
     * without error, unlike StringBuffer or String.
     * </p>
     *
     * @param startIndex  the start index, inclusive, must be valid
     * @param endIndex  the end index, exclusive, must be valid except
     *  that if too large it is treated as end of string
     * @return the new string
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    public String substring(final int startIndex, int endIndex)","0","-","-","-","-"
"8874","toCharArray","/**
     * Copies the builder's character array into a new character array.
     *
     * @return a new array that represents the contents of the builder
     */
    public char[] toCharArray()","0","-","-","-","-"
"8875","toCharArray","/**
     * Copies part of the builder's character array into a new character array.
     *
     * @param startIndex  the start index, inclusive, must be valid
     * @param endIndex  the end index, exclusive, must be valid except that
     *  if too large it is treated as end of string
     * @return a new array that holds part of the contents of the builder
     * @throws IndexOutOfBoundsException if startIndex is invalid,
     *  or if endIndex is invalid (but endIndex greater than size is valid)
     */
    public char[] toCharArray(final int startIndex, int endIndex)","0","-","-","-","-"
"8876","toString","/**
     * Gets a String version of the string builder, creating a new instance
     * each time the method is called.
     * <p>
     * Note that unlike StringBuffer, the string version returned is
     * independent of the string builder.
     * </p>
     *
     * @return the builder as a String
     */
    @Override
    public String toString()","0","-","-","-","-"
"8877","toStringBuffer","/**
     * Gets a StringBuffer version of the string builder, creating a
     * new instance each time the method is called.
     *
     * @return the builder as a StringBuffer
     */
    public StringBuffer toStringBuffer()","0","-","-","-","-"
"8878","toStringBuilder","/**
     * Gets a StringBuilder version of the string builder, creating a
     * new instance each time the method is called.
     *
     * @return the builder as a StringBuilder
     * @since 3.2
     */
    public StringBuilder toStringBuilder()","0","-","-","-","-"
"8879","trim","/**
     * Trims the builder by removing characters less than or equal to a space
     * from the beginning and end.
     *
     * @return this, to enable chaining
     */
    public StrBuilder trim()","0","-","-","-","-"
"8880","validateIndex","/**
     * Validates parameters defining a single index in the builder.
     *
     * @param index  the index, must be valid
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    protected void validateIndex(final int index)","0","-","-","-","-"
"8881","validateRange","/**
     * Validates parameters defining a range of the builder.
     *
     * @param startIndex  the start index, inclusive, must be valid
     * @param endIndex  the end index, exclusive, must be valid except
     *  that if too large it is treated as end of string
     * @return the new string
     * @throws IndexOutOfBoundsException if the index is invalid
     */
    protected int validateRange(final int startIndex, int endIndex)","0","-","-","-","-"
"8882","CompositeFormat","/**
     * Create a format that points its parseObject method to one implementation
     * and its format method to another.
     *
     * @param parser implementation
     * @param formatter implementation
     */
    public CompositeFormat(final Format parser, final Format formatter)","0","-","-","-","-"
"8883","format","/**
     * Uses the formatter Format instance.
     *
     * @param obj the object to format
     * @param toAppendTo the","0","-","-","-","-"
"8884","getFormatter","/**
     * Provides access to the parser Format implementation.
     *
     * @return formatter Format implementation
     */
    public Format getFormatter()","0","-","-","-","-"
"8885","getParser","/**
     * Provides access to the parser Format implementation.
     *
     * @return parser Format implementation
     */
    public Format getParser()","0","-","-","-","-"
"8886","parseObject","/**
     * Uses the parser Format instance.
     *
     * @param source the String source
     * @param pos the ParsePosition containing the position to parse from, will
     *            be updated according to parsing success (index) or failure
     *            (error index)
     * @return the parsed Object
     * @see Format#parseObject(String, ParsePosition)
     */
    @Override
    public Object parseObject(final String source, final ParsePosition pos)","0","-","-","-","-"
"8887","reformat","/**
     * Utility method to parse and then reformat a String.
     *
     * @param input String to reformat
     * @return A reformatted String
     * @throws ParseException thrown by parseObject(String) call
     */
    public String reformat(final String input) throws ParseException","0","-","-","-","-"
"8888","getCSVClone","/**
     * Returns a clone of","0","-","-","-","-"
"8889","getCSVInstance","/**
     * Gets a new tokenizer instance which parses Comma Separated Value strings
     * initializing it with the given input.  The default for CSV processing
     * will be trim whitespace from both ends (which can be overridden with
     * the setTrimmer method).
     * <p>
     * You must call a ""reset"" method to set the string which you want to parse.
     * </p>
     * @return a new tokenizer instance which parses Comma Separated Value strings
     */
    public static StrTokenizer getCSVInstance()","0","-","-","-","-"
"8890","getCSVInstance","/**
     * Gets a new tokenizer instance which parses Comma Separated Value strings
     * initializing it with the given input.  The default for CSV processing
     * will be trim whitespace from both ends (which can be overridden with
     * the setTrimmer method).
     *
     * @param input  the text to parse
     * @return a new tokenizer instance which parses Comma Separated Value strings
     */
    public static StrTokenizer getCSVInstance(final char[] input)","0","-","-","-","-"
"8891","getCSVInstance","/**
     * Gets a new tokenizer instance which parses Comma Separated Value strings
     * initializing it with the given input.  The default for CSV processing
     * will be trim whitespace from both ends (which can be overridden with
     * the setTrimmer method).
     *
     * @param input  the text to parse
     * @return a new tokenizer instance which parses Comma Separated Value strings
     */
    public static StrTokenizer getCSVInstance(final String input)","0","-","-","-","-"
"8892","getTSVClone","/**
     * Returns a clone of","0","-","-","-","-"
"8893","getTSVInstance","/**
     * Gets a new tokenizer instance which parses Tab Separated Value strings.
     * The default for CSV processing will be trim whitespace from both ends
     * (which can be overridden with the setTrimmer method).
     * <p>
     * You must call a ""reset"" method to set the string which you want to parse.
     * </p>
     * @return a new tokenizer instance which parses Tab Separated Value strings.
     */
    public static StrTokenizer getTSVInstance()","0","-","-","-","-"
"8894","getTSVInstance","/**
     * Gets a new tokenizer instance which parses Tab Separated Value strings.
     * The default for CSV processing will be trim whitespace from both ends
     * (which can be overridden with the setTrimmer method).
     * @param input  the string to parse
     * @return a new tokenizer instance which parses Tab Separated Value strings.
     */
    public static StrTokenizer getTSVInstance(final char[] input)","0","-","-","-","-"
"8895","getTSVInstance","/**
     * Gets a new tokenizer instance which parses Tab Separated Value strings.
     * The default for CSV processing will be trim whitespace from both ends
     * (which can be overridden with the setTrimmer method).
     * @param input  the string to parse
     * @return a new tokenizer instance which parses Tab Separated Value strings.
     */
    public static StrTokenizer getTSVInstance(final String input)","0","-","-","-","-"
"8896","StrTokenizer","/**
     * Constructs a tokenizer splitting on space, tab, newline and formfeed
     * as per StringTokenizer, but with no text to tokenize.
     * <p>
     * This constructor is normally used with","0","-","-","-","-"
"8897","StrTokenizer","/**
     * Constructs a tokenizer splitting on space, tab, newline and formfeed
     * as per StringTokenizer.
     *
     * @param input  the string which is to be parsed, not cloned
     */
    public StrTokenizer(final char[] input)","0","-","-","-","-"
"8898","StrTokenizer","/**
     * Constructs a tokenizer splitting on the specified character.
     *
     * @param input  the string which is to be parsed, not cloned
     * @param delim the field delimiter character
     */
    public StrTokenizer(final char[] input, final char delim)","0","-","-","-","-"
"8899","StrTokenizer","/**
     * Constructs a tokenizer splitting on the specified delimiter character
     * and handling quotes using the specified quote character.
     *
     * @param input  the string which is to be parsed, not cloned
     * @param delim  the field delimiter character
     * @param quote  the field quoted string character
     */
    public StrTokenizer(final char[] input, final char delim, final char quote)","0","-","-","-","-"
"8900","StrTokenizer","/**
     * Constructs a tokenizer splitting on the specified string.
     *
     * @param input  the string which is to be parsed, not cloned
     * @param delim the field delimiter string
     */
    public StrTokenizer(final char[] input, final String delim)","0","-","-","-","-"
"8901","StrTokenizer","/**
     * Constructs a tokenizer splitting using the specified delimiter matcher.
     *
     * @param input  the string which is to be parsed, not cloned
     * @param delim  the field delimiter matcher
     */
    public StrTokenizer(final char[] input, final StrMatcher delim)","0","-","-","-","-"
"8902","StrTokenizer","/**
     * Constructs a tokenizer splitting using the specified delimiter matcher
     * and handling quotes using the specified quote matcher.
     *
     * @param input  the string which is to be parsed, not cloned
     * @param delim  the field delimiter character
     * @param quote  the field quoted string character
     */
    public StrTokenizer(final char[] input, final StrMatcher delim, final StrMatcher quote)","0","-","-","-","-"
"8903","StrTokenizer","/**
     * Constructs a tokenizer splitting on space, tab, newline and formfeed
     * as per StringTokenizer.
     *
     * @param input  the string which is to be parsed
     */
    public StrTokenizer(final String input)","0","-","-","-","-"
"8904","StrTokenizer","/**
     * Constructs a tokenizer splitting on the specified delimiter character.
     *
     * @param input  the string which is to be parsed
     * @param delim  the field delimiter character
     */
    public StrTokenizer(final String input, final char delim)","0","-","-","-","-"
"8905","StrTokenizer","/**
     * Constructs a tokenizer splitting on the specified delimiter character
     * and handling quotes using the specified quote character.
     *
     * @param input  the string which is to be parsed
     * @param delim  the field delimiter character
     * @param quote  the field quoted string character
     */
    public StrTokenizer(final String input, final char delim, final char quote)","0","-","-","-","-"
"8906","StrTokenizer","/**
     * Constructs a tokenizer splitting on the specified delimiter string.
     *
     * @param input  the string which is to be parsed
     * @param delim  the field delimiter string
     */
    public StrTokenizer(final String input, final String delim)","0","-","-","-","-"
"8907","StrTokenizer","/**
     * Constructs a tokenizer splitting using the specified delimiter matcher.
     *
     * @param input  the string which is to be parsed
     * @param delim  the field delimiter matcher
     */
    public StrTokenizer(final String input, final StrMatcher delim)","0","-","-","-","-"
"8908","StrTokenizer","/**
     * Constructs a tokenizer splitting using the specified delimiter matcher
     * and handling quotes using the specified quote matcher.
     *
     * @param input  the string which is to be parsed
     * @param delim  the field delimiter matcher
     * @param quote  the field quoted string matcher
     */
    public StrTokenizer(final String input, final StrMatcher delim, final StrMatcher quote)","0","-","-","-","-"
"8909","add","/**
     * Unsupported ListIterator operation.
     * @param obj this parameter ignored.
     * @throws UnsupportedOperationException always
     */
    @Override
    public void add(final String obj)","0","-","-","-","-"
"8910","addToken","/**
     * Adds a token to a list, paying attention to the parameters we've set.
     *
     * @param list  the list to add to
     * @param tok  the token to add
     */
    private void addToken(final List<String> list, String tok)","0","-","-","-","-"
"8911","checkTokenized","/**
     * Checks if tokenization has been done, and if not then do it.
     */
    private void checkTokenized()","0","-","-","-","-"
"8912","clone","/**
     * Creates a new instance of this Tokenizer. The new instance is reset so
     * that it will be at the start of the token list.
     * If a","0","-","-","-","-"
"8913","cloneReset","/**
     * Creates a new instance of this Tokenizer. The new instance is reset so that
     * it will be at the start of the token list.
     *
     * @return a new instance of this Tokenizer which has been reset.
     * @throws CloneNotSupportedException if there is a problem cloning
     */
    Object cloneReset() throws CloneNotSupportedException","0","-","-","-","-"
"8914","getContent","/**
     * Gets the String content that the tokenizer is parsing.
     *
     * @return the string content being parsed
     */
    public String getContent()","0","-","-","-","-"
"8915","getDelimiterMatcher","/**
     * Gets the field delimiter matcher.
     *
     * @return the delimiter matcher in use
     */
    public StrMatcher getDelimiterMatcher()","0","-","-","-","-"
"8916","getIgnoredMatcher","/**
     * Gets the ignored character matcher.
     * <p>
     * These characters are ignored when parsing the String, unless they are
     * within a quoted region.
     * The default value is not to ignore anything.
     * </p>
     *
     * @return the ignored matcher in use
     */
    public StrMatcher getIgnoredMatcher()","0","-","-","-","-"
"8917","getQuoteMatcher","/**
     * Gets the quote matcher currently in use.
     * <p>
     * The quote character is used to wrap data between the tokens.
     * This enables delimiters to be entered as data.
     * The default value is '""' (double quote).
     * </p>
     *
     * @return the quote matcher in use
     */
    public StrMatcher getQuoteMatcher()","0","-","-","-","-"
"8918","getTokenArray","/**
     * Gets a copy of the full token list as an independent modifiable array.
     *
     * @return the tokens as a String array
     */
    public String[] getTokenArray()","0","-","-","-","-"
"8919","getTokenList","/**
     * Gets a copy of the full token list as an independent modifiable list.
     *
     * @return the tokens as a String array
     */
    public List<String> getTokenList()","0","-","-","-","-"
"8920","getTrimmerMatcher","/**
     * Gets the trimmer character matcher.
     * <p>
     * These characters are trimmed off on each side of the delimiter
     * until the token or quote is found.
     * The default value is not to trim anything.
     * </p>
     *
     * @return the trimmer matcher in use
     */
    public StrMatcher getTrimmerMatcher()","0","-","-","-","-"
"8921","hasNext","/**
     * Checks whether there are any more tokens.
     *
     * @return true if there are more tokens
     */
    @Override
    public boolean hasNext()","0","-","-","-","-"
"8922","hasPrevious","/**
     * Checks whether there are any previous tokens that can be iterated to.
     *
     * @return true if there are previous tokens
     */
    @Override
    public boolean hasPrevious()","0","-","-","-","-"
"8923","isEmptyTokenAsNull","/**
     * Gets whether the tokenizer currently returns empty tokens as null.
     * The default for this property is false.
     *
     * @return true if empty tokens are returned as null
     */
    public boolean isEmptyTokenAsNull()","0","-","-","-","-"
"8924","isIgnoreEmptyTokens","/**
     * Gets whether the tokenizer currently ignores empty tokens.
     * The default for this property is true.
     *
     * @return true if empty tokens are not returned
     */
    public boolean isIgnoreEmptyTokens()","0","-","-","-","-"
"8925","isQuote","/**
     * Checks if the characters at the index specified match the quote
     * already matched in readNextToken().
     *
     * @param srcChars  the character array being tokenized
     * @param pos  the position to check for a quote
     * @param len  the length of the character array being tokenized
     * @param quoteStart  the start position of the matched quote, 0 if no quoting
     * @param quoteLen  the length of the matched quote, 0 if no quoting
     * @return true if a quote is matched
     */
    private boolean isQuote(final char[] srcChars, final int pos, final int len, final int quoteStart, final int quoteLen)","0","-","-","-","-"
"8926","next","/**
     * Gets the next token.
     *
     * @return the next String token
     * @throws NoSuchElementException if there are no more elements
     */
    @Override
    public String next()","0","-","-","-","-"
"8927","nextIndex","/**
     * Gets the index of the next token to return.
     *
     * @return the next token index
     */
    @Override
    public int nextIndex()","0","-","-","-","-"
"8928","nextToken","/**
     * Gets the next token from the String.
     * Equivalent to","0","-","-","-","-"
"8929","previous","/**
     * Gets the token previous to the last returned token.
     *
     * @return the previous token
     */
    @Override
    public String previous()","0","-","-","-","-"
"8930","previousIndex","/**
     * Gets the index of the previous token.
     *
     * @return the previous token index
     */
    @Override
    public int previousIndex()","0","-","-","-","-"
"8931","previousToken","/**
     * Gets the previous token from the String.
     *
     * @return the previous sequential token, or null when no more tokens are found
     */
    public String previousToken()","0","-","-","-","-"
"8932","readNextToken","/**
     * Reads character by character through the String to get the next token.
     *
     * @param srcChars  the character array being tokenized
     * @param start  the first character of field
     * @param len  the length of the character array being tokenized
     * @param workArea  a temporary work area
     * @param tokenList  the list of parsed tokens
     * @return the starting position of the next field (the character
     *  immediately after the delimiter), or -1 if end of string found
     */
    private int readNextToken(final char[] srcChars, int start, final int len, final StrBuilder workArea, final List<String> tokenList)","0","-","-","-","-"
"8933","readWithQuotes","/**
     * Reads a possibly quoted string token.
     *
     * @param srcChars  the character array being tokenized
     * @param start  the first character of field
     * @param len  the length of the character array being tokenized
     * @param workArea  a temporary work area
     * @param tokenList  the list of parsed tokens
     * @param quoteStart  the start position of the matched quote, 0 if no quoting
     * @param quoteLen  the length of the matched quote, 0 if no quoting
     * @return the starting position of the next field (the character
     *  immediately after the delimiter, or if end of string found,
     *  then the length of string
     */
    private int readWithQuotes(final char[] srcChars, final int start, final int len, final StrBuilder workArea,
                               final List<String> tokenList, final int quoteStart, final int quoteLen)","0","-","-","-","-"
"8934","remove","/**
     * Unsupported ListIterator operation.
     *
     * @throws UnsupportedOperationException always
     */
    @Override
    public void remove()","0","-","-","-","-"
"8935","reset","/**
     * Resets this tokenizer, forgetting all parsing and iteration already completed.
     * <p>
     * This method allows the same tokenizer to be reused for the same String.
     * </p>
     *
     * @return this, to enable chaining
     */
    public StrTokenizer reset()","0","-","-","-","-"
"8936","reset","/**
     * Reset this tokenizer, giving it a new input string to parse.
     * In this manner you can re-use a tokenizer with the same settings
     * on multiple input lines.
     *
     * @param input  the new character array to tokenize, not cloned, null sets no text to parse
     * @return this, to enable chaining
     */
    public StrTokenizer reset(final char[] input)","0","-","-","-","-"
"8937","reset","/**
     * Reset this tokenizer, giving it a new input string to parse.
     * In this manner you can re-use a tokenizer with the same settings
     * on multiple input lines.
     *
     * @param input  the new string to tokenize, null sets no text to parse
     * @return this, to enable chaining
     */
    public StrTokenizer reset(final String input)","0","-","-","-","-"
"8938","set","/**
     * Unsupported ListIterator operation.
     * @param obj this parameter ignored.
     * @throws UnsupportedOperationException always
     */
    @Override
    public void set(final String obj)","0","-","-","-","-"
"8939","setDelimiterChar","/**
     * Sets the field delimiter character.
     *
     * @param delim  the delimiter character to use
     * @return this, to enable chaining
     */
    public StrTokenizer setDelimiterChar(final char delim)","0","-","-","-","-"
"8940","setDelimiterMatcher","/**
     * Sets the field delimiter matcher.
     * <p>
     * The delimiter is used to separate one token from another.
     * </p>
     *
     * @param delim  the delimiter matcher to use
     * @return this, to enable chaining
     */
    public StrTokenizer setDelimiterMatcher(final StrMatcher delim)","0","-","-","-","-"
"8941","setDelimiterString","/**
     * Sets the field delimiter string.
     *
     * @param delim  the delimiter string to use
     * @return this, to enable chaining
     */
    public StrTokenizer setDelimiterString(final String delim)","0","-","-","-","-"
"8942","setEmptyTokenAsNull","/**
     * Sets whether the tokenizer should return empty tokens as null.
     * The default for this property is false.
     *
     * @param emptyAsNull  whether empty tokens are returned as null
     * @return this, to enable chaining
     */
    public StrTokenizer setEmptyTokenAsNull(final boolean emptyAsNull)","0","-","-","-","-"
"8943","setIgnoredChar","/**
     * Sets the character to ignore.
     * <p>
     * This character is ignored when parsing the String, unless it is
     * within a quoted region.
     *
     * @param ignored  the ignored character to use
     * @return this, to enable chaining
     */
    public StrTokenizer setIgnoredChar(final char ignored)","0","-","-","-","-"
"8944","setIgnoredMatcher","/**
     * Sets the matcher for characters to ignore.
     * <p>
     * These characters are ignored when parsing the String, unless they are
     * within a quoted region.
     * </p>
     *
     * @param ignored  the ignored matcher to use, null ignored
     * @return this, to enable chaining
     */
    public StrTokenizer setIgnoredMatcher(final StrMatcher ignored)","0","-","-","-","-"
"8945","setIgnoreEmptyTokens","/**
     * Sets whether the tokenizer should ignore and not return empty tokens.
     * The default for this property is true.
     *
     * @param ignoreEmptyTokens  whether empty tokens are not returned
     * @return this, to enable chaining
     */
    public StrTokenizer setIgnoreEmptyTokens(final boolean ignoreEmptyTokens)","0","-","-","-","-"
"8946","setQuoteChar","/**
     * Sets the quote character to use.
     * <p>
     * The quote character is used to wrap data between the tokens.
     * This enables delimiters to be entered as data.
     * </p>
     *
     * @param quote  the quote character to use
     * @return this, to enable chaining
     */
    public StrTokenizer setQuoteChar(final char quote)","0","-","-","-","-"
"8947","setQuoteMatcher","/**
     * Sets the quote matcher to use.
     * <p>
     * The quote character is used to wrap data between the tokens.
     * This enables delimiters to be entered as data.
     * </p>
     *
     * @param quote  the quote matcher to use, null ignored
     * @return this, to enable chaining
     */
    public StrTokenizer setQuoteMatcher(final StrMatcher quote)","0","-","-","-","-"
"8948","setTrimmerMatcher","/**
     * Sets the matcher for characters to trim.
     * <p>
     * These characters are trimmed off on each side of the delimiter
     * until the token or quote is found.
     * </p>
     *
     * @param trimmer  the trimmer matcher to use, null ignored
     * @return this, to enable chaining
     */
    public StrTokenizer setTrimmerMatcher(final StrMatcher trimmer)","0","-","-","-","-"
"8949","size","/**
     * Gets the number of tokens found in the String.
     *
     * @return the number of matched tokens
     */
    public int size()","0","-","-","-","-"
"8950","tokenize","/**
     * Internal method to performs the tokenization.
     * <p>
     * Most users of this class do not need to call this method. This method
     * will be called automatically by other (public) methods when required.
     * </p>
     * <p>
     * This method exists to allow subclasses to add code before or after the
     * tokenization. For example, a subclass could alter the character array,
     * offset or count to be parsed, or call the tokenizer multiple times on
     * multiple strings. It is also be possible to filter the results.
     * </p>
     * <p>
     *","0","-","-","-","-"
"8951","toString","/**
     * Gets the String content that the tokenizer is parsing.
     *
     * @return the string content being parsed
     */
    @Override
    public String toString()","0","-","-","-","-"
"8952","CharMatcher","/**
         * Constructor that creates a matcher that matches a single character.
         *
         * @param ch  the character to match
         */
        CharMatcher(final char ch)","0","-","-","-","-"
"8953","isMatch","/**
         * Returns whether or not the given character matches.
         *
         * @param buffer  the text content to match against, do not change
         * @param pos  the starting position for the match, valid for buffer
         * @param bufferStart  the first active index in the buffer, valid for buffer
         * @param bufferEnd  the end index of the active buffer, valid for buffer
         * @return the number of matching characters, zero for no match
         */
        @Override
        public int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd)","0","-","-","-","-"
"8954","CharSetMatcher","/**
         * Constructor that creates a matcher from a character array.
         *
         * @param chars  the characters to match, must not be null
         */
        CharSetMatcher(final char[] chars)","0","-","-","-","-"
"8955","isMatch","/**
         * Returns whether or not the given character matches.
         *
         * @param buffer  the text content to match against, do not change
         * @param pos  the starting position for the match, valid for buffer
         * @param bufferStart  the first active index in the buffer, valid for buffer
         * @param bufferEnd  the end index of the active buffer, valid for buffer
         * @return the number of matching characters, zero for no match
         */
        @Override
        public int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd)","0","-","-","-","-"
"8956","NoMatcher","/**
         * Constructs a new instance of","0","-","-","-","-"
"8957","isMatch","/**
         * Always returns","0","-","-","-","-"
"8958","StringMatcher","/**
         * Constructor that creates a matcher from a String.
         *
         * @param str  the string to match, must not be null
         */
        StringMatcher(final String str)","0","-","-","-","-"
"8959","isMatch","/**
         * Returns whether or not the given text matches the stored string.
         *
         * @param buffer  the text content to match against, do not change
         * @param pos  the starting position for the match, valid for buffer
         * @param bufferStart  the first active index in the buffer, valid for buffer
         * @param bufferEnd  the end index of the active buffer, valid for buffer
         * @return the number of matching characters, zero for no match
         */
        @Override
        public int isMatch(final char[] buffer, int pos, final int bufferStart, final int bufferEnd)","0","-","-","-","-"
"8960","toString","@Override
        public String toString()","0","-","-","-","-"
"8961","TrimMatcher","/**
         * Constructs a new instance of","0","-","-","-","-"
"8962","isMatch","/**
         * Returns whether or not the given character matches.
         *
         * @param buffer  the text content to match against, do not change
         * @param pos  the starting position for the match, valid for buffer
         * @param bufferStart  the first active index in the buffer, valid for buffer
         * @param bufferEnd  the end index of the active buffer, valid for buffer
         * @return the number of matching characters, zero for no match
         */
        @Override
        public int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd)","0","-","-","-","-"
"8963","charMatcher","/**
     * Constructor that creates a matcher from a character.
     *
     * @param ch  the character to match, must not be null
     * @return a new Matcher for the given char
     */
    public static StrMatcher charMatcher(final char ch)","0","-","-","-","-"
"8964","charSetMatcher","/**
     * Constructor that creates a matcher from a set of characters.
     *
     * @param chars  the characters to match, null or empty matches nothing
     * @return a new matcher for the given char[]
     */
    public static StrMatcher charSetMatcher(final char... chars)","0","-","-","-","-"
"8965","charSetMatcher","/**
     * Constructor that creates a matcher from a string representing a set of characters.
     *
     * @param chars  the characters to match, null or empty matches nothing
     * @return a new Matcher for the given characters
     */
    public static StrMatcher charSetMatcher(final String chars)","0","-","-","-","-"
"8966","commaMatcher","/**
     * Returns a matcher which matches the comma character.
     *
     * @return a matcher for a comma
     */
    public static StrMatcher commaMatcher()","0","-","-","-","-"
"8967","doubleQuoteMatcher","/**
     * Returns a matcher which matches the double quote character.
     *
     * @return a matcher for a double quote
     */
    public static StrMatcher doubleQuoteMatcher()","0","-","-","-","-"
"8968","noneMatcher","/**
     * Matches no characters.
     *
     * @return a matcher that matches nothing
     */
    public static StrMatcher noneMatcher()","0","-","-","-","-"
"8969","quoteMatcher","/**
     * Returns a matcher which matches the single or double quote character.
     *
     * @return a matcher for a single or double quote
     */
    public static StrMatcher quoteMatcher()","0","-","-","-","-"
"8970","singleQuoteMatcher","/**
     * Returns a matcher which matches the single quote character.
     *
     * @return a matcher for a single quote
     */
    public static StrMatcher singleQuoteMatcher()","0","-","-","-","-"
"8971","spaceMatcher","/**
     * Returns a matcher which matches the space character.
     *
     * @return a matcher for a space
     */
    public static StrMatcher spaceMatcher()","0","-","-","-","-"
"8972","splitMatcher","/**
     * Matches the same characters as StringTokenizer,
     * namely space, tab, newline and formfeed.
     *
     * @return the split matcher
     */
    public static StrMatcher splitMatcher()","0","-","-","-","-"
"8973","stringMatcher","/**
     * Constructor that creates a matcher from a string.
     *
     * @param str  the string to match, null or empty matches nothing
     * @return a new Matcher for the given String
     */
    public static StrMatcher stringMatcher(final String str)","0","-","-","-","-"
"8974","tabMatcher","/**
     * Returns a matcher which matches the tab character.
     *
     * @return a matcher for a tab
     */
    public static StrMatcher tabMatcher()","0","-","-","-","-"
"8975","trimMatcher","/**
     * Matches the String trim() whitespace characters.
     *
     * @return the trim matcher
     */
    public static StrMatcher trimMatcher()","0","-","-","-","-"
"8976","StrMatcher","/**
     * Constructs a new instance.
     */
    protected StrMatcher()","0","-","-","-","-"
"8977","isMatch","/**
     * Returns the number of matching characters, zero for no match.
     * <p>
     * This method is called to check for a match.
     * The parameter","0","-","-","-","-"
"8978","isMatch","/**
     * Returns the number of matching characters, zero for no match.
     * <p>
     * This method is called to check for a match.
     * The parameter","0","-","-","-","-"
"8979","append","/**
     * Handles the common","0","-","-","-","-"
"8980","append","/**
     * Handles the common","0","-","-","-","-"
"8981","append","/**
     * Handles the common","0","-","-","-","-"
"8982","append","/**
     * Handles the common","0","-","-","-","-"
"8983","toString","/**
     * Gets the default formatted representation of the specified
     *","0","-","-","-","-"
"8984","FormattableUtils","/**
     *","0","-","-","-","-"
"8985","getFormat","/**
     * Create or retrieve a format instance.
     *
     * @param name The format type name
     * @param arguments Arguments used to create the format instance. This allows the
     *","0","-","-","-","-"
"8986","ExtendedMessageFormat","/**
     * Create a new ExtendedMessageFormat for the default locale.
     *
     * @param pattern  the pattern to use, not null
     * @throws IllegalArgumentException in case of a bad pattern.
     */
    public ExtendedMessageFormat(final String pattern)","0","-","-","-","-"
"8987","ExtendedMessageFormat","/**
     * Create a new ExtendedMessageFormat.
     *
     * @param pattern  the pattern to use, not null
     * @param locale  the locale to use, not null
     * @throws IllegalArgumentException in case of a bad pattern.
     */
    public ExtendedMessageFormat(final String pattern, final Locale locale)","0","-","-","-","-"
"8988","ExtendedMessageFormat","/**
     * Create a new ExtendedMessageFormat.
     *
     * @param pattern  the pattern to use, not null.
     * @param locale  the locale to use.
     * @param registry  the registry of format factories, may be null.
     * @throws IllegalArgumentException in case of a bad pattern.
     */
    public ExtendedMessageFormat(final String pattern, final Locale locale, final Map<String, ? extends FormatFactory> registry)","0","-","-","-","-"
"8989","ExtendedMessageFormat","/**
     * Create a new ExtendedMessageFormat for the default locale.
     *
     * @param pattern  the pattern to use, not null
     * @param registry  the registry of format factories, may be null
     * @throws IllegalArgumentException in case of a bad pattern.
     */
    public ExtendedMessageFormat(final String pattern, final Map<String, ? extends FormatFactory> registry)","0","-","-","-","-"
"8990","appendQuotedString","/**
     * Consume a quoted string, adding it to","0","-","-","-","-"
"8991","applyPattern","/**
     * Apply the specified pattern.
     *
     * @param pattern String
     */
    @Override
    public final void applyPattern(final String pattern)","0","-","-","-","-"
"8992","containsElements","/**
     * Learn whether the specified Collection contains non-null elements.
     * @param coll to check
     * @return","0","-","-","-","-"
"8993","equals","/**
     * Check if this extended message format is equal to another object.
     *
     * @param obj the object to compare to
     * @return true if this object equals the other, otherwise false
     */
    @Override
    public boolean equals(final Object obj)","0","-","-","-","-"
"8994","getFormat","/**
     * Gets a custom format from a format description.
     *
     * @param desc String
     * @return Format
     */
    private Format getFormat(final String desc)","0","-","-","-","-"
"8995","getQuotedString","/**
     * Consume quoted string only
     *
     * @param pattern pattern to parse
     * @param pos current parse position
     */
    private void getQuotedString(final String pattern, final ParsePosition pos)","0","-","-","-","-"
"8996","hashCode","/**
     *","0","-","-","-","-"
"8997","insertFormats","/**
     * Insert formats back into the pattern for toPattern() support.
     *
     * @param pattern source
     * @param customPatterns The custom patterns to re-insert, if any
     * @return full pattern
     */
    private String insertFormats(final String pattern, final ArrayList<String> customPatterns)","0","-","-","-","-"
"8998","next","/**
     * Convenience method to advance parse position by 1
     *
     * @param pos ParsePosition
     * @return","0","-","-","-","-"
"8999","parseFormatDescription","/**
     * Parse the format component of a format element.
     *
     * @param pattern string to parse
     * @param pos current parse position
     * @return Format description String
     */
    private String parseFormatDescription(final String pattern, final ParsePosition pos)","0","-","-","-","-"
"9000","readArgumentIndex","/**
     * Read the argument index from the current format element
     *
     * @param pattern pattern to parse
     * @param pos current parse position
     * @return argument index
     */
    private int readArgumentIndex(final String pattern, final ParsePosition pos)","0","-","-","-","-"
"9001","seekNonWs","/**
     * Consume whitespace from the current parse position.
     *
     * @param pattern String to read
     * @param pos current position
     */
    private void seekNonWs(final String pattern, final ParsePosition pos)","0","-","-","-","-"
"9002","setFormat","/**
     * Throws UnsupportedOperationException - see class Javadoc for details.
     *
     * @param formatElementIndex format element index
     * @param newFormat the new format
     * @throws UnsupportedOperationException always thrown since this isn't supported by ExtendMessageFormat
     */
    @Override
    public void setFormat(final int formatElementIndex, final Format newFormat)","0","-","-","-","-"
"9003","setFormatByArgumentIndex","/**
     * Throws UnsupportedOperationException - see class Javadoc for details.
     *
     * @param argumentIndex argument index
     * @param newFormat the new format
     * @throws UnsupportedOperationException always thrown since this isn't supported by ExtendMessageFormat
     */
    @Override
    public void setFormatByArgumentIndex(final int argumentIndex, final Format newFormat)","0","-","-","-","-"
"9004","setFormats","/**
     * Throws UnsupportedOperationException - see class Javadoc for details.
     *
     * @param newFormats new formats
     * @throws UnsupportedOperationException always thrown since this isn't supported by ExtendMessageFormat
     */
    @Override
    public void setFormats(final Format[] newFormats)","0","-","-","-","-"
"9005","setFormatsByArgumentIndex","/**
     * Throws UnsupportedOperationException - see class Javadoc for details.
     *
     * @param newFormats new formats
     * @throws UnsupportedOperationException always thrown since this isn't supported by ExtendMessageFormat
     */
    @Override
    public void setFormatsByArgumentIndex(final Format[] newFormats)","0","-","-","-","-"
"9006","toPattern","/**
     *","0","-","-","-","-"
"9007","capitalize","/**
     * Capitalizes all the whitespace separated words in a String.
     * Only the first character of each word is changed. To convert the
     * rest of each word to lowercase at the same time,
     * use","0","-","-","-","-"
"9008","capitalize","/**
     * Capitalizes all the delimiter separated words in a String.
     * Only the first character of each word is changed. To convert the
     * rest of each word to lowercase at the same time,
     * use","0","-","-","-","-"
"9009","capitalizeFully","/**
     * Converts all the whitespace separated words in a String into capitalized words,
     * that is each word is made up of a titlecase character and then a series of
     * lowercase characters.
     *
     * <p>Whitespace is defined by","0","-","-","-","-"
"9010","capitalizeFully","/**
     * Converts all the delimiter separated words in a String into capitalized words,
     * that is each word is made up of a titlecase character and then a series of
     * lowercase characters.
     *
     * <p>The delimiters represent a set of characters understood to separate words.
     * The first string character and the first non-delimiter character after a
     * delimiter will be capitalized.</p>
     *
     * <p>A","0","-","-","-","-"
"9011","containsAllWords","/**
     * Checks if the String contains all words in the given array.
     *
     * <p>
     * A","0","-","-","-","-"
"9012","initials","/**
     * Extracts the initial characters from each word in the String.
     *
     * <p>All first characters after whitespace are returned as a new string.
     * Their case is not changed.</p>
     *
     * <p>Whitespace is defined by","0","-","-","-","-"
"9013","initials","/**
     * Extracts the initial characters from each word in the String.
     *
     * <p>All first characters after the defined delimiters are returned as a new string.
     * Their case is not changed.</p>
     *
     * <p>If the delimiters array is null, then Whitespace is used.
     * Whitespace is defined by","0","-","-","-","-"
"9014","isDelimiter","/**
     * Tests if the character is a delimiter.
     *
     * @param ch  the character to check
     * @param delimiters  the delimiters
     * @return true if it is a delimiter
     */
    private static boolean isDelimiter(final char ch, final char[] delimiters)","0","-","-","-","-"
"9015","swapCase","/**
     * Swaps the case of a String using a word based algorithm.
     *
     * <ul>
     *  <li>Upper case character converts to Lower case</li>
     *  <li>Title case character converts to Lower case</li>
     *  <li>Lower case character after Whitespace or at start converts to Title case</li>
     *  <li>Other Lower case character converts to Upper case</li>
     * </ul>
     *
     * <p>Whitespace is defined by","0","-","-","-","-"
"9016","uncapitalize","/**
     * Uncapitalizes all the whitespace separated words in a String.
     * Only the first character of each word is changed.
     *
     * <p>Whitespace is defined by","0","-","-","-","-"
"9017","uncapitalize","/**
     * Uncapitalizes all the whitespace separated words in a String.
     * Only the first character of each word is changed.
     *
     * <p>The delimiters represent a set of characters understood to separate words.
     * The first string character and the first non-delimiter character after a
     * delimiter will be uncapitalized.</p>
     *
     * <p>Whitespace is defined by","0","-","-","-","-"
"9018","wrap","/**
     * Wraps a single line of text, identifying words by","0","-","-","-","-"
"9019","wrap","/**
     * Wraps a single line of text, identifying words by","0","-","-","-","-"
"9020","wrap","/**
     * Wraps a single line of text, identifying words by","0","-","-","-","-"
"9021","WordUtils","/**
     *","0","-","-","-","-"
"9022","MapStrLookup","/**
         * Creates a new instance backed by a Map.
         *
         * @param map  the map of keys to values, may be null
         */
        MapStrLookup(final Map<String, V> map)","0","-","-","-","-"
"9023","lookup","/**
         * Looks up a String key to a String value using the map.
         * <p>
         * If the map is null, then null is returned.
         * The map result object is converted to a string using toString().
         * </p>
         *
         * @param key  the key to be looked up, may be null
         * @return the matching value, null if no match
         */
        @Override
        public String lookup(final String key)","0","-","-","-","-"
"9024","lookup","/**
         *","0","-","-","-","-"
"9025","mapLookup","/**
     * Returns a lookup which looks up values using a map.
     * <p>
     * If the map is null, then null will be returned from every lookup.
     * The map result object is converted to a string using toString().
     * </p>
     *
     * @param <V> the type of the values supported by the lookup
     * @param map  the map of keys to values, may be null
     * @return a lookup using the map, not null
     */
    public static <V> StrLookup<V> mapLookup(final Map<String, V> map)","0","-","-","-","-"
"9026","noneLookup","/**
     * Returns a lookup which always returns null.
     *
     * @return a lookup that always returns null, not null
     */
    public static StrLookup<?> noneLookup()","0","-","-","-","-"
"9027","systemPropertiesLookup","/**
     * Returns a new lookup which uses a copy of the current
     *","0","-","-","-","-"
"9028","StrLookup","/**
     * Constructs a new instance.
     */
    protected StrLookup()","0","-","-","-","-"
"9029","lookup","/**
     * Looks up a String key to a String value.
     * <p>
     * The internal implementation may use any mechanism to return the value.
     * The simplest implementation is to use a Map. However, virtually any
     * implementation is possible.
     * </p>
     * <p>
     * For example, it would be possible to implement a lookup that used the
     * key as a primary key, and looked up the value on demand from the database
     * Or, a numeric based implementation could be created that treats the key
     * as an integer, increments the value and return the result as a string -
     * converting 1 to 2, 15 to 16 etc.
     * </p>
     * <p>
     * The","0","-","-","-","-"
"9030","appendDetail","/**
         *","0","-","-","-","-"
"9031","getShortClassName","/**
         *","0","-","-","-","-"
"9032","annotationArrayMemberEquals","/**
     * Helper method for comparing two arrays of annotations.
     *
     * @param a1 the first array
     * @param a2 the second array
     * @return a flag whether these arrays are equal
     */
    private static boolean annotationArrayMemberEquals(final Annotation[] a1, final Annotation[] a2)","0","-","-","-","-"
"9033","arrayMemberEquals","/**
     * Helper method for comparing two objects of an array type.
     *
     * @param componentType the component type of the array
     * @param o1 the first object
     * @param o2 the second object
     * @return a flag whether these objects are equal
     */
    private static boolean arrayMemberEquals(final Class<?> componentType, final Object o1, final Object o2)","0","-","-","-","-"
"9034","arrayMemberHash","/**
     * Helper method for generating a hash code for an array.
     *
     * @param componentType the component type of the array
     * @param o the array
     * @return a hash code for the specified array
     */
    private static int arrayMemberHash(final Class<?> componentType, final Object o)","0","-","-","-","-"
"9035","equals","/**
     * Checks if two annotations are equal using the criteria for equality
     * presented in the","0","-","-","-","-"
"9036","hashCode","/**
     * Generate a hash code for the given annotation using the algorithm
     * presented in the","0","-","-","-","-"
"9037","hashMember","/**
     * Helper method for generating a hash code for a member of an annotation.
     *
     * @param name the name of the member
     * @param value the value of the member
     * @return a hash code for this member
     */
    private static int hashMember(final String name, final Object value)","0","-","-","-","-"
"9038","isValidAnnotationMemberType","/**
     * Checks if the specified type is permitted as an annotation member.
     *
     * <p>The Java language specification only permits certain types to be used
     * in annotations. These include","0","-","-","-","-"
"9039","memberEquals","/**
     * Helper method for checking whether two objects of the given type are
     * equal. This method is used to compare the parameters of two annotation
     * instances.
     *
     * @param type the type of the objects to be compared
     * @param o1 the first object
     * @param o2 the second object
     * @return a flag whether these objects are equal
     */
    private static boolean memberEquals(final Class<?> type, final Object o1, final Object o2)","0","-","-","-","-"
"9040","toString","/**
     * Generate a string representation of an Annotation, as suggested by
     *","0","-","-","-","-"
"9041","AnnotationUtils","/**
     *","0","-","-","-","-"
"9042","ArrayCollector","/**
         * Constructs a new instance for the given element type.
         *
         * @param elementType The element type.
         */
        public ArrayCollector(final Class<O> elementType)","0","-","-","-","-"
"9043","accumulator","@Override
        public BiConsumer<List<O>, O> accumulator()","0","-","-","-","-"
"9044","characteristics","@Override
        public Set<Characteristics> characteristics()","0","-","-","-","-"
"9045","combiner","@Override
        public BinaryOperator<List<O>> combiner()","0","-","-","-","-"
"9046","finisher","@Override
        public Function<List<O>, O[]> finisher()","0","-","-","-","-"
"9047","supplier","@Override
        public Supplier<List<O>> supplier()","0","-","-","-","-"
"9048","FailableStream","/**
         * Constructs a new instance with the given","0","-","-","-","-"
"9049","allMatch","/**
         * Returns whether all elements of this stream match the provided predicate.
         * May not evaluate the predicate on all elements if not necessary for
         * determining the result.  If the stream is empty then","0","-","-","-","-"
"9050","anyMatch","/**
         * Returns whether any elements of this stream match the provided
         * predicate.  May not evaluate the predicate on all elements if not
         * necessary for determining the result.  If the stream is empty then
         *","0","-","-","-","-"
"9051","assertNotTerminated","/**
         * Throws IllegalStateException if this stream is already terminated.
         *
         * @throws IllegalStateException if this stream is already terminated.
         */
        protected void assertNotTerminated()","0","-","-","-","-"
"9052","collect","/**
         * Performs a mutable reduction operation on the elements of this stream using a
         *","0","-","-","-","-"
"9053","collect","/**
         * Performs a mutable reduction operation on the elements of this FailableStream.
         * A mutable reduction is one in which the reduced value is a mutable result
         * container, such as an","0","-","-","-","-"
"9054","filter","/**
         * Returns a FailableStream consisting of the elements of this stream that match
         * the given FailablePredicate.
         *
         * <p>
         * This is an intermediate operation.
         * </p>
         *
         * @param predicate a non-interfering, stateless predicate to apply to each
         * element to determine if it should be included.
         * @return the new stream
         */
        public FailableStream<O> filter(final FailablePredicate<O, ?> predicate)","0","-","-","-","-"
"9055","forEach","/**
         * Performs an action for each element of this stream.
         *
         * <p>
         * This is an intermediate operation.
         * </p>
         *
         * <p>
         * The behavior of this operation is explicitly nondeterministic.
         * For parallel stream pipelines, this operation does <em>not</em>
         * guarantee to respect the encounter order of the stream, as doing so
         * would sacrifice the benefit of parallelism.  For any given element, the
         * action may be performed at whatever time and in whatever thread the
         * library chooses.  If the action accesses shared state, it is
         * responsible for providing the required synchronization.
         * </p>
         *
         * @param action a non-interfering action to perform on the elements
         */
        public void forEach(final FailableConsumer<O, ?> action)","0","-","-","-","-"
"9056","makeTerminated","/**
         * Marks this stream as terminated.
         *
         * @throws IllegalStateException if this stream is already terminated.
         */
        protected void makeTerminated()","0","-","-","-","-"
"9057","map","/**
         * Returns a stream consisting of the results of applying the given
         * function to the elements of this stream.
         *
         * <p>
         * This is an intermediate operation.
         * </p>
         *
         * @param <R> The element type of the new stream
         * @param mapper A non-interfering, stateless function to apply to each element
         * @return the new stream
         */
        public <R> FailableStream<R> map(final FailableFunction<O, R, ?> mapper)","0","-","-","-","-"
"9058","reduce","/**
         * Performs a reduction on the elements of this stream, using the provided
         * identity value and an associative accumulation function, and returns
         * the reduced value.  This is equivalent to:
         * <pre>","0","-","-","-","-"
"9059","stream","/**
         * Converts the FailableStream into an equivalent stream.
         * @return A stream, which will return the same elements, which this FailableStream would return.
         */
        public Stream<O> stream()","0","-","-","-","-"
"9060","stream","/**
     * Converts the given","0","-","-","-","-"
"9061","stream","/**
     * Converts the given","0","-","-","-","-"
"9062","toArray","/**
     * Returns a","0","-","-","-","-"
"9063","Streams","/**
     * Constructs a new instance.
     */
    public Streams()","0","-","-","-","-"
"9064","fill","/**
     * Fills and returns the given array, assigning the given","0","-","-","-","-"
"9065","fill","/**
     * Fills and returns the given array, assigning the given","0","-","-","-","-"
"9066","fill","/**
     * Fills and returns the given array, assigning the given","0","-","-","-","-"
"9067","fill","/**
     * Fills and returns the given array, assigning the given","0","-","-","-","-"
"9068","fill","/**
     * Fills and returns the given array, assigning the given","0","-","-","-","-"
"9069","fill","/**
     * Fills and returns the given array, assigning the given","0","-","-","-","-"
"9070","fill","/**
     * Fills and returns the given array, assigning the given","0","-","-","-","-"
"9071","fill","/**
     * Fills and returns the given array, using the provided generator supplier to compute each element. Like
     *","0","-","-","-","-"
"9072","fill","/**
     * Fills and returns the given array, assigning the given","0","-","-","-","-"
"9073","ArrayFill","private ArrayFill()","0","-","-","-","-"
"9074","and","/**
     * Performs an 'and' operation on a set of booleans.
     *
     * <pre>
     *   BooleanUtils.and(true, true)         = true
     *   BooleanUtils.and(false, false)       = false
     *   BooleanUtils.and(true, false)        = false
     *   BooleanUtils.and(true, true, false)  = false
     *   BooleanUtils.and(true, true, true)   = true
     * </pre>
     *
     * @param array  an array of","0","-","-","-","-"
"9075","and","/**
     * Performs an 'and' operation on an array of Booleans.
     * <pre>
     *   BooleanUtils.and(Boolean.TRUE, Boolean.TRUE)                 = Boolean.TRUE
     *   BooleanUtils.and(Boolean.FALSE, Boolean.FALSE)               = Boolean.FALSE
     *   BooleanUtils.and(Boolean.TRUE, Boolean.FALSE)                = Boolean.FALSE
     *   BooleanUtils.and(Boolean.TRUE, Boolean.TRUE, Boolean.TRUE)   = Boolean.TRUE
     *   BooleanUtils.and(Boolean.FALSE, Boolean.FALSE, Boolean.TRUE) = Boolean.FALSE
     *   BooleanUtils.and(Boolean.TRUE, Boolean.FALSE, Boolean.TRUE)  = Boolean.FALSE
     *   BooleanUtils.and(null, null)                                 = Boolean.FALSE
     * </pre>
     * <p>
     * Null array elements map to false, like","0","-","-","-","-"
"9076","booleanValues","/**
     * Returns a new array of possible values (like an enum would).
     *
     * @return a new array of possible values (like an enum would).
     * @since 3.12.0
     */
    public static Boolean[] booleanValues()","0","-","-","-","-"
"9077","compare","/**
     * Compares two","0","-","-","-","-"
"9078","forEach","/**
     * Performs the given action for each Boolean","0","-","-","-","-"
"9079","isFalse","/**
     * Checks if a","0","-","-","-","-"
"9080","isNotFalse","/**
     * Checks if a","0","-","-","-","-"
"9081","isNotTrue","/**
     * Checks if a","0","-","-","-","-"
"9082","isTrue","/**
     * Checks if a","0","-","-","-","-"
"9083","negate","/**
     * Negates the specified boolean.
     *
     * <p>If","0","-","-","-","-"
"9084","oneHot","/**
     * Performs a one-hot on an array of booleans.
     * <p>
     * This implementation returns true if one, and only one, of the supplied values is true.
     * </p>
     * <p>
     * See also <a href=""https://en.wikipedia.org/wiki/One-hot"">One-hot</a>.
     * </p>
     * @param array  an array of","0","-","-","-","-"
"9085","oneHot","/**
     * Performs a one-hot on an array of booleans.
     * <p>
     * This implementation returns true if one, and only one, of the supplied values is true.
     * </p>
     * <p>
     * Null array elements map to false, like","0","-","-","-","-"
"9086","or","/**
     * Performs an 'or' operation on a set of booleans.
     *
     * <pre>
     *   BooleanUtils.or(true, true)          = true
     *   BooleanUtils.or(false, false)        = false
     *   BooleanUtils.or(true, false)         = true
     *   BooleanUtils.or(true, true, false)   = true
     *   BooleanUtils.or(true, true, true)    = true
     *   BooleanUtils.or(false, false, false) = false
     * </pre>
     *
     * @param array  an array of","0","-","-","-","-"
"9087","or","/**
     * Performs an 'or' operation on an array of Booleans.
     * <pre>
     *   BooleanUtils.or(Boolean.TRUE, Boolean.TRUE)                  = Boolean.TRUE
     *   BooleanUtils.or(Boolean.FALSE, Boolean.FALSE)                = Boolean.FALSE
     *   BooleanUtils.or(Boolean.TRUE, Boolean.FALSE)                 = Boolean.TRUE
     *   BooleanUtils.or(Boolean.TRUE, Boolean.TRUE, Boolean.TRUE)    = Boolean.TRUE
     *   BooleanUtils.or(Boolean.FALSE, Boolean.FALSE, Boolean.TRUE)  = Boolean.TRUE
     *   BooleanUtils.or(Boolean.TRUE, Boolean.FALSE, Boolean.TRUE)   = Boolean.TRUE
     *   BooleanUtils.or(Boolean.FALSE, Boolean.FALSE, Boolean.FALSE) = Boolean.FALSE
     *   BooleanUtils.or(Boolean.TRUE, null)                          = Boolean.TRUE
     *   BooleanUtils.or(Boolean.FALSE, null)                         = Boolean.FALSE
     * </pre>
     * <p>
     * Null array elements map to false, like","0","-","-","-","-"
"9088","primitiveValues","/**
     * Returns a new array of possible values (like an enum would).
     * @return a new array of possible values (like an enum would).
     * @since 3.12.0
     */
    public static boolean[] primitiveValues()","0","-","-","-","-"
"9089","toBoolean","/**
     * Converts a Boolean to a boolean handling","0","-","-","-","-"
"9090","toBoolean","/**
     * Converts an int to a boolean using the convention that","0","-","-","-","-"
"9091","toBoolean","/**
     * Converts an int to a boolean specifying the conversion values.
     *
     * <p>If the","0","-","-","-","-"
"9092","toBoolean","/**
     * Converts an Integer to a boolean specifying the conversion values.
     *
     * <pre>
     *   BooleanUtils.toBoolean(Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(0)) = false
     *   BooleanUtils.toBoolean(Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(0)) = true
     *   BooleanUtils.toBoolean(Integer.valueOf(2), Integer.valueOf(1), Integer.valueOf(2)) = false
     *   BooleanUtils.toBoolean(Integer.valueOf(2), Integer.valueOf(2), Integer.valueOf(0)) = true
     *   BooleanUtils.toBoolean(null, null, Integer.valueOf(0))                     = true
     * </pre>
     *
     * @param value  the Integer to convert
     * @param trueValue  the value to match for","0","-","-","-","-"
"9093","toBoolean","/**
     * Converts a String to a boolean (optimized for performance).
     *
     * <p>","0","-","-","-","-"
"9094","toBoolean","/**
     * Converts a String to a Boolean throwing an exception if no match found.
     *
     * <pre>
     *   BooleanUtils.toBoolean(""true"", ""true"", ""false"")  = true
     *   BooleanUtils.toBoolean(""false"", ""true"", ""false"") = false
     * </pre>
     *
     * @param str  the String to check
     * @param trueString  the String to match for","0","-","-","-","-"
"9095","toBooleanDefaultIfNull","/**
     * Converts a Boolean to a boolean handling","0","-","-","-","-"
"9096","toBooleanObject","/**
     * Converts an int to a Boolean using the convention that","0","-","-","-","-"
"9097","toBooleanObject","/**
     * Converts an int to a Boolean specifying the conversion values.
     *
     * <p>NOTE: This method may return","0","-","-","-","-"
"9098","toBooleanObject","/**
     * Converts an Integer to a Boolean using the convention that","0","-","-","-","-"
"9099","toBooleanObject","/**
     * Converts an Integer to a Boolean specifying the conversion values.
     *
     * <p>NOTE: This method may return","0","-","-","-","-"
"9100","toBooleanObject","/**
     * Converts a String to a Boolean.
     *
     * <p>","0","-","-","-","-"
"9101","toBooleanObject","/**
     * Converts a String to a Boolean throwing an exception if no match.
     *
     * <p>NOTE: This method may return","0","-","-","-","-"
"9102","toInteger","/**
     * Converts a boolean to an int using the convention that
     *","0","-","-","-","-"
"9103","toInteger","/**
     * Converts a boolean to an int specifying the conversion values.
     *
     * <pre>
     *   BooleanUtils.toInteger(true, 1, 0)  = 1
     *   BooleanUtils.toInteger(false, 1, 0) = 0
     * </pre>
     *
     * @param bool  the to convert
     * @param trueValue  the value to return if","0","-","-","-","-"
"9104","toInteger","/**
     * Converts a Boolean to an int specifying the conversion values.
     *
     * <pre>
     *   BooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1
     *   BooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0
     *   BooleanUtils.toInteger(null, 1, 0, 2)          = 2
     * </pre>
     *
     * @param bool  the Boolean to convert
     * @param trueValue  the value to return if","0","-","-","-","-"
"9105","toIntegerObject","/**
     * Converts a boolean to an Integer using the convention that
     *","0","-","-","-","-"
"9106","toIntegerObject","/**
     * Converts a boolean to an Integer specifying the conversion values.
     *
     * <pre>
     *   BooleanUtils.toIntegerObject(true, Integer.valueOf(1), Integer.valueOf(0))  = Integer.valueOf(1)
     *   BooleanUtils.toIntegerObject(false, Integer.valueOf(1), Integer.valueOf(0)) = Integer.valueOf(0)
     * </pre>
     *
     * @param bool  the to convert
     * @param trueValue  the value to return if","0","-","-","-","-"
"9107","toIntegerObject","/**
     * Converts a Boolean to an Integer using the convention that
     *","0","-","-","-","-"
"9108","toIntegerObject","/**
     * Converts a Boolean to an Integer specifying the conversion values.
     *
     * <pre>
     *   BooleanUtils.toIntegerObject(Boolean.TRUE, Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(2))  = Integer.valueOf(1)
     *   BooleanUtils.toIntegerObject(Boolean.FALSE, Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(2)) = Integer.valueOf(0)
     *   BooleanUtils.toIntegerObject(null, Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(2))          = Integer.valueOf(2)
     * </pre>
     *
     * @param bool  the Boolean to convert
     * @param trueValue  the value to return if","0","-","-","-","-"
"9109","toString","/**
     * Converts a boolean to a String returning one of the input Strings.
     *
     * <pre>
     *   BooleanUtils.toString(true, ""true"", ""false"")   = ""true""
     *   BooleanUtils.toString(false, ""true"", ""false"")  = ""false""
     * </pre>
     *
     * @param bool  the Boolean to check
     * @param trueString  the String to return if","0","-","-","-","-"
"9110","toString","/**
     * Converts a Boolean to a String returning one of the input Strings.
     *
     * <pre>
     *   BooleanUtils.toString(Boolean.TRUE, ""true"", ""false"", null)   = ""true""
     *   BooleanUtils.toString(Boolean.FALSE, ""true"", ""false"", null)  = ""false""
     *   BooleanUtils.toString(null, ""true"", ""false"", null)           = null;
     * </pre>
     *
     * @param bool  the Boolean to check
     * @param trueString  the String to return if","0","-","-","-","-"
"9111","toStringOnOff","/**
     * Converts a boolean to a String returning","0","-","-","-","-"
"9112","toStringOnOff","/**
     * Converts a Boolean to a String returning","0","-","-","-","-"
"9113","toStringTrueFalse","/**
     * Converts a boolean to a String returning","0","-","-","-","-"
"9114","toStringTrueFalse","/**
     * Converts a Boolean to a String returning","0","-","-","-","-"
"9115","toStringYesNo","/**
     * Converts a boolean to a String returning","0","-","-","-","-"
"9116","toStringYesNo","/**
     * Converts a Boolean to a String returning","0","-","-","-","-"
"9117","values","/**
     * Returns an unmodifiable list of Booleans","0","-","-","-","-"
"9118","xor","/**
     * Performs an xor on a set of booleans.
     * <p>
     *   This behaves like an XOR gate;
     *   it returns true if the number of true values is odd,
     *   and false if the number of true values is zero or even.
     * </p>
     *
     * <pre>
     *   BooleanUtils.xor(true, true)             = false
     *   BooleanUtils.xor(false, false)           = false
     *   BooleanUtils.xor(true, false)            = true
     *   BooleanUtils.xor(true, false, false)     = true
     *   BooleanUtils.xor(true, true, true)       = true
     *   BooleanUtils.xor(true, true, true, true) = false
     * </pre>
     *
     * @param array  an array of","0","-","-","-","-"
"9119","xor","/**
     * Performs an xor on an array of Booleans.
     * <pre>
     *   BooleanUtils.xor(Boolean.TRUE, Boolean.TRUE)                 = Boolean.FALSE
     *   BooleanUtils.xor(Boolean.FALSE, Boolean.FALSE)               = Boolean.FALSE
     *   BooleanUtils.xor(Boolean.TRUE, Boolean.FALSE)                = Boolean.TRUE
     *   BooleanUtils.xor(Boolean.TRUE, Boolean.FALSE, Boolean.FALSE) = Boolean.TRUE
     *   BooleanUtils.xor(Boolean.FALSE, null)                        = Boolean.FALSE
     *   BooleanUtils.xor(Boolean.TRUE, null)                         = Boolean.TRUE
     * </pre>
     * <p>
     * Null array elements map to false, like","0","-","-","-","-"
"9120","BooleanUtils","/**
     *","0","-","-","-","-"
"9121","packageToPath","/**
     * Converts a package name to a Java path ('/').
     *
     * @param path the source path.
     * @return a package name.
     * @throws NullPointerException if","0","-","-","-","-"
"9122","pathToPackage","/**
     * Converts a Java path ('/') to a package name.
     *
     * @param path the source path.
     * @return a package name.
     * @throws NullPointerException if","0","-","-","-","-"
"9123","toFullyQualifiedName","/**
     * Returns the fully qualified name for the resource with name","0","-","-","-","-"
"9124","toFullyQualifiedName","/**
     * Returns the fully qualified name for the resource with name","0","-","-","-","-"
"9125","toFullyQualifiedPath","/**
     * Returns the fully qualified path for the resource with name","0","-","-","-","-"
"9126","toFullyQualifiedPath","/**
     * Returns the fully qualified path for the resource with name","0","-","-","-","-"
"9127","ClassPathUtils","/**
     *","0","-","-","-","-"
"9128","AbstractSupplier","/**
     * Constructs a new instance.
     */
    public AbstractSupplier()","0","-","-","-","-"
"9129","asThis","/**
     * Returns this instance typed as the subclass type","0","-","-","-","-"
"9130","RecursiveToStringStyle","/**
     * Constructs a new instance.
     */
    public RecursiveToStringStyle()","0","-","-","-","-"
"9131","accept","/**
     * Returns whether or not to recursively format the given","0","-","-","-","-"
"9132","appendDetail","@Override
    protected void appendDetail(final StringBuffer buffer, final String fieldName, final Collection<?> coll)","0","-","-","-","-"
"9133","appendDetail","@Override
    public void appendDetail(final StringBuffer buffer, final String fieldName, final Object value)","0","-","-","-","-"
"9134","build","/**
     * Returns a reference to the object being constructed or result being
     * calculated by the builder.
     *
     * @return the object constructed or result calculated by the builder.
     */
    T build();","0","-","-","-","-"
"9135","getUnchecked","/**
     * Delegates to","0","-","-","-","-"
"9136","toNoNullStringArray","/**
     * Converts the given Collection into an array of Strings. The returned array does not contain","0","-","-","-","-"
"9137","toNoNullStringArray","/**
     * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists
     * (arrays and collections). Note that","0","-","-","-","-"
"9138","toString","/**
     * Builds a","0","-","-","-","-"
"9139","toString","/**
     * Builds a","0","-","-","-","-"
"9140","toString","/**
     * Builds a","0","-","-","-","-"
"9141","toString","/**
     * Builds a","0","-","-","-","-"
"9142","toString","/**
     * Builds a","0","-","-","-","-"
"9143","toString","/**
     * Builds a","0","-","-","-","-"
"9144","toStringExclude","/**
     * Builds a String for a toString method excluding the given field names.
     *
     * @param object
     *            The object to ""toString"".
     * @param excludeFieldNames
     *            The field names to exclude. Null excludes nothing.
     * @return The toString value.
     */
    public static String toStringExclude(final Object object, final Collection<String> excludeFieldNames)","0","-","-","-","-"
"9145","toStringExclude","/**
     * Builds a String for a toString method excluding the given field names.
     *
     * @param object
     *            The object to ""toString"".
     * @param excludeFieldNames
     *            The field names to exclude
     * @return The toString value.
     */
    public static String toStringExclude(final Object object, final String... excludeFieldNames)","0","-","-","-","-"
"9146","toStringInclude","/**
     * Builds a String for a toString method including the given field names.
     *
     * @param object
     *            The object to ""toString"".
     * @param includeFieldNames
     *","0","-","-","-","-"
"9147","toStringInclude","/**
     * Builds a String for a toString method including the given field names.
     *
     * @param object
     *            The object to ""toString"".
     * @param includeFieldNames
     *            The field names to include.","0","-","-","-","-"
"9148","ReflectionToStringBuilder","/**
     * Constructs a new instance.
     *
     * <p>
     * This constructor outputs using the default style set with","0","-","-","-","-"
"9149","ReflectionToStringBuilder","/**
     * Constructs a new instance.
     *
     * <p>
     * If the style is","0","-","-","-","-"
"9150","ReflectionToStringBuilder","/**
     * Constructs a new instance.
     *
     * <p>
     * If the style is","0","-","-","-","-"
"9151","ReflectionToStringBuilder","/**
     * Constructs a new instance.
     *
     * @param <T>
     *            the type of the object
     * @param object
     *            the Object to build a","0","-","-","-","-"
"9152","ReflectionToStringBuilder","/**
     * Constructs a new instance.
     *
     * @param <T>
     *            the type of the object
     * @param object
     *            the Object to build a","0","-","-","-","-"
"9153","accept","/**
     * Returns whether or not to append the given","0","-","-","-","-"
"9154","appendFieldsIn","/**
     * Appends the fields and values defined by the given object of the given Class.
     *
     * <p>
     * If a cycle is detected as an object is &quot;toString()'ed&quot;, such an object is rendered as if
     *","0","-","-","-","-"
"9155","getExcludeFieldNames","/**
     * Gets the excludeFieldNames.
     *
     * @return the excludeFieldNames.
     */
    public String[] getExcludeFieldNames()","0","-","-","-","-"
"9156","getIncludeFieldNames","/**
     * Gets the includeFieldNames
     *
     * @return the includeFieldNames.
     * @since 3.13.0
     */
    public String[] getIncludeFieldNames()","0","-","-","-","-"
"9157","getUpToClass","/**
     * Gets the last super class to stop appending fields for.
     *
     * @return The last super class to stop appending fields for.
     */
    public Class<?> getUpToClass()","0","-","-","-","-"
"9158","getValue","/**
     * Calls","0","-","-","-","-"
"9159","isAppendStatics","/**
     * Gets whether or not to append static fields.
     *
     * @return Whether or not to append static fields.
     * @since 2.1
     */
    public boolean isAppendStatics()","0","-","-","-","-"
"9160","isAppendTransients","/**
     * Gets whether or not to append transient fields.
     *
     * @return Whether or not to append transient fields.
     */
    public boolean isAppendTransients()","0","-","-","-","-"
"9161","isExcludeNullValues","/**
     * Gets whether or not to append fields whose values are null.
     *
     * @return Whether or not to append fields whose values are null.
     * @since 3.6
     */
    public boolean isExcludeNullValues()","0","-","-","-","-"
"9162","reflectionAppendArray","/**
     * Appends to the","0","-","-","-","-"
"9163","setAppendStatics","/**
     * Sets whether or not to append static fields.
     *
     * @param appendStatics
     *            Whether or not to append static fields.
     * @since 2.1
     */
    public void setAppendStatics(final boolean appendStatics)","0","-","-","-","-"
"9164","setAppendTransients","/**
     * Sets whether or not to append transient fields.
     *
     * @param appendTransients
     *            Whether or not to append transient fields.
     */
    public void setAppendTransients(final boolean appendTransients)","0","-","-","-","-"
"9165","setExcludeFieldNames","/**
     * Sets the field names to exclude.
     *
     * @param excludeFieldNamesParam
     *            The excludeFieldNames to excluding from toString or","0","-","-","-","-"
"9166","setExcludeNullValues","/**
     * Sets whether or not to append fields whose values are null.
     *
     * @param excludeNullValues
     *            Whether or not to append fields whose values are null.
     * @since 3.6
     */
    public void setExcludeNullValues(final boolean excludeNullValues)","0","-","-","-","-"
"9167","setIncludeFieldNames","/**
     * Sets the field names to include.","0","-","-","-","-"
"9168","setUpToClass","/**
     * Sets the last super class to stop appending fields for.
     *
     * @param clazz
     *            The last super class to stop appending fields for.
     */
    public void setUpToClass(final Class<?> clazz)","0","-","-","-","-"
"9169","toString","/**
     * Gets the String built by this builder.
     *
     * @return the built string
     */
    @Override
    public String toString()","0","-","-","-","-"
"9170","validate","/**
     * Validates that include and exclude names do not intersect.
     */
    private void validate()","0","-","-","-","-"
"9171","StandardToStringStyle","/**
     * Constructs a new instance.
     */
    public StandardToStringStyle()","0","-","-","-","-"
"9172","getArrayEnd","/**
     * Gets the array end text.
     *
     * @return the current array end text
     */
    @Override
    public String getArrayEnd()","0","-","-","-","-"
"9173","getArraySeparator","/**
     * Gets the array separator text.
     *
     * @return the current array separator text
     */
    @Override
    public String getArraySeparator()","0","-","-","-","-"
"9174","getArrayStart","/**
     * Gets the array start text.
     *
     * @return the current array start text
     */
    @Override
    public String getArrayStart()","0","-","-","-","-"
"9175","getContentEnd","/**
     * Gets the content end text.
     *
     * @return the current content end text
     */
    @Override
    public String getContentEnd()","0","-","-","-","-"
"9176","getContentStart","/**
     * Gets the content start text.
     *
     * @return the current content start text
     */
    @Override
    public String getContentStart()","0","-","-","-","-"
"9177","getFieldNameValueSeparator","/**
     * Gets the field name value separator text.
     *
     * @return the current field name value separator text
     */
    @Override
    public String getFieldNameValueSeparator()","0","-","-","-","-"
"9178","getFieldSeparator","/**
     * Gets the field separator text.
     *
     * @return the current field separator text
     */
    @Override
    public String getFieldSeparator()","0","-","-","-","-"
"9179","getNullText","/**
     * Gets the text to output when","0","-","-","-","-"
"9180","getSizeEndText","/**
     * Gets the end text to output when a","0","-","-","-","-"
"9181","getSizeStartText","/**
     * Gets the text to output when a","0","-","-","-","-"
"9182","getSummaryObjectEndText","/**
     * Gets the end text to output when an","0","-","-","-","-"
"9183","getSummaryObjectStartText","/**
     * Gets the start text to output when an","0","-","-","-","-"
"9184","isArrayContentDetail","/**
     * Gets whether to output array content detail.
     *
     * @return the current array content detail setting
     */
    @Override
    public boolean isArrayContentDetail()","0","-","-","-","-"
"9185","isDefaultFullDetail","/**
     * Gets whether to use full detail when the caller doesn't
     * specify.
     *
     * @return the current defaultFullDetail flag
     */
    @Override
    public boolean isDefaultFullDetail()","0","-","-","-","-"
"9186","isFieldSeparatorAtEnd","/**
     * Gets whether the field separator should be added at the end
     * of each buffer.
     *
     * @return fieldSeparatorAtEnd flag
     * @since 2.0
     */
    @Override
    public boolean isFieldSeparatorAtEnd()","0","-","-","-","-"
"9187","isFieldSeparatorAtStart","/**
     * Gets whether the field separator should be added at the start
     * of each buffer.
     *
     * @return the fieldSeparatorAtStart flag
     * @since 2.0
     */
    @Override
    public boolean isFieldSeparatorAtStart()","0","-","-","-","-"
"9188","isUseClassName","/**
     * Gets whether to use the class name.
     *
     * @return the current useClassName flag
     */
    @Override
    public boolean isUseClassName()","0","-","-","-","-"
"9189","isUseFieldNames","/**
     * Gets whether to use the field names passed in.
     *
     * @return the current useFieldNames flag
     */
    @Override
    public boolean isUseFieldNames()","0","-","-","-","-"
"9190","isUseIdentityHashCode","/**
     * Gets whether to use the identity hash code.
     * @return the current useIdentityHashCode flag
     */
    @Override
    public boolean isUseIdentityHashCode()","0","-","-","-","-"
"9191","isUseShortClassName","/**
     * Gets whether to output short or long class names.
     *
     * @return the current useShortClassName flag
     * @since 2.0
     */
    @Override
    public boolean isUseShortClassName()","0","-","-","-","-"
"9192","setArrayContentDetail","/**
     * Sets whether to output array content detail.
     *
     * @param arrayContentDetail  the new arrayContentDetail flag
     */
    @Override
    public void setArrayContentDetail(final boolean arrayContentDetail)","0","-","-","-","-"
"9193","setArrayEnd","/**
     * Sets the array end text.
     *
     * <p>","0","-","-","-","-"
"9194","setArraySeparator","/**
     * Sets the array separator text.
     *
     * <p>","0","-","-","-","-"
"9195","setArrayStart","/**
     * Sets the array start text.
     *
     * <p>","0","-","-","-","-"
"9196","setContentEnd","/**
     * Sets the content end text.
     *
     * <p>","0","-","-","-","-"
"9197","setContentStart","/**
     * Sets the content start text.
     *
     * <p>","0","-","-","-","-"
"9198","setDefaultFullDetail","/**
     * Sets whether to use full detail when the caller doesn't
     * specify.
     *
     * @param defaultFullDetail  the new defaultFullDetail flag
     */
    @Override
    public void setDefaultFullDetail(final boolean defaultFullDetail)","0","-","-","-","-"
"9199","setFieldNameValueSeparator","/**
     * Sets the field name value separator text.
     *
     * <p>","0","-","-","-","-"
"9200","setFieldSeparator","/**
     * Sets the field separator text.
     *
     * <p>","0","-","-","-","-"
"9201","setFieldSeparatorAtEnd","/**
     * Sets whether the field separator should be added at the end
     * of each buffer.
     *
     * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag
     * @since 2.0
     */
    @Override
    public void setFieldSeparatorAtEnd(final boolean fieldSeparatorAtEnd)","0","-","-","-","-"
"9202","setFieldSeparatorAtStart","/**
     * Sets whether the field separator should be added at the start
     * of each buffer.
     *
     * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag
     * @since 2.0
     */
    @Override
    public void setFieldSeparatorAtStart(final boolean fieldSeparatorAtStart)","0","-","-","-","-"
"9203","setNullText","/**
     * Sets the text to output when","0","-","-","-","-"
"9204","setSizeEndText","/**
     * Sets the end text to output when a","0","-","-","-","-"
"9205","setSizeStartText","/**
     * Sets the start text to output when a","0","-","-","-","-"
"9206","setSummaryObjectEndText","/**
     * Sets the end text to output when an","0","-","-","-","-"
"9207","setSummaryObjectStartText","/**
     * Sets the start text to output when an","0","-","-","-","-"
"9208","setUseClassName","/**
     * Sets whether to use the class name.
     *
     * @param useClassName  the new useClassName flag
     */
    @Override
    public void setUseClassName(final boolean useClassName)","0","-","-","-","-"
"9209","setUseFieldNames","/**
     * Sets whether to use the field names passed in.
     *
     * @param useFieldNames  the new useFieldNames flag
     */
    @Override
    public void setUseFieldNames(final boolean useFieldNames)","0","-","-","-","-"
"9210","setUseIdentityHashCode","/**
     * Sets whether to use the identity hash code.
     *
     * @param useIdentityHashCode  the new useIdentityHashCode flag
     */
    @Override
    public void setUseIdentityHashCode(final boolean useIdentityHashCode)","0","-","-","-","-"
"9211","setUseShortClassName","/**
     * Sets whether to output short or long class names.
     *
     * @param useShortClassName  the new useShortClassName flag
     * @since 2.0
     */
    @Override
    public void setUseShortClassName(final boolean useShortClassName)","0","-","-","-","-"
"9212","DefaultToStringStyle","/**
         * Constructs a new instance.
         *
         * <p>Use the static constant rather than instantiating.</p>
         */
        DefaultToStringStyle()","0","-","-","-","-"
"9213","readResolve","/**
         * Ensure Singleton after serialization.
         *
         * @return the singleton
         */
        private Object readResolve()","0","-","-","-","-"
"9214","JsonToStringStyle","/**
         * Constructs a new instance.
         *
         * <p>
         * Use the static constant rather than instantiating.
         * </p>
         */
        JsonToStringStyle()","0","-","-","-","-"
"9215","append","@Override
        public void append(final StringBuffer buffer, final String fieldName, final boolean[] array, final Boolean fullDetail)","0","-","-","-","-"
"9216","append","@Override
        public void append(final StringBuffer buffer, final String fieldName, final byte[] array, final Boolean fullDetail)","0","-","-","-","-"
"9217","append","@Override
        public void append(final StringBuffer buffer, final String fieldName, final char[] array, final Boolean fullDetail)","0","-","-","-","-"
"9218","append","@Override
        public void append(final StringBuffer buffer, final String fieldName, final double[] array, final Boolean fullDetail)","0","-","-","-","-"
"9219","append","@Override
        public void append(final StringBuffer buffer, final String fieldName, final float[] array, final Boolean fullDetail)","0","-","-","-","-"
"9220","append","@Override
        public void append(final StringBuffer buffer, final String fieldName, final int[] array, final Boolean fullDetail)","0","-","-","-","-"
"9221","append","@Override
        public void append(final StringBuffer buffer, final String fieldName, final long[] array, final Boolean fullDetail)","0","-","-","-","-"
"9222","append","@Override
        public void append(final StringBuffer buffer, final String fieldName, final Object value, final Boolean fullDetail)","0","-","-","-","-"
"9223","append","@Override
        public void append(final StringBuffer buffer, final String fieldName, final Object[] array, final Boolean fullDetail)","0","-","-","-","-"
"9224","append","@Override
        public void append(final StringBuffer buffer, final String fieldName, final short[] array, final Boolean fullDetail)","0","-","-","-","-"
"9225","appendDetail","@Override
        protected void appendDetail(final StringBuffer buffer, final String fieldName, final char value)","0","-","-","-","-"
"9226","appendDetail","@Override
        protected void appendDetail(final StringBuffer buffer, final String fieldName, final Collection<?> coll)","0","-","-","-","-"
"9227","appendDetail","@Override
        protected void appendDetail(final StringBuffer buffer, final String fieldName, final Map<?, ?> map)","0","-","-","-","-"
"9228","appendDetail","@Override
        protected void appendDetail(final StringBuffer buffer, final String fieldName, final Object value)","0","-","-","-","-"
"9229","appendFieldStart","@Override
        protected void appendFieldStart(final StringBuffer buffer, final String fieldName)","0","-","-","-","-"
"9230","appendValueAsString","/**
         * Appends the given String enclosed in double-quotes to the given StringBuffer.
         *
         * @param buffer the StringBuffer to append the value to.
         * @param value the value to append.
         */
        private void appendValueAsString(final StringBuffer buffer, final String value)","0","-","-","-","-"
"9231","checkAppendInput","private void checkAppendInput(final String fieldName, final Boolean fullDetail)","0","-","-","-","-"
"9232","checkFieldName","private void checkFieldName(final String fieldName)","0","-","-","-","-"
"9233","checkIsFullDetail","private void checkIsFullDetail(final Boolean fullDetail)","0","-","-","-","-"
"9234","isJsonArray","private boolean isJsonArray(final String valueAsString)","0","-","-","-","-"
"9235","isJsonObject","private boolean isJsonObject(final String valueAsString)","0","-","-","-","-"
"9236","readResolve","/**
         * Ensure Singleton after serialization.
         *
         * @return the singleton
         */
        private Object readResolve()","0","-","-","-","-"
"9237","MultiLineToStringStyle","/**
         * Constructs a new instance.
         *
         * <p>Use the static constant rather than instantiating.</p>
         */
        MultiLineToStringStyle()","0","-","-","-","-"
"9238","readResolve","/**
         * Ensure Singleton after serialization.
         *
         * @return the singleton
         */
        private Object readResolve()","0","-","-","-","-"
"9239","NoClassNameToStringStyle","/**
         * Constructs a new instance.
         *
         * <p>Use the static constant rather than instantiating.</p>
         */
        NoClassNameToStringStyle()","0","-","-","-","-"
"9240","readResolve","/**
         * Ensure Singleton after serialization.
         *
         * @return the singleton
         */
        private Object readResolve()","0","-","-","-","-"
"9241","NoFieldNameToStringStyle","/**
         * Constructs a new instance.
         *
         * <p>Use the static constant rather than instantiating.</p>
         */
        NoFieldNameToStringStyle()","0","-","-","-","-"
"9242","readResolve","/**
         * Ensure Singleton after serialization.
         *
         * @return the singleton
         */
        private Object readResolve()","0","-","-","-","-"
"9243","ShortPrefixToStringStyle","/**
         * Constructs a new instance.
         *
         * <p>Use the static constant rather than instantiating.</p>
         */
        ShortPrefixToStringStyle()","0","-","-","-","-"
"9244","readResolve","/**
         * Ensure <code>Singleton</ode> after serialization.
         * @return the singleton
         */
        private Object readResolve()","0","-","-","-","-"
"9245","SimpleToStringStyle","/**
         * Constructs a new instance.
         *
         * <p>Use the static constant rather than instantiating.</p>
         */
        SimpleToStringStyle()","0","-","-","-","-"
"9246","readResolve","/**
         * Ensure <code>Singleton</ode> after serialization.
         * @return the singleton
         */
        private Object readResolve()","0","-","-","-","-"
"9247","getRegistry","/**
     * Returns the registry of objects being traversed by the","0","-","-","-","-"
"9248","isRegistered","/**
     * Returns","0","-","-","-","-"
"9249","register","/**
     * Registers the given object. Used by the reflection methods to avoid
     * infinite loops.
     *
     * @param value
     *                  The object to register.
     */
    static void register(final Object value)","0","-","-","-","-"
"9250","unregister","/**
     * Unregisters the given object.
     *
     * <p>
     * Used by the reflection methods to avoid infinite loops.
     * </p>
     *
     * @param value
     *                  The object to unregister.
     */
    static void unregister(final Object value)","0","-","-","-","-"
"9251","ToStringStyle","/**
     * Constructs a new instance.
     */
    protected ToStringStyle()","0","-","-","-","-"
"9252","append","/**
     * Appends to the","0","-","-","-","-"
"9253","append","/**
     * Appends to the","0","-","-","-","-"
"9254","append","/**
     * Appends to the","0","-","-","-","-"
"9255","append","/**
     * Appends to the","0","-","-","-","-"
"9256","append","/**
     * Appends to the","0","-","-","-","-"
"9257","append","/**
     * Appends to the","0","-","-","-","-"
"9258","append","/**
     * Appends to the","0","-","-","-","-"
"9259","append","/**
     * Appends to the","0","-","-","-","-"
"9260","append","/**
     * Appends to the","0","-","-","-","-"
"9261","append","/**
     * Appends to the","0","-","-","-","-"
"9262","append","/**
     * Appends to the","0","-","-","-","-"
"9263","append","/**
     * Appends to the","0","-","-","-","-"
"9264","append","/**
     * <p>Appends to the","0","-","-","-","-"
"9265","append","/**
     * Appends to the","0","-","-","-","-"
"9266","append","/**
     * Appends to the","0","-","-","-","-"
"9267","append","/**
     * Appends to the","0","-","-","-","-"
"9268","append","/**
     * Appends to the","0","-","-","-","-"
"9269","append","/**
     * Appends to the","0","-","-","-","-"
"9270","appendClassName","/**
     * Appends to the","0","-","-","-","-"
"9271","appendContentEnd","/**
     * Appends to the","0","-","-","-","-"
"9272","appendContentStart","/**
     * Appends to the","0","-","-","-","-"
"9273","appendCyclicObject","/**
     * Appends to the","0","-","-","-","-"
"9274","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9275","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9276","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9277","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9278","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9279","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9280","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9281","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9282","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9283","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9284","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9285","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9286","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9287","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9288","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9289","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9290","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9291","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9292","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9293","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9294","appendDetail","/**
     * Appends to the","0","-","-","-","-"
"9295","appendEnd","/**
     * Appends to the","0","-","-","-","-"
"9296","appendFieldEnd","/**
     * Appends to the","0","-","-","-","-"
"9297","appendFieldSeparator","/**
     * Appends to the","0","-","-","-","-"
"9298","appendFieldStart","/**
     * Appends to the","0","-","-","-","-"
"9299","appendIdentityHashCode","/**
     * Appends the","0","-","-","-","-"
"9300","appendInternal","/**
     * Appends to the","0","-","-","-","-"
"9301","appendNullText","/**
     * Appends to the","0","-","-","-","-"
"9302","appendStart","/**
     * Appends to the","0","-","-","-","-"
"9303","appendSummary","/**
     * Appends to the","0","-","-","-","-"
"9304","appendSummary","/**
     * Appends to the","0","-","-","-","-"
"9305","appendSummary","/**
     * Appends to the","0","-","-","-","-"
"9306","appendSummary","/**
     * Appends to the","0","-","-","-","-"
"9307","appendSummary","/**
     * Appends to the","0","-","-","-","-"
"9308","appendSummary","/**
     * Appends to the","0","-","-","-","-"
"9309","appendSummary","/**
     * Appends to the","0","-","-","-","-"
"9310","appendSummary","/**
     * Appends to the","0","-","-","-","-"
"9311","appendSummary","/**
     * Appends to the","0","-","-","-","-"
"9312","appendSummary","/**
     * Appends to the","0","-","-","-","-"
"9313","appendSummarySize","/**
     * Appends to the","0","-","-","-","-"
"9314","appendSuper","/**
     * Appends to the","0","-","-","-","-"
"9315","appendToString","/**
     * Appends to the","0","-","-","-","-"
"9316","getArrayEnd","/**
     * Gets the array end text.
     *
     * @return the current array end text
     */
    protected String getArrayEnd()","0","-","-","-","-"
"9317","getArraySeparator","/**
     * Gets the array separator text.
     *
     * @return the current array separator text
     */
    protected String getArraySeparator()","0","-","-","-","-"
"9318","getArrayStart","/**
     * Gets the array start text.
     *
     * @return the current array start text
     */
    protected String getArrayStart()","0","-","-","-","-"
"9319","getContentEnd","/**
     * Gets the content end text.
     *
     * @return the current content end text
     */
    protected String getContentEnd()","0","-","-","-","-"
"9320","getContentStart","/**
     * Gets the content start text.
     *
     * @return the current content start text
     */
    protected String getContentStart()","0","-","-","-","-"
"9321","getFieldNameValueSeparator","/**
     * Gets the field name value separator text.
     *
     * @return the current field name value separator text
     */
    protected String getFieldNameValueSeparator()","0","-","-","-","-"
"9322","getFieldSeparator","/**
     * Gets the field separator text.
     *
     * @return the current field separator text
     */
    protected String getFieldSeparator()","0","-","-","-","-"
"9323","getNullText","/**
     * Gets the text to output when","0","-","-","-","-"
"9324","getShortClassName","/**
     * Gets the short class name for a class.
     *
     * <p>The short class name is the class name excluding
     * the package name.</p>
     *
     * @param cls  the","0","-","-","-","-"
"9325","getSizeEndText","/**
     * Gets the end text to output when a","0","-","-","-","-"
"9326","getSizeStartText","/**
     * Gets the start text to output when a","0","-","-","-","-"
"9327","getSummaryObjectEndText","/**
     * Gets the end text to output when an","0","-","-","-","-"
"9328","getSummaryObjectStartText","/**
     * Gets the start text to output when an","0","-","-","-","-"
"9329","isArrayContentDetail","/**
     * Gets whether to output array content detail.
     *
     * @return the current array content detail setting
     */
    protected boolean isArrayContentDetail()","0","-","-","-","-"
"9330","isDefaultFullDetail","/**
     * Gets whether to use full detail when the caller doesn't
     * specify.
     *
     * @return the current defaultFullDetail flag
     */
    protected boolean isDefaultFullDetail()","0","-","-","-","-"
"9331","isFieldSeparatorAtEnd","/**
     * Gets whether the field separator should be added at the end
     * of each buffer.
     *
     * @return fieldSeparatorAtEnd flag
     * @since 2.0
     */
    protected boolean isFieldSeparatorAtEnd()","0","-","-","-","-"
"9332","isFieldSeparatorAtStart","/**
     * Gets whether the field separator should be added at the start
     * of each buffer.
     *
     * @return the fieldSeparatorAtStart flag
     * @since 2.0
     */
    protected boolean isFieldSeparatorAtStart()","0","-","-","-","-"
"9333","isFullDetail","/**
     * Is this field to be output in full detail.
     *
     * <p>This method converts a detail request into a detail level.
     * The calling code may request full detail (","0","-","-","-","-"
"9334","isUseClassName","/**
     * Gets whether to use the class name.
     *
     * @return the current useClassName flag
     */
    protected boolean isUseClassName()","0","-","-","-","-"
"9335","isUseFieldNames","/**
     * Gets whether to use the field names passed in.
     *
     * @return the current useFieldNames flag
     */
    protected boolean isUseFieldNames()","0","-","-","-","-"
"9336","isUseIdentityHashCode","/**
     * Gets whether to use the identity hash code.
     *
     * @return the current useIdentityHashCode flag
     */
    protected boolean isUseIdentityHashCode()","0","-","-","-","-"
"9337","isUseShortClassName","/**
     * Gets whether to output short or long class names.
     *
     * @return the current useShortClassName flag
     * @since 2.0
     */
    protected boolean isUseShortClassName()","0","-","-","-","-"
"9338","reflectionAppendArrayDetail","/**
     * Appends to the","0","-","-","-","-"
"9339","removeLastFieldSeparator","/**
     * Remove the last field separator from the buffer.
     *
     * @param buffer  the","0","-","-","-","-"
"9340","setArrayContentDetail","/**
     * Sets whether to output array content detail.
     *
     * @param arrayContentDetail  the new arrayContentDetail flag
     */
    protected void setArrayContentDetail(final boolean arrayContentDetail)","0","-","-","-","-"
"9341","setArrayEnd","/**
     * Sets the array end text.
     *
     * <p>","0","-","-","-","-"
"9342","setArraySeparator","/**
     * Sets the array separator text.
     *
     * <p>","0","-","-","-","-"
"9343","setArrayStart","/**
     * Sets the array start text.
     *
     * <p>","0","-","-","-","-"
"9344","setContentEnd","/**
     * Sets the content end text.
     *
     * <p>","0","-","-","-","-"
"9345","setContentStart","/**
     * Sets the content start text.
     *
     * <p>","0","-","-","-","-"
"9346","setDefaultFullDetail","/**
     * Sets whether to use full detail when the caller doesn't
     * specify.
     *
     * @param defaultFullDetail  the new defaultFullDetail flag
     */
    protected void setDefaultFullDetail(final boolean defaultFullDetail)","0","-","-","-","-"
"9347","setFieldNameValueSeparator","/**
     * Sets the field name value separator text.
     *
     * <p>","0","-","-","-","-"
"9348","setFieldSeparator","/**
     * Sets the field separator text.
     *
     * <p>","0","-","-","-","-"
"9349","setFieldSeparatorAtEnd","/**
     * Sets whether the field separator should be added at the end
     * of each buffer.
     *
     * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag
     * @since 2.0
     */
    protected void setFieldSeparatorAtEnd(final boolean fieldSeparatorAtEnd)","0","-","-","-","-"
"9350","setFieldSeparatorAtStart","/**
     * Sets whether the field separator should be added at the start
     * of each buffer.
     *
     * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag
     * @since 2.0
     */
    protected void setFieldSeparatorAtStart(final boolean fieldSeparatorAtStart)","0","-","-","-","-"
"9351","setNullText","/**
     * Sets the text to output when","0","-","-","-","-"
"9352","setSizeEndText","/**
     * Sets the end text to output when a","0","-","-","-","-"
"9353","setSizeStartText","/**
     * Sets the start text to output when a","0","-","-","-","-"
"9354","setSummaryObjectEndText","/**
     * Sets the end text to output when an","0","-","-","-","-"
"9355","setSummaryObjectStartText","/**
     * Sets the start text to output when an","0","-","-","-","-"
"9356","setUseClassName","/**
     * Sets whether to use the class name.
     *
     * @param useClassName  the new useClassName flag
     */
    protected void setUseClassName(final boolean useClassName)","0","-","-","-","-"
"9357","setUseFieldNames","/**
     * Sets whether to use the field names passed in.
     *
     * @param useFieldNames  the new useFieldNames flag
     */
    protected void setUseFieldNames(final boolean useFieldNames)","0","-","-","-","-"
"9358","setUseIdentityHashCode","/**
     * Sets whether to use the identity hash code.
     *
     * @param useIdentityHashCode  the new useIdentityHashCode flag
     */
    protected void setUseIdentityHashCode(final boolean useIdentityHashCode)","0","-","-","-","-"
"9359","setUseShortClassName","/**
     * Sets whether to output short or long class names.
     *
     * @param useShortClassName  the new useShortClassName flag
     * @since 2.0
     */
    protected void setUseShortClassName(final boolean useShortClassName)","0","-","-","-","-"
"9360","getRegistry","/**
     * Returns the registry of objects being traversed by the reflection methods in the current thread.
     *
     * @return Set the registry of objects being traversed
     * @since 2.3
     */
    static Set<IDKey> getRegistry()","0","-","-","-","-"
"9361","isRegistered","/**
     * Returns","0","-","-","-","-"
"9362","reflectionAppend","/**
     * Appends the fields and values defined by the given object of the given","0","-","-","-","-"
"9363","reflectionHashCode","/**
     * Uses reflection to build a valid hash code from the fields of","0","-","-","-","-"
"9364","reflectionHashCode","/**
     * Uses reflection to build a valid hash code from the fields of","0","-","-","-","-"
"9365","reflectionHashCode","/**
     * Uses reflection to build a valid hash code from the fields of","0","-","-","-","-"
"9366","reflectionHashCode","/**
     * Uses reflection to build a valid hash code from the fields of","0","-","-","-","-"
"9367","reflectionHashCode","/**
     * Uses reflection to build a valid hash code from the fields of","0","-","-","-","-"
"9368","reflectionHashCode","/**
     * Uses reflection to build a valid hash code from the fields of","0","-","-","-","-"
"9369","register","/**
     * Registers the given object. Used by the reflection methods to avoid infinite loops.
     *
     * @param value
     *            The object to register.
     */
    private static void register(final Object value)","0","-","-","-","-"
"9370","unregister","/**
     * Unregisters the given object.
     *
     * <p>
     * Used by the reflection methods to avoid infinite loops.
     * </p>
     *
     * @param value
     *            The object to unregister.
     * @since 2.3
     */
    private static void unregister(final Object value)","0","-","-","-","-"
"9371","HashCodeBuilder","/**
     * Uses two hard coded choices for the constants needed to build a","0","-","-","-","-"
"9372","HashCodeBuilder","/**
     * Two randomly chosen, odd numbers must be passed in. Ideally these should be different for each class,
     * however this is not vital.
     *
     * <p>
     * Prime numbers are preferred, especially for the multiplier.
     * </p>
     *
     * @param initialOddNumber
     *            an odd number used as the initial value
     * @param multiplierOddNumber
     *            an odd number used as the multiplier
     * @throws IllegalArgumentException
     *             if the number is even
     */
    public HashCodeBuilder(final int initialOddNumber, final int multiplierOddNumber)","0","-","-","-","-"
"9373","append","/**
     * Append a","0","-","-","-","-"
"9374","append","/**
     * Append a","0","-","-","-","-"
"9375","append","/**
     * Append a","0","-","-","-","-"
"9376","append","/**
     * Append a","0","-","-","-","-"
"9377","append","/**
     * Append a","0","-","-","-","-"
"9378","append","/**
     * Append a","0","-","-","-","-"
"9379","append","/**
     * Append a","0","-","-","-","-"
"9380","append","/**
     * Append a","0","-","-","-","-"
"9381","append","/**
     * Append a","0","-","-","-","-"
"9382","append","/**
     * Append a","0","-","-","-","-"
"9383","append","/**
     * Append a","0","-","-","-","-"
"9384","append","/**
     * Append a","0","-","-","-","-"
"9385","append","/**
     * Append a","0","-","-","-","-"
"9386","append","/**
     * Append a","0","-","-","-","-"
"9387","append","/**
     * Append a","0","-","-","-","-"
"9388","append","/**
     * Append a","0","-","-","-","-"
"9389","append","/**
     * Append a","0","-","-","-","-"
"9390","append","/**
     * Append a","0","-","-","-","-"
"9391","appendArray","/**
     * Append a","0","-","-","-","-"
"9392","appendSuper","/**
     * Adds the result of super.hashCode() to this builder.
     *
     * @param superHashCode
     *            the result of calling","0","-","-","-","-"
"9393","build","/**
     * Returns the computed","0","-","-","-","-"
"9394","equals","/**
     * Implements equals using the hash code.
     *
     * @since 3.13.0
     */
    @Override
    public boolean equals(final Object obj)","0","-","-","-","-"
"9395","hashCode","/**
     * The computed","0","-","-","-","-"
"9396","toHashCode","/**
     * Returns the computed","0","-","-","-","-"
"9397","reflectionAppend","/**
     * Appends to","0","-","-","-","-"
"9398","reflectionCompare","/**
     * Compares two","0","-","-","-","-"
"9399","reflectionCompare","/**
     * Compares two","0","-","-","-","-"
"9400","reflectionCompare","/**
     * Compares two","0","-","-","-","-"
"9401","reflectionCompare","/**
     * Compares two","0","-","-","-","-"
"9402","reflectionCompare","/**
     * Compares two","0","-","-","-","-"
"9403","CompareToBuilder","/**
     * Constructor for CompareToBuilder.
     *
     * <p>Starts off assuming that the objects are equal. Multiple calls are
     * then made to the various append methods, followed by a call to
     *","0","-","-","-","-"
"9404","append","/**
     * Appends to the","0","-","-","-","-"
"9405","append","/**
     * Appends to the","0","-","-","-","-"
"9406","append","/**
     * Appends to the","0","-","-","-","-"
"9407","append","/**
     * Appends to the","0","-","-","-","-"
"9408","append","/**
     * Appends to the","0","-","-","-","-"
"9409","append","/**
     * Appends to the","0","-","-","-","-"
"9410","append","/**
     * Appends to the","0","-","-","-","-"
"9411","append","/**
     * Appends to the","0","-","-","-","-"
"9412","append","/**
     * Appends to the","0","-","-","-","-"
"9413","append","/**
     * Appends to the","0","-","-","-","-"
"9414","append","/**
     * Appends to the","0","-","-","-","-"
"9415","append","/**
     * Appends to the","0","-","-","-","-"
"9416","append","/**
     * Appends to the","0","-","-","-","-"
"9417","append","/**
     * Appends to the","0","-","-","-","-"
"9418","append","/**
     * Appends to the","0","-","-","-","-"
"9419","append","/**
     * Appends to the","0","-","-","-","-"
"9420","append","/**
     * Appends to the","0","-","-","-","-"
"9421","append","/**
     * Appends to the","0","-","-","-","-"
"9422","append","/**
     * Appends to the","0","-","-","-","-"
"9423","append","/**
     * Appends to the","0","-","-","-","-"
"9424","appendArray","private void appendArray(final Object lhs, final Object rhs, final Comparator<?> comparator)","0","-","-","-","-"
"9425","appendSuper","/**
     * Appends to the","0","-","-","-","-"
"9426","build","/**
     * Returns a negative Integer, a positive Integer, or zero as
     * the","0","-","-","-","-"
"9427","toComparison","/**
     * Returns a negative integer, a positive integer, or zero as
     * the","0","-","-","-","-"
"9428","DiffResult","/**
     * Creates a","0","-","-","-","-"
"9429","getDiffs","/**
     * Returns an unmodifiable list of","0","-","-","-","-"
"9430","getLeft","/**
     * Returns the object the right object has been compared to.
     *
     * @return the left object of the diff
     * @since 3.10
     */
    public T getLeft()","0","-","-","-","-"
"9431","getNumberOfDiffs","/**
     * Returns the number of differences between the two objects.
     *
     * @return the number of differences
     */
    public int getNumberOfDiffs()","0","-","-","-","-"
"9432","getRight","/**
     * Returns the object the left object has been compared to.
     *
     * @return the right object of the diff
     * @since 3.10
     */
    public T getRight()","0","-","-","-","-"
"9433","getToStringStyle","/**
     * Returns the style used by the","0","-","-","-","-"
"9434","iterator","/**
     * Returns an iterator over the","0","-","-","-","-"
"9435","toString","/**
     * Builds a","0","-","-","-","-"
"9436","toString","/**
     * Builds a","0","-","-","-","-"
"9437","Builder","/**
         * Constructs a new instance.
         */
        public Builder()","0","-","-","-","-"
"9438","build","/**
         * Builds a new configured","0","-","-","-","-"
"9439","setLeft","/**
         * Sets the left object.
         *
         * @param left the left object.
         * @return","0","-","-","-","-"
"9440","setRight","/**
         * Sets the right object.
         *
         * @param right the left object.
         * @return","0","-","-","-","-"
"9441","setStyle","/**
         * Sets the style will to use when outputting the objects,","0","-","-","-","-"
"9442","setTestObjectsEquals","/**
         * Sets whether to test if left and right are the same or equal. All of the append(fieldName, left, right) methods will abort without creating a field
         *","0","-","-","-","-"
"9443","setToStringFormat","/**
         * Sets the two-argument format string for","0","-","-","-","-"
"9444","SDiff","private SDiff(final String fieldName, final SerializableSupplier<T> leftSupplier, final SerializableSupplier<T> rightSupplier, final Class<T> type)","0","-","-","-","-"
"9445","getLeft","@Override
        public T getLeft()","0","-","-","-","-"
"9446","getRight","@Override
        public T getRight()","0","-","-","-","-"
"9447","builder","/**
     * Constructs a new","0","-","-","-","-"
"9448","DiffBuilder","/**
     * Constructs a builder for the specified objects with the specified style.
     *
     * <p>
     * If","0","-","-","-","-"
"9449","DiffBuilder","/**
     * Constructs a builder for the specified objects with the specified style.
     *
     * <p>
     * If","0","-","-","-","-"
"9450","DiffBuilder","private DiffBuilder(final T left, final T right, final ToStringStyle style, final boolean testObjectsEquals, final String toStringFormat)","0","-","-","-","-"
"9451","add","private <F> DiffBuilder<T> add(final String fieldName, final SerializableSupplier<F> left, final SerializableSupplier<F> right, final Class<F> type)","0","-","-","-","-"
"9452","append","/**
     * Tests if two","0","-","-","-","-"
"9453","append","/**
     * Tests if two","0","-","-","-","-"
"9454","append","/**
     * Tests if two","0","-","-","-","-"
"9455","append","/**
     * Tests if two","0","-","-","-","-"
"9456","append","/**
     * Tests if two","0","-","-","-","-"
"9457","append","/**
     * Tests if two","0","-","-","-","-"
"9458","append","/**
     * Appends diffs from another","0","-","-","-","-"
"9459","append","/**
     * Tests if two","0","-","-","-","-"
"9460","append","/**
     * Tests if two","0","-","-","-","-"
"9461","append","/**
     * Test if two","0","-","-","-","-"
"9462","append","/**
     * Tests if two","0","-","-","-","-"
"9463","append","/**
     * Tests if two","0","-","-","-","-"
"9464","append","/**
     * Tests if two","0","-","-","-","-"
"9465","append","/**
     * Tests if two","0","-","-","-","-"
"9466","append","/**
     * Tests if two","0","-","-","-","-"
"9467","append","/**
     * Tests if two","0","-","-","-","-"
"9468","append","/**
     * Tests if two","0","-","-","-","-"
"9469","append","/**
     * Tests if two","0","-","-","-","-"
"9470","append","/**
     * Tests if two","0","-","-","-","-"
"9471","build","/**
     * Builds a","0","-","-","-","-"
"9472","getLeft","/**
     * Gets the left object.
     *
     * @return the left object.
     */
    T getLeft()","0","-","-","-","-"
"9473","getRight","/**
     * Gets the right object.
     *
     * @return the right object.
     */
    T getRight()","0","-","-","-","-"
"9474","diff","/**
     * Retrieves a list of the differences between
     * this object and the supplied object.
     *
     * @param obj the object to diff against, can be","0","-","-","-","-"
"9475","Builder","/**
         * Constructs a new instance.
         */
        public Builder()","0","-","-","-","-"
"9476","build","/**
         * Builds a new configured","0","-","-","-","-"
"9477","setDiffBuilder","/**
         * Sets the DiffBuilder.
         *
         * @param diffBuilder the DiffBuilder.
         * @return","0","-","-","-","-"
"9478","setExcludeFieldNames","/**
         * Sets field names to exclude from output. Intended for fields like","0","-","-","-","-"
"9479","builder","/**
     * Constructs a new","0","-","-","-","-"
"9480","toExcludeFieldNames","private static String[] toExcludeFieldNames(final String[] excludeFieldNames)","0","-","-","-","-"
"9481","ReflectionDiffBuilder","private ReflectionDiffBuilder(final DiffBuilder<T> diffBuilder, final String[] excludeFieldNames)","0","-","-","-","-"
"9482","ReflectionDiffBuilder","/**
     * Constructs a builder for the specified objects with the specified style.
     *
     * <p>
     * If","0","-","-","-","-"
"9483","accept","private boolean accept(final Field field)","0","-","-","-","-"
"9484","appendFields","/**
     * Appends fields using reflection.
     *
     * @throws SecurityException if an underlying accessible object's method denies the request.
     * @see SecurityManager#checkPermission
     */
    private void appendFields(final Class<?> clazz)","0","-","-","-","-"
"9485","build","/**
     *","0","-","-","-","-"
"9486","getExcludeFieldNames","/**
     * Gets the field names that should be excluded from the diff.
     *
     * @return the excludeFieldNames.
     * @since 3.13.0
     */
    public String[] getExcludeFieldNames()","0","-","-","-","-"
"9487","getLeft","private T getLeft()","0","-","-","-","-"
"9488","getRight","private T getRight()","0","-","-","-","-"
"9489","readField","/**
     * Reads a","0","-","-","-","-"
"9490","setExcludeFieldNames","/**
     * Sets the field names to exclude.
     *
     * @param excludeFieldNames The field names to exclude from the diff or","0","-","-","-","-"
"9491","getDefaultStyle","/**
     * Gets the default","0","-","-","-","-"
"9492","reflectionToString","/**
     * Uses","0","-","-","-","-"
"9493","reflectionToString","/**
     * Uses","0","-","-","-","-"
"9494","reflectionToString","/**
     * Uses","0","-","-","-","-"
"9495","reflectionToString","/**
     * Uses","0","-","-","-","-"
"9496","setDefaultStyle","/**
     * Sets the default","0","-","-","-","-"
"9497","ToStringBuilder","/**
     * Constructs a builder for the specified object using the default output style.
     *
     * <p>This default style is obtained from","0","-","-","-","-"
"9498","ToStringBuilder","/**
     * Constructs a builder for the specified object using the defined output style.
     *
     * <p>If the style is","0","-","-","-","-"
"9499","ToStringBuilder","/**
     * Constructs a builder for the specified object.
     *
     * <p>If the style is","0","-","-","-","-"
"9500","append","/**
     * Append to the","0","-","-","-","-"
"9501","append","/**
     * Append to the","0","-","-","-","-"
"9502","append","/**
     * Append to the","0","-","-","-","-"
"9503","append","/**
     * Append to the","0","-","-","-","-"
"9504","append","/**
     * Append to the","0","-","-","-","-"
"9505","append","/**
     * Append to the","0","-","-","-","-"
"9506","append","/**
     * Append to the","0","-","-","-","-"
"9507","append","/**
     * Append to the","0","-","-","-","-"
"9508","append","/**
     * Append to the","0","-","-","-","-"
"9509","append","/**
     * Append to the","0","-","-","-","-"
"9510","append","/**
     * Append to the","0","-","-","-","-"
"9511","append","/**
     * Append to the","0","-","-","-","-"
"9512","append","/**
     * Append to the","0","-","-","-","-"
"9513","append","/**
     * Append to the","0","-","-","-","-"
"9514","append","/**
     * Append to the","0","-","-","-","-"
"9515","append","/**
     * Append to the","0","-","-","-","-"
"9516","append","/**
     * Append to the","0","-","-","-","-"
"9517","append","/**
     * Append to the","0","-","-","-","-"
"9518","append","/**
     * Append to the","0","-","-","-","-"
"9519","append","/**
     * Append to the","0","-","-","-","-"
"9520","append","/**
     * Append to the","0","-","-","-","-"
"9521","append","/**
     * Append to the","0","-","-","-","-"
"9522","append","/**
     * Append to the","0","-","-","-","-"
"9523","append","/**
     * Append to the","0","-","-","-","-"
"9524","append","/**
     * Append to the","0","-","-","-","-"
"9525","append","/**
     * Append to the","0","-","-","-","-"
"9526","append","/**
     * Append to the","0","-","-","-","-"
"9527","append","/**
     * Append to the","0","-","-","-","-"
"9528","append","/**
     * Append to the","0","-","-","-","-"
"9529","append","/**
     * Append to the","0","-","-","-","-"
"9530","append","/**
     * Append to the","0","-","-","-","-"
"9531","append","/**
     * Append to the","0","-","-","-","-"
"9532","append","/**
     * Append to the","0","-","-","-","-"
"9533","append","/**
     * Append to the","0","-","-","-","-"
"9534","append","/**
     * Append to the","0","-","-","-","-"
"9535","append","/**
     * Append to the","0","-","-","-","-"
"9536","append","/**
     * Append to the","0","-","-","-","-"
"9537","append","/**
     * Append to the","0","-","-","-","-"
"9538","append","/**
     * Append to the","0","-","-","-","-"
"9539","append","/**
     * Append to the","0","-","-","-","-"
"9540","append","/**
     * Append to the","0","-","-","-","-"
"9541","append","/**
     * Append to the","0","-","-","-","-"
"9542","append","/**
     * Append to the","0","-","-","-","-"
"9543","append","/**
     * Append to the","0","-","-","-","-"
"9544","append","/**
     * Append to the","0","-","-","-","-"
"9545","append","/**
     * Append to the","0","-","-","-","-"
"9546","appendAsObjectToString","/**
     * Appends with the same format as the default","0","-","-","-","-"
"9547","appendSuper","/**
     * Append the","0","-","-","-","-"
"9548","appendToString","/**
     * Append the","0","-","-","-","-"
"9549","build","/**
     * Returns the String that was build as an object representation. The
     * default implementation utilizes the","0","-","-","-","-"
"9550","getObject","/**
     * Returns the","0","-","-","-","-"
"9551","getStringBuffer","/**
     * Gets the","0","-","-","-","-"
"9552","getStyle","/**
     * Gets the","0","-","-","-","-"
"9553","toString","/**
     * Returns the built","0","-","-","-","-"
"9554","Diff","/**
     * Constructs a new","0","-","-","-","-"
"9555","Diff","Diff(final String fieldName, final Type type)","0","-","-","-","-"
"9556","getFieldName","/**
     * Gets the name of the field.
     *
     * @return the field name
     */
    public final String getFieldName()","0","-","-","-","-"
"9557","getType","/**
     * Gets the type of the field.
     *
     * @return the field type
     * @deprecated Unused, will be removed in 4.0.0.
     */
    @Deprecated
    public final Type getType()","0","-","-","-","-"
"9558","setValue","/**
     * Throws","0","-","-","-","-"
"9559","toString","/**
     * Returns a","0","-","-","-","-"
"9560","MultilineRecursiveToStringStyle","/**
     * Constructs a new instance.
     */
    public MultilineRecursiveToStringStyle()","0","-","-","-","-"
"9561","appendDetail","@Override
    protected void appendDetail(final StringBuffer buffer, final String fieldName, final boolean[] array)","0","-","-","-","-"
"9562","appendDetail","@Override
    protected void appendDetail(final StringBuffer buffer, final String fieldName, final byte[] array)","0","-","-","-","-"
"9563","appendDetail","@Override
    protected void appendDetail(final StringBuffer buffer, final String fieldName, final char[] array)","0","-","-","-","-"
"9564","appendDetail","@Override
    protected void appendDetail(final StringBuffer buffer, final String fieldName, final double[] array)","0","-","-","-","-"
"9565","appendDetail","@Override
    protected void appendDetail(final StringBuffer buffer, final String fieldName, final float[] array)","0","-","-","-","-"
"9566","appendDetail","@Override
    protected void appendDetail(final StringBuffer buffer, final String fieldName, final int[] array)","0","-","-","-","-"
"9567","appendDetail","@Override
    protected void appendDetail(final StringBuffer buffer, final String fieldName, final long[] array)","0","-","-","-","-"
"9568","appendDetail","@Override
    public void appendDetail(final StringBuffer buffer, final String fieldName, final Object value)","0","-","-","-","-"
"9569","appendDetail","@Override
    protected void appendDetail(final StringBuffer buffer, final String fieldName, final Object[] array)","0","-","-","-","-"
"9570","appendDetail","@Override
    protected void appendDetail(final StringBuffer buffer, final String fieldName, final short[] array)","0","-","-","-","-"
"9571","reflectionAppendArrayDetail","@Override
    protected void reflectionAppendArrayDetail(final StringBuffer buffer, final String fieldName, final Object array)","0","-","-","-","-"
"9572","resetIndent","/**
     * Resets the fields responsible for the line breaks and indenting.
     * Must be invoked after changing the","0","-","-","-","-"
"9573","spacer","/**
     * Creates a StringBuilder responsible for the indenting.
     *
     * @param spaces how far to indent
     * @return a StringBuilder with","0","-","-","-","-"
"9574","getRegisterPair","/**
     * Converters value pair into a register pair.
     *
     * @param lhs","0","-","-","-","-"
"9575","getRegistry","/**
     * Returns the registry of object pairs being traversed by the reflection
     * methods in the current thread.
     *
     * @return Set the registry of objects being traversed
     * @since 3.0
     */
    static Set<Pair<IDKey, IDKey>> getRegistry()","0","-","-","-","-"
"9576","isRegistered","/**
     * Returns","0","-","-","-","-"
"9577","reflectionEquals","/**
     * This method uses reflection to determine if the two","0","-","-","-","-"
"9578","reflectionEquals","/**
     * This method uses reflection to determine if the two","0","-","-","-","-"
"9579","reflectionEquals","/**
     * This method uses reflection to determine if the two","0","-","-","-","-"
"9580","reflectionEquals","/**
     * This method uses reflection to determine if the two","0","-","-","-","-"
"9581","reflectionEquals","/**
     * This method uses reflection to determine if the two","0","-","-","-","-"
"9582","register","/**
     * Registers the given object pair.
     * Used by the reflection methods to avoid infinite loops.
     *
     * @param lhs","0","-","-","-","-"
"9583","unregister","/**
     * Unregisters the given object pair.
     *
     * <p>
     * Used by the reflection methods to avoid infinite loops.
     * </p>
     *
     * @param lhs","0","-","-","-","-"
"9584","EqualsBuilder","/**
     * Constructor for EqualsBuilder.
     *
     * <p>Starts off assuming that equals is","0","-","-","-","-"
"9585","append","/**
     * Test if two","0","-","-","-","-"
"9586","append","/**
     * Deep comparison of array of","0","-","-","-","-"
"9587","append","/**
     * Test if two","0","-","-","-","-"
"9588","append","/**
     * Deep comparison of array of","0","-","-","-","-"
"9589","append","/**
     * Test if two","0","-","-","-","-"
"9590","append","/**
     * Deep comparison of array of","0","-","-","-","-"
"9591","append","/**
     * Test if two","0","-","-","-","-"
"9592","append","/**
     * Deep comparison of array of","0","-","-","-","-"
"9593","append","/**
     * Test if two","0","-","-","-","-"
"9594","append","/**
     * Deep comparison of array of","0","-","-","-","-"
"9595","append","/**
     * Test if two","0","-","-","-","-"
"9596","append","/**
     * Deep comparison of array of","0","-","-","-","-"
"9597","append","/**
     * Test if two","0","-","-","-","-"
"9598","append","/**
     * Deep comparison of array of","0","-","-","-","-"
"9599","append","/**
     * Test if two","0","-","-","-","-"
"9600","append","/**
     * Performs a deep comparison of two","0","-","-","-","-"
"9601","append","/**
     * Test if two","0","-","-","-","-"
"9602","append","/**
     * Deep comparison of array of","0","-","-","-","-"
"9603","appendArray","/**
     * Test if an","0","-","-","-","-"
"9604","appendSuper","/**
     * Adds the result of","0","-","-","-","-"
"9605","build","/**
     * Returns","0","-","-","-","-"
"9606","isEquals","/**
     * Returns","0","-","-","-","-"
"9607","reflectionAppend","/**
     * Tests if two","0","-","-","-","-"
"9608","reflectionAppend","/**
     * Appends the fields and values defined by the given object of the
     * given Class.
     *
     * @param lhs  the left-hand side object
     * @param rhs  the right-hand side object
     * @param clazz  the class to append details of
     */
    private void reflectionAppend(
        final Object lhs,
        final Object rhs,
        final Class<?> clazz)","0","-","-","-","-"
"9609","reset","/**
     * Reset the EqualsBuilder so you can use the same object again.
     *
     * @since 2.5
     */
    public void reset()","0","-","-","-","-"
"9610","setBypassReflectionClasses","/**
     * Sets","0","-","-","-","-"
"9611","setEquals","/**
     * Sets the","0","-","-","-","-"
"9612","setExcludeFields","/**
     * Sets field names to be excluded by reflection tests.
     *
     * @param excludeFields the fields to exclude
     * @return","0","-","-","-","-"
"9613","setReflectUpToClass","/**
     * Sets the superclass to reflect up to at reflective tests.
     *
     * @param reflectUpToClass the super class to reflect up to
     * @return","0","-","-","-","-"
"9614","setTestRecursive","/**
     * Sets whether to test fields recursively, instead of using their equals method, when reflectively comparing objects.
     * String objects, which cache a hash value, are automatically excluded from recursive testing.
     * You may specify other exceptions by calling","0","-","-","-","-"
"9615","setTestTransients","/**
     * Sets whether to include transient fields when reflectively comparing objects.
     *
     * @param testTransients whether to test transient fields
     * @return","0","-","-","-","-"
"9616","IDKey","/**
     * Constructs new instance.
     *
     * @param value The value
     */
    IDKey(final Object value)","0","-","-","-","-"
"9617","equals","/**
     * Tests if instances are equal.
     *
     * @param other The other object to compare to
     * @return if the instances are for the same object
     */
    @Override
    public boolean equals(final Object other)","0","-","-","-","-"
"9618","hashCode","/**
     * Gets the hash code, the system identity hash code.
     *
     * @return the hash code.
     */
    @Override
    public int hashCode()","0","-","-","-","-"
"9619","AlwaysTruePredicate","private AlwaysTruePredicate()","0","-","-","-","-"
"9620","test","@Override
        public boolean test(final Thread thread)","0","-","-","-","-"
"9621","test","@Override
        public boolean test(final ThreadGroup threadGroup)","0","-","-","-","-"
"9622","NamePredicate","/**
         * Constructs an instance.
         *
         * @param name thread or thread group name
         * @throws NullPointerException if the name is","0","-","-","-","-"
"9623","test","@Override
        public boolean test(final Thread thread)","0","-","-","-","-"
"9624","test","@Override
        public boolean test(final ThreadGroup threadGroup)","0","-","-","-","-"
"9625","test","/**
         * Evaluates this predicate on the given thread group.
         * @param threadGroup the thread group
         * @return","0","-","-","-","-"
"9626","ThreadIdPredicate","/**
         * Predicate constructor
         *
         * @param threadId the threadId to match
         * @throws IllegalArgumentException if the threadId is zero or negative
         */
        public ThreadIdPredicate(final long threadId)","0","-","-","-","-"
"9627","test","@Override
        public boolean test(final Thread thread)","0","-","-","-","-"
"9628","test","/**
         * Evaluates this predicate on the given thread.
         * @param thread the thread
         * @return","0","-","-","-","-"
"9629","findThreadById","/**
     * Finds the active thread with the specified id.
     *
     * @param threadId The thread id
     * @return The thread with the specified id or","0","-","-","-","-"
"9630","findThreadById","/**
     * Finds the active thread with the specified id if it belongs to a thread group with the specified group name.
     *
     * @param threadId The thread id
     * @param threadGroupName The thread group name
     * @return The threads which belongs to a thread group with the specified group name and the thread's id match the specified id.
     *","0","-","-","-","-"
"9631","findThreadById","/**
     * Finds the active thread with the specified id if it belongs to the specified thread group.
     *
     * @param threadId The thread id
     * @param threadGroup The thread group
     * @return The thread which belongs to a specified thread group and the thread's id match the specified id.
     *","0","-","-","-","-"
"9632","findThreadGroups","/**
     * Finds all active thread groups which match the given predicate.
     *
     * @param predicate the predicate
     * @return An unmodifiable","0","-","-","-","-"
"9633","findThreadGroups","/**
     * Finds all active thread groups which match the given predicate and which is a subgroup of the given thread group (or one of its subgroups).
     *
     * @param threadGroup the thread group
     * @param recurse if","0","-","-","-","-"
"9634","findThreadGroups","/**
     * Finds all active thread groups which match the given predicate and which is a subgroup of the given thread group (or one of its subgroups).
     *
     * @param threadGroup the thread group
     * @param recurse if","0","-","-","-","-"
"9635","findThreadGroups","/**
     * Finds all active thread groups which match the given predicate.
     *
     * @param predicate the predicate
     * @return An unmodifiable","0","-","-","-","-"
"9636","findThreadGroupsByName","/**
     * Finds active thread groups with the specified group name.
     *
     * @param threadGroupName The thread group name
     * @return the thread groups with the specified group name or an empty collection if no such thread group exists. The collection returned is always unmodifiable.
     * @throws NullPointerException if group name is null
     * @throws  SecurityException
     *          if the current thread cannot access the system thread group
     *
     * @throws  SecurityException  if the current thread cannot modify
     *          thread groups from this thread's thread group up to the system thread group
     */
    public static Collection<ThreadGroup> findThreadGroupsByName(final String threadGroupName)","0","-","-","-","-"
"9637","findThreads","/**
     * Finds all active threads which match the given predicate.
     *
     * @param predicate the predicate
     * @return An unmodifiable","0","-","-","-","-"
"9638","findThreads","/**
     * Finds all active threads which match the given predicate and which belongs to the given thread group (or one of its subgroups).
     *
     * @param threadGroup the thread group
     * @param recurse if","0","-","-","-","-"
"9639","findThreads","/**
     * Finds all active threads which match the given predicate and which belongs to the given thread group (or one of its subgroups).
     *
     * @param threadGroup the thread group
     * @param recurse if","0","-","-","-","-"
"9640","findThreads","/**
     * Finds all active threads which match the given predicate.
     *
     * @param predicate the predicate
     * @return An unmodifiable","0","-","-","-","-"
"9641","findThreadsByName","/**
     * Finds active threads with the specified name.
     *
     * @param threadName The thread name
     * @return The threads with the specified name or an empty collection if no such thread exists. The collection returned is always unmodifiable.
     * @throws NullPointerException if the specified name is null
     * @throws  SecurityException
     *          if the current thread cannot access the system thread group
     *
     * @throws  SecurityException  if the current thread cannot modify
     *          thread groups from this thread's thread group up to the system thread group
     */
    public static Collection<Thread> findThreadsByName(final String threadName)","0","-","-","-","-"
"9642","findThreadsByName","/**
     * Finds active threads with the specified name if they belong to a thread group with the specified group name.
     *
     * @param threadName The thread name
     * @param threadGroupName The thread group name
     * @return The threads which belongs to a thread group with the specified group name and the thread's name match the specified name,
     * An empty collection is returned if no such thread exists. The collection returned is always unmodifiable.
     * @throws NullPointerException if the specified thread name or group name is null
     * @throws  SecurityException
     *          if the current thread cannot access the system thread group
     *
     * @throws  SecurityException  if the current thread cannot modify
     *          thread groups from this thread's thread group up to the system thread group
     */
    public static Collection<Thread> findThreadsByName(final String threadName, final String threadGroupName)","0","-","-","-","-"
"9643","findThreadsByName","/**
     * Finds active threads with the specified name if they belong to a specified thread group.
     *
     * @param threadName The thread name
     * @param threadGroup The thread group
     * @return The threads which belongs to a thread group and the thread's name match the specified name,
     * An empty collection is returned if no such thread exists. The collection returned is always unmodifiable.
     * @throws NullPointerException if the specified thread name or group is null
     * @throws  SecurityException
     *          if the current thread cannot access the system thread group
     *
     * @throws  SecurityException  if the current thread cannot modify
     *          thread groups from this thread's thread group up to the system thread group
     */
    public static Collection<Thread> findThreadsByName(final String threadName, final ThreadGroup threadGroup)","0","-","-","-","-"
"9644","getAllThreadGroups","/**
     * Gets all active thread groups excluding the system thread group (A thread group is active if it has been not destroyed).
     *
     * @return all thread groups excluding the system thread group. The collection returned is always unmodifiable.
     * @throws  SecurityException
     *          if the current thread cannot access the system thread group
     *
     * @throws  SecurityException  if the current thread cannot modify
     *          thread groups from this thread's thread group up to the system thread group
     */
    public static Collection<ThreadGroup> getAllThreadGroups()","0","-","-","-","-"
"9645","getAllThreads","/**
     * Gets all active threads (A thread is active if it has been started and has not yet died).
     *
     * @return all active threads. The collection returned is always unmodifiable.
     * @throws  SecurityException
     *          if the current thread cannot access the system thread group
     *
     * @throws  SecurityException  if the current thread cannot modify
     *          thread groups from this thread's thread group up to the system thread group
     */
    public static Collection<Thread> getAllThreads()","0","-","-","-","-"
"9646","getSystemThreadGroup","/**
     * Gets the system thread group (sometimes also referred as ""root thread group"").
     * <p>
     * This method returns null if this thread has died (been stopped).
     * </p>
     *
     * @return the system thread group
     * @throws SecurityException if the current thread cannot modify thread groups from this thread's thread group up to the
     *         system thread group
     */
    public static ThreadGroup getSystemThreadGroup()","0","-","-","-","-"
"9647","join","/**
     * Waits for the given thread to die for the given duration. Implemented using","0","-","-","-","-"
"9648","namePredicate","private static <T> Predicate<T> namePredicate(final String name, final Function<T, String> nameGetter)","0","-","-","-","-"
"9649","predicateThread","private static Predicate<Thread> predicateThread(final String threadName)","0","-","-","-","-"
"9650","predicateThreadGroup","private static Predicate<ThreadGroup> predicateThreadGroup(final String threadGroupName)","0","-","-","-","-"
"9651","sleep","/**
     * Sleeps the current thread for the given duration. Implemented using","0","-","-","-","-"
"9652","sleepQuietly","/**
     * Sleeps for the given duration while ignoring","0","-","-","-","-"
"9653","ThreadUtils","/**
     * ThreadUtils instances should NOT be constructed in standard programming. Instead, the class should be used as","0","-","-","-","-"
"9654","CloneFailedException","/**
     * Constructs a CloneFailedException.
     *
     * @param message description of the exception
     */
    public CloneFailedException(final String message)","0","-","-","-","-"
"9655","CloneFailedException","/**
     * Constructs a CloneFailedException.
     *
     * @param message description of the exception
     * @param cause cause of the exception
     */
    public CloneFailedException(final String message, final Throwable cause)","0","-","-","-","-"
"9656","CloneFailedException","/**
     * Constructs a CloneFailedException.
     *
     * @param cause cause of the exception
     */
    public CloneFailedException(final Throwable cause)","0","-","-","-","-"
"9657","addContextValue","/**
     * Adds a contextual label-value pair into this context.
     * <p>
     * The pair will be added to the context, independently of an already
     * existing pair with the same label.
     * </p>
     *
     * @param label  the label of the item to add,","0","-","-","-","-"
"9658","getContextEntries","/**
     * Retrieves the full list of label-value pairs defined in the contextual data.
     *
     * @return the list of pairs, not","0","-","-","-","-"
"9659","getContextLabels","/**
     * Retrieves the full set of labels defined in the contextual data.
     *
     * @return the set of labels, not","0","-","-","-","-"
"9660","getContextValues","/**
     * Retrieves all the contextual data values associated with the label.
     *
     * @param label  the label to get the contextual values for, may be","0","-","-","-","-"
"9661","getFirstContextValue","/**
     * Retrieves the first available contextual data value associated with the label.
     *
     * @param label  the label to get the contextual value for, may be","0","-","-","-","-"
"9662","getFormattedExceptionMessage","/**
     * Gets the contextualized error message based on a base message.
     * This will add the context label-value pairs to the message.
     *
     * @param baseMessage  the base exception message <strong>without</strong> context information appended
     * @return the exception message <strong>with</strong> context information appended, not","0","-","-","-","-"
"9663","setContextValue","/**
     * Sets a contextual label-value pair into this context.
     * <p>
     * The pair will be added normally, but any existing label-value pair with
     * the same label is removed from the context.
     * </p>
     *
     * @param label  the label of the item to add,","0","-","-","-","-"
"9664","UncheckedReflectiveOperationException","/**
     * Constructs an instance initialized to the given","0","-","-","-","-"
"9665","UncheckedException","/**
     * Constructs an instance initialized to the given","0","-","-","-","-"
"9666","asRuntimeException","/**
     * Throws the given (usually checked) exception without adding the exception to the throws
     * clause of the calling method. This method prevents throws clause
     * inflation and reduces the clutter of ""Caused by"" exceptions in the
     * stack trace.
     * <p>
     * The use of this technique may be controversial, but useful.
     * </p>
     * <pre>
     *  // There is no throws clause in the method signature.
     *  public int propagateExample","0","-","-","-","-"
"9667","eraseType","/**
     * Claims a Throwable is another Throwable type using type erasure. This
     * hides a checked exception from the Java compiler, allowing a checked
     * exception to be thrown without having the exception in the method's throw
     * clause.
     */
    @SuppressWarnings(""unchecked"")
    private static <R, T extends Throwable> R eraseType(final Throwable throwable) throws T","0","-","-","-","-"
"9668","forEach","/**
     * Performs an action for each Throwable causes of the given Throwable.
     * <p>
     * A throwable without cause will return a stream containing one element - the input throwable. A throwable with one cause
     * will return a stream containing two elements. - the input throwable and the cause throwable. A","0","-","-","-","-"
"9669","getCause","/**
     * Introspects the","0","-","-","-","-"
"9670","getCause","/**
     * Introspects the","0","-","-","-","-"
"9671","getCauseUsingMethodName","/**
     * Gets a","0","-","-","-","-"
"9672","getDefaultCauseMethodNames","/**
     * Gets the default names used when searching for the cause of an exception.
     *
     * <p>This may be modified and used in the overloaded getCause(Throwable, String[]) method.</p>
     *
     * @return cloned array of the default method names
     * @since 3.0
     * @deprecated This feature will be removed in Lang 4
     */
    @Deprecated
    public static String[] getDefaultCauseMethodNames()","0","-","-","-","-"
"9673","getMessage","/**
     * Gets a short message summarizing the exception.
     * <p>
     * The message returned is of the form
     *","0","-","-","-","-"
"9674","getRootCause","/**
     * Walks the","0","-","-","-","-"
"9675","getRootCauseMessage","/**
     * Gets a short message summarizing the root cause exception.
     * <p>
     * The message returned is of the form
     *","0","-","-","-","-"
"9676","getRootCauseStackTrace","/**
     * Gets a compact stack trace for the root cause of the supplied
     *","0","-","-","-","-"
"9677","getRootCauseStackTraceList","/**
     * Gets a compact stack trace for the root cause of the supplied","0","-","-","-","-"
"9678","getStackFrameList","/**
     * Gets a","0","-","-","-","-"
"9679","getStackFrames","/**
     * Gets an array where each element is a line from the argument.
     *
     * <p>The end of line is determined by the value of","0","-","-","-","-"
"9680","getStackFrames","/**
     * Gets the stack trace associated with the specified
     *","0","-","-","-","-"
"9681","getStackTrace","/**
     * Gets the stack trace from a Throwable as a String, including suppressed and cause exceptions.
     *
     * <p>
     * The result of this method vary by JDK version as this method
     * uses","0","-","-","-","-"
"9682","getThrowableCount","/**
     * Gets a count of the number of","0","-","-","-","-"
"9683","getThrowableList","/**
     * Gets the list of","0","-","-","-","-"
"9684","getThrowables","/**
     * Gets the list of","0","-","-","-","-"
"9685","hasCause","/**
     * Tests if the throwable's causal chain have an immediate or wrapped exception
     * of the given type?
     *
     * @param chain
     *            The root of a Throwable causal chain.
     * @param type
     *            The exception type to test.
     * @return true, if chain is an instance of type or is an
     *         UndeclaredThrowableException wrapping a cause.
     * @since 3.5
     * @see #wrapAndThrow(Throwable)
     */
    public static boolean hasCause(Throwable chain,
            final Class<? extends Throwable> type)","0","-","-","-","-"
"9686","indexOf","/**
     * Worker method for the","0","-","-","-","-"
"9687","indexOfThrowable","/**
     * Returns the (zero-based) index of the first","0","-","-","-","-"
"9688","indexOfThrowable","/**
     * Returns the (zero-based) index of the first","0","-","-","-","-"
"9689","indexOfType","/**
     * Returns the (zero-based) index of the first","0","-","-","-","-"
"9690","indexOfType","/**
     * Returns the (zero-based) index of the first","0","-","-","-","-"
"9691","isChecked","/**
     * Checks if a throwable represents a checked exception
     *
     * @param throwable
     *            The throwable to check.
     * @return True if the given Throwable is a checked exception.
     * @since 3.13.0
     */
    public static boolean isChecked(final Throwable throwable)","0","-","-","-","-"
"9692","isUnchecked","/**
     * Checks if a throwable represents an unchecked exception
     *
     * @param throwable
     *            The throwable to check.
     * @return True if the given Throwable is an unchecked exception.
     * @since 3.13.0
     */
    public static boolean isUnchecked(final Throwable throwable)","0","-","-","-","-"
"9693","printRootCauseStackTrace","/**
     * Prints a compact stack trace for the root cause of a throwable
     * to","0","-","-","-","-"
"9694","printRootCauseStackTrace","/**
     * Prints a compact stack trace for the root cause of a throwable.
     *
     * <p>The compact stack trace starts with the root cause and prints
     * stack frames up to the place where it was caught and wrapped.
     * Then it prints the wrapped exception and continues with stack frames
     * until the wrapper exception is caught and wrapped again, etc.</p>
     *
     * <p>The output of this method is consistent across JDK versions.
     * Note that this is the opposite order to the JDK1.4 display.</p>
     *
     * <p>The method is equivalent to","0","-","-","-","-"
"9695","printRootCauseStackTrace","/**
     * Prints a compact stack trace for the root cause of a throwable.
     *
     * <p>The compact stack trace starts with the root cause and prints
     * stack frames up to the place where it was caught and wrapped.
     * Then it prints the wrapped exception and continues with stack frames
     * until the wrapper exception is caught and wrapped again, etc.</p>
     *
     * <p>The output of this method is consistent across JDK versions.
     * Note that this is the opposite order to the JDK1.4 display.</p>
     *
     * <p>The method is equivalent to","0","-","-","-","-"
"9696","removeCommonFrames","/**
     * Removes common frames from the cause trace given the two stack traces.
     *
     * @param causeFrames  stack trace of a cause throwable
     * @param wrapperFrames  stack trace of a wrapper throwable
     * @throws NullPointerException if either argument is null
     * @since 2.0
     */
    public static void removeCommonFrames(final List<String> causeFrames, final List<String> wrapperFrames)","0","-","-","-","-"
"9697","rethrow","/**
     * Throws the given (usually checked) exception without adding the exception to the throws
     * clause of the calling method. This method prevents throws clause
     * inflation and reduces the clutter of ""Caused by"" exceptions in the
     * stack trace.
     * <p>
     * The use of this technique may be controversial, but useful.
     * </p>
     * <pre>
     *  // There is no throws clause in the method signature.
     *  public int propagateExample()","0","-","-","-","-"
"9698","stream","/**
     * Streams causes of a Throwable.
     * <p>
     * A throwable without cause will return a stream containing one element - the input throwable. A throwable with one cause
     * will return a stream containing two elements. - the input throwable and the cause throwable. A","0","-","-","-","-"
"9699","throwableOf","/**
     * Worker method for the","0","-","-","-","-"
"9700","throwableOfThrowable","/**
     * Returns the first","0","-","-","-","-"
"9701","throwableOfThrowable","/**
     * Returns the first","0","-","-","-","-"
"9702","throwableOfType","/**
     * Returns the throwable of the first","0","-","-","-","-"
"9703","throwableOfType","/**
     * Returns the first","0","-","-","-","-"
"9704","throwUnchecked","/**
     * Tests whether the specified","0","-","-","-","-"
"9705","throwUnchecked","/**
     * Tests whether the specified","0","-","-","-","-"
"9706","wrapAndThrow","/**
     * Throws a checked exception without adding the exception to the throws
     * clause of the calling method. For checked exceptions, this method throws
     * an UndeclaredThrowableException wrapping the checked exception. For
     * Errors and RuntimeExceptions, the original exception is rethrown.
     * <p>
     * The downside to using this approach is that invoking code which needs to
     * handle specific checked exceptions must sniff up the exception chain to
     * determine if the caught exception was caused by the checked exception.
     * </p>
     *
     * @param throwable
     *            The throwable to rethrow.
     * @param <R> The type of the returned value.
     * @return Never actually returned, this generic type matches any type
     *         which the calling site requires. ""Returning"" the results of this
     *         method will satisfy the Java compiler requirement that all code
     *         paths return a value.
     * @since 3.5
     * @see #asRuntimeException(Throwable)
     * @see #hasCause(Throwable, Class)
     */
    public static <R> R wrapAndThrow(final Throwable throwable)","0","-","-","-","-"
"9707","ExceptionUtils","/**
     * Public constructor allows an instance of","0","-","-","-","-"
"9708","UncheckedIllegalAccessException","/**
     * Constructs an instance initialized to the given","0","-","-","-","-"
"9709","DefaultExceptionContext","/**
     * Constructs a new instance.
     */
    public DefaultExceptionContext()","0","-","-","-","-"
"9710","addContextValue","/**
     *","0","-","-","-","-"
"9711","getContextEntries","/**
     *","0","-","-","-","-"
"9712","getContextLabels","/**
     *","0","-","-","-","-"
"9713","getContextValues","/**
     *","0","-","-","-","-"
"9714","getFirstContextValue","/**
     *","0","-","-","-","-"
"9715","getFormattedExceptionMessage","/**
     * Builds the message containing the contextual information.
     *
     * @param baseMessage  the base exception message <strong>without</strong> context information appended
     * @return the exception message <strong>with</strong> context information appended, never null
     */
    @Override
    public String getFormattedExceptionMessage(final String baseMessage)","0","-","-","-","-"
"9716","setContextValue","/**
     *","0","-","-","-","-"
"9717","stream","private Stream<Pair<String, Object>> stream()","0","-","-","-","-"
"9718","ContextedException","/**
     * Instantiates ContextedException without message or cause.
     * <p>
     * The context information is stored using a default implementation.
     */
    public ContextedException()","0","-","-","-","-"
"9719","ContextedException","/**
     * Instantiates ContextedException with message, but without cause.
     * <p>
     * The context information is stored using a default implementation.
     *
     * @param message  the exception message, may be null
     */
    public ContextedException(final String message)","0","-","-","-","-"
"9720","ContextedException","/**
     * Instantiates ContextedException with cause and message.
     * <p>
     * The context information is stored using a default implementation.
     *
     * @param message  the exception message, may be null
     * @param cause  the underlying cause of the exception, may be null
     */
    public ContextedException(final String message, final Throwable cause)","0","-","-","-","-"
"9721","ContextedException","/**
     * Instantiates ContextedException with cause, message, and ExceptionContext.
     *
     * @param message  the exception message, may be null
     * @param cause  the underlying cause of the exception, may be null
     * @param context  the context used to store the additional information, null uses default implementation
     */
    public ContextedException(final String message, final Throwable cause, ExceptionContext context)","0","-","-","-","-"
"9722","ContextedException","/**
     * Instantiates ContextedException with cause, but without message.
     * <p>
     * The context information is stored using a default implementation.
     *
     * @param cause  the underlying cause of the exception, may be null
     */
    public ContextedException(final Throwable cause)","0","-","-","-","-"
"9723","addContextValue","/**
     * Adds information helpful to a developer in diagnosing and correcting the problem.
     * For the information to be meaningful, the value passed should have a reasonable
     * toString() implementation.
     * Different values can be added with the same label multiple times.
     * <p>
     * Note: This exception is only serializable if the object added is serializable.
     * </p>
     *
     * @param label  a textual label associated with information,","0","-","-","-","-"
"9724","getContextEntries","/**
     *","0","-","-","-","-"
"9725","getContextLabels","/**
     *","0","-","-","-","-"
"9726","getContextValues","/**
     *","0","-","-","-","-"
"9727","getFirstContextValue","/**
     *","0","-","-","-","-"
"9728","getFormattedExceptionMessage","/**
     *","0","-","-","-","-"
"9729","getMessage","/**
     * Provides the message explaining the exception, including the contextual data.
     *
     * @see Throwable#getMessage()
     * @return the message, never null
     */
    @Override
    public String getMessage()","0","-","-","-","-"
"9730","getRawMessage","/**
     * Provides the message explaining the exception without the contextual data.
     *
     * @see Throwable#getMessage()
     * @return the message
     * @since 3.0.1
     */
    public String getRawMessage()","0","-","-","-","-"
"9731","setContextValue","/**
     * Sets information helpful to a developer in diagnosing and correcting the problem.
     * For the information to be meaningful, the value passed should have a reasonable
     * toString() implementation.
     * Any existing values with the same labels are removed before the new one is added.
     * <p>
     * Note: This exception is only serializable if the object added as value is serializable.
     * </p>
     *
     * @param label  a textual label associated with information,","0","-","-","-","-"
"9732","ContextedRuntimeException","/**
     * Instantiates ContextedRuntimeException without message or cause.
     * <p>
     * The context information is stored using a default implementation.
     */
    public ContextedRuntimeException()","0","-","-","-","-"
"9733","ContextedRuntimeException","/**
     * Instantiates ContextedRuntimeException with message, but without cause.
     * <p>
     * The context information is stored using a default implementation.
     *
     * @param message  the exception message, may be null
     */
    public ContextedRuntimeException(final String message)","0","-","-","-","-"
"9734","ContextedRuntimeException","/**
     * Instantiates ContextedRuntimeException with cause and message.
     * <p>
     * The context information is stored using a default implementation.
     *
     * @param message  the exception message, may be null
     * @param cause  the underlying cause of the exception, may be null
     */
    public ContextedRuntimeException(final String message, final Throwable cause)","0","-","-","-","-"
"9735","ContextedRuntimeException","/**
     * Instantiates ContextedRuntimeException with cause, message, and ExceptionContext.
     *
     * @param message  the exception message, may be null
     * @param cause  the underlying cause of the exception, may be null
     * @param context  the context used to store the additional information, null uses default implementation
     */
    public ContextedRuntimeException(final String message, final Throwable cause, ExceptionContext context)","0","-","-","-","-"
"9736","ContextedRuntimeException","/**
     * Instantiates ContextedRuntimeException with cause, but without message.
     * <p>
     * The context information is stored using a default implementation.
     *
     * @param cause  the underlying cause of the exception, may be null
     */
    public ContextedRuntimeException(final Throwable cause)","0","-","-","-","-"
"9737","addContextValue","/**
     * Adds information helpful to a developer in diagnosing and correcting the problem.
     * For the information to be meaningful, the value passed should have a reasonable
     * toString() implementation.
     * Different values can be added with the same label multiple times.
     * <p>
     * Note: This exception is only serializable if the object added is serializable.
     * </p>
     *
     * @param label  a textual label associated with information,","0","-","-","-","-"
"9738","getContextEntries","/**
     *","0","-","-","-","-"
"9739","getContextLabels","/**
     *","0","-","-","-","-"
"9740","getContextValues","/**
     *","0","-","-","-","-"
"9741","getFirstContextValue","/**
     *","0","-","-","-","-"
"9742","getFormattedExceptionMessage","/**
     *","0","-","-","-","-"
"9743","getMessage","/**
     * Provides the message explaining the exception, including the contextual data.
     *
     * @see Throwable#getMessage()
     * @return the message, never null
     */
    @Override
    public String getMessage()","0","-","-","-","-"
"9744","getRawMessage","/**
     * Provides the message explaining the exception without the contextual data.
     *
     * @see Throwable#getMessage()
     * @return the message
     * @since 3.0.1
     */
    public String getRawMessage()","0","-","-","-","-"
"9745","setContextValue","/**
     * Sets information helpful to a developer in diagnosing and correcting the problem.
     * For the information to be meaningful, the value passed should have a reasonable
     * toString() implementation.
     * Any existing values with the same labels are removed before the new one is added.
     * <p>
     * Note: This exception is only serializable if the object added as value is serializable.
     * </p>
     *
     * @param label  a textual label associated with information,","0","-","-","-","-"
"9746","UncheckedInterruptedException","/**
     * Constructs an instance initialized to the given","0","-","-","-","-"
"9747","EventBindingInvocationHandler","/**
         * Creates a new instance of","0","-","-","-","-"
"9748","hasMatchingParametersMethod","/**
         * Checks whether a method for the passed in parameters can be found.
         *
         * @param method the listener method invoked
         * @return a flag whether the parameters could be matched
         */
        private boolean hasMatchingParametersMethod(final Method method)","0","-","-","-","-"
"9749","invoke","/**
         * Handles a method invocation on the proxy object.
         *
         * @param proxy the proxy instance
         * @param method the method to be invoked
         * @param parameters the parameters for the method invocation
         * @return the result of the method call
         * @throws SecurityException if an underlying accessible object's method denies the request.
         * @see SecurityManager#checkPermission
         * @throws Throwable if an error occurs
         */
        @Override
        public Object invoke(final Object proxy, final Method method, final Object[] parameters) throws Throwable","0","-","-","-","-"
"9750","addEventListener","/**
     * Adds an event listener to the specified source.  This looks for an ""add"" method corresponding to the event
     * type (addActionListener, for example).
     * @param eventSource   the event source
     * @param listenerType  the event listener type
     * @param listener      the listener
     * @param <L>           the event listener type
     * @throws IllegalArgumentException if the object doesn't support the listener type
     */
    public static <L> void addEventListener(final Object eventSource, final Class<L> listenerType, final L listener)","0","-","-","-","-"
"9751","bindEventsToMethod","/**
     * Binds an event listener to a specific method on a specific object.
     *
     * @param <L>          the event listener type
     * @param target       the target object
     * @param methodName   the name of the method to be called
     * @param eventSource  the object which is generating events (JButton, JList, etc.)
     * @param listenerType the listener interface (ActionListener.class, SelectionListener.class, etc.)
     * @param eventTypes   the event types (method names) from the listener interface (if none specified, all will be
     *                     supported)
     */
    public static <L> void bindEventsToMethod(final Object target, final String methodName, final Object eventSource,
            final Class<L> listenerType, final String... eventTypes)","0","-","-","-","-"
"9752","EventUtils","/**
     * Make private in 4.0.
     *
     * @deprecated TODO Make private in 4.0.
     */
    @Deprecated
    public EventUtils()","0","-","-","-","-"
"9753","ProxyInvocationHandler","/**
         * Constructs a new instance.
         */
        public ProxyInvocationHandler()","0","-","-","-","-"
"9754","ProxyInvocationHandler","/**
         * Constructs a new instance.
         *
         * @param handler Handles Throwables.
         * @since 3.15.0
         */
        public ProxyInvocationHandler(final FailableConsumer<Throwable, IllegalAccessException> handler)","0","-","-","-","-"
"9755","handle","/**
         * Handles an exception thrown by a listener. By default rethrows the given Throwable.
         *
         * @param t The Throwable
         * @throws IllegalAccessException thrown by the listener.
         * @throws IllegalArgumentException thrown by the listener.
         * @throws InvocationTargetException thrown by the listener.
         * @since 3.15.0
         */
        protected void handle(final Throwable t) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException","0","-","-","-","-"
"9756","invoke","/**
         * Propagates the method call to all registered listeners in place of the proxy listener object.
         *
         * @param unusedProxy the proxy object representing a listener on which the invocation was called; not used
         * @param method the listener method that will be called on all of the listeners.
         * @param args event arguments to propagate to the listeners.
         * @return the result of the method call
         * @throws InvocationTargetException if an error occurs
         * @throws IllegalArgumentException if an error occurs
         * @throws IllegalAccessException if an error occurs
         */
        @Override
        public Object invoke(final Object unusedProxy, final Method method, final Object[] args)
                throws IllegalAccessException, IllegalArgumentException, InvocationTargetException","0","-","-","-","-"
"9757","create","/**
     * Creates an EventListenerSupport object which supports the specified
     * listener type.
     *
     * @param <T> the type of the listener interface
     * @param listenerInterface the type of listener interface that will receive
     *        events posted using this class.
     *
     * @return an EventListenerSupport object which supports the specified
     *         listener type.
     *
     * @throws NullPointerException if","0","-","-","-","-"
"9758","EventListenerSupport","/**
     * Constructs a new EventListenerSupport instance.
     * Serialization-friendly constructor.
     */
    private EventListenerSupport()","0","-","-","-","-"
"9759","EventListenerSupport","/**
     * Creates an EventListenerSupport object which supports the provided
     * listener interface.
     *
     * @param listenerInterface the type of listener interface that will receive
     *        events posted using this class.
     *
     * @throws NullPointerException if","0","-","-","-","-"
"9760","EventListenerSupport","/**
     * Creates an EventListenerSupport object which supports the provided
     * listener interface using the specified class loader to create the JDK
     * dynamic proxy.
     *
     * @param listenerInterface the listener interface.
     * @param classLoader       the class loader.
     * @throws NullPointerException if","0","-","-","-","-"
"9761","addListener","/**
     * Registers an event listener.
     *
     * @param listener the event listener (may not be","0","-","-","-","-"
"9762","addListener","/**
     * Registers an event listener. Will not add a pre-existing listener
     * object to the list if","0","-","-","-","-"
"9763","createInvocationHandler","/**
     * Creates the","0","-","-","-","-"
"9764","createProxy","/**
     * Creates the proxy object.
     *
     * @param listenerInterface the class of the listener interface
     * @param classLoader the class loader to be used
     */
    private void createProxy(final Class<L> listenerInterface, final ClassLoader classLoader)","0","-","-","-","-"
"9765","fire","/**
     * Returns a proxy object which can be used to call listener methods on all
     * of the registered event listeners. All calls made to this proxy will be
     * forwarded to all registered listeners.
     *
     * @return a proxy object which can be used to call listener methods on all
     * of the registered event listeners
     */
    public L fire()","0","-","-","-","-"
"9766","getListenerCount","/**
     * Gets the number of registered listeners.
     *
     * @return the number of registered listeners.
     */
    int getListenerCount()","0","-","-","-","-"
"9767","getListeners","/**
     * Gets an array containing the currently registered listeners.
     * Modification to this array's elements will have no effect on the
     *","0","-","-","-","-"
"9768","initializeTransientFields","/**
     * Initializes transient fields.
     *
     * @param listenerInterface the class of the listener interface
     * @param classLoader the class loader to be used
     */
    private void initializeTransientFields(final Class<L> listenerInterface, final ClassLoader classLoader)","0","-","-","-","-"
"9769","readObject","/**
     * Deserializes.
     *
     * @param objectInputStream the input stream
     * @throws IOException if an IO error occurs
     * @throws ClassNotFoundException if the class cannot be resolved
     */
    private void readObject(final ObjectInputStream objectInputStream) throws IOException, ClassNotFoundException","0","-","-","-","-"
"9770","removeListener","/**
     * Unregisters an event listener.
     *
     * @param listener the event listener (may not be","0","-","-","-","-"
"9771","writeObject","/**
     * Serializes.
     *
     * @param objectOutputStream the output stream
     * @throws IOException if an IO error occurs
     */
    private void writeObject(final ObjectOutputStream objectOutputStream) throws IOException","0","-","-","-","-"
"9772","NumberRange","/**
     * Creates an instance.
     *
     * @param number1 the first element, not null
     * @param number2 the second element, not null
     * @param comp the comparator to be used, null for natural ordering
     * @throws NullPointerException when element1 is null.
     * @throws NullPointerException when element2 is null.
     */
    public NumberRange(final N number1, final N number2, final Comparator<N> comp)","0","-","-","-","-"
"9773","asEnum","/**
     * Validate","0","-","-","-","-"
"9774","checkBitVectorable","/**
     * Validate that","0","-","-","-","-"
"9775","generateBitVector","/**
     * Creates a long bit vector representation of the given array of Enum values.
     *
     * <p>This generates a value that is usable by","0","-","-","-","-"
"9776","generateBitVector","/**
     * Creates a long bit vector representation of the given subset of an Enum.
     *
     * <p>This generates a value that is usable by","0","-","-","-","-"
"9777","generateBitVectors","/**
     * Creates a bit vector representation of the given subset of an Enum using as many","0","-","-","-","-"
"9778","generateBitVectors","/**
     * Creates a bit vector representation of the given subset of an Enum using as many","0","-","-","-","-"
"9779","getEnum","/**
     * Gets the enum for the class, returning","0","-","-","-","-"
"9780","getEnum","/**
     * Gets the enum for the class, returning","0","-","-","-","-"
"9781","getEnumIgnoreCase","/**
     * Gets the enum for the class, returning","0","-","-","-","-"
"9782","getEnumIgnoreCase","/**
     * Gets the enum for the class, returning","0","-","-","-","-"
"9783","getEnumList","/**
     * Gets the","0","-","-","-","-"
"9784","getEnumMap","/**
     * Gets the","0","-","-","-","-"
"9785","getEnumMap","/**
     * Gets the","0","-","-","-","-"
"9786","getEnumSystemProperty","/**
     * Gets the enum for the class in a system property, returning","0","-","-","-","-"
"9787","getFirstEnum","/**
     * Gets the enum for the class and value, returning","0","-","-","-","-"
"9788","getFirstEnumIgnoreCase","/**
     * Gets the enum for the class, returning","0","-","-","-","-"
"9789","isEnum","private static <E extends Enum<E>> boolean isEnum(final Class<E> enumClass)","0","-","-","-","-"
"9790","isValidEnum","/**
     * Checks if the specified name is a valid enum for the class.
     *
     * <p>This method differs from","0","-","-","-","-"
"9791","isValidEnumIgnoreCase","/**
     * Checks if the specified name is a valid enum for the class.
     *
     * <p>This method differs from","0","-","-","-","-"
"9792","processBitVector","/**
     * Convert a long value created by","0","-","-","-","-"
"9793","processBitVectors","/**
     * Convert a","0","-","-","-","-"
"9794","EnumUtils","/**
     * This constructor is public to permit tools that require a JavaBean
     * instance to operate.
     *
     * @deprecated TODO Make private in 4.0.
     */
    @Deprecated
    public EnumUtils()","0","-","-","-","-"
"9795","containsAny","/**
     * Takes an argument in set-syntax, see evaluateSet,
     * and identifies whether any of the characters are present in the specified string.
     *
     * <pre>
     * CharSetUtils.containsAny(null, *)        = false
     * CharSetUtils.containsAny("""", *)          = false
     * CharSetUtils.containsAny(*, null)        = false
     * CharSetUtils.containsAny(*, """")          = false
     * CharSetUtils.containsAny(""hello"", ""k-p"") = true
     * CharSetUtils.containsAny(""hello"", ""a-d"") = false
     * </pre>
     *
     * @see CharSet#getInstance(String...) for set-syntax.
     * @param str  String to look for characters in, may be null
     * @param set  String[] set of characters to identify, may be null
     * @return whether or not the characters in the set are in the primary string
     * @since 3.2
     */
    public static boolean containsAny(final String str, final String... set)","0","-","-","-","-"
"9796","count","/**
     * Takes an argument in set-syntax, see evaluateSet,
     * and returns the number of characters present in the specified string.
     *
     * <pre>
     * CharSetUtils.count(null, *)        = 0
     * CharSetUtils.count("""", *)          = 0
     * CharSetUtils.count(*, null)        = 0
     * CharSetUtils.count(*, """")          = 0
     * CharSetUtils.count(""hello"", ""k-p"") = 3
     * CharSetUtils.count(""hello"", ""a-e"") = 1
     * </pre>
     *
     * @see CharSet#getInstance(String...) for set-syntax.
     * @param str  String to count characters in, may be null
     * @param set  String[] set of characters to count, may be null
     * @return the character count, zero if null string input
     */
    public static int count(final String str, final String... set)","0","-","-","-","-"
"9797","deepEmpty","/**
     * Determines whether or not all the Strings in an array are
     * empty or not.
     *
     * @param strings String[] whose elements are being checked for emptiness
     * @return whether or not the String is empty
     */
    private static boolean deepEmpty(final String[] strings)","0","-","-","-","-"
"9798","delete","/**
     * Takes an argument in set-syntax, see evaluateSet,
     * and deletes any of characters present in the specified string.
     *
     * <pre>
     * CharSetUtils.delete(null, *)        = null
     * CharSetUtils.delete("""", *)          = """"
     * CharSetUtils.delete(*, null)        = *
     * CharSetUtils.delete(*, """")          = *
     * CharSetUtils.delete(""hello"", ""hl"")  = ""eo""
     * CharSetUtils.delete(""hello"", ""le"")  = ""ho""
     * </pre>
     *
     * @see CharSet#getInstance(String...) for set-syntax.
     * @param str  String to delete characters from, may be null
     * @param set  String[] set of characters to delete, may be null
     * @return the modified String,","0","-","-","-","-"
"9799","keep","/**
     * Takes an argument in set-syntax, see evaluateSet,
     * and keeps any of characters present in the specified string.
     *
     * <pre>
     * CharSetUtils.keep(null, *)        = null
     * CharSetUtils.keep("""", *)          = """"
     * CharSetUtils.keep(*, null)        = """"
     * CharSetUtils.keep(*, """")          = """"
     * CharSetUtils.keep(""hello"", ""hl"")  = ""hll""
     * CharSetUtils.keep(""hello"", ""le"")  = ""ell""
     * </pre>
     *
     * @see CharSet#getInstance(String...) for set-syntax.
     * @param str  String to keep characters from, may be null
     * @param set  String[] set of characters to keep, may be null
     * @return the modified String,","0","-","-","-","-"
"9800","modify","/**
     * Implements delete and keep.
     *
     * @param str String to modify characters within
     * @param set String[] set of characters to modify
     * @param expect whether to evaluate on match, or non-match
     * @return the modified String, not null
     */
    private static String modify(final String str, final String[] set, final boolean expect)","0","-","-","-","-"
"9801","squeeze","/**
     * Squeezes any repetitions of a character that is mentioned in the
     * supplied set.
     *
     * <pre>
     * CharSetUtils.squeeze(null, *)        = null
     * CharSetUtils.squeeze("""", *)          = """"
     * CharSetUtils.squeeze(*, null)        = *
     * CharSetUtils.squeeze(*, """")          = *
     * CharSetUtils.squeeze(""hello"", ""k-p"") = ""helo""
     * CharSetUtils.squeeze(""hello"", ""a-e"") = ""hello""
     * </pre>
     *
     * @see CharSet#getInstance(String...) for set-syntax.
     * @param str  the string to squeeze, may be null
     * @param set  the character set to use for manipulation, may be null
     * @return the modified String,","0","-","-","-","-"
"9802","CharSetUtils","/**
     * CharSetUtils instances should NOT be constructed in standard programming.
     * Instead, the class should be used as","0","-","-","-","-"
