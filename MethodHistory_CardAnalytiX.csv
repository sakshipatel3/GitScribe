"Index","Method Name","Method Signature","Commit Count","Change Types","Commit Message","Commit ID","Commit Author"
"1","public SpellCheck() {

        root = new Trie();
        // Load vocabulary from vocabulary.txt
        try {
            loadVocabulary(""src/main/resources/vocabulary.txt"");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }","public SpellCheck()","1","Body Change","Changing path for vocabulary.txt
","d08f3ee2cc86b3cfd82bfdd8f20693d80094177a","Mahzabin Chowdhury"
"2","private void loadVocabulary(String filePath) throws IOException
	{
		BufferedReader reader = new BufferedReader(new FileReader(filePath));
		String line;
		while((line = reader.readLine()) != null)
		{
			if(skipWords(line)){
			}
			else{
				line = line.replaceAll(""[^a-zA-Z ]"", """").trim();  // Normalize data
				if (!line.isEmpty()) {
					avlTree.insert(line);
				}
			}
		}
		reader.close();
	}","private void loadVocabulary(String filePath) throws IOException","2","Body Change","Adding doesPrefixExists Method
","c91c8647bdc705396d6bf6ef866d6bd54cf1f277","Mahzabin Chowdhury"
"3","private void loadVocabulary(String filePath) throws IOException
	{
		BufferedReader reader = new BufferedReader(new FileReader(filePath));
		String line;
		while((line = reader.readLine()) != null)
		{
			if(skipWords(line)){
			}
			else{
				line = line.replaceAll(""[^a-zA-Z ]"", """").trim();  // Normalize data
				if (!line.isEmpty()) {
					avlTree.insert(line);
				}
			}
		}
		reader.close();
	}","private void loadVocabulary(String filePath) throws IOException","2","Body Change","Updating Spell Check and Auto Complete feature
","cf330fd8ff465ae1be04b87f547bc0e07dfeabff","Mahzabin Chowdhury"
"4","public boolean doesPrefixExist(String prefix){
		return avlTree.doesPrefixExist(prefix);
	}","public boolean doesPrefixExist(String prefix)","1","Signature Change, Body Change","Adding doesPrefixExists Method
","c91c8647bdc705396d6bf6ef866d6bd54cf1f277","Mahzabin Chowdhury"
"5","public static boolean skipWords(String line){
		for(String skip:stopWordArray){
			if(line.equalsIgnoreCase(skip)){
				return true;
			}
		}
		return false;
	}","public static boolean skipWords(String line)","1","Signature Change, Body Change","Adding doesPrefixExists Method
","c91c8647bdc705396d6bf6ef866d6bd54cf1f277","Mahzabin Chowdhury"
"6","private boolean doesPrefixExist(AVLNode node, String prefix){
        if(node==null){
            return false;
        }
        if(node.word.toLowerCase().startsWith(prefix.toLowerCase())){
            return true;
        }
        return doesPrefixExist(node.left, prefix) || doesPrefixExist(node.right, prefix);

    }","private boolean doesPrefixExist(AVLNode node, String prefix)","2","Signature Change, Body Change","Adding doesPrefixExists Method
","c91c8647bdc705396d6bf6ef866d6bd54cf1f277","Mahzabin Chowdhury"
"7","private boolean doesPrefixExist(AVLNode node, String prefix){
        if(node==null){
            return false;
        }
        if(node.word.toLowerCase().startsWith(prefix.toLowerCase())){
            return true;
        }
        return doesPrefixExist(node.left, prefix) || doesPrefixExist(node.right, prefix);

    }","private boolean doesPrefixExist(AVLNode node, String prefix)","2","Body Change","Updating Spell Check and Auto Complete feature
","cf330fd8ff465ae1be04b87f547bc0e07dfeabff","Mahzabin Chowdhury"
"8","public boolean doesPrefixExist(String prefix){
        return doesPrefixExist(root,prefix);
    }","public boolean doesPrefixExist(String prefix)","1","Signature Change, Body Change","Adding doesPrefixExists Method
","c91c8647bdc705396d6bf6ef866d6bd54cf1f277","Mahzabin Chowdhury"
"9","public static boolean isWordOnly(String input) {
        return input.matches(""[a-zA-Z\\s]+""); // Matches only letters and spaces
    }","public static boolean isWordOnly(String input)","1","Signature Change, Body Change","Final Validation
","6b7efee1e50f87e0f8e8061454ed8f5900ef3eaa","sag7ai"
"10","public static String getWordOnlyInput(Scanner scanner, String message) {
        while (true) {
            System.out.print(message);
            String input = scanner.nextLine().trim();

            if (isWordOnly(input)) {
                return input; // Return valid input
            } else {
                System.out.println(""Invalid input. Please enter valid words."");
            }
        }
    }","public static String getWordOnlyInput(Scanner scanner, String message)","1","Signature Change, Body Change","Final Validation
","6b7efee1e50f87e0f8e8061454ed8f5900ef3eaa","sag7ai"
"11","public static boolean ValidationCardType(String input) {
        if (input == null || input.trim().isEmpty()) {
            return false; // input can't be null or empty
        }

        // Regular expression pattern to match card types with only letters and spaces (no digits or special characters)
        String regex = ""^[a-zA-Z]+( [a-zA-Z]+)*$""; 

        // Check if input matches the pattern
        return input.trim().matches(regex);
    }","public static boolean ValidationCardType(String input)","1","Signature Change, Body Change","Merge remote-tracking branch 'origin/master'
","5c3eb7d5154f18549a3269b0cee02b412291b007","Mahzabin Chowdhury"
"12","public static boolean ValidationAnnualFee(String input) {
		if (input == null || input.trim().isEmpty()) {
			return false; // input can't be null or empty
		}
	
		// Regular expression pattern to match positive annual fees, with optional decimal points
		String regex = ""^[0-9]+(\\.[0-9]+)?$""; 
	
		// Check if input matches the pattern
		return input.trim().matches(regex);
	}","public static boolean ValidationAnnualFee(String input)","1","Signature Change, Body Change","Merge remote-tracking branch 'origin/master'
","5c3eb7d5154f18549a3269b0cee02b412291b007","Mahzabin Chowdhury"
"13","public static boolean documentWordSearchAndFrequency(String input) {
        if (input == null || input.trim().isEmpty()) {
            return false; // input can't be null or empty
        }

        // Regular expression pattern to match card types with only letters and spaces (no digits or special characters)
        String regex = ""^[a-zA-Z]+( [a-zA-Z]+)*$""; 

        // Check if input matches the pattern
        return input.trim().matches(regex);
    }","public static boolean documentWordSearchAndFrequency(String input)","1","Signature Change, Body Change","Validation and pattern added for documentWordAndFrequency
","5c31577ea4f888d87447bfcbfc6822908339d52a","sagar9233"
"14","public static boolean ValidationBankName(String input) {
        if (input == null || input.trim().isEmpty()) {
            return false; // input can't be null or empty
        }

        // Regular expression pattern to match card types with only letters and spaces (no digits or special characters)
        String regex = ""^[a-zA-Z]+( [a-zA-Z]+)*$""; 

        // Check if input matches the pattern
        return input.trim().matches(regex);
    }","public static boolean ValidationBankName(String input)","1","Signature Change, Body Change","Merge remote-tracking branch 'origin/master'
","5c3eb7d5154f18549a3269b0cee02b412291b007","Mahzabin Chowdhury"
"15","public static boolean ValidationInterestRate(String input) {
		if (input == null || input.trim().isEmpty()) {
			return false; // input can't be null or empty
		}
	
		// Regular expression pattern to match positive annual fees, with optional decimal points
		String regex = ""^[0-9]+(\\.[0-9]+)?%?$""; 
	
		// Check if input matches the pattern
		return input.trim().matches(regex);
	}","public static boolean ValidationInterestRate(String input)","1","Signature Change, Body Change","Merge remote-tracking branch 'origin/master'
","5c3eb7d5154f18549a3269b0cee02b412291b007","Mahzabin Chowdhury"
"16","public static String validateYesNoInput(BufferedReader reader) throws IOException {
        String input;

        while (true) {
            System.out.println(""Do you want word count from this bankWebsite? (Y | N):"");
            input = reader.readLine();
            input = input.trim();

            if (input.equalsIgnoreCase(""Y"") || input.equalsIgnoreCase(""N"")) {
                return input; // Return valid input
            } else {
                System.out.println(""Invalid input. Please enter 'Y' or 'N'."");
            }
        }
    }","public static String validateYesNoInput(BufferedReader reader) throws IOException","1","Signature Change, Body Change","Final Validation
","6b7efee1e50f87e0f8e8061454ed8f5900ef3eaa","sag7ai"
"17","public static Map<String, Integer> rankBanksByKeywordFrequency(List<CreditCard> creditCards, String keywords)
	{
		Map<String, Integer> bankScores = new HashMap<>();
		for(CreditCard card : creditCards)
		{
			int score = calculateKeywordScore(card, keywords);

			bankScores.put(card.getBank(), bankScores.getOrDefault(card.getBank(), 0) + score);
		}

		return sortByValue(bankScores);
	}","public static Map<String, Integer> rankBanksByKeywordFrequency(List<CreditCard> creditCards, String keywords)","1","Signature Change, Body Change","Minor changes in error handling","ea3bb40f9b6028f2570d89315f1a43a0c486d660","prerakshah"
"18","private static int calculateKeywordScore(CreditCard card, String keyword)
	{
		int score = 0;

		String content = card.getCardName() + "" "" + card.getCardType() + "" "" + card.getAdditionalFeatures();

		score += countOccurrences(content.toLowerCase(), keyword.toLowerCase());

		return score;
	}","private static int calculateKeywordScore(CreditCard card, String keyword)","1","Signature Change, Body Change","Minor changes in error handling","ea3bb40f9b6028f2570d89315f1a43a0c486d660","prerakshah"
"19","private static int countOccurrences(String text, String keyword)
	{
		int count = 0;
		int index = text.indexOf(keyword);

		while(index != -1)
		{
			count++;
			index = text.indexOf(keyword, index + keyword.length());
		}

		return count;
	}","private static int countOccurrences(String text, String keyword)","1","Signature Change, Body Change","Minor changes in error handling","ea3bb40f9b6028f2570d89315f1a43a0c486d660","prerakshah"
"20","private static Map<String, Integer> sortByValue(Map<String, Integer> map)
	{
		List<Map.Entry<String, Integer>> entries = new ArrayList<>(map.entrySet());
		entries.sort((e1, e2) -> e2.getValue().compareTo(e1.getValue()));

		Map<String, Integer> sortedMap = new LinkedHashMap<>();
		for(Map.Entry<String, Integer> entry : entries)
		{
			sortedMap.put(entry.getKey(), entry.getValue());
		}
		return sortedMap;
	}","private static Map<String, Integer> sortByValue(Map<String, Integer> map)","1","Signature Change, Body Change","Minor changes in error handling","ea3bb40f9b6028f2570d89315f1a43a0c486d660","prerakshah"
"21","public static Map<String, Integer> RankBankBasedOnWordFrequency(String wordSearch, ArrayList<CreditCard> cardList) throws IOException
	{
		Map<String, Integer> rankedBanks = rankBanksByKeywordFrequency(cardList, wordSearch);
		return rankedBanks;
	}","public static Map<String, Integer> RankBankBasedOnWordFrequency(String wordSearch, ArrayList<CreditCard> cardList) throws IOException","1","Signature Change, Body Change","Minor changes in error handling","ea3bb40f9b6028f2570d89315f1a43a0c486d660","prerakshah"
"22","public static void main(String[] args)
	{
		// Load the JSON file containing the selectors
		String jsonFilePath = ""src/selectors.json""; // Replace with the actual path to selector.json

		// Read the content of the selector.json file
		String jsonContent = readFile(jsonFilePath);

		// Parse the JSON content
		JSONObject jsonObject = new JSONObject(jsonContent);

		// Get the selectors for 'td', 'scotiabank', 'cibc', and 'RBC'
		JSONObject tdSelectors = jsonObject.getJSONObject(""selectors"").getJSONObject(""td"");
		JSONObject scotiaSelectors = jsonObject.getJSONObject(""selectors"").getJSONObject(""scotiabank"");
		JSONObject cibcSelectors = jsonObject.getJSONObject(""selectors"").getJSONObject(""cibc"");

		JSONObject rbcSelectors = jsonObject.getJSONObject(""selectors"").getJSONObject(""rbc"");

		// Extract the selectors
		String tdAdvantages = tdSelectors.getString(""advantages"");
		String tdCardNameSelector = tdSelectors.getString(""card_name"");
		String tdCardAnuallFeeSelector = tdSelectors.getString(""annualFee"");
		String tdPurchaseRate = tdSelectors.getString(""purchaseInterestRate"");
		String scotiaCardNameSelector = scotiaSelectors.getString(""cardName"");
		String scotiaAnnualFeeSelector = scotiaSelectors.getString(""annualFee"");
		String scotiaPurchaseRate = scotiaSelectors.getString(""purchaseInterestRate"");
		String scotiaAdditionalFeature = scotiaSelectors.getString(""additionalFeatures"");
		String rbcCardName = rbcSelectors.getString(""cardName"");

		// CIBC Selectors (fixed key names)
		String cibcCardNameSelector = cibcSelectors.getString(""card_name""); // Use ""card_name""
		String cibcAnnualFeeSelector = cibcSelectors.getString(""annual_fee""); // Use ""annual_fee""
		String cibcInterestRateSelector = cibcSelectors.getString(""purchase_rate""); // Use ""purchase_rate""
		String cibcAdditionalFeaturesSelector = cibcSelectors.getString(""advatnages""); // Use ""benefits""

		// Directory paths for saved HTML pages and output txt file
		String inputDirectory = ""saved_pages/""; // Directory containing crawled HTML pages
		String outputDirectory = ""text_pages/""; // Directory where extracted data will be saved

		// Ensure output directory exists
		new File(outputDirectory).mkdirs();

		// Process all HTML files in the saved_pages directory
		try
		{
			List<Path> htmlFiles = Files.walk(Paths.get(inputDirectory)).filter(Files::isRegularFile).filter(path -> path.toString().endsWith("".html"")).toList();

			StringBuilder tdExtractedText = new StringBuilder();
			StringBuilder scotiaExtractedText = new StringBuilder();
			StringBuilder cibcExtractedText = new StringBuilder();
			StringBuilder rbcExtractedText = new StringBuilder();

			for(Path htmlFile : htmlFiles)
			{
				String htmlContent = readFile(htmlFile.toString());
				Document doc = Jsoup.parse(htmlContent);

				// --- TD Data Extraction ---
				Elements tdCardNameElements = doc.select(tdCardNameSelector);
				Elements tdAnnualFeeInfoElements = doc.select(tdCardAnuallFeeSelector);
				Elements tdInterestRateElements = doc.select(tdPurchaseRate); // This will target the interest rate percentage
				Elements tdAdditionalFeatureElements = doc.select(tdAdvantages); // Select all paragraphs containing ""earn""

				// Remove all <sup> tags from the selected elements
				tdCardNameElements.select(""sup"").remove();
				tdAnnualFeeInfoElements.select(""sup"").remove();
				tdInterestRateElements.select(""sup"").remove();
				tdAdditionalFeatureElements.select(""sup"").remove();

				String tdCardNameRegex = ""(?<=Recently Viewed\\s)(.*?)(?=\\sCard)"";
				boolean flag = true;
				for(int i = 0; i < tdCardNameElements.size(); i++)
				{
					String rawCardName = tdCardNameElements.size() > i ? tdCardNameElements.get(i).text() : ""No Card Name"";
					String cardName = extractCardName(rawCardName, tdCardNameRegex);
					String annualFee = extractFee(tdAnnualFeeInfoElements, i);

					if(annualFee.isEmpty() || ""No data"".equalsIgnoreCase(annualFee))
					{
						annualFee = ""$0"";
					}

					// Extract the interest rate (only percentage values like 19.99%)
					String purchaseInterestRate = ""No Interest Rate""; // Default in case no rate is found
					if(tdInterestRateElements.size() > i)
					{
						String interestText = tdInterestRateElements.get(i).text();
						// Extract only the percentage value using regex (e.g., 19.99%)
						purchaseInterestRate = interestText.replaceAll(""[^\\d.]+%"", """").trim() + ""%"";
					}

					// Extract additional feature if any paragraph contains ""earn""
					String additionalFeature = ""No Advantages""; // Default if no match
					if(i < tdAdditionalFeatureElements.size())
					{
						String additionalText = tdAdditionalFeatureElements.get(i).text();

						// Remove unwanted parts (like hyperlinks and extra info like UDINQEN13SUP18)
						additionalText = additionalText.replaceAll(""<a[^>]*>(.*?)</a>"", """"); // Remove <a> tags (href links)
						additionalText = additionalText.replaceAll(""\\s+Conditions Apply.*"", """"); // Remove anything after ""Conditions Apply""

						// Clean the text further by removing any non-relevant tags or content
						additionalFeature = additionalText.trim();
					}

					// Determine card type based on card name
					String cardType = ""Unknown""; // Default card type
					if(cardName.toLowerCase().contains(""visa""))
					{
						cardType = ""Visa Card"";
					}
					else if(cardName.toLowerCase().contains(""mastercard""))
					{
						cardType = ""MasterCard"";
					}

					if(flag)
					{
						tdExtractedText.append(""Card Name\tCardtype\tAnnual Fee\tPurchase Interest Rate\tAdditional Feature\n"");
						flag = false;
					}

					tdExtractedText.append(cleanText(cardName).trim() + ""\t"" + cardType.trim() + ""\t"" + cleanText(annualFee).trim() + ""\t"" + cleanText(purchaseInterestRate).trim() + ""\t""
							+ cleanText(additionalFeature).trim() + ""\n"");

				}

				// --- Scotiabank Data Extraction ---
				Elements scotiaCardNameElements = doc.select(scotiaCardNameSelector);
				Elements scotiaAnnualFeeElements = doc.select(scotiaAnnualFeeSelector);
				Elements scotiaPurchaseInterestRateElements = doc.select(scotiaPurchaseRate);
				Elements scotiaAdditionalFeatureElements = doc.select(scotiaAdditionalFeature);
				flag = true;

				for(int i = 0; i < scotiaCardNameElements.size(); i++)
				{
					String cardName = scotiaCardNameElements.size() > i ? scotiaCardNameElements.get(i).text() : ""No Card Name"";
					String annualFee = extractFee(scotiaAnnualFeeElements, i);
					String purchaseInterestRate = extractFee(scotiaPurchaseInterestRateElements, i);
					String additionalFeature = extractFeature(scotiaAdditionalFeatureElements, i);

					// Determine card type based on card name
					String cardType = ""Unknown"";
					if(cardName.toLowerCase().contains(""visa""))
					{
						cardType = ""Visa Card"";
					}
					else if(cardName.toLowerCase().contains(""mastercard""))
					{
						cardType = ""MasterCard"";
					}
					else if(cardName.toLowerCase().contains(""american express""))
					{
						cardType = ""American Express"";
					}
					if(flag)
					{
						scotiaExtractedText.append(""Card Name\tCardtype\tAnnual Fee\tPurchase Interest Rate\tAdditional Feature\n"");
						flag = false;
					}

					scotiaExtractedText.append(cardName.trim() + ""\t"" + cardType.trim() + ""\t"" + annualFee.trim() + ""\t"" + purchaseInterestRate.trim() + ""\t"" + additionalFeature.trim() + ""\n"");
				}

				// --- CIBC Bank Data Extraction ---
				Elements cibcCardNameElements = doc.select(cibcCardNameSelector);
				Elements cibcAnnualFeeElements = doc.select(cibcAnnualFeeSelector);
				Elements cibcInterestRateElements = doc.select(cibcInterestRateSelector);
				Elements cibcAdditionalFeaturesElements = doc.select(cibcAdditionalFeaturesSelector);
				flag = true;
				for(int i = 0; i < cibcCardNameElements.size(); i++)
				{
					// Extract card name, annual fee, interest rate, and additional features
					String cardName = cibcCardNameElements.size() > i ? cibcCardNameElements.get(i).text() : ""No Card Name"";
					String annualFee = cibcAnnualFeeElements.size() > i ? cibcAnnualFeeElements.get(i).text() : ""No Annual Fee"";
					String interestRates = cibcInterestRateElements.size() > i ? cibcInterestRateElements.get(i).text() : ""No Interest Rates"";
					String additionalFeatures = cibcAdditionalFeaturesElements.size() > i ? cibcAdditionalFeaturesElements.get(i).text() : ""No Additional Features"";

					// Determine card type based on card name
					String cardType = ""Unknown Card Type""; // Default value
					if(cardName.toLowerCase().contains(""visa""))
					{
						cardType = ""Visa Card"";
					}
					else if(cardName.toLowerCase().contains(""mastercard""))
					{
						cardType = ""MasterCard"";
					} // Add more conditions here for other card types, if needed

					// Filter out non-percentage values from the interest rates
					if(interestRates.matches("".*\\d+\\.\\d+%$""))
					{
						interestRates = interestRates.replaceAll("".*(\\d+\\.\\d+%)$"", ""$1"");
					}
					else
					{
						interestRates = ""No Interest Rates"";
					}

					if(flag)
					{
						cibcExtractedText.append(""Card Name\tCardtype\tAnnual Fee\tPurchase Interest Rate\tAdditional Feature\n"");
						flag = false;
					}

					cibcExtractedText.append(cardName.trim() + ""\t"" + cardType.trim() + ""\t"" + annualFee.trim() + ""\t"" + interestRates.trim() + ""\t"" + additionalFeatures.trim() + ""\n"");

				}
				// --- RBC Data Extraction ---
				Elements rbcCardNameElements = doc.select(rbcCardName);

				for(int i = 0; i < rbcCardNameElements.size(); i++)
				{
					String cardName = rbcCardNameElements.size() > i ? rbcCardNameElements.get(i).text() : ""No Card Name"";

					// Determine the card type based on the card name
					String cardType = ""Unknown""; // Default card type
					if(cardName.toLowerCase().contains(""visa""))
					{
						cardType = ""Visa Card"";
					}
					else if(cardName.toLowerCase().contains(""mastercard""))
					{
						cardType = ""MasterCard"";
					}

					// Append extracted data
					rbcExtractedText.append(""Card Name: "").append(cardName).append("" \n "");
					rbcExtractedText.append(""Card Type: "").append(cardType).append(""\n"");
				}

			}

			// Save the extracted data to output files
			saveToFile(outputDirectory + ""td_cards.txt"", tdExtractedText.toString());
			System.out.println(""The data for TD Bank is stored in td_cards.txt"");
			saveToFile(outputDirectory + ""scotiabank_cards.txt"", scotiaExtractedText.toString());
			System.out.println(""The data for Scotiabank is stored in scotiabank_cards.txt"");
			saveToFile(outputDirectory + ""cibc_cards.txt"", cibcExtractedText.toString());
			System.out.println(""The data for CIBC is stored in cibc_cards.txt"");
			saveToFile(outputDirectory + ""rbc_cards.txt"", rbcExtractedText.toString());
			System.out.println(""The data for RBC is stored in rbc_cards.txt"");
			System.out.println(""Data extraction complete! Check the output files."");

		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}","public static void main(String[] args)","2","Body Change","Code clean for webcrawler junk files
","2b6f908c5ce63d119bed49a8c0184ba9d3da6091","sagar9233"
"23","public static void main(String[] args)
	{
		// Load the JSON file containing the selectors
		String jsonFilePath = ""src/selectors.json""; // Replace with the actual path to selector.json

		// Read the content of the selector.json file
		String jsonContent = readFile(jsonFilePath);

		// Parse the JSON content
		JSONObject jsonObject = new JSONObject(jsonContent);

		// Get the selectors for 'td', 'scotiabank', 'cibc', and 'RBC'
		JSONObject tdSelectors = jsonObject.getJSONObject(""selectors"").getJSONObject(""td"");
		JSONObject scotiaSelectors = jsonObject.getJSONObject(""selectors"").getJSONObject(""scotiabank"");
		JSONObject cibcSelectors = jsonObject.getJSONObject(""selectors"").getJSONObject(""cibc"");

		JSONObject rbcSelectors = jsonObject.getJSONObject(""selectors"").getJSONObject(""rbc"");

		// Extract the selectors
		String tdAdvantages = tdSelectors.getString(""advantages"");
		String tdCardNameSelector = tdSelectors.getString(""card_name"");
		String tdCardAnuallFeeSelector = tdSelectors.getString(""annualFee"");
		String tdPurchaseRate = tdSelectors.getString(""purchaseInterestRate"");
		String scotiaCardNameSelector = scotiaSelectors.getString(""cardName"");
		String scotiaAnnualFeeSelector = scotiaSelectors.getString(""annualFee"");
		String scotiaPurchaseRate = scotiaSelectors.getString(""purchaseInterestRate"");
		String scotiaAdditionalFeature = scotiaSelectors.getString(""additionalFeatures"");
		String rbcCardName = rbcSelectors.getString(""cardName"");

		// CIBC Selectors (fixed key names)
		String cibcCardNameSelector = cibcSelectors.getString(""card_name""); // Use ""card_name""
		String cibcAnnualFeeSelector = cibcSelectors.getString(""annual_fee""); // Use ""annual_fee""
		String cibcInterestRateSelector = cibcSelectors.getString(""purchase_rate""); // Use ""purchase_rate""
		String cibcAdditionalFeaturesSelector = cibcSelectors.getString(""advatnages""); // Use ""benefits""

		// Directory paths for saved HTML pages and output txt file
		String inputDirectory = ""saved_pages/""; // Directory containing crawled HTML pages
		String outputDirectory = ""text_pages/""; // Directory where extracted data will be saved

		// Ensure output directory exists
		new File(outputDirectory).mkdirs();

		// Process all HTML files in the saved_pages directory
		try
		{
			List<Path> htmlFiles = Files.walk(Paths.get(inputDirectory)).filter(Files::isRegularFile).filter(path -> path.toString().endsWith("".html"")).toList();

			StringBuilder tdExtractedText = new StringBuilder();
			StringBuilder scotiaExtractedText = new StringBuilder();
			StringBuilder cibcExtractedText = new StringBuilder();
			StringBuilder rbcExtractedText = new StringBuilder();

			for(Path htmlFile : htmlFiles)
			{
				String htmlContent = readFile(htmlFile.toString());
				Document doc = Jsoup.parse(htmlContent);

				// --- TD Data Extraction ---
				Elements tdCardNameElements = doc.select(tdCardNameSelector);
				Elements tdAnnualFeeInfoElements = doc.select(tdCardAnuallFeeSelector);
				Elements tdInterestRateElements = doc.select(tdPurchaseRate); // This will target the interest rate percentage
				Elements tdAdditionalFeatureElements = doc.select(tdAdvantages); // Select all paragraphs containing ""earn""

				// Remove all <sup> tags from the selected elements
				tdCardNameElements.select(""sup"").remove();
				tdAnnualFeeInfoElements.select(""sup"").remove();
				tdInterestRateElements.select(""sup"").remove();
				tdAdditionalFeatureElements.select(""sup"").remove();

				String tdCardNameRegex = ""(?<=Recently Viewed\\s)(.*?)(?=\\sCard)"";
				boolean flag = true;
				for(int i = 0; i < tdCardNameElements.size(); i++)
				{
					String rawCardName = tdCardNameElements.size() > i ? tdCardNameElements.get(i).text() : ""No Card Name"";
					String cardName = extractCardName(rawCardName, tdCardNameRegex);
					String annualFee = extractFee(tdAnnualFeeInfoElements, i);

					if(annualFee.isEmpty() || ""No data"".equalsIgnoreCase(annualFee))
					{
						annualFee = ""$0"";
					}

					// Extract the interest rate (only percentage values like 19.99%)
					String purchaseInterestRate = ""No Interest Rate""; // Default in case no rate is found
					if(tdInterestRateElements.size() > i)
					{
						String interestText = tdInterestRateElements.get(i).text();
						// Extract only the percentage value using regex (e.g., 19.99%)
						purchaseInterestRate = interestText.replaceAll(""[^\\d.]+%"", """").trim() + ""%"";
					}

					// Extract additional feature if any paragraph contains ""earn""
					String additionalFeature = ""No Advantages""; // Default if no match
					if(i < tdAdditionalFeatureElements.size())
					{
						String additionalText = tdAdditionalFeatureElements.get(i).text();

						// Remove unwanted parts (like hyperlinks and extra info like UDINQEN13SUP18)
						additionalText = additionalText.replaceAll(""<a[^>]*>(.*?)</a>"", """"); // Remove <a> tags (href links)
						additionalText = additionalText.replaceAll(""\\s+Conditions Apply.*"", """"); // Remove anything after ""Conditions Apply""

						// Clean the text further by removing any non-relevant tags or content
						additionalFeature = additionalText.trim();
					}

					// Determine card type based on card name
					String cardType = ""Unknown""; // Default card type
					if(cardName.toLowerCase().contains(""visa""))
					{
						cardType = ""Visa Card"";
					}
					else if(cardName.toLowerCase().contains(""mastercard""))
					{
						cardType = ""MasterCard"";
					}

					if(flag)
					{
						tdExtractedText.append(""Card Name\tCardtype\tAnnual Fee\tPurchase Interest Rate\tAdditional Feature\n"");
						flag = false;
					}

					tdExtractedText.append(cleanText(cardName).trim() + ""\t"" + cardType.trim() + ""\t"" + cleanText(annualFee).trim() + ""\t"" + cleanText(purchaseInterestRate).trim() + ""\t""
							+ cleanText(additionalFeature).trim() + ""\n"");

				}

				// --- Scotiabank Data Extraction ---
				Elements scotiaCardNameElements = doc.select(scotiaCardNameSelector);
				Elements scotiaAnnualFeeElements = doc.select(scotiaAnnualFeeSelector);
				Elements scotiaPurchaseInterestRateElements = doc.select(scotiaPurchaseRate);
				Elements scotiaAdditionalFeatureElements = doc.select(scotiaAdditionalFeature);
				flag = true;

				for(int i = 0; i < scotiaCardNameElements.size(); i++)
				{
					String cardName = scotiaCardNameElements.size() > i ? scotiaCardNameElements.get(i).text() : ""No Card Name"";
					String annualFee = extractFee(scotiaAnnualFeeElements, i);
					String purchaseInterestRate = extractFee(scotiaPurchaseInterestRateElements, i);
					String additionalFeature = extractFeature(scotiaAdditionalFeatureElements, i);

					// Determine card type based on card name
					String cardType = ""Unknown"";
					if(cardName.toLowerCase().contains(""visa""))
					{
						cardType = ""Visa Card"";
					}
					else if(cardName.toLowerCase().contains(""mastercard""))
					{
						cardType = ""MasterCard"";
					}
					else if(cardName.toLowerCase().contains(""american express""))
					{
						cardType = ""American Express"";
					}
					if(flag)
					{
						scotiaExtractedText.append(""Card Name\tCardtype\tAnnual Fee\tPurchase Interest Rate\tAdditional Feature\n"");
						flag = false;
					}

					scotiaExtractedText.append(cardName.trim() + ""\t"" + cardType.trim() + ""\t"" + annualFee.trim() + ""\t"" + purchaseInterestRate.trim() + ""\t"" + additionalFeature.trim() + ""\n"");
				}

				// --- CIBC Bank Data Extraction ---
				Elements cibcCardNameElements = doc.select(cibcCardNameSelector);
				Elements cibcAnnualFeeElements = doc.select(cibcAnnualFeeSelector);
				Elements cibcInterestRateElements = doc.select(cibcInterestRateSelector);
				Elements cibcAdditionalFeaturesElements = doc.select(cibcAdditionalFeaturesSelector);
				flag = true;
				for(int i = 0; i < cibcCardNameElements.size(); i++)
				{
					// Extract card name, annual fee, interest rate, and additional features
					String cardName = cibcCardNameElements.size() > i ? cibcCardNameElements.get(i).text() : ""No Card Name"";
					String annualFee = cibcAnnualFeeElements.size() > i ? cibcAnnualFeeElements.get(i).text() : ""No Annual Fee"";
					String interestRates = cibcInterestRateElements.size() > i ? cibcInterestRateElements.get(i).text() : ""No Interest Rates"";
					String additionalFeatures = cibcAdditionalFeaturesElements.size() > i ? cibcAdditionalFeaturesElements.get(i).text() : ""No Additional Features"";

					// Determine card type based on card name
					String cardType = ""Unknown Card Type""; // Default value
					if(cardName.toLowerCase().contains(""visa""))
					{
						cardType = ""Visa Card"";
					}
					else if(cardName.toLowerCase().contains(""mastercard""))
					{
						cardType = ""MasterCard"";
					} // Add more conditions here for other card types, if needed

					// Filter out non-percentage values from the interest rates
					if(interestRates.matches("".*\\d+\\.\\d+%$""))
					{
						interestRates = interestRates.replaceAll("".*(\\d+\\.\\d+%)$"", ""$1"");
					}
					else
					{
						interestRates = ""No Interest Rates"";
					}

					if(flag)
					{
						cibcExtractedText.append(""Card Name\tCardtype\tAnnual Fee\tPurchase Interest Rate\tAdditional Feature\n"");
						flag = false;
					}

					cibcExtractedText.append(cardName.trim() + ""\t"" + cardType.trim() + ""\t"" + annualFee.trim() + ""\t"" + interestRates.trim() + ""\t"" + additionalFeatures.trim() + ""\n"");

				}
				// --- RBC Data Extraction ---
				Elements rbcCardNameElements = doc.select(rbcCardName);

				for(int i = 0; i < rbcCardNameElements.size(); i++)
				{
					String cardName = rbcCardNameElements.size() > i ? rbcCardNameElements.get(i).text() : ""No Card Name"";

					// Determine the card type based on the card name
					String cardType = ""Unknown""; // Default card type
					if(cardName.toLowerCase().contains(""visa""))
					{
						cardType = ""Visa Card"";
					}
					else if(cardName.toLowerCase().contains(""mastercard""))
					{
						cardType = ""MasterCard"";
					}

					// Append extracted data
					rbcExtractedText.append(""Card Name: "").append(cardName).append("" \n "");
					rbcExtractedText.append(""Card Type: "").append(cardType).append(""\n"");
				}

			}

			// Save the extracted data to output files
			saveToFile(outputDirectory + ""td_cards.txt"", tdExtractedText.toString());
			System.out.println(""The data for TD Bank is stored in td_cards.txt"");
			saveToFile(outputDirectory + ""scotiabank_cards.txt"", scotiaExtractedText.toString());
			System.out.println(""The data for Scotiabank is stored in scotiabank_cards.txt"");
			saveToFile(outputDirectory + ""cibc_cards.txt"", cibcExtractedText.toString());
			System.out.println(""The data for CIBC is stored in cibc_cards.txt"");
			saveToFile(outputDirectory + ""rbc_cards.txt"", rbcExtractedText.toString());
			System.out.println(""The data for RBC is stored in rbc_cards.txt"");
			System.out.println(""Data extraction complete! Check the output files."");

		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}","public static void main(String[] args)","2","Body Change","Separated code from main class, code BeuatyFication.","cc3da180b5aa43ee9e307a2f60aa21461db88ba2","prerakshah"
"24","public static void SearchInputs() throws IOException
	{
		Scanner scanner = new Scanner(System.in); // Use Scanner instead of BufferedReader
		while(true)
		{
			System.out.println(""\nChoose an option:"");
			System.out.println(""1. Bank Name"");
			System.out.println(""2. Card Name"");
			System.out.println(""3. Card Type"");
			System.out.println(""4. Exit"");

			System.out.print(""Enter your choice (1-3): "");
			String choice = scanner.nextLine(); // Read input using Scanner

			switch(choice)
			{
				case ""1"":
					String bankName = Validation.getWordOnlyInput(scanner, ""Enter Bank Name: "").toLowerCase(); // Get user input for Bank Name
					addSearchTerm(bankName, ""Bank Name"");
					break;
				case ""2"":
					String cardName = Validation.getWordOnlyInput(scanner, ""Enter Card Name: "").toLowerCase(); // Get user input for Card Name
					addSearchTerm(cardName, ""Card Name"");
					break;
				case ""3"":
					String cardType = Validation.getWordOnlyInput(scanner, ""Enter Card Type: "").toLowerCase(); // Get user input for Card Type
					addSearchTerm(cardType, ""Card Type"");
					break;
				case ""4"":
					System.out.println(""Going Back To The Search Menu..."");
					return;
				default:
					System.out.println(""Invalid choice. Please try again."");
					break;
			}
		}
	}","public static void SearchInputs() throws IOException","6","Body Change","Merge remote-tracking branch 'origin/master'

# Conflicts:
#	src/main/java/com/creditWise/CardAnalytiX/Executer.java
","f0e22f1a018cc8c584a6ca49c3cf31863b533e9e","Mahzabin Chowdhury"
"25","public static void SearchInputs() throws IOException
	{
		Scanner scanner = new Scanner(System.in); // Use Scanner instead of BufferedReader
		while(true)
		{
			System.out.println(""\nChoose an option:"");
			System.out.println(""1. Bank Name"");
			System.out.println(""2. Card Name"");
			System.out.println(""3. Card Type"");
			System.out.println(""4. Exit"");

			System.out.print(""Enter your choice (1-3): "");
			String choice = scanner.nextLine(); // Read input using Scanner

			switch(choice)
			{
				case ""1"":
					String bankName = Validation.getWordOnlyInput(scanner, ""Enter Bank Name: "").toLowerCase(); // Get user input for Bank Name
					addSearchTerm(bankName, ""Bank Name"");
					break;
				case ""2"":
					String cardName = Validation.getWordOnlyInput(scanner, ""Enter Card Name: "").toLowerCase(); // Get user input for Card Name
					addSearchTerm(cardName, ""Card Name"");
					break;
				case ""3"":
					String cardType = Validation.getWordOnlyInput(scanner, ""Enter Card Type: "").toLowerCase(); // Get user input for Card Type
					addSearchTerm(cardType, ""Card Type"");
					break;
				case ""4"":
					System.out.println(""Going Back To The Search Menu..."");
					return;
				default:
					System.out.println(""Invalid choice. Please try again."");
					break;
			}
		}
	}","public static void SearchInputs() throws IOException","6","Signature Change, Body Change","Minor changes in error handling","ea3bb40f9b6028f2570d89315f1a43a0c486d660","prerakshah"
"26","public static void SearchInputs() throws IOException
	{
		Scanner scanner = new Scanner(System.in); // Use Scanner instead of BufferedReader
		while(true)
		{
			System.out.println(""\nChoose an option:"");
			System.out.println(""1. Bank Name"");
			System.out.println(""2. Card Name"");
			System.out.println(""3. Card Type"");
			System.out.println(""4. Exit"");

			System.out.print(""Enter your choice (1-3): "");
			String choice = scanner.nextLine(); // Read input using Scanner

			switch(choice)
			{
				case ""1"":
					String bankName = Validation.getWordOnlyInput(scanner, ""Enter Bank Name: "").toLowerCase(); // Get user input for Bank Name
					addSearchTerm(bankName, ""Bank Name"");
					break;
				case ""2"":
					String cardName = Validation.getWordOnlyInput(scanner, ""Enter Card Name: "").toLowerCase(); // Get user input for Card Name
					addSearchTerm(cardName, ""Card Name"");
					break;
				case ""3"":
					String cardType = Validation.getWordOnlyInput(scanner, ""Enter Card Type: "").toLowerCase(); // Get user input for Card Type
					addSearchTerm(cardType, ""Card Type"");
					break;
				case ""4"":
					System.out.println(""Going Back To The Search Menu..."");
					return;
				default:
					System.out.println(""Invalid choice. Please try again."");
					break;
			}
		}
	}","public static void SearchInputs() throws IOException","6","Body Change","Final Validation
","6b7efee1e50f87e0f8e8061454ed8f5900ef3eaa","sag7ai"
"27","public static void SearchInputs() throws IOException
	{
		Scanner scanner = new Scanner(System.in); // Use Scanner instead of BufferedReader
		while(true)
		{
			System.out.println(""\nChoose an option:"");
			System.out.println(""1. Bank Name"");
			System.out.println(""2. Card Name"");
			System.out.println(""3. Card Type"");
			System.out.println(""4. Exit"");

			System.out.print(""Enter your choice (1-3): "");
			String choice = scanner.nextLine(); // Read input using Scanner

			switch(choice)
			{
				case ""1"":
					String bankName = Validation.getWordOnlyInput(scanner, ""Enter Bank Name: "").toLowerCase(); // Get user input for Bank Name
					addSearchTerm(bankName, ""Bank Name"");
					break;
				case ""2"":
					String cardName = Validation.getWordOnlyInput(scanner, ""Enter Card Name: "").toLowerCase(); // Get user input for Card Name
					addSearchTerm(cardName, ""Card Name"");
					break;
				case ""3"":
					String cardType = Validation.getWordOnlyInput(scanner, ""Enter Card Type: "").toLowerCase(); // Get user input for Card Type
					addSearchTerm(cardType, ""Card Type"");
					break;
				case ""4"":
					System.out.println(""Going Back To The Search Menu..."");
					return;
				default:
					System.out.println(""Invalid choice. Please try again."");
					break;
			}
		}
	}","public static void SearchInputs() throws IOException","6","Body Change","Handled abnormal cases, and handled exception.","e4a4c994832750399debf1a03fb418fb1ec30a4d","prerakshah"
"28","public static void SearchInputs() throws IOException
	{
		Scanner scanner = new Scanner(System.in); // Use Scanner instead of BufferedReader
		while(true)
		{
			System.out.println(""\nChoose an option:"");
			System.out.println(""1. Bank Name"");
			System.out.println(""2. Card Name"");
			System.out.println(""3. Card Type"");
			System.out.println(""4. Exit"");

			System.out.print(""Enter your choice (1-3): "");
			String choice = scanner.nextLine(); // Read input using Scanner

			switch(choice)
			{
				case ""1"":
					String bankName = Validation.getWordOnlyInput(scanner, ""Enter Bank Name: "").toLowerCase(); // Get user input for Bank Name
					addSearchTerm(bankName, ""Bank Name"");
					break;
				case ""2"":
					String cardName = Validation.getWordOnlyInput(scanner, ""Enter Card Name: "").toLowerCase(); // Get user input for Card Name
					addSearchTerm(cardName, ""Card Name"");
					break;
				case ""3"":
					String cardType = Validation.getWordOnlyInput(scanner, ""Enter Card Type: "").toLowerCase(); // Get user input for Card Type
					addSearchTerm(cardType, ""Card Type"");
					break;
				case ""4"":
					System.out.println(""Going Back To The Search Menu..."");
					return;
				default:
					System.out.println(""Invalid choice. Please try again."");
					break;
			}
		}
	}","public static void SearchInputs() throws IOException","6","Body Change","Revert ""Handled abnormal cases, and handled exception.""

This reverts commit e4a4c994832750399debf1a03fb418fb1ec30a4d.
","d6b53fbc7a60ad7eac270c8683b9adbd2c51a2b2","prerakshah"
"29","public static void SearchInputs() throws IOException
	{
		Scanner scanner = new Scanner(System.in); // Use Scanner instead of BufferedReader
		while(true)
		{
			System.out.println(""\nChoose an option:"");
			System.out.println(""1. Bank Name"");
			System.out.println(""2. Card Name"");
			System.out.println(""3. Card Type"");
			System.out.println(""4. Exit"");

			System.out.print(""Enter your choice (1-3): "");
			String choice = scanner.nextLine(); // Read input using Scanner

			switch(choice)
			{
				case ""1"":
					String bankName = Validation.getWordOnlyInput(scanner, ""Enter Bank Name: "").toLowerCase(); // Get user input for Bank Name
					addSearchTerm(bankName, ""Bank Name"");
					break;
				case ""2"":
					String cardName = Validation.getWordOnlyInput(scanner, ""Enter Card Name: "").toLowerCase(); // Get user input for Card Name
					addSearchTerm(cardName, ""Card Name"");
					break;
				case ""3"":
					String cardType = Validation.getWordOnlyInput(scanner, ""Enter Card Type: "").toLowerCase(); // Get user input for Card Type
					addSearchTerm(cardType, ""Card Type"");
					break;
				case ""4"":
					System.out.println(""Going Back To The Search Menu..."");
					return;
				default:
					System.out.println(""Invalid choice. Please try again."");
					break;
			}
		}
	}","public static void SearchInputs() throws IOException","6","Body Change","solved loop error","f87932d3c4b553d61b04f5dee0a44d473744bc99","prerakshah"
"30","private static void addSearchTerm(String term, String field) throws IOException
	{
		// Call the autocomplete and get the selected term
		String selectedTerm = Executer.spellCheckAndWordComplete(term);

		// Only proceed if a valid selection is made
		if(selectedTerm == null || selectedTerm.isEmpty())
		{
			System.out.println(""No valid selection made. Term not saved."");
			return;
		}

		// Insert into the appropriate tree
		switch(field)
		{
			case ""Bank Name"":
				bankNamesTree.insert(selectedTerm);
				break;
			case ""Card Name"":
				cardNamesTree.insert(selectedTerm);
				break;
			case ""Card Type"":
				cardTypesTree.insert(selectedTerm);
				break;
		}

		getAndPrintCreditCard(selectedTerm);
		saveSearchTermToCSV(selectedTerm, field);
	}","private static void addSearchTerm(String term, String field) throws IOException","2","Body Change","Merge remote-tracking branch 'origin/master'

# Conflicts:
#	src/main/java/com/creditWise/CardAnalytiX/Executer.java
","f0e22f1a018cc8c584a6ca49c3cf31863b533e9e","Mahzabin Chowdhury"
"31","private static void addSearchTerm(String term, String field) throws IOException
	{
		// Call the autocomplete and get the selected term
		String selectedTerm = Executer.spellCheckAndWordComplete(term);

		// Only proceed if a valid selection is made
		if(selectedTerm == null || selectedTerm.isEmpty())
		{
			System.out.println(""No valid selection made. Term not saved."");
			return;
		}

		// Insert into the appropriate tree
		switch(field)
		{
			case ""Bank Name"":
				bankNamesTree.insert(selectedTerm);
				break;
			case ""Card Name"":
				cardNamesTree.insert(selectedTerm);
				break;
			case ""Card Type"":
				cardTypesTree.insert(selectedTerm);
				break;
		}

		getAndPrintCreditCard(selectedTerm);
		saveSearchTermToCSV(selectedTerm, field);
	}","private static void addSearchTerm(String term, String field) throws IOException","2","Body Change","Minor changes in error handling","ea3bb40f9b6028f2570d89315f1a43a0c486d660","prerakshah"
"32","private static void getAndPrintCreditCard(String selectedTerm) throws IOException
	{
		//		System.out.println(""##############"" + selectedTerm + ""######################"");
		ArrayList<CreditCard> cardList = Engine.Engine1();
		ArrayList<CreditCard> resultList = new ArrayList<CreditCard>();
		for(CreditCard creditCard : cardList)
		{
			if(creditCard.getBank().equalsIgnoreCase(selectedTerm))
			{
				resultList.add(creditCard);
			}

		}
		PreferenceBasedFilter.printCreditCardData(resultList);
	}","private static void getAndPrintCreditCard(String selectedTerm) throws IOException","1","Signature Change, Body Change","Minor changes in error handling","ea3bb40f9b6028f2570d89315f1a43a0c486d660","prerakshah"
"33","private static void saveSearchTermToCSV(String term, String field)
	{
		File csvFile = new File(SEARCHES_CSV);
		Map<String, String[]> data = new HashMap<>();

		try(BufferedReader reader = new BufferedReader(new FileReader(csvFile)))
		{
			String line;

			// Read all existing records and store them
			while((line = reader.readLine()) != null)
			{
				String[] parts = line.split("","");
				if(parts.length == 4)
				{ // Ensure correct column count
					String existingTerm = parts[0].trim();
					data.put(existingTerm, parts);
				}
			}

			// Update or add the record
			String[] updatedValues = data.getOrDefault(term, new String[] {"""", """", """", ""0""});
			switch(field)
			{
				case ""Bank Name"":
					updatedValues[0] = term;
					break; // No return, just break
				case ""Card Name"":
					updatedValues[1] = term;
					break; // No return, just break
				case ""Card Type"":
					updatedValues[2] = term;
					break; // No return, just break
			}
			updatedValues[3] = String.valueOf(Integer.parseInt(updatedValues[3]) + 1); // Increment frequency
			data.put(term, updatedValues);

			// Write back to CSV
			try(BufferedWriter writer = new BufferedWriter(new FileWriter(csvFile)))
			{
				writer.write(""Bank Name,Card Name,Card Type,Frequency\n""); // Header
				for(String[] values : data.values())
				{
					writer.write(String.join("","", values) + ""\n"");
				}
			}

		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}","private static void saveSearchTermToCSV(String term, String field)","2","Body Change","Merge remote-tracking branch 'origin/master'

# Conflicts:
#	src/main/java/com/creditWise/CardAnalytiX/Executer.java
","f0e22f1a018cc8c584a6ca49c3cf31863b533e9e","Mahzabin Chowdhury"
"34","private static void saveSearchTermToCSV(String term, String field)
	{
		File csvFile = new File(SEARCHES_CSV);
		Map<String, String[]> data = new HashMap<>();

		try(BufferedReader reader = new BufferedReader(new FileReader(csvFile)))
		{
			String line;

			// Read all existing records and store them
			while((line = reader.readLine()) != null)
			{
				String[] parts = line.split("","");
				if(parts.length == 4)
				{ // Ensure correct column count
					String existingTerm = parts[0].trim();
					data.put(existingTerm, parts);
				}
			}

			// Update or add the record
			String[] updatedValues = data.getOrDefault(term, new String[] {"""", """", """", ""0""});
			switch(field)
			{
				case ""Bank Name"":
					updatedValues[0] = term;
					break; // No return, just break
				case ""Card Name"":
					updatedValues[1] = term;
					break; // No return, just break
				case ""Card Type"":
					updatedValues[2] = term;
					break; // No return, just break
			}
			updatedValues[3] = String.valueOf(Integer.parseInt(updatedValues[3]) + 1); // Increment frequency
			data.put(term, updatedValues);

			// Write back to CSV
			try(BufferedWriter writer = new BufferedWriter(new FileWriter(csvFile)))
			{
				writer.write(""Bank Name,Card Name,Card Type,Frequency\n""); // Header
				for(String[] values : data.values())
				{
					writer.write(String.join("","", values) + ""\n"");
				}
			}

		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}","private static void saveSearchTermToCSV(String term, String field)","2","Body Change","Minor changes in error handling","ea3bb40f9b6028f2570d89315f1a43a0c486d660","prerakshah"
"35","public static void displaySearchTerms(String field)
	{
		File csvFile = new File(SEARCHES_CSV);
		Map<String, Integer> termFrequencyMap = new HashMap<>();

		try(BufferedReader reader = new BufferedReader(new FileReader(csvFile)))
		{
			String line;
			boolean isFirstLine = true; // Flag to skip the header row

			while((line = reader.readLine()) != null)
			{
				if(isFirstLine)
				{
					isFirstLine = false; // Skip the first line
					continue;
				}

				String[] parts = line.split("","");
				if(parts.length == 4)
				{ // Validate column count
					try
					{
						String term = parts[0].trim(); // Bank Name is assumed to be the first column
						int frequency = Integer.parseInt(parts[3].trim()); // Frequency column

						if(!term.isEmpty())
						{
							termFrequencyMap.put(term, termFrequencyMap.getOrDefault(term, 0) + frequency);
						}
					}
					catch(NumberFormatException e)
					{
					}
				}
			}

			// Display sorted terms
			System.out.println(""Popular "" + field + ""s based on user search frequency:"");
			termFrequencyMap.entrySet().stream().sorted((e1, e2) -> e2.getValue() - e1.getValue()).forEach(e -> System.out.println(e.getKey() + "" is popular with "" + e.getValue() + "" Searches""));

		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}","public static void displaySearchTerms(String field)","1","Body Change","Minor changes in error handling","ea3bb40f9b6028f2570d89315f1a43a0c486d660","prerakshah"
"36","public static void main(String[] args) throws IOException
	{
		Scanner scanner = new Scanner(System.in);
		System.out.println(""Welcome to the Credit Card Suggestion Tool!"");
		System.out.println(""Please answer the following question to get your best credit card suggestion:"");
		while(true)
		{

			System.out.println(""\n1. Do you want to crawl the website?"");
			System.out.println(""2. Or do you want to use existing data?"");
			System.out.println(""3. Do you want to Exit the Tool"");
			System.out.print(""Enter your choice (1, 2, or 3): "");
			try
			{
				int choice = scanner.nextInt();
				scanner.nextLine();
				switch(choice)
				{
					case 1:
						System.out.println(""\nYou chose to crawl the website."");
						System.out.println(""Initializing web crawler..."");
						Webcrawler.main(args);
						HtmlToText.main(args);

						case2Handler();
						break;

					case 2:
						case2Handler();

						break;
					case 3:
						System.out.println(""Exiting the tool..."");
						scanner.close();
						return; // Exit the program

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1, 2 or 3."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				// Handle non-integer input
				System.out.println(""Invalid input! Please enter a number between 1 and 7."");

				// Clear the invalid input
				scanner.nextLine();
			}
			catch(Exception e)
			{
				// Catch any other unexpected exceptions
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine(); // Clear the input buffer
			}
		}
	}","public static void main(String[] args) throws IOException","5","Body Change","New Executer File
","f4ca4c46c90ca9c611cc97f19c95106e48dbe4bd","sagar9233"
"37","public static void main(String[] args) throws IOException
	{
		Scanner scanner = new Scanner(System.in);
		System.out.println(""Welcome to the Credit Card Suggestion Tool!"");
		System.out.println(""Please answer the following question to get your best credit card suggestion:"");
		while(true)
		{

			System.out.println(""\n1. Do you want to crawl the website?"");
			System.out.println(""2. Or do you want to use existing data?"");
			System.out.println(""3. Do you want to Exit the Tool"");
			System.out.print(""Enter your choice (1, 2, or 3): "");
			try
			{
				int choice = scanner.nextInt();
				scanner.nextLine();
				switch(choice)
				{
					case 1:
						System.out.println(""\nYou chose to crawl the website."");
						System.out.println(""Initializing web crawler..."");
						Webcrawler.main(args);
						HtmlToText.main(args);

						case2Handler();
						break;

					case 2:
						case2Handler();

						break;
					case 3:
						System.out.println(""Exiting the tool..."");
						scanner.close();
						return; // Exit the program

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1, 2 or 3."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				// Handle non-integer input
				System.out.println(""Invalid input! Please enter a number between 1 and 7."");

				// Clear the invalid input
				scanner.nextLine();
			}
			catch(Exception e)
			{
				// Catch any other unexpected exceptions
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine(); // Clear the input buffer
			}
		}
	}","public static void main(String[] args) throws IOException","5","Signature Change, Body Change","Decide Structure and changes in base credit card class.","f1f01d92545774fe833a52e53e14e2ba302c44c7","prerakshah"
"38","public static void main(String[] args) throws IOException
	{
		Scanner scanner = new Scanner(System.in);
		System.out.println(""Welcome to the Credit Card Suggestion Tool!"");
		System.out.println(""Please answer the following question to get your best credit card suggestion:"");
		while(true)
		{

			System.out.println(""\n1. Do you want to crawl the website?"");
			System.out.println(""2. Or do you want to use existing data?"");
			System.out.println(""3. Do you want to Exit the Tool"");
			System.out.print(""Enter your choice (1, 2, or 3): "");
			try
			{
				int choice = scanner.nextInt();
				scanner.nextLine();
				switch(choice)
				{
					case 1:
						System.out.println(""\nYou chose to crawl the website."");
						System.out.println(""Initializing web crawler..."");
						Webcrawler.main(args);
						HtmlToText.main(args);

						case2Handler();
						break;

					case 2:
						case2Handler();

						break;
					case 3:
						System.out.println(""Exiting the tool..."");
						scanner.close();
						return; // Exit the program

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1, 2 or 3."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				// Handle non-integer input
				System.out.println(""Invalid input! Please enter a number between 1 and 7."");

				// Clear the invalid input
				scanner.nextLine();
			}
			catch(Exception e)
			{
				// Catch any other unexpected exceptions
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine(); // Clear the input buffer
			}
		}
	}","public static void main(String[] args) throws IOException","5","Body Change","Merge remote-tracking branch 'origin/master'
","5c3eb7d5154f18549a3269b0cee02b412291b007","Mahzabin Chowdhury"
"39","public static void main(String[] args) throws IOException
	{
		Scanner scanner = new Scanner(System.in);
		System.out.println(""Welcome to the Credit Card Suggestion Tool!"");
		System.out.println(""Please answer the following question to get your best credit card suggestion:"");
		while(true)
		{

			System.out.println(""\n1. Do you want to crawl the website?"");
			System.out.println(""2. Or do you want to use existing data?"");
			System.out.println(""3. Do you want to Exit the Tool"");
			System.out.print(""Enter your choice (1, 2, or 3): "");
			try
			{
				int choice = scanner.nextInt();
				scanner.nextLine();
				switch(choice)
				{
					case 1:
						System.out.println(""\nYou chose to crawl the website."");
						System.out.println(""Initializing web crawler..."");
						Webcrawler.main(args);
						HtmlToText.main(args);

						case2Handler();
						break;

					case 2:
						case2Handler();

						break;
					case 3:
						System.out.println(""Exiting the tool..."");
						scanner.close();
						return; // Exit the program

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1, 2 or 3."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				// Handle non-integer input
				System.out.println(""Invalid input! Please enter a number between 1 and 7."");

				// Clear the invalid input
				scanner.nextLine();
			}
			catch(Exception e)
			{
				// Catch any other unexpected exceptions
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine(); // Clear the input buffer
			}
		}
	}","public static void main(String[] args) throws IOException","5","Body Change","Implement: Inverted Index, page ranking, word frequency. Integrated also","c952d503ba3ff507ea8436349d8ed2be3db508d2","prerakshah"
"40","public static void main(String[] args) throws IOException
	{
		Scanner scanner = new Scanner(System.in);
		System.out.println(""Welcome to the Credit Card Suggestion Tool!"");
		System.out.println(""Please answer the following question to get your best credit card suggestion:"");
		while(true)
		{

			System.out.println(""\n1. Do you want to crawl the website?"");
			System.out.println(""2. Or do you want to use existing data?"");
			System.out.println(""3. Do you want to Exit the Tool"");
			System.out.print(""Enter your choice (1, 2, or 3): "");
			try
			{
				int choice = scanner.nextInt();
				scanner.nextLine();
				switch(choice)
				{
					case 1:
						System.out.println(""\nYou chose to crawl the website."");
						System.out.println(""Initializing web crawler..."");
						Webcrawler.main(args);
						HtmlToText.main(args);

						case2Handler();
						break;

					case 2:
						case2Handler();

						break;
					case 3:
						System.out.println(""Exiting the tool..."");
						scanner.close();
						return; // Exit the program

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1, 2 or 3."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				// Handle non-integer input
				System.out.println(""Invalid input! Please enter a number between 1 and 7."");

				// Clear the invalid input
				scanner.nextLine();
			}
			catch(Exception e)
			{
				// Catch any other unexpected exceptions
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine(); // Clear the input buffer
			}
		}
	}","public static void main(String[] args) throws IOException","5","Body Change","Implemented Error Handling in Executer file, Handle all input.","93c3935ad57dd39b681c0241cc99239809547f41","prerakshah"
"41","public static void case2Handler() throws IOException
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{

			System.out.println(""\n1. Show all Credit card Data"");
			System.out.println(""2. Fetch credit card according to this preferences: Card Type, Annual Fee, Bank Name, Interest Rate"");
			System.out.println(""3. Fetch data according to word Frequency"");
			System.out.println(""4. Search"");
			System.out.println(""5. Most Popular Suggetions"");
			System.out.println(""6. Ranking website according to your specific requirement"");
			System.out.println(""7. Go Back to Main Menu"");

			System.out.print(""Enter your choice (1, 2, 3, 4, 5 or 6): "");
			try
			{
				ArrayList<CreditCard> cardList = Engine.Engine1();
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				switch(choice)
				{
					case 1:
						System.out.println(""Fetching all Credit card Data"");
						System.out.println(""Showing all Credit card Data"");
						PreferenceBasedFilter.printCreditCardData(cardList);

						break;

					case 2:
						prefernceBaseCaseHandler(cardList);

						break;
					case 3:
						documentWordSearchAndFrequency(cardList);

						break;
					case 4:
						SearchFrequencyRBTree.SearchInputs();
						break;
					case 5:
						viewPopularSearchTerms();
						break;

					case 6:
						wordFrequencyRankBased(cardList);
						break;

					case 7:
						System.out.println(""Going back to the main menu..."");

						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1, 2, 3, or 4:"");
						break;
				}

			}
			catch(InputMismatchException e)
			{
				// Handle non-integer input
				System.out.println(""Invalid input! Please enter a number between 1 and 7."");

				// Clear the invalid input
				scanner.nextLine();
			}
			catch(Exception e)
			{
				// Catch any other unexpected exceptions
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine(); // Clear the input buffer
			}
		}
	}","public static void case2Handler() throws IOException","8","Signature Change, Body Change","Decide Structure and changes in base credit card class.","f1f01d92545774fe833a52e53e14e2ba302c44c7","prerakshah"
"42","public static void case2Handler() throws IOException
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{

			System.out.println(""\n1. Show all Credit card Data"");
			System.out.println(""2. Fetch credit card according to this preferences: Card Type, Annual Fee, Bank Name, Interest Rate"");
			System.out.println(""3. Fetch data according to word Frequency"");
			System.out.println(""4. Search"");
			System.out.println(""5. Most Popular Suggetions"");
			System.out.println(""6. Ranking website according to your specific requirement"");
			System.out.println(""7. Go Back to Main Menu"");

			System.out.print(""Enter your choice (1, 2, 3, 4, 5 or 6): "");
			try
			{
				ArrayList<CreditCard> cardList = Engine.Engine1();
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				switch(choice)
				{
					case 1:
						System.out.println(""Fetching all Credit card Data"");
						System.out.println(""Showing all Credit card Data"");
						PreferenceBasedFilter.printCreditCardData(cardList);

						break;

					case 2:
						prefernceBaseCaseHandler(cardList);

						break;
					case 3:
						documentWordSearchAndFrequency(cardList);

						break;
					case 4:
						SearchFrequencyRBTree.SearchInputs();
						break;
					case 5:
						viewPopularSearchTerms();
						break;

					case 6:
						wordFrequencyRankBased(cardList);
						break;

					case 7:
						System.out.println(""Going back to the main menu..."");

						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1, 2, 3, or 4:"");
						break;
				}

			}
			catch(InputMismatchException e)
			{
				// Handle non-integer input
				System.out.println(""Invalid input! Please enter a number between 1 and 7."");

				// Clear the invalid input
				scanner.nextLine();
			}
			catch(Exception e)
			{
				// Catch any other unexpected exceptions
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine(); // Clear the input buffer
			}
		}
	}","public static void case2Handler() throws IOException","8","Body Change","Merge remote-tracking branch 'origin/master'
","5c3eb7d5154f18549a3269b0cee02b412291b007","Mahzabin Chowdhury"
"43","public static void case2Handler() throws IOException
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{

			System.out.println(""\n1. Show all Credit card Data"");
			System.out.println(""2. Fetch credit card according to this preferences: Card Type, Annual Fee, Bank Name, Interest Rate"");
			System.out.println(""3. Fetch data according to word Frequency"");
			System.out.println(""4. Search"");
			System.out.println(""5. Most Popular Suggetions"");
			System.out.println(""6. Ranking website according to your specific requirement"");
			System.out.println(""7. Go Back to Main Menu"");

			System.out.print(""Enter your choice (1, 2, 3, 4, 5 or 6): "");
			try
			{
				ArrayList<CreditCard> cardList = Engine.Engine1();
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				switch(choice)
				{
					case 1:
						System.out.println(""Fetching all Credit card Data"");
						System.out.println(""Showing all Credit card Data"");
						PreferenceBasedFilter.printCreditCardData(cardList);

						break;

					case 2:
						prefernceBaseCaseHandler(cardList);

						break;
					case 3:
						documentWordSearchAndFrequency(cardList);

						break;
					case 4:
						SearchFrequencyRBTree.SearchInputs();
						break;
					case 5:
						viewPopularSearchTerms();
						break;

					case 6:
						wordFrequencyRankBased(cardList);
						break;

					case 7:
						System.out.println(""Going back to the main menu..."");

						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1, 2, 3, or 4:"");
						break;
				}

			}
			catch(InputMismatchException e)
			{
				// Handle non-integer input
				System.out.println(""Invalid input! Please enter a number between 1 and 7."");

				// Clear the invalid input
				scanner.nextLine();
			}
			catch(Exception e)
			{
				// Catch any other unexpected exceptions
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine(); // Clear the input buffer
			}
		}
	}","public static void case2Handler() throws IOException","8","Body Change","Implement: Inverted Index, page ranking, word frequency. Integrated also","c952d503ba3ff507ea8436349d8ed2be3db508d2","prerakshah"
"44","public static void case2Handler() throws IOException
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{

			System.out.println(""\n1. Show all Credit card Data"");
			System.out.println(""2. Fetch credit card according to this preferences: Card Type, Annual Fee, Bank Name, Interest Rate"");
			System.out.println(""3. Fetch data according to word Frequency"");
			System.out.println(""4. Search"");
			System.out.println(""5. Most Popular Suggetions"");
			System.out.println(""6. Ranking website according to your specific requirement"");
			System.out.println(""7. Go Back to Main Menu"");

			System.out.print(""Enter your choice (1, 2, 3, 4, 5 or 6): "");
			try
			{
				ArrayList<CreditCard> cardList = Engine.Engine1();
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				switch(choice)
				{
					case 1:
						System.out.println(""Fetching all Credit card Data"");
						System.out.println(""Showing all Credit card Data"");
						PreferenceBasedFilter.printCreditCardData(cardList);

						break;

					case 2:
						prefernceBaseCaseHandler(cardList);

						break;
					case 3:
						documentWordSearchAndFrequency(cardList);

						break;
					case 4:
						SearchFrequencyRBTree.SearchInputs();
						break;
					case 5:
						viewPopularSearchTerms();
						break;

					case 6:
						wordFrequencyRankBased(cardList);
						break;

					case 7:
						System.out.println(""Going back to the main menu..."");

						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1, 2, 3, or 4:"");
						break;
				}

			}
			catch(InputMismatchException e)
			{
				// Handle non-integer input
				System.out.println(""Invalid input! Please enter a number between 1 and 7."");

				// Clear the invalid input
				scanner.nextLine();
			}
			catch(Exception e)
			{
				// Catch any other unexpected exceptions
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine(); // Clear the input buffer
			}
		}
	}","public static void case2Handler() throws IOException","8","Body Change","Merge branch 'master' of https://github.com/theprerakshah/CardAnalytiX
","21bec5075046fefa916472237957099fb52a1e66","sagar9233"
"45","public static void case2Handler() throws IOException
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{

			System.out.println(""\n1. Show all Credit card Data"");
			System.out.println(""2. Fetch credit card according to this preferences: Card Type, Annual Fee, Bank Name, Interest Rate"");
			System.out.println(""3. Fetch data according to word Frequency"");
			System.out.println(""4. Search"");
			System.out.println(""5. Most Popular Suggetions"");
			System.out.println(""6. Ranking website according to your specific requirement"");
			System.out.println(""7. Go Back to Main Menu"");

			System.out.print(""Enter your choice (1, 2, 3, 4, 5 or 6): "");
			try
			{
				ArrayList<CreditCard> cardList = Engine.Engine1();
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				switch(choice)
				{
					case 1:
						System.out.println(""Fetching all Credit card Data"");
						System.out.println(""Showing all Credit card Data"");
						PreferenceBasedFilter.printCreditCardData(cardList);

						break;

					case 2:
						prefernceBaseCaseHandler(cardList);

						break;
					case 3:
						documentWordSearchAndFrequency(cardList);

						break;
					case 4:
						SearchFrequencyRBTree.SearchInputs();
						break;
					case 5:
						viewPopularSearchTerms();
						break;

					case 6:
						wordFrequencyRankBased(cardList);
						break;

					case 7:
						System.out.println(""Going back to the main menu..."");

						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1, 2, 3, or 4:"");
						break;
				}

			}
			catch(InputMismatchException e)
			{
				// Handle non-integer input
				System.out.println(""Invalid input! Please enter a number between 1 and 7."");

				// Clear the invalid input
				scanner.nextLine();
			}
			catch(Exception e)
			{
				// Catch any other unexpected exceptions
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine(); // Clear the input buffer
			}
		}
	}","public static void case2Handler() throws IOException","8","Body Change","Changed Printing style, processed input file data from bank.","fbbdbef9c499f82a2db32675e3522ad0ac0d2ed6","prerakshah"
"46","public static void case2Handler() throws IOException
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{

			System.out.println(""\n1. Show all Credit card Data"");
			System.out.println(""2. Fetch credit card according to this preferences: Card Type, Annual Fee, Bank Name, Interest Rate"");
			System.out.println(""3. Fetch data according to word Frequency"");
			System.out.println(""4. Search"");
			System.out.println(""5. Most Popular Suggetions"");
			System.out.println(""6. Ranking website according to your specific requirement"");
			System.out.println(""7. Go Back to Main Menu"");

			System.out.print(""Enter your choice (1, 2, 3, 4, 5 or 6): "");
			try
			{
				ArrayList<CreditCard> cardList = Engine.Engine1();
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				switch(choice)
				{
					case 1:
						System.out.println(""Fetching all Credit card Data"");
						System.out.println(""Showing all Credit card Data"");
						PreferenceBasedFilter.printCreditCardData(cardList);

						break;

					case 2:
						prefernceBaseCaseHandler(cardList);

						break;
					case 3:
						documentWordSearchAndFrequency(cardList);

						break;
					case 4:
						SearchFrequencyRBTree.SearchInputs();
						break;
					case 5:
						viewPopularSearchTerms();
						break;

					case 6:
						wordFrequencyRankBased(cardList);
						break;

					case 7:
						System.out.println(""Going back to the main menu..."");

						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1, 2, 3, or 4:"");
						break;
				}

			}
			catch(InputMismatchException e)
			{
				// Handle non-integer input
				System.out.println(""Invalid input! Please enter a number between 1 and 7."");

				// Clear the invalid input
				scanner.nextLine();
			}
			catch(Exception e)
			{
				// Catch any other unexpected exceptions
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine(); // Clear the input buffer
			}
		}
	}","public static void case2Handler() throws IOException","8","Body Change","Implemented Error Handling in Executer file, Handle all input.","93c3935ad57dd39b681c0241cc99239809547f41","prerakshah"
"47","public static void case2Handler() throws IOException
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{

			System.out.println(""\n1. Show all Credit card Data"");
			System.out.println(""2. Fetch credit card according to this preferences: Card Type, Annual Fee, Bank Name, Interest Rate"");
			System.out.println(""3. Fetch data according to word Frequency"");
			System.out.println(""4. Search"");
			System.out.println(""5. Most Popular Suggetions"");
			System.out.println(""6. Ranking website according to your specific requirement"");
			System.out.println(""7. Go Back to Main Menu"");

			System.out.print(""Enter your choice (1, 2, 3, 4, 5 or 6): "");
			try
			{
				ArrayList<CreditCard> cardList = Engine.Engine1();
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				switch(choice)
				{
					case 1:
						System.out.println(""Fetching all Credit card Data"");
						System.out.println(""Showing all Credit card Data"");
						PreferenceBasedFilter.printCreditCardData(cardList);

						break;

					case 2:
						prefernceBaseCaseHandler(cardList);

						break;
					case 3:
						documentWordSearchAndFrequency(cardList);

						break;
					case 4:
						SearchFrequencyRBTree.SearchInputs();
						break;
					case 5:
						viewPopularSearchTerms();
						break;

					case 6:
						wordFrequencyRankBased(cardList);
						break;

					case 7:
						System.out.println(""Going back to the main menu..."");

						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1, 2, 3, or 4:"");
						break;
				}

			}
			catch(InputMismatchException e)
			{
				// Handle non-integer input
				System.out.println(""Invalid input! Please enter a number between 1 and 7."");

				// Clear the invalid input
				scanner.nextLine();
			}
			catch(Exception e)
			{
				// Catch any other unexpected exceptions
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine(); // Clear the input buffer
			}
		}
	}","public static void case2Handler() throws IOException","8","Body Change","Minor changes in error handling","ea3bb40f9b6028f2570d89315f1a43a0c486d660","prerakshah"
"48","public static void case2Handler() throws IOException
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{

			System.out.println(""\n1. Show all Credit card Data"");
			System.out.println(""2. Fetch credit card according to this preferences: Card Type, Annual Fee, Bank Name, Interest Rate"");
			System.out.println(""3. Fetch data according to word Frequency"");
			System.out.println(""4. Search"");
			System.out.println(""5. Most Popular Suggetions"");
			System.out.println(""6. Ranking website according to your specific requirement"");
			System.out.println(""7. Go Back to Main Menu"");

			System.out.print(""Enter your choice (1, 2, 3, 4, 5 or 6): "");
			try
			{
				ArrayList<CreditCard> cardList = Engine.Engine1();
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				switch(choice)
				{
					case 1:
						System.out.println(""Fetching all Credit card Data"");
						System.out.println(""Showing all Credit card Data"");
						PreferenceBasedFilter.printCreditCardData(cardList);

						break;

					case 2:
						prefernceBaseCaseHandler(cardList);

						break;
					case 3:
						documentWordSearchAndFrequency(cardList);

						break;
					case 4:
						SearchFrequencyRBTree.SearchInputs();
						break;
					case 5:
						viewPopularSearchTerms();
						break;

					case 6:
						wordFrequencyRankBased(cardList);
						break;

					case 7:
						System.out.println(""Going back to the main menu..."");

						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1, 2, 3, or 4:"");
						break;
				}

			}
			catch(InputMismatchException e)
			{
				// Handle non-integer input
				System.out.println(""Invalid input! Please enter a number between 1 and 7."");

				// Clear the invalid input
				scanner.nextLine();
			}
			catch(Exception e)
			{
				// Catch any other unexpected exceptions
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine(); // Clear the input buffer
			}
		}
	}","public static void case2Handler() throws IOException","8","Body Change","Separated code from main class, code BeuatyFication.","cc3da180b5aa43ee9e307a2f60aa21461db88ba2","prerakshah"
"49","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Signature Change, Body Change","Decide Structure and changes in base credit card class.","f1f01d92545774fe833a52e53e14e2ba302c44c7","prerakshah"
"50","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","feat: Implement SpellCheck class with Trie.
","06a2df2b7eca938f451810c099bead7a81019fb1","Mahzabin Chowdhury"
"51","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Merge remote-tracking branch 'origin/master'
","5c3eb7d5154f18549a3269b0cee02b412291b007","Mahzabin Chowdhury"
"52","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Implement: Inverted Index, page ranking, word frequency. Integrated also","c952d503ba3ff507ea8436349d8ed2be3db508d2","prerakshah"
"53","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Adding BankNameMap
","077da0a6a0fb9558bdfa5c9aeaa26e6f16aabbc5","Mahzabin Chowdhury"
"54","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Adding BankNameMap
","639671828e7deb35069c434654fa98f38a7494e8","Mahzabin Chowdhury"
"55","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Updating Case3
","883c17509c67cefc0a24d460c531d18e01280a2e","Mahzabin Chowdhury"
"56","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Updating Case1 and Case3
","a253bda75f06e41a5b9eb6041f18dbc01952dec0","Mahzabin Chowdhury"
"57","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Updating Case1 and Case3
","bbd89c4758d49809c0fdaf14b080a7ae2d9cc91c","Mahzabin Chowdhury"
"58","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Merge remote-tracking branch 'origin/master'

# Conflicts:
#	src/main/java/com/creditWise/CardAnalytiX/Executer.java
","f0e22f1a018cc8c584a6ca49c3cf31863b533e9e","Mahzabin Chowdhury"
"59","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Updating Case1 and Case3
","967dc7041a9679989be9aed6a5571db6ea14b88b","Mahzabin Chowdhury"
"60","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Updating Case1 and Case3
","1ec417ec6678f928270bcd506b662f5bc8e72f8b","Mahzabin Chowdhury"
"61","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Updating vocabulary.txt
","43696780d63e55b91917e9e85fad240e2a78aad5","Mahzabin Chowdhury"
"62","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Changed Printing style, processed input file data from bank.","fbbdbef9c499f82a2db32675e3522ad0ac0d2ed6","prerakshah"
"63","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Implemented Error Handling in Executer file, Handle all input.","93c3935ad57dd39b681c0241cc99239809547f41","prerakshah"
"64","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Minor changes in error handling","ea3bb40f9b6028f2570d89315f1a43a0c486d660","prerakshah"
"65","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)
	{
		Scanner scanner = new Scanner(System.in);
		while(true)
		{
			System.out.println(""\n1. for Searching card according to Card type "");
			System.out.println(""2. for Searching card according to Annual Fee"");
			System.out.println(""3. for Searching card according to Bank Name"");
			System.out.println(""4. for Searching card according to Interest Rate"");
			System.out.println(""5. Go Back to Previous Menu"");
			System.out.print(""Enter your choice (1, 2, 3, 4, or 5): "");
			try
			{
				int choice = scanner.nextInt();
				//				scanner.nextLine();
				String userInput = """";
				ArrayList<CreditCard> resultCardList = new ArrayList<CreditCard>();
				switch(choice)
				{
					case 1:

						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select Card Type From These Options. \n"" + ""    Visa Card\n"" + ""    American Express\n"" + ""    Costco Cards\n"" + ""    Student Cards\n""
									+ ""    Cash Back Cards\n"" + ""    Travel Rewards Cards\n"" + ""    Business Credit Cards\n"" + ""    Low Interest Cards\n"" + ""    Mastercard"");
							System.out.println(""Input:"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationCardType(userInput))
							{
								System.out.println(""Please Enter a Valid Credit Card Type."");
								continue;
							}
							if(!CardTypeMap.getCardType(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String cardType = CardTypeMap.getCardType(userInput);

							if(cardType.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Please Enter a Valid Card Type."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnCardType(userInput, cardList);
							break;
						}
						break;

					case 2:
						System.out.println(""Select card based on Annual Fee, Enter Your preferd annual fee:"");
						userInput = scanner.next();

						while(!Validation.ValidationAnnualFee(userInput))
						{
							System.out.println(""Enter Annual Fee in Correct Format "");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnAnnualFee(userInput, cardList);

						break;
					case 3:
						if(scanner.hasNextLine())
							scanner.nextLine();
						while(true)
						{
							System.out.println(""Select card based on Bank Name, Enter Your preferred Bank: [RBC, Scotia Bank, CIBC, TD Bank]"");

							userInput = scanner.nextLine();

							if(!Validation.ValidationBankName(userInput))
							{
								System.out.println(""Invalid Bank Name. Please enter a valid bank name."");
								continue;
							}
							if(!bankNameMap.getBankName(userInput).equalsIgnoreCase(""Null""))
							{
								resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
								break;
							}

							userInput = spellCheckAndWordComplete(userInput);

							if(userInput.equalsIgnoreCase(""Try Again""))
							{
								System.out.println(""Invalid input after suggestions. Please try again."");
								continue;
							}

							String bankName = bankNameMap.getBankName(userInput);

							if(bankName.equalsIgnoreCase(""Null""))
							{
								System.out.println(""Bank Name not found. Please enter a valid bank name from the options."");
								continue;
							}

							resultCardList = PreferenceBasedFilter.basedOnBankName(userInput, cardList);
							break;
						}
						break;
					case 4:
						System.out.println(""Select card based on Interest Rate, Enter Your preferd Interest Rate:"");
						userInput = scanner.next();

						while(!Validation.ValidationInterestRate(userInput))
						{
							System.out.println(""Enter Interest Rate in Correct Format"");
							userInput = scanner.next();
						}
						resultCardList = PreferenceBasedFilter.basedOnInterestRate(userInput, cardList);

						break;
					case 5:
						System.out.println(""Going back to the previous menu..."");
						return;

					default:
						System.out.println(""Invalid choice. Please restart the tool and enter 1 or 2."");
						break;
				}
			}
			catch(InputMismatchException e)
			{
				System.out.println(""Invalid input! Please enter a number between 1 and."");

				scanner.nextLine();
			}
			catch(Exception e)
			{
				System.out.println(""An unexpected error occurred: "" + e.getMessage());
				scanner.nextLine();
			}
		}
	}","private static void prefernceBaseCaseHandler(ArrayList<CreditCard> cardList)","17","Body Change","Separated code from main class, code BeuatyFication.","cc3da180b5aa43ee9e307a2f60aa21461db88ba2","prerakshah"
"66","public static String spellCheckAndWordComplete(String userInput)
	{
		Scanner scanner = new Scanner(System.in);
		String correctSpelledWord;

		try
		{
			// Case 1: The word is spelled correctly
			if(spellCheck.search(userInput))
			{
				correctSpelledWord = userInput;

				// Move to autocomplete
				System.out.println(""Suggested Autocomplete words: "");
				List<String> suggestions = wordCompletion.autocomplete(correctSpelledWord, 5);

				for(int i = 0; i < suggestions.size(); i++)
				{
					System.out.println((i + 1) + "" "" + suggestions.get(i));
				}

				int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any of the suggestions."");

				if(input == 0)
				{
					return correctSpelledWord;
				}
				else
				{
					return suggestions.get(input - 1);
				}
			}
			else
			{
				// Case 2: The word is not spelled correctly, but has possible prefix matches
				if(wordCompletion.doesPrefixExist(userInput))
				{
					System.out.println(""Suggested Autocomplete words: "");
					List<String> suggestions = wordCompletion.autocomplete(userInput, 5);

					for(int i = 0; i < suggestions.size(); i++)
					{
						System.out.println((i + 1) + "" "" + suggestions.get(i));
					}

					int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any and type again."");

					if(input == 0)
					{
						return ""Try Again"";
					}
					else
					{
						return suggestions.get(input - 1);
					}
				}
				else
				{
					// Case 3: The word does not have valid suggestions or matches
					System.out.println(userInput + "" might be spelled incorrectly."");
					List<String> correctSpell = spellCheck.suggestAlternatives(userInput);

					if(!correctSpell.isEmpty())
					{
						System.out.println(""Did you mean these?"");
						for(int i = 0; i < correctSpell.size(); i++)
						{
							System.out.println((i + 1) + "" "" + correctSpell.get(i));
						}

						int input = getValidInput(scanner, 0, correctSpell.size(),
								""To choose a suggested spelling type the number associated with it, or type 0 if none matches and you want to type again."");

						if(input == 0)
						{
							return ""Try Again"";
						}
						else
						{
							return correctSpell.get(input - 1);
						}
					}
					else
					{
						return ""Try Again"";
					}
				}
			}
		}
		catch(Exception e)
		{
			System.out.println(""An unexpected error occurred: "" + e.getMessage());
			return ""Try Again"";
		}
	}","public static String spellCheckAndWordComplete(String userInput)","7","Signature Change, Body Change","feat: Implement SpellCheck class with Trie.
","06a2df2b7eca938f451810c099bead7a81019fb1","Mahzabin Chowdhury"
"67","public static String spellCheckAndWordComplete(String userInput)
	{
		Scanner scanner = new Scanner(System.in);
		String correctSpelledWord;

		try
		{
			// Case 1: The word is spelled correctly
			if(spellCheck.search(userInput))
			{
				correctSpelledWord = userInput;

				// Move to autocomplete
				System.out.println(""Suggested Autocomplete words: "");
				List<String> suggestions = wordCompletion.autocomplete(correctSpelledWord, 5);

				for(int i = 0; i < suggestions.size(); i++)
				{
					System.out.println((i + 1) + "" "" + suggestions.get(i));
				}

				int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any of the suggestions."");

				if(input == 0)
				{
					return correctSpelledWord;
				}
				else
				{
					return suggestions.get(input - 1);
				}
			}
			else
			{
				// Case 2: The word is not spelled correctly, but has possible prefix matches
				if(wordCompletion.doesPrefixExist(userInput))
				{
					System.out.println(""Suggested Autocomplete words: "");
					List<String> suggestions = wordCompletion.autocomplete(userInput, 5);

					for(int i = 0; i < suggestions.size(); i++)
					{
						System.out.println((i + 1) + "" "" + suggestions.get(i));
					}

					int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any and type again."");

					if(input == 0)
					{
						return ""Try Again"";
					}
					else
					{
						return suggestions.get(input - 1);
					}
				}
				else
				{
					// Case 3: The word does not have valid suggestions or matches
					System.out.println(userInput + "" might be spelled incorrectly."");
					List<String> correctSpell = spellCheck.suggestAlternatives(userInput);

					if(!correctSpell.isEmpty())
					{
						System.out.println(""Did you mean these?"");
						for(int i = 0; i < correctSpell.size(); i++)
						{
							System.out.println((i + 1) + "" "" + correctSpell.get(i));
						}

						int input = getValidInput(scanner, 0, correctSpell.size(),
								""To choose a suggested spelling type the number associated with it, or type 0 if none matches and you want to type again."");

						if(input == 0)
						{
							return ""Try Again"";
						}
						else
						{
							return correctSpell.get(input - 1);
						}
					}
					else
					{
						return ""Try Again"";
					}
				}
			}
		}
		catch(Exception e)
		{
			System.out.println(""An unexpected error occurred: "" + e.getMessage());
			return ""Try Again"";
		}
	}","public static String spellCheckAndWordComplete(String userInput)","7","Body Change","Updating Spell Check and Auto Complete feature
","cf330fd8ff465ae1be04b87f547bc0e07dfeabff","Mahzabin Chowdhury"
"68","public static String spellCheckAndWordComplete(String userInput)
	{
		Scanner scanner = new Scanner(System.in);
		String correctSpelledWord;

		try
		{
			// Case 1: The word is spelled correctly
			if(spellCheck.search(userInput))
			{
				correctSpelledWord = userInput;

				// Move to autocomplete
				System.out.println(""Suggested Autocomplete words: "");
				List<String> suggestions = wordCompletion.autocomplete(correctSpelledWord, 5);

				for(int i = 0; i < suggestions.size(); i++)
				{
					System.out.println((i + 1) + "" "" + suggestions.get(i));
				}

				int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any of the suggestions."");

				if(input == 0)
				{
					return correctSpelledWord;
				}
				else
				{
					return suggestions.get(input - 1);
				}
			}
			else
			{
				// Case 2: The word is not spelled correctly, but has possible prefix matches
				if(wordCompletion.doesPrefixExist(userInput))
				{
					System.out.println(""Suggested Autocomplete words: "");
					List<String> suggestions = wordCompletion.autocomplete(userInput, 5);

					for(int i = 0; i < suggestions.size(); i++)
					{
						System.out.println((i + 1) + "" "" + suggestions.get(i));
					}

					int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any and type again."");

					if(input == 0)
					{
						return ""Try Again"";
					}
					else
					{
						return suggestions.get(input - 1);
					}
				}
				else
				{
					// Case 3: The word does not have valid suggestions or matches
					System.out.println(userInput + "" might be spelled incorrectly."");
					List<String> correctSpell = spellCheck.suggestAlternatives(userInput);

					if(!correctSpell.isEmpty())
					{
						System.out.println(""Did you mean these?"");
						for(int i = 0; i < correctSpell.size(); i++)
						{
							System.out.println((i + 1) + "" "" + correctSpell.get(i));
						}

						int input = getValidInput(scanner, 0, correctSpell.size(),
								""To choose a suggested spelling type the number associated with it, or type 0 if none matches and you want to type again."");

						if(input == 0)
						{
							return ""Try Again"";
						}
						else
						{
							return correctSpell.get(input - 1);
						}
					}
					else
					{
						return ""Try Again"";
					}
				}
			}
		}
		catch(Exception e)
		{
			System.out.println(""An unexpected error occurred: "" + e.getMessage());
			return ""Try Again"";
		}
	}","public static String spellCheckAndWordComplete(String userInput)","7","Body Change","Implement: Inverted Index, page ranking, word frequency. Integrated also","c952d503ba3ff507ea8436349d8ed2be3db508d2","prerakshah"
"69","public static String spellCheckAndWordComplete(String userInput)
	{
		Scanner scanner = new Scanner(System.in);
		String correctSpelledWord;

		try
		{
			// Case 1: The word is spelled correctly
			if(spellCheck.search(userInput))
			{
				correctSpelledWord = userInput;

				// Move to autocomplete
				System.out.println(""Suggested Autocomplete words: "");
				List<String> suggestions = wordCompletion.autocomplete(correctSpelledWord, 5);

				for(int i = 0; i < suggestions.size(); i++)
				{
					System.out.println((i + 1) + "" "" + suggestions.get(i));
				}

				int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any of the suggestions."");

				if(input == 0)
				{
					return correctSpelledWord;
				}
				else
				{
					return suggestions.get(input - 1);
				}
			}
			else
			{
				// Case 2: The word is not spelled correctly, but has possible prefix matches
				if(wordCompletion.doesPrefixExist(userInput))
				{
					System.out.println(""Suggested Autocomplete words: "");
					List<String> suggestions = wordCompletion.autocomplete(userInput, 5);

					for(int i = 0; i < suggestions.size(); i++)
					{
						System.out.println((i + 1) + "" "" + suggestions.get(i));
					}

					int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any and type again."");

					if(input == 0)
					{
						return ""Try Again"";
					}
					else
					{
						return suggestions.get(input - 1);
					}
				}
				else
				{
					// Case 3: The word does not have valid suggestions or matches
					System.out.println(userInput + "" might be spelled incorrectly."");
					List<String> correctSpell = spellCheck.suggestAlternatives(userInput);

					if(!correctSpell.isEmpty())
					{
						System.out.println(""Did you mean these?"");
						for(int i = 0; i < correctSpell.size(); i++)
						{
							System.out.println((i + 1) + "" "" + correctSpell.get(i));
						}

						int input = getValidInput(scanner, 0, correctSpell.size(),
								""To choose a suggested spelling type the number associated with it, or type 0 if none matches and you want to type again."");

						if(input == 0)
						{
							return ""Try Again"";
						}
						else
						{
							return correctSpell.get(input - 1);
						}
					}
					else
					{
						return ""Try Again"";
					}
				}
			}
		}
		catch(Exception e)
		{
			System.out.println(""An unexpected error occurred: "" + e.getMessage());
			return ""Try Again"";
		}
	}","public static String spellCheckAndWordComplete(String userInput)","7","Body Change","Updating Case1 and Case3
","bbd89c4758d49809c0fdaf14b080a7ae2d9cc91c","Mahzabin Chowdhury"
"70","public static String spellCheckAndWordComplete(String userInput)
	{
		Scanner scanner = new Scanner(System.in);
		String correctSpelledWord;

		try
		{
			// Case 1: The word is spelled correctly
			if(spellCheck.search(userInput))
			{
				correctSpelledWord = userInput;

				// Move to autocomplete
				System.out.println(""Suggested Autocomplete words: "");
				List<String> suggestions = wordCompletion.autocomplete(correctSpelledWord, 5);

				for(int i = 0; i < suggestions.size(); i++)
				{
					System.out.println((i + 1) + "" "" + suggestions.get(i));
				}

				int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any of the suggestions."");

				if(input == 0)
				{
					return correctSpelledWord;
				}
				else
				{
					return suggestions.get(input - 1);
				}
			}
			else
			{
				// Case 2: The word is not spelled correctly, but has possible prefix matches
				if(wordCompletion.doesPrefixExist(userInput))
				{
					System.out.println(""Suggested Autocomplete words: "");
					List<String> suggestions = wordCompletion.autocomplete(userInput, 5);

					for(int i = 0; i < suggestions.size(); i++)
					{
						System.out.println((i + 1) + "" "" + suggestions.get(i));
					}

					int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any and type again."");

					if(input == 0)
					{
						return ""Try Again"";
					}
					else
					{
						return suggestions.get(input - 1);
					}
				}
				else
				{
					// Case 3: The word does not have valid suggestions or matches
					System.out.println(userInput + "" might be spelled incorrectly."");
					List<String> correctSpell = spellCheck.suggestAlternatives(userInput);

					if(!correctSpell.isEmpty())
					{
						System.out.println(""Did you mean these?"");
						for(int i = 0; i < correctSpell.size(); i++)
						{
							System.out.println((i + 1) + "" "" + correctSpell.get(i));
						}

						int input = getValidInput(scanner, 0, correctSpell.size(),
								""To choose a suggested spelling type the number associated with it, or type 0 if none matches and you want to type again."");

						if(input == 0)
						{
							return ""Try Again"";
						}
						else
						{
							return correctSpell.get(input - 1);
						}
					}
					else
					{
						return ""Try Again"";
					}
				}
			}
		}
		catch(Exception e)
		{
			System.out.println(""An unexpected error occurred: "" + e.getMessage());
			return ""Try Again"";
		}
	}","public static String spellCheckAndWordComplete(String userInput)","7","Modifier Change, Signature Change, Body Change","Merge remote-tracking branch 'origin/master'

# Conflicts:
#	src/main/java/com/creditWise/CardAnalytiX/Executer.java
","f0e22f1a018cc8c584a6ca49c3cf31863b533e9e","Mahzabin Chowdhury"
"71","public static String spellCheckAndWordComplete(String userInput)
	{
		Scanner scanner = new Scanner(System.in);
		String correctSpelledWord;

		try
		{
			// Case 1: The word is spelled correctly
			if(spellCheck.search(userInput))
			{
				correctSpelledWord = userInput;

				// Move to autocomplete
				System.out.println(""Suggested Autocomplete words: "");
				List<String> suggestions = wordCompletion.autocomplete(correctSpelledWord, 5);

				for(int i = 0; i < suggestions.size(); i++)
				{
					System.out.println((i + 1) + "" "" + suggestions.get(i));
				}

				int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any of the suggestions."");

				if(input == 0)
				{
					return correctSpelledWord;
				}
				else
				{
					return suggestions.get(input - 1);
				}
			}
			else
			{
				// Case 2: The word is not spelled correctly, but has possible prefix matches
				if(wordCompletion.doesPrefixExist(userInput))
				{
					System.out.println(""Suggested Autocomplete words: "");
					List<String> suggestions = wordCompletion.autocomplete(userInput, 5);

					for(int i = 0; i < suggestions.size(); i++)
					{
						System.out.println((i + 1) + "" "" + suggestions.get(i));
					}

					int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any and type again."");

					if(input == 0)
					{
						return ""Try Again"";
					}
					else
					{
						return suggestions.get(input - 1);
					}
				}
				else
				{
					// Case 3: The word does not have valid suggestions or matches
					System.out.println(userInput + "" might be spelled incorrectly."");
					List<String> correctSpell = spellCheck.suggestAlternatives(userInput);

					if(!correctSpell.isEmpty())
					{
						System.out.println(""Did you mean these?"");
						for(int i = 0; i < correctSpell.size(); i++)
						{
							System.out.println((i + 1) + "" "" + correctSpell.get(i));
						}

						int input = getValidInput(scanner, 0, correctSpell.size(),
								""To choose a suggested spelling type the number associated with it, or type 0 if none matches and you want to type again."");

						if(input == 0)
						{
							return ""Try Again"";
						}
						else
						{
							return correctSpell.get(input - 1);
						}
					}
					else
					{
						return ""Try Again"";
					}
				}
			}
		}
		catch(Exception e)
		{
			System.out.println(""An unexpected error occurred: "" + e.getMessage());
			return ""Try Again"";
		}
	}","public static String spellCheckAndWordComplete(String userInput)","7","Body Change","Updating Case1 and Case3
","967dc7041a9679989be9aed6a5571db6ea14b88b","Mahzabin Chowdhury"
"72","public static String spellCheckAndWordComplete(String userInput)
	{
		Scanner scanner = new Scanner(System.in);
		String correctSpelledWord;

		try
		{
			// Case 1: The word is spelled correctly
			if(spellCheck.search(userInput))
			{
				correctSpelledWord = userInput;

				// Move to autocomplete
				System.out.println(""Suggested Autocomplete words: "");
				List<String> suggestions = wordCompletion.autocomplete(correctSpelledWord, 5);

				for(int i = 0; i < suggestions.size(); i++)
				{
					System.out.println((i + 1) + "" "" + suggestions.get(i));
				}

				int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any of the suggestions."");

				if(input == 0)
				{
					return correctSpelledWord;
				}
				else
				{
					return suggestions.get(input - 1);
				}
			}
			else
			{
				// Case 2: The word is not spelled correctly, but has possible prefix matches
				if(wordCompletion.doesPrefixExist(userInput))
				{
					System.out.println(""Suggested Autocomplete words: "");
					List<String> suggestions = wordCompletion.autocomplete(userInput, 5);

					for(int i = 0; i < suggestions.size(); i++)
					{
						System.out.println((i + 1) + "" "" + suggestions.get(i));
					}

					int input = getValidInput(scanner, 0, suggestions.size(), ""To choose a suggested word type the number associated with it, or type 0 to not choose any and type again."");

					if(input == 0)
					{
						return ""Try Again"";
					}
					else
					{
						return suggestions.get(input - 1);
					}
				}
				else
				{
					// Case 3: The word does not have valid suggestions or matches
					System.out.println(userInput + "" might be spelled incorrectly."");
					List<String> correctSpell = spellCheck.suggestAlternatives(userInput);

					if(!correctSpell.isEmpty())
					{
						System.out.println(""Did you mean these?"");
						for(int i = 0; i < correctSpell.size(); i++)
						{
							System.out.println((i + 1) + "" "" + correctSpell.get(i));
						}

						int input = getValidInput(scanner, 0, correctSpell.size(),
								""To choose a suggested spelling type the number associated with it, or type 0 if none matches and you want to type again."");

						if(input == 0)
						{
							return ""Try Again"";
						}
						else
						{
							return correctSpell.get(input - 1);
						}
					}
					else
					{
						return ""Try Again"";
					}
				}
			}
		}
		catch(Exception e)
		{
			System.out.println(""An unexpected error occurred: "" + e.getMessage());
			return ""Try Again"";
		}
	}","public static String spellCheckAndWordComplete(String userInput)","7","Body Change","Changed Printing style, processed input file data from bank.","fbbdbef9c499f82a2db32675e3522ad0ac0d2ed6","prerakshah"
"73","private static int getValidInput(Scanner scanner, int min, int max, String message)
	{
		int input = -1;

		while(true)
		{
			try
			{
				System.out.println(message);
				input = Integer.parseInt(scanner.nextLine());

				// Check if the input is within the valid range
				if(input >= min && input <= max)
				{
					break;
				}
				else
				{
					System.out.println(""Invalid input. Please enter a number between "" + min + "" and "" + max + ""."");
				}
			}
			catch(NumberFormatException e)
			{
				System.out.println(""Invalid input. Please enter a valid integer."");
			}
		}

		return input;
	}","private static int getValidInput(Scanner scanner, int min, int max, String message)","3","Signature Change, Body Change","Updating Case1 and Case3
","bbd89c4758d49809c0fdaf14b080a7ae2d9cc91c","Mahzabin Chowdhury"
"74","private static int getValidInput(Scanner scanner, int min, int max, String message)
	{
		int input = -1;

		while(true)
		{
			try
			{
				System.out.println(message);
				input = Integer.parseInt(scanner.nextLine());

				// Check if the input is within the valid range
				if(input >= min && input <= max)
				{
					break;
				}
				else
				{
					System.out.println(""Invalid input. Please enter a number between "" + min + "" and "" + max + ""."");
				}
			}
			catch(NumberFormatException e)
			{
				System.out.println(""Invalid input. Please enter a valid integer."");
			}
		}

		return input;
	}","private static int getValidInput(Scanner scanner, int min, int max, String message)","3","Signature Change, Body Change","Updating Case1 and Case3
","967dc7041a9679989be9aed6a5571db6ea14b88b","Mahzabin Chowdhury"
"75","private static int getValidInput(Scanner scanner, int min, int max, String message)
	{
		int input = -1;

		while(true)
		{
			try
			{
				System.out.println(message);
				input = Integer.parseInt(scanner.nextLine());

				// Check if the input is within the valid range
				if(input >= min && input <= max)
				{
					break;
				}
				else
				{
					System.out.println(""Invalid input. Please enter a number between "" + min + "" and "" + max + ""."");
				}
			}
			catch(NumberFormatException e)
			{
				System.out.println(""Invalid input. Please enter a valid integer."");
			}
		}

		return input;
	}","private static int getValidInput(Scanner scanner, int min, int max, String message)","3","Body Change","Changed Printing style, processed input file data from bank.","fbbdbef9c499f82a2db32675e3522ad0ac0d2ed6","prerakshah"
"76","private static void documentWordSearchAndFrequency(ArrayList<CreditCard> cardList) throws IOException
	{
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		String word;

		// Loop until valid input is provided
		while(true)
		{
			System.out.println(""Enter the word you want to look for in the bank website:"");
			word = reader.readLine();

			// Validate input using the regex
			if(Validation.documentWordSearchAndFrequency(word))
			{
				break; // Exit loop if input is valid
			}
			else
			{
				System.out.println(""Invalid input. Please enter a valid word."");
			}
		}

		HashMap<String, HashMap<String, ArrayList<String>>> dataForFrequency = WordSearcher.invertedIndexing(cardList, word.trim().toLowerCase());
		if(dataForFrequency != null)
		{
			while(true)
			{
				System.out.println(""Do you want word count from this bankWebsite? (Y | N):"");
				String freqInput = reader.readLine();
				freqInput = freqInput.trim();

				if(freqInput.equalsIgnoreCase(""Y""))
				{
					WordFrequency.countFrequency(dataForFrequency);
					break; // Exit the loop after valid input
				}
				else if(freqInput.equalsIgnoreCase(""N""))
				{
					System.out.println(""Skipping word count..."");
					break; // Exit the loop after valid input
				}
				else
				{
					System.out.println(""Invalid input. Please enter 'Y' or 'N'."");
				}
			}
		}
	}","private static void documentWordSearchAndFrequency(ArrayList<CreditCard> cardList) throws IOException","4","Signature Change, Body Change","Implement: Inverted Index, page ranking, word frequency. Integrated also","c952d503ba3ff507ea8436349d8ed2be3db508d2","prerakshah"
"77","private static void documentWordSearchAndFrequency(ArrayList<CreditCard> cardList) throws IOException
	{
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		String word;

		// Loop until valid input is provided
		while(true)
		{
			System.out.println(""Enter the word you want to look for in the bank website:"");
			word = reader.readLine();

			// Validate input using the regex
			if(Validation.documentWordSearchAndFrequency(word))
			{
				break; // Exit loop if input is valid
			}
			else
			{
				System.out.println(""Invalid input. Please enter a valid word."");
			}
		}

		HashMap<String, HashMap<String, ArrayList<String>>> dataForFrequency = WordSearcher.invertedIndexing(cardList, word.trim().toLowerCase());
		if(dataForFrequency != null)
		{
			while(true)
			{
				System.out.println(""Do you want word count from this bankWebsite? (Y | N):"");
				String freqInput = reader.readLine();
				freqInput = freqInput.trim();

				if(freqInput.equalsIgnoreCase(""Y""))
				{
					WordFrequency.countFrequency(dataForFrequency);
					break; // Exit the loop after valid input
				}
				else if(freqInput.equalsIgnoreCase(""N""))
				{
					System.out.println(""Skipping word count..."");
					break; // Exit the loop after valid input
				}
				else
				{
					System.out.println(""Invalid input. Please enter 'Y' or 'N'."");
				}
			}
		}
	}","private static void documentWordSearchAndFrequency(ArrayList<CreditCard> cardList) throws IOException","4","Body Change","Validation and pattern added for documentWordAndFrequency
","5c31577ea4f888d87447bfcbfc6822908339d52a","sagar9233"
"78","private static void documentWordSearchAndFrequency(ArrayList<CreditCard> cardList) throws IOException
	{
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		String word;

		// Loop until valid input is provided
		while(true)
		{
			System.out.println(""Enter the word you want to look for in the bank website:"");
			word = reader.readLine();

			// Validate input using the regex
			if(Validation.documentWordSearchAndFrequency(word))
			{
				break; // Exit loop if input is valid
			}
			else
			{
				System.out.println(""Invalid input. Please enter a valid word."");
			}
		}

		HashMap<String, HashMap<String, ArrayList<String>>> dataForFrequency = WordSearcher.invertedIndexing(cardList, word.trim().toLowerCase());
		if(dataForFrequency != null)
		{
			while(true)
			{
				System.out.println(""Do you want word count from this bankWebsite? (Y | N):"");
				String freqInput = reader.readLine();
				freqInput = freqInput.trim();

				if(freqInput.equalsIgnoreCase(""Y""))
				{
					WordFrequency.countFrequency(dataForFrequency);
					break; // Exit the loop after valid input
				}
				else if(freqInput.equalsIgnoreCase(""N""))
				{
					System.out.println(""Skipping word count..."");
					break; // Exit the loop after valid input
				}
				else
				{
					System.out.println(""Invalid input. Please enter 'Y' or 'N'."");
				}
			}
		}
	}","private static void documentWordSearchAndFrequency(ArrayList<CreditCard> cardList) throws IOException","4","Body Change","Changed Printing style, processed input file data from bank.","fbbdbef9c499f82a2db32675e3522ad0ac0d2ed6","prerakshah"
"79","private static void documentWordSearchAndFrequency(ArrayList<CreditCard> cardList) throws IOException
	{
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		String word;

		// Loop until valid input is provided
		while(true)
		{
			System.out.println(""Enter the word you want to look for in the bank website:"");
			word = reader.readLine();

			// Validate input using the regex
			if(Validation.documentWordSearchAndFrequency(word))
			{
				break; // Exit loop if input is valid
			}
			else
			{
				System.out.println(""Invalid input. Please enter a valid word."");
			}
		}

		HashMap<String, HashMap<String, ArrayList<String>>> dataForFrequency = WordSearcher.invertedIndexing(cardList, word.trim().toLowerCase());
		if(dataForFrequency != null)
		{
			while(true)
			{
				System.out.println(""Do you want word count from this bankWebsite? (Y | N):"");
				String freqInput = reader.readLine();
				freqInput = freqInput.trim();

				if(freqInput.equalsIgnoreCase(""Y""))
				{
					WordFrequency.countFrequency(dataForFrequency);
					break; // Exit the loop after valid input
				}
				else if(freqInput.equalsIgnoreCase(""N""))
				{
					System.out.println(""Skipping word count..."");
					break; // Exit the loop after valid input
				}
				else
				{
					System.out.println(""Invalid input. Please enter 'Y' or 'N'."");
				}
			}
		}
	}","private static void documentWordSearchAndFrequency(ArrayList<CreditCard> cardList) throws IOException","4","Body Change","Final Validation
","6b7efee1e50f87e0f8e8061454ed8f5900ef3eaa","sag7ai"
"80","private static void wordFrequencyRankBased(ArrayList<CreditCard> cardList) throws IOException
	{
		Scanner scanner = new Scanner(System.in); // Use Scanner for user input
		System.out.println(""Enter the word you want to look for in the bank website:"");

		// Get valid word input using the validation method
		String word = Validation.getWordOnlyInput(scanner, ""Enter only words: "");

		// Process the input and perform the ranking
		Map<String, Integer> rankedWiseWebsite = PageRanking.RankBankBasedOnWordFrequency(word, cardList);

		// Display the ranking results
		for(Map.Entry<String, Integer> rankedData : rankedWiseWebsite.entrySet())
		{
			System.out.println(rankedData.getKey() + "" - Score: "" + rankedData.getValue());
		}
	}","private static void wordFrequencyRankBased(ArrayList<CreditCard> cardList) throws IOException","3","Signature Change, Body Change","Changed Printing style, processed input file data from bank.","fbbdbef9c499f82a2db32675e3522ad0ac0d2ed6","prerakshah"
"81","private static void wordFrequencyRankBased(ArrayList<CreditCard> cardList) throws IOException
	{
		Scanner scanner = new Scanner(System.in); // Use Scanner for user input
		System.out.println(""Enter the word you want to look for in the bank website:"");

		// Get valid word input using the validation method
		String word = Validation.getWordOnlyInput(scanner, ""Enter only words: "");

		// Process the input and perform the ranking
		Map<String, Integer> rankedWiseWebsite = PageRanking.RankBankBasedOnWordFrequency(word, cardList);

		// Display the ranking results
		for(Map.Entry<String, Integer> rankedData : rankedWiseWebsite.entrySet())
		{
			System.out.println(rankedData.getKey() + "" - Score: "" + rankedData.getValue());
		}
	}","private static void wordFrequencyRankBased(ArrayList<CreditCard> cardList) throws IOException","3","Body Change","Final Validation
","6b7efee1e50f87e0f8e8061454ed8f5900ef3eaa","sag7ai"
"82","private static void wordFrequencyRankBased(ArrayList<CreditCard> cardList) throws IOException
	{
		Scanner scanner = new Scanner(System.in); // Use Scanner for user input
		System.out.println(""Enter the word you want to look for in the bank website:"");

		// Get valid word input using the validation method
		String word = Validation.getWordOnlyInput(scanner, ""Enter only words: "");

		// Process the input and perform the ranking
		Map<String, Integer> rankedWiseWebsite = PageRanking.RankBankBasedOnWordFrequency(word, cardList);

		// Display the ranking results
		for(Map.Entry<String, Integer> rankedData : rankedWiseWebsite.entrySet())
		{
			System.out.println(rankedData.getKey() + "" - Score: "" + rankedData.getValue());
		}
	}","private static void wordFrequencyRankBased(ArrayList<CreditCard> cardList) throws IOException","3","Body Change","Separated code from main class, code BeuatyFication.","cc3da180b5aa43ee9e307a2f60aa21461db88ba2","prerakshah"
"83","public static void viewPopularSearchTerms()
	{
		try
		{
			BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
			String fieldChoice;

			while(true)
			{
				System.out.println(""\nChoose a field to view popular search terms:"");
				System.out.println(""1. Bank Name"");
				System.out.println(""2. Card Name"");
				System.out.println(""3. Card Type"");
				System.out.print(""Enter your choice (1-3): "");

				fieldChoice = reader.readLine().trim();

				if(fieldChoice.equals(""1""))
				{
					SearchFrequencyRBTree.displaySearchTerms(""Bank Name"");
					break;
				}
				else if(fieldChoice.equals(""2""))
				{
					SearchFrequencyRBTree.displaySearchTerms(""Card Name"");
					break;
				}
				else if(fieldChoice.equals(""3""))
				{
					SearchFrequencyRBTree.displaySearchTerms(""Card Type"");
					break;
				}
				else
				{
					System.out.println(""Invalid choice. Please enter a valid option (1, 2, or 3)."");
				}
			}
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}","public static void viewPopularSearchTerms()","4","Signature Change, Body Change","Merge branch 'master' of https://github.com/theprerakshah/CardAnalytiX
","21bec5075046fefa916472237957099fb52a1e66","sagar9233"
"84","public static void viewPopularSearchTerms()
	{
		try
		{
			BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
			String fieldChoice;

			while(true)
			{
				System.out.println(""\nChoose a field to view popular search terms:"");
				System.out.println(""1. Bank Name"");
				System.out.println(""2. Card Name"");
				System.out.println(""3. Card Type"");
				System.out.print(""Enter your choice (1-3): "");

				fieldChoice = reader.readLine().trim();

				if(fieldChoice.equals(""1""))
				{
					SearchFrequencyRBTree.displaySearchTerms(""Bank Name"");
					break;
				}
				else if(fieldChoice.equals(""2""))
				{
					SearchFrequencyRBTree.displaySearchTerms(""Card Name"");
					break;
				}
				else if(fieldChoice.equals(""3""))
				{
					SearchFrequencyRBTree.displaySearchTerms(""Card Type"");
					break;
				}
				else
				{
					System.out.println(""Invalid choice. Please enter a valid option (1, 2, or 3)."");
				}
			}
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}","public static void viewPopularSearchTerms()","4","Body Change","Changed Printing style, processed input file data from bank.","fbbdbef9c499f82a2db32675e3522ad0ac0d2ed6","prerakshah"
"85","public static void viewPopularSearchTerms()
	{
		try
		{
			BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
			String fieldChoice;

			while(true)
			{
				System.out.println(""\nChoose a field to view popular search terms:"");
				System.out.println(""1. Bank Name"");
				System.out.println(""2. Card Name"");
				System.out.println(""3. Card Type"");
				System.out.print(""Enter your choice (1-3): "");

				fieldChoice = reader.readLine().trim();

				if(fieldChoice.equals(""1""))
				{
					SearchFrequencyRBTree.displaySearchTerms(""Bank Name"");
					break;
				}
				else if(fieldChoice.equals(""2""))
				{
					SearchFrequencyRBTree.displaySearchTerms(""Card Name"");
					break;
				}
				else if(fieldChoice.equals(""3""))
				{
					SearchFrequencyRBTree.displaySearchTerms(""Card Type"");
					break;
				}
				else
				{
					System.out.println(""Invalid choice. Please enter a valid option (1, 2, or 3)."");
				}
			}
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}","public static void viewPopularSearchTerms()","4","Body Change","Final Validation
","6b7efee1e50f87e0f8e8061454ed8f5900ef3eaa","sag7ai"
"86","public static void viewPopularSearchTerms()
	{
		try
		{
			BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
			String fieldChoice;

			while(true)
			{
				System.out.println(""\nChoose a field to view popular search terms:"");
				System.out.println(""1. Bank Name"");
				System.out.println(""2. Card Name"");
				System.out.println(""3. Card Type"");
				System.out.print(""Enter your choice (1-3): "");

				fieldChoice = reader.readLine().trim();

				if(fieldChoice.equals(""1""))
				{
					SearchFrequencyRBTree.displaySearchTerms(""Bank Name"");
					break;
				}
				else if(fieldChoice.equals(""2""))
				{
					SearchFrequencyRBTree.displaySearchTerms(""Card Name"");
					break;
				}
				else if(fieldChoice.equals(""3""))
				{
					SearchFrequencyRBTree.displaySearchTerms(""Card Type"");
					break;
				}
				else
				{
					System.out.println(""Invalid choice. Please enter a valid option (1, 2, or 3)."");
				}
			}
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}","public static void viewPopularSearchTerms()","4","Body Change","Separated code from main class, code BeuatyFication.","cc3da180b5aa43ee9e307a2f60aa21461db88ba2","prerakshah"
"87","public static ArrayList<CreditCard> Engine1() throws IOException
	{
		HashMap<String, String> bankToPath = new HashMap<String, String>();

		String ScotiaBankData = ""/scotiabank_cards.txt"";
		String TDBankData = ""/td_cards.txt"";
		String CIBCBankData = ""/cibc_cards.txt"";
		String RBCBankData = ""/rbc_cards.txt"";
		bankToPath.put(""TD Bank"", TDBankData);
		bankToPath.put(""Scotia Bank"", ScotiaBankData);
		bankToPath.put(""CIBC"", CIBCBankData);
		bankToPath.put(""RBC"", RBCBankData);

		ArrayList<CreditCard> cardList = cardObjectFiller(bankToPath);
		return cardList;
	}","public static ArrayList<CreditCard> Engine1() throws IOException","3","Signature Change, Body Change","Decide Structure and changes in base credit card class.","f1f01d92545774fe833a52e53e14e2ba302c44c7","prerakshah"
"88","public static ArrayList<CreditCard> Engine1() throws IOException
	{
		HashMap<String, String> bankToPath = new HashMap<String, String>();

		String ScotiaBankData = ""/scotiabank_cards.txt"";
		String TDBankData = ""/td_cards.txt"";
		String CIBCBankData = ""/cibc_cards.txt"";
		String RBCBankData = ""/rbc_cards.txt"";
		bankToPath.put(""TD Bank"", TDBankData);
		bankToPath.put(""Scotia Bank"", ScotiaBankData);
		bankToPath.put(""CIBC"", CIBCBankData);
		bankToPath.put(""RBC"", RBCBankData);

		ArrayList<CreditCard> cardList = cardObjectFiller(bankToPath);
		return cardList;
	}","public static ArrayList<CreditCard> Engine1() throws IOException","3","Body Change","Made generalized Engine class","82c2bbdcb3114ae5bfcba2f5d57885947eb84d13","prerakshah"
"89","public static ArrayList<CreditCard> Engine1() throws IOException
	{
		HashMap<String, String> bankToPath = new HashMap<String, String>();

		String ScotiaBankData = ""/scotiabank_cards.txt"";
		String TDBankData = ""/td_cards.txt"";
		String CIBCBankData = ""/cibc_cards.txt"";
		String RBCBankData = ""/rbc_cards.txt"";
		bankToPath.put(""TD Bank"", TDBankData);
		bankToPath.put(""Scotia Bank"", ScotiaBankData);
		bankToPath.put(""CIBC"", CIBCBankData);
		bankToPath.put(""RBC"", RBCBankData);

		ArrayList<CreditCard> cardList = cardObjectFiller(bankToPath);
		return cardList;
	}","public static ArrayList<CreditCard> Engine1() throws IOException","3","Body Change","Generalized the Engine class and Formated the CIBC bank data.","5666ce19623e1fddf5c5b404d5a8109cb7dc29aa","prerakshah"
"90","private static ArrayList<CreditCard> cardObjectFiller(HashMap<String, String> BankDataPath) throws IOException
	{
		ArrayList<CreditCard> cardList = new ArrayList<CreditCard>();

		for(Map.Entry<String, String> mapi : BankDataPath.entrySet())
		{
			boolean firstTimer = false;
			InputStream inputStream = Engine.class.getResourceAsStream(mapi.getValue());
			if(inputStream == null)
			{
				System.out.println(""there is null in inputstream"");
				break;
			}
			BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));
			//			BufferedReader br = new BufferedReader(new FileReader(set.getValue()));
			String line = """";
			//			String bankName = bankPath.split(""/"")[6].split(""_"")[0];
			while((line = br.readLine()) != null)
			{
				if(firstTimer)
				{
					String[] tsvElement = line.split(""\t"");
					cardList.add(new CreditCard(tsvElement[0], tsvElement[1], tsvElement[2], tsvElement[3], tsvElement[4], mapi.getKey()));

				}
				firstTimer = true;
			}
		}

		return cardList;
	}","private static ArrayList<CreditCard> cardObjectFiller(HashMap<String, String> BankDataPath) throws IOException","3","Signature Change, Body Change","Made generalized Engine class","82c2bbdcb3114ae5bfcba2f5d57885947eb84d13","prerakshah"
"91","private static ArrayList<CreditCard> cardObjectFiller(HashMap<String, String> BankDataPath) throws IOException
	{
		ArrayList<CreditCard> cardList = new ArrayList<CreditCard>();

		for(Map.Entry<String, String> mapi : BankDataPath.entrySet())
		{
			boolean firstTimer = false;
			InputStream inputStream = Engine.class.getResourceAsStream(mapi.getValue());
			if(inputStream == null)
			{
				System.out.println(""there is null in inputstream"");
				break;
			}
			BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));
			//			BufferedReader br = new BufferedReader(new FileReader(set.getValue()));
			String line = """";
			//			String bankName = bankPath.split(""/"")[6].split(""_"")[0];
			while((line = br.readLine()) != null)
			{
				if(firstTimer)
				{
					String[] tsvElement = line.split(""\t"");
					cardList.add(new CreditCard(tsvElement[0], tsvElement[1], tsvElement[2], tsvElement[3], tsvElement[4], mapi.getKey()));

				}
				firstTimer = true;
			}
		}

		return cardList;
	}","private static ArrayList<CreditCard> cardObjectFiller(HashMap<String, String> BankDataPath) throws IOException","3","Body Change","Generalized the Engine class and Formated the CIBC bank data.","5666ce19623e1fddf5c5b404d5a8109cb7dc29aa","prerakshah"
"92","private static ArrayList<CreditCard> cardObjectFiller(HashMap<String, String> BankDataPath) throws IOException
	{
		ArrayList<CreditCard> cardList = new ArrayList<CreditCard>();

		for(Map.Entry<String, String> mapi : BankDataPath.entrySet())
		{
			boolean firstTimer = false;
			InputStream inputStream = Engine.class.getResourceAsStream(mapi.getValue());
			if(inputStream == null)
			{
				System.out.println(""there is null in inputstream"");
				break;
			}
			BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));
			//			BufferedReader br = new BufferedReader(new FileReader(set.getValue()));
			String line = """";
			//			String bankName = bankPath.split(""/"")[6].split(""_"")[0];
			while((line = br.readLine()) != null)
			{
				if(firstTimer)
				{
					String[] tsvElement = line.split(""\t"");
					cardList.add(new CreditCard(tsvElement[0], tsvElement[1], tsvElement[2], tsvElement[3], tsvElement[4], mapi.getKey()));

				}
				firstTimer = true;
			}
		}

		return cardList;
	}","private static ArrayList<CreditCard> cardObjectFiller(HashMap<String, String> BankDataPath) throws IOException","3","Body Change","Changed Printing style, processed input file data from bank.","fbbdbef9c499f82a2db32675e3522ad0ac0d2ed6","prerakshah"
