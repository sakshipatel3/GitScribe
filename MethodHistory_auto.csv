"Index","Method Name","Method Signature","Commit Count","Change Types","Commit Message","Commit ID","Commit Author"
"1","cannotBeStatic","@Test
  public void cannotBeStatic()","0","-","-","-","-"
"2","mustReturnString","@Test
  public void mustReturnString()","0","-","-","-","-"
"3","noParameters","@Test
  public void noParameters()","0","-","-","-","-"
"4","onlyOneToPrettyStringMethod_sameClass","@Test
  public void onlyOneToPrettyStringMethod_sameClass()","0","-","-","-","-"
"5","onlyOneToPrettyStringMethod_superclass","@Test
  public void onlyOneToPrettyStringMethod_superclass()","0","-","-","-","-"
"6","onlyOneToPrettyStringMethod_superinterface","@Test
  public void onlyOneToPrettyStringMethod_superinterface()","0","-","-","-","-"
"7","compile","private static Compilation compile(JavaFileObject... javaFileObjects)","0","-","-","-","-"
"8","error","private static String error(String... lines)","0","-","-","-","-"
"9","i","abstract int i();","0","-","-","-","-"
"10","l","abstract long l();","0","-","-","-","-"
"11","b","abstract byte b();","0","-","-","-","-"
"12","s","abstract short s();","0","-","-","-","-"
"13","c","abstract char c();","0","-","-","-","-"
"14","f","abstract float f();","0","-","-","-","-"
"15","d","abstract double d();","0","-","-","-","-"
"16","bool","abstract boolean bool();","0","-","-","-","-"
"17","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"18","primitives","@Test
  public void primitives()","0","-","-","-","-"
"19","longs","@Nullable
    @SuppressWarnings(""mutable"")
    abstract long[] longs();","0","-","-","-","-"
"20","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"21","primitiveArray","@Test
  public void primitiveArray()","0","-","-","-","-"
"22","primitiveArray_empty","@Test
  public void primitiveArray_empty()","0","-","-","-","-"
"23","primitiveArray_null","@Test
  public void primitiveArray_null()","0","-","-","-","-"
"24","collection","@Nullable
    abstract Collection<Object> collection();","0","-","-","-","-"
"25","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"26","prettyCollection","@Test
  public void prettyCollection()","0","-","-","-","-"
"27","prettyCollection_elementsWithNewlines","@Test
  public void prettyCollection_elementsWithNewlines()","0","-","-","-","-"
"28","prettyCollection_empty","@Test
  public void prettyCollection_empty()","0","-","-","-","-"
"29","prettyCollection_null","@Test
  public void prettyCollection_null()","0","-","-","-","-"
"30","nestedCollection","@Nullable
    abstract Collection<Collection<Object>> nestedCollection();","0","-","-","-","-"
"31","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"32","nestedCollection","@Test
  public void nestedCollection()","0","-","-","-","-"
"33","nestedCollection_elementsWithNewlines","@Test
  public void nestedCollection_elementsWithNewlines()","0","-","-","-","-"
"34","nestedCollection_empty","@Test
  public void nestedCollection_empty()","0","-","-","-","-"
"35","nestedCollection_nestedEmpty","@Test
  public void nestedCollection_nestedEmpty()","0","-","-","-","-"
"36","nestedCollection_null","@Test
  public void nestedCollection_null()","0","-","-","-","-"
"37","immutableIntArray","@Nullable
    abstract ImmutableIntArray immutableIntArray();","0","-","-","-","-"
"38","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"39","immutablePrimitiveArray","@Test
  public void immutablePrimitiveArray()","0","-","-","-","-"
"40","immutablePrimitiveArray_empty","@Test
  public void immutablePrimitiveArray_empty()","0","-","-","-","-"
"41","immutablePrimitiveArray_null","@Test
  public void immutablePrimitiveArray_null()","0","-","-","-","-"
"42","map","@Nullable
    abstract Map<Object, Object> map();","0","-","-","-","-"
"43","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"44","prettyMap","@Test
  public void prettyMap()","0","-","-","-","-"
"45","prettyMap_keysAndValuesWithNewlines","@Test
  public void prettyMap_keysAndValuesWithNewlines()","0","-","-","-","-"
"46","prettyMap_empty","@Test
  public void prettyMap_empty()","0","-","-","-","-"
"47","prettyMap_null","@Test
  public void prettyMap_null()","0","-","-","-","-"
"48","mapOfMaps","@Nullable
    abstract Map<Map<Object, Object>, Map<Object, Object>> mapOfMaps();","0","-","-","-","-"
"49","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"50","mapWithNulls","private static <K, V> Map<K, V> mapWithNulls(K k, V v)","0","-","-","-","-"
"51","mapOfMaps","@Test
  public void mapOfMaps()","0","-","-","-","-"
"52","mapOfMaps_elementsWithNewlines","@Test
  public void mapOfMaps_elementsWithNewlines()","0","-","-","-","-"
"53","mapOfMaps_empty","@Test
  public void mapOfMaps_empty()","0","-","-","-","-"
"54","mapOfMaps_nestedEmpty","@Test
  public void mapOfMaps_nestedEmpty()","0","-","-","-","-"
"55","mapOfMaps_null","@Test
  public void mapOfMaps_null()","0","-","-","-","-"
"56","multimap","@Nullable
    abstract Multimap<Object, Object> multimap();","0","-","-","-","-"
"57","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"58","prettyMultimap","@Test
  public void prettyMultimap()","0","-","-","-","-"
"59","prettyMultimap_keysAndValuesWithNewlines","@Test
  public void prettyMultimap_keysAndValuesWithNewlines()","0","-","-","-","-"
"60","prettyMultimap_empty","@Test
  public void prettyMultimap_empty()","0","-","-","-","-"
"61","prettyMultimap_null","@Test
  public void prettyMultimap_null()","0","-","-","-","-"
"62","optional","@Nullable
    abstract java.util.Optional<Object> optional();","0","-","-","-","-"
"63","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"64","javaOptional_present","@Test
  public void javaOptional_present()","0","-","-","-","-"
"65","javaOptional_empty","@Test
  public void javaOptional_empty()","0","-","-","-","-"
"66","javaOptional_valueWithNewlines","@Test
  public void javaOptional_valueWithNewlines()","0","-","-","-","-"
"67","javaOptional_null","@Test
  public void javaOptional_null()","0","-","-","-","-"
"68","optional","@Nullable
    abstract com.google.common.base.Optional<Object> optional();","0","-","-","-","-"
"69","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"70","guavaOptional_present","@Test
  public void guavaOptional_present()","0","-","-","-","-"
"71","guavaOptional_absent","@Test
  public void guavaOptional_absent()","0","-","-","-","-"
"72","guavaOptional_valueWithNewlines","@Test
  public void guavaOptional_valueWithNewlines()","0","-","-","-","-"
"73","guavaOptional_null","@Test
  public void guavaOptional_null()","0","-","-","-","-"
"74","value","@Nullable
    abstract com.google.common.base.Optional<
            java.util.Optional<
                List< // open list
                    Map<ImmutableIntArray, Multimap<int[][], Object>>
                // close list
                >>>
        value();","0","-","-","-","-"
"75","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"76","nestAllTheThings","@Test
  public void nestAllTheThings()","0","-","-","-","-"
"77","i","abstract int i();","0","-","-","-","-"
"78","customName","@ToPrettyString
    abstract String customName();","0","-","-","-","-"
"79","withCustomName","@Test
  public void withCustomName()","0","-","-","-","-"
"80","i","abstract int i();","0","-","-","-","-"
"81","toString","@ToPrettyString
    @Override
    public abstract String toString();","0","-","-","-","-"
"82","overridesToString","@Test
  public void overridesToString()","0","-","-","-","-"
"83","toString","@Override
      public String toString()","0","-","-","-","-"
"84","toPrettyString","@ToPrettyString
      String toPrettyString()","0","-","-","-","-"
"85","toPrettyString","@ToPrettyString
      default String toPrettyString()","0","-","-","-","-"
"86","parameterizedWithString","abstract HasToPrettyString<String> parameterizedWithString();","0","-","-","-","-"
"87","parameterizedWithVoid","abstract HasToPrettyString<Void> parameterizedWithVoid();","0","-","-","-","-"
"88","superclass","abstract HasInheritedToPrettyString superclass();","0","-","-","-","-"
"89","superinterface","abstract HasToPrettyStringFromSuperInterface superinterface();","0","-","-","-","-"
"90","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"91","propertyHasToPrettyString","@Test
  public void propertyHasToPrettyString()","0","-","-","-","-"
"92","list","abstract StringList list();","0","-","-","-","-"
"93","map","abstract StringMap map();","0","-","-","-","-"
"94","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"95","fixedTypeParameters","@Test
  public void fixedTypeParameters()","0","-","-","-","-"
"96","getInt","abstract int getInt();","0","-","-","-","-"
"97","isBoolean","abstract boolean isBoolean();","0","-","-","-","-"
"98","getNotAJavaIdentifier","abstract String getNotAJavaIdentifier();","0","-","-","-","-"
"99","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"100","javaBeans","@Test
  public void javaBeans()","0","-","-","-","-"
"101","get","abstract T get();","0","-","-","-","-"
"102","toPrettyString","@ToPrettyString
    abstract String toPrettyString();","0","-","-","-","-"
"103","generic","@Test
  public void generic()","0","-","-","-","-"
"104","proxyFieldType_isUnchanged","@Test
  public void proxyFieldType_isUnchanged() throws Exception","0","-","-","-","-"
"105","toProxy_isUnchanged","@Test
  public void toProxy_isUnchanged() throws Exception","0","-","-","-","-"
"106","fromProxy_isUnchanged","@Test
  public void fromProxy_isUnchanged() throws Exception","0","-","-","-","-"
"107","isIdentity","@Test
  public void isIdentity() throws Exception","0","-","-","-","-"
"108","getSerializer_emptyFactories_identitySerializerReturned","@Test
  public void getSerializer_emptyFactories_identitySerializerReturned() throws Exception","0","-","-","-","-"
"109","getSerializer_factoriesProvided_factoryReturned","@Test
  public void getSerializer_factoriesProvided_factoryReturned() throws Exception","0","-","-","-","-"
"110","setUpExtension","@Before
  public void setUpExtension()","0","-","-","-","-"
"111","getSerializer_nonOptional_emptyReturned","@Test
  public void getSerializer_nonOptional_emptyReturned()","0","-","-","-","-"
"112","getSerializer_optional_serializerReturned","@Test
  public void getSerializer_optional_serializerReturned()","0","-","-","-","-"
"113","proxyFieldType","@Test
  public void proxyFieldType()","0","-","-","-","-"
"114","toProxy","@Test
  public void toProxy()","0","-","-","-","-"
"115","fromProxy","@Test
  public void fromProxy()","0","-","-","-","-"
"116","setUpExtension","@Before
  public void setUpExtension()","0","-","-","-","-"
"117","getSerializer_nonImmutableList_emptyReturned","@Test
  public void getSerializer_nonImmutableList_emptyReturned()","0","-","-","-","-"
"118","getSerializer_immutableListWithSerializableContainedType_emptyReturned","@Test
  public void getSerializer_immutableListWithSerializableContainedType_emptyReturned()","0","-","-","-","-"
"119","getSerializer_immutableList_serializerReturned","@Test
  public void getSerializer_immutableList_serializerReturned()","0","-","-","-","-"
"120","proxyFieldType","@Test
  public void proxyFieldType()","0","-","-","-","-"
"121","toProxy","@Test
  public void toProxy()","0","-","-","-","-"
"122","fromProxy","@Test
  public void fromProxy()","0","-","-","-","-"
"123","setUpExtension","@Before
  public void setUpExtension()","0","-","-","-","-"
"124","getSerializer_nonImmutableMap_emptyReturned","@Test
  public void getSerializer_nonImmutableMap_emptyReturned()","0","-","-","-","-"
"125","getSerializer_immutableMapWithSerializableContainedTypes_emptyReturned","@Test
  public void getSerializer_immutableMapWithSerializableContainedTypes_emptyReturned()","0","-","-","-","-"
"126","getSerializer_immutableMap_serializerReturned","@Test
  public void getSerializer_immutableMap_serializerReturned()","0","-","-","-","-"
"127","proxyFieldType","@Test
  public void proxyFieldType()","0","-","-","-","-"
"128","toProxy","@Test
  public void toProxy()","0","-","-","-","-"
"129","fromProxy","@Test
  public void fromProxy()","0","-","-","-","-"
"130","TestStringSerializerFactory","public TestStringSerializerFactory()","0","-","-","-","-"
"131","getSerializer","@Override
  public Optional<Serializer> getSerializer(
      TypeMirror typeMirror, SerializerFactory factory, ProcessingEnvironment processingEnv)","0","-","-","-","-"
"132","TestStringSerializer","TestStringSerializer(TypeMirror typeMirror)","0","-","-","-","-"
"133","proxyFieldType","@Override
    public TypeMirror proxyFieldType()","0","-","-","-","-"
"134","toProxy","@Override
    public CodeBlock toProxy(CodeBlock expression)","0","-","-","-","-"
"135","fromProxy","@Override
    public CodeBlock fromProxy(CodeBlock expression)","0","-","-","-","-"
"136","mockProcessingEnvironment","private ProcessingEnvironment mockProcessingEnvironment()","0","-","-","-","-"
"137","mockMessager","private Messager mockMessager()","0","-","-","-","-"
"138","setUp","@Before
  public final void setUp()","0","-","-","-","-"
"139","typeElementOf","protected TypeElement typeElementOf(Class<?> c)","0","-","-","-","-"
"140","typeMirrorOf","protected TypeMirror typeMirrorOf(Class<?> c)","0","-","-","-","-"
"141","declaredTypeOf","protected DeclaredType declaredTypeOf(Class<?> enclosingClass, Class<?> containedClass)","0","-","-","-","-"
"142","declaredTypeOf","protected DeclaredType declaredTypeOf(Class<?> enclosingClass, Class<?>... classArgs)","0","-","-","-","-"
"143","FakeSerializerFactory","public FakeSerializerFactory()","0","-","-","-","-"
"144","setReturnIdentitySerializer","/**
   * Set if this factory should return a serializer that is considered an identity serializer.
   *
   * <p>The underlying fake serializer implementation will always be an identity serializer. This
   * only changes the","0","-","-","-","-"
"145","getSerializer","@Override
  public Serializer getSerializer(TypeMirror type)","0","-","-","-","-"
"146","newIdentifier","@Override
  public CodeBlock newIdentifier(String prefix)","0","-","-","-","-"
"147","FakeIdentitySerializer","FakeIdentitySerializer(TypeMirror typeMirror, boolean isIdentity)","0","-","-","-","-"
"148","proxyFieldType","@Override
    public TypeMirror proxyFieldType()","0","-","-","-","-"
"149","toProxy","@Override
    public CodeBlock toProxy(CodeBlock expression)","0","-","-","-","-"
"150","fromProxy","@Override
    public CodeBlock fromProxy(CodeBlock expression)","0","-","-","-","-"
"151","isIdentity","@Override
    public boolean isIdentity()","0","-","-","-","-"
"152","getFactory_extensionsLoaded","@Test
  public void getFactory_extensionsLoaded() throws Exception","0","-","-","-","-"
"153","a","abstract String a();","0","-","-","-","-"
"154","b","abstract int b();","0","-","-","-","-"
"155","optionalC","abstract Optional<String> optionalC();","0","-","-","-","-"
"156","optionalD","abstract Optional<Integer> optionalD();","0","-","-","-","-"
"157","builder","static DummySerializableAutoValue.Builder builder()","0","-","-","-","-"
"158","setA","abstract DummySerializableAutoValue.Builder setA(String value);","0","-","-","-","-"
"159","setB","abstract DummySerializableAutoValue.Builder setB(int value);","0","-","-","-","-"
"160","setOptionalC","abstract DummySerializableAutoValue.Builder setOptionalC(String value);","0","-","-","-","-"
"161","setOptionalD","abstract DummySerializableAutoValue.Builder setOptionalD(int value);","0","-","-","-","-"
"162","build","abstract DummySerializableAutoValue build();","0","-","-","-","-"
"163","allFieldsAreSet_noEmpty","@Test
  public void allFieldsAreSet_noEmpty()","0","-","-","-","-"
"164","allFieldsAreSet_withMixedEmpty","@Test
  public void allFieldsAreSet_withMixedEmpty()","0","-","-","-","-"
"165","allFieldsAreSet_withEmpty","@Test
  public void allFieldsAreSet_withEmpty()","0","-","-","-","-"
"166","allFieldsAreSerialized_noEmpty","@Test
  public void allFieldsAreSerialized_noEmpty()","0","-","-","-","-"
"167","allFieldsAreSerialized_withEmpty","@Test
  public void allFieldsAreSerialized_withEmpty()","0","-","-","-","-"
"168","allFieldsAreSerialized_withMixedEmpty","@Test
  public void allFieldsAreSerialized_withMixedEmpty()","0","-","-","-","-"
"169","getA","abstract String getA();","0","-","-","-","-"
"170","isB","abstract boolean isB();","0","-","-","-","-"
"171","getC","abstract Optional<String> getC();","0","-","-","-","-"
"172","getD","abstract Optional<Boolean> getD();","0","-","-","-","-"
"173","builder","static PrefixSerializableAutoValue.Builder builder()","0","-","-","-","-"
"174","a","abstract PrefixSerializableAutoValue.Builder a(String value);","0","-","-","-","-"
"175","b","abstract PrefixSerializableAutoValue.Builder b(boolean value);","0","-","-","-","-"
"176","c","abstract PrefixSerializableAutoValue.Builder c(String value);","0","-","-","-","-"
"177","d","abstract PrefixSerializableAutoValue.Builder d(boolean value);","0","-","-","-","-"
"178","build","abstract PrefixSerializableAutoValue build();","0","-","-","-","-"
"179","allPrefixFieldsAreSerialized_noEmpty","@Test
  public void allPrefixFieldsAreSerialized_noEmpty()","0","-","-","-","-"
"180","allPrefixFieldsAreSerialized_WithEmpty","@Test
  public void allPrefixFieldsAreSerialized_WithEmpty()","0","-","-","-","-"
"181","create","static NotSerializable create()","0","-","-","-","-"
"182","optionalA","abstract Optional<String> optionalA();","0","-","-","-","-"
"183","missingImplementsSerializableThrowsException","@Test
  public void missingImplementsSerializableThrowsException() throws Exception","0","-","-","-","-"
"184","create","static NotSerializableNoAnnotation create()","0","-","-","-","-"
"185","optionalA","abstract Optional<String> optionalA();","0","-","-","-","-"
"186","missingSerializableAutoValueAnnotationThrowsException","@Test
  public void missingSerializableAutoValueAnnotationThrowsException() throws Exception","0","-","-","-","-"
"187","a","abstract T a();","0","-","-","-","-"
"188","optionalB","abstract Optional<S> optionalB();","0","-","-","-","-"
"189","builder","static <T extends Serializable, S> Builder<T, S> builder()","0","-","-","-","-"
"190","setA","abstract Builder<T, S> setA(T value);","0","-","-","-","-"
"191","setOptionalB","abstract Builder<T, S> setOptionalB(S value);","0","-","-","-","-"
"192","build","abstract HasTypeParameters<T, S> build();","0","-","-","-","-"
"193","typeParameterizedFieldsAreSet_noEmpty","@Test
  public void typeParameterizedFieldsAreSet_noEmpty()","0","-","-","-","-"
"194","typeParameterizedFieldsAreSet_withEmpty","@Test
  public void typeParameterizedFieldsAreSet_withEmpty()","0","-","-","-","-"
"195","typeParameterizedFieldsAreSerializable_noEmpty","@Test
  public void typeParameterizedFieldsAreSerializable_noEmpty()","0","-","-","-","-"
"196","typeParameterizedFieldsAreSerializable_withEmpty","@Test
  public void typeParameterizedFieldsAreSerializable_withEmpty()","0","-","-","-","-"
"197","payload","abstract ImmutableList<Optional<String>> payload();","0","-","-","-","-"
"198","builder","static ImmutableListSerializableAutoValue.Builder builder()","0","-","-","-","-"
"199","setPayload","abstract ImmutableListSerializableAutoValue.Builder setPayload(
          ImmutableList<Optional<String>> payload);","0","-","-","-","-"
"200","build","abstract ImmutableListSerializableAutoValue build();","0","-","-","-","-"
"201","immutableList_emptyListSerialized","@Test
  public void immutableList_emptyListSerialized()","0","-","-","-","-"
"202","immutableList_allFieldsSetAndSerialized","@Test
  public void immutableList_allFieldsSetAndSerialized()","0","-","-","-","-"
"203","a","abstract ImmutableMap<Optional<String>, String> a();","0","-","-","-","-"
"204","b","abstract ImmutableMap<String, Optional<String>> b();","0","-","-","-","-"
"205","builder","static ImmutableMapSerializableAutoValue.Builder builder()","0","-","-","-","-"
"206","setA","abstract ImmutableMapSerializableAutoValue.Builder setA(
          ImmutableMap<Optional<String>, String> a);","0","-","-","-","-"
"207","setB","abstract ImmutableMapSerializableAutoValue.Builder setB(
          ImmutableMap<String, Optional<String>> b);","0","-","-","-","-"
"208","build","abstract ImmutableMapSerializableAutoValue build();","0","-","-","-","-"
"209","immutableMap_emptyMapSerialized","@Test
  public void immutableMap_emptyMapSerialized()","0","-","-","-","-"
"210","immutableMap_allFieldsSetAndSerialized","@Test
  public void immutableMap_allFieldsSetAndSerialized()","0","-","-","-","-"
"211","a","abstract String a();","0","-","-","-","-"
"212","b","abstract String b();","0","-","-","-","-"
"213","builder","static MultiplePropertiesSameType.Builder builder()","0","-","-","-","-"
"214","setA","abstract MultiplePropertiesSameType.Builder setA(String value);","0","-","-","-","-"
"215","setB","abstract MultiplePropertiesSameType.Builder setB(String value);","0","-","-","-","-"
"216","build","abstract MultiplePropertiesSameType build();","0","-","-","-","-"
"217","multiplePropertiesSameType_allFieldsSerialized","@Test
  public void multiplePropertiesSameType_allFieldsSerialized()","0","-","-","-","-"
"218","a","abstract ImmutableMap<String, ImmutableMap<String, Optional<String>>> a();","0","-","-","-","-"
"219","builder","static ComplexType.Builder builder()","0","-","-","-","-"
"220","setA","abstract ComplexType.Builder setA(
          ImmutableMap<String, ImmutableMap<String, Optional<String>>> a);","0","-","-","-","-"
"221","build","abstract ComplexType build();","0","-","-","-","-"
"222","complexType","@Test
  public void complexType()","0","-","-","-","-"
"223","number","abstract Optional<Integer> number();","0","-","-","-","-"
"224","negate","@Memoized
    Optional<Integer> negate()","0","-","-","-","-"
"225","builder","static SerializeMemoize.Builder builder()","0","-","-","-","-"
"226","setNumber","abstract Builder setNumber(Optional<Integer> number);","0","-","-","-","-"
"227","build","abstract SerializeMemoize build();","0","-","-","-","-"
"228","serializeMemoize","@Test
  public void serializeMemoize()","0","-","-","-","-"
"229","getNative","abstract boolean getNative();","0","-","-","-","-"
"230","getNative0","abstract boolean getNative0();","0","-","-","-","-"
"231","getNotKeyword","abstract String getNotKeyword();","0","-","-","-","-"
"232","getMemoizedNative","@Memoized
    boolean getMemoizedNative()","0","-","-","-","-"
"233","getMemoizedNative0","@Memoized
    boolean getMemoizedNative0()","0","-","-","-","-"
"234","getNative","abstract String getNative();","0","-","-","-","-"
"235","getMemoizedNative","@Memoized
    @javax.annotation.Nullable
    public String getMemoizedNative()","0","-","-","-","-"
"236","getNative","abstract String getNative();","0","-","-","-","-"
"237","getMemoizedNative","@Memoized
    @CopyAnnotations(exclude = javax.annotation.Nullable.class)
    @javax.annotation.Nullable
    public String getMemoizedNative()","0","-","-","-","-"
"238","getNative","abstract String getNative();","0","-","-","-","-"
"239","getMemoizedNative","@Memoized
    @javax.annotation.Nullable
    public String getMemoizedNative()","0","-","-","-","-"
"240","string","@javax.annotation.Nullable
    abstract String string();","0","-","-","-","-"
"241","stringWithTypeAnnotation","abstract @org.checkerframework.checker.nullness.qual.Nullable String stringWithTypeAnnotation();","0","-","-","-","-"
"242","counter","abstract HashCodeAndToStringCounter counter();","0","-","-","-","-"
"243","primitive","@Memoized
    int primitive()","0","-","-","-","-"
"244","notNullable","@Memoized
    String notNullable()","0","-","-","-","-"
"245","nullable","@Memoized
    @javax.annotation.Nullable
    String nullable()","0","-","-","-","-"
"246","returnsNull","@Memoized
    @javax.annotation.Nullable
    String returnsNull()","0","-","-","-","-"
"247","nullableWithTypeAnnotation","@Memoized
    @org.checkerframework.checker.nullness.qual.Nullable
    String nullableWithTypeAnnotation()","0","-","-","-","-"
"248","returnsNullWithTypeAnnotation","@Memoized
    @org.checkerframework.checker.nullness.qual.Nullable
    String returnsNullWithTypeAnnotation()","0","-","-","-","-"
"249","notNullableButReturnsNull","@Memoized
    String notNullableButReturnsNull()","0","-","-","-","-"
"250","throwsException","@Memoized
    String throwsException() throws SomeCheckedException","0","-","-","-","-"
"251","hashCode","@Override
    @Memoized
    public abstract int hashCode();","0","-","-","-","-"
"252","toString","@Override
    @Memoized
    public abstract String toString();","0","-","-","-","-"
"253","value","abstract T value();","0","-","-","-","-"
"254","otherValue","abstract K otherValue();","0","-","-","-","-"
"255","myTypedList","@Memoized
    ImmutableList<T> myTypedList()","0","-","-","-","-"
"256","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"257","toString","@Override
    public String toString()","0","-","-","-","-"
"258","equalsCounter","abstract EqualsCounter equalsCounter();","0","-","-","-","-"
"259","hashCode","@Memoized
    @Override
    public int hashCode()","0","-","-","-","-"
"260","hashCode","@Override
      public int hashCode()","0","-","-","-","-"
"261","equals","@Override
      public boolean equals(Object obj)","0","-","-","-","-"
"262","hashCode","@Override
    @Memoized
    public int hashCode()","0","-","-","-","-"
"263","equals","@Override
    public final boolean equals(Object that)","0","-","-","-","-"
"264","setUp","@Before
  public void setUp()","0","-","-","-","-"
"265","listValueList","@Test
  public void listValueList()","0","-","-","-","-"
"266","listValueString","@Test
  public void listValueString()","0","-","-","-","-"
"267","primitive","@Test
  public void primitive()","0","-","-","-","-"
"268","notNullable","@Test
  public void notNullable()","0","-","-","-","-"
"269","nullable","@Test
  public void nullable()","0","-","-","-","-"
"270","nullableWithTypeAnnotation","@Test
  public void nullableWithTypeAnnotation()","0","-","-","-","-"
"271","returnsNull","@Test
  public void returnsNull()","0","-","-","-","-"
"272","returnsNullWithTypeAnnotation","@Test
  public void returnsNullWithTypeAnnotation()","0","-","-","-","-"
"273","notNullableButReturnsNull","@Test
  public void notNullableButReturnsNull()","0","-","-","-","-"
"274","methodThrows","@Test
  public void methodThrows()","0","-","-","-","-"
"275","testHashCode","@Test
  public void testHashCode()","0","-","-","-","-"
"276","testToString","@Test
  public void testToString()","0","-","-","-","-"
"277","keywords","@Test
  public void keywords() throws Exception","0","-","-","-","-"
"278","copyClassAnnotations_valueWithCopyAnnotations_copiesAnnotation","@Test
  public void copyClassAnnotations_valueWithCopyAnnotations_copiesAnnotation() throws Exception","0","-","-","-","-"
"279","copyClassAnnotations_valueWithoutCopyAnnotations_doesNotCopyAnnotation","@Test
  public void copyClassAnnotations_valueWithoutCopyAnnotations_doesNotCopyAnnotation()
      throws Exception","0","-","-","-","-"
"280","copyClassAnnotations_valueWithExcludedCopyAnnotations_doesNotCopyAnnotation","@Test
  public void copyClassAnnotations_valueWithExcludedCopyAnnotations_doesNotCopyAnnotation()
      throws Exception","0","-","-","-","-"
"281","copyMethodAnnotations_valueWithCopyAnnotations_copiesAnnotation","@Test
  public void copyMethodAnnotations_valueWithCopyAnnotations_copiesAnnotation() throws Exception","0","-","-","-","-"
"282","copyMethodAnnotations_valueWithoutCopyAnnotations_copiesAnnotation","@Test
  public void copyMethodAnnotations_valueWithoutCopyAnnotations_copiesAnnotation()
      throws Exception","0","-","-","-","-"
"283","copyMethodAnnotations_valueWithExcludedCopyAnnotations_doesNotCopyAnnotation","@Test
  public void copyMethodAnnotations_valueWithExcludedCopyAnnotations_doesNotCopyAnnotation()
      throws Exception","0","-","-","-","-"
"284","nullableHasAnnotation","@Test
  public void nullableHasAnnotation() throws ReflectiveOperationException","0","-","-","-","-"
"285","nullableWithTypeAnnotationHasAnnotation","@Test
  public void nullableWithTypeAnnotationHasAnnotation() throws ReflectiveOperationException","0","-","-","-","-"
"286","nullableConstructorParameter","@Test
  public void nullableConstructorParameter() throws ReflectiveOperationException","0","-","-","-","-"
"287","hashCodeEqualsOptimization","@Test
  public void hashCodeEqualsOptimization()","0","-","-","-","-"
"288","hashCodeEqualsOptimization_otherTypes","@Test
  public void hashCodeEqualsOptimization_otherTypes()","0","-","-","-","-"
"289","hashCodeEqualsOptimization_hashCodeIgnoredForSameInstance","@Test
  public void hashCodeEqualsOptimization_hashCodeIgnoredForSameInstance()","0","-","-","-","-"
"290","hashCodeEqualsOptimization_offWhenEqualsIsFinal","@Test
  public void hashCodeEqualsOptimization_offWhenEqualsIsFinal()","0","-","-","-","-"
"291","edges","abstract TypeEdgeIterable<InputT, ResultT> edges();","0","-","-","-","-"
"292","create","static <InputT> ResourceUriPath<InputT> create(TypeEdgeIterable<InputT, ResourceUri> edges)","0","-","-","-","-"
"293","toServiceName","@Memoized
    TypePath<InputT, String> toServiceName()","0","-","-","-","-"
"294","methodTypeFromTypeVariableSubsitution","@Test
  public void methodTypeFromTypeVariableSubsitution()","0","-","-","-","-"
"295","value","abstract T value();","0","-","-","-","-"
"296","hashCode","@Override
    @Memoized
    public abstract int hashCode();","0","-","-","-","-"
"297","of","static <@ImmutableTypeParameter T> Unchanging<T> of(T value)","0","-","-","-","-"
"298","copiedTypeAnnotations","@Test
  public void copiedTypeAnnotations()","0","-","-","-","-"
"299","privateMethod","@Test
  public void privateMethod()","0","-","-","-","-"
"300","staticMethod","@Test
  public void staticMethod()","0","-","-","-","-"
"301","finalMethod","@Test
  public void finalMethod()","0","-","-","-","-"
"302","abstractMethod","@Test
  public void abstractMethod()","0","-","-","-","-"
"303","voidMethod","@Test
  public void voidMethod()","0","-","-","-","-"
"304","parameters","@Test
  public void parameters()","0","-","-","-","-"
"305","notInAutoValueClass","@Test
  public void notInAutoValueClass()","0","-","-","-","-"
"306","MemoizedMethodSubject","MemoizedMethodSubject(FailureMetadata failureMetadata, String actual)","0","-","-","-","-"
"307","hasError","void hasError(String error)","0","-","-","-","-"
"308","memoizeMethod","static MemoizedMethodSubjectFactory memoizeMethod()","0","-","-","-","-"
"309","assertThatMemoizeMethod","static MemoizedMethodSubject assertThatMemoizeMethod(String method)","0","-","-","-","-"
"310","createSubject","@Override
  public MemoizedMethodSubject createSubject(FailureMetadata failureMetadata, String that)","0","-","-","-","-"
"311","simple","@Test
  public void simple()","0","-","-","-","-"
"312","specialSpaces","@Test
  public void specialSpaces()","0","-","-","-","-"
"313","noTrailingNewline","@Test
  public void noTrailingNewline()","0","-","-","-","-"
"314","indent","@Test
  public void indent()","0","-","-","-","-"
"315","success","@Test
  public void success()","0","-","-","-","-"
"316","voidInstanceWithoutGenericTypeParameters","@Test
  public void voidInstanceWithoutGenericTypeParameters()","0","-","-","-","-"
"317","noKindGetter","@Test
  public void noKindGetter()","0","-","-","-","-"
"318","kindGetterHasParam","@Test
  public void kindGetterHasParam()","0","-","-","-","-"
"319","twoKindGetters","@Test
  public void twoKindGetters()","0","-","-","-","-"
"320","enumMissingCase","@Test
  public void enumMissingCase()","0","-","-","-","-"
"321","enumExtraCase","@Test
  public void enumExtraCase()","0","-","-","-","-"
"322","mustBeClass","@Test
  public void mustBeClass()","0","-","-","-","-"
"323","cantBeNullable","@Test
  public void cantBeNullable()","0","-","-","-","-"
"324","mustHaveNoArgConstructor","@Test
  public void mustHaveNoArgConstructor()","0","-","-","-","-"
"325","mustHaveVisibleNoArgConstructor","@Test
  public void mustHaveVisibleNoArgConstructor()","0","-","-","-","-"
"326","builtInExtensionsAreIsolating","@Test
  public void builtInExtensionsAreIsolating()","0","-","-","-","-"
"327","customExtensionsAreNotIsolatingByDefault","@Test
  public void customExtensionsAreNotIsolatingByDefault()","0","-","-","-","-"
"328","customExtensionsCanBeIsolating","@Test
  public void customExtensionsCanBeIsolating()","0","-","-","-","-"
"329","generateClass","@Override
    public String generateClass(
        Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"330","incrementalType","@Override
    public IncrementalExtensionType incrementalType(ProcessingEnvironment processingEnvironment)","0","-","-","-","-"
"331","generateClass","@Override
    public String generateClass(
        Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"332","simpleSuccess","@Test
  public void simpleSuccess()","0","-","-","-","-"
"333","simpleRecord","@Test
  public void simpleRecord()","0","-","-","-","-"
"334","recordWithNullableTypeVariableComponents","@Test
  public void recordWithNullableTypeVariableComponents()","0","-","-","-","-"
"335","recordWithNullableNestedComponentType","@Test
  public void recordWithNullableNestedComponentType()","0","-","-","-","-"
"336","buildOtherPackage","@Test
  public void buildOtherPackage()","0","-","-","-","-"
"337","autoBuilderOnEnum","@Test
  public void autoBuilderOnEnum()","0","-","-","-","-"
"338","autoBuilderPrivate","@Test
  public void autoBuilderPrivate()","0","-","-","-","-"
"339","autoBuilderClassMustHaveNoArgConstructor","@Test
  public void autoBuilderClassMustHaveNoArgConstructor()","0","-","-","-","-"
"340","autoBuilderClassMustHaveVisibleNoArgConstructor","@Test
  public void autoBuilderClassMustHaveVisibleNoArgConstructor()","0","-","-","-","-"
"341","autoBuilderMissingBuildMethod","@Test
  public void autoBuilderMissingBuildMethod()","0","-","-","-","-"
"342","autoBuilderNestedInPrivate","@Test
  public void autoBuilderNestedInPrivate()","0","-","-","-","-"
"343","autoBuilderInner","@Test
  public void autoBuilderInner()","0","-","-","-","-"
"344","innerConstructor","@Test
  public void innerConstructor()","0","-","-","-","-"
"345","noVisibleConstructor","@Test
  public void noVisibleConstructor()","0","-","-","-","-"
"346","noVisibleMethod","@Test
  public void noVisibleMethod()","0","-","-","-","-"
"347","methodNotStatic","@Test
  public void methodNotStatic()","0","-","-","-","-"
"348","noMatchingConstructor","@Test
  public void noMatchingConstructor()","0","-","-","-","-"
"349","twoMatchingConstructors","@Test
  public void twoMatchingConstructors()","0","-","-","-","-"
"350","constructInterface","@Test
  public void constructInterface()","0","-","-","-","-"
"351","inconsistentSetPrefix","@Test
  public void inconsistentSetPrefix()","0","-","-","-","-"
"352","missingSetter","@Test
  public void missingSetter()","0","-","-","-","-"
"353","tooManyArgs","@Test
  public void tooManyArgs()","0","-","-","-","-"
"354","alienNoArgMethod","@Test
  public void alienNoArgMethod()","0","-","-","-","-"
"355","alienOneArgMethod","@Test
  public void alienOneArgMethod()","0","-","-","-","-"
"356","setterReturnType","@Test
  public void setterReturnType()","0","-","-","-","-"
"357","nullableSetterForNonNullableParameter","@Test
  public void nullableSetterForNonNullableParameter()","0","-","-","-","-"
"358","nullablePrimitiveParameter","@Test
  public void nullablePrimitiveParameter()","0","-","-","-","-"
"359","setterWrongType","@Test
  public void setterWrongType()","0","-","-","-","-"
"360","setterWrongTypeEvenWithConversion","@Test
  public void setterWrongTypeEvenWithConversion()","0","-","-","-","-"
"361","typeParamMismatch","@Test
  public void typeParamMismatch()","0","-","-","-","-"
"362","annotationWithCallMethod","@Test
  public void annotationWithCallMethod()","0","-","-","-","-"
"363","sorted","private static String sorted(String... imports)","0","-","-","-","-"
"364","parsedTemplate","@Override
    Template parsedTemplate()","0","-","-","-","-"
"365","parsedTemplateForString","static Template parsedTemplateForString(String string)","0","-","-","-","-"
"366","testHappy","@Test
  public void testHappy()","0","-","-","-","-"
"367","testUnset","@Test
  public void testUnset()","0","-","-","-","-"
"368","parsedTemplate","@Override
    Template parsedTemplate()","0","-","-","-","-"
"369","testSubSub","@Test
  public void testSubSub()","0","-","-","-","-"
"370","parsedTemplate","@Override
    Template parsedTemplate()","0","-","-","-","-"
"371","testPrivate","@Test
  public void testPrivate()","0","-","-","-","-"
"372","parsedTemplate","@Override
    Template parsedTemplate()","0","-","-","-","-"
"373","testStatic","@Test
  public void testStatic()","0","-","-","-","-"
"374","parsedTemplate","@Override
    Template parsedTemplate()","0","-","-","-","-"
"375","testPrimitive","@Test
  public void testPrimitive()","0","-","-","-","-"
"376","data","@Parameters(name = ""","0","-","-","-","-"
"377","GeneratedDoesNotExistTest","public GeneratedDoesNotExistTest(ImmutableList<String> javacOptions, String expectedAnnotation)","0","-","-","-","-"
"378","OverridableInvocationHandler","OverridableInvocationHandler(T original)","0","-","-","-","-"
"379","invoke","@Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable","0","-","-","-","-"
"380","partialProxy","private static <T> T partialProxy(Class<T> type, OverridableInvocationHandler<T> handler)","0","-","-","-","-"
"381","ElementsHandler","ElementsHandler(Elements original, Set<String> ignoredGenerated)","0","-","-","-","-"
"382","getTypeElement","@Keep
    public TypeElement getTypeElement(CharSequence name)","0","-","-","-","-"
"383","ProcessingEnvironmentHandler","ProcessingEnvironmentHandler(ProcessingEnvironment original, Set<String> ignoredGenerated)","0","-","-","-","-"
"384","getElementUtils","@Keep
    public Elements getElementUtils()","0","-","-","-","-"
"385","ProcessorHandler","ProcessorHandler(Processor original, Set<String> ignoredGenerated)","0","-","-","-","-"
"386","init","@Keep
    public void init(ProcessingEnvironment processingEnv)","0","-","-","-","-"
"387","test","@Test
  public void test()","0","-","-","-","-"
"388","setUp","@Before
  public void setUp()","0","-","-","-","-"
"389","assertTypeImportsAndSpellings","/**
   * Assert that the fake program returned by fakeProgramForTypes has the given list of imports and
   * the given list of spellings. Here, ""spellings"" means the way each type is referenced in the
   * decoded program, for example","0","-","-","-","-"
"390","testImportsForNoTypes","@Test
  public void testImportsForNoTypes()","0","-","-","-","-"
"391","testImportsForImplicitlyImportedTypes","@Test
  public void testImportsForImplicitlyImportedTypes()","0","-","-","-","-"
"392","testImportsForPlainTypes","@Test
  public void testImportsForPlainTypes()","0","-","-","-","-"
"393","testImportsForComplicatedTypes","@Test
  public void testImportsForComplicatedTypes()","0","-","-","-","-"
"394","testImportsForArrayTypes","@Test
  public void testImportsForArrayTypes()","0","-","-","-","-"
"395","testImportNestedType","@Test
  public void testImportNestedType()","0","-","-","-","-"
"396","testImportsForAmbiguousNames","@Test
  public void testImportsForAmbiguousNames()","0","-","-","-","-"
"397","testSimplifyJavaLangString","@Test
  public void testSimplifyJavaLangString()","0","-","-","-","-"
"398","testSimplifyJavaLangThreadState","@Test
  public void testSimplifyJavaLangThreadState()","0","-","-","-","-"
"399","testSimplifyJavaLangNamesake","@Test
  public void testSimplifyJavaLangNamesake()","0","-","-","-","-"
"400","testSimplifyComplicatedTypes","@Test
  public void testSimplifyComplicatedTypes()","0","-","-","-","-"
"401","testSimplifyMultipleBounds","@Test
  public void testSimplifyMultipleBounds()","0","-","-","-","-"
"402","testOuterParameterizedInnerNot","@Test
  public void testOuterParameterizedInnerNot()","0","-","-","-","-"
"403","testOuterParameterizedInnerAlso","@Test
  public void testOuterParameterizedInnerAlso()","0","-","-","-","-"
"404","typeMirrorSet","private static Set<TypeMirror> typeMirrorSet(TypeMirror... typeMirrors)","0","-","-","-","-"
"405","typeElementOf","private TypeElement typeElementOf(Class<?> c)","0","-","-","-","-"
"406","typeMirrorOf","private DeclaredType typeMirrorOf(Class<?> c)","0","-","-","-","-"
"407","baseWithoutContainedTypes","/**
   * Returns a ""base type"" for TypeSimplifier that does not contain any nested types. The point
   * being that every","0","-","-","-","-"
"408","testErrorTypes","@Test
  public void testErrorTypes()","0","-","-","-","-"
"409","process","@Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"410","test","private void test()","0","-","-","-","-"
"411","testErrorType","@SuppressWarnings(""MissingFail"") // error message gets converted into assertion failure
    private void testErrorType(TypeMirror typeWithError)","0","-","-","-","-"
"412","getSupportedSourceVersion","@Override
    public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"413","testSimple","@Test
  public void testSimple()","0","-","-","-","-"
"414","testEmptyPackage","@Test
  public void testEmptyPackage()","0","-","-","-","-"
"415","testGwtSimple","@Test
  public void testGwtSimple()","0","-","-","-","-"
"416","testCollectionsForArrays","@Test
  public void testCollectionsForArrays()","0","-","-","-","-"
"417","testMissingClass","@Test
  public void testMissingClass()","0","-","-","-","-"
"418","testScanner","/**
   * Tests basic scanner functionality. The test concatenates the tokens in","0","-","-","-","-"
"419","decapitalizeLikeJavaBeans","@Test
  public void decapitalizeLikeJavaBeans()","0","-","-","-","-"
"420","decapitalizeNormally","@Test
  public void decapitalizeNormally()","0","-","-","-","-"
"421","initTypes","@Before
  public void initTypes()","0","-","-","-","-"
"422","fieldDeclarations","@Test
  public void fieldDeclarations()","0","-","-","-","-"
"423","fieldDeclarations","private ImmutableList<String> fieldDeclarations(int size)","0","-","-","-","-"
"424","initToAllSet","@Test
  public void initToAllSet()","0","-","-","-","-"
"425","initToAllSet","private ImmutableList<String> initToAllSet(int size)","0","-","-","-","-"
"426","markAsSet_reference","@Test
  public void markAsSet_reference()","0","-","-","-","-"
"427","markAsSet_byte","@Test
  public void markAsSet_byte()","0","-","-","-","-"
"428","markAsSet_short","@Test
  public void markAsSet_short()","0","-","-","-","-"
"429","markAsSet_int","@Test
  public void markAsSet_int()","0","-","-","-","-"
"430","markAsSet_intPlusByte","@Test
  public void markAsSet_intPlusByte()","0","-","-","-","-"
"431","missingRequiredProperty_reference","@Test
  public void missingRequiredProperty_reference()","0","-","-","-","-"
"432","missingRequiredProperty_byte","@Test
  public void missingRequiredProperty_byte()","0","-","-","-","-"
"433","missingRequiredProperty_short","@Test
  public void missingRequiredProperty_short()","0","-","-","-","-"
"434","missingRequiredProperty_int","@Test
  public void missingRequiredProperty_int()","0","-","-","-","-"
"435","missingRequiredProperty_intPlusByte","@Test
  public void missingRequiredProperty_intPlusByte()","0","-","-","-","-"
"436","noValueToGet_noDefaults","@Test
  public void noValueToGet_noDefaults()","0","-","-","-","-"
"437","noValueToGet_withDefaults","@Test
  public void noValueToGet_withDefaults()","0","-","-","-","-"
"438","getAnyMissing","@Test
  public void getAnyMissing()","0","-","-","-","-"
"439","getAnyMissing_withDefaults","@Test
  public void getAnyMissing_withDefaults()","0","-","-","-","-"
"440","hex","@Test
  public void hex()","0","-","-","-","-"
"441","requiredPrimitiveProperties","private ImmutableList<Property> requiredPrimitiveProperties(
      BuilderRequiredProperties builderRequiredProperties)","0","-","-","-","-"
"442","builderRequiredProperties","private BuilderRequiredProperties builderRequiredProperties(int primitiveCount)","0","-","-","-","-"
"443","builderRequiredPropertiesWithDefaults","private BuilderRequiredProperties builderRequiredPropertiesWithDefaults(int primitiveCount)","0","-","-","-","-"
"444","fakeProperties","private ImmutableSet<Property> fakeProperties(int primitiveCount)","0","-","-","-","-"
"445","fakePropertiesWithDefaults","private ImmutableSet<Property> fakePropertiesWithDefaults(int primitiveCount)","0","-","-","-","-"
"446","fakeProperty","private Property fakeProperty(String name, TypeMirror type, boolean hasDefault)","0","-","-","-","-"
"447","testImmutableBuilders","@Test
  public void testImmutableBuilders() throws Exception","0","-","-","-","-"
"448","checkImmutableClass","private void checkImmutableClass(Class<?> c)
      throws ClassNotFoundException, NoSuchMethodException","0","-","-","-","-"
"449","nullableMentionedInMethods","@Test
  public void nullableMentionedInMethods()","0","-","-","-","-"
"450","NullableProcessor","NullableProcessor(Expect expect)","0","-","-","-","-"
"451","getSupportedSourceVersion","@Override
    public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"452","process","@Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"453","Simple","public Simple(int anInt)","0","-","-","-","-"
"454","get","@Override
    public ImmutableList<Object> get()","0","-","-","-","-"
"455","simple","@Test
  public void simple() throws Exception","0","-","-","-","-"
"456","KitchenSink","public KitchenSink(
        byte aByte,
        short aShort,
        int anInt,
        long aLong,
        float aFloat,
        double aDouble,
        char aChar,
        boolean aBoolean,
        String aString,
        ImmutableList<String> aStringList,
        String[] aStringArray,
        byte[] aByteArray,
        Outer.Inner anInner)","0","-","-","-","-"
"457","get","@Override
    public ImmutableList<Object> get()","0","-","-","-","-"
"458","kitchenSink","@Test
  public void kitchenSink() throws Exception","0","-","-","-","-"
"459","testClass","/**
   * Tests that we can successfully generate a forwarding class that calls the constructor of the
   * given class. We'll then load the created class and call the forwarding method, checking that it
   * does indeed call the constructor.
   */
  private void testClass(
      Class<? extends Supplier<ImmutableList<Object>>> c,
      ImmutableList<Object> constructorParameters)
      throws ReflectiveOperationException","0","-","-","-","-"
"460","findClass","@Override
          protected Class<?> findClass(String name) throws ClassNotFoundException","0","-","-","-","-"
"461","generatedAnnotationType","/**
   * Returns the qualified name of the","0","-","-","-","-"
"462","importGeneratedAnnotationType","/**
   * Returns an","0","-","-","-","-"
"463","setUpClass","@BeforeClass
  public static void setUpClass()","0","-","-","-","-"
"464","getFoo","abstract String getFoo();","0","-","-","-","-"
"465","noTypeParameters","@Test
  public void noTypeParameters()","0","-","-","-","-"
"466","getFoo","abstract List<T> getFoo();","0","-","-","-","-"
"467","setFoo","abstract void setFoo(List<T> list);","0","-","-","-","-"
"468","simpleTypeParameter","@Test
  public void simpleTypeParameter()","0","-","-","-","-"
"469","getFoo","abstract Map<T, ? extends U> getFoo();","0","-","-","-","-"
"470","setFoo","abstract void setFoo(Map<T, ? extends U> list);","0","-","-","-","-"
"471","hairyTypeParameters","@Test
  public void hairyTypeParameters()","0","-","-","-","-"
"472","getFoo","abstract Map<T, U> getFoo();","0","-","-","-","-"
"473","getBar","abstract List<? extends T> getBar();","0","-","-","-","-"
"474","setFoo","abstract void setFoo(Map<T, U> foo);","0","-","-","-","-"
"475","setBar","abstract void setBar(List<? extends T> bar);","0","-","-","-","-"
"476","nestedClasses","@Test
  public void nestedClasses()","0","-","-","-","-"
"477","canAssignStaticMethodResult","@Test
  public void canAssignStaticMethodResult()","0","-","-","-","-"
"478","methodNamed","private static ExecutableElement methodNamed(List<ExecutableElement> methods, String name)","0","-","-","-","-"
"479","methodNamed","private static ExecutableElement methodNamed(
      List<ExecutableElement> methods, String name, TypeMirror erasedParameterType)","0","-","-","-","-"
"480","setUp","@Before
  public void setUp()","0","-","-","-","-"
"481","one","abstract <T extends V, U extends T, V> Map<? extends T, ? super U> one();","0","-","-","-","-"
"482","two","abstract <T extends V, U extends T, V> Map<? extends T, ? super U> two();","0","-","-","-","-"
"483","testQuirkyTypeMirrors","/**
   * This test shows why we need to have TypeMirrorSet. The mirror of java.lang.Object obtained from
   *","0","-","-","-","-"
"484","testTypeMirrorSet","@Test
  @SuppressWarnings(""TypeEquals"") // We want to test the equals method invocation on TypeMirror.
  public void testTypeMirrorSet()","0","-","-","-","-"
"485","testTypeMirrorSetWildcardCapture","@Test
  public void testTypeMirrorSetWildcardCapture()","0","-","-","-","-"
"486","testPackageNameOfString","@Test
  public void testPackageNameOfString()","0","-","-","-","-"
"487","testPackageNameOfMapEntry","@Test
  public void testPackageNameOfMapEntry()","0","-","-","-","-"
"488","testIsCastingUnchecked","@Test
  public void testIsCastingUnchecked()","0","-","-","-","-"
"489","typeMirrorSet","private static Set<TypeMirror> typeMirrorSet(TypeMirror... typeMirrors)","0","-","-","-","-"
"490","objectMirror","private TypeMirror objectMirror()","0","-","-","-","-"
"491","cloneReturnTypeMirror","private TypeMirror cloneReturnTypeMirror()","0","-","-","-","-"
"492","typeElementOf","private TypeElement typeElementOf(Class<?> c)","0","-","-","-","-"
"493","typeMirrorOf","private TypeMirror typeMirrorOf(Class<?> c)","0","-","-","-","-"
"494","simpleSuccess","@Test
  public void simpleSuccess()","0","-","-","-","-"
"495","importTwoWays","@Test
  public void importTwoWays()","0","-","-","-","-"
"496","testNoWarningsFromGenerics","@Test
  public void testNoWarningsFromGenerics()","0","-","-","-","-"
"497","testNestedParameterizedTypesWithTypeAnnotations","@Test
  public void testNestedParameterizedTypesWithTypeAnnotations()","0","-","-","-","-"
"498","testTypeParametersWithAnnotationsOnBounds","@Test
  public void testTypeParametersWithAnnotationsOnBounds()","0","-","-","-","-"
"499","getSupportedSourceVersion","@Override
      public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"500","process","@Override
      public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"501","testAbstractVoid","@Test
  public void testAbstractVoid()","0","-","-","-","-"
"502","testAbstractWithParams","@Test
  public void testAbstractWithParams()","0","-","-","-","-"
"503","testPrimitiveArrayWarning","@Test
  public void testPrimitiveArrayWarning()","0","-","-","-","-"
"504","testPrimitiveArrayWarningFromParent","@Test
  public void testPrimitiveArrayWarningFromParent()","0","-","-","-","-"
"505","testPrimitiveArrayWarningSuppressed","@Test
  public void testPrimitiveArrayWarningSuppressed()","0","-","-","-","-"
"506","autoValueMustBeClass","@Test
  public void autoValueMustBeClass()","0","-","-","-","-"
"507","autoValueMustNotBeFinal","@Test
  public void autoValueMustNotBeFinal()","0","-","-","-","-"
"508","autoValueMustBeStatic","@Test
  public void autoValueMustBeStatic()","0","-","-","-","-"
"509","autoValueMustNotBePrivate","@Test
  public void autoValueMustNotBePrivate()","0","-","-","-","-"
"510","autoValueMustBeNotBeNestedInPrivate","@Test
  public void autoValueMustBeNotBeNestedInPrivate()","0","-","-","-","-"
"511","autoValueMustHaveNoArgConstructor","@Test
  public void autoValueMustHaveNoArgConstructor()","0","-","-","-","-"
"512","autoValueMustHaveVisibleNoArgConstructor","@Test
  public void autoValueMustHaveVisibleNoArgConstructor()","0","-","-","-","-"
"513","noMultidimensionalPrimitiveArrays","@Test
  public void noMultidimensionalPrimitiveArrays()","0","-","-","-","-"
"514","noObjectArrays","@Test
  public void noObjectArrays()","0","-","-","-","-"
"515","annotationOnInterface","@Test
  public void annotationOnInterface()","0","-","-","-","-"
"516","annotationOnEnum","@Test
  public void annotationOnEnum()","0","-","-","-","-"
"517","extendAutoValue","@Test
  public void extendAutoValue()","0","-","-","-","-"
"518","bogusSerialVersionUID","@Test
  public void bogusSerialVersionUID()","0","-","-","-","-"
"519","nonExistentSuperclass","@Test
  public void nonExistentSuperclass()","0","-","-","-","-"
"520","cannotImplementAnnotation","@Test
  public void cannotImplementAnnotation()","0","-","-","-","-"
"521","missingPropertyType","@Test
  public void missingPropertyType()","0","-","-","-","-"
"522","missingGenericPropertyType","@Test
  public void missingGenericPropertyType()","0","-","-","-","-"
"523","missingComplexGenericPropertyType","@Test
  public void missingComplexGenericPropertyType()","0","-","-","-","-"
"524","missingSuperclassGenericParameter","@Test
  public void missingSuperclassGenericParameter()","0","-","-","-","-"
"525","nullablePrimitive","@Test
  public void nullablePrimitive()","0","-","-","-","-"
"526","correctBuilder","@Test
  public void correctBuilder()","0","-","-","-","-"
"527","builderWithNullableTypeAnnotation","@Test
  public void builderWithNullableTypeAnnotation()","0","-","-","-","-"
"528","autoValueBuilderOnTopLevelClass","@Test
  public void autoValueBuilderOnTopLevelClass()","0","-","-","-","-"
"529","autoValueBuilderNotInsideAutoValue","@Test
  public void autoValueBuilderNotInsideAutoValue()","0","-","-","-","-"
"530","autoValueBuilderNotStatic","@Test
  public void autoValueBuilderNotStatic()","0","-","-","-","-"
"531","autoValueBuilderMustHaveNoArgConstructor","@Test
  public void autoValueBuilderMustHaveNoArgConstructor()","0","-","-","-","-"
"532","autoValueBuilderOnEnum","@Test
  public void autoValueBuilderOnEnum()","0","-","-","-","-"
"533","autoValueBuilderDuplicate","@Test
  public void autoValueBuilderDuplicate()","0","-","-","-","-"
"534","autoValueBuilderMissingSetter","@Test
  public void autoValueBuilderMissingSetter()","0","-","-","-","-"
"535","autoValueBuilderMissingSetterUsingSetPrefix","@Test
  public void autoValueBuilderMissingSetterUsingSetPrefix()","0","-","-","-","-"
"536","autoValueBuilderWrongTypeSetter","@Test
  public void autoValueBuilderWrongTypeSetter()","0","-","-","-","-"
"537","autoValueBuilderSetterReturnsNullable","@Test
  public void autoValueBuilderSetterReturnsNullable()","0","-","-","-","-"
"538","autoValueBuilderWrongTypeSetterWithCopyOf","@Test
  public void autoValueBuilderWrongTypeSetterWithCopyOf()","0","-","-","-","-"
"539","autoValueBuilderWrongTypeSetterWithCopyOfGenericallyWrong","@Test
  public void autoValueBuilderWrongTypeSetterWithCopyOfGenericallyWrong()","0","-","-","-","-"
"540","autoValueBuilderWrongTypeSetterWithGetPrefix","@Test
  public void autoValueBuilderWrongTypeSetterWithGetPrefix()","0","-","-","-","-"
"541","autoValueBuilderNullableSetterForNonNullable","@Test
  public void autoValueBuilderNullableSetterForNonNullable()","0","-","-","-","-"
"542","autoValueBuilderBeansConfusion","@Test
  public void autoValueBuilderBeansConfusion()","0","-","-","-","-"
"543","autoValueBuilderExtraSetter","@Test
  public void autoValueBuilderExtraSetter()","0","-","-","-","-"
"544","autoValueBuilderSetPrefixAndNoSetPrefix","@Test
  public void autoValueBuilderSetPrefixAndNoSetPrefix()","0","-","-","-","-"
"545","autoValueBuilderSetterReturnType","@Test
  public void autoValueBuilderSetterReturnType()","0","-","-","-","-"
"546","autoValueBuilderWrongTypeGetter","@Test
  public void autoValueBuilderWrongTypeGetter()","0","-","-","-","-"
"547","autoValueBuilderPropertyBuilderInvalidType","@Test
  public void autoValueBuilderPropertyBuilderInvalidType()","0","-","-","-","-"
"548","autoValueBuilderPropertyBuilderNullable","@Test
  public void autoValueBuilderPropertyBuilderNullable()","0","-","-","-","-"
"549","autoValueBuilderPropertyBuilderNullableType","@Test
  public void autoValueBuilderPropertyBuilderNullableType()","0","-","-","-","-"
"550","autoValueBuilderPropertyBuilderWrongCollectionType","@Test
  public void autoValueBuilderPropertyBuilderWrongCollectionType()","0","-","-","-","-"
"551","autoValueBuilderPropertyBuilderWeirdBuilderType","@Test
  public void autoValueBuilderPropertyBuilderWeirdBuilderType()","0","-","-","-","-"
"552","autoValueBuilderPropertyBuilderWeirdBuiltType","@Test
  public void autoValueBuilderPropertyBuilderWeirdBuiltType()","0","-","-","-","-"
"553","autoValueBuilderPropertyBuilderHasNoBuild","@Test
  public void autoValueBuilderPropertyBuilderHasNoBuild()","0","-","-","-","-"
"554","autoValueBuilderPropertyBuilderHasStaticBuild","@Test
  public void autoValueBuilderPropertyBuilderHasStaticBuild()","0","-","-","-","-"
"555","autoValueBuilderPropertyBuilderReturnsWrongType","@Test
  public void autoValueBuilderPropertyBuilderReturnsWrongType()","0","-","-","-","-"
"556","autoValueBuilderPropertyBuilderCantConstruct","@Test
  public void autoValueBuilderPropertyBuilderCantConstruct()","0","-","-","-","-"
"557","autoValueBuilderPropertyBuilderCantReconstruct","@Test
  public void autoValueBuilderPropertyBuilderCantReconstruct()","0","-","-","-","-"
"558","autoValueBuilderPropertyBuilderWrongTypeAddAll","@Test
  public void autoValueBuilderPropertyBuilderWrongTypeAddAll()","0","-","-","-","-"
"559","autoValueBuilderPropertyBuilderCantSet","@Test
  public void autoValueBuilderPropertyBuilderCantSet()","0","-","-","-","-"
"560","autoValueBuilderPropertyBuilderWrongTypeToBuilder","@Test
  public void autoValueBuilderPropertyBuilderWrongTypeToBuilder()","0","-","-","-","-"
"561","autoValueBuilderPropertyBuilderWrongElementType","@Test
  public void autoValueBuilderPropertyBuilderWrongElementType()","0","-","-","-","-"
"562","autoValueBuilderAlienMethod0","@Test
  public void autoValueBuilderAlienMethod0()","0","-","-","-","-"
"563","autoValueBuilderAlienMethod1","@Test
  public void autoValueBuilderAlienMethod1()","0","-","-","-","-"
"564","autoValueBuilderAlienMethod2","@Test
  public void autoValueBuilderAlienMethod2()","0","-","-","-","-"
"565","autoValueBuilderMissingBuildMethod","@Test
  public void autoValueBuilderMissingBuildMethod()","0","-","-","-","-"
"566","autoValueBuilderDuplicateBuildMethods","@Test
  public void autoValueBuilderDuplicateBuildMethods()","0","-","-","-","-"
"567","autoValueBuilderWrongTypeBuildMethod","@Test
  public void autoValueBuilderWrongTypeBuildMethod()","0","-","-","-","-"
"568","autoValueBuilderTypeParametersDontMatch1","@Test
  public void autoValueBuilderTypeParametersDontMatch1()","0","-","-","-","-"
"569","autoValueBuilderTypeParametersDontMatch2","@Test
  public void autoValueBuilderTypeParametersDontMatch2()","0","-","-","-","-"
"570","autoValueBuilderTypeParametersDontMatch3","@Test
  public void autoValueBuilderTypeParametersDontMatch3()","0","-","-","-","-"
"571","autoValueBuilderToBuilderWrongTypeParameters","@Test
  public void autoValueBuilderToBuilderWrongTypeParameters()","0","-","-","-","-"
"572","autoValueBuilderToBuilderDuplicate","@Test
  public void autoValueBuilderToBuilderDuplicate()","0","-","-","-","-"
"573","getFooIsFoo","@Test
  public void getFooIsFoo()","0","-","-","-","-"
"574","getSupportedAnnotationTypes","@Override
    public Set<String> getSupportedAnnotationTypes()","0","-","-","-","-"
"575","getSupportedSourceVersion","@Override
    public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"576","process","@Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"577","generateFoo","private void generateFoo(TypeElement type) throws IOException","0","-","-","-","-"
"578","referencingGeneratedClass","@Test
  public void referencingGeneratedClass()","0","-","-","-","-"
"579","referencingGeneratedClassInAnnotation","@Test
  public void referencingGeneratedClassInAnnotation()","0","-","-","-","-"
"580","annotationReferencesUndefined","@Test
  public void annotationReferencesUndefined()","0","-","-","-","-"
"581","packagePrivateAnnotationFromOtherPackage","@Test
  public void packagePrivateAnnotationFromOtherPackage()","0","-","-","-","-"
"582","visibleProtectedAnnotationFromOtherPackage","@Test
  public void visibleProtectedAnnotationFromOtherPackage()","0","-","-","-","-"
"583","methodAnnotationsCopiedInLexicographicalOrder","@Test
  public void methodAnnotationsCopiedInLexicographicalOrder()","0","-","-","-","-"
"584","nonVisibleProtectedAnnotationFromOtherPackage","@Test
  public void nonVisibleProtectedAnnotationFromOtherPackage()","0","-","-","-","-"
"585","nonVisibleProtectedClassAnnotationFromOtherPackage","@Test
  public void nonVisibleProtectedClassAnnotationFromOtherPackage()","0","-","-","-","-"
"586","builderWithVarArgsDoesNotImportJavaUtilArrays","@Test
  public void builderWithVarArgsDoesNotImportJavaUtilArrays()","0","-","-","-","-"
"587","staticBuilderMethodInBuilderClass","@Test
  public void staticBuilderMethodInBuilderClass()","0","-","-","-","-"
"588","javaLangClash","/**
   * Tests behaviour when the package containing an","0","-","-","-","-"
"589","generatedParentWithGeneratedGetterButSetterInBuilder","@Test
  public void generatedParentWithGeneratedGetterButSetterInBuilder()","0","-","-","-","-"
"590","GeneratedParentProcessor","GeneratedParentProcessor(AutoValueProcessor autoValueProcessor, Expect expect)","0","-","-","-","-"
"591","process","@Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"592","getSupportedSourceVersion","@Override
    public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"593","kotlinMetadataAnnotationsAreImplicitlyExcludedFromCopying","@Test
  public void kotlinMetadataAnnotationsAreImplicitlyExcludedFromCopying()","0","-","-","-","-"
"594","autoValueBuilderNullableSetterPrimitiveGetter","@Test
  public void autoValueBuilderNullableSetterPrimitiveGetter()","0","-","-","-","-"
"595","copyAnnotationsMissingExclusion","@Test
  public void copyAnnotationsMissingExclusion()","0","-","-","-","-"
"596","sorted","private static String sorted(String... imports)","0","-","-","-","-"
"597","testCorrect","@Test
  public void testCorrect()","0","-","-","-","-"
"598","testDoesNotReturnAnnotation","@Test
  public void testDoesNotReturnAnnotation()","0","-","-","-","-"
"599","testOverload","@Test
  public void testOverload()","0","-","-","-","-"
"600","testSameNameDifferentPackagesDoesNotTriggerOverload","@Test
  public void testSameNameDifferentPackagesDoesNotTriggerOverload()","0","-","-","-","-"
"601","testWrongName","@Test
  public void testWrongName()","0","-","-","-","-"
"602","testWrongType","@Test
  public void testWrongType()","0","-","-","-","-"
"603","testWrongTypeCollection","@Test
  public void testWrongTypeCollection()","0","-","-","-","-"
"604","testExtraParameters","@Test
  public void testExtraParameters()","0","-","-","-","-"
"605","testMissingParameters","@Test
  public void testMissingParameters()","0","-","-","-","-"
"606","testAnnotationValuedDefaultsNotSupportedYet","@Test
  public void testAnnotationValuedDefaultsNotSupportedYet()","0","-","-","-","-"
"607","testAnnotationMemberNameConflictWithGeneratedLocal","@Test
  public void testAnnotationMemberNameConflictWithGeneratedLocal()","0","-","-","-","-"
"608","loadOnce","@Test
  public void loadOnce() throws Exception","0","-","-","-","-"
"609","loadWithDuplicates","@Test
  public void loadWithDuplicates() throws Exception","0","-","-","-","-"
"610","getResources","@Override
          public Enumeration<URL> getResources(String name) throws IOException","0","-","-","-","-"
"611","blankLinesAndComments","@Test
  public void blankLinesAndComments() throws Exception","0","-","-","-","-"
"612","loadTwiceFromSameLoader","@Test
  public void loadTwiceFromSameLoader() throws Exception","0","-","-","-","-"
"613","loadTwiceFromDifferentLoaders","@Test
  public void loadTwiceFromDifferentLoaders() throws Exception","0","-","-","-","-"
"614","noProviders","@Test
  public void noProviders() throws Exception","0","-","-","-","-"
"615","classNotFound","@Test
  public void classNotFound() throws Exception","0","-","-","-","-"
"616","wrongTypeClass","@Test
  public void wrongTypeClass() throws Exception","0","-","-","-","-"
"617","couldNotConstruct","@Test
  public void couldNotConstruct() throws Exception","0","-","-","-","-"
"618","brokenLoader","@Test
  public void brokenLoader()","0","-","-","-","-"
"619","getResources","@Override
          public Enumeration<URL> getResources(String name) throws IOException","0","-","-","-","-"
"620","loaderForJarWithEntries","private static ClassLoader loaderForJarWithEntries(String service, String... lines)
      throws IOException","0","-","-","-","-"
"621","urlForJarWithEntries","private static URL urlForJarWithEntries(String service, String... lines) throws IOException","0","-","-","-","-"
"622","testExtensionCompilation","@Test
  public void testExtensionCompilation()","0","-","-","-","-"
"623","testExtensionConsumesProperties","@Test
  public void testExtensionConsumesProperties()","0","-","-","-","-"
"624","testDoesntRaiseWarningForConsumedProperties","@Test
  public void testDoesntRaiseWarningForConsumedProperties()","0","-","-","-","-"
"625","testDoesntRaiseWarningForToBuilder","@Test
  public void testDoesntRaiseWarningForToBuilder() throws IOException","0","-","-","-","-"
"626","testCantConsumeTwice","@Test
  public void testCantConsumeTwice()","0","-","-","-","-"
"627","consumeProperties","@Override
      public Set<String> consumeProperties(Context context)","0","-","-","-","-"
"628","testCantConsumeNonExistentProperty","@Test
  public void testCantConsumeNonExistentProperty()","0","-","-","-","-"
"629","consumeProperties","@Override
      public Set<String> consumeProperties(Context context)","0","-","-","-","-"
"630","testCantConsumeConcreteMethod","@Test
  public void testCantConsumeConcreteMethod()","0","-","-","-","-"
"631","consumeMethods","@Override
      public Set<ExecutableElement> consumeMethods(Context context)","0","-","-","-","-"
"632","testCantConsumeNonExistentMethod","@Test
  public void testCantConsumeNonExistentMethod()","0","-","-","-","-"
"633","consumeMethods","@Override
      public Set<ExecutableElement> consumeMethods(Context context)","0","-","-","-","-"
"634","testExtensionWithoutConsumedPropertiesFails","@Test
  public void testExtensionWithoutConsumedPropertiesFails()","0","-","-","-","-"
"635","testConsumeBuilderMethod","@Test
  public void testConsumeBuilderMethod()","0","-","-","-","-"
"636","testAbstractBuilderMethodNotConsumedFails","@Test
  public void testAbstractBuilderMethodNotConsumedFails()","0","-","-","-","-"
"637","testConsumeMethodWithArguments","@Test
  public void testConsumeMethodWithArguments()","0","-","-","-","-"
"638","testExtensionWithBuilderCompilation","@Test
  public void testExtensionWithBuilderCompilation()","0","-","-","-","-"
"639","testLastExtensionGeneratesNoCode","@Test
  public void testLastExtensionGeneratesNoCode()","0","-","-","-","-"
"640","testFirstExtensionGeneratesNoCode","@Test
  public void testFirstExtensionGeneratesNoCode()","0","-","-","-","-"
"641","testMiddleExtensionGeneratesNoCode","@Test
  public void testMiddleExtensionGeneratesNoCode()","0","-","-","-","-"
"642","testLoneExtensionGeneratesNoCode","@Test
  public void testLoneExtensionGeneratesNoCode()","0","-","-","-","-"
"643","doTestNoCode","private void doTestNoCode(AutoValueExtension... extensions)","0","-","-","-","-"
"644","testTwoExtensionsBothWantToBeFinal","@Test
  public void testTwoExtensionsBothWantToBeFinal()","0","-","-","-","-"
"645","testNonFinalThenFinal","@Test
  public void testNonFinalThenFinal()","0","-","-","-","-"
"646","testFinalThenNonFinal","@Test
  public void testFinalThenNonFinal()","0","-","-","-","-"
"647","testUnconsumedMethod","@Test
  public void testUnconsumedMethod()","0","-","-","-","-"
"648","testBadJarDoesntBlowUp","/**
   * Tests that the search for extensions doesn't completely blow AutoValue up if there is a corrupt
   * jar in the","0","-","-","-","-"
"649","doTestBadJarDoesntBlowUp","private void doTestBadJarDoesntBlowUp(File badJar) throws IOException","0","-","-","-","-"
"650","extensionsWithAnnotatedOptions","/**
   * Tests that extensions providing their own (annotated) annotation types or options get picked
   * up.
   */
  @Test
  public void extensionsWithAnnotatedOptions()","0","-","-","-","-"
"651","extensionsWithImplementedOptions","/**
   * Tests that extensions providing their own implemented annotation types or options get picked
   * up.
   */
  @Test
  public void extensionsWithImplementedOptions()","0","-","-","-","-"
"652","generateClass","@Override
    public String generateClass(
        Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"653","getSupportedOptions","@Override
    public Set<String> getSupportedOptions()","0","-","-","-","-"
"654","generateClass","@Override
    public String generateClass(
        Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"655","applicable","@Override
    public boolean applicable(Context context)","0","-","-","-","-"
"656","mustBeFinal","@Override
    public boolean mustBeFinal(Context context)","0","-","-","-","-"
"657","consumeProperties","@Override
    public Set<String> consumeProperties(Context context)","0","-","-","-","-"
"658","generateClass","@Override
    public String generateClass(
        Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"659","BuilderExtension","BuilderExtension()","0","-","-","-","-"
"660","consumeMethod","public void consumeMethod(String methodName)","0","-","-","-","-"
"661","applicable","@Override
    public boolean applicable(Context context)","0","-","-","-","-"
"662","consumeBuilderMethods","@Override
    public Set<ExecutableElement> consumeBuilderMethods(Context context)","0","-","-","-","-"
"663","generateClass","@Override
    public String generateClass(
        Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"664","applicable","@Override
    public boolean applicable(Context context)","0","-","-","-","-"
"665","mustBeFinal","@Override
    public abstract boolean mustBeFinal(Context context);","0","-","-","-","-"
"666","extraText","String extraText(Context context)","0","-","-","-","-"
"667","generateClass","@Override
    public String generateClass(
        Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"668","mustBeFinal","@Override
    public boolean mustBeFinal(Context context)","0","-","-","-","-"
"669","mustBeFinal","@Override
    public boolean mustBeFinal(Context context)","0","-","-","-","-"
"670","applicable","@Override
    public boolean applicable(Context context)","0","-","-","-","-"
"671","mustBeFinal","@Override
    public boolean mustBeFinal(Context context)","0","-","-","-","-"
"672","generateClass","@Override
    public String generateClass(
        Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"673","writeToParcelMethod","private ExecutableElement writeToParcelMethod(Context context)","0","-","-","-","-"
"674","consumeMethods","@Override
    public Set<ExecutableElement> consumeMethods(Context context)","0","-","-","-","-"
"675","extraText","@Override
    String extraText(Context context)","0","-","-","-","-"
"676","propertyTypes","@Test
  public void propertyTypes()","0","-","-","-","-"
"677","finalAutoValueClassName","@Test
  public void finalAutoValueClassName()","0","-","-","-","-"
"678","builderContext","@Test
  public void builderContext()","0","-","-","-","-"
"679","builderContextWithInheritance","@Test
  public void builderContextWithInheritance()","0","-","-","-","-"
"680","oddBuilderContext","@Test
  public void oddBuilderContext()","0","-","-","-","-"
"681","propertyErrorShouldNotCrash","@Test
  public void propertyErrorShouldNotCrash()","0","-","-","-","-"
"682","ContextCheckingExtension","ContextCheckingExtension(Consumer<Context> checker)","0","-","-","-","-"
"683","applicable","@Override
    public boolean applicable(Context context)","0","-","-","-","-"
"684","generateClass","@Override
    public String generateClass(
        Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"685","buildTestClass","private static ImmutableList<String> buildTestClass()","0","-","-","-","-"
"686","testSimplifyWithAnnotations","@Test
  public void testSimplifyWithAnnotations()","0","-","-","-","-"
"687","getSupportedSourceVersion","@Override
    public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"688","process","@Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"689","testTypeSpellings","void testTypeSpellings(TypeElement testClass)","0","-","-","-","-"
"690","typesFromTestClass","private static ImmutableMap<String, TypeMirror> typesFromTestClass(TypeElement type)","0","-","-","-","-"
"691","toString","@Override
    public String toString()","0","-","-","-","-"
"692","setImports","InputFileBuilder setImports(Iterable<String> imports)","0","-","-","-","-"
"693","addAnnotations","InputFileBuilder addAnnotations(String... annotations)","0","-","-","-","-"
"694","addAnnotations","InputFileBuilder addAnnotations(Iterable<String> annotations)","0","-","-","-","-"
"695","addInnerTypes","InputFileBuilder addInnerTypes(String... innerTypes)","0","-","-","-","-"
"696","build","JavaFileObject build()","0","-","-","-","-"
"697","setImports","OutputFileBuilder setImports(Iterable<String> imports)","0","-","-","-","-"
"698","addFieldAnnotations","OutputFileBuilder addFieldAnnotations(String... annotations)","0","-","-","-","-"
"699","addMethodAnnotations","OutputFileBuilder addMethodAnnotations(String... innerTypes)","0","-","-","-","-"
"700","addMethodAnnotations","OutputFileBuilder addMethodAnnotations(Iterable<String> innerTypes)","0","-","-","-","-"
"701","build","JavaFileObject build()","0","-","-","-","-"
"702","getImports","private ImmutableSet<String> getImports(Class<?>... classes)","0","-","-","-","-"
"703","assertGeneratedMatches","private void assertGeneratedMatches(
      Iterable<String> imports,
      Iterable<String> annotations,
      Iterable<String> expectedMethodAnnotations)","0","-","-","-","-"
"704","testSimpleAnnotation","@Test
  public void testSimpleAnnotation()","0","-","-","-","-"
"705","testSingleStringValueAnnotation","@Test
  public void testSingleStringValueAnnotation()","0","-","-","-","-"
"706","testMultiStringValueAnnotation","@Test
  public void testMultiStringValueAnnotation()","0","-","-","-","-"
"707","testNumberValueAnnotation","@Test
  public void testNumberValueAnnotation()","0","-","-","-","-"
"708","testByteValueAnnotation","@Test
  public void testByteValueAnnotation()","0","-","-","-","-"
"709","testDecimalValueAnnotation","@Test
  public void testDecimalValueAnnotation()","0","-","-","-","-"
"710","testOtherValuesAnnotation","@Test
  public void testOtherValuesAnnotation()","0","-","-","-","-"
"711","testClassAnnotation","@Test
  public void testClassAnnotation()","0","-","-","-","-"
"712","testEnumAnnotation","@Test
  public void testEnumAnnotation()","0","-","-","-","-"
"713","testEmptyAnnotationAnnotation","@Test
  public void testEmptyAnnotationAnnotation()","0","-","-","-","-"
"714","testValuedAnnotationAnnotation","@Test
  public void testValuedAnnotationAnnotation()","0","-","-","-","-"
"715","testNumberArrayAnnotation","@Test
  public void testNumberArrayAnnotation()","0","-","-","-","-"
"716","testByteArrayAnnotation","@Test
  public void testByteArrayAnnotation()","0","-","-","-","-"
"717","testDecimalArrayAnnotation","@Test
  public void testDecimalArrayAnnotation()","0","-","-","-","-"
"718","testOtherArrayAnnotation","@Test
  public void testOtherArrayAnnotation()","0","-","-","-","-"
"719","testClassArrayAnnotation","@Test
  public void testClassArrayAnnotation()","0","-","-","-","-"
"720","testImportedClassArrayAnnotation","@Test
  public void testImportedClassArrayAnnotation()","0","-","-","-","-"
"721","testEnumArrayAnnotation","@Test
  public void testEnumArrayAnnotation()","0","-","-","-","-"
"722","testArrayOfEmptyAnnotationAnnotation","@Test
  public void testArrayOfEmptyAnnotationAnnotation()","0","-","-","-","-"
"723","testArrayOfValuedAnnotationAnnotation","@Test
  public void testArrayOfValuedAnnotationAnnotation()","0","-","-","-","-"
"724","testCopyingMethodAnnotations","/**
   * Tests that when CopyAnnotations is present on a method, all non-inherited annotations (except
   * those appearing in CopyAnnotations.exclude) are copied to the method implementation in the
   * generated class.
   */
  @Test
  public void testCopyingMethodAnnotations()","0","-","-","-","-"
"725","testCopyingMethodAnnotationsToGeneratedFields","/**
   * Tests that when CopyAnnotationsToGeneratedField is present on a method, all non-inherited
   * annotations (except those appearing in CopyAnnotationsToGeneratedField.exclude) are copied to
   * the method implementation in the generated class.
   */
  @Test
  public void testCopyingMethodAnnotationsToGeneratedFields()","0","-","-","-","-"
"726","suite","public static Test suite()","0","-","-","-","-"
"727","echo","Simple echo(Simple simple);","0","-","-","-","-"
"728","echo","SimpleWithBuilder echo(SimpleWithBuilder simple);","0","-","-","-","-"
"729","echo","Nested echo(Nested nested);","0","-","-","-","-"
"730","echo","NestedWithBuilder echo(NestedWithBuilder nested);","0","-","-","-","-"
"731","echo","Generics<Simple> echo(Generics<Simple> generics);","0","-","-","-","-"
"732","echo","GenericsWithBuilder<SimpleWithBuilder> echo(GenericsWithBuilder<SimpleWithBuilder> generics);","0","-","-","-","-"
"733","echo","void echo(Simple simple, AsyncCallback<Simple> callback);","0","-","-","-","-"
"734","echo","void echo(SimpleWithBuilder simple, AsyncCallback<SimpleWithBuilder> callback);","0","-","-","-","-"
"735","echo","void echo(Nested nested, AsyncCallback<Nested> callback);","0","-","-","-","-"
"736","echo","void echo(NestedWithBuilder nested, AsyncCallback<NestedWithBuilder> callback);","0","-","-","-","-"
"737","echo","void echo(Generics<Simple> generics, AsyncCallback<Generics<Simple>> callback);","0","-","-","-","-"
"738","echo","void echo(
        GenericsWithBuilder<SimpleWithBuilder> generics,
        AsyncCallback<GenericsWithBuilder<SimpleWithBuilder>> callback);","0","-","-","-","-"
"739","AssertEqualsCallback","AssertEqualsCallback(T expected)","0","-","-","-","-"
"740","onSuccess","@Override
    public void onSuccess(T actual)","0","-","-","-","-"
"741","onFailure","@Override
    public void onFailure(Throwable caught)","0","-","-","-","-"
"742","echo","@Override
    public Simple echo(Simple simple)","0","-","-","-","-"
"743","echo","@Override
    public SimpleWithBuilder echo(SimpleWithBuilder simple)","0","-","-","-","-"
"744","echo","@Override
    public Nested echo(Nested nested)","0","-","-","-","-"
"745","echo","@Override
    public NestedWithBuilder echo(NestedWithBuilder nested)","0","-","-","-","-"
"746","echo","@Override
    public Generics<Simple> echo(Generics<Simple> generics)","0","-","-","-","-"
"747","echo","@Override
    public GenericsWithBuilder<SimpleWithBuilder> echo(
        GenericsWithBuilder<SimpleWithBuilder> generics)","0","-","-","-","-"
"748","message","public abstract String message();","0","-","-","-","-"
"749","create","public static Simple create(String message)","0","-","-","-","-"
"750","message","public abstract String message();","0","-","-","-","-"
"751","builder","public static Builder builder()","0","-","-","-","-"
"752","message","Builder message(String message);","0","-","-","-","-"
"753","build","SimpleWithBuilder build();","0","-","-","-","-"
"754","message","public abstract String message();","0","-","-","-","-"
"755","simple","public abstract Simple simple();","0","-","-","-","-"
"756","create","public static Nested create(String message, Simple simple)","0","-","-","-","-"
"757","message","public abstract String message();","0","-","-","-","-"
"758","simple","public abstract SimpleWithBuilder simple();","0","-","-","-","-"
"759","builder","public static Builder builder()","0","-","-","-","-"
"760","message","Builder message(String message);","0","-","-","-","-"
"761","simple","Builder simple(SimpleWithBuilder simple);","0","-","-","-","-"
"762","build","NestedWithBuilder build();","0","-","-","-","-"
"763","simple","public abstract T simple();","0","-","-","-","-"
"764","create","public static <T> Generics<T> create(T simple)","0","-","-","-","-"
"765","simple","public abstract T simple();","0","-","-","-","-"
"766","builder","public static <T> Builder<T> builder()","0","-","-","-","-"
"767","simple","Builder<T> simple(T simple);","0","-","-","-","-"
"768","build","GenericsWithBuilder<T> build();","0","-","-","-","-"
"769","getModuleName","@Override
  public String getModuleName()","0","-","-","-","-"
"770","gwtSetUp","@Override
  public void gwtSetUp()","0","-","-","-","-"
"771","testSimple","public void testSimple()","0","-","-","-","-"
"772","testSimpleWithBuilder","public void testSimpleWithBuilder()","0","-","-","-","-"
"773","testNested","public void testNested()","0","-","-","-","-"
"774","testNestedWithBuilder","public void testNestedWithBuilder()","0","-","-","-","-"
"775","testGenerics","public void testGenerics()","0","-","-","-","-"
"776","testGenericsWithBuilder","public void testGenericsWithBuilder()","0","-","-","-","-"
"777","testPackagelessValueType","@Test
  public void testPackagelessValueType()","0","-","-","-","-"
"778","testNestedValueType","@Test
  public void testNestedValueType()","0","-","-","-","-"
"779","testNull","@Test
  public void testNull()","0","-","-","-","-"
"780","setSourceRoot","@BeforeClass
  public static void setSourceRoot()","0","-","-","-","-"
"781","compileWithEclipse","@Test
  public void compileWithEclipse() throws IOException","0","-","-","-","-"
"782","filesUnderDirectory","private static ImmutableSet<File> filesUnderDirectory(File dir, Predicate<File> predicate)
      throws IOException","0","-","-","-","-"
"783","initOmitIdentifiers","@BeforeClass
  public static void initOmitIdentifiers()","0","-","-","-","-"
"784","publicString","public abstract String publicString();","0","-","-","-","-"
"785","protectedInt","protected abstract int protectedInt();","0","-","-","-","-"
"786","packageMap","abstract Map<String, Long> packageMap();","0","-","-","-","-"
"787","create","public static Simple create(String s, int i, Map<String, Long> m)","0","-","-","-","-"
"788","testSimple","@Test
  public void testSimple() throws Exception","0","-","-","-","-"
"789","create","public static Empty create()","0","-","-","-","-"
"790","testEmpty","@Test
  public void testEmpty() throws Exception","0","-","-","-","-"
"791","getFoo","abstract int getFoo();","0","-","-","-","-"
"792","isBar","abstract boolean isBar();","0","-","-","-","-"
"793","getOtherBar","abstract boolean getOtherBar();","0","-","-","-","-"
"794","getPackage","abstract String getPackage();","0","-","-","-","-"
"795","getPackage0","abstract String getPackage0();","0","-","-","-","-"
"796","getHTMLPage","abstract String getHTMLPage();","0","-","-","-","-"
"797","create","static SimpleWithGetters create(
        int foo, boolean bar, boolean otherBar, String pkg, String pkg0, String htmlPage)","0","-","-","-","-"
"798","testGetters","@Test
  public void testGetters()","0","-","-","-","-"
"799","getFoo","abstract int getFoo();","0","-","-","-","-"
"800","bar","abstract boolean bar();","0","-","-","-","-"
"801","create","static NotAllGetters create(int foo, boolean bar)","0","-","-","-","-"
"802","testNotGetters","@Test
  public void testNotGetters()","0","-","-","-","-"
"803","get1st","abstract int get1st();","0","-","-","-","-"
"804","get_1st","abstract int get_1st();","0","-","-","-","-"
"805","set1st","abstract Builder set1st(int x);","0","-","-","-","-"
"806","set_1st","abstract Builder set_1st(int x);","0","-","-","-","-"
"807","build","abstract StrangeGetters build();","0","-","-","-","-"
"808","builder","static Builder builder()","0","-","-","-","-"
"809","testStrangeGetters","@Test
  public void testStrangeGetters()","0","-","-","-","-"
"810","getFoo","abstract int getFoo();","0","-","-","-","-"
"811","getBytes","@SuppressWarnings(""mutable"")
    abstract byte[] getBytes();","0","-","-","-","-"
"812","hasNoBytes","boolean hasNoBytes()","0","-","-","-","-"
"813","create","static GettersAndConcreteNonGetters create(int foo, byte[] bytes)","0","-","-","-","-"
"814","testGettersAndConcreteNonGetters","@Test
  public void testGettersAndConcreteNonGetters()","0","-","-","-","-"
"815","theClass","abstract Class<?> theClass();","0","-","-","-","-"
"816","create","static ClassProperty create(Class<?> theClass)","0","-","-","-","-"
"817","testClassProperty","@Test
  public void testClassProperty()","0","-","-","-","-"
"818","numberClass","abstract Class<? extends Number> numberClass();","0","-","-","-","-"
"819","builder","static Builder builder()","0","-","-","-","-"
"820","setNumberClass","abstract Builder setNumberClass(Class<? extends Number> x);","0","-","-","-","-"
"821","build","abstract ClassPropertyWithBuilder build();","0","-","-","-","-"
"822","testClassPropertyWithBuilder","@Test
  public void testClassPropertyWithBuilder()","0","-","-","-","-"
"823","integer","public abstract int integer();","0","-","-","-","-"
"824","string","public abstract String string();","0","-","-","-","-"
"825","bigInteger","public abstract BigInteger bigInteger();","0","-","-","-","-"
"826","create","public static Serialize create(int integer, String string, BigInteger bigInteger)","0","-","-","-","-"
"827","testSerialize","@Test
  public void testSerialize() throws Exception","0","-","-","-","-"
"828","integer","public abstract int integer();","0","-","-","-","-"
"829","string","public abstract String string();","0","-","-","-","-"
"830","create","public static SerializeWithVersionUID create(int integer, String string)","0","-","-","-","-"
"831","testSerializeWithVersionUID","@Test
  public void testSerializeWithVersionUID() throws Exception","0","-","-","-","-"
"832","longProperty","public abstract long longProperty();","0","-","-","-","-"
"833","create","public static LongProperty create(long longProperty)","0","-","-","-","-"
"834","testLongHashCode","@Test
  public void testLongHashCode()","0","-","-","-","-"
"835","intProperty","public abstract int intProperty();","0","-","-","-","-"
"836","create","public static IntProperty create(int intProperty)","0","-","-","-","-"
"837","testIntHashCode","@Test
  public void testIntHashCode()","0","-","-","-","-"
"838","shortProperty","public abstract short shortProperty();","0","-","-","-","-"
"839","create","public static ShortProperty create(short shortProperty)","0","-","-","-","-"
"840","testShortHashCode","@Test
  public void testShortHashCode()","0","-","-","-","-"
"841","byteProperty","public abstract byte byteProperty();","0","-","-","-","-"
"842","create","public static ByteProperty create(byte byteProperty)","0","-","-","-","-"
"843","testByteHashCode","@Test
  public void testByteHashCode()","0","-","-","-","-"
"844","charProperty","public abstract char charProperty();","0","-","-","-","-"
"845","create","public static CharProperty create(char charProperty)","0","-","-","-","-"
"846","testCharHashCode","@Test
  public void testCharHashCode()","0","-","-","-","-"
"847","booleanProperty","public abstract boolean booleanProperty();","0","-","-","-","-"
"848","create","public static BooleanProperty create(boolean booleanProperty)","0","-","-","-","-"
"849","testBooleanHashCode","@Test
  public void testBooleanHashCode()","0","-","-","-","-"
"850","floatProperty","public abstract float floatProperty();","0","-","-","-","-"
"851","create","public static FloatProperty create(float floatProperty)","0","-","-","-","-"
"852","testFloatHashCode","@Test
  public void testFloatHashCode()","0","-","-","-","-"
"853","doubleProperty","public abstract double doubleProperty();","0","-","-","-","-"
"854","create","public static DoubleProperty create(double doubleProperty)","0","-","-","-","-"
"855","testDoubleHashCode","@Test
  public void testDoubleHashCode()","0","-","-","-","-"
"856","testFloatingEquality","@Test
  public void testFloatingEquality()","0","-","-","-","-"
"857","singlePropertyHash","private static int singlePropertyHash(Object property)","0","-","-","-","-"
"858","superObject","public abstract Object superObject();","0","-","-","-","-"
"859","superBoolean","public abstract boolean superBoolean();","0","-","-","-","-"
"860","subInt","public abstract int subInt();","0","-","-","-","-"
"861","create","public static Sub create(Object superObject, boolean superBoolean, int subInt)","0","-","-","-","-"
"862","testSuperclass","@Test
  public void testSuperclass() throws Exception","0","-","-","-","-"
"863","superObject","abstract Object superObject();","0","-","-","-","-"
"864","subString","abstract String subString();","0","-","-","-","-"
"865","subInt","abstract int subInt();","0","-","-","-","-"
"866","create","static NonPublicSub create(Object superObject, String subString, int subInt)","0","-","-","-","-"
"867","testNonPublicInheritedGetters","@Test
  public void testNonPublicInheritedGetters() throws Exception","0","-","-","-","-"
"868","assertEqualsNullIsFalse","@SuppressWarnings(""ObjectEqualsNull"")
  private void assertEqualsNullIsFalse(Object instance)","0","-","-","-","-"
"869","nullableString","@Nullable
    abstract String nullableString();","0","-","-","-","-"
"870","randomInt","abstract int randomInt();","0","-","-","-","-"
"871","create","static NullableProperties create(@Nullable String nullableString, int randomInt)","0","-","-","-","-"
"872","testNullablePropertiesCanBeNull","@Test
  public void testNullablePropertiesCanBeNull()","0","-","-","-","-"
"873","nullable","@AutoAnnotation
  static Nullable nullable()","0","-","-","-","-"
"874","testNullablePropertyConstructorParameterIsNullable","@Test
  public void testNullablePropertyConstructorParameterIsNullable() throws NoSuchMethodException","0","-","-","-","-"
"875","nullableString","@AlternativeNullableProperties.Nullable
    abstract String nullableString();","0","-","-","-","-"
"876","randomInt","abstract int randomInt();","0","-","-","-","-"
"877","create","static AlternativeNullableProperties create(@Nullable String nullableString, int randomInt)","0","-","-","-","-"
"878","testNullableCanBeFromElsewhere","@Test
  public void testNullableCanBeFromElsewhere() throws Exception","0","-","-","-","-"
"879","nonNullableString","abstract String nonNullableString();","0","-","-","-","-"
"880","randomInt","abstract int randomInt();","0","-","-","-","-"
"881","create","static NonNullableProperties create(String nonNullableString, int randomInt)","0","-","-","-","-"
"882","testNonNullablePropertiesCannotBeNull","@Test
  public void testNonNullablePropertiesCannotBeNull() throws Exception","0","-","-","-","-"
"883","nullableStringList","@Nullable
    abstract ImmutableList<String> nullableStringList();","0","-","-","-","-"
"884","create","static NullableListProperties create(@Nullable ImmutableList<String> nullableStringList)","0","-","-","-","-"
"885","testNullableListPropertiesCanBeNonNull","@Test
  public void testNullableListPropertiesCanBeNonNull()","0","-","-","-","-"
"886","testNullableListPropertiesCanBeNull","@Test
  public void testNullableListPropertiesCanBeNull()","0","-","-","-","-"
"887","nullableStringList","@Nullable
    abstract ImmutableList<String> nullableStringList();","0","-","-","-","-"
"888","builder","static Builder builder()","0","-","-","-","-"
"889","nullableStringList","Builder nullableStringList(List<String> nullableStringList);","0","-","-","-","-"
"890","build","NullableListPropertiesWithBuilder build();","0","-","-","-","-"
"891","testNullableListPropertiesWithBuilderCanBeNonNull","@Test
  public void testNullableListPropertiesWithBuilderCanBeNonNull()","0","-","-","-","-"
"892","testNullableListPropertiesWithBuilderCanBeUnset","@Test
  public void testNullableListPropertiesWithBuilderCanBeUnset()","0","-","-","-","-"
"893","testNullableListPropertiesWithBuilderCanBeNull","@Test
  public void testNullableListPropertiesWithBuilderCanBeNull()","0","-","-","-","-"
"894","nullableString","@Nullable
      abstract String nullableString();","0","-","-","-","-"
"895","randomInt","abstract int randomInt();","0","-","-","-","-"
"896","create","static Doubly create(String nullableString, int randomInt)","0","-","-","-","-"
"897","testDoublyNestedClass","@Test
  public void testDoublyNestedClass() throws Exception","0","-","-","-","-"
"898","string","abstract String string();","0","-","-","-","-"
"899","map","abstract Map<String, Integer> map();","0","-","-","-","-"
"900","create","static Doubly create(String string, Map<String, Integer> map)","0","-","-","-","-"
"901","testClassNestedInInterface","@Test
  public void testClassNestedInInterface() throws Exception","0","-","-","-","-"
"902","nullableString","@Nullable
    abstract String nullableString();","0","-","-","-","-"
"903","otherNullableString","@Nullable
    abstract String otherNullableString();","0","-","-","-","-"
"904","nonNullableString","abstract String nonNullableString();","0","-","-","-","-"
"905","create","static NullableNonNullable create(
        String nullableString, String otherNullableString, String nonNullableString)","0","-","-","-","-"
"906","testEqualsWithNullable","@Test
  public void testEqualsWithNullable() throws Exception","0","-","-","-","-"
"907","simpleMap","abstract Map<String, Integer> simpleMap();","0","-","-","-","-"
"908","hairyMap","abstract Map<String, Map<String, Integer>> hairyMap();","0","-","-","-","-"
"909","create","static GenericProperties create(
        Map<String, Integer> simpleMap, Map<String, Map<String, Integer>> hairyMap)","0","-","-","-","-"
"910","testGenericProperties","@Test
  public void testGenericProperties() throws Exception","0","-","-","-","-"
"911","key","abstract K key();","0","-","-","-","-"
"912","map","abstract Map<K, V> map();","0","-","-","-","-"
"913","create","static <K, V> GenericClass<K, V> create(K key, Map<K, V> map)","0","-","-","-","-"
"914","testGenericClass","@Test
  public void testGenericClass() throws Exception","0","-","-","-","-"
"915","key","abstract K key();","0","-","-","-","-"
"916","map","abstract Map<K, V> map();","0","-","-","-","-"
"917","create","static <K extends Number, V extends K> GenericClassSimpleBounds<K, V> create(
        K key, Map<K, V> map)","0","-","-","-","-"
"918","testGenericClassWithSimpleBounds","@Test
  public void testGenericClassWithSimpleBounds() throws Exception","0","-","-","-","-"
"919","key","abstract K key();","0","-","-","-","-"
"920","map","abstract Map<K, V> map();","0","-","-","-","-"
"921","create","static <K extends List<V> & Comparable<K>, V> GenericClassHairyBounds<K, V> create(
        K key, Map<K, V> map)","0","-","-","-","-"
"922","testGenericClassWithHairyBounds","@Test
  public void testGenericClassWithHairyBounds() throws Exception","0","-","-","-","-"
"923","compareTo","@Override
      public int compareTo(ComparableList<E> list)","0","-","-","-","-"
"924","merge","M merge(M other);","0","-","-","-","-"
"925","meta","abstract M meta();","0","-","-","-","-"
"926","create","static <M extends Mergeable<M>> Delta<M> create(M meta)","0","-","-","-","-"
"927","testRecursiveGeneric","@Test
  public void testRecursiveGeneric()","0","-","-","-","-"
"928","merge","@Override
      public MergeableImpl merge(MergeableImpl other)","0","-","-","-","-"
"929","getType","abstract NodeType<O> getType();","0","-","-","-","-"
"930","create","static NotNodeExpression create()","0","-","-","-","-"
"931","getType","NodeType<O> getType();","0","-","-","-","-"
"932","create","static NotNodeExpression2 create()","0","-","-","-","-"
"933","testConcreteWithGenericParent","@Test
  public void testConcreteWithGenericParent()","0","-","-","-","-"
"934","string","abstract String string();","0","-","-","-","-"
"935","create","static ExplicitToString create(String string)","0","-","-","-","-"
"936","toString","@Override
    public String toString()","0","-","-","-","-"
"937","testExplicitToString","@Test
  public void testExplicitToString() throws Exception","0","-","-","-","-"
"938","string","abstract String string();","0","-","-","-","-"
"939","toString","@Override
    public String toString()","0","-","-","-","-"
"940","create","static InheritedExplicitToString create(String string)","0","-","-","-","-"
"941","testInheritedExplicitToString","@Test
  public void testInheritedExplicitToString() throws Exception","0","-","-","-","-"
"942","string","abstract String string();","0","-","-","-","-"
"943","create","static AbstractToString create(String string)","0","-","-","-","-"
"944","toString","@Override
    public abstract String toString();","0","-","-","-","-"
"945","testAbstractToString","@Test
  public void testAbstractToString() throws Exception","0","-","-","-","-"
"946","string","abstract String string();","0","-","-","-","-"
"947","toString","@Override
    public abstract String toString();","0","-","-","-","-"
"948","create","static SubAbstractToString create(String string)","0","-","-","-","-"
"949","testInheritedAbstractToString","@Test
  public void testInheritedAbstractToString() throws Exception","0","-","-","-","-"
"950","string","abstract String string();","0","-","-","-","-"
"951","create","static ExplicitHashCode create(String string)","0","-","-","-","-"
"952","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"953","testExplicitHashCode","@Test
  public void testExplicitHashCode() throws Exception","0","-","-","-","-"
"954","create","static ExplicitEquals create()","0","-","-","-","-"
"955","equals","@Override
    public boolean equals(Object o)","0","-","-","-","-"
"956","testExplicitEquals","@SuppressWarnings(""SelfEquals"")
  @Test
  public void testExplicitEquals() throws Exception","0","-","-","-","-"
"957","myAnnotation","@AutoAnnotation
  private static MyAnnotation myAnnotation(String value)","0","-","-","-","-"
"958","booleans","@SuppressWarnings(""mutable"")
    abstract boolean[] booleans();","0","-","-","-","-"
"959","ints","@SuppressWarnings(""mutable"")
    @Nullable
    abstract int[] ints();","0","-","-","-","-"
"960","create","static PrimitiveArrays create(boolean[] booleans, int[] ints)","0","-","-","-","-"
"961","testPrimitiveArrays","@Test
  public void testPrimitiveArrays()","0","-","-","-","-"
"962","testNullablePrimitiveArrays","@Test
  public void testNullablePrimitiveArrays()","0","-","-","-","-"
"963","testNotNullablePrimitiveArrays","@Test
  public void testNotNullablePrimitiveArrays()","0","-","-","-","-"
"964","arrays","abstract Arrays arrays();","0","-","-","-","-"
"965","ints","@SuppressWarnings(""mutable"")
    abstract int[] ints();","0","-","-","-","-"
"966","create","static AmbiguousArrays create(Arrays arrays, int[] ints)","0","-","-","-","-"
"967","testAmbiguousArrays","@Test
  public void testAmbiguousArrays()","0","-","-","-","-"
"968","equals","@Override
    public boolean equals(Object obj)","0","-","-","-","-"
"969","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"970","hashCodeObserver","abstract HashCodeObserver hashCodeObserver();","0","-","-","-","-"
"971","randomInt","abstract int randomInt();","0","-","-","-","-"
"972","create","static MaybeCachedHashCode create(HashCodeObserver hashCodeObserver, int randomInt)","0","-","-","-","-"
"973","testHashCodeNotCached","@Test
  public void testHashCodeNotCached()","0","-","-","-","-"
"974","major","abstract int major();","0","-","-","-","-"
"975","minor","abstract int minor();","0","-","-","-","-"
"976","create","static Version create(int major, int minor)","0","-","-","-","-"
"977","compareTo","@Override
    public int compareTo(Version that)","0","-","-","-","-"
"978","testComparisonChain","@Test
  public void testComparisonChain()","0","-","-","-","-"
"979","visit","T visit(LukesSub s);","0","-","-","-","-"
"980","accept","abstract <T> T accept(LukesVisitor<T> visitor);","0","-","-","-","-"
"981","create","static LukesSub create()","0","-","-","-","-"
"982","accept","@Override
      <T> T accept(LukesVisitor<T> visitor)","0","-","-","-","-"
"983","testVisitor","@Test
  public void testVisitor()","0","-","-","-","-"
"984","visit","@Override
          public String visit(LukesBase.LukesSub s)","0","-","-","-","-"
"985","create","public static ComplexInheritance create(String name)","0","-","-","-","-"
"986","name","abstract String name();","0","-","-","-","-"
"987","answer","@Override
    public int answer()","0","-","-","-","-"
"988","answer","int answer();","0","-","-","-","-"
"989","testComplexInheritance","@Test
  public void testComplexInheritance()","0","-","-","-","-"
"990","get","@Override
    public String get(int index)","0","-","-","-","-"
"991","size","@Override
    public int size()","0","-","-","-","-"
"992","create","public static MoreComplexInheritance create()","0","-","-","-","-"
"993","testMoreComplexInheritance","@Test
  public void testMoreComplexInheritance()","0","-","-","-","-"
"994","foo","public abstract String foo();","0","-","-","-","-"
"995","foo","@Override
    public String foo()","0","-","-","-","-"
"996","create","static EffectiveVisibility create()","0","-","-","-","-"
"997","testEffectiveVisibility","@Test
  public void testEffectiveVisibility()","0","-","-","-","-"
"998","create","public static InheritTwice create(int answer)","0","-","-","-","-"
"999","testInheritTwice","@Test
  public void testInheritTwice()","0","-","-","-","-"
"1000","getOptional","public abstract com.google.common.base.Optional<Object> getOptional();","0","-","-","-","-"
"1001","create","public static Optional create(com.google.common.base.Optional<Object> opt)","0","-","-","-","-"
"1002","testAmbiguityFromAutoValueType","@Test
  public void testAmbiguityFromAutoValueType()","0","-","-","-","-"
"1003","getOptional","public abstract com.google.common.base.Optional<Object> getOptional();","0","-","-","-","-"
"1004","create","public static InheritsNestedType create(com.google.common.base.Optional<Object> opt)","0","-","-","-","-"
"1005","testAmbiguityFromInheritedType","@Test
  public void testAmbiguityFromInheritedType()","0","-","-","-","-"
"1006","foo","abstract int foo();","0","-","-","-","-"
"1007","aFloat","public abstract float aFloat();","0","-","-","-","-"
"1008","aDouble","public abstract double aDouble();","0","-","-","-","-"
"1009","of","public static RedeclareFloatAndDouble of(float aFloat, double aDouble)","0","-","-","-","-"
"1010","testRedeclareFloatAndDouble","@SuppressWarnings(""TruthSelfEquals"")
  @Test
  public void testRedeclareFloatAndDouble()","0","-","-","-","-"
"1011","foo","@Override
    abstract int foo();","0","-","-","-","-"
"1012","create","static AbstractChild create(int foo)","0","-","-","-","-"
"1013","testOverrideNotDuplicated","@Test
  public void testOverrideNotDuplicated()","0","-","-","-","-"
"1014","foo","public abstract int foo();","0","-","-","-","-"
"1015","builder","public static Builder builder()","0","-","-","-","-"
"1016","foo","Builder foo(int foo);","0","-","-","-","-"
"1017","build","BasicWithBuilder build();","0","-","-","-","-"
"1018","testBasicWithBuilder","@Test
  public void testBasicWithBuilder()","0","-","-","-","-"
"1019","testBasicWithBuilderHasOnlyOneConstructor","@Test
  public void testBasicWithBuilderHasOnlyOneConstructor() throws Exception","0","-","-","-","-"
"1020","builder","public static Builder builder()","0","-","-","-","-"
"1021","build","EmptyWithBuilder build();","0","-","-","-","-"
"1022","testEmptyWithBuilder","@Test
  public void testEmptyWithBuilder()","0","-","-","-","-"
"1023","string","public abstract String string();","0","-","-","-","-"
"1024","integer","public abstract int integer();","0","-","-","-","-"
"1025","builder","public static Builder builder()","0","-","-","-","-"
"1026","builder","public static Builder builder(String string)","0","-","-","-","-"
"1027","string","public abstract Builder string(String x);","0","-","-","-","-"
"1028","integer","public abstract Builder integer(int x);","0","-","-","-","-"
"1029","build","public abstract TwoPropertiesWithBuilderClass build();","0","-","-","-","-"
"1030","testTwoPropertiesWithBuilderClass","@Test
  public void testTwoPropertiesWithBuilderClass()","0","-","-","-","-"
"1031","notNullable","public abstract String notNullable();","0","-","-","-","-"
"1032","nullable","@Nullable
    public abstract String nullable();","0","-","-","-","-"
"1033","builder","public static Builder builder()","0","-","-","-","-"
"1034","notNullable","Builder notNullable(String s);","0","-","-","-","-"
"1035","nullable","Builder nullable(@Nullable String s);","0","-","-","-","-"
"1036","build","NullablePropertyWithBuilder build();","0","-","-","-","-"
"1037","testOmitNullableWithBuilder","@Test
  public void testOmitNullableWithBuilder()","0","-","-","-","-"
"1038","anInt","public abstract int anInt();","0","-","-","-","-"
"1039","aNullableInteger","@Nullable
    public abstract Integer aNullableInteger();","0","-","-","-","-"
"1040","aNonNullableInteger","@SuppressWarnings(""AutoValueBoxedValues"")
    public abstract Integer aNonNullableInteger();","0","-","-","-","-"
"1041","toBuilder","public abstract Builder toBuilder();","0","-","-","-","-"
"1042","builder","public static Builder builder()","0","-","-","-","-"
"1043","setAnInt","Builder setAnInt(int x);","0","-","-","-","-"
"1044","setANullableInteger","Builder setANullableInteger(int x);","0","-","-","-","-"
"1045","setANonNullableInteger","Builder setANonNullableInteger(int x);","0","-","-","-","-"
"1046","build","PrimitiveAndBoxed build();","0","-","-","-","-"
"1047","testPrimitiveAndBoxed","@Test
  public void testPrimitiveAndBoxed()","0","-","-","-","-"
"1048","optionalString","public abstract com.google.common.base.Optional<String> optionalString();","0","-","-","-","-"
"1049","optionalInteger","public abstract com.google.common.base.Optional<Integer> optionalInteger();","0","-","-","-","-"
"1050","builder","public static Builder builder()","0","-","-","-","-"
"1051","setOptionalString","Builder setOptionalString(com.google.common.base.Optional<String> s);","0","-","-","-","-"
"1052","setOptionalString","Builder setOptionalString(String s);","0","-","-","-","-"
"1053","setOptionalInteger","Builder setOptionalInteger(com.google.common.base.Optional<Integer> i);","0","-","-","-","-"
"1054","setOptionalInteger","Builder setOptionalInteger(int i);","0","-","-","-","-"
"1055","build","OptionalPropertiesWithBuilder build();","0","-","-","-","-"
"1056","testOmitOptionalWithBuilder","@Test
  public void testOmitOptionalWithBuilder()","0","-","-","-","-"
"1057","notOptional","public abstract String notOptional();","0","-","-","-","-"
"1058","optional","public abstract com.google.common.base.Optional<String> optional();","0","-","-","-","-"
"1059","builder","public static Builder builder()","0","-","-","-","-"
"1060","notOptional","Builder notOptional(String s);","0","-","-","-","-"
"1061","optional","Builder optional(@Nullable String s);","0","-","-","-","-"
"1062","build","OptionalPropertyWithNullableBuilder build();","0","-","-","-","-"
"1063","testOmitOptionalWithNullableBuilder","@Test
  public void testOmitOptionalWithNullableBuilder()","0","-","-","-","-"
"1064","optionalString","@Nullable
    public abstract com.google.common.base.Optional<String> optionalString();","0","-","-","-","-"
"1065","builder","public static Builder builder()","0","-","-","-","-"
"1066","setOptionalString","Builder setOptionalString(com.google.common.base.Optional<String> s);","0","-","-","-","-"
"1067","build","NullableOptionalPropertiesWithBuilder build();","0","-","-","-","-"
"1068","testOmitNullableOptionalWithBuilder","@Test
  public void testOmitNullableOptionalWithBuilder()","0","-","-","-","-"
"1069","optionalString","public abstract com.google.common.base.Optional<String> optionalString();","0","-","-","-","-"
"1070","builder","public static Builder builder()","0","-","-","-","-"
"1071","setOptionalString","Builder setOptionalString(String s);","0","-","-","-","-"
"1072","build","OptionalPropertiesWithBuilderSimpleSetter build();","0","-","-","-","-"
"1073","testOptionalPropertySimpleSetter","@Test
  public void testOptionalPropertySimpleSetter()","0","-","-","-","-"
"1074","getString","public abstract String getString();","0","-","-","-","-"
"1075","getInt","public abstract int getInt();","0","-","-","-","-"
"1076","builder","public static Builder builder()","0","-","-","-","-"
"1077","setString","Builder setString(String s);","0","-","-","-","-"
"1078","getString","com.google.common.base.Optional<String> getString();","0","-","-","-","-"
"1079","setInt","Builder setInt(int x);","0","-","-","-","-"
"1080","getInt","com.google.common.base.Optional<Integer> getInt();","0","-","-","-","-"
"1081","build","PropertyWithOptionalGetter build();","0","-","-","-","-"
"1082","testOptionalGetter","@Test
  public void testOptionalGetter()","0","-","-","-","-"
"1083","missing","public abstract String missing();","0","-","-","-","-"
"1084","builder","public static Builder builder()","0","-","-","-","-"
"1085","setMissing","public abstract Builder setMissing(String x);","0","-","-","-","-"
"1086","build","public abstract PropertyNamedMissing build();","0","-","-","-","-"
"1087","testPropertyNamedMissing","@Test
  public void testPropertyNamedMissing()","0","-","-","-","-"
"1088","list","public abstract List<T> list();","0","-","-","-","-"
"1089","u","public abstract U u();","0","-","-","-","-"
"1090","builder","public static <T extends Number & Comparable<T>, U extends T> Builder<T, U> builder()","0","-","-","-","-"
"1091","toBuilderGenerated","public abstract Builder<T, U> toBuilderGenerated();","0","-","-","-","-"
"1092","list","Builder<T, U> list(List<T> list);","0","-","-","-","-"
"1093","u","Builder<T, U> u(U u);","0","-","-","-","-"
"1094","build","GenericsWithBuilder<T, U> build();","0","-","-","-","-"
"1095","testBuilderGenerics","@Test
  public void testBuilderGenerics()","0","-","-","-","-"
"1096","toBuilder","BuilderT toBuilder();","0","-","-","-","-"
"1097","t","public abstract T t();","0","-","-","-","-"
"1098","u","public abstract U u();","0","-","-","-","-"
"1099","builder","public static <T, U> Builder<T, U> builder()","0","-","-","-","-"
"1100","setT","public abstract Builder<T, U> setT(T t);","0","-","-","-","-"
"1101","setU","public abstract Builder<T, U> setU(U u);","0","-","-","-","-"
"1102","build","public abstract InheritedToBuilder<T, U> build();","0","-","-","-","-"
"1103","testInheritedToBuilder","@Test
  public void testInheritedToBuilder()","0","-","-","-","-"
"1104","list","public abstract List<T> list();","0","-","-","-","-"
"1105","t","public abstract T t();","0","-","-","-","-"
"1106","builder","public static <T extends Comparable<T>> Builder<T> builder()","0","-","-","-","-"
"1107","setList","Builder<T> setList(List<T> list);","0","-","-","-","-"
"1108","setT","Builder<T> setT(T t);","0","-","-","-","-"
"1109","build","BuilderWithSet<T> build();","0","-","-","-","-"
"1110","testBuilderWithSet","@Test
  public void testBuilderWithSet()","0","-","-","-","-"
"1111","getAList","public abstract List<Integer> getAList();","0","-","-","-","-"
"1112","getAnInt","public abstract int getAnInt();","0","-","-","-","-"
"1113","builder","public static Builder builder()","0","-","-","-","-"
"1114","toBuilder","public abstract Builder toBuilder();","0","-","-","-","-"
"1115","setAList","Builder setAList(List<Integer> list);","0","-","-","-","-"
"1116","setAnInt","Builder setAnInt(int i);","0","-","-","-","-"
"1117","build","BuilderWithSetAndGet build();","0","-","-","-","-"
"1118","testBuilderWithSetAndGet","@Test
  public void testBuilderWithSetAndGet()","0","-","-","-","-"
"1119","list","public abstract ImmutableList<T> list();","0","-","-","-","-"
"1120","t","@Nullable
    public abstract T t();","0","-","-","-","-"
"1121","ints","@SuppressWarnings(""mutable"")
    public abstract int[] ints();","0","-","-","-","-"
"1122","noGetter","public abstract int noGetter();","0","-","-","-","-"
"1123","oAuth","public abstract String oAuth();","0","-","-","-","-"
"1124","oBrien","public abstract String oBrien();","0","-","-","-","-"
"1125","builder","public static <T extends Comparable<T>> Builder<T> builder()","0","-","-","-","-"
"1126","setList","Builder<T> setList(ImmutableList<T> list);","0","-","-","-","-"
"1127","setT","Builder<T> setT(T t);","0","-","-","-","-"
"1128","setInts","Builder<T> setInts(int[] ints);","0","-","-","-","-"
"1129","setNoGetter","Builder<T> setNoGetter(int x);","0","-","-","-","-"
"1130","setoAuth","Builder<T> setoAuth(String x);","0","-","-","-","-"
"1131","setOBrien","Builder<T> setOBrien(String x);","0","-","-","-","-"
"1132","list","ImmutableList<T> list();","0","-","-","-","-"
"1133","t","T t();","0","-","-","-","-"
"1134","ints","int[] ints();","0","-","-","-","-"
"1135","oAuth","String oAuth();","0","-","-","-","-"
"1136","oBrien","String oBrien();","0","-","-","-","-"
"1137","build","BuilderWithUnprefixedGetters<T> build();","0","-","-","-","-"
"1138","testBuilderWithUnprefixedGetter","@Test
  public void testBuilderWithUnprefixedGetter()","0","-","-","-","-"
"1139","getList","public abstract ImmutableList<T> getList();","0","-","-","-","-"
"1140","getT","public abstract T getT();","0","-","-","-","-"
"1141","getInts","@SuppressWarnings(""mutable"")
    @Nullable
    public abstract int[] getInts();","0","-","-","-","-"
"1142","getOAuths","public abstract ImmutableList<String> getOAuths();","0","-","-","-","-"
"1143","getNoGetter","public abstract int getNoGetter();","0","-","-","-","-"
"1144","builder","public static <T extends Comparable<T>> Builder<T> builder()","0","-","-","-","-"
"1145","setList","public abstract Builder<T> setList(ImmutableList<T> list);","0","-","-","-","-"
"1146","setT","public abstract Builder<T> setT(T t);","0","-","-","-","-"
"1147","setInts","public abstract Builder<T> setInts(int[] ints);","0","-","-","-","-"
"1148","setNoGetter","public abstract Builder<T> setNoGetter(int x);","0","-","-","-","-"
"1149","setOAuths","public abstract Builder<T> setOAuths(List<String> x);","0","-","-","-","-"
"1150","oAuthsBuilder","public abstract ImmutableList.Builder<String> oAuthsBuilder();","0","-","-","-","-"
"1151","getList","abstract ImmutableList<T> getList();","0","-","-","-","-"
"1152","getT","abstract T getT();","0","-","-","-","-"
"1153","getInts","abstract int[] getInts();","0","-","-","-","-"
"1154","build","public abstract BuilderWithPrefixedGetters<T> build();","0","-","-","-","-"
"1155","testBuilderWithPrefixedGetter","@Test
  public void testBuilderWithPrefixedGetter()","0","-","-","-","-"
"1156","getOAuth","public abstract String getOAuth();","0","-","-","-","-"
"1157","getOBrien","public abstract String getOBrien();","0","-","-","-","-"
"1158","builder","public static Builder builder()","0","-","-","-","-"
"1159","oAuth","public abstract Builder oAuth(String x);","0","-","-","-","-"
"1160","OBrien","public abstract Builder OBrien(String x);","0","-","-","-","-"
"1161","build","public abstract BuilderWithPrefixedGettersAndUnprefixedSetters build();","0","-","-","-","-"
"1162","testBuilderWithPrefixedGetterAndUnprefixedSetter","@Test
  public void testBuilderWithPrefixedGetterAndUnprefixedSetter()","0","-","-","-","-"
"1163","getFoos","public abstract ImmutableList<FooT> getFoos();","0","-","-","-","-"
"1164","getStrings","public abstract ImmutableSet<String> getStrings();","0","-","-","-","-"
"1165","toBuilder","public abstract BuilderWithPropertyBuilders.Builder<FooT> toBuilder();","0","-","-","-","-"
"1166","builder","public static <FooT extends Comparable<FooT>> Builder<FooT> builder()","0","-","-","-","-"
"1167","getFoos","public abstract ImmutableList<FooT> getFoos();","0","-","-","-","-"
"1168","addFoos","public Builder<FooT> addFoos(Iterable<FooT> foos)","0","-","-","-","-"
"1169","foosBuilder","abstract ImmutableList.Builder<FooT> foosBuilder();","0","-","-","-","-"
"1170","addToTs","public Builder<FooT> addToTs(FooT element)","0","-","-","-","-"
"1171","setStrings","abstract Builder<FooT> setStrings(ImmutableList<String> strings);","0","-","-","-","-"
"1172","stringsBuilder","abstract ImmutableSet.Builder<String> stringsBuilder();","0","-","-","-","-"
"1173","addToStrings","public Builder<FooT> addToStrings(String element)","0","-","-","-","-"
"1174","build","public abstract BuilderWithPropertyBuilders<FooT> build();","0","-","-","-","-"
"1175","testBuilderWithPropertyBuilders","@Test
  public void testBuilderWithPropertyBuilders()","0","-","-","-","-"
"1176","list","ImmutableList<T> list();","0","-","-","-","-"
"1177","builder","static Builder builder()","0","-","-","-","-"
"1178","listBuilder","abstract ImmutableList.Builder<String> listBuilder();","0","-","-","-","-"
"1179","build","abstract PropertyBuilderInheritsType build();","0","-","-","-","-"
"1180","propertyBuilderInheritsType","@Test
  public void propertyBuilderInheritsType()","0","-","-","-","-"
"1181","map","public abstract ImmutableMap<String, V> map();","0","-","-","-","-"
"1182","table","public abstract ImmutableTable<String, K, V> table();","0","-","-","-","-"
"1183","builder","public static <K extends Number, V extends Comparable<K>> Builder<K, V> builder()","0","-","-","-","-"
"1184","putAll","public Builder<K, V> putAll(Map<String, V> map)","0","-","-","-","-"
"1185","mapBuilder","public abstract ImmutableMap.Builder<String, V> mapBuilder();","0","-","-","-","-"
"1186","putAll","public Builder<K, V> putAll(ImmutableTable<String, K, V> table)","0","-","-","-","-"
"1187","tableBuilder","public abstract ImmutableTable.Builder<String, K, V> tableBuilder();","0","-","-","-","-"
"1188","build","public abstract BuilderWithExoticPropertyBuilders<K, V> build();","0","-","-","-","-"
"1189","testBuilderWithExoticPropertyBuilders","@Test
  public void testBuilderWithExoticPropertyBuilders()","0","-","-","-","-"
"1190","things","public abstract ImmutableSet<? extends T> things();","0","-","-","-","-"
"1191","numbers","public abstract ImmutableList<Number> numbers();","0","-","-","-","-"
"1192","map","public abstract ImmutableMap<String, T> map();","0","-","-","-","-"
"1193","builder","public static <T extends Number> Builder<T> builder(T value)","0","-","-","-","-"
"1194","setThings","Builder<T> setThings(ImmutableSet<T> things);","0","-","-","-","-"
"1195","setThings","Builder<T> setThings(Iterable<? extends T> things);","0","-","-","-","-"
"1196","setThings","Builder<T> setThings(T... things);","0","-","-","-","-"
"1197","setNumbers","Builder<T> setNumbers(Collection<? extends Number> strings);","0","-","-","-","-"
"1198","setMap","Builder<T> setMap(Map<String, T> map);","0","-","-","-","-"
"1199","build","BuilderWithCopyingSetters<T> build();","0","-","-","-","-"
"1200","testBuilderWithCopyingSetters","@Test
  public void testBuilderWithCopyingSetters()","0","-","-","-","-"
"1201","sortedSet","public abstract ImmutableSortedSet<T> sortedSet();","0","-","-","-","-"
"1202","sortedMap","public abstract ImmutableSortedMap<T, Integer> sortedMap();","0","-","-","-","-"
"1203","builder","public static <T extends Comparable<T>> Builder<T> builder()","0","-","-","-","-"
"1204","setSortedSet","@SuppressWarnings(""unchecked"")
      Builder<T> setSortedSet(T... x);","0","-","-","-","-"
"1205","setSortedSet","Builder<T> setSortedSet(NavigableSet<T> x);","0","-","-","-","-"
"1206","sortedSetBuilder","ImmutableSortedSet.Builder<T> sortedSetBuilder();","0","-","-","-","-"
"1207","setSortedMap","Builder<T> setSortedMap(SortedMap<T, Integer> x);","0","-","-","-","-"
"1208","setSortedMap","Builder<T> setSortedMap(NavigableMap<T, Integer> x);","0","-","-","-","-"
"1209","sortedMapBuilder","ImmutableSortedMap.Builder<T, Integer> sortedMapBuilder();","0","-","-","-","-"
"1210","build","BuilderWithImmutableSorted<T> build();","0","-","-","-","-"
"1211","testBuilderWithImmutableSorted_Varargs","@Test
  public void testBuilderWithImmutableSorted_Varargs()","0","-","-","-","-"
"1212","testBuilderWithImmutableSorted_SetSet","@Test
  public void testBuilderWithImmutableSorted_SetSet()","0","-","-","-","-"
"1213","testBuilderWithImmutableSorted_SetMap","@Test
  public void testBuilderWithImmutableSorted_SetMap()","0","-","-","-","-"
"1214","testBuilderWithImmutableSorted_SetCollectionBuilder","@Test
  public void testBuilderWithImmutableSorted_SetCollectionBuilder()","0","-","-","-","-"
"1215","testBuilderWithImmutableSorted_MapCollectionBuilder","@Test
  public void testBuilderWithImmutableSorted_MapCollectionBuilder()","0","-","-","-","-"
"1216","things","public abstract ImmutableList<T> things();","0","-","-","-","-"
"1217","builder","public static <T extends Number> Builder<T> builder()","0","-","-","-","-"
"1218","setThings","Builder<T> setThings(List<T> things);","0","-","-","-","-"
"1219","things","ImmutableList<T> things();","0","-","-","-","-"
"1220","thingsBuilder","ImmutableList.Builder<T> thingsBuilder();","0","-","-","-","-"
"1221","build","BuilderWithCollectionBuilderAndSetter<T> build();","0","-","-","-","-"
"1222","testBuilderAndSetterDefaultsEmpty","@Test
  public void testBuilderAndSetterDefaultsEmpty()","0","-","-","-","-"
"1223","testBuilderAndSetterUsingBuilder","@Test
  public void testBuilderAndSetterUsingBuilder()","0","-","-","-","-"
"1224","testBuilderAndSetterUsingSetter","@Test
  public void testBuilderAndSetterUsingSetter()","0","-","-","-","-"
"1225","testBuilderAndSetterUsingSetterThenBuilder","@Test
  public void testBuilderAndSetterUsingSetterThenBuilder()","0","-","-","-","-"
"1226","testBuilderAndSetterCannotSetAfterBuilder","@Test
  public void testBuilderAndSetterCannotSetAfterBuilder()","0","-","-","-","-"
"1227","foo","abstract String foo();","0","-","-","-","-"
"1228","foo","abstract B foo(String s);","0","-","-","-","-"
"1229","bar","abstract String bar();","0","-","-","-","-"
"1230","builder","static Builder builder()","0","-","-","-","-"
"1231","bar","abstract Builder bar(String s);","0","-","-","-","-"
"1232","build","abstract ChildWithBuilder build();","0","-","-","-","-"
"1233","testInheritedBuilder","@Test
  public void testInheritedBuilder()","0","-","-","-","-"
"1234","foo","abstract int foo();","0","-","-","-","-"
"1235","create","static GwtCompatibleTest create(int foo)","0","-","-","-","-"
"1236","bar","abstract String bar();","0","-","-","-","-"
"1237","create","static GwtCompatibleTestNoArgs create(String bar)","0","-","-","-","-"
"1238","testGwtCompatibleInherited","@Test
  public void testGwtCompatibleInherited()","0","-","-","-","-"
"1239","field1","@HairyAnnotation(
        aString = ""hello"",
        aClass = Integer.class,
        anEnum = RetentionPolicy.RUNTIME,
        anAnnotation =
            @NestedAnnotation(
                anInt = 73,
                aClassArray =","0","-","-","-","-"
"1240","field2","@CopiedAnnotation
    @ExcludedAnnotation
    @InheritedAnnotation
    @AutoValue.CopyAnnotations(exclude =","0","-","-","-","-"
"1241","create","static CopyAnnotation create()","0","-","-","-","-"
"1242","testCopyClassAnnotations","@Test
  public void testCopyClassAnnotations() throws Exception","0","-","-","-","-"
"1243","testCopyMethodAnnotations","@Test
  public void testCopyMethodAnnotations() throws Exception","0","-","-","-","-"
"1244","testCopyMethodAnnotationsByDefault","@Test
  public void testCopyMethodAnnotationsByDefault() throws Exception","0","-","-","-","-"
"1245","h","public abstract Object h();","0","-","-","-","-"
"1246","create","public static HProperty create(Object h)","0","-","-","-","-"
"1247","testHProperty","@Test
  public void testHProperty() throws Exception","0","-","-","-","-"
"1248","something","int something();","0","-","-","-","-"
"1249","something","int something();","0","-","-","-","-"
"1250","create","static InheritSameMethodTwice create(int something)","0","-","-","-","-"
"1251","testInheritSameMethodTwice","@Test
  public void testInheritSameMethodTwice()","0","-","-","-","-"
"1252","one","String one();","0","-","-","-","-"
"1253","two","String two();","0","-","-","-","-"
"1254","three","boolean three();","0","-","-","-","-"
"1255","four","long four();","0","-","-","-","-"
"1256","two","String two();","0","-","-","-","-"
"1257","four","long four();","0","-","-","-","-"
"1258","create","static OneTwoThreeFourImpl create(String one, String two, boolean three, long four)","0","-","-","-","-"
"1259","testOneTwoThreeFour","@Test
  public void testOneTwoThreeFour()","0","-","-","-","-"
"1260","foo","abstract String foo();","0","-","-","-","-"
"1261","inner","abstract InnerWithBuilder inner();","0","-","-","-","-"
"1262","toBuilder","abstract Builder toBuilder();","0","-","-","-","-"
"1263","builder","static Builder builder()","0","-","-","-","-"
"1264","foo","abstract Builder foo(String x);","0","-","-","-","-"
"1265","inner","abstract Builder inner(InnerWithBuilder x);","0","-","-","-","-"
"1266","innerBuilder","abstract InnerWithBuilder.Builder innerBuilder();","0","-","-","-","-"
"1267","build","abstract OuterWithBuilder build();","0","-","-","-","-"
"1268","bar","abstract int bar();","0","-","-","-","-"
"1269","toBuilder","abstract Builder toBuilder();","0","-","-","-","-"
"1270","builder","static Builder builder()","0","-","-","-","-"
"1271","setBar","abstract Builder setBar(int x);","0","-","-","-","-"
"1272","build","abstract InnerWithBuilder build();","0","-","-","-","-"
"1273","testBuilderWithinBuilder","@Test
  public void testBuilderWithinBuilder()","0","-","-","-","-"
"1274","MyMap","public MyMap()","0","-","-","-","-"
"1275","MyMap","public MyMap(Map<K, V> map)","0","-","-","-","-"
"1276","MyMapBuilder","public MyMapBuilder()","0","-","-","-","-"
"1277","MyMapBuilder","public MyMapBuilder(Map<K, V> map)","0","-","-","-","-"
"1278","build","public MyMap<K, V> build()","0","-","-","-","-"
"1279","map","abstract MyMap<K, V> map();","0","-","-","-","-"
"1280","toBuilder","abstract Builder<K, V> toBuilder();","0","-","-","-","-"
"1281","builder","static <K, V> Builder<K, V> builder()","0","-","-","-","-"
"1282","mapBuilder","abstract MyMapBuilder<K, V> mapBuilder();","0","-","-","-","-"
"1283","build","abstract BuildMyMap<K, V> build();","0","-","-","-","-"
"1284","testMyMapBuilder","@Test
  public void testMyMapBuilder()","0","-","-","-","-"
"1285","MyStringMap","public MyStringMap()","0","-","-","-","-"
"1286","MyStringMap","public MyStringMap(Map<String, V> map)","0","-","-","-","-"
"1287","toBuilder","public MyStringMapBuilder<V> toBuilder()","0","-","-","-","-"
"1288","MyStringMapBuilder","public MyStringMapBuilder()","0","-","-","-","-"
"1289","MyStringMapBuilder","public MyStringMapBuilder(Map<String, V> map)","0","-","-","-","-"
"1290","build","@Override
    public MyStringMap<V> build()","0","-","-","-","-"
"1291","map","abstract MyStringMap<V> map();","0","-","-","-","-"
"1292","toBuilder","abstract Builder<V> toBuilder();","0","-","-","-","-"
"1293","builder","static <V> Builder<V> builder()","0","-","-","-","-"
"1294","mapBuilder","abstract MyStringMapBuilder<V> mapBuilder();","0","-","-","-","-"
"1295","build","abstract BuildMyStringMap<V> build();","0","-","-","-","-"
"1296","testMyStringMapBuilder","@Test
  public void testMyStringMapBuilder()","0","-","-","-","-"
"1297","publicGetterProtectedBuilderGetterPackageProtectedSetterInt","public abstract int publicGetterProtectedBuilderGetterPackageProtectedSetterInt();","0","-","-","-","-"
"1298","protectedGetterPackageProtectedBuilderGetterPublicSetterInt","protected abstract int protectedGetterPackageProtectedBuilderGetterPublicSetterInt();","0","-","-","-","-"
"1299","packageProtectedGetterPublicBuilderGetterProtectedSetterInt","abstract int packageProtectedGetterPublicBuilderGetterProtectedSetterInt();","0","-","-","-","-"
"1300","publicGetterProtectedBuilderGetterPackageProtectedSetterInt","protected abstract int publicGetterProtectedBuilderGetterPackageProtectedSetterInt();","0","-","-","-","-"
"1301","protectedGetterPackageProtectedBuilderGetterPublicSetterInt","abstract int protectedGetterPackageProtectedBuilderGetterPublicSetterInt();","0","-","-","-","-"
"1302","packageProtectedGetterPublicBuilderGetterProtectedSetterInt","public abstract int packageProtectedGetterPublicBuilderGetterProtectedSetterInt();","0","-","-","-","-"
"1303","setPublicGetterProtectedBuilderGetterPackageProtectedSetterInt","abstract Builder setPublicGetterProtectedBuilderGetterPackageProtectedSetterInt(int x);","0","-","-","-","-"
"1304","setProtectedGetterPackageProtectedBuilderGetterPublicSetterInt","public abstract Builder setProtectedGetterPackageProtectedBuilderGetterPublicSetterInt(int x);","0","-","-","-","-"
"1305","setPackageProtectedGetterPublicBuilderGetterProtectedSetterInt","protected abstract Builder setPackageProtectedGetterPublicBuilderGetterProtectedSetterInt(
          int x);","0","-","-","-","-"
"1306","build","public abstract BuilderOfManyAccessLevels build();","0","-","-","-","-"
"1307","testBuilderOfManyAccessLevels_accessLevels","@Test
  public void testBuilderOfManyAccessLevels_accessLevels() throws NoSuchMethodException","0","-","-","-","-"
"1308","testMethodAccess","private static void testMethodAccess(
      Access expectedAccess, Class<?> clazz, String methodName, Class<?>... parameterTypes)
      throws NoSuchMethodException","0","-","-","-","-"
"1309","getVersionId","VersionId getVersionId();","0","-","-","-","-"
"1310","getVersionId","@Override
    ItemVersionId getVersionId();","0","-","-","-","-"
"1311","builder","static Builder builder()","0","-","-","-","-"
"1312","setVersionId","abstract Builder setVersionId(ItemVersionId x);","0","-","-","-","-"
"1313","build","abstract FakeItem build();","0","-","-","-","-"
"1314","testParentInterfaceOverridesGrandparent","@Test
  public void testParentInterfaceOverridesGrandparent()","0","-","-","-","-"
"1315","newBuilder","public static ReleaseInfoBuilder newBuilder()","0","-","-","-","-"
"1316","apkVersionCodes","public abstract ImmutableList<ApkVersionCode> apkVersionCodes();","0","-","-","-","-"
"1317","ReleaseInfo","ReleaseInfo()","0","-","-","-","-"
"1318","addApkVersionCode","public ReleaseInfoBuilder addApkVersionCode(ApkVersionCode code)","0","-","-","-","-"
"1319","apkVersionCodesBuilder","abstract ImmutableList.Builder<ApkVersionCode> apkVersionCodesBuilder();","0","-","-","-","-"
"1320","build","public abstract ReleaseInfo build();","0","-","-","-","-"
"1321","testUnusualBuilderName","@Test
  public void testUnusualBuilderName()","0","-","-","-","-"
"1322","names","public abstract ImmutableList<String> names();","0","-","-","-","-"
"1323","inner","public abstract DefaultableInner inner();","0","-","-","-","-"
"1324","builder","public static Builder builder()","0","-","-","-","-"
"1325","names","public abstract ImmutableList<String> names();","0","-","-","-","-"
"1326","namesBuilder","public abstract ImmutableList.Builder<String> namesBuilder();","0","-","-","-","-"
"1327","inner","public abstract DefaultableInner inner();","0","-","-","-","-"
"1328","innerBuilder","public abstract DefaultableInner.Builder innerBuilder();","0","-","-","-","-"
"1329","build","public abstract OuterWithDefaultableInner build();","0","-","-","-","-"
"1330","bar","public abstract int bar();","0","-","-","-","-"
"1331","builder","public static Builder builder()","0","-","-","-","-"
"1332","setBar","public abstract Builder setBar(int x);","0","-","-","-","-"
"1333","build","public abstract DefaultableInner build();","0","-","-","-","-"
"1334","testOuterWithDefaultableInner_Defaults","@Test
  public void testOuterWithDefaultableInner_Defaults()","0","-","-","-","-"
"1335","testOuterWithDefaultableInner_Getters","@Test
  public void testOuterWithDefaultableInner_Getters()","0","-","-","-","-"
"1336","foo","public abstract int foo();","0","-","-","-","-"
"1337","inner","public abstract NonDefaultableInner<T> inner();","0","-","-","-","-"
"1338","builder","public static <T> Builder<T> builder()","0","-","-","-","-"
"1339","setFoo","public abstract Builder<T> setFoo(int x);","0","-","-","-","-"
"1340","innerBuilder","public abstract NonDefaultableInner.Builder<T> innerBuilder();","0","-","-","-","-"
"1341","build","public abstract OuterWithNonDefaultableInner<T> build();","0","-","-","-","-"
"1342","bar","public abstract E bar();","0","-","-","-","-"
"1343","builder","public static <E> Builder<E> builder()","0","-","-","-","-"
"1344","setBar","public abstract Builder<E> setBar(E x);","0","-","-","-","-"
"1345","build","public abstract NonDefaultableInner<E> build();","0","-","-","-","-"
"1346","testOuterWithNonDefaultableInner","@Test
  public void testOuterWithNonDefaultableInner()","0","-","-","-","-"
"1347","alienObject","public abstract Object alienObject();","0","-","-","-","-"
"1348","alienString","public abstract String alienString();","0","-","-","-","-"
"1349","builder","public static Builder builder()","0","-","-","-","-"
"1350","setAlienObject","public abstract Builder setAlienObject(Object x);","0","-","-","-","-"
"1351","setAlienString","public abstract Builder setAlienString(String x);","0","-","-","-","-"
"1352","build","public abstract RedeclareJavaLangClasses build();","0","-","-","-","-"
"1353","testRedeclareJavaLangClasses","@Test
  public void testRedeclareJavaLangClasses()","0","-","-","-","-"
"1354","metrics","abstract ImmutableSet<Number> metrics();","0","-","-","-","-"
"1355","builder","static Builder builder()","0","-","-","-","-"
"1356","setMetrics","abstract Builder setMetrics(ImmutableSet<? extends Number> metrics);","0","-","-","-","-"
"1357","build","abstract GenericExtends build();","0","-","-","-","-"
"1358","testGenericExtends","@Test
  public void testGenericExtends()","0","-","-","-","-"
"1359","getList","abstract List<T> getList();","0","-","-","-","-"
"1360","builder","static Builder builder()","0","-","-","-","-"
"1361","setList","abstract Builder setList(List<String> list);","0","-","-","-","-"
"1362","build","abstract Child build();","0","-","-","-","-"
"1363","nonGenericExtendsGeneric","@Test
  public void nonGenericExtendsGeneric()","0","-","-","-","-"
"1364","foo","abstract T foo();","0","-","-","-","-"
"1365","foo","abstract B foo(T s);","0","-","-","-","-"
"1366","builder","static <T> Builder<T> builder()","0","-","-","-","-"
"1367","build","abstract ChildOfAbstractGenericParentWithBuilder<T> build();","0","-","-","-","-"
"1368","genericExtendsGeneric","@Test
  public void genericExtendsGeneric()","0","-","-","-","-"
"1369","innerWithTypeParam","abstract OuterWithTypeParam<Double>.InnerWithTypeParam<String> innerWithTypeParam();","0","-","-","-","-"
"1370","innerWithoutTypeParam","abstract OuterWithTypeParam<Double>.InnerWithoutTypeParam innerWithoutTypeParam();","0","-","-","-","-"
"1371","nested","abstract OuterWithTypeParam.Nested nested();","0","-","-","-","-"
"1372","builder","static Builder builder()","0","-","-","-","-"
"1373","setInnerWithTypeParam","abstract Builder setInnerWithTypeParam(
          OuterWithTypeParam<Double>.InnerWithTypeParam<String> x);","0","-","-","-","-"
"1374","setInnerWithoutTypeParam","abstract Builder setInnerWithoutTypeParam(OuterWithTypeParam<Double>.InnerWithoutTypeParam x);","0","-","-","-","-"
"1375","setNested","abstract Builder setNested(OuterWithTypeParam.Nested x);","0","-","-","-","-"
"1376","build","abstract Nesty build();","0","-","-","-","-"
"1377","outerWithTypeParam","@Test
  public void outerWithTypeParam() throws ReflectiveOperationException","0","-","-","-","-"
"1378","foo","abstract String foo();","0","-","-","-","-"
"1379","builder","static Builder builder()","0","-","-","-","-"
"1380","setFoo","abstract Builder setFoo(String x);","0","-","-","-","-"
"1381","build","abstract BuilderAnnotationsNotCopied build();","0","-","-","-","-"
"1382","builderAnnotationsNotCopiedByDefault","@Test
  public void builderAnnotationsNotCopiedByDefault()","0","-","-","-","-"
"1383","foo","abstract String foo();","0","-","-","-","-"
"1384","builder","static Builder builder()","0","-","-","-","-"
"1385","setFoo","abstract Builder setFoo(String x);","0","-","-","-","-"
"1386","build","abstract BuilderAnnotationsCopied build();","0","-","-","-","-"
"1387","builderAnnotationsCopiedIfRequested","@Test
  public void builderAnnotationsCopiedIfRequested()","0","-","-","-","-"
"1388","anImmutableSortedMap","abstract ImmutableSortedMap<K, V> anImmutableSortedMap();","0","-","-","-","-"
"1389","anImmutableSortedSet","abstract ImmutableSortedSet<V> anImmutableSortedSet();","0","-","-","-","-"
"1390","nonGenericImmutableSortedMap","abstract ImmutableSortedMap<Integer, V> nonGenericImmutableSortedMap();","0","-","-","-","-"
"1391","rawImmutableSortedSet","abstract ImmutableSortedSet rawImmutableSortedSet();","0","-","-","-","-"
"1392","toBuilder","abstract DataWithSortedCollectionBuilders.Builder<K, V> toBuilder();","0","-","-","-","-"
"1393","builder","static <K, V> DataWithSortedCollectionBuilders.Builder<K, V> builder()","0","-","-","-","-"
"1394","anImmutableSortedMap","abstract DataWithSortedCollectionBuilders.Builder<K, V> anImmutableSortedMap(
          SortedMap<K, V> anImmutableSortedMap);","0","-","-","-","-"
"1395","anImmutableSortedMapBuilder","abstract ImmutableSortedMap.Builder<K, V> anImmutableSortedMapBuilder(
          Comparator<K> keyComparator);","0","-","-","-","-"
"1396","anImmutableSortedSet","abstract DataWithSortedCollectionBuilders.Builder<K, V> anImmutableSortedSet(
          SortedSet<V> anImmutableSortedSet);","0","-","-","-","-"
"1397","anImmutableSortedSetBuilder","abstract ImmutableSortedSet.Builder<V> anImmutableSortedSetBuilder(Comparator<V> comparator);","0","-","-","-","-"
"1398","nonGenericImmutableSortedMapBuilder","abstract ImmutableSortedMap.Builder<Integer, V> nonGenericImmutableSortedMapBuilder(
          Comparator<Integer> keyComparator);","0","-","-","-","-"
"1399","rawImmutableSortedSetBuilder","abstract ImmutableSortedSet.Builder rawImmutableSortedSetBuilder(Comparator comparator);","0","-","-","-","-"
"1400","build","abstract DataWithSortedCollectionBuilders<K, V> build();","0","-","-","-","-"
"1401","shouldGenerateBuildersWithComparators","@Test
  @SuppressWarnings(","0","-","-","-","-"
"1402","compare","@Override
          public int compare(String left, String right)","0","-","-","-","-"
"1403","compare","@Override
          public int compare(Integer o1, Integer o2)","0","-","-","-","-"
"1404","compare","@Override
          public int compare(Object left, Object right)","0","-","-","-","-"
"1405","one","public abstract String one();","0","-","-","-","-"
"1406","two","public abstract int two();","0","-","-","-","-"
"1407","three","public abstract double three();","0","-","-","-","-"
"1408","setOne","StepTwo setOne(T x);","0","-","-","-","-"
"1409","setTwo","StepThree setTwo(int x);","0","-","-","-","-"
"1410","setThreeAndBuild","Stepped setThreeAndBuild(double x);","0","-","-","-","-"
"1411","builder","public static StepOne<String> builder()","0","-","-","-","-"
"1412","setThree","abstract Builder setThree(double x);","0","-","-","-","-"
"1413","build","abstract Stepped build();","0","-","-","-","-"
"1414","setThreeAndBuild","@Override
      public Stepped setThreeAndBuild(double x)","0","-","-","-","-"
"1415","stepBuilder","@Test
  public void stepBuilder()","0","-","-","-","-"
"1416","x1","abstract int x1();","0","-","-","-","-"
"1417","x2","abstract int x2();","0","-","-","-","-"
"1418","x3","abstract int x3();","0","-","-","-","-"
"1419","x4","abstract int x4();","0","-","-","-","-"
"1420","x5","abstract int x5();","0","-","-","-","-"
"1421","x6","abstract int x6();","0","-","-","-","-"
"1422","x7","abstract int x7();","0","-","-","-","-"
"1423","x8","abstract int x8();","0","-","-","-","-"
"1424","x9","abstract int x9();","0","-","-","-","-"
"1425","x10","abstract int x10();","0","-","-","-","-"
"1426","x11","abstract int x11();","0","-","-","-","-"
"1427","x12","abstract int x12();","0","-","-","-","-"
"1428","x13","abstract int x13();","0","-","-","-","-"
"1429","x14","abstract int x14();","0","-","-","-","-"
"1430","x15","abstract int x15();","0","-","-","-","-"
"1431","x16","abstract int x16();","0","-","-","-","-"
"1432","x17","abstract int x17();","0","-","-","-","-"
"1433","x18","abstract int x18();","0","-","-","-","-"
"1434","x19","abstract int x19();","0","-","-","-","-"
"1435","x20","abstract int x20();","0","-","-","-","-"
"1436","x21","abstract int x21();","0","-","-","-","-"
"1437","x22","abstract int x22();","0","-","-","-","-"
"1438","x23","abstract int x23();","0","-","-","-","-"
"1439","x24","abstract int x24();","0","-","-","-","-"
"1440","x25","abstract int x25();","0","-","-","-","-"
"1441","x26","abstract int x26();","0","-","-","-","-"
"1442","x27","abstract int x27();","0","-","-","-","-"
"1443","x28","abstract int x28();","0","-","-","-","-"
"1444","x29","abstract int x29();","0","-","-","-","-"
"1445","x30","abstract int x30();","0","-","-","-","-"
"1446","x31","abstract int x31();","0","-","-","-","-"
"1447","x1","abstract Builder x1(int x);","0","-","-","-","-"
"1448","x2","abstract Builder x2(int x);","0","-","-","-","-"
"1449","x3","abstract Builder x3(int x);","0","-","-","-","-"
"1450","x4","abstract Builder x4(int x);","0","-","-","-","-"
"1451","x5","abstract Builder x5(int x);","0","-","-","-","-"
"1452","x6","abstract Builder x6(int x);","0","-","-","-","-"
"1453","x7","abstract Builder x7(int x);","0","-","-","-","-"
"1454","x8","abstract Builder x8(int x);","0","-","-","-","-"
"1455","x9","abstract Builder x9(int x);","0","-","-","-","-"
"1456","x10","abstract Builder x10(int x);","0","-","-","-","-"
"1457","x11","abstract Builder x11(int x);","0","-","-","-","-"
"1458","x12","abstract Builder x12(int x);","0","-","-","-","-"
"1459","x13","abstract Builder x13(int x);","0","-","-","-","-"
"1460","x14","abstract Builder x14(int x);","0","-","-","-","-"
"1461","x15","abstract Builder x15(int x);","0","-","-","-","-"
"1462","x16","abstract Builder x16(int x);","0","-","-","-","-"
"1463","x17","abstract Builder x17(int x);","0","-","-","-","-"
"1464","x18","abstract Builder x18(int x);","0","-","-","-","-"
"1465","x19","abstract Builder x19(int x);","0","-","-","-","-"
"1466","x20","abstract Builder x20(int x);","0","-","-","-","-"
"1467","x21","abstract Builder x21(int x);","0","-","-","-","-"
"1468","x22","abstract Builder x22(int x);","0","-","-","-","-"
"1469","x23","abstract Builder x23(int x);","0","-","-","-","-"
"1470","x24","abstract Builder x24(int x);","0","-","-","-","-"
"1471","x25","abstract Builder x25(int x);","0","-","-","-","-"
"1472","x26","abstract Builder x26(int x);","0","-","-","-","-"
"1473","x27","abstract Builder x27(int x);","0","-","-","-","-"
"1474","x28","abstract Builder x28(int x);","0","-","-","-","-"
"1475","x29","abstract Builder x29(int x);","0","-","-","-","-"
"1476","x30","abstract Builder x30(int x);","0","-","-","-","-"
"1477","x31","abstract Builder x31(int x);","0","-","-","-","-"
"1478","setFirst30","Builder setFirst30()","0","-","-","-","-"
"1479","builder","static Builder builder()","0","-","-","-","-"
"1480","build","abstract Giant31 build();","0","-","-","-","-"
"1481","x32","abstract int x32();","0","-","-","-","-"
"1482","builder","static Builder builder()","0","-","-","-","-"
"1483","x32","abstract Builder x32(int x);","0","-","-","-","-"
"1484","build","abstract Giant32 build();","0","-","-","-","-"
"1485","x32","abstract int x32();","0","-","-","-","-"
"1486","x33","abstract int x33();","0","-","-","-","-"
"1487","builder","static Builder builder()","0","-","-","-","-"
"1488","x32","abstract Builder x32(int x);","0","-","-","-","-"
"1489","x33","abstract Builder x33(int x);","0","-","-","-","-"
"1490","build","abstract Giant33 build();","0","-","-","-","-"
"1491","testGiant31","@Test
  public void testGiant31()","0","-","-","-","-"
"1492","testGiant32","@Test
  public void testGiant32()","0","-","-","-","-"
"1493","testGiant33","@Test
  public void testGiant33()","0","-","-","-","-"
"1494","newEverythingWithDefaults","@AutoAnnotation
  static EverythingWithDefaults newEverythingWithDefaults()","0","-","-","-","-"
"1495","testDefaults","@Test
  public void testDefaults() throws Exception","0","-","-","-","-"
"1496","equal","private static boolean equal(Object x, Object y)","0","-","-","-","-"
"1497","string","private static String string(Object x)","0","-","-","-","-"
"1498","string","abstract String string();","0","-","-","-","-"
"1499","integer","abstract int integer();","0","-","-","-","-"
"1500","create","static NonSerializableGwtValueType create(String string, int integer)","0","-","-","-","-"
"1501","string","abstract String string();","0","-","-","-","-"
"1502","integer","abstract int integer();","0","-","-","-","-"
"1503","other","@Nullable
    abstract ValueType other();","0","-","-","-","-"
"1504","others","abstract List<ValueType> others();","0","-","-","-","-"
"1505","create","static ValueType create(String string, int integer, @Nullable ValueType other)","0","-","-","-","-"
"1506","create","static ValueType create(
        String string, int integer, @Nullable ValueType other, List<ValueType> others)","0","-","-","-","-"
"1507","testCustomFieldSerializer","@Test
  public void testCustomFieldSerializer() throws SerializationException","0","-","-","-","-"
"1508","getPackage","abstract String getPackage();","0","-","-","-","-"
"1509","isDefault","abstract boolean isDefault();","0","-","-","-","-"
"1510","create","static ValueTypeWithGetters create(String pkg, boolean dflt)","0","-","-","-","-"
"1511","testCustomFieldSerializerWithGetters","@Test
  public void testCustomFieldSerializerWithGetters() throws SerializationException","0","-","-","-","-"
"1512","map","abstract Map<K, V> map();","0","-","-","-","-"
"1513","create","static <K extends Comparable<K>, V extends K> GenericValueType<K, V> create(Map<K, V> map)","0","-","-","-","-"
"1514","testCustomFieldSerializerGeneric","@Test
  public void testCustomFieldSerializerGeneric() throws SerializationException","0","-","-","-","-"
"1515","string","abstract String string();","0","-","-","-","-"
"1516","strings","abstract ImmutableList<String> strings();","0","-","-","-","-"
"1517","builder","static Builder builder()","0","-","-","-","-"
"1518","string","Builder string(String x);","0","-","-","-","-"
"1519","strings","Builder strings(ImmutableList<String> x);","0","-","-","-","-"
"1520","build","ValueTypeWithBuilder build();","0","-","-","-","-"
"1521","testCustomFieldSerializerWithBuilder","@Test
  public void testCustomFieldSerializerWithBuilder() throws SerializationException","0","-","-","-","-"
"1522","getPackage","abstract String getPackage();","0","-","-","-","-"
"1523","isDefault","abstract boolean isDefault();","0","-","-","-","-"
"1524","builder","static Builder builder()","0","-","-","-","-"
"1525","setPackage","Builder setPackage(String x);","0","-","-","-","-"
"1526","setDefault","Builder setDefault(boolean x);","0","-","-","-","-"
"1527","build","ValueTypeWithBuilderAndGetters build();","0","-","-","-","-"
"1528","testCustomFieldSerializerWithBuilderAndGetters","@Test
  public void testCustomFieldSerializerWithBuilderAndGetters() throws SerializationException","0","-","-","-","-"
"1529","map","abstract Map<K, V> map();","0","-","-","-","-"
"1530","builder","static <K extends Comparable<K>, V extends K> Builder<K, V> builder()","0","-","-","-","-"
"1531","map","Builder<K, V> map(Map<K, V> map);","0","-","-","-","-"
"1532","build","GenericValueTypeWithBuilder<K, V> build();","0","-","-","-","-"
"1533","testCustomFieldSerializerGenericWithBuilder","@Test
  public void testCustomFieldSerializerGenericWithBuilder() throws SerializationException","0","-","-","-","-"
"1534","method","abstract String method();","0","-","-","-","-"
"1535","args","abstract ImmutableList<Object> args();","0","-","-","-","-"
"1536","of","static MethodCall of(String method, ImmutableList<Object> args)","0","-","-","-","-"
"1537","MickeyMouseMock","MickeyMouseMock(Class<T> intf)","0","-","-","-","-"
"1538","proxy","T proxy()","0","-","-","-","-"
"1539","verify","void verify(ThrowingRunnable actions)","0","-","-","-","-"
"1540","invocationHandler","private Object invocationHandler(Object proxy, Method method, Object[] args)","0","-","-","-","-"
"1541","string","abstract String string();","0","-","-","-","-"
"1542","integer","abstract int integer();","0","-","-","-","-"
"1543","other","@Nullable
  abstract GwtValueType other();","0","-","-","-","-"
"1544","others","abstract List<GwtValueType> others();","0","-","-","-","-"
"1545","create","static GwtValueType create(String string, int integer, @Nullable GwtValueType other)","0","-","-","-","-"
"1546","create","static GwtValueType create(
      String string, int integer, @Nullable GwtValueType other, List<GwtValueType> others)","0","-","-","-","-"
"1547","string","abstract String string();","0","-","-","-","-"
"1548","integer","abstract int integer();","0","-","-","-","-"
"1549","other","@Nullable
  abstract GwtValueTypeWithBuilder<T> other();","0","-","-","-","-"
"1550","others","abstract List<GwtValueTypeWithBuilder<T>> others();","0","-","-","-","-"
"1551","list","abstract ImmutableList<T> list();","0","-","-","-","-"
"1552","otherList","abstract ImmutableList<T> otherList();","0","-","-","-","-"
"1553","listWithBuilder","abstract ImmutableList<String> listWithBuilder();","0","-","-","-","-"
"1554","builder","static <T> Builder<T> builder()","0","-","-","-","-"
"1555","string","Builder<T> string(String x);","0","-","-","-","-"
"1556","integer","Builder<T> integer(int x);","0","-","-","-","-"
"1557","other","Builder<T> other(@Nullable GwtValueTypeWithBuilder<T> x);","0","-","-","-","-"
"1558","others","Builder<T> others(List<GwtValueTypeWithBuilder<T>> x);","0","-","-","-","-"
"1559","list","Builder<T> list(ImmutableList<T> x);","0","-","-","-","-"
"1560","otherList","Builder<T> otherList(List<T> x);","0","-","-","-","-"
"1561","listWithBuilderBuilder","ImmutableList.Builder<String> listWithBuilderBuilder();","0","-","-","-","-"
"1562","build","GwtValueTypeWithBuilder<T> build();","0","-","-","-","-"
"1563","applicable","@Override
  public boolean applicable(Context context)","0","-","-","-","-"
"1564","generateClass","@Override
  public String generateClass(
      Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"1565","actualTypeParametersString","private static String actualTypeParametersString(TypeElement type)","0","-","-","-","-"
"1566","formalTypeParametersString","private static String formalTypeParametersString(TypeElement type)","0","-","-","-","-"
"1567","appendTypeParameterWithBounds","private static void appendTypeParameterWithBounds(
      TypeParameterElement typeParameter, StringBuilder sb)","0","-","-","-","-"
"1568","foo","abstract int foo();","0","-","-","-","-"
"1569","create","static One create(int foo)","0","-","-","-","-"
"1570","foo","abstract int foo();","0","-","-","-","-"
"1571","create","static Two create(int foo)","0","-","-","-","-"
"1572","testSerialSignatures","@Test
  public void testSerialSignatures()","0","-","-","-","-"
"1573","dummySignatureFieldName","private static String dummySignatureFieldName(Class<?> c)","0","-","-","-","-"
"1574","testBasic","/**
   * Test where the serialized properties don't include generics, so no","0","-","-","-","-"
"1575","testSuppressWarnings","/**
   * Test where the serialized properties don't include generics, so a","0","-","-","-","-"
"1576","testBuildersAndGenerics","/**
   * Test builders and classes that are generic (as opposed to just containing properties with
   * generics).
   */
  @Test
  public void testBuildersAndGenerics()","0","-","-","-","-"
"1577","generatedAnnotationType","private String generatedAnnotationType()","0","-","-","-","-"
"1578","isJavaxAnnotationProcessingGeneratedAvailable","private boolean isJavaxAnnotationProcessingGeneratedAvailable()","0","-","-","-","-"
"1579","setUpClass","@BeforeClass
  public static void setUpClass()","0","-","-","-","-"
"1580","getSupportedSourceVersion","@Override
    public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"1581","process","@Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"1582","test","private void test()","0","-","-","-","-"
"1583","nullableString","abstract @Nullable String nullableString();","0","-","-","-","-"
"1584","randomInt","abstract int randomInt();","0","-","-","-","-"
"1585","create","static NullableProperties create(@Nullable String nullableString, int randomInt)","0","-","-","-","-"
"1586","testNullablePropertiesCanBeNull","@Test
  public void testNullablePropertiesCanBeNull()","0","-","-","-","-"
"1587","testEqualsParameterIsAnnotated","@Test
  public void testEqualsParameterIsAnnotated() throws NoSuchMethodException","0","-","-","-","-"
"1588","nullable","@AutoAnnotation
  static Nullable nullable()","0","-","-","-","-"
"1589","nullables","/**
   * Returns a set containing this test's","0","-","-","-","-"
"1590","testNullablePropertyImplementationIsNullable","@Test
  public void testNullablePropertyImplementationIsNullable() throws NoSuchMethodException","0","-","-","-","-"
"1591","testNullablePropertyConstructorParameterIsNullable","@Test
  public void testNullablePropertyConstructorParameterIsNullable() throws NoSuchMethodException","0","-","-","-","-"
"1592","nullableString","@AutoValue.CopyAnnotations(exclude = Nullable.class)
    abstract @Nullable String nullableString();","0","-","-","-","-"
"1593","randomInt","abstract int randomInt();","0","-","-","-","-"
"1594","create","NullablePropertiesNotCopied create(String notNullableAfterAll, int randomInt)","0","-","-","-","-"
"1595","testExcludedNullablePropertyImplementation","@Test
  public void testExcludedNullablePropertyImplementation() throws NoSuchMethodException","0","-","-","-","-"
"1596","testExcludedNullablePropertyConstructorParameter","@Test
  public void testExcludedNullablePropertyConstructorParameter() throws NoSuchMethodException","0","-","-","-","-"
"1597","nullableString","abstract @Nullable String nullableString();","0","-","-","-","-"
"1598","otherNullableString","abstract @Nullable String otherNullableString();","0","-","-","-","-"
"1599","nonNullableString","abstract String nonNullableString();","0","-","-","-","-"
"1600","create","static NullableNonNullable create(
        String nullableString, String otherNullableString, String nonNullableString)","0","-","-","-","-"
"1601","testEqualsWithNullable","@Test
  public void testEqualsWithNullable() throws Exception","0","-","-","-","-"
"1602","thing","T thing();","0","-","-","-","-"
"1603","thing","@Override
    @Nullable
    T thing();","0","-","-","-","-"
"1604","builder","static Builder builder()","0","-","-","-","-"
"1605","setThing","Builder setThing(String thing);","0","-","-","-","-"
"1606","thing","@Nullable
      String thing();","0","-","-","-","-"
"1607","build","StringThingWithBuilder build();","0","-","-","-","-"
"1608","testInheritedGetterRemainsNullable","@Test
  public void testInheritedGetterRemainsNullable() throws NoSuchMethodException","0","-","-","-","-"
"1609","testInheritedBuilderGetterRemainsNullable","@Test
  public void testInheritedBuilderGetterRemainsNullable() throws NoSuchMethodException","0","-","-","-","-"
"1610","things","List<@Nullable T> things();","0","-","-","-","-"
"1611","testInheritedListGetterRemainsNullable","@Test
  public void testInheritedListGetterRemainsNullable() throws NoSuchMethodException","0","-","-","-","-"
"1612","otherTypeAnnotation","@AutoAnnotation
  public static OtherTypeAnnotation otherTypeAnnotation()","0","-","-","-","-"
"1613","nullableThing","abstract @Nullable @OtherTypeAnnotation Nested nullableThing();","0","-","-","-","-"
"1614","randomInt","abstract int randomInt();","0","-","-","-","-"
"1615","builder","static Builder builder()","0","-","-","-","-"
"1616","setNullableThing","abstract Builder setNullableThing(@Nullable @OtherTypeAnnotation Nested thing);","0","-","-","-","-"
"1617","setRandomInt","abstract Builder setRandomInt(int x);","0","-","-","-","-"
"1618","build","abstract NestedNullableProperties build();","0","-","-","-","-"
"1619","testNestedNullablePropertiesCanBeNull","@Test
  public void testNestedNullablePropertiesCanBeNull()","0","-","-","-","-"
"1620","testNestedNullablePropertiesAreCopied","@Test
  public void testNestedNullablePropertiesAreCopied() throws Exception","0","-","-","-","-"
"1621","booleans","@SuppressWarnings(""mutable"")
    abstract boolean[] booleans();","0","-","-","-","-"
"1622","ints","@SuppressWarnings(""mutable"")
    abstract int @Nullable [] ints();","0","-","-","-","-"
"1623","create","static PrimitiveArrays create(boolean[] booleans, int[] ints)","0","-","-","-","-"
"1624","testPrimitiveArrays","@Test
  public void testPrimitiveArrays()","0","-","-","-","-"
"1625","testNullablePrimitiveArrays","@Test
  public void testNullablePrimitiveArrays()","0","-","-","-","-"
"1626","testNotNullablePrimitiveArrays","@Test
  public void testNotNullablePrimitiveArrays()","0","-","-","-","-"
"1627","notNullable","public abstract String notNullable();","0","-","-","-","-"
"1628","nullable","public abstract @Nullable String nullable();","0","-","-","-","-"
"1629","builder","public static Builder builder()","0","-","-","-","-"
"1630","notNullable","Builder notNullable(String s);","0","-","-","-","-"
"1631","nullable","Builder nullable(@Nullable String s);","0","-","-","-","-"
"1632","nullable","Optional<String> nullable();","0","-","-","-","-"
"1633","build","NullablePropertyWithBuilder build();","0","-","-","-","-"
"1634","testOmitNullableWithBuilder","@Test
  public void testOmitNullableWithBuilder()","0","-","-","-","-"
"1635","notOptional","public abstract String notOptional();","0","-","-","-","-"
"1636","optional","public abstract Optional<String> optional();","0","-","-","-","-"
"1637","builder","public static Builder builder()","0","-","-","-","-"
"1638","notOptional","Builder notOptional(String s);","0","-","-","-","-"
"1639","optional","Builder optional(@Nullable String s);","0","-","-","-","-"
"1640","build","OptionalPropertyWithNullableBuilder build();","0","-","-","-","-"
"1641","testOmitOptionalWithNullableBuilder","@Test
  public void testOmitOptionalWithNullableBuilder()","0","-","-","-","-"
"1642","optional","public abstract @Nullable Optional<String> optional();","0","-","-","-","-"
"1643","builder","public static Builder builder()","0","-","-","-","-"
"1644","optional","Builder optional(@Nullable String s);","0","-","-","-","-"
"1645","optional","Optional<String> optional();","0","-","-","-","-"
"1646","build","NullableOptionalPropertyWithNullableBuilder build();","0","-","-","-","-"
"1647","testNullableOptional","@Test
  public void testNullableOptional()","0","-","-","-","-"
"1648","list","public abstract ImmutableList<T> list();","0","-","-","-","-"
"1649","t","public abstract @Nullable T t();","0","-","-","-","-"
"1650","ints","@SuppressWarnings(""mutable"")
    public abstract int[] ints();","0","-","-","-","-"
"1651","noGetter","public abstract int noGetter();","0","-","-","-","-"
"1652","builder","public static <T extends Comparable<T>> Builder<T> builder()","0","-","-","-","-"
"1653","setList","Builder<T> setList(ImmutableList<T> list);","0","-","-","-","-"
"1654","setT","Builder<T> setT(T t);","0","-","-","-","-"
"1655","setInts","Builder<T> setInts(int[] ints);","0","-","-","-","-"
"1656","setNoGetter","Builder<T> setNoGetter(int x);","0","-","-","-","-"
"1657","list","ImmutableList<T> list();","0","-","-","-","-"
"1658","t","T t();","0","-","-","-","-"
"1659","ints","int[] ints();","0","-","-","-","-"
"1660","build","BuilderWithUnprefixedGetters<T> build();","0","-","-","-","-"
"1661","foo","abstract String foo();","0","-","-","-","-"
"1662","of","static NoNullableRef of(String foo)","0","-","-","-","-"
"1663","testDefaultToJSpecifyNullable","@Test
  public void testDefaultToJSpecifyNullable() throws ReflectiveOperationException","0","-","-","-","-"
"1664","testBuilderWithUnprefixedGetter","@Test
  public void testBuilderWithUnprefixedGetter()","0","-","-","-","-"
"1665","getList","public abstract ImmutableList<T> getList();","0","-","-","-","-"
"1666","getT","public abstract @Nullable T getT();","0","-","-","-","-"
"1667","getInts","@SuppressWarnings(""mutable"")
    public abstract int @Nullable [] getInts();","0","-","-","-","-"
"1668","getNoGetter","public abstract int getNoGetter();","0","-","-","-","-"
"1669","builder","public static <T extends Comparable<T>> Builder<T> builder()","0","-","-","-","-"
"1670","setList","public abstract Builder<T> setList(ImmutableList<T> list);","0","-","-","-","-"
"1671","setT","public abstract Builder<T> setT(@Nullable T t);","0","-","-","-","-"
"1672","setInts","public abstract Builder<T> setInts(int[] ints);","0","-","-","-","-"
"1673","setNoGetter","public abstract Builder<T> setNoGetter(int x);","0","-","-","-","-"
"1674","getList","abstract ImmutableList<T> getList();","0","-","-","-","-"
"1675","getT","abstract T getT();","0","-","-","-","-"
"1676","getInts","abstract int[] getInts();","0","-","-","-","-"
"1677","build","public abstract BuilderWithPrefixedGetters<T> build();","0","-","-","-","-"
"1678","testBuilderWithPrefixedGetter","@Test
  public void testBuilderWithPrefixedGetter()","0","-","-","-","-"
"1679","foo","abstract @Nullable String foo();","0","-","-","-","-"
"1680","bar","abstract Optional<String> bar();","0","-","-","-","-"
"1681","builder","static Builder builder()","0","-","-","-","-"
"1682","setFoo","Builder setFoo(@Nullable String foo);","0","-","-","-","-"
"1683","setBar","Builder setBar(@Nullable String bar);","0","-","-","-","-"
"1684","build","FunkyNullable build();","0","-","-","-","-"
"1685","testFunkyNullable","@Test
  public void testFunkyNullable()","0","-","-","-","-"
"1686","foo","abstract String foo();","0","-","-","-","-"
"1687","create","static EqualsNullable create(String foo)","0","-","-","-","-"
"1688","equals","@Override
    public abstract boolean equals(@Nullable Object x);","0","-","-","-","-"
"1689","hashCode","@Override
    public abstract int hashCode();","0","-","-","-","-"
"1690","testEqualsNullable","/**
   * Tests that a type annotation on the parameter of","0","-","-","-","-"
"1691","thing","abstract @Nullable T thing();","0","-","-","-","-"
"1692","create","static <@Nullable T> AnnotatedTypeParameter<T> create(T thing)","0","-","-","-","-"
"1693","testTypeAnnotationCopiedToImplementation","/**
   * Tests that an annotation on a type parameter of an","0","-","-","-","-"
"1694","thing","abstract @Nullable T thing();","0","-","-","-","-"
"1695","builder","static <@Nullable T> Builder<T> builder()","0","-","-","-","-"
"1696","setThing","abstract Builder<T> setThing(T thing);","0","-","-","-","-"
"1697","build","abstract AnnotatedTypeParameterWithBuilder<T> build();","0","-","-","-","-"
"1698","testTypeAnnotationOnBuilderCopiedToImplementation","/**
   * Tests that an annotation on a type parameter of an","0","-","-","-","-"
"1699","maybeJustMaybe","abstract Optional<Optional<String>> maybeJustMaybe();","0","-","-","-","-"
"1700","builder","static Builder builder()","0","-","-","-","-"
"1701","maybeJustMaybe","abstract Builder maybeJustMaybe(Optional<String> maybe);","0","-","-","-","-"
"1702","build","abstract OptionalOptional build();","0","-","-","-","-"
"1703","testOptionalOptional_empty","@Test
  public void testOptionalOptional_empty()","0","-","-","-","-"
"1704","testOptionalOptional_ofEmpty","@Test
  public void testOptionalOptional_ofEmpty()","0","-","-","-","-"
"1705","testOptionalOptional_ofSomething","@Test
  public void testOptionalOptional_ofSomething()","0","-","-","-","-"
"1706","predicate","abstract Optional<? extends Predicate<? super Integer>> predicate();","0","-","-","-","-"
"1707","builder","static Builder builder()","0","-","-","-","-"
"1708","setPredicate","abstract Builder setPredicate(Predicate<? super Integer> predicate);","0","-","-","-","-"
"1709","build","abstract OptionalExtends build();","0","-","-","-","-"
"1710","testOptionalExtends","@Test
  public void testOptionalExtends()","0","-","-","-","-"
"1711","bar","public abstract Bar bar();","0","-","-","-","-"
"1712","baz","public abstract double baz();","0","-","-","-","-"
"1713","builder","public static Foo.Builder builder()","0","-","-","-","-"
"1714","bar","abstract Optional<Bar> bar();","0","-","-","-","-"
"1715","bar","public abstract Builder bar(Bar bar);","0","-","-","-","-"
"1716","barBuilder","public abstract Bar.Builder barBuilder();","0","-","-","-","-"
"1717","baz","abstract OptionalDouble baz();","0","-","-","-","-"
"1718","baz","public abstract Builder baz(double baz);","0","-","-","-","-"
"1719","autoBuild","abstract Foo autoBuild();","0","-","-","-","-"
"1720","build","public Foo build()","0","-","-","-","-"
"1721","toBuilder","public abstract Bar.Builder toBuilder();","0","-","-","-","-"
"1722","builder","public static Bar.Builder builder()","0","-","-","-","-"
"1723","build","public abstract Bar build();","0","-","-","-","-"
"1724","nestedOptionalGetter","@Test
  public void nestedOptionalGetter()","0","-","-","-","-"
"1725","list","public abstract List<? extends T> list();","0","-","-","-","-"
"1726","builder","public static <T> PropertyBuilderWildcard.Builder<T> builder()","0","-","-","-","-"
"1727","listBuilder","ListBuilder<T> listBuilder();","0","-","-","-","-"
"1728","build","PropertyBuilderWildcard<T> build();","0","-","-","-","-"
"1729","add","public void add(T value)","0","-","-","-","-"
"1730","build","public List<T> build()","0","-","-","-","-"
"1731","propertyBuilderWildcard","@Test
  public void propertyBuilderWildcard()","0","-","-","-","-"
"1732","maybeNullable","public abstract T maybeNullable();","0","-","-","-","-"
"1733","create","public static <T extends @Nullable Object> NullableBound<T> create(T maybeNullable)","0","-","-","-","-"
"1734","propertyCanBeNullIfNullableBound","@Test
  public void propertyCanBeNullIfNullableBound()","0","-","-","-","-"
"1735","maybeNullable","public abstract T maybeNullable();","0","-","-","-","-"
"1736","create","public static <T extends @Nullable Object & @Nullable Serializable>
        NullableIntersectionBound<T> create(T maybeNullable)","0","-","-","-","-"
"1737","propertyCanBeNullIfNullableIntersectionBound","@Test
  public void propertyCanBeNullIfNullableIntersectionBound()","0","-","-","-","-"
"1738","notNullable","public abstract T notNullable();","0","-","-","-","-"
"1739","create","public static <T extends @Nullable Object & Serializable>
        PartlyNullableIntersectionBound<T> create(T notNullable)","0","-","-","-","-"
"1740","propertyCannotBeNullWithPartlyNullableIntersectionBound","@Test
  public void propertyCannotBeNullWithPartlyNullableIntersectionBound()","0","-","-","-","-"
"1741","nullOne","public abstract T nullOne();","0","-","-","-","-"
"1742","nullTwo","public abstract U nullTwo();","0","-","-","-","-"
"1743","create","public static <T extends @Nullable Object, U extends T> NullableVariableBound<T, U> create(
        T nullOne, U nullTwo)","0","-","-","-","-"
"1744","nullableVariableBound","@Test
  public void nullableVariableBound()","0","-","-","-","-"
"1745","t","public abstract T t();","0","-","-","-","-"
"1746","nullableT","public abstract @Nullable T nullableT();","0","-","-","-","-"
"1747","string","public abstract String string();","0","-","-","-","-"
"1748","builder","public static <T> Builder<T> builder()","0","-","-","-","-"
"1749","setT","public abstract Builder<T> setT(T t);","0","-","-","-","-"
"1750","setNullableT","public abstract Builder<T> setNullableT(@Nullable T nullableT);","0","-","-","-","-"
"1751","setString","public abstract Builder<T> setString(String string);","0","-","-","-","-"
"1752","build","public abstract NotNullableVariableBound<T> build();","0","-","-","-","-"
"1753","typeParameterBuilderFieldsAreNullable","@Test
  public void typeParameterBuilderFieldsAreNullable() throws ReflectiveOperationException","0","-","-","-","-"
"1754","newStringValues","@AutoAnnotation
  private static StringValues newStringValues(String[] value)","0","-","-","-","-"
"1755","testSimple","@Test
  public void testSimple()","0","-","-","-","-"
"1756","testEqualsParameterAnnotation","@Test
  public void testEqualsParameterAnnotation() throws ReflectiveOperationException","0","-","-","-","-"
"1757","testArraysAreCloned","@Test
  public void testArraysAreCloned()","0","-","-","-","-"
"1758","testGwtArraysAreCloned","@Test
  public void testGwtArraysAreCloned()","0","-","-","-","-"
"1759","newGwtArrays","@AutoAnnotation
  private static GwtArrays newGwtArrays(String[] strings, int[] ints)","0","-","-","-","-"
"1760","newStringValuesVarArgs","@AutoAnnotation
  private static StringValues newStringValuesVarArgs(String... value)","0","-","-","-","-"
"1761","testSimpleVarArgs","@Test
  public void testSimpleVarArgs()","0","-","-","-","-"
"1762","newEmpty","@AutoAnnotation
  private static Empty newEmpty()","0","-","-","-","-"
"1763","testEmpty","@Test
  public void testEmpty()","0","-","-","-","-"
"1764","newEverything","@AutoAnnotation
  static Everything newEverything(
      byte aByte,
      short aShort,
      int anInt,
      long aLong,
      float aFloat,
      double aDouble,
      char aChar,
      boolean aBoolean,
      String aString,
      RetentionPolicy anEnum,
      StringValues anAnnotation,
      Class<? extends CharSequence> aClass,
      byte[] bytes,
      short[] shorts,
      int[] ints,
      long[] longs,
      float[] floats,
      double[] doubles,
      char[] chars,
      boolean[] booleans,
      String[] strings,
      RetentionPolicy[] enums,
      StringValues[] annotations,
      Class<? extends CharSequence>... classes)","0","-","-","-","-"
"1765","newEverythingCollections","@AutoAnnotation
  static Everything newEverythingCollections(
      byte aByte,
      short aShort,
      int anInt,
      long aLong,
      float aFloat,
      double aDouble,
      char aChar,
      boolean aBoolean,
      String aString,
      RetentionPolicy anEnum,
      StringValues anAnnotation,
      Class<? extends CharSequence> aClass,
      Collection<Byte> bytes,
      List<Short> shorts,
      ArrayList<Integer> ints,
      Set<Long> longs,
      SortedSet<Float> floats,
      TreeSet<Double> doubles,
      LinkedHashSet<Character> chars,
      ImmutableCollection<Boolean> booleans,
      ImmutableList<String> strings,
      ImmutableSet<RetentionPolicy> enums,
      Set<StringValues> annotations,
      List<Class<? extends CharSequence>> classes)","0","-","-","-","-"
"1766","testEqualsAndHashCode","@Test
  public void testEqualsAndHashCode()","0","-","-","-","-"
"1767","testSerialization","@Test
  public void testSerialization()","0","-","-","-","-"
"1768","testSerialVersionUid","@Test
  @SuppressWarnings(""GetClassOnAnnotation"") // yes, we really do want the implementation classes
  public void testSerialVersionUid()","0","-","-","-","-"
"1769","IntList","IntList(Collection<Integer> c)","0","-","-","-","-"
"1770","newIntArray","@AutoAnnotation
  static IntArray newIntArray(IntList ints)","0","-","-","-","-"
"1771","testDerivedPrimitiveCollection","/**
   * Test that we can represent a primitive array member with a parameter whose type is a collection
   * of the corresponding wrapper type, even if the wrapper type is not explicitly a type parameter.
   * Specifically, if the member is an","0","-","-","-","-"
"1772","testToString","@Test
  public void testToString()","0","-","-","-","-"
"1773","testStringQuoting","@Test
  public void testStringQuoting()","0","-","-","-","-"
"1774","newAnnotationsAnnotation","@AutoAnnotation
  static AnnotationsAnnotation newAnnotationsAnnotation(List<Class<? extends Annotation>> value)","0","-","-","-","-"
"1775","testGenericArray","@Test
  public void testGenericArray()","0","-","-","-","-"
"1776","newClassesAnnotation","@AutoAnnotation
  static ClassesAnnotation newClassesAnnotation(List<Class<?>> value)","0","-","-","-","-"
"1777","testWildcardArray","@Test
  public void testWildcardArray()","0","-","-","-","-"
"1778","newIntegersAnnotation","@AutoAnnotation
  static IntegersAnnotation newIntegersAnnotation(int three)","0","-","-","-","-"
"1779","testConstantOverflowInHashCode","@Test
  public void testConstantOverflowInHashCode()","0","-","-","-","-"
"1780","newEverythingWithDefaults","@AutoAnnotation
  static EverythingWithDefaults newEverythingWithDefaults()","0","-","-","-","-"
"1781","testDefaultedValues","@Test
  public void testDefaultedValues()","0","-","-","-","-"
"1782","name","public abstract String name();","0","-","-","-","-"
"1783","create","public static Dog create(String name)","0","-","-","-","-"
"1784","bark","public void bark()","0","-","-","-","-"
"1785","create","public static Cat create()","0","-","-","-","-"
"1786","meow","public void meow()","0","-","-","-","-"
"1787","create","public static TigerShark create()","0","-","-","-","-"
"1788","chomp","public void chomp()","0","-","-","-","-"
"1789","create","public static Pet create(Dog dog)","0","-","-","-","-"
"1790","create","public static Pet create(Cat cat)","0","-","-","-","-"
"1791","create","public static Pet create(TigerShark shark)","0","-","-","-","-"
"1792","dog","public abstract Dog dog();","0","-","-","-","-"
"1793","cat","public abstract Cat cat();","0","-","-","-","-"
"1794","tigerShark","public abstract TigerShark tigerShark();","0","-","-","-","-"
"1795","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1796","equality","@Test
  public void equality()","0","-","-","-","-"
"1797","getCorrectType","@Test
  public void getCorrectType()","0","-","-","-","-"
"1798","getWrongType","@Test
  public void getWrongType()","0","-","-","-","-"
"1799","string","@Test
  public void string()","0","-","-","-","-"
"1800","getKind","@Test
  public void getKind()","0","-","-","-","-"
"1801","cannotBeNull","@Test
  public void cannotBeNull()","0","-","-","-","-"
"1802","getKind","abstract Kind getKind();","0","-","-","-","-"
"1803","integer","abstract int integer();","0","-","-","-","-"
"1804","string","abstract String string();","0","-","-","-","-"
"1805","of","static IntegerOrString of(int x)","0","-","-","-","-"
"1806","of","static IntegerOrString of(String x)","0","-","-","-","-"
"1807","packagePrivate","@Test
  public void packagePrivate()","0","-","-","-","-"
"1808","getDog","public abstract Dog getDog();","0","-","-","-","-"
"1809","getCat","public abstract Cat getCat();","0","-","-","-","-"
"1810","getTigerShark","public abstract TigerShark getTigerShark();","0","-","-","-","-"
"1811","create","public static PetWithGet create(Dog dog)","0","-","-","-","-"
"1812","create","public static PetWithGet create(Cat cat)","0","-","-","-","-"
"1813","create","public static PetWithGet create(TigerShark shark)","0","-","-","-","-"
"1814","getKind","public abstract Pet.Kind getKind();","0","-","-","-","-"
"1815","getPrefix","@Test
  public void getPrefix()","0","-","-","-","-"
"1816","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1817","aByte","public abstract byte aByte();","0","-","-","-","-"
"1818","aShort","public abstract short aShort();","0","-","-","-","-"
"1819","anInt","public abstract int anInt();","0","-","-","-","-"
"1820","aLong","public abstract long aLong();","0","-","-","-","-"
"1821","aFloat","public abstract float aFloat();","0","-","-","-","-"
"1822","aDouble","public abstract double aDouble();","0","-","-","-","-"
"1823","aChar","public abstract char aChar();","0","-","-","-","-"
"1824","aBoolean","public abstract boolean aBoolean();","0","-","-","-","-"
"1825","of","public static Primitive of(byte x)","0","-","-","-","-"
"1826","of","public static Primitive of(short x)","0","-","-","-","-"
"1827","of","public static Primitive of(int x)","0","-","-","-","-"
"1828","of","public static Primitive of(long x)","0","-","-","-","-"
"1829","of","public static Primitive of(float x)","0","-","-","-","-"
"1830","of","public static Primitive of(double x)","0","-","-","-","-"
"1831","of","public static Primitive of(char x)","0","-","-","-","-"
"1832","of","public static Primitive of(boolean x)","0","-","-","-","-"
"1833","primitive","@Test
  public void primitive()","0","-","-","-","-"
"1834","getDog","public abstract Dog getDog();","0","-","-","-","-"
"1835","create","public static OneOfOne create(Dog dog)","0","-","-","-","-"
"1836","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1837","oneOfOne","@Test
  public void oneOfOne()","0","-","-","-","-"
"1838","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1839","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1840","value","public abstract V value();","0","-","-","-","-"
"1841","exception","public abstract Throwable exception();","0","-","-","-","-"
"1842","get","public V get() throws ExecutionException","0","-","-","-","-"
"1843","value","static <V extends Serializable> TaskResult<V> value(V value)","0","-","-","-","-"
"1844","exception","static TaskResult<?> exception(Throwable exception)","0","-","-","-","-"
"1845","taskResultValue","@Test
  public void taskResultValue() throws Exception","0","-","-","-","-"
"1846","taskResultException","@Test
  public void taskResultException()","0","-","-","-","-"
"1847","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1848","ace","public abstract String ace();","0","-","-","-","-"
"1849","ace","public static CustomToString ace(String ace)","0","-","-","-","-"
"1850","toString","@Override
    public String toString()","0","-","-","-","-"
"1851","customToString","@Test
  public void customToString()","0","-","-","-","-"
"1852","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1853","ace","public abstract String ace();","0","-","-","-","-"
"1854","ace","public static AbstractToString ace(String ace)","0","-","-","-","-"
"1855","toString","@Override
    public abstract String toString();","0","-","-","-","-"
"1856","abstractToString","@Test
  public void abstractToString()","0","-","-","-","-"
"1857","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1858","getLetter","public abstract String getLetter();","0","-","-","-","-"
"1859","getPackage","public abstract String getPackage();","0","-","-","-","-"
"1860","ofLetter","public static LetterOrPackage ofLetter(String letter)","0","-","-","-","-"
"1861","ofPackage","public static LetterOrPackage ofPackage(String pkg)","0","-","-","-","-"
"1862","reservedWordProperty","@Test
  public void reservedWordProperty()","0","-","-","-","-"
"1863","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1864","string","public abstract String string();","0","-","-","-","-"
"1865","ints","@SuppressWarnings(""mutable"")
    public abstract int[] ints();","0","-","-","-","-"
"1866","ofString","public static ArrayValue ofString(String string)","0","-","-","-","-"
"1867","ofInts","public static ArrayValue ofInts(int[] ints)","0","-","-","-","-"
"1868","arrayValues","@Test
  public void arrayValues()","0","-","-","-","-"
"1869","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1870","ace","public abstract String ace();","0","-","-","-","-"
"1871","ace","public static AnnotationNotCopied ace(String ace)","0","-","-","-","-"
"1872","classAnnotationsNotCopiedByDefault","@Test
  public void classAnnotationsNotCopiedByDefault()","0","-","-","-","-"
"1873","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1874","ace","public abstract String ace();","0","-","-","-","-"
"1875","ace","public static AnnotationCopied ace(String ace)","0","-","-","-","-"
"1876","classAnnotationsCopiedIfCopyAnnotations","@Test
  public void classAnnotationsCopiedIfCopyAnnotations()","0","-","-","-","-"
"1877","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1878","empty","public abstract void empty();","0","-","-","-","-"
"1879","string","public abstract String string();","0","-","-","-","-"
"1880","ofEmpty","public static MaybeEmpty ofEmpty()","0","-","-","-","-"
"1881","ofString","public static MaybeEmpty ofString(String s)","0","-","-","-","-"
"1882","voidPropertyIsSingleton","@Test
  public void voidPropertyIsSingleton()","0","-","-","-","-"
"1883","voidPropertyRemainsSingletonWhenDeserialized","@Test
  public void voidPropertyRemainsSingletonWhenDeserialized() throws Exception","0","-","-","-","-"
"1884","voidPropertyToString","@Test
  public void voidPropertyToString()","0","-","-","-","-"
"1885","voidPropertyHashCodeIsIdentity","@Test
  public void voidPropertyHashCodeIsIdentity()","0","-","-","-","-"
"1886","voidPropertyGetterDoesNothing","@Test
  public void voidPropertyGetterDoesNothing()","0","-","-","-","-"
"1887","voidPropertyNotEqualToNonVoid","@Test
  public void voidPropertyNotEqualToNonVoid()","0","-","-","-","-"
"1888","voidPropertyWrongType","@Test
  public void voidPropertyWrongType()","0","-","-","-","-"
"1889","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1890","ints","@SuppressWarnings(""mutable"")
    public abstract int[] ints();","0","-","-","-","-"
"1891","ofInts","public static OneOfArray ofInts(int[] s)","0","-","-","-","-"
"1892","arrayToString","@Test
  public void arrayToString()","0","-","-","-","-"
"1893","getKind","public abstract Kind getKind();","0","-","-","-","-"
"1894","funkyString","public abstract String funkyString();","0","-","-","-","-"
"1895","ofFunkyString","public static OneOfFunkyString ofFunkyString(String s)","0","-","-","-","-"
"1896","funkyString","@Test
  public void funkyString()","0","-","-","-","-"
"1897","kind","public abstract Kind kind();","0","-","-","-","-"
"1898","thing","public abstract String thing();","0","-","-","-","-"
"1899","ofThing","public static EqualsNullable ofThing(String thing)","0","-","-","-","-"
"1900","equals","@Override
    public abstract boolean equals(@Nullable Object x);","0","-","-","-","-"
"1901","hashCode","@Override
    public abstract int hashCode();","0","-","-","-","-"
"1902","equalsNullable","/**
   * Tests that a type annotation on the parameter of","0","-","-","-","-"
"1903","optional","Optional<T> optional();","0","-","-","-","-"
"1904","setOptional","B setOptional(@Nullable T t);","0","-","-","-","-"
"1905","builder","static Builder builder()","0","-","-","-","-"
"1906","build","ConcreteOptional build();","0","-","-","-","-"
"1907","genericOptionalOfNullable","@Test
  public void genericOptionalOfNullable()","0","-","-","-","-"
"1908","testSimpleValueType","@Test
  public void testSimpleValueType()","0","-","-","-","-"
"1909","testNestedValueType","@Test
  public void testNestedValueType()","0","-","-","-","-"
"1910","testNull","@Test
  public void testNull()","0","-","-","-","-"
"1911","basic","@Test
  public void basic() throws IOException","0","-","-","-","-"
"1912","buildFakeProject","private BuildResult buildFakeProject() throws IOException","0","-","-","-","-"
"1913","getGradleInstallation","private static Optional<File> getGradleInstallation()","0","-","-","-","-"
"1914","expandSystemProperties","private static String expandSystemProperties(String s)","0","-","-","-","-"
"1915","writeFile","private static void writeFile(Path file, String text) throws IOException","0","-","-","-","-"
"1916","Simple","Simple(int anInt, String aString)","0","-","-","-","-"
"1917","of","static Simple of(int anInt, String aString)","0","-","-","-","-"
"1918","equals","@Override
    public boolean equals(Object x)","0","-","-","-","-"
"1919","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"1920","toString","@Override
    public String toString()","0","-","-","-","-"
"1921","builder","static Builder builder()","0","-","-","-","-"
"1922","setAnInt","abstract Builder setAnInt(int x);","0","-","-","-","-"
"1923","setAString","abstract Builder setAString(String x);","0","-","-","-","-"
"1924","build","abstract Simple build();","0","-","-","-","-"
"1925","simple","@Test
  public void simple()","0","-","-","-","-"
"1926","getFoo","abstract int getFoo();","0","-","-","-","-"
"1927","getBar","abstract String getBar();","0","-","-","-","-"
"1928","builder","static Builder builder()","0","-","-","-","-"
"1929","setFoo","abstract Builder setFoo(int x);","0","-","-","-","-"
"1930","setBar","abstract Builder setBar(String x);","0","-","-","-","-"
"1931","build","abstract AutoValue_AutoBuilderTest_SimpleAuto build();","0","-","-","-","-"
"1932","simpleAuto","@Test
  public void simpleAuto()","0","-","-","-","-"
"1933","myAnnotation","@AutoAnnotation
  static MyAnnotation myAnnotation(String value, Truthiness truthiness)","0","-","-","-","-"
"1934","myAnnotationAll","@AutoAnnotation
  static MyAnnotation myAnnotationAll(String value, int id, Truthiness truthiness)","0","-","-","-","-"
"1935","value","MyAnnotationBuilder value(String x);","0","-","-","-","-"
"1936","truthiness","MyAnnotationBuilder truthiness(Truthiness x);","0","-","-","-","-"
"1937","build","MyAnnotation build();","0","-","-","-","-"
"1938","myAnnotationBuilder","static MyAnnotationBuilder myAnnotationBuilder()","0","-","-","-","-"
"1939","value","MyAnnotationAllBuilder value(String x);","0","-","-","-","-"
"1940","id","MyAnnotationAllBuilder id(int x);","0","-","-","-","-"
"1941","truthiness","MyAnnotationAllBuilder truthiness(Truthiness x);","0","-","-","-","-"
"1942","build","MyAnnotation build();","0","-","-","-","-"
"1943","myAnnotationAllBuilder","static MyAnnotationAllBuilder myAnnotationAllBuilder()","0","-","-","-","-"
"1944","simpleAutoAnnotation","@Test
  public void simpleAutoAnnotation()","0","-","-","-","-"
"1945","value","MyAnnotationSimpleBuilder value(String x);","0","-","-","-","-"
"1946","id","MyAnnotationSimpleBuilder id(int x);","0","-","-","-","-"
"1947","truthiness","MyAnnotationSimpleBuilder truthiness(Truthiness x);","0","-","-","-","-"
"1948","build","MyAnnotation build();","0","-","-","-","-"
"1949","myAnnotationSimpleBuilder","public static MyAnnotationSimpleBuilder myAnnotationSimpleBuilder()","0","-","-","-","-"
"1950","buildWithoutAutoAnnotation","@Test
  public void buildWithoutAutoAnnotation()","0","-","-","-","-"
"1951","value","MyAnnotationSimplerBuilder value(String x);","0","-","-","-","-"
"1952","id","MyAnnotationSimplerBuilder id(int x);","0","-","-","-","-"
"1953","build","MyAnnotation build();","0","-","-","-","-"
"1954","myAnnotationSimplerBuilder","public static MyAnnotationSimplerBuilder myAnnotationSimplerBuilder()","0","-","-","-","-"
"1955","buildWithoutAutoAnnotation_noSetterForElement","@Test
  public void buildWithoutAutoAnnotation_noSetterForElement()","0","-","-","-","-"
"1956","Overload","Overload(int anInt, String aString)","0","-","-","-","-"
"1957","Overload","Overload(int anInt, String aString, BigInteger aBigInteger)","0","-","-","-","-"
"1958","equals","@Override
    public boolean equals(Object x)","0","-","-","-","-"
"1959","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"1960","toString","@Override
    public String toString()","0","-","-","-","-"
"1961","builder1","static Builder1 builder1()","0","-","-","-","-"
"1962","builder2","static Builder2 builder2()","0","-","-","-","-"
"1963","setAnInt","Builder1 setAnInt(int x);","0","-","-","-","-"
"1964","setAString","Builder1 setAString(String x);","0","-","-","-","-"
"1965","build","Overload build();","0","-","-","-","-"
"1966","setAnInt","Builder2 setAnInt(int x);","0","-","-","-","-"
"1967","setAString","Builder2 setAString(String x);","0","-","-","-","-"
"1968","setABigInteger","Builder2 setABigInteger(BigInteger x);","0","-","-","-","-"
"1969","build","Overload build();","0","-","-","-","-"
"1970","overloadedConstructor","@Test
  public void overloadedConstructor()","0","-","-","-","-"
"1971","anInt","SimpleStaticBuilder anInt(int x);","0","-","-","-","-"
"1972","aString","SimpleStaticBuilder aString(String x);","0","-","-","-","-"
"1973","build","Simple build();","0","-","-","-","-"
"1974","simpleStaticBuilder","static SimpleStaticBuilder simpleStaticBuilder()","0","-","-","-","-"
"1975","staticMethod","@Test
  public void staticMethod()","0","-","-","-","-"
"1976","localTimeOf","static LocalTime localTimeOf(int hour, int minute, int second, int nanoOfSecond)","0","-","-","-","-"
"1977","localTimeBuilder","static LocalTimeBuilder localTimeBuilder()","0","-","-","-","-"
"1978","hour","LocalTimeBuilder hour(int hour);","0","-","-","-","-"
"1979","minute","LocalTimeBuilder minute(int minute);","0","-","-","-","-"
"1980","second","LocalTimeBuilder second(int second);","0","-","-","-","-"
"1981","nanoOfSecond","LocalTimeBuilder nanoOfSecond(int nanoOfSecond);","0","-","-","-","-"
"1982","build","LocalTime build();","0","-","-","-","-"
"1983","staticMethodOfContainingClass","@Test
  public void staticMethodOfContainingClass()","0","-","-","-","-"
"1984","missingRequiredProperty","@Test
  public void missingRequiredProperty()","0","-","-","-","-"
"1985","throwException","static void throwException() throws IOException","0","-","-","-","-"
"1986","throwExceptionBuilder","static ThrowExceptionBuilder throwExceptionBuilder()","0","-","-","-","-"
"1987","build","void build() throws IOException;","0","-","-","-","-"
"1988","emptyBuilderThrowsException","@Test
  public void emptyBuilderThrowsException()","0","-","-","-","-"
"1989","ListContainer","ListContainer(ImmutableList<String> list)","0","-","-","-","-"
"1990","equals","@Override
    public boolean equals(Object o)","0","-","-","-","-"
"1991","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"1992","toString","@Override
    public String toString()","0","-","-","-","-"
"1993","builder","static Builder builder()","0","-","-","-","-"
"1994","setList","Builder setList(Iterable<String> list);","0","-","-","-","-"
"1995","listBuilder","ImmutableList.Builder<String> listBuilder();","0","-","-","-","-"
"1996","build","ListContainer build();","0","-","-","-","-"
"1997","propertyBuilder","@Test
  public void propertyBuilder()","0","-","-","-","-"
"1998","concatList","static <T> String concatList(ImmutableList<T> list)","0","-","-","-","-"
"1999","listBuilder","ImmutableList.Builder<T> listBuilder();","0","-","-","-","-"
"2000","call","String call();","0","-","-","-","-"
"2001","propertyBuilderWithoutSetter","@Test
  public void propertyBuilderWithoutSetter()","0","-","-","-","-"
"2002","singletonMap","static <K, V extends Number> Map<K, V> singletonMap(K key, V value)","0","-","-","-","-"
"2003","singletonMapBuilder","static <K, V extends Number> SingletonMapBuilder<K, V> singletonMapBuilder()","0","-","-","-","-"
"2004","key","SingletonMapBuilder<K, V> key(K key);","0","-","-","-","-"
"2005","value","SingletonMapBuilder<K, V> value(V value);","0","-","-","-","-"
"2006","build","Map<K, V> build();","0","-","-","-","-"
"2007","genericStaticMethod","@Test
  public void genericStaticMethod()","0","-","-","-","-"
"2008","SingletonSet","SingletonSet(E element)","0","-","-","-","-"
"2009","size","@Override
    public int size()","0","-","-","-","-"
"2010","iterator","@Override
    public Iterator<E> iterator()","0","-","-","-","-"
"2011","hasNext","@Override
        public boolean hasNext()","0","-","-","-","-"
"2012","next","@Override
        public E next()","0","-","-","-","-"
"2013","setElement","SingletonSetBuilder<E> setElement(E element);","0","-","-","-","-"
"2014","build","SingletonSet<E> build();","0","-","-","-","-"
"2015","singletonSetBuilder","static <E> SingletonSetBuilder<E> singletonSetBuilder()","0","-","-","-","-"
"2016","genericClass","@Test
  public void genericClass()","0","-","-","-","-"
"2017","TypedSingletonSet","<T extends E> TypedSingletonSet(T element, Class<T> type)","0","-","-","-","-"
"2018","toString","@Override
    public String toString()","0","-","-","-","-"
"2019","setElement","TypedSingletonSetBuilder<E, T> setElement(T element);","0","-","-","-","-"
"2020","setType","TypedSingletonSetBuilder<E, T> setType(Class<T> type);","0","-","-","-","-"
"2021","build","TypedSingletonSet<E> build();","0","-","-","-","-"
"2022","typedSingletonSetBuilder","static <E, T extends E> TypedSingletonSetBuilder<E, T> typedSingletonSetBuilder()","0","-","-","-","-"
"2023","genericClassWithGenericConstructor","@Test
  public void genericClassWithGenericConstructor()","0","-","-","-","-"
"2024","pair","static <T> ImmutableList<T> pair(T first, T second)","0","-","-","-","-"
"2025","setFirst","PairBuilder<T> setFirst(T x);","0","-","-","-","-"
"2026","getFirst","T getFirst();","0","-","-","-","-"
"2027","setSecond","PairBuilder<T> setSecond(T x);","0","-","-","-","-"
"2028","getSecond","Optional<T> getSecond();","0","-","-","-","-"
"2029","build","ImmutableList<T> build();","0","-","-","-","-"
"2030","pairBuilder","static <T> PairBuilder<T> pairBuilder()","0","-","-","-","-"
"2031","genericGetters","@Test
  public void genericGetters()","0","-","-","-","-"
"2032","NumberHolder","NumberHolder(T number)","0","-","-","-","-"
"2033","getNumber","T getNumber()","0","-","-","-","-"
"2034","buildNumberHolder","static <T extends Number> NumberHolder<T> buildNumberHolder(T number)","0","-","-","-","-"
"2035","setNumber","NumberHolderBuilder<T> setNumber(T number);","0","-","-","-","-"
"2036","build","NumberHolder<T> build();","0","-","-","-","-"
"2037","numberHolderBuilder","static <T extends Number> NumberHolderBuilder<T> numberHolderBuilder()","0","-","-","-","-"
"2038","numberHolderBuilder","static <T extends Number> NumberHolderBuilder<T> numberHolderBuilder(
      NumberHolder<T> numberHolder)","0","-","-","-","-"
"2039","builderFromInstance","@Test
  public void builderFromInstance()","0","-","-","-","-"
"2040","anInt","AnnotatedSimpleStaticBuilder1 anInt(int x);","0","-","-","-","-"
"2041","aString","AnnotatedSimpleStaticBuilder1 aString(String x);","0","-","-","-","-"
"2042","build","Simple build();","0","-","-","-","-"
"2043","builderAnnotationsNotCopiedByDefault","@Test
  public void builderAnnotationsNotCopiedByDefault()","0","-","-","-","-"
"2044","anInt","AnnotatedSimpleStaticBuilder2 anInt(int x);","0","-","-","-","-"
"2045","aString","AnnotatedSimpleStaticBuilder2 aString(String x);","0","-","-","-","-"
"2046","build","Simple build();","0","-","-","-","-"
"2047","builderAnnotationsCopiedIfRequested","@Test
  public void builderAnnotationsCopiedIfRequested()","0","-","-","-","-"
"2048","frob","public static <T extends @Nullable Object, U> T frob(T arg, U notNull)","0","-","-","-","-"
"2049","arg","FrobCaller<T, U> arg(T arg);","0","-","-","-","-"
"2050","notNull","FrobCaller<T, U> notNull(U notNull);","0","-","-","-","-"
"2051","call","T call();","0","-","-","-","-"
"2052","caller","static <T extends @Nullable Object, U> FrobCaller<T, U> caller()","0","-","-","-","-"
"2053","builderTypeVariableWithNullableBound","@Test
  public void builderTypeVariableWithNullableBound()","0","-","-","-","-"
"2054","builder","static KotlinDataBuilder builder()","0","-","-","-","-"
"2055","builder","static KotlinDataBuilder builder(KotlinData kotlinData)","0","-","-","-","-"
"2056","setInt","abstract KotlinDataBuilder setInt(int x);","0","-","-","-","-"
"2057","setString","abstract KotlinDataBuilder setString(String x);","0","-","-","-","-"
"2058","build","abstract KotlinData build();","0","-","-","-","-"
"2059","simpleKotlin","@Test
  public void simpleKotlin()","0","-","-","-","-"
"2060","builder","static KotlinDataWithNullableBuilder builder()","0","-","-","-","-"
"2061","setAnInt","abstract KotlinDataWithNullableBuilder setAnInt(int x);","0","-","-","-","-"
"2062","setAString","abstract KotlinDataWithNullableBuilder setAString(String x);","0","-","-","-","-"
"2063","build","abstract KotlinDataWithNullable build();","0","-","-","-","-"
"2064","kotlinWithNullable","@Test
  public void kotlinWithNullable()","0","-","-","-","-"
"2065","builder","static KotlinDataWithDefaultsBuilder builder()","0","-","-","-","-"
"2066","setAnInt","abstract KotlinDataWithDefaultsBuilder setAnInt(int x);","0","-","-","-","-"
"2067","getAnInt","abstract int getAnInt();","0","-","-","-","-"
"2068","anImmutableListBuilder","abstract ImmutableList.Builder<String> anImmutableListBuilder();","0","-","-","-","-"
"2069","setNotDefaulted","abstract KotlinDataWithDefaultsBuilder setNotDefaulted(long x);","0","-","-","-","-"
"2070","getNotDefaulted","abstract long getNotDefaulted();","0","-","-","-","-"
"2071","setAString","abstract KotlinDataWithDefaultsBuilder setAString(String x);","0","-","-","-","-"
"2072","getAString","abstract String getAString();","0","-","-","-","-"
"2073","build","abstract KotlinDataWithDefaults build();","0","-","-","-","-"
"2074","kotlinWithDefaults_explicit","@Test
  public void kotlinWithDefaults_explicit()","0","-","-","-","-"
"2075","kotlinWithDefaults_defaulted","@Test
  public void kotlinWithDefaults_defaulted()","0","-","-","-","-"
"2076","kotlinWithDefaults_getter","@Test
  public void kotlinWithDefaults_getter()","0","-","-","-","-"
"2077","builder","static KotlinDataEightDefaultsBuilder builder()","0","-","-","-","-"
"2078","a1","KotlinDataEightDefaultsBuilder a1(int x);","0","-","-","-","-"
"2079","a2","KotlinDataEightDefaultsBuilder a2(int x);","0","-","-","-","-"
"2080","a3","KotlinDataEightDefaultsBuilder a3(int x);","0","-","-","-","-"
"2081","a4","KotlinDataEightDefaultsBuilder a4(int x);","0","-","-","-","-"
"2082","a5","KotlinDataEightDefaultsBuilder a5(int x);","0","-","-","-","-"
"2083","a6","KotlinDataEightDefaultsBuilder a6(int x);","0","-","-","-","-"
"2084","a7","KotlinDataEightDefaultsBuilder a7(int x);","0","-","-","-","-"
"2085","a8","KotlinDataEightDefaultsBuilder a8(int x);","0","-","-","-","-"
"2086","build","KotlinDataEightDefaults build();","0","-","-","-","-"
"2087","kotlinEightDefaults","@Test
  public void kotlinEightDefaults()","0","-","-","-","-"
"2088","builder","static KotlinDataSomeDefaultsBuilder builder()","0","-","-","-","-"
"2089","fromInstance","static KotlinDataSomeDefaultsBuilder fromInstance(KotlinDataSomeDefaults instance)","0","-","-","-","-"
"2090","requiredInt","KotlinDataSomeDefaultsBuilder requiredInt(int x);","0","-","-","-","-"
"2091","requiredString","KotlinDataSomeDefaultsBuilder requiredString(String x);","0","-","-","-","-"
"2092","optionalInt","KotlinDataSomeDefaultsBuilder optionalInt(int x);","0","-","-","-","-"
"2093","optionalString","KotlinDataSomeDefaultsBuilder optionalString(String x);","0","-","-","-","-"
"2094","build","KotlinDataSomeDefaults build();","0","-","-","-","-"
"2095","kotlinSomeDefaults_someDefaulted","@Test
  public void kotlinSomeDefaults_someDefaulted()","0","-","-","-","-"
"2096","kotlinSomeDefaults_noneDefaulted","@Test
  public void kotlinSomeDefaults_noneDefaulted()","0","-","-","-","-"
"2097","kotlinSomeDefaults_missingRequired","@Test
  public void kotlinSomeDefaults_missingRequired()","0","-","-","-","-"
"2098","builder","static KotlinDataSomeDefaultsBigBuilder builder()","0","-","-","-","-"
"2099","requiredInt","KotlinDataSomeDefaultsBigBuilder requiredInt(int x);","0","-","-","-","-"
"2100","requiredString","KotlinDataSomeDefaultsBigBuilder requiredString(String x);","0","-","-","-","-"
"2101","a1","KotlinDataSomeDefaultsBigBuilder a1(int x);","0","-","-","-","-"
"2102","a2","KotlinDataSomeDefaultsBigBuilder a2(int x);","0","-","-","-","-"
"2103","a3","KotlinDataSomeDefaultsBigBuilder a3(int x);","0","-","-","-","-"
"2104","a4","KotlinDataSomeDefaultsBigBuilder a4(int x);","0","-","-","-","-"
"2105","a5","KotlinDataSomeDefaultsBigBuilder a5(int x);","0","-","-","-","-"
"2106","a6","KotlinDataSomeDefaultsBigBuilder a6(int x);","0","-","-","-","-"
"2107","a7","KotlinDataSomeDefaultsBigBuilder a7(int x);","0","-","-","-","-"
"2108","a8","KotlinDataSomeDefaultsBigBuilder a8(int x);","0","-","-","-","-"
"2109","a9","KotlinDataSomeDefaultsBigBuilder a9(int x);","0","-","-","-","-"
"2110","a10","KotlinDataSomeDefaultsBigBuilder a10(int x);","0","-","-","-","-"
"2111","a11","KotlinDataSomeDefaultsBigBuilder a11(int x);","0","-","-","-","-"
"2112","a12","KotlinDataSomeDefaultsBigBuilder a12(int x);","0","-","-","-","-"
"2113","a13","KotlinDataSomeDefaultsBigBuilder a13(int x);","0","-","-","-","-"
"2114","a14","KotlinDataSomeDefaultsBigBuilder a14(int x);","0","-","-","-","-"
"2115","a15","KotlinDataSomeDefaultsBigBuilder a15(int x);","0","-","-","-","-"
"2116","a16","KotlinDataSomeDefaultsBigBuilder a16(int x);","0","-","-","-","-"
"2117","a17","KotlinDataSomeDefaultsBigBuilder a17(int x);","0","-","-","-","-"
"2118","a18","KotlinDataSomeDefaultsBigBuilder a18(int x);","0","-","-","-","-"
"2119","a19","KotlinDataSomeDefaultsBigBuilder a19(int x);","0","-","-","-","-"
"2120","a20","KotlinDataSomeDefaultsBigBuilder a20(int x);","0","-","-","-","-"
"2121","a21","KotlinDataSomeDefaultsBigBuilder a21(int x);","0","-","-","-","-"
"2122","a22","KotlinDataSomeDefaultsBigBuilder a22(int x);","0","-","-","-","-"
"2123","a23","KotlinDataSomeDefaultsBigBuilder a23(int x);","0","-","-","-","-"
"2124","a24","KotlinDataSomeDefaultsBigBuilder a24(int x);","0","-","-","-","-"
"2125","a25","KotlinDataSomeDefaultsBigBuilder a25(int x);","0","-","-","-","-"
"2126","a26","KotlinDataSomeDefaultsBigBuilder a26(int x);","0","-","-","-","-"
"2127","a27","KotlinDataSomeDefaultsBigBuilder a27(int x);","0","-","-","-","-"
"2128","a28","KotlinDataSomeDefaultsBigBuilder a28(int x);","0","-","-","-","-"
"2129","a29","KotlinDataSomeDefaultsBigBuilder a29(int x);","0","-","-","-","-"
"2130","a30","KotlinDataSomeDefaultsBigBuilder a30(int x);","0","-","-","-","-"
"2131","a31","KotlinDataSomeDefaultsBigBuilder a31(int x);","0","-","-","-","-"
"2132","build","KotlinDataSomeDefaultsBig build();","0","-","-","-","-"
"2133","kotlinSomeDefaultsBig","@Test
  public void kotlinSomeDefaultsBig()","0","-","-","-","-"
"2134","builder","static KotlinDataWithListBuilder builder()","0","-","-","-","-"
"2135","builder","static KotlinDataWithListBuilder builder(KotlinDataWithList kotlinData)","0","-","-","-","-"
"2136","list","KotlinDataWithListBuilder list(List<? extends CharSequence> list);","0","-","-","-","-"
"2137","number","KotlinDataWithListBuilder number(int number);","0","-","-","-","-"
"2138","build","KotlinDataWithList build();","0","-","-","-","-"
"2139","kotlinWildcards","@Test
  public void kotlinWildcards()","0","-","-","-","-"
"2140","numberNames","abstract Map<Integer, String> numberNames();","0","-","-","-","-"
"2141","create","public static Nested create(Map<Integer, String> numberNames)","0","-","-","-","-"
"2142","string","/**
   * @return A string that is a nullable string.
   */
  @Nullable
  public abstract String string();","0","-","-","-","-"
"2143","integer","/**
   * @return An integer that is an integer.
   */
  public abstract int integer();","0","-","-","-","-"
"2144","map","/**
   * @return A non-null map where the keys are strings and the values are longs.
   */
  public abstract Map<String, Long> map();","0","-","-","-","-"
"2145","create","public static PackagelessValueType create(
      @Nullable String string, int integer, Map<String, Long> map)","0","-","-","-","-"
"2146","string","/** Returns a string that is a nullable string. */
  @Nullable
  public abstract String string();","0","-","-","-","-"
"2147","integer","/** Returns an integer that is an integer. */
  public abstract int integer();","0","-","-","-","-"
"2148","map","/** Returns a non-null map where the keys are strings and the values are longs. */
  public abstract Map<String, Long> map();","0","-","-","-","-"
"2149","create","public static SimpleValueType create(
      @Nullable String string, int integer, Map<String, Long> map)","0","-","-","-","-"
"2150","numberNames","abstract Map<Integer, String> numberNames();","0","-","-","-","-"
"2151","create","public static Nested create(Map<Integer, String> numberNames)","0","-","-","-","-"
"2152","getAnnotationMirror","static Optional<AnnotationMirror> getAnnotationMirror(Element element, String annotationName)","0","-","-","-","-"
"2153","toPrettyStringAnnotation","static Optional<AnnotationMirror> toPrettyStringAnnotation(Element element)","0","-","-","-","-"
"2154","Annotations","private Annotations()","0","-","-","-","-"
"2155","ExtensionClassTypeSpecBuilder","private ExtensionClassTypeSpecBuilder(
      Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"2156","extensionClassTypeSpecBuilder","static TypeSpec.Builder extensionClassTypeSpecBuilder(
      Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"2157","extensionClassBuilder","TypeSpec.Builder extensionClassBuilder()","0","-","-","-","-"
"2158","superType","private TypeName superType()","0","-","-","-","-"
"2159","typeVariableNames","private ImmutableList<TypeVariableName> typeVariableNames()","0","-","-","-","-"
"2160","annotatedTypeVariableNames","private ImmutableList<TypeVariableName> annotatedTypeVariableNames()","0","-","-","-","-"
"2161","constructor","private MethodSpec constructor()","0","-","-","-","-"
"2162","generateIdentifier","private static String generateIdentifier(String name, Set<String> existingNames)","0","-","-","-","-"
"2163","annotatedType","/** Translate a","0","-","-","-","-"
"2164","toPrettyStringMethods","/**
   * Returns the","0","-","-","-","-"
"2165","toPrettyStringMethods","/**
   * Returns the","0","-","-","-","-"
"2166","toPrettyStringMethod","/**
   * Returns the","0","-","-","-","-"
"2167","ToPrettyStringMethods","private ToPrettyStringMethods()","0","-","-","-","-"
"2168","ClassNames","private ClassNames()","0","-","-","-","-"
"2169","generateClass","@Override
  public String generateClass(
      Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"2170","toPrettyStringMethodSpecs","private ImmutableList<MethodSpec> toPrettyStringMethodSpecs(Context context)","0","-","-","-","-"
"2171","indentMethod","private static MethodSpec indentMethod()","0","-","-","-","-"
"2172","ToPrettyStringImplementation","private ToPrettyStringImplementation(Context context)","0","-","-","-","-"
"2173","create","static ToPrettyStringImplementation create(Context context)","0","-","-","-","-"
"2174","format","/**
     * Returns","0","-","-","-","-"
"2175","formatMap","private CodeBlock formatMap(TypeMirror type, DelegateMethod delegateMethod)","0","-","-","-","-"
"2176","formatMultimap","private CodeBlock formatMultimap(TypeMirror type, DelegateMethod delegateMethod)","0","-","-","-","-"
"2177","DelegateMethod","DelegateMethod(CodeBlock propertyAccess, CodeBlock indentAccess)","0","-","-","-","-"
"2178","methodName","DelegateMethod methodName(String methodName)","0","-","-","-","-"
"2179","invocation","CodeBlock invocation(TypeMirror parameterType, Supplier<CodeBlock> methodBody)","0","-","-","-","-"
"2180","newDelegateMethodName","private String newDelegateMethodName(TypeMirror type)","0","-","-","-","-"
"2181","createMethod","private MethodSpec createMethod(
          String methodName, TypeMirror type, Supplier<CodeBlock> methodBody)","0","-","-","-","-"
"2182","reindent","private CodeBlock reindent(CharSequence methodName)","0","-","-","-","-"
"2183","forEachLoopMethodBody","private CodeBlock forEachLoopMethodBody(TypeMirror elementType)","0","-","-","-","-"
"2184","forLoopMethodBody","private CodeBlock forLoopMethodBody()","0","-","-","-","-"
"2185","mapMethodBody","private CodeBlock mapMethodBody(TypeMirror keyType, TypeMirror valueType)","0","-","-","-","-"
"2186","multimapMethodBody","private CodeBlock multimapMethodBody(TypeMirror keyType, TypeMirror valueType)","0","-","-","-","-"
"2187","forEachMapEntryMethodBody","private CodeBlock forEachMapEntryMethodBody(
        TypeMirror keyType, TypeMirror valueType, String propertyAccess)","0","-","-","-","-"
"2188","loopMethodBody","private CodeBlock loopMethodBody(
        String openSymbol,
        String closeSymbol,
        CodeBlock loopDeclaration,
        CodeBlock... appendedValues)","0","-","-","-","-"
"2189","process","@Override
  public boolean process(
      Set<? extends TypeElement> annotations, RoundEnvironment roundEnvironment)","0","-","-","-","-"
"2190","validateMethod","private void validateMethod(ExecutableElement method, Elements elements)","0","-","-","-","-"
"2191","validateSingleToPrettyStringMethod","private void validateSingleToPrettyStringMethod(
      Set<ExecutableElement> annotatedMethods, Types types, Elements elements)","0","-","-","-","-"
"2192","formatMethodList","private String formatMethodList(ImmutableList<ExecutableElement> methods)","0","-","-","-","-"
"2193","formatMethodInList","private String formatMethodInList(ExecutableElement method)","0","-","-","-","-"
"2194","getSupportedSourceVersion","@Override
  public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"2195","ErrorReporter","ErrorReporter(ExecutableElement method, Messager messager)","0","-","-","-","-"
"2196","reportError","void reportError(String error)","0","-","-","-","-"
"2197","SerializerFactoryImpl","public SerializerFactoryImpl(
      ImmutableList<SerializerExtension> extensions, ProcessingEnvironment env)","0","-","-","-","-"
"2198","getSerializer","@Override
  public Serializer getSerializer(TypeMirror typeMirror)","0","-","-","-","-"
"2199","newIdentifier","@Override
  public CodeBlock newIdentifier(String prefix)","0","-","-","-","-"
"2200","ImmutableMapSerializerExtension","public ImmutableMapSerializerExtension()","0","-","-","-","-"
"2201","getSerializer","@Override
  public Optional<Serializer> getSerializer(
      TypeMirror typeMirror, SerializerFactory factory, ProcessingEnvironment processingEnv)","0","-","-","-","-"
"2202","ImmutableMapSerializer","ImmutableMapSerializer(
        TypeMirror keyType,
        TypeMirror valueType,
        Serializer keyTypeSerializer,
        Serializer valueTypeSerializer,
        SerializerFactory factory,
        ProcessingEnvironment processingEnv)","0","-","-","-","-"
"2203","proxyFieldType","@Override
    public TypeMirror proxyFieldType()","0","-","-","-","-"
"2204","toProxy","@Override
    public CodeBlock toProxy(CodeBlock expression)","0","-","-","-","-"
"2205","fromProxy","@Override
    public CodeBlock fromProxy(CodeBlock expression)","0","-","-","-","-"
"2206","generateKeyMapFunction","private CodeBlock generateKeyMapFunction(
        TypeMirror originalType,
        TypeMirror transformedType,
        Function<CodeBlock, CodeBlock> proxyMap)","0","-","-","-","-"
"2207","generateValueMapFunction","private CodeBlock generateValueMapFunction(
        TypeMirror originalType,
        TypeMirror transformedType,
        Function<CodeBlock, CodeBlock> proxyMap)","0","-","-","-","-"
"2208","isImmutableMap","private static boolean isImmutableMap(TypeMirror type)","0","-","-","-","-"
"2209","getKeyType","private static TypeMirror getKeyType(TypeMirror type)","0","-","-","-","-"
"2210","getValueType","private static TypeMirror getValueType(TypeMirror type)","0","-","-","-","-"
"2211","ImmutableListSerializerExtension","public ImmutableListSerializerExtension()","0","-","-","-","-"
"2212","getSerializer","@Override
  public Optional<Serializer> getSerializer(
      TypeMirror typeMirror, SerializerFactory factory, ProcessingEnvironment processingEnv)","0","-","-","-","-"
"2213","ImmutableListSerializer","ImmutableListSerializer(
        Serializer containedTypeSerializer,
        SerializerFactory factory,
        ProcessingEnvironment processingEnv)","0","-","-","-","-"
"2214","proxyFieldType","@Override
    public TypeMirror proxyFieldType()","0","-","-","-","-"
"2215","toProxy","@Override
    public CodeBlock toProxy(CodeBlock expression)","0","-","-","-","-"
"2216","fromProxy","@Override
    public CodeBlock fromProxy(CodeBlock expression)","0","-","-","-","-"
"2217","isImmutableList","private static boolean isImmutableList(TypeMirror type)","0","-","-","-","-"
"2218","getContainedType","private static TypeMirror getContainedType(TypeMirror type)","0","-","-","-","-"
"2219","getSerializer","/** Returns a","0","-","-","-","-"
"2220","IdentitySerializer","IdentitySerializer(TypeMirror typeMirror)","0","-","-","-","-"
"2221","proxyFieldType","@Override
    public TypeMirror proxyFieldType()","0","-","-","-","-"
"2222","toProxy","@Override
    public CodeBlock toProxy(CodeBlock expression)","0","-","-","-","-"
"2223","fromProxy","@Override
    public CodeBlock fromProxy(CodeBlock expression)","0","-","-","-","-"
"2224","isIdentity","@Override
    public boolean isIdentity()","0","-","-","-","-"
"2225","IdentitySerializerFactory","private IdentitySerializerFactory()","0","-","-","-","-"
"2226","OptionalSerializerExtension","public OptionalSerializerExtension()","0","-","-","-","-"
"2227","getSerializer","/** Creates a","0","-","-","-","-"
"2228","OptionalSerializer","OptionalSerializer(Serializer containedTypeSerializer)","0","-","-","-","-"
"2229","proxyFieldType","@Override
    public TypeMirror proxyFieldType()","0","-","-","-","-"
"2230","toProxy","@Override
    public CodeBlock toProxy(CodeBlock expression)","0","-","-","-","-"
"2231","fromProxy","@Override
    public CodeBlock fromProxy(CodeBlock expression)","0","-","-","-","-"
"2232","isOptional","/** Checks if the given type is an","0","-","-","-","-"
"2233","getContainedType","/**
   * Gets the given type's first type argument.
   *
   * <p>Returns the","0","-","-","-","-"
"2234","getFactory","/**
   * Returns a","0","-","-","-","-"
"2235","loadExtensions","private static ImmutableList<SerializerExtension> loadExtensions(
      ProcessingEnvironment processingEnv)","0","-","-","-","-"
"2236","SerializerFactoryLoader","private SerializerFactoryLoader()","0","-","-","-","-"
"2237","wrapper","/** Creates a wrapper for lambdas that converts checked exceptions to runtime exceptions. */
  public static <I, O> Function<I, O> wrapper(FunctionWithException<I, O> fe)","0","-","-","-","-"
"2238","apply","O apply(I i) throws Exception;","0","-","-","-","-"
"2239","FunctionWithExceptions","private FunctionWithExceptions()","0","-","-","-","-"
"2240","getSerializer","/**
   * Returns a","0","-","-","-","-"
"2241","proxyFieldType","/** The proxy type the original unserializable type will be mapped to. */
  TypeMirror proxyFieldType();","0","-","-","-","-"
"2242","toProxy","/** Creates an expression that converts the original type to the proxy type. */
  CodeBlock toProxy(CodeBlock expression);","0","-","-","-","-"
"2243","fromProxy","/** Creates an expression that converts the proxy type back to the original type. */
  CodeBlock fromProxy(CodeBlock expression);","0","-","-","-","-"
"2244","isIdentity","/** Returns true if this is an identity","0","-","-","-","-"
"2245","getSerializer","/** Returns a","0","-","-","-","-"
"2246","newIdentifier","/**
   * Returns an identifier beginning with the given prefix and that is distinct from any identifier
   * returned by another call to this method. The returned identifier will contain a","0","-","-","-","-"
"2247","applicable","@Override
  public boolean applicable(Context context)","0","-","-","-","-"
"2248","incrementalType","@Override
  public IncrementalExtensionType incrementalType(ProcessingEnvironment processingEnvironment)","0","-","-","-","-"
"2249","generateClass","@Override
  public String generateClass(
      Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"2250","Generator","Generator(Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"2251","generate","private String generate()","0","-","-","-","-"
"2252","constructor","/** Creates a constructor that calls super with all the AutoValue fields. */
    private MethodSpec constructor()","0","-","-","-","-"
"2253","writeReplace","/**
     * Creates an implementation of writeReplace that delegates serialization to its inner Proxy
     * class.
     */
    private MethodSpec writeReplace()","0","-","-","-","-"
"2254","buildSerializersMap","private ImmutableMap<Equivalence.Wrapper<TypeMirror>, Serializer> buildSerializersMap()","0","-","-","-","-"
"2255","getClassTypeName","/** Adds type parameters to the given","0","-","-","-","-"
"2256","ProxyGenerator","ProxyGenerator(
        TypeName outerClassTypeName,
        ImmutableList<TypeVariableName> typeVariableNames,
        ImmutableList<PropertyMirror> propertyMirrors,
        ImmutableMap<Equivalence.Wrapper<TypeMirror>, Serializer> serializersMap)","0","-","-","-","-"
"2257","generate","private TypeSpec generate()","0","-","-","-","-"
"2258","serialVersionUid","private static FieldSpec serialVersionUid()","0","-","-","-","-"
"2259","properties","/** Maps each AutoValue property to a serializable type. */
    private List<FieldSpec> properties()","0","-","-","-","-"
"2260","constructor","/** Creates a constructor that converts the AutoValue's properties to serializable values. */
    private MethodSpec constructor()","0","-","-","-","-"
"2261","readResolve","/**
     * Creates an implementation of","0","-","-","-","-"
"2262","resolve","/** Maps a serializable type back to its original AutoValue property. */
    private CodeBlock resolve(PropertyMirror propertyMirror)","0","-","-","-","-"
"2263","hasSerializableInterface","private static boolean hasSerializableInterface(Context context)","0","-","-","-","-"
"2264","hasSerializableAutoValueAnnotation","private static boolean hasSerializableAutoValueAnnotation(Context context)","0","-","-","-","-"
"2265","ClassNames","private ClassNames()","0","-","-","-","-"
"2266","PropertyMirror","PropertyMirror(TypeMirror type, String name, String method)","0","-","-","-","-"
"2267","getType","/** Gets the AutoValue property's type. */
  TypeMirror getType()","0","-","-","-","-"
"2268","getName","/** Gets the AutoValue property's name. */
  String getName()","0","-","-","-","-"
"2269","getMethod","/** Gets the AutoValue property accessor method. */
  String getMethod()","0","-","-","-","-"
"2270","process","@Override
  public final boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"2271","getSupportedSourceVersion","@Override
  public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"2272","isAutoValue","private static boolean isAutoValue(Element element)","0","-","-","-","-"
"2273","getAnnotationMirror","static Optional<AnnotationMirror> getAnnotationMirror(Element element, String annotationName)","0","-","-","-","-"
"2274","incrementalType","@Override
  public IncrementalExtensionType incrementalType(ProcessingEnvironment processingEnvironment)","0","-","-","-","-"
"2275","applicable","@Override
  public boolean applicable(Context context)","0","-","-","-","-"
"2276","generateClass","@Override
  public String generateClass(
      Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"2277","memoizedMethods","private static ImmutableSet<ExecutableElement> memoizedMethods(Context context)","0","-","-","-","-"
"2278","Generator","Generator(Context context, String className, String classToExtend, boolean isFinal)","0","-","-","-","-"
"2279","generate","String generate()","0","-","-","-","-"
"2280","superType","private TypeName superType()","0","-","-","-","-"
"2281","typeVariableNames","private ImmutableList<TypeVariableName> typeVariableNames()","0","-","-","-","-"
"2282","annotatedTypeVariableNames","private ImmutableList<TypeVariableName> annotatedTypeVariableNames()","0","-","-","-","-"
"2283","constructor","private MethodSpec constructor()","0","-","-","-","-"
"2284","generateIdentifier","private static String generateIdentifier(String name, Set<String> existingNames)","0","-","-","-","-"
"2285","isHashCodeMemoized","private boolean isHashCodeMemoized()","0","-","-","-","-"
"2286","isEqualsFinal","private boolean isEqualsFinal()","0","-","-","-","-"
"2287","equalsWithHashCodeCheck","private MethodSpec equalsWithHashCodeCheck()","0","-","-","-","-"
"2288","MethodOverrider","MethodOverrider(ExecutableElement method)","0","-","-","-","-"
"2289","fields","/** The fields that should be added to the subclass. */
      Iterable<FieldSpec> fields()","0","-","-","-","-"
"2290","method","/** The overriding method that should be added to the subclass. */
      MethodSpec method()","0","-","-","-","-"
"2291","validate","private void validate()","0","-","-","-","-"
"2292","checkIllegalModifier","private void checkIllegalModifier(Modifier modifier)","0","-","-","-","-"
"2293","printMessage","@FormatMethod
      private void printMessage(Kind kind, String format, Object... args)","0","-","-","-","-"
"2294","overridesObjectMethod","private boolean overridesObjectMethod(String methodName)","0","-","-","-","-"
"2295","objectMethod","private ExecutableElement objectMethod(String methodName)","0","-","-","-","-"
"2296","pullDownMethodAnnotation","private boolean pullDownMethodAnnotation(AnnotationMirror annotation)","0","-","-","-","-"
"2297","buildCacheField","/**
       * Builds a","0","-","-","-","-"
"2298","strategy","InitializationStrategy strategy()","0","-","-","-","-"
"2299","additionalFields","abstract Iterable<FieldSpec> additionalFields();","0","-","-","-","-"
"2300","checkMemoized","abstract CodeBlock checkMemoized();","0","-","-","-","-"
"2301","setMemoized","abstract CodeBlock setMemoized();","0","-","-","-","-"
"2302","additionalFields","@Override
        Iterable<FieldSpec> additionalFields()","0","-","-","-","-"
"2303","checkMemoized","@Override
        CodeBlock checkMemoized()","0","-","-","-","-"
"2304","setMemoized","@Override
        CodeBlock setMemoized()","0","-","-","-","-"
"2305","additionalFields","@Override
        Iterable<FieldSpec> additionalFields()","0","-","-","-","-"
"2306","checkMemoized","@Override
        CodeBlock checkMemoized()","0","-","-","-","-"
"2307","setMemoized","@Override
        CodeBlock setMemoized()","0","-","-","-","-"
"2308","getLazyInitAnnotation","/** Returns the errorprone","0","-","-","-","-"
"2309","containsNullable","/** True if one of the given annotations is","0","-","-","-","-"
"2310","annotatedType","/** Translate a","0","-","-","-","-"
"2311","processingEnvironment","/**
     * Returns the processing environment of this generation cycle. This can be used, among other
     * things, to produce compilation warnings or errors, using","0","-","-","-","-"
"2312","packageName","/** Returns the package name of the classes to be generated. */
    String packageName();","0","-","-","-","-"
"2313","autoValueClass","/**
     * Returns the annotated class that this generation cycle is based on.
     *
     * <p>Given","0","-","-","-","-"
"2314","finalAutoValueClassName","/**
     * The fully-qualified name of the last class in the","0","-","-","-","-"
"2315","properties","/**
     * Returns the ordered collection of properties to be generated by AutoValue. Each key is a
     * property name, and the corresponding value is the getter method for that property. For
     * example, if property","0","-","-","-","-"
"2316","propertyTypes","/**
     * Returns the properties to be generated by AutoValue, with their types. Each key is a property
     * name, and the corresponding value is the type of that property. The order of the map entries
     * is the same as the order of the","0","-","-","-","-"
"2317","abstractMethods","/**
     * Returns the complete set of abstract methods defined in or inherited by the
     *","0","-","-","-","-"
"2318","builderAbstractMethods","/**
     * Returns the complete set of abstract methods defined in or inherited by the","0","-","-","-","-"
"2319","classAnnotationsToCopy","/**
     * Returns the complete list of annotations defined on the","0","-","-","-","-"
"2320","methodAnnotationsToCopy","/**
     * Returns the complete list of annotations defined on the","0","-","-","-","-"
"2321","builder","/**
     * Returns a representation of the","0","-","-","-","-"
"2322","builderType","/**
     * Returns the","0","-","-","-","-"
"2323","toBuilderMethods","/**
     * Returns abstract no-argument methods in the","0","-","-","-","-"
"2324","builderMethods","/**
     * Returns static no-argument methods in the","0","-","-","-","-"
"2325","buildMethod","/**
     * Returns the method","0","-","-","-","-"
"2326","autoBuildMethod","/**
     * Returns the abstract build method. If the","0","-","-","-","-"
"2327","setters","/**
     * Returns a map from property names to the corresponding setters. A property may have more than
     * one setter. For example, an","0","-","-","-","-"
"2328","propertyBuilders","/**
     * Returns a map from property names to property builders. For example, if there is a property
     *","0","-","-","-","-"
"2329","incrementalType","/**
   * Determines the incremental type of this Extension.
   *
   * <p>The","0","-","-","-","-"
"2330","getSupportedOptions","/**
   * Analogous to","0","-","-","-","-"
"2331","applicable","/**
   * Determines whether this Extension applies to the given context. If an Extension returns","0","-","-","-","-"
"2332","mustBeFinal","/**
   * Denotes that the class generated by this Extension must be the final class in the inheritance
   * hierarchy. Only one Extension may be the final class, so this should be used sparingly.
   *
   * @param context the Context of the code generation for this class.
   */
  public boolean mustBeFinal(Context context)","0","-","-","-","-"
"2333","consumeProperties","/**
   * Returns a possibly empty set of property names that this Extension intends to implement. This
   * will prevent AutoValue from generating an implementation, and remove the supplied properties
   * from builders, constructors,","0","-","-","-","-"
"2334","consumeMethods","/**
   * Returns a possibly empty set of abstract methods that this Extension intends to implement. This
   * will prevent AutoValue from generating an implementation, in cases where it would have, and it
   * will also avoid complaints about abstract methods that AutoValue doesn't expect. The default
   * set returned by this method is empty.
   *
   * <p>Each returned method must be one of the abstract methods in","0","-","-","-","-"
"2335","consumeBuilderMethods","/**
   * Returns a possibly empty set of abstract methods that this Extension intends to implement. This
   * will prevent AutoValue from generating an implementation, in cases where it would have, and it
   * will also avoid complaints about abstract methods that AutoValue doesn't expect. The default
   * set returned by this method is empty.
   *
   * <p>Each returned method must be one of the abstract methods in","0","-","-","-","-"
"2336","generateClass","/**
   * Returns the generated source code of the class named","0","-","-","-","-"
"2337","GwtSerialization","GwtSerialization(
      GwtCompatibility gwtCompatibility, ProcessingEnvironment processingEnv, TypeElement type)","0","-","-","-","-"
"2338","shouldWriteGwtSerializer","private boolean shouldWriteGwtSerializer()","0","-","-","-","-"
"2339","maybeWriteGwtSerializer","/**
   * Writes the GWT serializer for the given type, if appropriate. An","0","-","-","-","-"
"2340","Property","Property(GetterProperty property)","0","-","-","-","-"
"2341","toString","@Override
    public String toString()","0","-","-","-","-"
"2342","getGetter","public String getGetter()","0","-","-","-","-"
"2343","getType","public String getType()","0","-","-","-","-"
"2344","getName","public String getName()","0","-","-","-","-"
"2345","getGwtType","/**
     * Returns the suffix in serializer method names for values of the given type. For example, if
     * the type is ""int"" then the returned value will be ""Int"" because the serializer methods are
     * called readInt and writeInt. There are methods for all primitive types and String; every
     * other type uses readObject and writeObject.
     */
    public String getGwtType()","0","-","-","-","-"
"2346","getGwtCast","/**
     * Returns a string to be inserted before the call to the readFoo() call so that the expression
     * can be assigned to the given type. For primitive types and String, the readInt() etc methods
     * already return the right type so the string is empty. For other types, the string is a cast
     * like ""(Foo) "".
     */
    public String getGwtCast()","0","-","-","-","-"
"2347","isCastingUnchecked","public boolean isCastingUnchecked()","0","-","-","-","-"
"2348","parsedTemplate","@Override
    Template parsedTemplate()","0","-","-","-","-"
"2349","writeSourceFile","private void writeSourceFile(String className, String text, TypeElement originatingType)","0","-","-","-","-"
"2350","computeClassHash","private String computeClassHash(Iterable<AutoValueishProcessor.Property> props, String pkg)","0","-","-","-","-"
"2351","Nullables","private Nullables(Optional<AnnotationMirror> nullableTypeAnnotation)","0","-","-","-","-"
"2352","fromMethods","/**
   * Make an instance where the default","0","-","-","-","-"
"2353","nullableTypeAnnotations","/**
   * Returns a list that is either empty or contains a single element that is an appropriate
   *","0","-","-","-","-"
"2354","defaultNullableTypeAnnotation","private static Optional<AnnotationMirror> defaultNullableTypeAnnotation(
      /* @Nullable */ ProcessingEnvironment processingEnv)","0","-","-","-","-"
"2355","annotationMirrorOf","private static AnnotationMirror annotationMirrorOf(DeclaredType annotationType)","0","-","-","-","-"
"2356","getAnnotationType","@Override
      public DeclaredType getAnnotationType()","0","-","-","-","-"
"2357","getElementValues","@Override
      public ImmutableMap<? extends ExecutableElement, ? extends AnnotationValue>
          getElementValues()","0","-","-","-","-"
"2358","nullableIn","private static Optional<AnnotationMirror> nullableIn(TypeMirror type)","0","-","-","-","-"
"2359","nullableIn","private static Optional<AnnotationMirror> nullableIn(
      List<? extends AnnotationMirror> annotations)","0","-","-","-","-"
"2360","NullableFinder","NullableFinder()","0","-","-","-","-"
"2361","visitDeclared","@Override
    public Optional<AnnotationMirror> visitDeclared(DeclaredType t, Void unused)","0","-","-","-","-"
"2362","visitTypeVariable","@Override
    public Optional<AnnotationMirror> visitTypeVariable(TypeVariable t, Void unused)","0","-","-","-","-"
"2363","visitArray","@Override
    public Optional<AnnotationMirror> visitArray(ArrayType t, Void unused)","0","-","-","-","-"
"2364","visitWildcard","@Override
    public Optional<AnnotationMirror> visitWildcard(WildcardType t, Void unused)","0","-","-","-","-"
"2365","visitIntersection","@Override
    public Optional<AnnotationMirror> visitIntersection(IntersectionType t, Void unused)","0","-","-","-","-"
"2366","visitAll","private Optional<AnnotationMirror> visitAll(List<? extends TypeMirror> types)","0","-","-","-","-"
"2367","getSupportedSourceVersion","@Override
  public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"2368","process","@Override
  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"2369","validate","private void validate(Element annotatedType, String errorMessage)","0","-","-","-","-"
"2370","parsedTemplate","abstract Template parsedTemplate();","0","-","-","-","-"
"2371","TemplateVars","TemplateVars()","0","-","-","-","-"
"2372","getFields","private static ImmutableList<Field> getFields(Class<?> c)","0","-","-","-","-"
"2373","addFields","private static void addFields(
      ImmutableList.Builder<Field> fieldsBuilder, Field[] declaredFields)","0","-","-","-","-"
"2374","toText","/**
   * Returns the result of substituting the variables defined by the fields of this class (a
   * concrete subclass of TemplateVars) into the template returned by","0","-","-","-","-"
"2375","toVars","private ImmutableMap<String, Object> toVars()","0","-","-","-","-"
"2376","toString","@Override
  public String toString()","0","-","-","-","-"
"2377","parsedTemplateForResource","static Template parsedTemplateForResource(String resourceName)","0","-","-","-","-"
"2378","readerFromUrl","private static Reader readerFromUrl(String resourceName) throws IOException","0","-","-","-","-"
"2379","readerFromJar","private static Reader readerFromJar(URL resourceUrl) throws URISyntaxException, IOException","0","-","-","-","-"
"2380","readerFromFile","private static Reader readerFromFile(URL resourceUrl) throws IOException, URISyntaxException","0","-","-","-","-"
"2381","readerFromOther","private static Reader readerFromOther(URL resourceUrl) throws IOException","0","-","-","-","-"
"2382","fieldValue","private static Object fieldValue(Field field, Object container)","0","-","-","-","-"
"2383","isStaticFinal","private static boolean isStaticFinal(Field field)","0","-","-","-","-"
"2384","ExtensionContext","ExtensionContext(
      AutoValueProcessor autoValueProcessor,
      ProcessingEnvironment processingEnvironment,
      TypeElement autoValueClass,
      ImmutableMap<String, ExecutableElement> properties,
      ImmutableMap<ExecutableElement, AnnotatedTypeMirror> propertyMethodsAndTypes,
      ImmutableSet<ExecutableElement> abstractMethods,
      ImmutableSet<ExecutableElement> builderAbstractMethods)","0","-","-","-","-"
"2385","setBuilderContext","void setBuilderContext(BuilderContext builderContext)","0","-","-","-","-"
"2386","processingEnvironment","@Override
  public ProcessingEnvironment processingEnvironment()","0","-","-","-","-"
"2387","packageName","@Override
  public String packageName()","0","-","-","-","-"
"2388","autoValueClass","@Override
  public TypeElement autoValueClass()","0","-","-","-","-"
"2389","finalAutoValueClassName","@Override
  public String finalAutoValueClassName()","0","-","-","-","-"
"2390","properties","@Override
  public Map<String, ExecutableElement> properties()","0","-","-","-","-"
"2391","propertyTypes","@Override
  public Map<String, TypeMirror> propertyTypes()","0","-","-","-","-"
"2392","abstractMethods","@Override
  public Set<ExecutableElement> abstractMethods()","0","-","-","-","-"
"2393","builderAbstractMethods","@Override
  public Set<ExecutableElement> builderAbstractMethods()","0","-","-","-","-"
"2394","classAnnotationsToCopy","@Override
  public List<AnnotationMirror> classAnnotationsToCopy(TypeElement classToCopyFrom)","0","-","-","-","-"
"2395","methodAnnotationsToCopy","@Override
  public List<AnnotationMirror> methodAnnotationsToCopy(ExecutableElement method)","0","-","-","-","-"
"2396","builder","@Override
  public Optional<BuilderContext> builder()","0","-","-","-","-"
"2397","MethodSignature","private MethodSignature(ExecutableType originalMethod, ExecutableType rewrittenMethod)","0","-","-","-","-"
"2398","parameterTypes","ImmutableList<AnnotatedTypeMirror> parameterTypes()","0","-","-","-","-"
"2399","returnType","AnnotatedTypeMirror returnType()","0","-","-","-","-"
"2400","asMemberOf","static MethodSignature asMemberOf(Types typeUtils, DeclaredType in, ExecutableElement method)","0","-","-","-","-"
"2401","asMemberOf","static MethodSignature asMemberOf(Types typeUtils, TypeElement in, ExecutableElement method)","0","-","-","-","-"
"2402","BuilderSpec","BuilderSpec(
      TypeElement autoValueClass,
      ProcessingEnvironment processingEnv,
      ErrorReporter errorReporter)","0","-","-","-","-"
"2403","getBuilder","/**
   * Determines if the","0","-","-","-","-"
"2404","findBuilderError","/** Finds why this","0","-","-","-","-"
"2405","Builder","Builder(TypeElement builderTypeElement)","0","-","-","-","-"
"2406","builderType","@Override
    public TypeElement builderType()","0","-","-","-","-"
"2407","builderMethods","@Override
    public Set<ExecutableElement> builderMethods()","0","-","-","-","-"
"2408","buildMethod","@Override
    public Optional<ExecutableElement> buildMethod()","0","-","-","-","-"
"2409","autoBuildMethod","@Override
    public ExecutableElement autoBuildMethod()","0","-","-","-","-"
"2410","setters","@Override
    public Map<String, Set<ExecutableElement>> setters()","0","-","-","-","-"
"2411","propertyBuilders","@Override
    public Map<String, ExecutableElement> propertyBuilders()","0","-","-","-","-"
"2412","erasedTypeIs","private boolean erasedTypeIs(TypeMirror type, TypeElement baseType)","0","-","-","-","-"
"2413","toBuilderMethods","@Override
    public Set<ExecutableElement> toBuilderMethods()","0","-","-","-","-"
"2414","builderAbstractMethods","ImmutableSet<ExecutableElement> builderAbstractMethods()","0","-","-","-","-"
"2415","toBuilderMethods","/**
     * Finds any methods in the set that return the builder type. If the builder has type parameters
     *","0","-","-","-","-"
"2416","defineVarsForAutoValue","void defineVarsForAutoValue(
        AutoValueOrBuilderTemplateVars vars,
        ImmutableBiMap<ExecutableElement, String> getterToPropertyName,
        Nullables nullables,
        ImmutableSet<ExecutableElement> consumedBuilderAbstractMethods)","0","-","-","-","-"
"2417","defineVars","void defineVars(AutoValueOrBuilderTemplateVars vars, BuilderMethodClassifier<?> classifier)","0","-","-","-","-"
"2418","PropertyGetter","/**
     * Makes a new","0","-","-","-","-"
"2419","getName","public String getName()","0","-","-","-","-"
"2420","getAccess","public String getAccess()","0","-","-","-","-"
"2421","getType","public String getType()","0","-","-","-","-"
"2422","getOptional","public Optionalish getOptional()","0","-","-","-","-"
"2423","Copier","private Copier(Function<String, String> copy, boolean acceptsNull)","0","-","-","-","-"
"2424","acceptingNull","static Copier acceptingNull(Function<String, String> copy)","0","-","-","-","-"
"2425","notAcceptingNull","static Copier notAcceptingNull(Function<String, String> copy)","0","-","-","-","-"
"2426","PropertySetter","PropertySetter(ExecutableElement setter, AnnotatedTypeMirror parameterType, Copier copier)","0","-","-","-","-"
"2427","getSetter","ExecutableElement getSetter()","0","-","-","-","-"
"2428","parameterTypeString","private static String parameterTypeString(
        ExecutableElement setter, AnnotatedTypeMirror parameterType)","0","-","-","-","-"
"2429","getAccess","public String getAccess()","0","-","-","-","-"
"2430","getName","public String getName()","0","-","-","-","-"
"2431","getParameterType","public String getParameterType()","0","-","-","-","-"
"2432","getPrimitiveParameter","public boolean getPrimitiveParameter()","0","-","-","-","-"
"2433","getNullableAnnotation","public String getNullableAnnotation()","0","-","-","-","-"
"2434","copy","public String copy(Property property)","0","-","-","-","-"
"2435","builderFrom","/**
   * Returns a representation of the given","0","-","-","-","-"
"2436","sameTypeParameters","private static boolean sameTypeParameters(TypeElement a, TypeElement b)","0","-","-","-","-"
"2437","sameTypeParameters","static boolean sameTypeParameters(
      List<? extends TypeParameterElement> aParams, List<? extends TypeParameterElement> bParams)","0","-","-","-","-"
"2438","abstractMethods","/**
   * Returns a set of all abstract methods in the given TypeElement or inherited from ancestors. If
   * any of the abstract methods has a return type or parameter type that is not currently defined
   * then this method will throw an exception that will cause us to defer processing of the current
   * class until a later annotation-processing round.
   */
  static ImmutableSet<ExecutableElement> abstractMethods(
      TypeElement typeElement, ProcessingEnvironment processingEnv)","0","-","-","-","-"
"2439","typeParamsString","private String typeParamsString()","0","-","-","-","-"
"2440","parsedTemplate","@Override
  Template parsedTemplate()","0","-","-","-","-"
"2441","BuilderMethodClassifier","BuilderMethodClassifier(
      ErrorReporter errorReporter,
      ProcessingEnvironment processingEnv,
      TypeMirror builtType,
      TypeElement builderType,
      ImmutableMap<String, AnnotatedTypeMirror> rewrittenPropertyTypes,
      ImmutableSet<String> propertiesWithDefaults,
      Nullables nullables)","0","-","-","-","-"
"2442","propertyNameToSetters","/**
   * Returns a multimap from the name of a property to the methods that set it. If the property is
   * defined by an abstract method in the","0","-","-","-","-"
"2443","propertyNameToPropertyBuilder","Map<String, PropertyBuilder> propertyNameToPropertyBuilder()","0","-","-","-","-"
"2444","builderGetters","/**
   * Returns the set of properties that have getters in the builder. If a property is defined by an
   * abstract method in the","0","-","-","-","-"
"2445","buildMethods","/**
   * Returns the methods that were identified as","0","-","-","-","-"
"2446","classifyMethods","/** Classifies the given methods and sets the state of this object based on what is found. */
  boolean classifyMethods(Iterable<ExecutableElement> methods, boolean autoValueHasToBuilder)","0","-","-","-","-"
"2447","classifyMethod","/** Classifies a method and update the state of this object based on what is found. */
  private void classifyMethod(ExecutableElement method)","0","-","-","-","-"
"2448","classifyMethodNoArgs","/**
   * Classifies a method given that it has no arguments. Currently a method with no arguments can be
   * a","0","-","-","-","-"
"2449","classifyGetter","private void classifyGetter(ExecutableElement builderGetter, String propertyName)","0","-","-","-","-"
"2450","classifyMethodOneArg","/**
   * Classifies a method given that it has one argument. A method with one argument can be:
   *
   * <ul>
   *   <li>a setter, meaning that it looks like","0","-","-","-","-"
"2451","classifyPropertyBuilderOneArg","/**
   * Classifies a method given that it has one argument and is a property builder with a parameter,
   * like","0","-","-","-","-"
"2452","getSetterFunction","/**
   * Returns an","0","-","-","-","-"
"2453","getConvertingSetterFunction","/**
   * Returns an","0","-","-","-","-"
"2454","getConvertingSetterFunction","/**
   * Returns an","0","-","-","-","-"
"2455","copyOfMethods","/**
   * Returns","0","-","-","-","-"
"2456","builderMethodReturnType","/**
   * Returns the return type of the given method from the builder. This should be the final type of
   * the method when any bound type variables are substituted. Consider this example:
   *
   * <pre>","0","-","-","-","-"
"2457","prefixWithSet","private static String prefixWithSet(String propertyName)","0","-","-","-","-"
"2458","propertyIsNullable","/**
   * True if the given property is nullable, either because its type has a","0","-","-","-","-"
"2459","propertyElements","/**
   * Returns a map from property names to the corresponding source program elements. For AutoValue,
   * these elements are the abstract getter methods in the","0","-","-","-","-"
"2460","originalPropertyType","/**
   * Returns the property type as it appears on the original source program element. This can be
   * different from the type stored in","0","-","-","-","-"
"2461","propertyString","/**
   * A string identifying the given property element, which is a method for AutoValue or a parameter
   * for AutoBuilder.
   */
  abstract String propertyString(E propertyElement);","0","-","-","-","-"
"2462","propertyForBuilderGetter","/**
   * Returns the name of the property that the given no-arg builder method queries, if any. For
   * example, if your","0","-","-","-","-"
"2463","checkForFailedJavaBean","/**
   * Checks for failed JavaBean usage when a method that looks like a setter doesn't actually match
   * anything, and emits a compiler Note if detected. A frequent source of problems is where the
   * JavaBeans conventions have been followed for most but not all getters. Then AutoValue considers
   * that they haven't been followed at all, so you might have a property called getFoo where you
   * thought it was called just foo, and you might not understand why your setter called setFoo is
   * rejected (it would have to be called setGetFoo).
   *
   * <p>This is not relevant for AutoBuilder, which uses parameter names rather than getters. The
   * parameter names are unambiguously the same as the property names.
   */
  abstract void checkForFailedJavaBean(ExecutableElement rejectedSetter);","0","-","-","-","-"
"2464","autoWhat","/**
   * A string describing what sort of Auto this is,","0","-","-","-","-"
"2465","getterMustMatch","/**
   * A string describing what a builder getter must match: a property method for AutoValue, a
   * parameter for AutoBuilder.
   */
  abstract String getterMustMatch();","0","-","-","-","-"
"2466","fooBuilderMustMatch","/**
   * A string describing what a property builder for property","0","-","-","-","-"
"2467","EclipseHack","private EclipseHack()","0","-","-","-","-"
"2468","getEnclosingType","/**
   * Returns the enclosing type of","0","-","-","-","-"
"2469","AutoValueishProcessor","AutoValueishProcessor(String annotationClassName, boolean appliesToInterfaces)","0","-","-","-","-"
"2470","init","@Override
  public synchronized void init(ProcessingEnvironment processingEnv)","0","-","-","-","-"
"2471","errorReporter","final ErrorReporter errorReporter()","0","-","-","-","-"
"2472","typeUtils","final Types typeUtils()","0","-","-","-","-"
"2473","elementUtils","final Elements elementUtils()","0","-","-","-","-"
"2474","deferredTypeNames","/**
   * Qualified names of","0","-","-","-","-"
"2475","getSupportedSourceVersion","@Override
  public final SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"2476","Property","Property(
        String name,
        String identifier,
        String type,
        AnnotatedTypeMirror annotatedType,
        Optional<String> nullableAnnotation,
        Nullables nullables,
        String getter,
        Optional<String> maybeBuilderInitializer,
        boolean hasDefault)","0","-","-","-","-"
"2477","builderInitializer","/**
     * Returns the appropriate initializer for a builder property. The caller of the","0","-","-","-","-"
"2478","getBuilderFieldType","/**
     * Returns the appropriate type for a builder field that will eventually be assigned to this
     * property. This is the same as the final property type, except that it may have an additional
     *","0","-","-","-","-"
"2479","toString","/**
     * Returns the name of the property as it should be used when declaring identifiers (fields and
     * parameters). If the original getter method was","0","-","-","-","-"
"2480","getName","/**
     * Returns the name of the property as it should be used in strings visible to users. This is
     * usually the same as","0","-","-","-","-"
"2481","getTypeMirror","TypeMirror getTypeMirror()","0","-","-","-","-"
"2482","getType","public String getType()","0","-","-","-","-"
"2483","getKind","public TypeKind getKind()","0","-","-","-","-"
"2484","getOptional","/**
     * Returns an","0","-","-","-","-"
"2485","getBuilderInitializer","/**
     * Returns a string to be used as an initializer for a builder field for this property,
     * including the leading","0","-","-","-","-"
"2486","getNullableAnnotation","/**
     * Returns the string to use as a method annotation to indicate the nullability of this
     * property. It is either the empty string, if the property is not nullable, or an annotation
     * string with a trailing space, such as","0","-","-","-","-"
"2487","isNullable","public boolean isNullable()","0","-","-","-","-"
"2488","getGetter","/**
     * Returns the name of the getter method for this property as defined by the","0","-","-","-","-"
"2489","hasDefault","boolean hasDefault()","0","-","-","-","-"
"2490","GetterProperty","GetterProperty(
        String name,
        String identifier,
        ExecutableElement method,
        AnnotatedTypeMirror annotatedType,
        String typeString,
        ImmutableList<String> fieldAnnotations,
        ImmutableList<String> methodAnnotations,
        Optional<String> nullableAnnotation,
        Nullables nullables)","0","-","-","-","-"
"2491","getFieldAnnotations","/**
     * Returns the annotations (in string form) that should be applied to the property's field
     * declaration.
     */
    public List<String> getFieldAnnotations()","0","-","-","-","-"
"2492","getMethodAnnotations","/**
     * Returns the annotations (in string form) that should be applied to the property's method
     * implementation.
     */
    public List<String> getMethodAnnotations()","0","-","-","-","-"
"2493","getAccess","public String getAccess()","0","-","-","-","-"
"2494","equals","@Override
    public boolean equals(Object obj)","0","-","-","-","-"
"2495","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"2496","addDeferredType","void addDeferredType(TypeElement type, String missingType)","0","-","-","-","-"
"2497","process","@Override
  public final boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"2498","validateType","/**
   * Validations common to all the subclasses. An","0","-","-","-","-"
"2499","processType","/**
   * Analyzes a single","0","-","-","-","-"
"2500","nullableAnnotationForMethod","/**
   * Returns the appropriate","0","-","-","-","-"
"2501","propertySet","/**
   * Returns the ordered set of","0","-","-","-","-"
"2502","defineSharedVarsForType","/** Defines the template variables that are shared by AutoValue, AutoOneOf, and AutoBuilder. */
  final void defineSharedVarsForType(
      TypeElement type,
      ImmutableSet<ExecutableElement> methods,
      Nullables nullables,
      AutoValueishTemplateVars vars)","0","-","-","-","-"
"2503","annotationStrings","/** Returns the spelling to be used in the generated code for the given list of annotations. */
  static ImmutableList<String> annotationStrings(List<? extends AnnotationMirror> annotations)","0","-","-","-","-"
"2504","generatedClassName","/**
   * Returns the name of the generated","0","-","-","-","-"
"2505","isJavaLangObject","private static boolean isJavaLangObject(TypeElement type)","0","-","-","-","-"
"2506","objectMethodToOverride","/**
   * Determines which of the three public non-final methods from","0","-","-","-","-"
"2507","propertyNameToMethodMap","/** Returns a bi-map between property names and the corresponding abstract property methods. */
  final ImmutableBiMap<String, ExecutableElement> propertyNameToMethodMap(
      Set<ExecutableElement> propertyMethods)","0","-","-","-","-"
"2508","gettersAllPrefixed","private static boolean gettersAllPrefixed(Set<ExecutableElement> methods)","0","-","-","-","-"
"2509","nullableAnnotationFor","/**
   * Returns an appropriate annotation spelling to indicate the nullability of an element. If the
   * return value is a non-empty Optional, that indicates that the element is nullable, and the
   * string should be used to annotate it. If the return value is an empty Optional, the element is
   * not nullable. The return value can be","0","-","-","-","-"
"2510","nullableAnnotationIndex","private static OptionalInt nullableAnnotationIndex(List<? extends AnnotationMirror> annotations)","0","-","-","-","-"
"2511","isNullable","private static boolean isNullable(TypeMirror type)","0","-","-","-","-"
"2512","isNullable","private static boolean isNullable(TypeMirror type, int depth)","0","-","-","-","-"
"2513","isNullable","private static boolean isNullable(AnnotationMirror annotation)","0","-","-","-","-"
"2514","prefixedGettersIn","/**
   * Returns the subset of the given zero-arg methods whose names begin with","0","-","-","-","-"
"2515","isPrefixedGetter","static boolean isPrefixedGetter(ExecutableElement method)","0","-","-","-","-"
"2516","nameWithoutPrefix","/**
   * Returns the name of the property defined by the given getter. A getter called","0","-","-","-","-"
"2517","checkModifiersIfNested","/**
   * Checks that, if the given","0","-","-","-","-"
"2518","checkModifiersIfNested","final void checkModifiersIfNested(TypeElement type, TypeElement reportedType, String what)","0","-","-","-","-"
"2519","fixReservedIdentifiers","/**
   * Modifies the values of the given map to avoid reserved words. If we have a getter called","0","-","-","-","-"
"2520","disambiguate","private static String disambiguate(String name, Collection<String> existingNames)","0","-","-","-","-"
"2521","determineObjectMethodsToGenerate","/**
   * Given a list of all methods defined in or inherited by a class, returns a map indicating which
   * of equals, hashCode, and toString should be generated. Each value in the map is the method that
   * will be overridden by the generated method, which might be a method in","0","-","-","-","-"
"2522","equalsParameterType","/**
   * Returns the encoded parameter type of the","0","-","-","-","-"
"2523","abstractMethodsIn","/**
   * Returns the subset of all abstract methods in the given set of methods. A given method
   * signature is only mentioned once, even if it is inherited on more than one path. If any of the
   * abstract methods has a return type or parameter type that is not currently defined then this
   * method will throw an exception that will cause us to defer processing of the current class
   * until a later annotation-processing round.
   */
  static ImmutableSet<ExecutableElement> abstractMethodsIn(Iterable<ExecutableElement> methods)","0","-","-","-","-"
"2524","propertyMethodsIn","/**
   * Returns the subset of property methods in the given set of abstract methods, with their actual
   * return types. A property method has no arguments, is not void, and is not","0","-","-","-","-"
"2525","propertiesCanBeVoid","/** True if void properties are allowed. */
  boolean propertiesCanBeVoid()","0","-","-","-","-"
"2526","checkReturnType","/**
   * Checks that the return type of the given property method is allowed. Currently, this means that
   * it cannot be an array, unless it is a primitive array.
   */
  final void checkReturnType(TypeElement autoValueClass, ExecutableElement getter)","0","-","-","-","-"
"2527","warnAboutPrimitiveArrays","private void warnAboutPrimitiveArrays(TypeElement autoValueClass, ExecutableElement getter)","0","-","-","-","-"
"2528","visitArray","@Override
    public Boolean visitArray(List<? extends AnnotationValue> list, Void p)","0","-","-","-","-"
"2529","getSerialVersionUID","/**
   * Returns a string like","0","-","-","-","-"
"2530","annotationsToCopy","/** Implements the semantics of","0","-","-","-","-"
"2531","isInAutoValuePackage","/**
   * True if the given class name is in the com.google.auto.value package or a subpackage. False if
   * the class name contains","0","-","-","-","-"
"2532","copiedClassAnnotations","ImmutableList<String> copiedClassAnnotations(TypeElement type)","0","-","-","-","-"
"2533","copyAnnotations","/** Implements the semantics of","0","-","-","-","-"
"2534","getExcludedAnnotationTypes","/**
   * Returns the contents of the","0","-","-","-","-"
"2535","getExcludedAnnotationClassNames","/**
   * Returns the contents of the","0","-","-","-","-"
"2536","getAnnotationsMarkedWithInherited","static Set<String> getAnnotationsMarkedWithInherited(Element element)","0","-","-","-","-"
"2537","getAnnotationFqName","/**
   * Returns the fully-qualified name of an annotation-mirror, e.g.
   * ""com.google.auto.value.AutoValue"".
   */
  private static String getAnnotationFqName(AnnotationMirror annotation)","0","-","-","-","-"
"2538","propertyMethodAnnotationMap","ImmutableListMultimap<ExecutableElement, AnnotationMirror> propertyMethodAnnotationMap(
      TypeElement type, ImmutableSet<ExecutableElement> propertyMethods)","0","-","-","-","-"
"2539","propertyMethodAnnotations","ImmutableList<AnnotationMirror> propertyMethodAnnotations(
      TypeElement type, ExecutableElement method)","0","-","-","-","-"
"2540","propertyFieldAnnotationMap","final ImmutableListMultimap<ExecutableElement, AnnotationMirror> propertyFieldAnnotationMap(
      TypeElement type, ImmutableSet<ExecutableElement> propertyMethods)","0","-","-","-","-"
"2541","propertyFieldAnnotations","private ImmutableList<AnnotationMirror> propertyFieldAnnotations(
      TypeElement type, ExecutableElement method)","0","-","-","-","-"
"2542","getReturnTypeAnnotations","private static Set<String> getReturnTypeAnnotations(
      ExecutableElement method, Predicate<TypeElement> typeFilter)","0","-","-","-","-"
"2543","annotationAppliesToFields","private boolean annotationAppliesToFields(TypeElement annotation)","0","-","-","-","-"
"2544","annotationVisibleFrom","private boolean annotationVisibleFrom(AnnotationMirror annotation, Element from)","0","-","-","-","-"
"2545","wildcardTypeParametersString","/**
   * Returns the","0","-","-","-","-"
"2546","getAnnotationMirror","static Optional<AnnotationMirror> getAnnotationMirror(Element element, String annotationName)","0","-","-","-","-"
"2547","hasAnnotationMirror","static boolean hasAnnotationMirror(Element element, String annotationName)","0","-","-","-","-"
"2548","hasVisibleNoArgConstructor","/** True if the type is a class with a non-private no-arg constructor, or is an interface. */
  static boolean hasVisibleNoArgConstructor(TypeElement type)","0","-","-","-","-"
"2549","writeSourceFile","final void writeSourceFile(String className, String text, TypeElement originatingType)","0","-","-","-","-"
"2550","ClassNames","private ClassNames()","0","-","-","-","-"
"2551","JavaScanner","JavaScanner(String s)","0","-","-","-","-"
"2552","string","/**
   * Returns the string being scanned, which is either the original input string or that string plus
   * a newline.
   */
  String string()","0","-","-","-","-"
"2553","tokenEnd","/** Returns the position at which this token ends and the next token begins. */
  int tokenEnd(int start)","0","-","-","-","-"
"2554","spaceEnd","private int spaceEnd(int start)","0","-","-","-","-"
"2555","blockCommentEnd","private int blockCommentEnd(int start)","0","-","-","-","-"
"2556","lineCommentEnd","private int lineCommentEnd(int start)","0","-","-","-","-"
"2557","quoteEnd","private int quoteEnd(int start)","0","-","-","-","-"
"2558","ErrorReporter","ErrorReporter(ProcessingEnvironment processingEnv)","0","-","-","-","-"
"2559","reportNote","/**
   * Issue a compilation note.
   *
   * @param e the element to which it pertains
   * @param format the format string for the text of the note
   * @param args arguments for the format string
   */
  @FormatMethod
  void reportNote(Element e, String format, Object... args)","0","-","-","-","-"
"2560","reportWarning","/**
   * Issue a compilation warning.
   *
   * @param e the element to which it pertains
   * @param format the format string for the text of the warning
   * @param args arguments for the format string
   */
  @FormatMethod
  void reportWarning(Element e, String format, Object... args)","0","-","-","-","-"
"2561","reportError","/**
   * Issue a compilation error. This method does not throw an exception, since we want to continue
   * processing and perhaps report other errors. It is a good idea to introduce a test case in
   * CompilationTest for any new call to reportError(...) to ensure that we continue correctly after
   * an error.
   *
   * @param e the element to which it pertains
   * @param format the format string for the text of the warning
   * @param args arguments for the format string
   */
  @FormatMethod
  void reportError(Element e, String format, Object... args)","0","-","-","-","-"
"2562","abortWithError","/**
   * Issue a compilation error and abandon the processing of this class. This does not prevent the
   * processing of other classes.
   *
   * @param e the element to which it pertains
   * @param format the format string for the text of the error
   * @param args arguments for the format string
   * @return This method does not return, but is declared with an exception return type so you can
   *     write","0","-","-","-","-"
"2563","errorCount","/** The number of errors that have been output by calls to","0","-","-","-","-"
"2564","abortIfAnyError","/** Abandon the processing of this class if any errors have been output. */
  void abortIfAnyError()","0","-","-","-","-"
"2565","AutoValueProcessor","public AutoValueProcessor()","0","-","-","-","-"
"2566","AutoValueProcessor","@VisibleForTesting
  AutoValueProcessor(ClassLoader loaderForExtensions)","0","-","-","-","-"
"2567","AutoValueProcessor","@VisibleForTesting
  public AutoValueProcessor(Iterable<? extends AutoValueExtension> testExtensions)","0","-","-","-","-"
"2568","AutoValueProcessor","private AutoValueProcessor(
      Iterable<? extends AutoValueExtension> testExtensions, ClassLoader loaderForExtensions)","0","-","-","-","-"
"2569","extensionsFromLoader","@VisibleForTesting
  static ImmutableList<AutoValueExtension> extensionsFromLoader(ClassLoader loader)","0","-","-","-","-"
"2570","init","@Override
  public synchronized void init(ProcessingEnvironment processingEnv)","0","-","-","-","-"
"2571","getSupportedOptions","@Override
  public ImmutableSet<String> getSupportedOptions()","0","-","-","-","-"
"2572","optionsFor","private static ImmutableSet<String> optionsFor(
      AutoValueExtension.IncrementalExtensionType incrementalType)","0","-","-","-","-"
"2573","generatedSubclassName","static String generatedSubclassName(TypeElement type, int depth)","0","-","-","-","-"
"2574","processType","@Override
  void processType(TypeElement type)","0","-","-","-","-"
"2575","writeExtensions","private int writeExtensions(
      TypeElement type,
      ExtensionContext context,
      ImmutableList<AutoValueExtension> applicableExtensions)","0","-","-","-","-"
"2576","applicableExtensions","private ImmutableList<AutoValueExtension> applicableExtensions(
      TypeElement type, ExtensionContext context)","0","-","-","-","-"
"2577","methodsConsumedByExtensions","private ImmutableSet<ExecutableElement> methodsConsumedByExtensions(
      TypeElement type,
      ImmutableList<AutoValueExtension> applicableExtensions,
      ExtensionContext context,
      ImmutableSet<ExecutableElement> abstractMethods,
      ImmutableMap<String, ExecutableElement> properties)","0","-","-","-","-"
"2578","builderMethodsConsumedByExtensions","private ImmutableSet<ExecutableElement> builderMethodsConsumedByExtensions(
      TypeElement type,
      ImmutableList<AutoValueExtension> applicableExtensions,
      ExtensionContext context,
      ImmutableSet<ExecutableElement> builderAbstractMethods)","0","-","-","-","-"
"2579","validateMethods","private void validateMethods(
      TypeElement type,
      ImmutableSet<ExecutableElement> abstractMethods,
      ImmutableSet<ExecutableElement> toBuilderMethods,
      ImmutableSet<ExecutableElement> propertyMethods,
      boolean extensionsPresent)","0","-","-","-","-"
"2580","extensionName","private String extensionName(AutoValueExtension extension)","0","-","-","-","-"
"2581","defineVarsForType","private void defineVarsForType(
      TypeElement type,
      AutoValueTemplateVars vars,
      ImmutableSet<ExecutableElement> toBuilderMethods,
      ImmutableMap<ExecutableElement, AnnotatedTypeMirror> propertyMethodsAndTypes,
      Optional<BuilderSpec.Builder> maybeBuilder,
      Nullables nullables,
      ImmutableSet<ExecutableElement> consumedBuilderAbstractMethods)","0","-","-","-","-"
"2582","nullableAnnotationForMethod","@Override
  Optional<String> nullableAnnotationForMethod(ExecutableElement propertyMethod)","0","-","-","-","-"
"2583","prefixedGettersIn","static ImmutableSet<ExecutableElement> prefixedGettersIn(Iterable<ExecutableElement> methods)","0","-","-","-","-"
"2584","ancestorIsAutoValue","private boolean ancestorIsAutoValue(TypeElement type)","0","-","-","-","-"
"2585","implementsAnnotation","private boolean implementsAnnotation(TypeElement type)","0","-","-","-","-"
"2586","getTypeMirror","private TypeMirror getTypeMirror(Class<?> c)","0","-","-","-","-"
"2587","immutableSetDifference","private static <E> ImmutableSet<E> immutableSetDifference(ImmutableSet<E> a, ImmutableSet<E> b)","0","-","-","-","-"
"2588","AutoAnnotationProcessor","public AutoAnnotationProcessor()","0","-","-","-","-"
"2589","getSupportedSourceVersion","@Override
  public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"2590","getSupportedOptions","@Override
  public ImmutableSet<String> getSupportedOptions()","0","-","-","-","-"
"2591","init","@Override
  public synchronized void init(ProcessingEnvironment processingEnv)","0","-","-","-","-"
"2592","reportError","/**
   * Issue a compilation error. This method does not throw an exception, since we want to continue
   * processing and perhaps report other errors.
   */
  @FormatMethod
  private void reportError(Element e, String msg, Object... msgParams)","0","-","-","-","-"
"2593","abortWithError","/**
   * Issue a compilation error and return an exception that, when thrown, will cause the processing
   * of this class to be abandoned. This does not prevent the processing of other classes.
   */
  @FormatMethod
  private AbortProcessingException abortWithError(Element e, String msg, Object... msgParams)","0","-","-","-","-"
"2594","process","@Override
  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"2595","process","private void process(RoundEnvironment roundEnv)","0","-","-","-","-"
"2596","processMethod","private void processMethod(ExecutableElement method)","0","-","-","-","-"
"2597","getGeneratedTypeName","private String getGeneratedTypeName()","0","-","-","-","-"
"2598","equalsParameterType","private String equalsParameterType()","0","-","-","-","-"
"2599","invariableHash","/**
   * Returns the hashCode of the given AnnotationValue, if that hashCode is guaranteed to be always
   * the same. The hashCode of a String or primitive type never changes. The hashCode of a Class or
   * an enum constant does potentially change in different runs of the same program. The hashCode of
   * an array doesn't change if the hashCodes of its elements don't. Although we could have a
   * similar rule for nested annotation values, we currently don't.
   */
  private static Optional<Integer> invariableHash(AnnotationValue annotationValue)","0","-","-","-","-"
"2600","invariableHash","private static Optional<Integer> invariableHash(
      List<? extends AnnotationValue> annotationValues)","0","-","-","-","-"
"2601","invariableHashes","/**
   * Returns a map from the names of members with invariable hashCodes to the values of those
   * hashCodes.
   */
  private static ImmutableMap<String, Integer> invariableHashes(
      ImmutableMap<String, Member> members, ImmutableSet<String> parameters)","0","-","-","-","-"
"2602","methodsAreOverloaded","private boolean methodsAreOverloaded(List<ExecutableElement> methods)","0","-","-","-","-"
"2603","generatedClassName","private String generatedClassName(ExecutableElement method)","0","-","-","-","-"
"2604","getAnnotationReturnType","private TypeElement getAnnotationReturnType(ExecutableElement method)","0","-","-","-","-"
"2605","getMemberMethods","private ImmutableMap<String, ExecutableElement> getMemberMethods(TypeElement annotationElement)","0","-","-","-","-"
"2606","getMembers","private ImmutableMap<String, Member> getMembers(
      Element context, ImmutableMap<String, ExecutableElement> memberMethods)","0","-","-","-","-"
"2607","getDefaultValues","private ImmutableMap<String, AnnotationValue> getDefaultValues(TypeElement annotationElement)","0","-","-","-","-"
"2608","getParameters","private ImmutableMap<String, Parameter> getParameters(
      TypeElement annotationElement, ExecutableElement method, Map<String, Member> members)","0","-","-","-","-"
"2609","validateParameters","private void validateParameters(
      TypeElement annotationElement,
      ExecutableElement method,
      ImmutableMap<String, Member> members,
      ImmutableMap<String, Parameter> parameters,
      ImmutableMap<String, AnnotationValue> defaultValues)","0","-","-","-","-"
"2610","compatibleTypes","/**
   * Returns true if","0","-","-","-","-"
"2611","wrapperTypesUsedInCollections","/**
   * Returns the wrapper types (","0","-","-","-","-"
"2612","getTypeMirror","private TypeMirror getTypeMirror(Class<?> c)","0","-","-","-","-"
"2613","isGwtCompatible","private static boolean isGwtCompatible(TypeElement annotationElement)","0","-","-","-","-"
"2614","fullyQualifiedName","private static String fullyQualifiedName(String pkg, String cls)","0","-","-","-","-"
"2615","computeSerialVersionUid","/**
   * We compute a","0","-","-","-","-"
"2616","writeSourceFile","private void writeSourceFile(String className, String text, TypeElement originatingType)","0","-","-","-","-"
"2617","Member","Member(ProcessingEnvironment processingEnv, Element context, ExecutableElement method)","0","-","-","-","-"
"2618","toString","@Override
    public String toString()","0","-","-","-","-"
"2619","getType","public String getType()","0","-","-","-","-"
"2620","getComponentType","public String getComponentType()","0","-","-","-","-"
"2621","getTypeMirror","public TypeMirror getTypeMirror()","0","-","-","-","-"
"2622","getKind","public TypeKind getKind()","0","-","-","-","-"
"2623","getNameHash","public int getNameHash()","0","-","-","-","-"
"2624","isArrayOfClassWithBounds","public boolean isArrayOfClassWithBounds()","0","-","-","-","-"
"2625","getDefaultValue","public String getDefaultValue()","0","-","-","-","-"
"2626","Parameter","Parameter(TypeMirror type)","0","-","-","-","-"
"2627","getType","public String getType()","0","-","-","-","-"
"2628","getKind","public TypeKind getKind()","0","-","-","-","-"
"2629","fixup","static String fixup(String s)","0","-","-","-","-"
"2630","Reformatter","private Reformatter()","0","-","-","-","-"
"2631","parsedTemplate","@Override
  Template parsedTemplate()","0","-","-","-","-"
"2632","parsedTemplate","@Override
  Template parsedTemplate()","0","-","-","-","-"
"2633","BuilderMethodClassifierForAutoValue","private BuilderMethodClassifierForAutoValue(
      ErrorReporter errorReporter,
      ProcessingEnvironment processingEnv,
      TypeMirror builtType,
      TypeElement builderType,
      ImmutableBiMap<ExecutableElement, String> getterToPropertyName,
      ImmutableMap<String, AnnotatedTypeMirror> rewrittenPropertyTypes,
      Nullables nullables)","0","-","-","-","-"
"2634","classify","/**
   * Classifies the given methods from a builder type and its ancestors.
   *
   * @param methods the abstract methods in","0","-","-","-","-"
"2635","originalPropertyType","@Override
  TypeMirror originalPropertyType(ExecutableElement propertyElement)","0","-","-","-","-"
"2636","propertyString","@Override
  String propertyString(ExecutableElement propertyElement)","0","-","-","-","-"
"2637","propertyElements","@Override
  ImmutableBiMap<String, ExecutableElement> propertyElements()","0","-","-","-","-"
"2638","propertyForBuilderGetter","@Override
  Optional<String> propertyForBuilderGetter(ExecutableElement method)","0","-","-","-","-"
"2639","checkForFailedJavaBean","@Override
  void checkForFailedJavaBean(ExecutableElement rejectedSetter)","0","-","-","-","-"
"2640","autoWhat","@Override
  String autoWhat()","0","-","-","-","-"
"2641","getterMustMatch","@Override
  String getterMustMatch()","0","-","-","-","-"
"2642","fooBuilderMustMatch","@Override
  String fooBuilderMustMatch()","0","-","-","-","-"
"2643","KotlinMetadata","KotlinMetadata(ErrorReporter errorReporter)","0","-","-","-","-"
"2644","kotlinConstructorsIn","/**
   * Use Kotlin reflection to build","0","-","-","-","-"
"2645","kotlinConstructorsFromReflection","private static ImmutableList<Executable> kotlinConstructorsFromReflection(
      AnnotationMirror metadata, TypeElement ofClass) throws ReflectiveOperationException","0","-","-","-","-"
"2646","parameterNames","private static ImmutableSet<String> parameterNames(ExecutableElement executableElement)","0","-","-","-","-"
"2647","kotlinMetadataAnnotation","Optional<AnnotationMirror> kotlinMetadataAnnotation(Element element)","0","-","-","-","-"
"2648","intArrayValue","private static int[] intArrayValue(AnnotationValue value)","0","-","-","-","-"
"2649","stringArrayValue","private static String[] stringArrayValue(AnnotationValue value)","0","-","-","-","-"
"2650","KotlinClassHeader","KotlinClassHeader(
        Integer k, int[] mv, String[] d1, String[] d2, String xs, String pn, Integer xi)
        throws ReflectiveOperationException","0","-","-","-","-"
"2651","readLenient","static Class readLenient(KotlinClassHeader kotlinClassHeader)
        throws ReflectiveOperationException","0","-","-","-","-"
"2652","Class","Class(Object /* KotlinClassMetadata.Class */ wrapped)","0","-","-","-","-"
"2653","getKmClass","KmClass getKmClass() throws ReflectiveOperationException","0","-","-","-","-"
"2654","KmClass","KmClass(Object wrapped)","0","-","-","-","-"
"2655","getConstructors","List<KmConstructor> getConstructors() throws ReflectiveOperationException","0","-","-","-","-"
"2656","KmConstructor","KmConstructor(Object wrapped)","0","-","-","-","-"
"2657","getValueParameters","List<KmValueParameter> getValueParameters() throws ReflectiveOperationException","0","-","-","-","-"
"2658","KmValueParameter","KmValueParameter(Object wrapped)","0","-","-","-","-"
"2659","getName","String getName() throws ReflectiveOperationException","0","-","-","-","-"
"2660","Attributes","private Attributes()","0","-","-","-","-"
"2661","getDeclaresDefaultValue","static boolean getDeclaresDefaultValue(KmValueParameter kmValueParameter)
        throws ReflectiveOperationException","0","-","-","-","-"
"2662","AutoOneOfProcessor","public AutoOneOfProcessor()","0","-","-","-","-"
"2663","propertiesCanBeVoid","@Override
  boolean propertiesCanBeVoid()","0","-","-","-","-"
"2664","getSupportedOptions","@Override
  public ImmutableSet<String> getSupportedOptions()","0","-","-","-","-"
"2665","processType","@Override
  void processType(TypeElement autoOneOfType)","0","-","-","-","-"
"2666","mirrorForKindType","private DeclaredType mirrorForKindType(TypeElement autoOneOfType)","0","-","-","-","-"
"2667","propertyToKindMap","private ImmutableMap<String, String> propertyToKindMap(
      DeclaredType kindMirror, ImmutableSet<String> propertyNames)","0","-","-","-","-"
"2668","transformName","private String transformName(String s)","0","-","-","-","-"
"2669","findKindGetterOrAbort","private ExecutableElement findKindGetterOrAbort(
      TypeElement autoOneOfType,
      TypeMirror kindMirror,
      ImmutableSet<ExecutableElement> abstractMethods)","0","-","-","-","-"
"2670","validateMethods","private void validateMethods(
      TypeElement type,
      ImmutableSet<ExecutableElement> abstractMethods,
      ImmutableSet<ExecutableElement> propertyMethods,
      ExecutableElement kindGetter)","0","-","-","-","-"
"2671","defineVarsForType","private void defineVarsForType(
      TypeElement type,
      AutoOneOfTemplateVars vars,
      ImmutableMap<ExecutableElement, AnnotatedTypeMirror> propertyMethodsAndTypes,
      ExecutableElement kindGetter,
      Nullables nullables)","0","-","-","-","-"
"2672","nullableAnnotationForMethod","@Override
  Optional<String> nullableAnnotationForMethod(ExecutableElement propertyMethod)","0","-","-","-","-"
"2673","sameType","private static boolean sameType(TypeMirror t1, TypeMirror t2)","0","-","-","-","-"
"2674","GwtCompatibility","GwtCompatibility(TypeElement type)","0","-","-","-","-"
"2675","gwtCompatibleAnnotation","Optional<AnnotationMirror> gwtCompatibleAnnotation()","0","-","-","-","-"
"2676","gwtCompatibleAnnotationString","String gwtCompatibleAnnotationString()","0","-","-","-","-"
"2677","SimpleServiceLoader","private SimpleServiceLoader()","0","-","-","-","-"
"2678","load","public static <T> ImmutableList<T> load(Class<? extends T> service, ClassLoader loader)","0","-","-","-","-"
"2679","load","public static <T> ImmutableList<T> load(
      Class<? extends T> service, ClassLoader loader, Optional<Pattern> allowedMissingClasses)","0","-","-","-","-"
"2680","providerClassesFromUrl","private static <T> ImmutableSet<Class<? extends T>> providerClassesFromUrl(
      URL resourceUrl,
      Class<? extends T> service,
      ClassLoader loader,
      Optional<Pattern> allowedMissingClasses)
      throws IOException","0","-","-","-","-"
"2681","parseClassName","private static Optional<String> parseClassName(String line)","0","-","-","-","-"
"2682","TypeVariables","private TypeVariables()","0","-","-","-","-"
"2683","rewriteReturnTypes","/**
   * Returns a map from methods to return types, where the return types are not necessarily the
   * original return types of the methods. Consider this example:
   *
   * <pre>","0","-","-","-","-"
"2684","canAssignStaticMethodResult","/**
   * Tests whether a given parameter can be given to a static method like","0","-","-","-","-"
"2685","substituteTypeVariables","static TypeMirror substituteTypeVariables(
      TypeMirror input, Function<TypeVariable, TypeMirror> substitute, Types typeUtils)","0","-","-","-","-"
"2686","SubstitutionVisitor","SubstitutionVisitor(Function<TypeVariable, TypeMirror> substitute, Types typeUtils)","0","-","-","-","-"
"2687","defaultAction","@Override
    protected TypeMirror defaultAction(TypeMirror t, Void p)","0","-","-","-","-"
"2688","visitTypeVariable","@Override
    public TypeMirror visitTypeVariable(TypeVariable t, Void p)","0","-","-","-","-"
"2689","visitDeclared","@Override
    public TypeMirror visitDeclared(DeclaredType t, Void p)","0","-","-","-","-"
"2690","visitWildcard","@Override
    public TypeMirror visitWildcard(WildcardType t, Void p)","0","-","-","-","-"
"2691","visitArray","@Override
    public TypeMirror visitArray(ArrayType t, Void p)","0","-","-","-","-"
"2692","visitOrNull","private TypeMirror visitOrNull(TypeMirror t)","0","-","-","-","-"
"2693","AnnotationOutput","private AnnotationOutput()","0","-","-","-","-"
"2694","defaultAction","@Override
    protected Void defaultAction(Object value, StringBuilder sb)","0","-","-","-","-"
"2695","visitArray","@Override
    public Void visitArray(List<? extends AnnotationValue> values, StringBuilder sb)","0","-","-","-","-"
"2696","visitChar","@Override
    public Void visitChar(char c, StringBuilder sb)","0","-","-","-","-"
"2697","visitLong","@Override
    public Void visitLong(long i, StringBuilder sb)","0","-","-","-","-"
"2698","visitDouble","@Override
    public Void visitDouble(double d, StringBuilder sb)","0","-","-","-","-"
"2699","visitFloat","@Override
    public Void visitFloat(float f, StringBuilder sb)","0","-","-","-","-"
"2700","visitEnumConstant","@Override
    public Void visitEnumConstant(VariableElement c, StringBuilder sb)","0","-","-","-","-"
"2701","visitString","@Override
    public Void visitString(String s, StringBuilder sb)","0","-","-","-","-"
"2702","visitType","@Override
    public Void visitType(TypeMirror classConstant, StringBuilder sb)","0","-","-","-","-"
"2703","InitializerSourceFormVisitor","InitializerSourceFormVisitor(
        ProcessingEnvironment processingEnv, String memberName, Element errorContext)","0","-","-","-","-"
"2704","visitAnnotation","@Override
    public Void visitAnnotation(AnnotationMirror a, StringBuilder sb)","0","-","-","-","-"
"2705","visitArray","@Override
    public Void visitArray(List<? extends AnnotationValue> values, StringBuilder sb)","0","-","-","-","-"
"2706","visitAnnotation","@Override
    public Void visitAnnotation(AnnotationMirror a, StringBuilder sb)","0","-","-","-","-"
"2707","shortForm","private static Optional<AnnotationValue> shortForm(
        Map<ExecutableElement, AnnotationValue> values)","0","-","-","-","-"
"2708","sourceFormForInitializer","/**
   * Returns a string representation of the given annotation value, suitable for inclusion in a Java
   * source file as the initializer of a variable of the appropriate type.
   */
  static String sourceFormForInitializer(
      AnnotationValue annotationValue,
      ProcessingEnvironment processingEnv,
      String memberName,
      Element errorContext)","0","-","-","-","-"
"2709","sourceFormForAnnotation","/**
   * Returns a string representation of the given annotation mirror, suitable for inclusion in a
   * Java source file to reproduce the annotation in source form.
   */
  static String sourceFormForAnnotation(AnnotationMirror annotationMirror)","0","-","-","-","-"
"2710","validateClassValues","/**
   * Throws an exception if this annotation contains a value for a Class element that is not
   * actually a type. The assumption is that the value is the string","0","-","-","-","-"
"2711","isJavaLangClass","private static boolean isJavaLangClass(TypeMirror type)","0","-","-","-","-"
"2712","appendQuoted","private static StringBuilder appendQuoted(StringBuilder sb, String s)","0","-","-","-","-"
"2713","appendQuoted","private static StringBuilder appendQuoted(StringBuilder sb, char c)","0","-","-","-","-"
"2714","appendEscaped","private static void appendEscaped(StringBuilder sb, char c)","0","-","-","-","-"
"2715","TypeMirrorSet","TypeMirrorSet()","0","-","-","-","-"
"2716","TypeMirrorSet","TypeMirrorSet(Collection<? extends TypeMirror> types)","0","-","-","-","-"
"2717","of","static TypeMirrorSet of(TypeMirror... types)","0","-","-","-","-"
"2718","wrap","private Equivalence.Wrapper<TypeMirror> wrap(TypeMirror typeMirror)","0","-","-","-","-"
"2719","add","@Override
  public boolean add(TypeMirror typeMirror)","0","-","-","-","-"
"2720","iterator","@Override
  public Iterator<TypeMirror> iterator()","0","-","-","-","-"
"2721","hasNext","@Override
      public boolean hasNext()","0","-","-","-","-"
"2722","next","@Override
      public TypeMirror next()","0","-","-","-","-"
"2723","remove","@Override
      public void remove()","0","-","-","-","-"
"2724","size","@Override
  public int size()","0","-","-","-","-"
"2725","contains","@Override
  public boolean contains(Object o)","0","-","-","-","-"
"2726","remove","@Override
  public boolean remove(Object o)","0","-","-","-","-"
"2727","equals","@Override
  public boolean equals(Object o)","0","-","-","-","-"
"2728","hashCode","@Override
  public int hashCode()","0","-","-","-","-"
"2729","Executable","private Executable(ExecutableElement executableElement, ImmutableSet<String> optionalParameters)","0","-","-","-","-"
"2730","of","static Executable of(ExecutableElement executableElement)","0","-","-","-","-"
"2731","of","static Executable of(
      ExecutableElement executableElement, ImmutableSet<String> optionalParameters)","0","-","-","-","-"
"2732","executableElement","ExecutableElement executableElement()","0","-","-","-","-"
"2733","parameters","ImmutableList<VariableElement> parameters()","0","-","-","-","-"
"2734","parameterNames","ImmutableList<String> parameterNames()","0","-","-","-","-"
"2735","isOptional","boolean isOptional(String parameterName)","0","-","-","-","-"
"2736","hasOptionalParameters","boolean hasOptionalParameters()","0","-","-","-","-"
"2737","typeParameters","ImmutableList<TypeParameterElement> typeParameters()","0","-","-","-","-"
"2738","builtType","TypeMirror builtType()","0","-","-","-","-"
"2739","invoke","/**
   * The Java code to invoke this constructor or method, up to just before the opening","0","-","-","-","-"
"2740","toString","@Override
  public String toString()","0","-","-","-","-"
"2741","AutoBuilderProcessor","public AutoBuilderProcessor()","0","-","-","-","-"
"2742","getSupportedOptions","@Override
  public Set<String> getSupportedOptions()","0","-","-","-","-"
"2743","init","@Override
  public synchronized void init(ProcessingEnvironment processingEnv)","0","-","-","-","-"
"2744","processType","@Override
  void processType(TypeElement autoBuilderType)","0","-","-","-","-"
"2745","processType","private void processType(TypeElement autoBuilderType, TypeElement ofClass, String callMethod)","0","-","-","-","-"
"2746","generateForwardingClass","/**
   * Generates a class that will call the synthetic Kotlin constructor that is used to specify which
   * optional parameters are defaulted. Because it is synthetic, it can't be called from Java source
   * code. Instead, Java source code calls the","0","-","-","-","-"
"2747","maybeForwardingClass","private Optional<String> maybeForwardingClass(
      TypeElement autoBuilderType, Executable executable)","0","-","-","-","-"
"2748","propertySet","private ImmutableSet<Property> propertySet(
      Executable executable,
      Map<String, String> propertyToGetterName,
      ImmutableMap<String, String> builderInitializers,
      Nullables nullables)","0","-","-","-","-"
"2749","newProperty","private Property newProperty(
      VariableElement var,
      String identifier,
      String getterName,
      Optional<String> builderInitializer,
      boolean hasDefault,
      Nullables nullables)","0","-","-","-","-"
"2750","propertyInitializers","private ImmutableMap<String, String> propertyInitializers(
      TypeElement autoBuilderType, Executable executable)","0","-","-","-","-"
"2751","propertyToGetterName","/**
   * Returns a map from property names to the corresponding getters in the built type. The built
   * type is the return type of the given","0","-","-","-","-"
"2752","findExecutable","private Executable findExecutable(
      TypeElement ofClass,
      String callMethod,
      TypeElement autoBuilderType,
      ImmutableSet<ExecutableElement> methodsInAutoBuilderType)","0","-","-","-","-"
"2753","findRelevantExecutables","private ImmutableList<Executable> findRelevantExecutables(
      TypeElement ofClass, String callMethod, TypeElement autoBuilderType)","0","-","-","-","-"
"2754","matchingExecutable","private Executable matchingExecutable(
      TypeElement autoBuilderType,
      List<Executable> executables,
      ImmutableSet<ExecutableElement> methodsInAutoBuilderType,
      String description)","0","-","-","-","-"
"2755","executableListString","private String executableListString(List<Executable> executables)","0","-","-","-","-"
"2756","executableMatches","private boolean executableMatches(
      Executable executable, ImmutableSet<ExecutableElement> methodsInAutoBuilderType)","0","-","-","-","-"
"2757","visibleFrom","private boolean visibleFrom(Element element, PackageElement fromPackage)","0","-","-","-","-"
"2758","elementKindRecord","private static ElementKind elementKindRecord()","0","-","-","-","-"
"2759","getOfClass","private TypeElement getOfClass(
      TypeElement autoBuilderType, AnnotationMirror autoBuilderAnnotation)","0","-","-","-","-"
"2760","findOfClassValue","private TypeElement findOfClassValue(AnnotationMirror autoBuilderAnnotation)","0","-","-","-","-"
"2761","findCallMethodValue","private String findCallMethodValue(AnnotationMirror autoBuilderAnnotation)","0","-","-","-","-"
"2762","nullableAnnotationForMethod","@Override
  Optional<String> nullableAnnotationForMethod(ExecutableElement propertyMethod)","0","-","-","-","-"
"2763","buildAnnotation","private void buildAnnotation(
      TypeElement autoBuilderType, TypeElement annotationType, String callMethod)","0","-","-","-","-"
"2764","annotationBuilderPropertySet","private ImmutableSet<Property> annotationBuilderPropertySet(TypeElement annotationType)","0","-","-","-","-"
"2765","annotationBuilderProperty","private static Property annotationBuilderProperty(
      ExecutableElement annotationMethod, Nullables nullables)","0","-","-","-","-"
"2766","MissingTypes","private MissingTypes()","0","-","-","-","-"
"2767","MissingTypeException","MissingTypeException(ErrorType missingType)","0","-","-","-","-"
"2768","deferIfMissingTypesIn","/**
   * Check that the return type and parameter types of the given method are all defined, and arrange
   * to defer processing until the next round if not.
   *
   * @throws MissingTypeException if the return type or a parameter type of the given method is
   *     undefined
   */
  static void deferIfMissingTypesIn(ExecutableElement method)","0","-","-","-","-"
"2769","check","void check(TypeMirror type)","0","-","-","-","-"
"2770","visitError","@Override
    public Void visitError(ErrorType t, TypeMirrorSet visiting)","0","-","-","-","-"
"2771","visitArray","@Override
    public Void visitArray(ArrayType t, TypeMirrorSet visiting)","0","-","-","-","-"
"2772","visitDeclared","@Override
    public Void visitDeclared(DeclaredType t, TypeMirrorSet visiting)","0","-","-","-","-"
"2773","visitTypeVariable","@Override
    public Void visitTypeVariable(TypeVariable t, TypeMirrorSet visiting)","0","-","-","-","-"
"2774","visitWildcard","@Override
    public Void visitWildcard(WildcardType t, TypeMirrorSet visiting)","0","-","-","-","-"
"2775","visitIntersection","@Override
    public Void visitIntersection(IntersectionType t, TypeMirrorSet visiting)","0","-","-","-","-"
"2776","visitAll","private Void visitAll(List<? extends TypeMirror> types, TypeMirrorSet visiting)","0","-","-","-","-"
"2777","AnnotatedTypeMirror","AnnotatedTypeMirror(TypeMirror originalType, TypeMirror rewrittenType)","0","-","-","-","-"
"2778","AnnotatedTypeMirror","AnnotatedTypeMirror(TypeMirror type)","0","-","-","-","-"
"2779","annotations","ImmutableList<AnnotationMirror> annotations()","0","-","-","-","-"
"2780","getType","TypeMirror getType()","0","-","-","-","-"
"2781","getKind","TypeKind getKind()","0","-","-","-","-"
"2782","toString","@Override
  public String toString()","0","-","-","-","-"
"2783","equals","@Override
  public boolean equals(Object obj)","0","-","-","-","-"
"2784","hashCode","@Override
  public int hashCode()","0","-","-","-","-"
"2785","makeConstructorForwarder","/**
   * Assembles a class with a static method","0","-","-","-","-"
"2786","loadInstruction","/** The bytecode instruction that copies a parameter of the given type onto the JVM stack. */
  private static int loadInstruction(TypeMirror type)","0","-","-","-","-"
"2787","localSize","/**
   * The size in the local variable array of a value of the given type. A quirk of the JVM means
   * that long and double variables each take up two consecutive slots in the local variable array.
   * (The first n local variables are the parameters, so we need to know their sizes when iterating
   * over them.)
   */
  private static int localSize(TypeMirror type)","0","-","-","-","-"
"2788","internalName","private static String internalName(String className)","0","-","-","-","-"
"2789","internalName","/**
   * Given a class like","0","-","-","-","-"
"2790","signatureEncoding","private static String signatureEncoding(TypeMirror type)","0","-","-","-","-"
"2791","ForwardingClassGenerator","private ForwardingClassGenerator()","0","-","-","-","-"
"2792","BuilderMethodClassifierForAutoBuilder","private BuilderMethodClassifierForAutoBuilder(
      ErrorReporter errorReporter,
      ProcessingEnvironment processingEnv,
      Executable executable,
      TypeMirror builtType,
      TypeElement builderType,
      ImmutableBiMap<VariableElement, String> paramToPropertyName,
      ImmutableMap<String, AnnotatedTypeMirror> rewrittenPropertyTypes,
      ImmutableSet<String> propertiesWithDefaults,
      Nullables nullables)","0","-","-","-","-"
"2793","classify","/**
   * Classifies the given methods from a builder type and its ancestors.
   *
   * @param methods the abstract methods in","0","-","-","-","-"
"2794","rewriteParameterTypes","private static ImmutableMap<String, AnnotatedTypeMirror> rewriteParameterTypes(
      Executable executable,
      TypeElement builderType,
      ErrorReporter errorReporter,
      Types typeUtils)","0","-","-","-","-"
"2795","propertyForBuilderGetter","@Override
  Optional<String> propertyForBuilderGetter(ExecutableElement method)","0","-","-","-","-"
"2796","checkForFailedJavaBean","@Override
  void checkForFailedJavaBean(ExecutableElement rejectedSetter)","0","-","-","-","-"
"2797","propertyElements","@Override
  ImmutableBiMap<String, VariableElement> propertyElements()","0","-","-","-","-"
"2798","originalPropertyType","@Override
  TypeMirror originalPropertyType(VariableElement propertyElement)","0","-","-","-","-"
"2799","propertyString","@Override
  String propertyString(VariableElement propertyElement)","0","-","-","-","-"
"2800","autoWhat","@Override
  String autoWhat()","0","-","-","-","-"
"2801","getterMustMatch","@Override
  String getterMustMatch()","0","-","-","-","-"
"2802","fooBuilderMustMatch","@Override
  String fooBuilderMustMatch()","0","-","-","-","-"
"2803","Optionalish","private Optionalish(DeclaredType optionalType)","0","-","-","-","-"
"2804","createIfOptional","/**
   * Returns an instance wrapping the given TypeMirror, or null if it is not any kind of Optional.
   *
   * @param type the TypeMirror for the original optional type, for example","0","-","-","-","-"
"2805","isOptional","static boolean isOptional(TypeMirror type)","0","-","-","-","-"
"2806","getRawType","/**
   * Returns a string representing the raw type of this Optional. This will typically be just","0","-","-","-","-"
"2807","getEmpty","/**
   * Returns a string representing the method call to obtain the empty version of this Optional.
   * This will be something like","0","-","-","-","-"
"2808","getContainedType","TypeMirror getContainedType(Types typeUtils)","0","-","-","-","-"
"2809","ofNullable","String ofNullable()","0","-","-","-","-"
"2810","getContainedPrimitiveType","private TypeMirror getContainedPrimitiveType(Types typeUtils)","0","-","-","-","-"
"2811","parsedTemplate","@Override
  Template parsedTemplate()","0","-","-","-","-"
"2812","SimpleMethod","SimpleMethod(ExecutableElement method)","0","-","-","-","-"
"2813","getAccess","public String getAccess()","0","-","-","-","-"
"2814","getName","public String getName()","0","-","-","-","-"
"2815","getThrows","public String getThrows()","0","-","-","-","-"
"2816","access","/**
   * Returns an appropriate string to be used in code for the access specification of the given
   * method. This will be","0","-","-","-","-"
"2817","throwsString","private static String throwsString(ExecutableElement method)","0","-","-","-","-"
"2818","decapitalizeLikeJavaBeans","/**
   * Returns the","0","-","-","-","-"
"2819","decapitalizeNormally","/** Returns the","0","-","-","-","-"
"2820","TypeEncoder","private TypeEncoder()","0","-","-","-","-"
"2821","encode","/**
   * Returns the encoding for the given type, where class names are marked by special tokens. The
   * encoding for","0","-","-","-","-"
"2822","encodeRaw","/**
   * Like","0","-","-","-","-"
"2823","encodeWithAnnotations","/**
   * Encodes the given type and its type annotations. The class comment for","0","-","-","-","-"
"2824","encodeWithAnnotations","/**
   * Encodes the given type and its type annotations. The class comment for","0","-","-","-","-"
"2825","encodeWithAnnotations","/**
   * Encodes the given type and its type annotations. The class comment for","0","-","-","-","-"
"2826","encodeWithAnnotations","/**
   * Encodes the given type and its type annotations. The class comment for","0","-","-","-","-"
"2827","encodeWithAnnotations","/**
   * Encodes the given type and its type annotations. The class comment for","0","-","-","-","-"
"2828","encodeWithAnnotations","/**
   * Encodes the given type and its type annotations. The class comment for","0","-","-","-","-"
"2829","decode","/**
   * Decodes the given string, respelling class names appropriately. The text is scanned for tokens
   * like","0","-","-","-","-"
"2830","decode","static String decode(
      String text, Elements elementUtils, Types typeUtils, String pkg, TypeMirror baseType)","0","-","-","-","-"
"2831","className","private static String className(DeclaredType declaredType)","0","-","-","-","-"
"2832","typeParametersString","/**
   * Returns a string representing the given type parameters as they would appear in a class
   * declaration. For example, if we have","0","-","-","-","-"
"2833","appendTypeParameterWithBounds","private static void appendTypeParameterWithBounds(
      TypeParameterElement typeParameter, StringBuilder sb)","0","-","-","-","-"
"2834","isUnannotatedJavaLangObject","private static boolean isUnannotatedJavaLangObject(TypeMirror type)","0","-","-","-","-"
"2835","appendAnnotations","private static void appendAnnotations(
      List<? extends AnnotationMirror> annotationMirrors, StringBuilder sb)","0","-","-","-","-"
"2836","visit2","/**
     * Equivalent to","0","-","-","-","-"
"2837","defaultAction","@Override
    protected StringBuilder defaultAction(TypeMirror type, StringBuilder sb)","0","-","-","-","-"
"2838","visitArray","@Override
    public StringBuilder visitArray(ArrayType type, StringBuilder sb)","0","-","-","-","-"
"2839","visitDeclared","@Override
    public StringBuilder visitDeclared(DeclaredType type, StringBuilder sb)","0","-","-","-","-"
"2840","appendTypeName","void appendTypeName(DeclaredType type, StringBuilder sb)","0","-","-","-","-"
"2841","appendTypeArguments","void appendTypeArguments(DeclaredType type, StringBuilder sb)","0","-","-","-","-"
"2842","visitWildcard","@Override
    public StringBuilder visitWildcard(WildcardType type, StringBuilder sb)","0","-","-","-","-"
"2843","visitError","@Override
    public StringBuilder visitError(ErrorType t, StringBuilder p)","0","-","-","-","-"
"2844","appendTypeArguments","@Override
    void appendTypeArguments(DeclaredType type, StringBuilder sb)","0","-","-","-","-"
"2845","AnnotatedEncodingTypeVisitor","AnnotatedEncodingTypeVisitor(
        Set<TypeMirror> excludedAnnotationTypes,
        Function<TypeMirror, List<? extends AnnotationMirror>> getTypeAnnotations)","0","-","-","-","-"
"2846","appendAnnotationsWithExclusions","private void appendAnnotationsWithExclusions(
        List<? extends AnnotationMirror> annotations, StringBuilder sb)","0","-","-","-","-"
"2847","visitPrimitive","@Override
    public StringBuilder visitPrimitive(PrimitiveType type, StringBuilder sb)","0","-","-","-","-"
"2848","visitTypeVariable","@Override
    public StringBuilder visitTypeVariable(TypeVariable type, StringBuilder sb)","0","-","-","-","-"
"2849","visitArray","/**
     *","0","-","-","-","-"
"2850","visitDeclared","@Override
    public StringBuilder visitDeclared(DeclaredType type, StringBuilder sb)","0","-","-","-","-"
"2851","TypeRewriter","TypeRewriter(
        String text, Elements elementUtils, Types typeUtils, String pkg, TypeMirror baseType)","0","-","-","-","-"
"2852","rewrite","String rewrite()","0","-","-","-","-"
"2853","findReferencedClasses","private Set<TypeMirror> findReferencedClasses()","0","-","-","-","-"
"2854","classForName","private DeclaredType classForName(String className)","0","-","-","-","-"
"2855","decode","private void decode(StringBuilder output, TypeSimplifier typeSimplifier, int token)","0","-","-","-","-"
"2856","findImportMarker","private OptionalInt findImportMarker()","0","-","-","-","-"
"2857","classNameAt","private String classNameAt(int token)","0","-","-","-","-"
"2858","Spelling","Spelling(String spelling, boolean importIt)","0","-","-","-","-"
"2859","TypeSimplifier","/**
   * Makes a new simplifier for the given package and set of types.
   *
   * @param elementUtils the result of","0","-","-","-","-"
"2860","typesToImport","/**
   * Returns the set of types to import. We import every type that is neither in java.lang nor in
   * the package containing the AutoValue class, provided that the result refers to the type
   * unambiguously. For example, if there is a property of type java.util.Map.Entry then we will
   * import java.util.Map.Entry and refer to the property as Entry. We could also import just
   * java.util.Map in this case and refer to Map.Entry, but currently we never do that.
   */
  ImmutableSortedSet<String> typesToImport()","0","-","-","-","-"
"2861","simplifiedClassName","String simplifiedClassName(DeclaredType type)","0","-","-","-","-"
"2862","actualTypeParametersString","static String actualTypeParametersString(TypeElement type)","0","-","-","-","-"
"2863","classNameOf","/** Returns the name of the given type, including any enclosing types but not the package. */
  static String classNameOf(TypeElement type)","0","-","-","-","-"
"2864","topLevelType","private static TypeElement topLevelType(TypeElement type)","0","-","-","-","-"
"2865","packageNameOf","/**
   * Returns the name of the package that the given type is in. If the type is in the default
   * (unnamed) package then the name is the empty string.
   */
  static String packageNameOf(TypeElement type)","0","-","-","-","-"
"2866","simpleNameOf","static String simpleNameOf(String s)","0","-","-","-","-"
"2867","findImports","/**
   * Given a set of referenced types, works out which of them should be imported and what the
   * resulting spelling of each one is.
   *
   * <p>This method operates on a","0","-","-","-","-"
"2868","javaLangSpelling","/**
   * Handles the tricky case where the class being referred to is in","0","-","-","-","-"
"2869","topLevelTypes","/**
   * Finds the top-level types for all the declared types (classes and interfaces) in the given
   *","0","-","-","-","-"
"2870","nonPrivateDeclaredTypes","/**
   * Finds all types that are declared with non private visibility by the given","0","-","-","-","-"
"2871","ambiguousNames","private static Set<String> ambiguousNames(Types typeUtils, Set<TypeMirror> types)","0","-","-","-","-"
"2872","isCastingUnchecked","/**
   * Returns true if casting to the given type will elicit an unchecked warning from the compiler.
   * Only generic types such as","0","-","-","-","-"
"2873","visitUnknown","@Override
        public Boolean visitUnknown(TypeMirror t, Void p)","0","-","-","-","-"
"2874","visitArray","@Override
        public Boolean visitArray(ArrayType t, Void p)","0","-","-","-","-"
"2875","visitDeclared","@Override
        public Boolean visitDeclared(DeclaredType t, Void p)","0","-","-","-","-"
"2876","visitTypeVariable","@Override
        public Boolean visitTypeVariable(TypeVariable t, Void p)","0","-","-","-","-"
"2877","uncheckedTypeArgument","private static boolean uncheckedTypeArgument(TypeMirror arg)","0","-","-","-","-"
"2878","isJavaLangObject","private static boolean isJavaLangObject(TypeMirror type)","0","-","-","-","-"
"2879","BitmaskField","BitmaskField(Class<?> type, String name, String allSetBitmask, String allRequiredBitmask)","0","-","-","-","-"
"2880","of","static BuilderRequiredProperties of(
      ImmutableSet<Property> allProperties, ImmutableSet<Property> requiredProperties)","0","-","-","-","-"
"2881","BuilderRequiredProperties","private BuilderRequiredProperties(
      ImmutableSet<Property> requiredProperties, ImmutableList<Property> trackedProperties)","0","-","-","-","-"
"2882","allRequiredBitmask","abstract String allRequiredBitmask(
      ImmutableList<Property> trackedProperties, int bitBase, int remainingBits);","0","-","-","-","-"
"2883","getRequiredProperties","public ImmutableSet<Property> getRequiredProperties()","0","-","-","-","-"
"2884","getFieldDeclarations","/**
   * Returns code to declare any fields needed to track which properties have been set. Each line in
   * the returned list should appear on a line of its own.
   */
  public ImmutableList<String> getFieldDeclarations()","0","-","-","-","-"
"2885","getInitToAllSet","/**
   * Returns code to indicate that all tracked properties have received a value. This is needed in
   * the","0","-","-","-","-"
"2886","markAsSet","/**
   * Returns code to indicate that the given property has been set, if assigning to the property
   * field is not enough. For reference (non-primitive) properties, assignment <i>is</i> enough, but
   * for primitive properties we also need to set a bit in the bitmask.
   */
  public String markAsSet(Property p)","0","-","-","-","-"
"2887","missingRequiredProperty","/**
   * Returns an expression that is true if the given property is required but has not been set.
   * Returns null if the property is not required.
   */
  public String missingRequiredProperty(Property p)","0","-","-","-","-"
"2888","noValueToGet","/**
   * Returns an expression that is true if the given property has not been given a value. That's
   * only different from","0","-","-","-","-"
"2889","propertyNotSet","private String propertyNotSet(Property p)","0","-","-","-","-"
"2890","getAnyMissing","/**
   * Returns an expression that is true if any required properties have not been set. Should not be
   * called if there are no required properties.
   */
  public abstract String getAnyMissing();","0","-","-","-","-"
"2891","getDefaultedBitmaskParameters","/**
   * Returns additional constructor parameters to indicate what properties have been defaulted, or
   * an empty string if there are none.
   */
  public abstract String getDefaultedBitmaskParameters();","0","-","-","-","-"
"2892","classForBits","/**
   * The smallest primitive integer type that has at least this many bits, or","0","-","-","-","-"
"2893","cast","private static String cast(Class<?> type, String number)","0","-","-","-","-"
"2894","hex","@VisibleForTesting
  static String hex(int number)","0","-","-","-","-"
"2895","NoDefaults","NoDefaults(ImmutableSet<Property> requiredProperties)","0","-","-","-","-"
"2896","primitivePropertiesIn","private static ImmutableList<Property> primitivePropertiesIn(
        ImmutableSet<Property> properties)","0","-","-","-","-"
"2897","allRequiredBitmask","@Override
    String allRequiredBitmask(
        ImmutableList<Property> trackedProperties, int bitBase, int remainingBits)","0","-","-","-","-"
"2898","getAnyMissing","/**
     *","0","-","-","-","-"
"2899","getDefaultedBitmaskParameters","@Override
    public String getDefaultedBitmaskParameters()","0","-","-","-","-"
"2900","WithDefaults","WithDefaults(ImmutableSet<Property> allProperties, ImmutableSet<Property> requiredProperties)","0","-","-","-","-"
"2901","allRequiredBitmask","@Override
    String allRequiredBitmask(
        ImmutableList<Property> trackedProperties, int bitBase, int remainingBits)","0","-","-","-","-"
"2902","getAnyMissing","/**
     *","0","-","-","-","-"
"2903","getDefaultedBitmaskParameters","/**
     *","0","-","-","-","-"
"2904","parsedTemplate","@Override
  Template parsedTemplate()","0","-","-","-","-"
"2905","PropertyBuilderClassifier","PropertyBuilderClassifier(
      ErrorReporter errorReporter,
      Types typeUtils,
      Elements elementUtils,
      BuilderMethodClassifier<?> builderMethodClassifier,
      Predicate<String> propertyIsNullable,
      ImmutableMap<String, AnnotatedTypeMirror> propertyTypes,
      Nullables nullables)","0","-","-","-","-"
"2906","PropertyBuilder","PropertyBuilder(
        ExecutableElement propertyBuilderMethod,
        String builderType,
        String nullableBuilderType,
        AnnotatedTypeMirror builderAnnotatedType,
        String build,
        String initializer,
        String beforeInitDefault,
        String initDefault,
        String builtToBuilder,
        String copyAll)","0","-","-","-","-"
"2907","getPropertyBuilderMethod","/** The property builder method, for example","0","-","-","-","-"
"2908","getMethodName","/** The name of the property builder method. */
    public String getMethodName()","0","-","-","-","-"
"2909","getPropertyBuilderMethodParameters","/** The property builder method parameters, for example","0","-","-","-","-"
"2910","getAccess","public String getAccess()","0","-","-","-","-"
"2911","getName","/** The name of the field to hold this builder. */
    public String getName()","0","-","-","-","-"
"2912","getBuilderType","/** The type of the builder, for example","0","-","-","-","-"
"2913","getNullableBuilderType","/** The type of the builder with an appropriate","0","-","-","-","-"
"2914","getBuilderTypeMirror","TypeMirror getBuilderTypeMirror()","0","-","-","-","-"
"2915","getBuild","/** The name of the build method,","0","-","-","-","-"
"2916","getInitializer","/** An initializer for the builder field, for example","0","-","-","-","-"
"2917","getBeforeInitDefault","/**
     * An empty string, or a complete statement to be included before the expression returned by
     *","0","-","-","-","-"
"2918","getInitDefault","/**
     * An expression to return a default instance of the type that this builder builds. For example,
     * if this is an","0","-","-","-","-"
"2919","getBuiltToBuilder","/**
     * A method to convert the built type back into a builder. Unfortunately Guava collections don't
     * have this (you can't say","0","-","-","-","-"
"2920","getCopyAll","/**
     * The method to copy another collection into this builder. It is","0","-","-","-","-"
"2921","makePropertyBuilder","Optional<PropertyBuilder> makePropertyBuilder(ExecutableElement method, String property)","0","-","-","-","-"
"2922","noArgBuilderMaker","private Optional<ExecutableElement> noArgBuilderMaker(
      Map<String, ExecutableElement> barNoArgMethods, TypeElement barBuilderTypeElement)","0","-","-","-","-"
"2923","oneArgBuilderMaker","private Optional<ExecutableElement> oneArgBuilderMaker(
      Map<String, ExecutableElement> barOneArgMethods, TypeElement barBuilderTypeElement)","0","-","-","-","-"
"2924","builderMaker","private Optional<ExecutableElement> builderMaker(
      ImmutableSet<String> methodNamesToCheck,
      Map<String, ExecutableElement> methods,
      TypeElement barBuilderTypeElement,
      int argumentCount)","0","-","-","-","-"
"2925","noArgMethodsOf","private Map<String, ExecutableElement> noArgMethodsOf(TypeElement type)","0","-","-","-","-"
"2926","oneArgumentMethodsOf","private ImmutableMap<String, ExecutableElement> oneArgumentMethodsOf(TypeElement type)","0","-","-","-","-"
"2927","methodsOf","private ImmutableMap<String, ExecutableElement> methodsOf(TypeElement type, int argumentCount)","0","-","-","-","-"
"2928","isStaticInterfaceMethodNotIn","private static boolean isStaticInterfaceMethodNotIn(ExecutableElement method, TypeElement type)","0","-","-","-","-"
"2929","addAllPutAll","private Optional<ExecutableElement> addAllPutAll(
      TypeElement barBuilderTypeElement,
      DeclaredType barBuilderDeclaredType,
      TypeMirror barTypeMirror)","0","-","-","-","-"
"2930","getSupportedSourceVersion","@Override
    public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"2931","process","@Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"2932","runProcessor","/**
   * Run","0","-","-","-","-"
"2933","getCharContent","@Override
                  public CharSequence getCharContent(boolean ignoreEncodingErrors)
                      throws IOException","0","-","-","-","-"
"2934","FileManagerInvocationHandler","FileManagerInvocationHandler(
        StandardJavaFileManager fileManager, @Nullable String packageToMask)","0","-","-","-","-"
"2935","invoke","@Override
    public Object invoke(Object proxy, Method method, @Nullable Object @Nullable [] args)
        throws Throwable","0","-","-","-","-"
"2936","source8","@Test
  public void source8() throws Exception","0","-","-","-","-"
"2937","source8_masked","@Test
  public void source8_masked() throws Exception","0","-","-","-","-"
"2938","source9","@Test
  public void source9() throws Exception","0","-","-","-","-"
"2939","source9_masked","@Test
  public void source9_masked() throws Exception","0","-","-","-","-"
"2940","isJdk9OrLater","private static boolean isJdk9OrLater()","0","-","-","-","-"
"2941","setUp","@Before
  public void setUp()","0","-","-","-","-"
"2942","testEquivalences","@Test
  public void testEquivalences()","0","-","-","-","-"
"2943","testGetDefaultValuesUnset","@Test
  public void testGetDefaultValuesUnset()","0","-","-","-","-"
"2944","visitString","@Override
                  public String visitString(String value, Void ignored)","0","-","-","-","-"
"2945","testGetDefaultValuesSet","@Test
  public void testGetDefaultValuesSet()","0","-","-","-","-"
"2946","visitString","@Override
                  public String visitString(String value, Void ignored)","0","-","-","-","-"
"2947","testGetValueEntry","@Test
  public void testGetValueEntry()","0","-","-","-","-"
"2948","testGetValueEntryFailure","@Test
  public void testGetValueEntryFailure()","0","-","-","-","-"
"2949","annotationOn","private AnnotationMirror annotationOn(Class<?> clazz)","0","-","-","-","-"
"2950","getAnnotatedAnnotations","@Test
  public void getAnnotatedAnnotations()","0","-","-","-","-"
"2951","toSourceString","@Test
  public void toSourceString()","0","-","-","-","-"
"2952","getAnnotatedAnnotationsAsserts","private void getAnnotatedAnnotationsAsserts(
      ImmutableSet<? extends AnnotationMirror> annotatedAnnotations)","0","-","-","-","-"
"2953","packageVisibility","@Test
  public void packageVisibility()","0","-","-","-","-"
"2954","moduleVisibility","@Test
  public void moduleVisibility() throws IllegalAccessException, InvocationTargetException","0","-","-","-","-"
"2955","classVisibility","@Test
  public void classVisibility()","0","-","-","-","-"
"2956","effectiveClassVisibility","@Test
  public void effectiveClassVisibility()","0","-","-","-","-"
"2957","effectiveVisiblityOfClass","private Visibility effectiveVisiblityOfClass(Class<?> clazz)","0","-","-","-","-"
"2958","setUp","@Before
  public void setUp()","0","-","-","-","-"
"2959","primitiveClass","@Test
  public void primitiveClass()","0","-","-","-","-"
"2960","arrays","@Test
  public void arrays()","0","-","-","-","-"
"2961","declaredType","@Test
  public void declaredType()","0","-","-","-","-"
"2962","visitorMethod","@Test
  public void visitorMethod()","0","-","-","-","-"
"2963","visitType","@Override
              public @Nullable Void visitType(TypeMirror typeMirror, @Nullable Void aVoid)","0","-","-","-","-"
"2964","defaultAction","@Override
              protected @Nullable Void defaultAction(Object o, @Nullable Void aVoid)","0","-","-","-","-"
"2965","parameterizedType","@Test
  public void parameterizedType()","0","-","-","-","-"
"2966","initializeTestElements","@Before
  public void initializeTestElements()","0","-","-","-","-"
"2967","getPackage","@Test
  public void getPackage()","0","-","-","-","-"
"2968","asPackage","@Test
  public void asPackage()","0","-","-","-","-"
"2969","asPackage_illegalArgument","@Test
  public void asPackage_illegalArgument()","0","-","-","-","-"
"2970","asTypeElement","@Test
  public void asTypeElement()","0","-","-","-","-"
"2971","asTypeElement_notATypeElement","@Test
  public void asTypeElement_notATypeElement()","0","-","-","-","-"
"2972","asTypeParameterElement","@Test
  public void asTypeParameterElement()","0","-","-","-","-"
"2973","asTypeParameterElement_illegalArgument","@Test
  public void asTypeParameterElement_illegalArgument()","0","-","-","-","-"
"2974","asType","@Test
  public void asType()","0","-","-","-","-"
"2975","asType_illegalArgument","@Test
  public void asType_illegalArgument()","0","-","-","-","-"
"2976","asVariable","@Test
  public void asVariable()","0","-","-","-","-"
"2977","asVariable_illegalArgument","@Test
  public void asVariable_illegalArgument()","0","-","-","-","-"
"2978","asExecutable","@Test
  public void asExecutable()","0","-","-","-","-"
"2979","asExecutable_illegalArgument","@Test
  public void asExecutable_illegalArgument()","0","-","-","-","-"
"2980","isAnnotationPresent","@Test
  public void isAnnotationPresent()","0","-","-","-","-"
"2981","isAnnotationPresentAsserts","private void isAnnotationPresentAsserts(
      boolean isDocumentedPresent,
      boolean isInnerAnnotationPresent,
      boolean isSuppressWarningsPresent)","0","-","-","-","-"
"2982","getAnnotationMirror","@Test
  public void getAnnotationMirror()","0","-","-","-","-"
"2983","getAnnotationMirrorAsserts","private void getAnnotationMirrorAsserts(
      Optional<AnnotationMirror> documented,
      Optional<AnnotationMirror> innerAnnotation,
      Optional<AnnotationMirror> suppressWarnings)","0","-","-","-","-"
"2984","staticMethod","static void staticMethod()","0","-","-","-","-"
"2985","foo","abstract String foo();","0","-","-","-","-"
"2986","privateMethod","@SuppressWarnings(""unused"")
    private void privateMethod()","0","-","-","-","-"
"2987","staticMethod","static void staticMethod()","0","-","-","-","-"
"2988","bar","abstract int bar();","0","-","-","-","-"
"2989","bar","abstract int bar(long x);","0","-","-","-","-"
"2990","staticMethod","static void staticMethod()","0","-","-","-","-"
"2991","bar","@Override
    public int bar()","0","-","-","-","-"
"2992","baz","abstract void baz();","0","-","-","-","-"
"2993","buh","void buh(int x)","0","-","-","-","-"
"2994","buh","void buh(int x, int y)","0","-","-","-","-"
"2995","getLocalAndInheritedMethods_Old","@Test
  public void getLocalAndInheritedMethods_Old()","0","-","-","-","-"
"2996","getLocalAndInheritedMethods","@Test
  public void getLocalAndInheritedMethods()","0","-","-","-","-"
"2997","getLocalAndInheritedMethods_recursiveTypeVariableBound","@Test
  public void getLocalAndInheritedMethods_recursiveTypeVariableBound()","0","-","-","-","-"
"2998","internalMergeFrom","@Override
      @SuppressWarnings(""rawtypes"")
      Builder internalMergeFrom(AbstractMessageLite other)","0","-","-","-","-"
"2999","internalMergeFrom","@Override
      @SuppressWarnings(""unchecked"")
      B internalMergeFrom(AbstractMessageLite other)","0","-","-","-","-"
"3000","internalMergeFrom","@SuppressWarnings(""unchecked"")
      B internalMergeFrom(M other)","0","-","-","-","-"
"3001","getAllMethods","@Test
  public void getAllMethods()","0","-","-","-","-"
"3002","visibleMethodsFromObject","private Set<ExecutableElement> visibleMethodsFromObject()","0","-","-","-","-"
"3003","allMethodsFromObject","private Set<ExecutableElement> allMethodsFromObject()","0","-","-","-","-"
"3004","getMethod","private ExecutableElement getMethod(Class<?> c, String methodName, TypeMirror... parameterTypes)","0","-","-","-","-"
"3005","size","@Override
    public int size()","0","-","-","-","-"
"3006","get","@Override
    public T get(int index)","0","-","-","-","-"
"3007","abstractMethodNamesFrom","private Set<String> abstractMethodNamesFrom(Set<ExecutableElement> methods)","0","-","-","-","-"
"3008","getLocalAndInheritedMethods_AbstractList","@Test
  public void getLocalAndInheritedMethods_AbstractList()","0","-","-","-","-"
"3009","setUp","@Before
  public void setUp()","0","-","-","-","-"
"3010","getTypeMirror","@Test
  public void getTypeMirror()","0","-","-","-","-"
"3011","getTypeMirrorGenericClass","@Test
  public void getTypeMirrorGenericClass()","0","-","-","-","-"
"3012","getTypeMirrors","@Test
  public void getTypeMirrors()","0","-","-","-","-"
"3013","getAnnotationMirror","@Test
  public void getAnnotationMirror()","0","-","-","-","-"
"3014","getAnnotationMirrors","@Test
  public void getAnnotationMirrors()","0","-","-","-","-"
"3015","getString","@Test
  public void getString()","0","-","-","-","-"
"3016","getStrings","@Test
  public void getStrings()","0","-","-","-","-"
"3017","getEnum","@Test
  public void getEnum()","0","-","-","-","-"
"3018","getEnums","@Test
  public void getEnums()","0","-","-","-","-"
"3019","getAnnotationValues","@Test
  public void getAnnotationValues()","0","-","-","-","-"
"3020","getInt","@Test
  public void getInt()","0","-","-","-","-"
"3021","getInts","@Test
  public void getInts()","0","-","-","-","-"
"3022","getLong","@Test
  public void getLong()","0","-","-","-","-"
"3023","getLongs","@Test
  public void getLongs()","0","-","-","-","-"
"3024","getByte","@Test
  public void getByte()","0","-","-","-","-"
"3025","getBytes","@Test
  public void getBytes()","0","-","-","-","-"
"3026","getShort","@Test
  public void getShort()","0","-","-","-","-"
"3027","getShorts","@Test
  public void getShorts()","0","-","-","-","-"
"3028","getFloat","@Test
  public void getFloat()","0","-","-","-","-"
"3029","getFloats","@Test
  public void getFloats()","0","-","-","-","-"
"3030","getDouble","@Test
  public void getDouble()","0","-","-","-","-"
"3031","getDoubles","@Test
  public void getDoubles()","0","-","-","-","-"
"3032","getBoolean","@Test
  public void getBoolean()","0","-","-","-","-"
"3033","getBooleans","@Test
  public void getBooleans()","0","-","-","-","-"
"3034","getChar","@Test
  public void getChar()","0","-","-","-","-"
"3035","getChars","@Test
  public void getChars()","0","-","-","-","-"
"3036","toSourceString","@Test
  public void toSourceString()","0","-","-","-","-"
"3037","getTypeElement","private TypeElement getTypeElement(Class<?> clazz)","0","-","-","-","-"
"3038","getEnumNames","private static ImmutableList<String> getEnumNames(ImmutableList<VariableElement> values)","0","-","-","-","-"
"3039","data","@Parameterized.Parameters(name = ""","0","-","-","-","-"
"3040","initUtils","@Override
      void initUtils(OverridesTest test)","0","-","-","-","-"
"3041","initUtils","@Override
      void initUtils(OverridesTest test)","0","-","-","-","-"
"3042","initUtils","abstract void initUtils(OverridesTest test);","0","-","-","-","-"
"3043","OverridesTest","public OverridesTest(CompilerType compilerType)","0","-","-","-","-"
"3044","initializeTestElements","@Before
  public void initializeTestElements()","0","-","-","-","-"
"3045","m","void m();","0","-","-","-","-"
"3046","m","void m(String x);","0","-","-","-","-"
"3047","n","void n();","0","-","-","-","-"
"3048","number","Number number();","0","-","-","-","-"
"3049","m","void m();","0","-","-","-","-"
"3050","m","void m(int x);","0","-","-","-","-"
"3051","number","Integer number();","0","-","-","-","-"
"3052","m","public void m()","0","-","-","-","-"
"3053","m","@Override
      public void m()","0","-","-","-","-"
"3054","m","@Override
      public void m(String x)","0","-","-","-","-"
"3055","n","@Override
      public void n()","0","-","-","-","-"
"3056","number","@Override
      public Number number()","0","-","-","-","-"
"3057","m","@Override
      public void m()","0","-","-","-","-"
"3058","m","@Override
      public void m(String x)","0","-","-","-","-"
"3059","m","@Override
      public void m(int x)","0","-","-","-","-"
"3060","n","@Override
      public void n()","0","-","-","-","-"
"3061","number","@Override
      public Integer number()","0","-","-","-","-"
"3062","m","@Override
      public void m()","0","-","-","-","-"
"3063","m","@Override
      public void m(String x)","0","-","-","-","-"
"3064","n","@Override
      public void n()","0","-","-","-","-"
"3065","number","@Override
      public Number number()","0","-","-","-","-"
"3066","m","@Override
      public void m(String x)","0","-","-","-","-"
"3067","m","@Override
      public void m(int x)","0","-","-","-","-"
"3068","n","@Override
      public void n()","0","-","-","-","-"
"3069","number","@Override
      public Integer number()","0","-","-","-","-"
"3070","key","Key key();","0","-","-","-","-"
"3071","bindingType","BindingType bindingType();","0","-","-","-","-"
"3072","contributionType","ContributionType contributionType();","0","-","-","-","-"
"3073","bindingElement","abstract Optional<Element> bindingElement();","0","-","-","-","-"
"3074","contributingModule","abstract Optional<TypeElement> contributingModule();","0","-","-","-","-"
"3075","key","@Override
      public abstract Key key();","0","-","-","-","-"
"3076","contributionType","@Override
      public abstract ContributionType contributionType();","0","-","-","-","-"
"3077","bindingType","@Override
      public abstract BindingType bindingType();","0","-","-","-","-"
"3078","foo","public abstract String foo();","0","-","-","-","-"
"3079","foo","@Override
      public String foo()","0","-","-","-","-"
"3080","add","boolean add(E x);","0","-","-","-","-"
"3081","add","@Override
      boolean add(E x);","0","-","-","-","-"
"3082","add","@Override
      public boolean add(String x)","0","-","-","-","-"
"3083","add","@Override
      public boolean add(Object x)","0","-","-","-","-"
"3084","frob","void frob(List x)","0","-","-","-","-"
"3085","frob","@Override
      void frob(List x)","0","-","-","-","-"
"3086","frob","void frob(List<String> x)","0","-","-","-","-"
"3087","frob","@Override
      void frob(List x)","0","-","-","-","-"
"3088","overridesInheritance","@Test
  public void overridesInheritance()","0","-","-","-","-"
"3089","overridesMoreInheritance","@Test
  public void overridesMoreInheritance()","0","-","-","-","-"
"3090","overridesVisibility","@Test
  public void overridesVisibility()","0","-","-","-","-"
"3091","overridesGenerics","@Test
  public void overridesGenerics()","0","-","-","-","-"
"3092","overridesRaw","@Test
  public void overridesRaw()","0","-","-","-","-"
"3093","overridesDiamond","@Test
  public void overridesDiamond()","0","-","-","-","-"
"3094","checkOverridesInContainedClasses","private void checkOverridesInContainedClasses(Class<?> container)","0","-","-","-","-"
"3095","checkOverridesInSet","private void checkOverridesInSet(ImmutableSet<Class<?>> testClasses)","0","-","-","-","-"
"3096","getTypeElement","private TypeElement getTypeElement(Class<?> c)","0","-","-","-","-"
"3097","getMethod","private ExecutableElement getMethod(TypeElement in, String name, TypeKind... parameterTypeKinds)","0","-","-","-","-"
"3098","add","@SuppressWarnings(""unused"")
    boolean add(E e);","0","-","-","-","-"
"3099","add","@Override
    public boolean add(E e)","0","-","-","-","-"
"3100","add","@Override
    public boolean add(E e)","0","-","-","-","-"
"3101","methodParameters_StringList","@Test
  public void methodParameters_StringList()","0","-","-","-","-"
"3102","methodParameters_AbstractStringList","@Test
  public void methodParameters_AbstractStringList()","0","-","-","-","-"
"3103","methodParams_NumberList","@Test
  public void methodParams_NumberList()","0","-","-","-","-"
"3104","doBackward","@Override
    protected String doBackward(Range<T> b)","0","-","-","-","-"
"3105","methodParams_RecursiveBound","@Test
  public void methodParams_RecursiveBound()","0","-","-","-","-"
"3106","methodFromSuperclasses","@Test
  public void methodFromSuperclasses()","0","-","-","-","-"
"3107","methodFromSuperinterfaces","@Test
  public void methodFromSuperinterfaces()","0","-","-","-","-"
"3108","assertTypeListsEqual","private void assertTypeListsEqual(@Nullable List<TypeMirror> actual, List<TypeMirror> expected)","0","-","-","-","-"
"3109","apply","@Override
    public Statement apply(Statement base, Description description)","0","-","-","-","-"
"3110","EcjCompilationStatement","EcjCompilationStatement(Statement base)","0","-","-","-","-"
"3111","evaluate","@Override
    public void evaluate() throws Throwable","0","-","-","-","-"
"3112","evaluate","private void evaluate(File dummySourceFile) throws Throwable","0","-","-","-","-"
"3113","EcjTestProcessor","EcjTestProcessor(Statement statement)","0","-","-","-","-"
"3114","getSupportedSourceVersion","@Override
    public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"3115","process","@Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"3116","maybeThrow","void maybeThrow() throws Throwable","0","-","-","-","-"
"3117","javacType","private TypeElement javacType(TypeElement type)","0","-","-","-","-"
"3118","javacMethod","private ExecutableElement javacMethod(ExecutableElement method)","0","-","-","-","-"
"3119","erasedToString","private static String erasedToString(TypeMirror type)","0","-","-","-","-"
"3120","setUp","@Before
  public void setUp()","0","-","-","-","-"
"3121","isTypeOf_primitiveAndBoxedPrimitiveTypes","@Test
  public void isTypeOf_primitiveAndBoxedPrimitiveTypes()","0","-","-","-","-"
"3122","PrimitiveTypeInfo","PrimitiveTypeInfo(Class<?> classType, Class<?> boxedClassType, TypeKind typeKind)","0","-","-","-","-"
"3123","isTypeOf_voidAndPseudoVoidTypes","@Test
  public void isTypeOf_voidAndPseudoVoidTypes()","0","-","-","-","-"
"3124","isTypeOf_arrayType","@Test
  public void isTypeOf_arrayType()","0","-","-","-","-"
"3125","method0","@SuppressWarnings(""unused"")
    <T extends SortedMap<Number, String>> T method0();","0","-","-","-","-"
"3126","isTypeOf_declaredType","@Test
  public void isTypeOf_declaredType()","0","-","-","-","-"
"3127","isTypeOf_fail","@Test
  public void isTypeOf_fail()","0","-","-","-","-"
"3128","getTypeElementFor","private TypeElement getTypeElementFor(Class<?> clazz)","0","-","-","-","-"
"3129","getSupportedSourceVersion","@Override
    public final SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"3130","steps","@Override
    protected Iterable<? extends Step> steps()","0","-","-","-","-"
"3131","process","@Override
            public ImmutableSet<? extends Element> process(
                ImmutableSetMultimap<String, Element> elementsByAnnotation)","0","-","-","-","-"
"3132","annotations","@Override
            public ImmutableSet<String> annotations()","0","-","-","-","-"
"3133","processArguments","ImmutableList<ImmutableSetMultimap<String, Element>> processArguments()","0","-","-","-","-"
"3134","steps","@Override
    protected Iterable<? extends Step> steps()","0","-","-","-","-"
"3135","process","@Override
            public ImmutableSet<? extends Element> process(
                ImmutableSetMultimap<String, Element> elementsByAnnotation)","0","-","-","-","-"
"3136","annotations","@Override
            public ImmutableSet<String> annotations()","0","-","-","-","-"
"3137","processArguments","ImmutableList<ImmutableSetMultimap<String, Element>> processArguments()","0","-","-","-","-"
"3138","steps","@Override
    protected Iterable<? extends Step> steps()","0","-","-","-","-"
"3139","process","@Override
            public ImmutableSet<? extends Element> process(
                ImmutableSetMultimap<String, Element> elementsByAnnotation)","0","-","-","-","-"
"3140","annotations","@Override
            public ImmutableSet<String> annotations()","0","-","-","-","-"
"3141","processArguments","ImmutableList<ImmutableSetMultimap<String, Element>> processArguments()","0","-","-","-","-"
"3142","steps","@Override
    protected Iterable<? extends Step> steps()","0","-","-","-","-"
"3143","process","@Override
            public ImmutableSet<? extends Element> process(
                ImmutableSetMultimap<String, Element> elementsByAnnotation)","0","-","-","-","-"
"3144","annotations","@Override
            public ImmutableSet<String> annotations()","0","-","-","-","-"
"3145","steps","@Override
    protected Iterable<? extends Step> steps()","0","-","-","-","-"
"3146","process","@Override
            public ImmutableSet<Element> process(
                ImmutableSetMultimap<String, Element> elementsByAnnotation)","0","-","-","-","-"
"3147","annotations","@Override
            public ImmutableSet<String> annotations()","0","-","-","-","-"
"3148","steps","@Override
    protected Iterable<? extends Step> steps()","0","-","-","-","-"
"3149","process","@Override
            public ImmutableSet<Element> process(
                ImmutableSetMultimap<String, Element> elementsByAnnotation)","0","-","-","-","-"
"3150","annotations","@Override
            public ImmutableSet<String> annotations()","0","-","-","-","-"
"3151","steps","@Override
    protected Iterable<? extends Step> steps()","0","-","-","-","-"
"3152","process","@Override
            public ImmutableSet<Element> process(
                ImmutableSetMultimap<String, Element> elementsByAnnotation)","0","-","-","-","-"
"3153","annotations","@Override
            public ImmutableSet<String> annotations()","0","-","-","-","-"
"3154","getElementsByAnnotation","ImmutableSetMultimap<String, Element> getElementsByAnnotation()","0","-","-","-","-"
"3155","annotations","@Override
    public ImmutableSet<? extends Class<? extends Annotation>> annotations()","0","-","-","-","-"
"3156","process","@Override
    public ImmutableSet<? extends Element> process(
        SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation)","0","-","-","-","-"
"3157","getElementsByAnnotation","SetMultimap<Class<? extends Annotation>, Element> getElementsByAnnotation()","0","-","-","-","-"
"3158","requiresGeneratedCodeDeferralTest","private void requiresGeneratedCodeDeferralTest(
      JavaFileObject dependentTestFileObject, JavaFileObject generatesCodeFileObject)","0","-","-","-","-"
"3159","requiresGeneratedCodeDeferralTest","private void requiresGeneratedCodeDeferralTest(JavaFileObject dependentTestFileObject)","0","-","-","-","-"
"3160","properlyDefersProcessing_typeElement","@Test
  public void properlyDefersProcessing_typeElement()","0","-","-","-","-"
"3161","properlyDefersProcessing_packageElement","@Test
  public void properlyDefersProcessing_packageElement()","0","-","-","-","-"
"3162","properlyDefersProcessing_argumentElement","@Test
  public void properlyDefersProcessing_argumentElement()","0","-","-","-","-"
"3163","properlyDefersProcessing_recordComponent","@Test
  public void properlyDefersProcessing_recordComponent()","0","-","-","-","-"
"3164","properlyDefersProcessing_typeParameter","@Test
  public void properlyDefersProcessing_typeParameter()","0","-","-","-","-"
"3165","properlyDefersProcessing_methodTypeParameter","@Test
  public void properlyDefersProcessing_methodTypeParameter()","0","-","-","-","-"
"3166","properlyDefersProcessing_nestedTypeValidBeforeOuterType","@Test
  public void properlyDefersProcessing_nestedTypeValidBeforeOuterType()","0","-","-","-","-"
"3167","properlyDefersProcessing_rejectsTypeElement","@Test
  public void properlyDefersProcessing_rejectsTypeElement()","0","-","-","-","-"
"3168","properlyDefersProcessing_rejectsTypeParameterElement","@Test
  public void properlyDefersProcessing_rejectsTypeParameterElement()","0","-","-","-","-"
"3169","properlyDefersProcessing_rejectsArgumentElement","@Test
  public void properlyDefersProcessing_rejectsArgumentElement()","0","-","-","-","-"
"3170","properlyDefersProcessing_rejectsField","@Test
  public void properlyDefersProcessing_rejectsField()","0","-","-","-","-"
"3171","properlyDefersProcessing_rejectsRecordComponent","@Test
  public void properlyDefersProcessing_rejectsRecordComponent()","0","-","-","-","-"
"3172","properlyDefersProcessing_rejectsTypeParameterElementInMethod","@Test
  public void properlyDefersProcessing_rejectsTypeParameterElementInMethod()","0","-","-","-","-"
"3173","requiresGeneratedCodeRejectionTest","@CanIgnoreReturnValue
  private RequiresGeneratedCodeProcessor requiresGeneratedCodeRejectionTest(
      JavaFileObject classAFileObject)","0","-","-","-","-"
"3174","setMultimapValuesByString","private static <K, V>
      Correspondence<SetMultimap<K, V>, SetMultimap<K, String>> setMultimapValuesByString()","0","-","-","-","-"
"3175","properlyDefersProcessing_stepRejectingExecutableElements","@Test
  public void properlyDefersProcessing_stepRejectingExecutableElements()","0","-","-","-","-"
"3176","properlyDefersProcessing_stepRejectingOverloadedExecutableElements","@Test
  public void properlyDefersProcessing_stepRejectingOverloadedExecutableElements()","0","-","-","-","-"
"3177","properlyDefersProcessing_stepAndIllFormedRejectingExecutableElements","@Test
  public void properlyDefersProcessing_stepAndIllFormedRejectingExecutableElements()","0","-","-","-","-"
"3178","properlyDefersProcessing_errorTypeReferencingOverloadedMethods","/**
   * In the following example, at least open-jdk does not report the second method if","0","-","-","-","-"
"3179","properlySkipsMissingAnnotations_generatesClass","@Test
  public void properlySkipsMissingAnnotations_generatesClass()","0","-","-","-","-"
"3180","properlySkipsMissingAnnotations_passesValidAnnotationsToProcess","@Test
  public void properlySkipsMissingAnnotations_passesValidAnnotationsToProcess()","0","-","-","-","-"
"3181","reportsMissingType","@Test
  public void reportsMissingType()","0","-","-","-","-"
"3182","reportsMissingTypeSuppressedWhenOtherErrors","@Test
  public void reportsMissingTypeSuppressedWhenOtherErrors()","0","-","-","-","-"
"3183","processingStepAsStepAnnotationsNamesMatchClasses","@Test
  public void processingStepAsStepAnnotationsNamesMatchClasses()","0","-","-","-","-"
"3184","processingStepAsStepProcessElementsMatchClasses","/**
   * Tests that a","0","-","-","-","-"
"3185","generateClass","private static void generateClass(Filer filer, String generatedClassName)","0","-","-","-","-"
"3186","emptyAnnotation","@Test
  public void emptyAnnotation()","0","-","-","-","-"
"3187","multipleValues","@Test
  public void multipleValues()","0","-","-","-","-"
"3188","extraValues","@Test
  public void extraValues()","0","-","-","-","-"
"3189","defaultValue","@Test
  public void defaultValue()","0","-","-","-","-"
"3190","overriddenDefaultValue","@Test
  public void overriddenDefaultValue()","0","-","-","-","-"
"3191","missingValues","@Test
  public void missingValues()","0","-","-","-","-"
"3192","notAnAnnotation","@Test
  public void notAnAnnotation()","0","-","-","-","-"
"3193","getTypeElement","private TypeElement getTypeElement(Class<?> clazz)","0","-","-","-","-"
"3194","expectThrows","private static void expectThrows(Runnable throwingRunnable)","0","-","-","-","-"
"3195","intValue","private static AnnotationValue intValue(int value)","0","-","-","-","-"
"3196","getValue","@Override
      public Object getValue()","0","-","-","-","-"
"3197","accept","@Override
      public <R, P> R accept(AnnotationValueVisitor<R, P> annotationValueVisitor, P p)","0","-","-","-","-"
"3198","equivalence","@Test
  public void equivalence()","0","-","-","-","-"
"3199","ExecutableElementsGroupA","ExecutableElementsGroupA()","0","-","-","-","-"
"3200","a","void a()","0","-","-","-","-"
"3201","b","public static void b()","0","-","-","-","-"
"3202","ExecutableElementsGroupB","ExecutableElementsGroupB(String s)","0","-","-","-","-"
"3203","a","void a(String s)","0","-","-","-","-"
"3204","b","public static void b(String s)","0","-","-","-","-"
"3205","ExecutableElementsGroupC","ExecutableElementsGroupC() throws Exception","0","-","-","-","-"
"3206","a","void a() throws Exception","0","-","-","-","-"
"3207","b","public static void b() throws Exception","0","-","-","-","-"
"3208","ExecutableElementsGroupD","ExecutableElementsGroupD() throws RuntimeException","0","-","-","-","-"
"3209","a","void a() throws RuntimeException","0","-","-","-","-"
"3210","b","public static void b() throws RuntimeException","0","-","-","-","-"
"3211","ExecutableElementsGroupE","<T> ExecutableElementsGroupE()","0","-","-","-","-"
"3212","a","<T> void a()","0","-","-","-","-"
"3213","b","public static <T> void b()","0","-","-","-","-"
"3214","testReferencedTypes","@Test
  public void testReferencedTypes()","0","-","-","-","-"
"3215","referencedTypes","private static ImmutableSet<TypeElement> referencedTypes(
      ImmutableMap<String, VariableElement> fieldIndex, String fieldName)","0","-","-","-","-"
"3216","asElement_throws","@Test
  public void asElement_throws()","0","-","-","-","-"
"3217","asElement","@Test
  public void asElement()","0","-","-","-","-"
"3218","testNonObjectSuperclass","@Test
  public void testNonObjectSuperclass()","0","-","-","-","-"
"3219","testAsMemberOf_variableElement","@Test
  public void testAsMemberOf_variableElement()","0","-","-","-","-"
"3220","add","@SuppressWarnings(""unused"")
    void add(T t)","0","-","-","-","-"
"3221","getKind","@Override
        public TypeKind getKind()","0","-","-","-","-"
"3222","accept","@Override
        public <R, P> R accept(TypeVisitor<R, P> v, P p)","0","-","-","-","-"
"3223","getTypeArguments","@Override
        public ImmutableList<? extends TypeMirror> getTypeArguments()","0","-","-","-","-"
"3224","getEnclosingType","@Override
        public @Nullable TypeMirror getEnclosingType()","0","-","-","-","-"
"3225","asElement","@Override
        public @Nullable Element asElement()","0","-","-","-","-"
"3226","getAnnotationsByType","@Override
        public <A extends Annotation> A @Nullable [] getAnnotationsByType(Class<A> annotationType)","0","-","-","-","-"
"3227","getAnnotation","@Override
        public <A extends Annotation> @Nullable A getAnnotation(Class<A> annotationType)","0","-","-","-","-"
"3228","getAnnotationMirrors","@Override
        @SuppressWarnings(""MutableMethodReturnType"")
        public List<? extends AnnotationMirror> getAnnotationMirrors()","0","-","-","-","-"
"3229","testIsConversionFromObjectUnchecked_yes","@Test
  public void testIsConversionFromObjectUnchecked_yes()","0","-","-","-","-"
"3230","testIsConversionFromObjectUnchecked_no","@Test
  public void testIsConversionFromObjectUnchecked_no()","0","-","-","-","-"
"3231","testIsTypeOf","@Test
  public void testIsTypeOf()","0","-","-","-","-"
"3232","missingReturnType","@Test
  public void missingReturnType()","0","-","-","-","-"
"3233","missingGenericReturnType","@Test
  public void missingGenericReturnType()","0","-","-","-","-"
"3234","missingReturnTypeTypeParameter","@Test
  public void missingReturnTypeTypeParameter()","0","-","-","-","-"
"3235","missingTypeParameter","@Test
  public void missingTypeParameter()","0","-","-","-","-"
"3236","missingParameterType","@Test
  public void missingParameterType()","0","-","-","-","-"
"3237","missingAnnotation","@Test
  public void missingAnnotation()","0","-","-","-","-"
"3238","handlesRecursiveTypeParams","@Test
  public void handlesRecursiveTypeParams()","0","-","-","-","-"
"3239","handlesRecursiveType","@Test
  public void handlesRecursiveType()","0","-","-","-","-"
"3240","missingWildcardBound","@Test
  public void missingWildcardBound()","0","-","-","-","-"
"3241","missingIntersection","@Test
  public void missingIntersection()","0","-","-","-","-"
"3242","invalidAnnotationValue","@Test
  public void invalidAnnotationValue()","0","-","-","-","-"
"3243","getSupportedSourceVersion","@Override
    public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"3244","AssertingProcessor","AssertingProcessor(Consumer<ProcessingEnvironment> assertions)","0","-","-","-","-"
"3245","getSupportedAnnotationTypes","@Override
    public Set<String> getSupportedAnnotationTypes()","0","-","-","-","-"
"3246","process","@Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"3247","SimpleAnnotationMirror","private SimpleAnnotationMirror(
      TypeElement annotationType, Map<String, ? extends AnnotationValue> namedValues)","0","-","-","-","-"
"3248","of","/**
   * An object representing an","0","-","-","-","-"
"3249","of","/**
   * An object representing an","0","-","-","-","-"
"3250","getAnnotationType","@Override
  public DeclaredType getAnnotationType()","0","-","-","-","-"
"3251","getElementValues","@Override
  public Map<ExecutableElement, ? extends AnnotationValue> getElementValues()","0","-","-","-","-"
"3252","toString","@Override
  public String toString()","0","-","-","-","-"
"3253","equals","@Override
  public boolean equals(@Nullable Object other)","0","-","-","-","-"
"3254","hashCode","@Override
  public int hashCode()","0","-","-","-","-"
"3255","doEquivalent","@Override
        protected boolean doEquivalent(AnnotationValue left, AnnotationValue right)","0","-","-","-","-"
"3256","defaultAction","@Override
                protected Boolean defaultAction(Object left, AnnotationValue right)","0","-","-","-","-"
"3257","defaultAction","@Override
                            protected Object defaultAction(Object object, Void unused)","0","-","-","-","-"
"3258","visitAnnotation","@Override
                public Boolean visitAnnotation(AnnotationMirror left, AnnotationValue right)","0","-","-","-","-"
"3259","defaultAction","@Override
                        protected Boolean defaultAction(Object right, AnnotationMirror left)","0","-","-","-","-"
"3260","visitAnnotation","@Override
                        public Boolean visitAnnotation(
                            AnnotationMirror right, AnnotationMirror left)","0","-","-","-","-"
"3261","visitArray","@Override
                public Boolean visitArray(
                    List<? extends AnnotationValue> left, AnnotationValue right)","0","-","-","-","-"
"3262","defaultAction","@Override
                        protected Boolean defaultAction(
                            Object ignored, List<? extends AnnotationValue> alsoIgnored)","0","-","-","-","-"
"3263","visitArray","@SuppressWarnings(""unchecked"") // safe covariant cast
                        @Override
                        public Boolean visitArray(
                            List<? extends AnnotationValue> right,
                            List<? extends AnnotationValue> left)","0","-","-","-","-"
"3264","visitType","@Override
                public Boolean visitType(TypeMirror left, AnnotationValue right)","0","-","-","-","-"
"3265","defaultAction","@Override
                        protected Boolean defaultAction(Object ignored, TypeMirror alsoIgnored)","0","-","-","-","-"
"3266","visitType","@Override
                        public Boolean visitType(TypeMirror right, TypeMirror left)","0","-","-","-","-"
"3267","doHash","@Override
        protected int doHash(AnnotationValue value)","0","-","-","-","-"
"3268","visitAnnotation","@Override
                public Integer visitAnnotation(AnnotationMirror value, Void ignore)","0","-","-","-","-"
"3269","visitArray","@SuppressWarnings(""unchecked"") // safe covariant cast
                @Override
                public Integer visitArray(List<? extends AnnotationValue> values, Void ignore)","0","-","-","-","-"
"3270","visitType","@Override
                public Integer visitType(TypeMirror value, Void ignore)","0","-","-","-","-"
"3271","defaultAction","@Override
                protected Integer defaultAction(Object value, Void ignored)","0","-","-","-","-"
"3272","toString","@Override
        public String toString()","0","-","-","-","-"
"3273","equivalence","/**
   * Returns an","0","-","-","-","-"
"3274","DefaultVisitor","DefaultVisitor(Class<T> clazz)","0","-","-","-","-"
"3275","defaultAction","@Override
    public T defaultAction(Object o, Void unused)","0","-","-","-","-"
"3276","TypeMirrorVisitor","TypeMirrorVisitor()","0","-","-","-","-"
"3277","visitType","@Override
    public DeclaredType visitType(TypeMirror value, Void unused)","0","-","-","-","-"
"3278","getTypeMirror","/**
   * Returns the value as a class.
   *
   * @throws IllegalArgumentException if the value is not a class.
   */
  public static DeclaredType getTypeMirror(AnnotationValue value)","0","-","-","-","-"
"3279","AnnotationMirrorVisitor","AnnotationMirrorVisitor()","0","-","-","-","-"
"3280","visitAnnotation","@Override
    public AnnotationMirror visitAnnotation(AnnotationMirror value, Void unused)","0","-","-","-","-"
"3281","getAnnotationMirror","/**
   * Returns the value as an AnnotationMirror.
   *
   * @throws IllegalArgumentException if the value is not an annotation.
   */
  public static AnnotationMirror getAnnotationMirror(AnnotationValue value)","0","-","-","-","-"
"3282","EnumVisitor","EnumVisitor()","0","-","-","-","-"
"3283","visitEnumConstant","@Override
    public VariableElement visitEnumConstant(VariableElement value, Void unused)","0","-","-","-","-"
"3284","getEnum","/**
   * Returns the value as a VariableElement.
   *
   * @throws IllegalArgumentException if the value is not an enum.
   */
  public static VariableElement getEnum(AnnotationValue value)","0","-","-","-","-"
"3285","valueOfType","private static <T> T valueOfType(AnnotationValue annotationValue, Class<T> type)","0","-","-","-","-"
"3286","getString","/**
   * Returns the value as a string.
   *
   * @throws IllegalArgumentException if the value is not a string.
   */
  public static String getString(AnnotationValue value)","0","-","-","-","-"
"3287","getInt","/**
   * Returns the value as an int.
   *
   * @throws IllegalArgumentException if the value is not an int.
   */
  public static int getInt(AnnotationValue value)","0","-","-","-","-"
"3288","getLong","/**
   * Returns the value as a long.
   *
   * @throws IllegalArgumentException if the value is not a long.
   */
  public static long getLong(AnnotationValue value)","0","-","-","-","-"
"3289","getByte","/**
   * Returns the value as a byte.
   *
   * @throws IllegalArgumentException if the value is not a byte.
   */
  public static byte getByte(AnnotationValue value)","0","-","-","-","-"
"3290","getShort","/**
   * Returns the value as a short.
   *
   * @throws IllegalArgumentException if the value is not a short.
   */
  public static short getShort(AnnotationValue value)","0","-","-","-","-"
"3291","getFloat","/**
   * Returns the value as a float.
   *
   * @throws IllegalArgumentException if the value is not a float.
   */
  public static float getFloat(AnnotationValue value)","0","-","-","-","-"
"3292","getDouble","/**
   * Returns the value as a double.
   *
   * @throws IllegalArgumentException if the value is not a double.
   */
  public static double getDouble(AnnotationValue value)","0","-","-","-","-"
"3293","getBoolean","/**
   * Returns the value as a boolean.
   *
   * @throws IllegalArgumentException if the value is not a boolean.
   */
  public static boolean getBoolean(AnnotationValue value)","0","-","-","-","-"
"3294","getChar","/**
   * Returns the value as a char.
   *
   * @throws IllegalArgumentException if the value is not a char.
   */
  public static char getChar(AnnotationValue value)","0","-","-","-","-"
"3295","ArrayVisitor","ArrayVisitor(Function<AnnotationValue, T> visitT)","0","-","-","-","-"
"3296","defaultAction","@Override
    public ImmutableList<T> defaultAction(Object o, Void unused)","0","-","-","-","-"
"3297","visitArray","@Override
    public ImmutableList<T> visitArray(List<? extends AnnotationValue> values, Void unused)","0","-","-","-","-"
"3298","getTypeMirrors","/**
   * Returns the value as a list of classes.
   *
   * @throws IllegalArgumentException if the value is not an array of classes.
   */
  public static ImmutableList<DeclaredType> getTypeMirrors(AnnotationValue value)","0","-","-","-","-"
"3299","getAnnotationMirrors","/**
   * Returns the value as a list of annotations.
   *
   * @throws IllegalArgumentException if the value if not an array of annotations.
   */
  public static ImmutableList<AnnotationMirror> getAnnotationMirrors(AnnotationValue value)","0","-","-","-","-"
"3300","getEnums","/**
   * Returns the value as a list of enums.
   *
   * @throws IllegalArgumentException if the value is not an array of enums.
   */
  public static ImmutableList<VariableElement> getEnums(AnnotationValue value)","0","-","-","-","-"
"3301","getStrings","/**
   * Returns the value as a list of strings.
   *
   * @throws IllegalArgumentException if the value is not an array of strings.
   */
  public static ImmutableList<String> getStrings(AnnotationValue value)","0","-","-","-","-"
"3302","getInts","/**
   * Returns the value as a list of integers.
   *
   * @throws IllegalArgumentException if the value is not an array of ints.
   */
  public static ImmutableList<Integer> getInts(AnnotationValue value)","0","-","-","-","-"
"3303","getLongs","/**
   * Returns the value as a list of longs.
   *
   * @throws IllegalArgumentException if the value is not an array of longs.
   */
  public static ImmutableList<Long> getLongs(AnnotationValue value)","0","-","-","-","-"
"3304","getBytes","/**
   * Returns the value as a list of bytes.
   *
   * @throws IllegalArgumentException if the value is not an array of bytes.
   */
  public static ImmutableList<Byte> getBytes(AnnotationValue value)","0","-","-","-","-"
"3305","getShorts","/**
   * Returns the value as a list of shorts.
   *
   * @throws IllegalArgumentException if the value is not an array of shorts.
   */
  public static ImmutableList<Short> getShorts(AnnotationValue value)","0","-","-","-","-"
"3306","getFloats","/**
   * Returns the value as a list of floats.
   *
   * @throws IllegalArgumentException if the value is not an array of floats.
   */
  public static ImmutableList<Float> getFloats(AnnotationValue value)","0","-","-","-","-"
"3307","getDoubles","/**
   * Returns the value as a list of doubles.
   *
   * @throws IllegalArgumentException if the value is not an array of doubles.
   */
  public static ImmutableList<Double> getDoubles(AnnotationValue value)","0","-","-","-","-"
"3308","getBooleans","/**
   * Returns the value as a list of booleans.
   *
   * @throws IllegalArgumentException if the value is not an array of booleans.
   */
  public static ImmutableList<Boolean> getBooleans(AnnotationValue value)","0","-","-","-","-"
"3309","getChars","/**
   * Returns the value as a list of characters.
   *
   * @throws IllegalArgumentException if the value is not an array of chars.
   */
  public static ImmutableList<Character> getChars(AnnotationValue value)","0","-","-","-","-"
"3310","getAnnotationValues","/**
   * Returns the value as a list of","0","-","-","-","-"
"3311","toString","/**
   * Returns a string representation of the given annotation value, suitable for inclusion in a Java
   * source file as part of an annotation. For example, if","0","-","-","-","-"
"3312","AnnotationValues","private AnnotationValues()","0","-","-","-","-"
"3313","GeneratedAnnotationSpecs","private GeneratedAnnotationSpecs()","0","-","-","-","-"
"3314","generatedAnnotationSpec","/**
   * Returns","0","-","-","-","-"
"3315","generatedAnnotationSpec","/**
   * Returns","0","-","-","-","-"
"3316","generatedAnnotationSpec","/**
   * Returns","0","-","-","-","-"
"3317","generatedAnnotationSpec","/**
   * Returns","0","-","-","-","-"
"3318","generatedAnnotationSpecBuilder","private static Optional<AnnotationSpec.Builder> generatedAnnotationSpecBuilder(
      Elements elements, Class<?> processorClass)","0","-","-","-","-"
"3319","generatedAnnotationSpecBuilder","private static Optional<AnnotationSpec.Builder> generatedAnnotationSpecBuilder(
      Elements elements, SourceVersion sourceVersion, Class<?> processorClass)","0","-","-","-","-"
"3320","toImmutableList","/** Returns a collector for an","0","-","-","-","-"
"3321","toImmutableSet","/** Returns a collector for an","0","-","-","-","-"
"3322","toImmutableMap","/** Returns a collector for an","0","-","-","-","-"
"3323","toImmutableBiMap","/** Returns a collector for an","0","-","-","-","-"
"3324","MoreStreams","private MoreStreams()","0","-","-","-","-"
"3325","doEquivalent","@Override
    protected boolean doEquivalent(TypeMirror a, TypeMirror b)","0","-","-","-","-"
"3326","doHash","@Override
    protected int doHash(TypeMirror t)","0","-","-","-","-"
"3327","toString","@Override
    public String toString()","0","-","-","-","-"
"3328","equivalence","/**
   * Returns an","0","-","-","-","-"
"3329","ComparedElements","ComparedElements(
        Element a,
        ImmutableList<TypeMirror> aArguments,
        Element b,
        ImmutableList<TypeMirror> bArguments)","0","-","-","-","-"
"3330","equals","@Override
    public boolean equals(@Nullable Object o)","0","-","-","-","-"
"3331","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"3332","defaultAction","@Override
    protected Boolean defaultAction(TypeMirror a, EqualVisitorParam p)","0","-","-","-","-"
"3333","visitArray","@Override
    public Boolean visitArray(ArrayType a, EqualVisitorParam p)","0","-","-","-","-"
"3334","visitDeclared","@Override
    public Boolean visitDeclared(DeclaredType a, EqualVisitorParam p)","0","-","-","-","-"
"3335","visitError","@Override
    @SuppressWarnings(""TypeEquals"")
    public Boolean visitError(ErrorType a, EqualVisitorParam p)","0","-","-","-","-"
"3336","visitExecutable","@Override
    public Boolean visitExecutable(ExecutableType a, EqualVisitorParam p)","0","-","-","-","-"
"3337","visitIntersection","@Override
    public Boolean visitIntersection(IntersectionType a, EqualVisitorParam p)","0","-","-","-","-"
"3338","visitTypeVariable","@Override
    public Boolean visitTypeVariable(TypeVariable a, EqualVisitorParam p)","0","-","-","-","-"
"3339","visitWildcard","@Override
    public Boolean visitWildcard(WildcardType a, EqualVisitorParam p)","0","-","-","-","-"
"3340","visitUnknown","@Override
    public Boolean visitUnknown(TypeMirror a, EqualVisitorParam p)","0","-","-","-","-"
"3341","visitingSetPlus","private Set<ComparedElements> visitingSetPlus(
        Set<ComparedElements> visiting, Element a, Element b)","0","-","-","-","-"
"3342","visitingSetPlus","private Set<ComparedElements> visitingSetPlus(
        Set<ComparedElements> visiting,
        Element a,
        List<? extends TypeMirror> aArguments,
        Element b,
        List<? extends TypeMirror> bArguments)","0","-","-","-","-"
"3343","equal","@SuppressWarnings(""TypeEquals"")
  private static boolean equal(
      @Nullable TypeMirror a, @Nullable TypeMirror b, Set<ComparedElements> visiting)","0","-","-","-","-"
"3344","enclosingType","/**
   * Returns the type of the innermost enclosing instance, or null if there is none. This is the
   * same as","0","-","-","-","-"
"3345","equalLists","private static boolean equalLists(
      List<? extends TypeMirror> a, List<? extends TypeMirror> b, Set<ComparedElements> visiting)","0","-","-","-","-"
"3346","hashKind","int hashKind(int seed, TypeMirror t)","0","-","-","-","-"
"3347","defaultAction","@Override
    protected Integer defaultAction(TypeMirror e, Set<Element> visiting)","0","-","-","-","-"
"3348","visitArray","@Override
    public Integer visitArray(ArrayType t, Set<Element> visiting)","0","-","-","-","-"
"3349","visitDeclared","@Override
    public Integer visitDeclared(DeclaredType t, Set<Element> visiting)","0","-","-","-","-"
"3350","visitExecutable","@Override
    public Integer visitExecutable(ExecutableType t, Set<Element> visiting)","0","-","-","-","-"
"3351","visitTypeVariable","@Override
    public Integer visitTypeVariable(TypeVariable t, Set<Element> visiting)","0","-","-","-","-"
"3352","visitWildcard","@Override
    public Integer visitWildcard(WildcardType t, Set<Element> visiting)","0","-","-","-","-"
"3353","visitUnknown","@Override
    public Integer visitUnknown(TypeMirror t, Set<Element> visiting)","0","-","-","-","-"
"3354","hashList","private static int hashList(List<? extends TypeMirror> mirrors, Set<Element> visiting)","0","-","-","-","-"
"3355","hash","private static int hash(TypeMirror mirror, Set<Element> visiting)","0","-","-","-","-"
"3356","referencedTypes","/**
   * Returns the set of","0","-","-","-","-"
"3357","visitArray","@Override
    public @Nullable Void visitArray(ArrayType t, ImmutableSet.Builder<TypeElement> p)","0","-","-","-","-"
"3358","visitDeclared","@Override
    public @Nullable Void visitDeclared(DeclaredType t, ImmutableSet.Builder<TypeElement> p)","0","-","-","-","-"
"3359","visitTypeVariable","@Override
    public @Nullable Void visitTypeVariable(TypeVariable t, ImmutableSet.Builder<TypeElement> p)","0","-","-","-","-"
"3360","visitWildcard","@Override
    public @Nullable Void visitWildcard(WildcardType t, ImmutableSet.Builder<TypeElement> p)","0","-","-","-","-"
"3361","asElement","/**
   * An alternate implementation of","0","-","-","-","-"
"3362","defaultAction","@Override
    protected Element defaultAction(TypeMirror e, Void p)","0","-","-","-","-"
"3363","visitDeclared","@Override
    public Element visitDeclared(DeclaredType t, Void p)","0","-","-","-","-"
"3364","visitError","@Override
    public Element visitError(ErrorType t, Void p)","0","-","-","-","-"
"3365","visitTypeVariable","@Override
    public Element visitTypeVariable(TypeVariable t, Void p)","0","-","-","-","-"
"3366","asTypeElement","public static TypeElement asTypeElement(TypeMirror mirror)","0","-","-","-","-"
"3367","asTypeElements","public static ImmutableSet<TypeElement> asTypeElements(Iterable<? extends TypeMirror> mirrors)","0","-","-","-","-"
"3368","asArray","/**
   * Returns a","0","-","-","-","-"
"3369","ArrayTypeVisitor","ArrayTypeVisitor()","0","-","-","-","-"
"3370","visitArray","@Override
    public ArrayType visitArray(ArrayType type, Void ignore)","0","-","-","-","-"
"3371","asDeclared","/**
   * Returns a","0","-","-","-","-"
"3372","DeclaredTypeVisitor","DeclaredTypeVisitor()","0","-","-","-","-"
"3373","visitDeclared","@Override
    public DeclaredType visitDeclared(DeclaredType type, Void ignore)","0","-","-","-","-"
"3374","asError","/**
   * Returns a","0","-","-","-","-"
"3375","ErrorTypeVisitor","ErrorTypeVisitor()","0","-","-","-","-"
"3376","visitError","@Override
    public ErrorType visitError(ErrorType type, Void ignore)","0","-","-","-","-"
"3377","asExecutable","/**
   * Returns a","0","-","-","-","-"
"3378","ExecutableTypeVisitor","ExecutableTypeVisitor()","0","-","-","-","-"
"3379","visitExecutable","@Override
    public ExecutableType visitExecutable(ExecutableType type, Void ignore)","0","-","-","-","-"
"3380","asIntersection","/**
   * Returns an","0","-","-","-","-"
"3381","IntersectionTypeVisitor","IntersectionTypeVisitor()","0","-","-","-","-"
"3382","visitIntersection","@Override
    public IntersectionType visitIntersection(IntersectionType type, Void ignore)","0","-","-","-","-"
"3383","asNoType","/**
   * Returns a","0","-","-","-","-"
"3384","NoTypeVisitor","NoTypeVisitor()","0","-","-","-","-"
"3385","visitNoType","@Override
    public NoType visitNoType(NoType type, Void ignore)","0","-","-","-","-"
"3386","asNullType","/**
   * Returns a","0","-","-","-","-"
"3387","NullTypeVisitor","NullTypeVisitor()","0","-","-","-","-"
"3388","visitNull","@Override
    public NullType visitNull(NullType type, Void ignore)","0","-","-","-","-"
"3389","asPrimitiveType","/**
   * Returns a","0","-","-","-","-"
"3390","PrimitiveTypeVisitor","PrimitiveTypeVisitor()","0","-","-","-","-"
"3391","visitPrimitive","@Override
    public PrimitiveType visitPrimitive(PrimitiveType type, Void ignore)","0","-","-","-","-"
"3392","asTypeVariable","/**
   * Returns a","0","-","-","-","-"
"3393","TypeVariableVisitor","TypeVariableVisitor()","0","-","-","-","-"
"3394","visitTypeVariable","@Override
    public TypeVariable visitTypeVariable(TypeVariable type, Void ignore)","0","-","-","-","-"
"3395","asWildcard","/**
   * Returns a","0","-","-","-","-"
"3396","WildcardTypeVisitor","WildcardTypeVisitor()","0","-","-","-","-"
"3397","visitWildcard","@Override
    public WildcardType visitWildcard(WildcardType type, Void ignore)","0","-","-","-","-"
"3398","isType","/**
   * Returns true if the raw type underlying the given","0","-","-","-","-"
"3399","defaultAction","@Override
    protected Boolean defaultAction(TypeMirror type, Void ignored)","0","-","-","-","-"
"3400","visitNoType","@Override
    public Boolean visitNoType(NoType noType, Void p)","0","-","-","-","-"
"3401","visitPrimitive","@Override
    public Boolean visitPrimitive(PrimitiveType type, Void p)","0","-","-","-","-"
"3402","visitArray","@Override
    public Boolean visitArray(ArrayType array, Void p)","0","-","-","-","-"
"3403","visitDeclared","@Override
    public Boolean visitDeclared(DeclaredType type, Void ignored)","0","-","-","-","-"
"3404","isTypeOf","/**
   * Returns true if the raw type underlying the given","0","-","-","-","-"
"3405","IsTypeOf","IsTypeOf(Class<?> clazz)","0","-","-","-","-"
"3406","defaultAction","@Override
    protected Boolean defaultAction(TypeMirror type, Void ignored)","0","-","-","-","-"
"3407","visitNoType","@Override
    public Boolean visitNoType(NoType noType, Void p)","0","-","-","-","-"
"3408","visitError","@Override
    public Boolean visitError(ErrorType errorType, Void p)","0","-","-","-","-"
"3409","visitPrimitive","@Override
    public Boolean visitPrimitive(PrimitiveType type, Void p)","0","-","-","-","-"
"3410","visitArray","@Override
    public Boolean visitArray(ArrayType array, Void p)","0","-","-","-","-"
"3411","visitDeclared","@Override
    public Boolean visitDeclared(DeclaredType type, Void ignored)","0","-","-","-","-"
"3412","nonObjectSuperclass","/**
   * Returns the superclass of","0","-","-","-","-"
"3413","isObjectType","private static boolean isObjectType(DeclaredType type)","0","-","-","-","-"
"3414","asMemberOf","/**
   * Resolves a","0","-","-","-","-"
"3415","CastingTypeVisitor","CastingTypeVisitor(String label)","0","-","-","-","-"
"3416","defaultAction","@Override
    protected T defaultAction(TypeMirror e, Void v)","0","-","-","-","-"
"3417","isConversionFromObjectUnchecked","/**
   * Returns true if casting","0","-","-","-","-"
"3418","CastingUncheckedVisitor","CastingUncheckedVisitor()","0","-","-","-","-"
"3419","visitUnknown","@Override
    public Boolean visitUnknown(TypeMirror t, Void p)","0","-","-","-","-"
"3420","visitArray","@Override
    public Boolean visitArray(ArrayType t, Void p)","0","-","-","-","-"
"3421","visitDeclared","@Override
    public Boolean visitDeclared(DeclaredType t, Void p)","0","-","-","-","-"
"3422","visitTypeVariable","@Override
    public Boolean visitTypeVariable(TypeVariable t, Void p)","0","-","-","-","-"
"3423","uncheckedTypeArgument","private static boolean uncheckedTypeArgument(TypeMirror arg)","0","-","-","-","-"
"3424","isJavaLangObject","private static boolean isJavaLangObject(TypeMirror type)","0","-","-","-","-"
"3425","MoreTypes","private MoreTypes()","0","-","-","-","-"
"3426","AnnotationOutput","private AnnotationOutput()","0","-","-","-","-"
"3427","formatType","private String formatType(TypeMirror typeMirror)","0","-","-","-","-"
"3428","defaultAction","@Override
    protected @Nullable Void defaultAction(Object value, StringBuilder sb)","0","-","-","-","-"
"3429","visitArray","@Override
    public @Nullable Void visitArray(List<? extends AnnotationValue> values, StringBuilder sb)","0","-","-","-","-"
"3430","visitByte","@Override
    public @Nullable Void visitByte(byte b, StringBuilder sb)","0","-","-","-","-"
"3431","visitShort","@Override
    public @Nullable Void visitShort(short s, StringBuilder sb)","0","-","-","-","-"
"3432","visitChar","@Override
    public @Nullable Void visitChar(char c, StringBuilder sb)","0","-","-","-","-"
"3433","visitLong","@Override
    public @Nullable Void visitLong(long i, StringBuilder sb)","0","-","-","-","-"
"3434","visitDouble","@Override
    public @Nullable Void visitDouble(double d, StringBuilder sb)","0","-","-","-","-"
"3435","visitFloat","@Override
    public @Nullable Void visitFloat(float f, StringBuilder sb)","0","-","-","-","-"
"3436","visitEnumConstant","@Override
    public @Nullable Void visitEnumConstant(VariableElement c, StringBuilder sb)","0","-","-","-","-"
"3437","visitString","@Override
    public @Nullable Void visitString(String s, StringBuilder sb)","0","-","-","-","-"
"3438","visitType","@Override
    public @Nullable Void visitType(TypeMirror classConstant, StringBuilder sb)","0","-","-","-","-"
"3439","visitAnnotation","@Override
    public @Nullable Void visitAnnotation(AnnotationMirror a, StringBuilder sb)","0","-","-","-","-"
"3440","maybeShorten","private static AnnotationValue maybeShorten(AnnotationValue value)","0","-","-","-","-"
"3441","visitArray","@Override
        public AnnotationValue visitArray(
            List<? extends AnnotationValue> values, AnnotationValue input)","0","-","-","-","-"
"3442","defaultAction","@Override
        protected AnnotationValue defaultAction(Object o, AnnotationValue input)","0","-","-","-","-"
"3443","shortForm","private static Optional<AnnotationValue> shortForm(
      Map<ExecutableElement, AnnotationValue> values)","0","-","-","-","-"
"3444","toString","/**
   * Returns a string representation of the given annotation value, suitable for inclusion in a Java
   * source file as the initializer of a variable of the appropriate type.
   */
  static String toString(AnnotationValue annotationValue)","0","-","-","-","-"
"3445","toString","/**
   * Returns a string representation of the given annotation mirror, suitable for inclusion in a
   * Java source file to reproduce the annotation in source form.
   */
  static String toString(AnnotationMirror annotationMirror)","0","-","-","-","-"
"3446","appendQuoted","private static StringBuilder appendQuoted(StringBuilder sb, String s)","0","-","-","-","-"
"3447","appendQuoted","private static StringBuilder appendQuoted(StringBuilder sb, char c)","0","-","-","-","-"
"3448","appendEscaped","private static void appendEscaped(StringBuilder sb, char c)","0","-","-","-","-"
"3449","GeneratedAnnotations","private GeneratedAnnotations()","0","-","-","-","-"
"3450","generatedAnnotation","/**
   * Returns the element corresponding to the version of the","0","-","-","-","-"
"3451","generatedAnnotation","/**
   * Returns the element corresponding to the","0","-","-","-","-"
"3452","overrides","abstract boolean overrides(
      ExecutableElement overrider, ExecutableElement overridden, TypeElement in);","0","-","-","-","-"
"3453","NativeOverrides","NativeOverrides(Elements elementUtils)","0","-","-","-","-"
"3454","overrides","@Override
    boolean overrides(ExecutableElement overrider, ExecutableElement overridden, TypeElement in)","0","-","-","-","-"
"3455","ExplicitOverrides","ExplicitOverrides(Types typeUtils)","0","-","-","-","-"
"3456","overrides","@Override
    public boolean overrides(
        ExecutableElement overrider, ExecutableElement overridden, TypeElement in)","0","-","-","-","-"
"3457","isSubsignature","private boolean isSubsignature(
        ExecutableElement overrider, ExecutableElement overridden, TypeElement in)","0","-","-","-","-"
"3458","erasedParameterTypes","/**
     * Returns the list of erased parameter types of the given method as they appear in the given
     * type. For example, if the method is","0","-","-","-","-"
"3459","erasedParameterTypes","@Nullable ImmutableList<TypeMirror> erasedParameterTypes(
          ExecutableElement method, TypeElement in)","0","-","-","-","-"
"3460","defaultAction","@Override
      protected TypeMirror defaultAction(TypeMirror e, Void p)","0","-","-","-","-"
"3461","visitTypeVariable","@Override
      public TypeMirror visitTypeVariable(TypeVariable t, Void p)","0","-","-","-","-"
"3462","visitDeclared","@Override
      public TypeMirror visitDeclared(DeclaredType t, Void p)","0","-","-","-","-"
"3463","visitArray","@Override
      public TypeMirror visitArray(ArrayType t, Void p)","0","-","-","-","-"
"3464","methodFromSuperclasses","/**
     * Returns the given method as it appears in the given type. This is the method itself, or the
     * nearest override in a superclass of the given type, or null if the method is not found in the
     * given type or any of its superclasses.
     */
    @Nullable ExecutableElement methodFromSuperclasses(TypeElement in, ExecutableElement method)","0","-","-","-","-"
"3465","methodFromSuperinterfaces","/**
     * Returns the given interface method as it appears in the given type. This is the method
     * itself, or the nearest override in a superinterface of the given type, or null if the method
     * is not found in the given type or any of its transitive superinterfaces.
     */
    @Nullable ExecutableElement methodFromSuperinterfaces(
        TypeElement in, ExecutableElement method)","0","-","-","-","-"
"3466","methodInType","/**
     * Returns the method from within the given type that has the same erased signature as the given
     * method, or null if there is no such method.
     */
    private @Nullable ExecutableElement methodInType(TypeElement type, ExecutableElement method)","0","-","-","-","-"
"3467","superclass","private @Nullable TypeElement superclass(TypeElement type)","0","-","-","-","-"
"3468","superinterfaces","private ImmutableList<TypeElement> superinterfaces(TypeElement type)","0","-","-","-","-"
"3469","asTypeElement","private TypeElement asTypeElement(TypeMirror typeMirror)","0","-","-","-","-"
"3470","init","@Override
  public final synchronized void init(ProcessingEnvironment processingEnv)","0","-","-","-","-"
"3471","initSteps","/**
   * Creates","0","-","-","-","-"
"3472","steps","/**
   * Creates","0","-","-","-","-"
"3473","postProcess","/**
   * An optional hook for logic to be executed at the end of each round.
   *
   * @deprecated use","0","-","-","-","-"
"3474","postRound","/** An optional hook for logic to be executed at the end of each round. */
  protected void postRound(RoundEnvironment roundEnv)","0","-","-","-","-"
"3475","getSupportedAnnotationTypeElements","private ImmutableSet<TypeElement> getSupportedAnnotationTypeElements()","0","-","-","-","-"
"3476","getSupportedAnnotationTypeElements","private ImmutableSet<TypeElement> getSupportedAnnotationTypeElements(Step step)","0","-","-","-","-"
"3477","getSupportedAnnotationTypes","/**
   * Returns the set of supported annotation types as collected from registered","0","-","-","-","-"
"3478","process","@Override
  public final boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"3479","process","/** Processes the valid elements, including those previously deferred by each step. */
  private void process(ImmutableSetMultimap<TypeElement, Element> wellFormedElements)","0","-","-","-","-"
"3480","reportMissingElements","private void reportMissingElements(Set<ElementFactory> missingElementFactories)","0","-","-","-","-"
"3481","processingErrorMessage","private String processingErrorMessage(String target)","0","-","-","-","-"
"3482","getWellFormedElementsByAnnotationType","/**
   * Returns the superficially validated annotated elements of this round, including the validated
   * previously ill-formed elements. Also update","0","-","-","-","-"
"3483","indexByAnnotation","private ImmutableSetMultimap<TypeElement, Element> indexByAnnotation(
      Set<ElementFactory> annotatedElementFactories, ImmutableSet<TypeElement> annotationTypes)","0","-","-","-","-"
"3484","findAnnotatedElements","/**
   * Adds","0","-","-","-","-"
"3485","getEnclosingType","/**
   * Returns the nearest enclosing","0","-","-","-","-"
"3486","toClassNameKeyedMultimap","private static ImmutableSetMultimap<String, Element> toClassNameKeyedMultimap(
      SetMultimap<TypeElement, Element> elements)","0","-","-","-","-"
"3487","isExecutable","private static boolean isExecutable(Element element)","0","-","-","-","-"
"3488","asStep","/**
   * Wraps the passed","0","-","-","-","-"
"3489","annotations","/**
     * The set of fully-qualified annotation type names processed by this step.
     *
     * <p>Warning: If the returned names are not names of annotations, they'll be ignored.
     */
    Set<String> annotations();","0","-","-","-","-"
"3490","process","/**
     * The implementation of processing logic for the step. It is guaranteed that the keys in","0","-","-","-","-"
"3491","annotations","/** The set of annotation types processed by this step. */
    Set<? extends Class<? extends Annotation>> annotations();","0","-","-","-","-"
"3492","process","/**
     * The implementation of processing logic for the step. It is guaranteed that the keys in","0","-","-","-","-"
"3493","ProcessingStepAsStep","ProcessingStepAsStep(ProcessingStep processingStep)","0","-","-","-","-"
"3494","annotations","@Override
    public Set<String> annotations()","0","-","-","-","-"
"3495","process","@Override
    public Set<? extends Element> process(
        ImmutableSetMultimap<String, Element> elementsByAnnotation)","0","-","-","-","-"
"3496","toClassKeyedMultimap","private ImmutableSetMultimap<Class<? extends Annotation>, Element> toClassKeyedMultimap(
        SetMultimap<String, Element> elements)","0","-","-","-","-"
"3497","ElementFactory","private ElementFactory(Element element)","0","-","-","-","-"
"3498","forAnnotatedElement","/** An","0","-","-","-","-"
"3499","equals","@Override
    public boolean equals(@Nullable Object object)","0","-","-","-","-"
"3500","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"3501","getElement","/**
     * Returns the","0","-","-","-","-"
"3502","UnsupportedElementFactory","private UnsupportedElementFactory(Element element)","0","-","-","-","-"
"3503","getElement","@Override
    Element getElement(Elements elementUtils)","0","-","-","-","-"
"3504","PackageElementFactory","private PackageElementFactory(Element element)","0","-","-","-","-"
"3505","getElement","@Override
    @Nullable PackageElement getElement(Elements elementUtils)","0","-","-","-","-"
"3506","TypeElementFactory","private TypeElementFactory(Element element)","0","-","-","-","-"
"3507","getElement","@Override
    @Nullable TypeElement getElement(Elements elementUtils)","0","-","-","-","-"
"3508","TypeParameterElementFactory","private TypeParameterElementFactory(Element element, Messager messager)","0","-","-","-","-"
"3509","getElement","@Override
    @Nullable TypeParameterElement getElement(Elements elementUtils)","0","-","-","-","-"
"3510","equals","@Override
    public boolean equals(@Nullable Object object)","0","-","-","-","-"
"3511","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"3512","FieldOrRecordComponentElementFactory","private FieldOrRecordComponentElementFactory(Element element)","0","-","-","-","-"
"3513","getElement","@Override
    @Nullable Element getElement(Elements elementUtils)","0","-","-","-","-"
"3514","equals","@Override
    public boolean equals(@Nullable Object object)","0","-","-","-","-"
"3515","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"3516","ExecutableElementFactory","private ExecutableElementFactory(Element element)","0","-","-","-","-"
"3517","getElement","@Override
    @Nullable ExecutableElement getElement(Elements elementUtils)","0","-","-","-","-"
"3518","sameNameMethods","private static ImmutableList<Element> sameNameMethods(
        TypeElement enclosingTypeElement, Name simpleName)","0","-","-","-","-"
"3519","equals","@Override
    public boolean equals(@Nullable Object object)","0","-","-","-","-"
"3520","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"3521","ParameterElementFactory","private ParameterElementFactory(Element element)","0","-","-","-","-"
"3522","getElement","@Override
    @Nullable VariableElement getElement(Elements elementUtils)","0","-","-","-","-"
"3523","equals","@Override
    public boolean equals(@Nullable Object object)","0","-","-","-","-"
"3524","hashCode","@Override
    public int hashCode()","0","-","-","-","-"
"3525","doEquivalent","@Override
        protected boolean doEquivalent(AnnotationMirror left, AnnotationMirror right)","0","-","-","-","-"
"3526","doHash","@Override
        protected int doHash(AnnotationMirror annotation)","0","-","-","-","-"
"3527","toString","@Override
        public String toString()","0","-","-","-","-"
"3528","equivalence","/**
   * Returns an","0","-","-","-","-"
"3529","getAnnotationValuesWithDefaults","/**
   * Returns the","0","-","-","-","-"
"3530","getAnnotationValue","/**
   * Returns an","0","-","-","-","-"
"3531","getAnnotationElementAndValue","/**
   * Returns a","0","-","-","-","-"
"3532","getAnnotatedAnnotations","/**
   * Returns all","0","-","-","-","-"
"3533","getAnnotatedAnnotations","/**
   * Returns all","0","-","-","-","-"
"3534","getAnnotatedAnnotations","/**
   * Returns all","0","-","-","-","-"
"3535","toString","/**
   * Returns a string representation of the given annotation mirror, suitable for inclusion in a
   * Java source file to reproduce the annotation in source form.
   *
   * <p>Fully qualified names are used for types in annotations, class literals, and enum constants,
   * ensuring that the source form will compile without requiring additional imports.
   */
  public static String toString(AnnotationMirror annotationMirror)","0","-","-","-","-"
"3536","AnnotationMirrors","private AnnotationMirrors()","0","-","-","-","-"
"3537","validateElements","/**
   * Returns true if all of the given elements return true from","0","-","-","-","-"
"3538","visitPackage","@Override
        public Boolean visitPackage(PackageElement e, Void p)","0","-","-","-","-"
"3539","visitType","@Override
        public Boolean visitType(TypeElement e, Void p)","0","-","-","-","-"
"3540","visitVariable","@Override
        public Boolean visitVariable(VariableElement e, Void p)","0","-","-","-","-"
"3541","visitExecutable","@Override
        public Boolean visitExecutable(ExecutableElement e, Void p)","0","-","-","-","-"
"3542","visitTypeParameter","@Override
        public Boolean visitTypeParameter(TypeParameterElement e, Void p)","0","-","-","-","-"
"3543","visitUnknown","@Override
        public Boolean visitUnknown(Element e, Void p)","0","-","-","-","-"
"3544","validateElement","/**
   * Returns true if all types referenced by the given element are defined. The exact meaning of
   * this depends on the kind of element. For packages, it means that all annotations on the package
   * are fully defined. For other element kinds, it means that types referenced by the element,
   * anything it contains, and any of its annotations element are all defined.
   */
  public static boolean validateElement(Element element)","0","-","-","-","-"
"3545","isValidBaseElement","private static boolean isValidBaseElement(Element e)","0","-","-","-","-"
"3546","validateTypes","private static boolean validateTypes(Iterable<? extends TypeMirror> types)","0","-","-","-","-"
"3547","defaultAction","@Override
        protected Boolean defaultAction(TypeMirror t, Void p)","0","-","-","-","-"
"3548","visitArray","@Override
        public Boolean visitArray(ArrayType t, Void p)","0","-","-","-","-"
"3549","visitDeclared","@Override
        public Boolean visitDeclared(DeclaredType t, Void p)","0","-","-","-","-"
"3550","visitError","@Override
        public Boolean visitError(ErrorType t, Void p)","0","-","-","-","-"
"3551","visitUnknown","@Override
        public Boolean visitUnknown(TypeMirror t, Void p)","0","-","-","-","-"
"3552","visitWildcard","@Override
        public Boolean visitWildcard(WildcardType t, Void p)","0","-","-","-","-"
"3553","visitExecutable","@Override
        public Boolean visitExecutable(ExecutableType t, Void p)","0","-","-","-","-"
"3554","validateType","/**
   * Returns true if the given type is fully defined. This means that the type itself is defined, as
   * are any types it references, such as any type arguments or type bounds. For an","0","-","-","-","-"
"3555","validateAnnotations","private static boolean validateAnnotations(
      Iterable<? extends AnnotationMirror> annotationMirrors)","0","-","-","-","-"
"3556","validateAnnotation","private static boolean validateAnnotation(AnnotationMirror annotationMirror)","0","-","-","-","-"
"3557","validateAnnotationValues","private static boolean validateAnnotationValues(
      Map<? extends ExecutableElement, ? extends AnnotationValue> valueMap)","0","-","-","-","-"
"3558","defaultAction","@Override
        protected Boolean defaultAction(Object o, TypeMirror expectedType)","0","-","-","-","-"
"3559","visitUnknown","@Override
        public Boolean visitUnknown(AnnotationValue av, TypeMirror expectedType)","0","-","-","-","-"
"3560","visitAnnotation","@Override
        public Boolean visitAnnotation(AnnotationMirror a, TypeMirror expectedType)","0","-","-","-","-"
"3561","visitArray","@Override
        public Boolean visitArray(List<? extends AnnotationValue> values, TypeMirror expectedType)","0","-","-","-","-"
"3562","visitEnumConstant","@Override
        public Boolean visitEnumConstant(VariableElement enumConstant, TypeMirror expectedType)","0","-","-","-","-"
"3563","visitType","@Override
        public Boolean visitType(TypeMirror type, TypeMirror ignored)","0","-","-","-","-"
"3564","visitBoolean","@Override
        public Boolean visitBoolean(boolean b, TypeMirror expectedType)","0","-","-","-","-"
"3565","visitByte","@Override
        public Boolean visitByte(byte b, TypeMirror expectedType)","0","-","-","-","-"
"3566","visitChar","@Override
        public Boolean visitChar(char c, TypeMirror expectedType)","0","-","-","-","-"
"3567","visitDouble","@Override
        public Boolean visitDouble(double d, TypeMirror expectedType)","0","-","-","-","-"
"3568","visitFloat","@Override
        public Boolean visitFloat(float f, TypeMirror expectedType)","0","-","-","-","-"
"3569","visitInt","@Override
        public Boolean visitInt(int i, TypeMirror expectedType)","0","-","-","-","-"
"3570","visitLong","@Override
        public Boolean visitLong(long l, TypeMirror expectedType)","0","-","-","-","-"
"3571","visitShort","@Override
        public Boolean visitShort(short s, TypeMirror expectedType)","0","-","-","-","-"
"3572","validateAnnotationValue","private static boolean validateAnnotationValue(
      AnnotationValue annotationValue, TypeMirror expectedType)","0","-","-","-","-"
"3573","SuperficialValidation","private SuperficialValidation()","0","-","-","-","-"
"3574","SimpleTypeAnnotationValue","private SimpleTypeAnnotationValue(TypeMirror value)","0","-","-","-","-"
"3575","of","/**
   * An object representing an annotation value instance.
   *
   * @param value a primitive, array, or non-parameterized declared type
   */
  public static AnnotationValue of(TypeMirror value)","0","-","-","-","-"
"3576","getValue","@Override
  public TypeMirror getValue()","0","-","-","-","-"
"3577","toString","@Override
  public String toString()","0","-","-","-","-"
"3578","accept","@Override
  public <R, P> R accept(AnnotationValueVisitor<R, P> visitor, P parameter)","0","-","-","-","-"
"3579","getPackage","/**
   * An alternate implementation of","0","-","-","-","-"
"3580","PackageElementVisitor","PackageElementVisitor()","0","-","-","-","-"
"3581","visitPackage","@Override
    public PackageElement visitPackage(PackageElement e, Void ignore)","0","-","-","-","-"
"3582","asPackage","/**
   * Returns the given","0","-","-","-","-"
"3583","TypeElementVisitor","TypeElementVisitor()","0","-","-","-","-"
"3584","visitType","@Override
    public TypeElement visitType(TypeElement e, Void ignore)","0","-","-","-","-"
"3585","isType","/**
   * Returns true if the given","0","-","-","-","-"
"3586","asType","/**
   * Returns the given","0","-","-","-","-"
"3587","asTypeParameter","/**
   * Returns the given","0","-","-","-","-"
"3588","TypeParameterElementVisitor","TypeParameterElementVisitor()","0","-","-","-","-"
"3589","visitTypeParameter","@Override
    public TypeParameterElement visitTypeParameter(TypeParameterElement e, Void ignore)","0","-","-","-","-"
"3590","VariableElementVisitor","VariableElementVisitor()","0","-","-","-","-"
"3591","visitVariable","@Override
    public VariableElement visitVariable(VariableElement e, Void ignore)","0","-","-","-","-"
"3592","asVariable","/**
   * Returns the given","0","-","-","-","-"
"3593","ExecutableElementVisitor","ExecutableElementVisitor()","0","-","-","-","-"
"3594","visitExecutable","@Override
    public ExecutableElement visitExecutable(ExecutableElement e, Void label)","0","-","-","-","-"
"3595","asExecutable","/**
   * Returns the given","0","-","-","-","-"
"3596","isAnnotationPresent","/**
   * Returns","0","-","-","-","-"
"3597","isAnnotationPresent","/**
   * Returns","0","-","-","-","-"
"3598","isAnnotationPresent","/**
   * Returns","0","-","-","-","-"
"3599","getAnnotationMirror","/**
   * Returns an","0","-","-","-","-"
"3600","getAnnotationMirror","/**
   * Returns an","0","-","-","-","-"
"3601","getAnnotationMirror","/**
   * Returns an","0","-","-","-","-"
"3602","hasModifiers","/**
   * Returns a","0","-","-","-","-"
"3603","hasModifiers","/**
   * Returns a","0","-","-","-","-"
"3604","apply","@Override
      public boolean apply(T input)","0","-","-","-","-"
"3605","getLocalAndInheritedMethods","/**
   * Returns the set of all non-private, non-static methods from","0","-","-","-","-"
"3606","getLocalAndInheritedMethods","/**
   * Returns the set of all non-private, non-static methods from","0","-","-","-","-"
"3607","getLocalAndInheritedMethods","private static ImmutableSet<ExecutableElement> getLocalAndInheritedMethods(
      TypeElement type, Overrides overrides)","0","-","-","-","-"
"3608","overrides","/**
   * Tests whether one method, as a member of a given type, overrides another method.
   *
   * <p>This method does the same thing as","0","-","-","-","-"
"3609","getAllMethods","/**
   * Returns the set of all methods from","0","-","-","-","-"
"3610","getAllMethods","private static ImmutableSet<ExecutableElement> getAllMethods(
      TypeElement type, Overrides overrides)","0","-","-","-","-"
"3611","getAllMethods","private static void getAllMethods(
      TypeElement type, SetMultimap<String, ExecutableElement> methods)","0","-","-","-","-"
"3612","methodVisibleFromPackage","static boolean methodVisibleFromPackage(ExecutableElement method, PackageElement pkg)","0","-","-","-","-"
"3613","CastingElementVisitor","CastingElementVisitor(String label)","0","-","-","-","-"
"3614","defaultAction","@Override
    protected final T defaultAction(Element e, Void ignore)","0","-","-","-","-"
"3615","MoreElements","private MoreElements()","0","-","-","-","-"
"3616","EnclosingGeneric","private EnclosingGeneric()","0","-","-","-","-"
"3617","autoService","@Test
  public void autoService()","0","-","-","-","-"
"3618","multiService","@Test
  public void multiService()","0","-","-","-","-"
"3619","badMultiService","@Test
  public void badMultiService()","0","-","-","-","-"
"3620","doesNotImplement_failsByDefault","@Test
  public void doesNotImplement_failsByDefault()","0","-","-","-","-"
"3621","doesNotImplement_succeedsWithVerifyFalse","@Test
  public void doesNotImplement_succeedsWithVerifyFalse()","0","-","-","-","-"
"3622","doesNotImplement_suppressed","@Test
  public void doesNotImplement_suppressed()","0","-","-","-","-"
"3623","generic","@Test
  public void generic()","0","-","-","-","-"
"3624","genericWithNoVerifyOption","@Test
  public void genericWithNoVerifyOption()","0","-","-","-","-"
"3625","genericWithExplicitVerify","@Test
  public void genericWithExplicitVerify()","0","-","-","-","-"
"3626","genericWithVerifyOptionAndSuppressWarings","@Test
  public void genericWithVerifyOptionAndSuppressWarings()","0","-","-","-","-"
"3627","nestedGenericWithVerifyOptionAndSuppressWarnings","@Test
  public void nestedGenericWithVerifyOptionAndSuppressWarnings()","0","-","-","-","-"
"3628","missing","@Test
  public void missing()","0","-","-","-","-"
"3629","autoServiceOnInterface","@Test
  public void autoServiceOnInterface()","0","-","-","-","-"
"3630","autoServiceOnAbstractClass","@Test
  public void autoServiceOnAbstractClass()","0","-","-","-","-"
"3631","ServicesFiles","private ServicesFiles()","0","-","-","-","-"
"3632","getPath","/**
   * Returns an absolute path to a service file given the class name of the service.
   *
   * @param serviceName not","0","-","-","-","-"
"3633","readServiceFile","/**
   * Reads the set of service classes from a service file.
   *
   * @param input not","0","-","-","-","-"
"3634","writeServiceFile","/**
   * Writes the set of service class names to a service file.
   *
   * @param output not","0","-","-","-","-"
"3635","getSupportedAnnotationTypes","@Override
  public ImmutableSet<String> getSupportedAnnotationTypes()","0","-","-","-","-"
"3636","getSupportedSourceVersion","@Override
  public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"3637","process","/**
   *
   *
   * <ol>
   *   <li>For each class annotated with","0","-","-","-","-"
"3638","exceptionStacks","ImmutableList<String> exceptionStacks()","0","-","-","-","-"
"3639","processImpl","private void processImpl(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"3640","processAnnotations","private void processAnnotations(
      Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"3641","generateConfigFiles","private void generateConfigFiles()","0","-","-","-","-"
"3642","checkImplementer","/**
   * Verifies","0","-","-","-","-"
"3643","checkNotAbstract","private boolean checkNotAbstract(
      TypeElement providerImplementer, AnnotationMirror annotationMirror)","0","-","-","-","-"
"3644","suppresses","private static boolean suppresses(Element element, String warning)","0","-","-","-","-"
"3645","getBinaryName","/**
   * Returns the binary name of a reference type. For example,","0","-","-","-","-"
"3646","getBinaryNameImpl","private String getBinaryNameImpl(TypeElement element, String className)","0","-","-","-","-"
"3647","getValueFieldOfClasses","/**
   * Returns the contents of a","0","-","-","-","-"
"3648","visitType","@Override
              public ImmutableSet<DeclaredType> visitType(TypeMirror typeMirror, Void v)","0","-","-","-","-"
"3649","visitArray","@Override
              public ImmutableSet<DeclaredType> visitArray(
                  List<? extends AnnotationValue> values, Void v)","0","-","-","-","-"
"3650","log","private void log(String msg)","0","-","-","-","-"
"3651","warning","private void warning(String msg, Element element, AnnotationMirror annotation)","0","-","-","-","-"
"3652","error","private void error(String msg, Element element, AnnotationMirror annotation)","0","-","-","-","-"
"3653","fatalError","private void fatalError(String msg)","0","-","-","-","-"
"3654","SimpleClassVarargsFactory","@Inject
  SimpleClassVarargsFactory()","0","-","-","-","-"
"3655","create","SimpleClassVarargs create(String... args)","0","-","-","-","-"
"3656","build","@Override
  public SimpleClassVarargs build(String... args)","0","-","-","-","-"
"3657","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3658","NestedClasses_SimpleNestedClassFactory","@Inject
  NestedClasses_SimpleNestedClassFactory()","0","-","-","-","-"
"3659","create","NestedClasses.SimpleNestedClass create()","0","-","-","-","-"
"3660","FactoryExtendingAbstractClassFactory","@Inject
  FactoryExtendingAbstractClassFactory()","0","-","-","-","-"
"3661","create","FactoryExtendingAbstractClass create()","0","-","-","-","-"
"3662","newInstance","@Override
  public FactoryExtendingAbstractClass newInstance()","0","-","-","-","-"
"3663","SimpleClassNonFinalFactory","@Inject
  SimpleClassNonFinalFactory()","0","-","-","-","-"
"3664","create","SimpleClassNonFinal create()","0","-","-","-","-"
"3665","MultipleFactoriesImplementingInterface_ClassAFactory","@Inject
  MultipleFactoriesImplementingInterface_ClassAFactory()","0","-","-","-","-"
"3666","create","MultipleFactoriesImplementingInterface.ClassA create()","0","-","-","-","-"
"3667","abstractNonDefaultCreate","@Override
  public MultipleFactoriesImplementingInterface.ClassA abstractNonDefaultCreate()","0","-","-","-","-"
"3668","CustomNamedFactory","@Inject
  CustomNamedFactory()","0","-","-","-","-"
"3669","create","SimpleClassCustomName create()","0","-","-","-","-"
"3670","FactoryImplementingGenericInterfaceExtensionFactory","@Inject
  FactoryImplementingGenericInterfaceExtensionFactory(Provider<String> sProvider)","0","-","-","-","-"
"3671","create","FactoryImplementingGenericInterfaceExtension create(Integer i)","0","-","-","-","-"
"3672","make","@Override
  public FactoryImplementingGenericInterfaceExtension make(Integer arg)","0","-","-","-","-"
"3673","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3674","SimpleClassProvidedProviderDepsFactory","@Inject
  SimpleClassProvidedProviderDepsFactory(
      @AQualifier Provider<String> providedDepAProvider,
      @BQualifier Provider<String> providedDepBProvider)","0","-","-","-","-"
"3675","create","SimpleClassProvidedProviderDeps create()","0","-","-","-","-"
"3676","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3677","ConstructorAnnotatedNonFinalFactory","@Inject
  ConstructorAnnotatedNonFinalFactory(Provider<Object> objProvider)","0","-","-","-","-"
"3678","create","ConstructorAnnotatedNonFinal create()","0","-","-","-","-"
"3679","create","ConstructorAnnotatedNonFinal create(String s)","0","-","-","-","-"
"3680","create","ConstructorAnnotatedNonFinal create(int i)","0","-","-","-","-"
"3681","create","ConstructorAnnotatedNonFinal create(char c)","0","-","-","-","-"
"3682","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3683","CustomAnnotationsFactory","@Inject
  CustomAnnotationsFactory()","0","-","-","-","-"
"3684","create","CustomAnnotations create()","0","-","-","-","-"
"3685","SimpleClassFactory","@Inject
  SimpleClassFactory()","0","-","-","-","-"
"3686","create","SimpleClass create()","0","-","-","-","-"
"3687","FactoryExtendingAbstractClassThrowsFactory","@Inject
  FactoryExtendingAbstractClassThrowsFactory()","0","-","-","-","-"
"3688","create","FactoryExtendingAbstractClassThrows create() throws IOException, InterruptedException","0","-","-","-","-"
"3689","newInstance","@Override
  public FactoryExtendingAbstractClassThrows newInstance() throws Exception","0","-","-","-","-"
"3690","MultipleFactoriesImplementingInterface_ClassBFactory","@Inject
  MultipleFactoriesImplementingInterface_ClassBFactory()","0","-","-","-","-"
"3691","create","MultipleFactoriesImplementingInterface.ClassB create()","0","-","-","-","-"
"3692","abstractNonDefaultCreate","@Override
  public MultipleFactoriesImplementingInterface.ClassB abstractNonDefaultCreate()","0","-","-","-","-"
"3693","ConstructorAnnotatedFactory","@Inject
  ConstructorAnnotatedFactory(Provider<Object> objProvider)","0","-","-","-","-"
"3694","create","ConstructorAnnotated create()","0","-","-","-","-"
"3695","create","ConstructorAnnotated create(String s)","0","-","-","-","-"
"3696","create","ConstructorAnnotated create(int i)","0","-","-","-","-"
"3697","create","ConstructorAnnotated create(char c)","0","-","-","-","-"
"3698","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3699","OnlyPrimitivesFactory","@Inject
  OnlyPrimitivesFactory()","0","-","-","-","-"
"3700","create","OnlyPrimitives create(int i, long l)","0","-","-","-","-"
"3701","NestedClassCustomNamedFactory","@Inject
  NestedClassCustomNamedFactory()","0","-","-","-","-"
"3702","create","NestedClasses.SimpleNestedClassWithCustomFactory create()","0","-","-","-","-"
"3703","SimpleClassMixedDepsFactory","@Inject
  SimpleClassMixedDepsFactory(@AQualifier Provider<String> providedDepAProvider)","0","-","-","-","-"
"3704","create","SimpleClassMixedDeps create(String depB)","0","-","-","-","-"
"3705","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3706","SimpleClassNullableParametersFactory","@Inject
  SimpleClassNullableParametersFactory(
      Provider<String> providedNullableProvider,
      @BQualifier Provider<String> providedQualifiedNullableProvider)","0","-","-","-","-"
"3707","create","SimpleClassNullableParameters create(
      @Nullable String nullable, @Nullable @AQualifier String qualifiedNullable)","0","-","-","-","-"
"3708","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3709","SimpleClassImplementingMarkerFactory","@Inject
  SimpleClassImplementingMarkerFactory()","0","-","-","-","-"
"3710","create","SimpleClassImplementingMarker create()","0","-","-","-","-"
"3711","SimpleClassThrowsFactory","@Inject
  SimpleClassThrowsFactory()","0","-","-","-","-"
"3712","create","SimpleClassThrows create() throws IOException, InterruptedException","0","-","-","-","-"
"3713","MultipleProvidedParamsSameKeyFactory","@Inject
  MultipleProvidedParamsSameKeyFactory(Provider<String> java_lang_StringProvider)","0","-","-","-","-"
"3714","create","MultipleProvidedParamsSameKey create()","0","-","-","-","-"
"3715","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3716","ProviderArgumentToCreateMethodFactory","@Inject
  ProviderArgumentToCreateMethodFactory()","0","-","-","-","-"
"3717","create","ProviderArgumentToCreateMethod create(Provider<String> stringProvider)","0","-","-","-","-"
"3718","newInstance","@Override
  public ProviderArgumentToCreateMethod newInstance(Provider<String> stringProvider)","0","-","-","-","-"
"3719","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3720","DefaultPackageFactory","@Inject
  public DefaultPackageFactory()","0","-","-","-","-"
"3721","create","public DefaultPackage create()","0","-","-","-","-"
"3722","SimpleClassPassedDepsFactory","@Inject
  SimpleClassPassedDepsFactory()","0","-","-","-","-"
"3723","create","SimpleClassPassedDeps create(String depA, String depB)","0","-","-","-","-"
"3724","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3725","FactoryImplementingCreateMethod_ConcreteClassFactory","@Inject
  FactoryImplementingCreateMethod_ConcreteClassFactory()","0","-","-","-","-"
"3726","create","@Override
  public FactoryImplementingCreateMethod.ConcreteClass create()","0","-","-","-","-"
"3727","create","@Override
  public FactoryImplementingCreateMethod.ConcreteClass create(int aDifferentArgumentName)","0","-","-","-","-"
"3728","create","@Override
  public FactoryImplementingCreateMethod.ConcreteClass create(
      List<Integer> genericWithDifferentArgumentName)","0","-","-","-","-"
"3729","create","FactoryImplementingCreateMethod.ConcreteClass create(int a, boolean b)","0","-","-","-","-"
"3730","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3731","SimpleClassProvidedDepsFactory","@Inject
  SimpleClassProvidedDepsFactory(
      @AQualifier Provider<Integer> providedPrimitiveAProvider,
      @BQualifier Provider<Integer> providedPrimitiveBProvider,
      @AQualifier Provider<String> providedDepAProvider,
      @BQualifier Provider<String> providedDepBProvider)","0","-","-","-","-"
"3732","create","SimpleClassProvidedDeps create()","0","-","-","-","-"
"3733","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3734","SimpleClassImplementingSimpleInterfaceFactory","@Inject
  SimpleClassImplementingSimpleInterfaceFactory()","0","-","-","-","-"
"3735","create","SimpleClassImplementingSimpleInterface create()","0","-","-","-","-"
"3736","newInstance","@Override
  public SimpleClassImplementingSimpleInterface newInstance()","0","-","-","-","-"
"3737","CheckerFrameworkNullableFactory","@Inject
  CheckerFrameworkNullableFactory(
      Provider<String> java_lang_StringProvider,
      Provider<Map.@NullableType Entry<?, ?>> providedNestedNullableTypeProvider)","0","-","-","-","-"
"3738","create","CheckerFrameworkNullable create(
      @NullableDecl String nullableDecl,
      @NullableType String nullableType,
      Map.@NullableType Entry<?, ?> nestedNullableType)","0","-","-","-","-"
"3739","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3740","ClassUsingQualifierWithArgsFactory","@Inject
  ClassUsingQualifierWithArgsFactory(
      @QualifierWithArgs(name = ""Fred"", count = 3) Provider<String> providedDepAProvider)","0","-","-","-","-"
"3741","create","ClassUsingQualifierWithArgs create()","0","-","-","-","-"
"3742","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3743","Generics_ExplicitFooImplFactory","@Inject
  Generics_ExplicitFooImplFactory(Provider<M> unusedProvider)","0","-","-","-","-"
"3744","create","@Override
  public Generics.ExplicitFooImpl<M> create()","0","-","-","-","-"
"3745","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3746","Generics_FooImplWithClassFactory","@Inject
  Generics_FooImplWithClassFactory()","0","-","-","-","-"
"3747","create","@Override
  public Generics.FooImplWithClass<M> create()","0","-","-","-","-"
"3748","PublicClassFactory","@Inject
  public PublicClassFactory()","0","-","-","-","-"
"3749","create","public PublicClass create()","0","-","-","-","-"
"3750","Generics_FooImplFactory","@Inject
  Generics_FooImplFactory()","0","-","-","-","-"
"3751","create","@Override
  public Generics.FooImpl<M> create()","0","-","-","-","-"
"3752","ConstructorAnnotatedThrowsFactory","@Inject
  ConstructorAnnotatedThrowsFactory(Provider<Object> objProvider)","0","-","-","-","-"
"3753","create","ConstructorAnnotatedThrows create() throws IOException, InterruptedException","0","-","-","-","-"
"3754","create","ConstructorAnnotatedThrows create(String s)","0","-","-","-","-"
"3755","create","ConstructorAnnotatedThrows create(int i) throws IOException","0","-","-","-","-"
"3756","create","ConstructorAnnotatedThrows create(char c) throws InterruptedException","0","-","-","-","-"
"3757","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3758","CustomNullableFactory","@Inject
  CustomNullableFactory(Provider<Object> objectProvider)","0","-","-","-","-"
"3759","create","CustomNullable create(@CustomNullable.Nullable String string)","0","-","-","-","-"
"3760","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3761","MultipleFactoriesConflictingParameterNamesFactory","@Inject
  MultipleFactoriesConflictingParameterNamesFactory(
      Provider<String> stringProvider,
      Provider<Object> java_lang_ObjectProvider,
      @AQualifier Provider<String> stringProvider2,
      @AQualifier Provider<Object> _tests_AQualifier_java_lang_ObjectProvider)","0","-","-","-","-"
"3762","create","MultipleFactoriesConflictingParameterNames create(Object unused)","0","-","-","-","-"
"3763","create","MultipleFactoriesConflictingParameterNames create()","0","-","-","-","-"
"3764","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3765","ParameterAnnotationsFactory","@Inject
  ParameterAnnotationsFactory(Provider<@ParameterAnnotations.NullableType String> fooProvider)","0","-","-","-","-"
"3766","create","ParameterAnnotations create(
      @ParameterAnnotations.NullableParameter Integer bar,
      @ParameterAnnotations.Nullable Long baz,
      @ParameterAnnotations.NullableType Thread buh,
      @ParameterAnnotations.NullableParameterAndType String quux)","0","-","-","-","-"
"3767","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3768","MixedDepsImplementingInterfacesFactory","@Inject
  MixedDepsImplementingInterfacesFactory(Provider<String> sProvider)","0","-","-","-","-"
"3769","create","MixedDepsImplementingInterfaces create(int i)","0","-","-","-","-"
"3770","create","MixedDepsImplementingInterfaces create(Object o)","0","-","-","-","-"
"3771","fromInt","@Override
  public MixedDepsImplementingInterfaces fromInt(int i)","0","-","-","-","-"
"3772","fromObject","@Override
  public MixedDepsImplementingInterfaces fromObject(Object o)","0","-","-","-","-"
"3773","checkNotNull","private static <T> T checkNotNull(T reference, int argumentNumber, int argumentCount)","0","-","-","-","-"
"3774","MixedFinals","@AutoFactory(allowSubclasses = false)
  MixedFinals()","0","-","-","-","-"
"3775","MixedFinals","@AutoFactory(allowSubclasses = true)
  MixedFinals(String s)","0","-","-","-","-"
"3776","MixedFinals","@AutoFactory(allowSubclasses = true)
  MixedFinals(String s, Integer i)","0","-","-","-","-"
"3777","blah","void blah(Object a, @Provided Object b)","0","-","-","-","-"
"3778","AbstractFactory","protected AbstractFactory(Object obj)","0","-","-","-","-"
"3779","newInstance","abstract FactoryExtendingAbstractClassWithConstructorParams newInstance();","0","-","-","-","-"
"3780","ProvidedButNoAutoFactory","ProvidedButNoAutoFactory(Object a, @Provided Object b)","0","-","-","-","-"
"3781","SimpleClassThrows","SimpleClassThrows() throws IOException, InterruptedException","0","-","-","-","-"
"3782","ConstructorAnnotatedNonFinal","@AutoFactory(allowSubclasses = true)
  ConstructorAnnotatedNonFinal()","0","-","-","-","-"
"3783","ConstructorAnnotatedNonFinal","ConstructorAnnotatedNonFinal(Object obj)","0","-","-","-","-"
"3784","ConstructorAnnotatedNonFinal","@AutoFactory(allowSubclasses = true)
  ConstructorAnnotatedNonFinal(String s)","0","-","-","-","-"
"3785","ConstructorAnnotatedNonFinal","@AutoFactory(allowSubclasses = true)
  ConstructorAnnotatedNonFinal(@Provided Object obj, int i)","0","-","-","-","-"
"3786","ConstructorAnnotatedNonFinal","@AutoFactory(allowSubclasses = true)
  ConstructorAnnotatedNonFinal(@Provided Object obj, char c)","0","-","-","-","-"
"3787","SimpleClassVarargs","SimpleClassVarargs(String... args)","0","-","-","-","-"
"3788","build","SimpleClassVarargs build(String... args);","0","-","-","-","-"
"3789","create","Foo<M> create();","0","-","-","-","-"
"3790","FooImpl","FooImpl()","0","-","-","-","-"
"3791","ExplicitFooImpl","ExplicitFooImpl(@Provided M unused)","0","-","-","-","-"
"3792","create","abstract Foo<M> create();","0","-","-","-","-"
"3793","SimpleClassProvidedDeps","SimpleClassProvidedDeps(
      @Provided @AQualifier int providedPrimitiveA,
      @Provided @BQualifier int providedPrimitiveB,
      @Provided @AQualifier String providedDepA,
      @Provided @BQualifier String providedDepB)","0","-","-","-","-"
"3794","newInstance","abstract FactoryExtendingAbstractClass newInstance();","0","-","-","-","-"
"3795","SimpleClassMixedDeps","SimpleClassMixedDeps(@Provided @AQualifier String providedDepA, String depB)","0","-","-","-","-"
"3796","ConstructorAnnotated","@AutoFactory
  ConstructorAnnotated()","0","-","-","-","-"
"3797","ConstructorAnnotated","ConstructorAnnotated(Object obj)","0","-","-","-","-"
"3798","ConstructorAnnotated","@AutoFactory
  ConstructorAnnotated(String s)","0","-","-","-","-"
"3799","ConstructorAnnotated","@AutoFactory
  ConstructorAnnotated(@Provided Object obj, int i)","0","-","-","-","-"
"3800","ConstructorAnnotated","@AutoFactory
  ConstructorAnnotated(@Provided Object obj, char c)","0","-","-","-","-"
"3801","OnlyPrimitives","OnlyPrimitives(int i, long l)","0","-","-","-","-"
"3802","SimpleClassPassedDeps","SimpleClassPassedDeps(String depA, String depB)","0","-","-","-","-"
"3803","FactoryImplementingGenericInterfaceExtension","@AutoFactory(implementing = MyFactory.class)
  FactoryImplementingGenericInterfaceExtension(@Provided String s, Integer i)","0","-","-","-","-"
"3804","make","T make(S arg);","0","-","-","-","-"
"3805","create","Interface create();","0","-","-","-","-"
"3806","create","Interface create(int a);","0","-","-","-","-"
"3807","create","Interface create(List<Integer> generic);","0","-","-","-","-"
"3808","ConcreteClass","ConcreteClass()","0","-","-","-","-"
"3809","ConcreteClass","ConcreteClass(int aDifferentArgumentName)","0","-","-","-","-"
"3810","ConcreteClass","ConcreteClass(List<Integer> genericWithDifferentArgumentName)","0","-","-","-","-"
"3811","ConcreteClass","ConcreteClass(int a, boolean b)","0","-","-","-","-"
"3812","ConstructorAnnotatedThrows","@AutoFactory
  ConstructorAnnotatedThrows() throws IOException, InterruptedException","0","-","-","-","-"
"3813","ConstructorAnnotatedThrows","ConstructorAnnotatedThrows(Object obj)","0","-","-","-","-"
"3814","ConstructorAnnotatedThrows","@AutoFactory
  ConstructorAnnotatedThrows(String s)","0","-","-","-","-"
"3815","ConstructorAnnotatedThrows","@AutoFactory
  ConstructorAnnotatedThrows(@Provided Object obj, int i) throws IOException","0","-","-","-","-"
"3816","ConstructorAnnotatedThrows","@AutoFactory
  ConstructorAnnotatedThrows(@Provided Object obj, char c) throws InterruptedException","0","-","-","-","-"
"3817","FactoryExtendingAbstractClassThrows","FactoryExtendingAbstractClassThrows() throws IOException, InterruptedException","0","-","-","-","-"
"3818","newInstance","abstract FactoryExtendingAbstractClassThrows newInstance() throws Exception;","0","-","-","-","-"
"3819","SimpleClassProvidedProviderDeps","SimpleClassProvidedProviderDeps(
      @Provided @AQualifier Provider<String> providedDepA,
      @Provided @BQualifier Provider<String> providedDepB)","0","-","-","-","-"
"3820","MultipleProvidedParamsSameKey","public MultipleProvidedParamsSameKey(
      @Provided String one,
      @Provided String two,
      @Nullable @Provided String three,
      @Provided Provider<String> providerOne,
      @Provided Provider<String> providerTwo)","0","-","-","-","-"
"3821","MixedDepsImplementingInterfaces","@AutoFactory(implementing =","0","-","-","-","-"
"3822","MixedDepsImplementingInterfaces","@AutoFactory(implementing =","0","-","-","-","-"
"3823","fromInt","MixedDepsImplementingInterfaces fromInt(int i);","0","-","-","-","-"
"3824","fromObject","MixedDepsImplementingInterfaces fromObject(Object o);","0","-","-","-","-"
"3825","ParameterAnnotations","ParameterAnnotations(
      @Provided @NullableParameter @NullableType String foo,
      @NullableParameter Integer bar,
      @Nullable Long baz,
      @NullableType Thread buh,
      @NullableParameterAndType String quux)","0","-","-","-","-"
"3826","CheckerFrameworkNullable","CheckerFrameworkNullable(
      @NullableDecl String nullableDecl,
      @Provided @NullableDecl String providedNullableDecl,
      @NullableType String nullableType,
      @Provided @NullableType String providedNullableType,
      Map.@NullableType Entry<?, ?> nestedNullableType,
      @Provided Map.@NullableType Entry<?, ?> providedNestedNullableType)","0","-","-","-","-"
"3827","abstractNonDefaultCreate","public abstract Base abstractNonDefaultCreate();","0","-","-","-","-"
"3828","SimpleClassNullableParameters","SimpleClassNullableParameters(
      @Nullable String nullable,
      @Nullable @AQualifier String qualifiedNullable,
      @Nullable @Provided String providedNullable,
      @Nullable @Provided @BQualifier String providedQualifiedNullable)","0","-","-","-","-"
"3829","AbstractFactory","protected AbstractFactory(Object obj)","0","-","-","-","-"
"3830","AbstractFactory","protected AbstractFactory()","0","-","-","-","-"
"3831","newInstance","abstract FactoryExtendingAbstractClassWithMultipleConstructors newInstance();","0","-","-","-","-"
"3832","MultipleFactoriesConflictingParameterNames","@AutoFactory
  MultipleFactoriesConflictingParameterNames(
      @Provided String string,
      @Provided Object duplicatedKey_nameDoesntMatter,
      @Provided Provider<Object> duplicatedKeyProvider_nameDoesntMatter,
      // used to disambiguate with the second constructor since qualifiers aren't part of the type
      // system
      Object unused)","0","-","-","-","-"
"3833","MultipleFactoriesConflictingParameterNames","@AutoFactory
  MultipleFactoriesConflictingParameterNames(
      @Provided @AQualifier String string,
      @Provided @AQualifier Object qualifiedDuplicatedKey_nameDoesntMatter,
      @Provided @AQualifier Provider<Object> qualifiedDuplicatedKeyProvider_nameDoesntMatter)","0","-","-","-","-"
"3834","CustomNullable","CustomNullable(
      @CustomNullable.Nullable String string, @CustomNullable.Nullable @Provided Object object)","0","-","-","-","-"
"3835","ClassUsingQualifierWithArgs","ClassUsingQualifierWithArgs(
      @Provided @QualifierWithArgs(name = ""Fred"", count = 3) String providedDepA)","0","-","-","-","-"
"3836","newInstance","SimpleClassImplementingSimpleInterface newInstance();","0","-","-","-","-"
"3837","ProviderArgumentToCreateMethod","ProviderArgumentToCreateMethod(Provider<String> stringProvider)","0","-","-","-","-"
"3838","newInstance","ProviderArgumentToCreateMethod newInstance(Provider<String> stringProvider);","0","-","-","-","-"
"3839","identifiers","@Test
  public void identifiers()","0","-","-","-","-"
"3840","failsWithMixedFinals","@Test
  public void failsWithMixedFinals()","0","-","-","-","-"
"3841","providedButNoAutoFactory","@Test
  public void providedButNoAutoFactory()","0","-","-","-","-"
"3842","providedOnMethodParameter","@Test
  public void providedOnMethodParameter()","0","-","-","-","-"
"3843","invalidCustomName","@Test
  public void invalidCustomName()","0","-","-","-","-"
"3844","factoryExtendingAbstractClass_withConstructorParams","@Test
  public void factoryExtendingAbstractClass_withConstructorParams()","0","-","-","-","-"
"3845","factoryExtendingInterface","@Test
  public void factoryExtendingInterface()","0","-","-","-","-"
"3846","factoryExtendingEnum","@Test
  public void factoryExtendingEnum()","0","-","-","-","-"
"3847","factoryExtendingFinalClass","@Test
  public void factoryExtendingFinalClass()","0","-","-","-","-"
"3848","annotationsToApplyMultiple","/**
   * We don't currently allow you to have more than one","0","-","-","-","-"
"3849","annotationsToApplyRepeated","/**
   * We also don't allow you to have the same annotation appear more than once inside a given
   *","0","-","-","-","-"
"3850","annotationsToApplyNotAnnotations","@Test
  public void annotationsToApplyNotAnnotations()","0","-","-","-","-"
"3851","noInjectApi","@Test
  public void noInjectApi() throws Exception","0","-","-","-","-"
"3852","noInjectApiButNoAutoFactoryEither","/**
   * AutoFactoryProcessor shouldn't complain about the absence of","0","-","-","-","-"
"3853","AutoFactoryProcessorTest","public AutoFactoryProcessorTest(@TestParameter Config config)","0","-","-","-","-"
"3854","Config","Config(ImmutableList<InjectPackage> packagesOnClasspath, InjectPackage expectedPackage)","0","-","-","-","-"
"3855","Config","Config(
        ImmutableList<InjectPackage> packagesOnClasspath,
        InjectPackage expectedPackage,
        ImmutableList<String> options)","0","-","-","-","-"
"3856","fileForClass","static File fileForClass(String className)","0","-","-","-","-"
"3857","classpath","ImmutableList<File> classpath()","0","-","-","-","-"
"3858","javac","Compiler javac()","0","-","-","-","-"
"3859","explainGoldenFileFailures","@AfterClass
  public static void explainGoldenFileFailures()","0","-","-","-","-"
"3860","goldenTest","/**
   * Runs a golden-file test, and optionally updates the golden file if the test fails.
   *
   * <p>If the golden file does not match current generated output, and the environment variable
   *","0","-","-","-","-"
"3861","goldenFile","private JavaFileObject goldenFile(String resourceName)","0","-","-","-","-"
"3862","updateGoldenFile","private void updateGoldenFile(Compilation compilation, String className, String relativePath)
      throws IOException","0","-","-","-","-"
"3863","indexOfClassStartIn","private int indexOfClassStartIn(String content, String where)","0","-","-","-","-"
"3864","simpleClass","@Test
  public void simpleClass()","0","-","-","-","-"
"3865","simpleClassWithConstructorThrowsClause","@Test
  public void simpleClassWithConstructorThrowsClause()","0","-","-","-","-"
"3866","nestedClasses","@Test
  public void nestedClasses()","0","-","-","-","-"
"3867","simpleClassNonFinal","@Test
  public void simpleClassNonFinal()","0","-","-","-","-"
"3868","publicClass","@Test
  public void publicClass()","0","-","-","-","-"
"3869","simpleClassCustomName","@Test
  public void simpleClassCustomName()","0","-","-","-","-"
"3870","simpleClassMixedDeps","@Test
  public void simpleClassMixedDeps()","0","-","-","-","-"
"3871","simpleClassPassedDeps","@Test
  public void simpleClassPassedDeps()","0","-","-","-","-"
"3872","simpleClassProvidedDeps","@Test
  public void simpleClassProvidedDeps()","0","-","-","-","-"
"3873","simpleClassProvidedProviderDeps","@Test
  public void simpleClassProvidedProviderDeps()","0","-","-","-","-"
"3874","constructorAnnotated","@Test
  public void constructorAnnotated()","0","-","-","-","-"
"3875","constructorWithThrowsClauseAnnotated","@Test
  public void constructorWithThrowsClauseAnnotated()","0","-","-","-","-"
"3876","constructorAnnotatedNonFinal","@Test
  public void constructorAnnotatedNonFinal()","0","-","-","-","-"
"3877","simpleClassImplementingMarker","@Test
  public void simpleClassImplementingMarker()","0","-","-","-","-"
"3878","simpleClassImplementingSimpleInterface","@Test
  public void simpleClassImplementingSimpleInterface()","0","-","-","-","-"
"3879","mixedDepsImplementingInterfaces","@Test
  public void mixedDepsImplementingInterfaces()","0","-","-","-","-"
"3880","factoryExtendingAbstractClass","@Test
  public void factoryExtendingAbstractClass()","0","-","-","-","-"
"3881","factoryWithConstructorThrowsClauseExtendingAbstractClass","@Test
  public void factoryWithConstructorThrowsClauseExtendingAbstractClass()","0","-","-","-","-"
"3882","factoryExtendingAbstractClass_multipleConstructors","@Test
  public void factoryExtendingAbstractClass_multipleConstructors()","0","-","-","-","-"
"3883","factoryImplementingGenericInterfaceExtension","@Test
  public void factoryImplementingGenericInterfaceExtension()","0","-","-","-","-"
"3884","multipleFactoriesImpementingInterface","@Test
  public void multipleFactoriesImpementingInterface()","0","-","-","-","-"
"3885","classUsingQualifierWithArgs","@Test
  public void classUsingQualifierWithArgs()","0","-","-","-","-"
"3886","factoryImplementingInterfaceWhichRedeclaresCreateMethods","@Test
  public void factoryImplementingInterfaceWhichRedeclaresCreateMethods()","0","-","-","-","-"
"3887","nullableParams","@Test
  public void nullableParams()","0","-","-","-","-"
"3888","customNullableType","@Test
  public void customNullableType()","0","-","-","-","-"
"3889","checkerFrameworkNullableType","@Test
  public void checkerFrameworkNullableType()","0","-","-","-","-"
"3890","multipleProvidedParamsWithSameKey","@Test
  public void multipleProvidedParamsWithSameKey()","0","-","-","-","-"
"3891","providerArgumentToCreateMethod","@Test
  public void providerArgumentToCreateMethod()","0","-","-","-","-"
"3892","multipleFactoriesConflictingParameterNames","@Test
  public void multipleFactoriesConflictingParameterNames()","0","-","-","-","-"
"3893","factoryVarargs","@Test
  public void factoryVarargs()","0","-","-","-","-"
"3894","onlyPrimitives","@Test
  public void onlyPrimitives()","0","-","-","-","-"
"3895","defaultPackage","@Test
  public void defaultPackage()","0","-","-","-","-"
"3896","generics","@Test
  public void generics()","0","-","-","-","-"
"3897","parameterAnnotations","@Test
  public void parameterAnnotations()","0","-","-","-","-"
"3898","customAnnotations","@Test
  public void customAnnotations()","0","-","-","-","-"
"3899","loadExpectedFile","private JavaFileObject loadExpectedFile(String resourceName)","0","-","-","-","-"
"3900","isJavaxAnnotationProcessingGeneratedAvailable","private static boolean isJavaxAnnotationProcessingGeneratedAvailable()","0","-","-","-","-"
"3901","rewriteImports","private void rewriteImports(List<String> sourceLines)","0","-","-","-","-"
"3902","daggerInjectedFactory","@Test
  public void daggerInjectedFactory()","0","-","-","-","-"
"3903","daggerInjectedGenericFactory","@Test
  public void daggerInjectedGenericFactory()","0","-","-","-","-"
"3904","daggerInjectedPackageSpanningFactory","@Test
  public void daggerInjectedPackageSpanningFactory()","0","-","-","-","-"
"3905","guiceInjectedFactory","@Test
  public void guiceInjectedFactory()","0","-","-","-","-"
"3906","guiceInjectedGenericFactory","@Test
  public void guiceInjectedGenericFactory()","0","-","-","-","-"
"3907","guiceInjectedPackageSpanningFactory","@Test
  public void guiceInjectedPackageSpanningFactory()","0","-","-","-","-"
"3908","DaggerModule","private DaggerModule()","0","-","-","-","-"
"3909","provideDependency","@Binds
  abstract Dependency provideDependency(DependencyImpl impl);","0","-","-","-","-"
"3910","provideQualifiedDependency","@Binds
  @Qualifier
  abstract Dependency provideQualifiedDependency(QualifiedDependencyImpl impl);","0","-","-","-","-"
"3911","providePrimitive","@Provides
  static int providePrimitive()","0","-","-","-","-"
"3912","provideQualifiedPrimitive","@Provides
  @Qualifier
  static int provideQualifiedPrimitive()","0","-","-","-","-"
"3913","provideNumber","@Provides
  static Number provideNumber()","0","-","-","-","-"
"3914","provideReferencePackage","@Provides
  static ReferencePackage provideReferencePackage(ReferencePackageFactory factory)","0","-","-","-","-"
"3915","provideOtherPackage","@Provides
  static OtherPackage provideOtherPackage()","0","-","-","-","-"
"3916","generate","Foo generate(String name);","0","-","-","-","-"
"3917","ReferencePackage","@Inject
  ReferencePackage(@Provided OtherPackageFactory otherPackageFactory, int random)","0","-","-","-","-"
"3918","otherPackage","public OtherPackage otherPackage()","0","-","-","-","-"
"3919","factory","FooFactory factory();","0","-","-","-","-"
"3920","generatedFactory","GenericFooFactory<Number> generatedFactory();","0","-","-","-","-"
"3921","referencePackageFactory","ReferencePackageFactory referencePackageFactory();","0","-","-","-","-"
"3922","otherPackageFactory","OtherPackageFactory otherPackageFactory();","0","-","-","-","-"
"3923","GenericFoo","<D extends IntAccessor & StringAccessor> GenericFoo(
      @Provided Provider<A> depA, B depB, D depD, E depE)","0","-","-","-","-"
"3924","getDepA","public A getDepA()","0","-","-","-","-"
"3925","getDepB","public B getDepB()","0","-","-","-","-"
"3926","passThrough","public C passThrough(C value)","0","-","-","-","-"
"3927","getDepDIntAccessor","public IntAccessor getDepDIntAccessor()","0","-","-","-","-"
"3928","getDepDStringAccessor","public StringAccessor getDepDStringAccessor()","0","-","-","-","-"
"3929","getDepE","public E getDepE()","0","-","-","-","-"
"3930","Foo","Foo(
      String name,
      @Provided Dependency dependency,
      @Provided @Qualifier Provider<Dependency> dependencyProvider,
      @Provided int primitive,
      @Provided @Qualifier int qualifiedPrimitive)","0","-","-","-","-"
"3931","Foo","Foo(
      Object name,
      @Provided Dependency dependency2,
      @Provided @Qualifier Provider<Dependency> dependencyProvider,
      @Provided int primitive,
      @Provided @Qualifier int qualifiedPrimitive)","0","-","-","-","-"
"3932","name","String name()","0","-","-","-","-"
"3933","dependency","Dependency dependency()","0","-","-","-","-"
"3934","dependencyProvider","Provider<Dependency> dependencyProvider()","0","-","-","-","-"
"3935","primitive","int primitive()","0","-","-","-","-"
"3936","qualifiedPrimitive","int qualifiedPrimitive()","0","-","-","-","-"
"3937","configure","@Override
  protected void configure()","0","-","-","-","-"
"3938","OtherPackage","public OtherPackage(@Provided ReferencePackageFactory referencePackageFactory, int random)","0","-","-","-","-"
"3939","referencePackageFactory","public ReferencePackageFactory referencePackageFactory()","0","-","-","-","-"
"3940","random","public int random()","0","-","-","-","-"
"3941","QualifiedDependencyImpl","@Inject
  QualifiedDependencyImpl()","0","-","-","-","-"
"3942","DependencyImpl","@Inject
  DependencyImpl()","0","-","-","-","-"
"3943","targetType","abstract TypeElement targetType();","0","-","-","-","-"
"3944","target","abstract Element target();","0","-","-","-","-"
"3945","className","abstract Optional<String> className();","0","-","-","-","-"
"3946","annotations","abstract ImmutableSet<AnnotationMirror> annotations();","0","-","-","-","-"
"3947","extendingType","abstract TypeElement extendingType();","0","-","-","-","-"
"3948","implementingTypes","abstract ImmutableSet<TypeElement> implementingTypes();","0","-","-","-","-"
"3949","allowSubclasses","abstract boolean allowSubclasses();","0","-","-","-","-"
"3950","mirror","abstract AnnotationMirror mirror();","0","-","-","-","-"
"3951","valuesMap","abstract ImmutableMap<String, AnnotationValue> valuesMap();","0","-","-","-","-"
"3952","getFactoryName","PackageAndClass getFactoryName()","0","-","-","-","-"
"3953","targetEnclosingSimpleNames","private ImmutableList<String> targetEnclosingSimpleNames()","0","-","-","-","-"
"3954","Factory","Factory(Elements elements, Messager messager)","0","-","-","-","-"
"3955","createIfValid","Optional<AutoFactoryDeclaration> createIfValid(Element element)","0","-","-","-","-"
"3956","apply","@Override
                    public boolean apply(ExecutableElement constructor)","0","-","-","-","-"
"3957","getAnnotatedType","private static TypeElement getAnnotatedType(Element element)","0","-","-","-","-"
"3958","isValidIdentifier","static boolean isValidIdentifier(String identifier)","0","-","-","-","-"
"3959","annotationsToAdd","private ImmutableSet<AnnotationMirror> annotationsToAdd(Element element)","0","-","-","-","-"
"3960","AnnotationValues","private AnnotationValues()","0","-","-","-","-"
"3961","asBoolean","static boolean asBoolean(AnnotationValue value)","0","-","-","-","-"
"3962","defaultAction","@Override
          protected Boolean defaultAction(Object o, Void p)","0","-","-","-","-"
"3963","visitBoolean","@Override
          public Boolean visitBoolean(boolean b, Void p)","0","-","-","-","-"
"3964","asType","static TypeElement asType(AnnotationValue value)","0","-","-","-","-"
"3965","defaultAction","@Override
          protected TypeElement defaultAction(Object o, Void p)","0","-","-","-","-"
"3966","visitType","@Override
          public TypeElement visitType(TypeMirror t, Void p)","0","-","-","-","-"
"3967","defaultAction","@Override
                  protected TypeElement defaultAction(TypeMirror e, Void p)","0","-","-","-","-"
"3968","visitDeclared","@Override
                  public TypeElement visitDeclared(DeclaredType t, Void p)","0","-","-","-","-"
"3969","asList","static ImmutableList<? extends AnnotationValue> asList(AnnotationValue value)","0","-","-","-","-"
"3970","defaultAction","@Override
          protected ImmutableList<? extends AnnotationValue> defaultAction(Object o, Void p)","0","-","-","-","-"
"3971","visitArray","@Override
          public ImmutableList<? extends AnnotationValue> visitArray(
              List<? extends AnnotationValue> vals, Void p)","0","-","-","-","-"
"3972","declaration","abstract AutoFactoryDeclaration declaration();","0","-","-","-","-"
"3973","name","abstract String name();","0","-","-","-","-"
"3974","returnType","abstract TypeMirror returnType();","0","-","-","-","-"
"3975","publicMethod","abstract boolean publicMethod();","0","-","-","-","-"
"3976","overridingMethod","abstract boolean overridingMethod();","0","-","-","-","-"
"3977","passedParameters","/** The parameters that are passed to the","0","-","-","-","-"
"3978","providedParameters","/**
   * The factory constructor parameters that this factory method requires. When there is more than
   * one AutoFactory constructor, each one can have its own","0","-","-","-","-"
"3979","creationParameters","/**
   * The parameters of the constructor that this","0","-","-","-","-"
"3980","isVarArgs","abstract boolean isVarArgs();","0","-","-","-","-"
"3981","exceptions","abstract ImmutableSet<TypeMirror> exceptions();","0","-","-","-","-"
"3982","toBuilder","abstract Builder toBuilder();","0","-","-","-","-"
"3983","factoryName","final PackageAndClass factoryName()","0","-","-","-","-"
"3984","builder","static Builder builder(AutoFactoryDeclaration declaration)","0","-","-","-","-"
"3985","declaration","abstract Builder declaration(AutoFactoryDeclaration declaration);","0","-","-","-","-"
"3986","name","abstract Builder name(String name);","0","-","-","-","-"
"3987","returnType","abstract Builder returnType(TypeMirror returnType);","0","-","-","-","-"
"3988","publicMethod","abstract Builder publicMethod(boolean publicMethod);","0","-","-","-","-"
"3989","overridingMethod","abstract Builder overridingMethod(boolean overridingMethod);","0","-","-","-","-"
"3990","passedParameters","abstract Builder passedParameters(Iterable<Parameter> passedParameters);","0","-","-","-","-"
"3991","providedParameters","abstract Builder providedParameters(Iterable<Parameter> providedParameters);","0","-","-","-","-"
"3992","creationParameters","abstract Builder creationParameters(Iterable<Parameter> creationParameters);","0","-","-","-","-"
"3993","isVarArgs","abstract Builder isVarArgs(boolean isVarargs);","0","-","-","-","-"
"3994","exceptions","abstract Builder exceptions(Iterable<? extends TypeMirror> exceptions);","0","-","-","-","-"
"3995","buildImpl","abstract FactoryMethodDescriptor buildImpl();","0","-","-","-","-"
"3996","build","FactoryMethodDescriptor build()","0","-","-","-","-"
"3997","type","/**
   * The original type of the parameter, while","0","-","-","-","-"
"3998","isPrimitive","boolean isPrimitive()","0","-","-","-","-"
"3999","name","/** The name of the parameter. */
  abstract String name();","0","-","-","-","-"
"4000","key","abstract Key key();","0","-","-","-","-"
"4001","annotationWrappers","/** Annotations on the parameter (not its type). */
  abstract ImmutableList<Equivalence.Wrapper<AnnotationMirror>> annotationWrappers();","0","-","-","-","-"
"4002","annotations","ImmutableList<AnnotationMirror> annotations()","0","-","-","-","-"
"4003","nullableWrapper","abstract Optional<Equivalence.Wrapper<AnnotationMirror>> nullableWrapper();","0","-","-","-","-"
"4004","nullable","Optional<AnnotationMirror> nullable()","0","-","-","-","-"
"4005","forVariableElement","private static Parameter forVariableElement(
      VariableElement variable, TypeMirror type, Types types, InjectApi injectApi)","0","-","-","-","-"
"4006","isNullable","private static boolean isNullable(AnnotationMirror annotation)","0","-","-","-","-"
"4007","forParameterList","static ImmutableSet<Parameter> forParameterList(
      List<? extends VariableElement> variables,
      List<? extends TypeMirror> variableTypes,
      Types types,
      InjectApi injectApi)","0","-","-","-","-"
"4008","forParameterList","static ImmutableSet<Parameter> forParameterList(
      List<? extends VariableElement> variables, Types types, InjectApi injectApi)","0","-","-","-","-"
"4009","name","abstract String name();","0","-","-","-","-"
"4010","returnType","abstract TypeMirror returnType();","0","-","-","-","-"
"4011","publicMethod","abstract boolean publicMethod();","0","-","-","-","-"
"4012","passedParameters","abstract ImmutableSet<Parameter> passedParameters();","0","-","-","-","-"
"4013","isVarArgs","abstract boolean isVarArgs();","0","-","-","-","-"
"4014","exceptions","abstract ImmutableSet<TypeMirror> exceptions();","0","-","-","-","-"
"4015","builder","static Builder builder()","0","-","-","-","-"
"4016","name","abstract Builder name(String name);","0","-","-","-","-"
"4017","returnType","abstract Builder returnType(TypeMirror returnTypeElement);","0","-","-","-","-"
"4018","publicMethod","abstract Builder publicMethod(boolean publicMethod);","0","-","-","-","-"
"4019","publicMethod","final Builder publicMethod()","0","-","-","-","-"
"4020","passedParameters","abstract Builder passedParameters(Iterable<Parameter> passedParameters);","0","-","-","-","-"
"4021","isVarArgs","abstract Builder isVarArgs(boolean isVarargs);","0","-","-","-","-"
"4022","exceptions","abstract Builder exceptions(Iterable<? extends TypeMirror> exceptions);","0","-","-","-","-"
"4023","build","abstract ImplementationMethodDescriptor build();","0","-","-","-","-"
"4024","Mirrors","private Mirrors()","0","-","-","-","-"
"4025","getQualifiedName","static Name getQualifiedName(DeclaredType type)","0","-","-","-","-"
"4026","defaultAction","@Override
              protected Name defaultAction(Element e, Void p)","0","-","-","-","-"
"4027","visitType","@Override
              public Name visitType(TypeElement e, Void p)","0","-","-","-","-"
"4028","simplifyAnnotationValueMap","/**
   * Returns an annotation value map with","0","-","-","-","-"
"4029","getAnnotationMirror","/**
   * Get the","0","-","-","-","-"
"4030","wrapOptionalInEquivalence","/**
   * Wraps an","0","-","-","-","-"
"4031","unwrapOptionalEquivalence","/**
   * Unwraps an","0","-","-","-","-"
"4032","FactoryDescriptorGenerator","FactoryDescriptorGenerator(
      Messager messager,
      Types types,
      AutoFactoryDeclaration.Factory declarationFactory,
      InjectApi injectApi)","0","-","-","-","-"
"4033","generateDescriptor","ImmutableSet<FactoryMethodDescriptor> generateDescriptor(Element element)","0","-","-","-","-"
"4034","defaultAction","@Override
          protected ImmutableSet<FactoryMethodDescriptor> defaultAction(Element e, Void p)","0","-","-","-","-"
"4035","visitTypeAsClass","@Override
          public ImmutableSet<FactoryMethodDescriptor> visitTypeAsClass(TypeElement type, Void p)","0","-","-","-","-"
"4036","apply","@Override
                          public FactoryMethodDescriptor apply(ExecutableElement constructor)","0","-","-","-","-"
"4037","visitTypeAsInterface","@Override
          public ImmutableSet<FactoryMethodDescriptor> visitTypeAsInterface(
              TypeElement type, Void p)","0","-","-","-","-"
"4038","visitExecutableAsConstructor","@Override
          public ImmutableSet<FactoryMethodDescriptor> visitExecutableAsConstructor(
              ExecutableElement e, Void p)","0","-","-","-","-"
"4039","generateDescriptorForConstructor","FactoryMethodDescriptor generateDescriptorForConstructor(
      final AutoFactoryDeclaration declaration, ExecutableElement constructor)","0","-","-","-","-"
"4040","generateDescriptorForDefaultConstructor","private ImmutableSet<FactoryMethodDescriptor> generateDescriptorForDefaultConstructor(
      AutoFactoryDeclaration declaration, TypeElement type)","0","-","-","-","-"
"4041","init","@Override
  public synchronized void init(ProcessingEnvironment processingEnv)","0","-","-","-","-"
"4042","process","@Override
  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)","0","-","-","-","-"
"4043","doProcess","private void doProcess(RoundEnvironment roundEnv)","0","-","-","-","-"
"4044","implementationMethods","private ImmutableSet<ImplementationMethodDescriptor> implementationMethods(
      TypeElement supertype, Element autoFactoryElement)","0","-","-","-","-"
"4045","getAnnotatedType","private TypeMirror getAnnotatedType(Element element)","0","-","-","-","-"
"4046","simpleNamesToNames","private static ImmutableSetMultimap<String, PackageAndClass> simpleNamesToNames(
      ImmutableSet<PackageAndClass> names)","0","-","-","-","-"
"4047","newTypeSetBuilder","private static ImmutableSortedSet.Builder<TypeMirror> newTypeSetBuilder()","0","-","-","-","-"
"4048","checkAnnotationsToApply","/** Checks that","0","-","-","-","-"
"4049","getSupportedAnnotationTypes","@Override
  public ImmutableSet<String> getSupportedAnnotationTypes()","0","-","-","-","-"
"4050","getSupportedSourceVersion","@Override
  public SourceVersion getSupportedSourceVersion()","0","-","-","-","-"
"4051","inject","abstract TypeElement inject();","0","-","-","-","-"
"4052","provider","abstract TypeElement provider();","0","-","-","-","-"
"4053","qualifier","abstract TypeElement qualifier();","0","-","-","-","-"
"4054","from","static InjectApi from(Elements elementUtils, @Nullable String apiPrefix)","0","-","-","-","-"
"4055","isProvider","/** True if","0","-","-","-","-"
"4056","apiMap","private static ImmutableMap<String, TypeElement> apiMap(
      Elements elementUtils, String apiPackage)","0","-","-","-","-"
"4057","TypeVariables","private TypeVariables()","0","-","-","-","-"
"4058","getReferencedTypeVariables","static ImmutableSet<TypeVariable> getReferencedTypeVariables(TypeMirror type)","0","-","-","-","-"
"4059","ReferencedTypeVariables","ReferencedTypeVariables()","0","-","-","-","-"
"4060","visitArray","@Override
    public ImmutableSet<TypeVariable> visitArray(ArrayType t, Set<Element> visited)","0","-","-","-","-"
"4061","visitDeclared","@Override
    public ImmutableSet<TypeVariable> visitDeclared(DeclaredType t, Set<Element> visited)","0","-","-","-","-"
"4062","visitTypeVariable","@Override
    public ImmutableSet<TypeVariable> visitTypeVariable(TypeVariable t, Set<Element> visited)","0","-","-","-","-"
"4063","visitUnion","@Override
    public ImmutableSet<TypeVariable> visitUnion(UnionType t, Set<Element> visited)","0","-","-","-","-"
"4064","visitIntersection","@Override
    public ImmutableSet<TypeVariable> visitIntersection(IntersectionType t, Set<Element> visited)","0","-","-","-","-"
"4065","visitWildcard","@Override
    public ImmutableSet<TypeVariable> visitWildcard(WildcardType t, Set<Element> visited)","0","-","-","-","-"
"4066","ProvidedChecker","ProvidedChecker(Messager messager)","0","-","-","-","-"
"4067","checkProvidedParameter","void checkProvidedParameter(Element element)","0","-","-","-","-"
"4068","defaultAction","@Override
          protected @Nullable Void defaultAction(Element e, @Nullable Void p)","0","-","-","-","-"
"4069","visitVariableAsParameter","@Override
          public @Nullable Void visitVariableAsParameter(
              VariableElement providedParameter, @Nullable Void p)","0","-","-","-","-"
"4070","defaultAction","@Override
                      protected @Nullable Void defaultAction(Element e, @Nullable Void p)","0","-","-","-","-"
"4071","visitExecutableAsConstructor","@Override
                      public @Nullable Void visitExecutableAsConstructor(
                          ExecutableElement constructor, @Nullable Void p)","0","-","-","-","-"
"4072","raiseError","private void raiseError(VariableElement providedParameter, String messageFormat)","0","-","-","-","-"
"4073","annotatedWithAutoFactory","private static boolean annotatedWithAutoFactory(Element e)","0","-","-","-","-"
"4074","name","abstract String name();","0","-","-","-","-"
"4075","key","abstract Key key();","0","-","-","-","-"
"4076","nullableWrapper","abstract Optional<Equivalence.Wrapper<AnnotationMirror>> nullableWrapper();","0","-","-","-","-"
"4077","nullable","Optional<AnnotationMirror> nullable()","0","-","-","-","-"
"4078","create","static ProviderField create(String name, Key key, Optional<AnnotationMirror> nullable)","0","-","-","-","-"
"4079","Elements2","private Elements2()","0","-","-","-","-"
"4080","getConstructors","static ImmutableSet<ExecutableElement> getConstructors(TypeElement type)","0","-","-","-","-"
"4081","isValidSupertypeForClass","static boolean isValidSupertypeForClass(TypeElement type)","0","-","-","-","-"
"4082","getExecutableElementAsMemberOf","/**
   * Given an executable element in a supertype, returns its ExecutableType when it is viewed as a
   * member of a subtype.
   */
  static ExecutableType getExecutableElementAsMemberOf(
      Types types, ExecutableElement executableElement, TypeElement subTypeElement)","0","-","-","-","-"
"4083","type","abstract Equivalence.Wrapper<TypeMirror> type();","0","-","-","-","-"
"4084","qualifierWrapper","abstract Optional<Equivalence.Wrapper<AnnotationMirror>> qualifierWrapper();","0","-","-","-","-"
"4085","qualifier","Optional<AnnotationMirror> qualifier()","0","-","-","-","-"
"4086","create","/**
   * Constructs a key based on the type","0","-","-","-","-"
"4087","boxedType","/**
   * If","0","-","-","-","-"
"4088","toString","@Override
  public final String toString()","0","-","-","-","-"
"4089","packageName","/**
   * The package part of this class name. For","0","-","-","-","-"
"4090","className","/**
   * The class part of this class name. For","0","-","-","-","-"
"4091","of","static PackageAndClass of(String packageName, String className)","0","-","-","-","-"
"4092","matches","@Override
        public boolean matches(char c)","0","-","-","-","-"
"4093","name","abstract PackageAndClass name();","0","-","-","-","-"
"4094","annotations","abstract ImmutableSet<AnnotationMirror> annotations();","0","-","-","-","-"
"4095","extendingType","abstract TypeMirror extendingType();","0","-","-","-","-"
"4096","implementingTypes","abstract ImmutableSet<TypeMirror> implementingTypes();","0","-","-","-","-"
"4097","publicType","abstract boolean publicType();","0","-","-","-","-"
"4098","methodDescriptors","abstract ImmutableSet<FactoryMethodDescriptor> methodDescriptors();","0","-","-","-","-"
"4099","implementationMethodDescriptors","abstract ImmutableSet<ImplementationMethodDescriptor> implementationMethodDescriptors();","0","-","-","-","-"
"4100","allowSubclasses","abstract boolean allowSubclasses();","0","-","-","-","-"
"4101","providers","abstract ImmutableMap<Key, ProviderField> providers();","0","-","-","-","-"
"4102","declaration","final AutoFactoryDeclaration declaration()","0","-","-","-","-"
"4103","getUniqueName","/**
     * Generates a unique name using","0","-","-","-","-"
"4104","create","static FactoryDescriptor create(
      PackageAndClass name,
      ImmutableSet<AnnotationMirror> annotations,
      TypeMirror extendingType,
      ImmutableSet<TypeMirror> implementingTypes,
      boolean publicType,
      ImmutableSet<FactoryMethodDescriptor> methodDescriptors,
      ImmutableSet<ImplementationMethodDescriptor> implementationMethodDescriptors,
      boolean allowSubclasses)","0","-","-","-","-"
"4105","createDuplicateMethodDescriptorsBiMap","/**
   * Creates a bi-map of duplicate","0","-","-","-","-"
"4106","getDeduplicatedMethodDescriptors","/**
   * Returns a set of deduplicated","0","-","-","-","-"
"4107","areDuplicateMethodDescriptors","/**
   * Returns true if the given","0","-","-","-","-"
"4108","FactoryWriter","FactoryWriter(
      ProcessingEnvironment processingEnv,
      InjectApi injectApi,
      ImmutableSetMultimap<String, PackageAndClass> factoriesBeingCreated)","0","-","-","-","-"
"4109","writeFactory","void writeFactory(FactoryDescriptor descriptor) throws IOException","0","-","-","-","-"
"4110","addFactoryTypeParameters","private static void addFactoryTypeParameters(
      TypeSpec.Builder factory, ImmutableSet<TypeVariableName> typeVariableNames)","0","-","-","-","-"
"4111","addConstructorAndProviderFields","private void addConstructorAndProviderFields(
      TypeSpec.Builder factory, FactoryDescriptor descriptor)","0","-","-","-","-"
"4112","addFactoryMethods","private void addFactoryMethods(
      TypeSpec.Builder factory,
      FactoryDescriptor descriptor,
      ImmutableSet<TypeVariableName> factoryTypeVariables)","0","-","-","-","-"
"4113","addImplementationMethods","private void addImplementationMethods(TypeSpec.Builder factory, FactoryDescriptor descriptor)","0","-","-","-","-"
"4114","parameters","/**
   *","0","-","-","-","-"
"4115","addCheckNotNullMethod","private static void addCheckNotNullMethod(
      TypeSpec.Builder factory, FactoryDescriptor descriptor)","0","-","-","-","-"
"4116","shouldGenerateCheckNotNull","private static boolean shouldGenerateCheckNotNull(FactoryDescriptor descriptor)","0","-","-","-","-"
"4117","resolveTypeName","/**
   * Returns an appropriate","0","-","-","-","-"
"4118","getFactoryTypeVariables","private static ImmutableSet<TypeVariableName> getFactoryTypeVariables(
      FactoryDescriptor descriptor)","0","-","-","-","-"
"4119","typeVariablesFrom","private static List<TypeVariableName> typeVariablesFrom(TypeMirror type)","0","-","-","-","-"
"4120","getMethodTypeVariables","private static ImmutableSet<TypeVariableName> getMethodTypeVariables(
      FactoryMethodDescriptor methodDescriptor,
      ImmutableSet<TypeVariableName> factoryTypeVariables)","0","-","-","-","-"
"4121","getReferencedTypeParameterNames","private static ImmutableSet<TypeVariableName> getReferencedTypeParameterNames(TypeMirror type)","0","-","-","-","-"
