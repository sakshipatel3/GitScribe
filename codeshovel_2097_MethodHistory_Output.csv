"Index","Method Name","Method Signature","Commit Count","Change Types","Commit Message","Commit ID","Commit Author"
"1","selectEnvironments","public List<StartEnvironment> selectEnvironments() throws IOException","1","-","see #47 better reporting oracle results
","64469af902c84e426716d82b0e5bc07fdf0f7df6","Reid Holmes"
"2","createDynamicTests","@TestFactory @Execution(ExecutionMode.CONCURRENT) // NOTE: tests might only run concurrently using `mvn test` @DisplayName(""Dynamic test oracles from JSON files"") public Collection<DynamicTest> createDynamicTests() throws Exception","1","-","see #47 better reporting oracle results
","64469af902c84e426716d82b0e5bc07fdf0f7df6","Reid Holmes"
"3","createDynamicTest","private DynamicTest createDynamicTest(StartEnvironment startEnv) throws IOException","1","-","see #47 better reporting oracle results
","64469af902c84e426716d82b0e5bc07fdf0f7df6","Reid Holmes"
"4","doCreateDynamicTest","private DynamicTest doCreateDynamicTest(StartEnvironment startEnv)","1","Body Change","see #47 better reporting oracle results
","64469af902c84e426716d82b0e5bc07fdf0f7df6","Reid Holmes"
"5","performComparison","public boolean performComparison(StartEnvironment startEnv) throws Exception","1","-","see #47 better reporting oracle results
","64469af902c84e426716d82b0e5bc07fdf0f7df6","Reid Holmes"
"6","runEnvironment","public Yresult runEnvironment(StartEnvironment startEnv, StringBuilder actualResultBuilder, StringBuilder expectedResultBuilder) throws IOException, Exception","1","-","see #47 better reporting oracle results
","64469af902c84e426716d82b0e5bc07fdf0f7df6","Reid Holmes"
"7","compareResults","private static boolean compareResults(Map<String, String> expectedResult, Yresult actualResult)","1","Body Change","see #47 better reporting oracle results
","64469af902c84e426716d82b0e5bc07fdf0f7df6","Reid Holmes"
"8","main","public static void main(String[] args) throws Exception","11","Body Change","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"8","main","public static void main(String[] args) throws Exception","11","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"8","main","public static void main(String[] args) throws Exception","11","-","Specify execution parameters as environment variables to avoid having to change source code on each execution
","b6217fda49d3b759cb5ff3e37847e6521288c668","Nick Bradley"
"8","main","public static void main(String[] args) throws Exception","11","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"8","main","public static void main(String[] args) throws Exception","11","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"8","main","public static void main(String[] args) throws Exception","11","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"8","main","public static void main(String[] args) throws Exception","11","-","Merge changes
","dfb250b1596f92acf1ff0c127da1a41e12cbbb89","Nick Bradley"
"8","main","public static void main(String[] args) throws Exception","11","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"8","main","public static void main(String[] args) throws Exception","11","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"8","main","public static void main(String[] args) throws Exception","11","-","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"8","main","public static void main(String[] args) throws Exception","11","-","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"9","ThresholdRunner","public ThresholdRunner()","7","-","see #47 update oracle with Shaiful's version and add missing rows to elasticsearch method.
","598e5d4be87b04e181b2e37e09bd4d8e57a686c5","Reid Holmes"
"9","ThresholdRunner","public ThresholdRunner()","7","-","see #47 improve messages in thresholdrunner
","cbce007f93b6b15d6e7791d869bbaa4849c9e328","Reid Holmes"
"9","ThresholdRunner","public ThresholdRunner()","7","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"9","ThresholdRunner","public ThresholdRunner()","7","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"9","ThresholdRunner","public ThresholdRunner()","7","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"9","ThresholdRunner","public ThresholdRunner()","7","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"9","ThresholdRunner","public ThresholdRunner()","7","-","see #47 setup parallelization for mvn test running (cuts execution time by 2/3)
","38c2f74caad6982c1cd23cca9fd6b01f65d5a1a5","reid holmes"
"10","print","/** * Trying different permutations generates a lot of log messages. * Cache the key messages from ThresholdRunner so they can be * played back at the end of the execution. * * @param msg */ public void print(String msg)","7","Signature Change, Body Change","see #47 update oracle with Shaiful's version and add missing rows to elasticsearch method.
","598e5d4be87b04e181b2e37e09bd4d8e57a686c5","Reid Holmes"
"10","print","/** * Trying different permutations generates a lot of log messages. * Cache the key messages from ThresholdRunner so they can be * played back at the end of the execution. * * @param msg */ public void print(String msg)","7","Minor Modification","see #47 improve messages in thresholdrunner
","cbce007f93b6b15d6e7791d869bbaa4849c9e328","Reid Holmes"
"10","print","/** * Trying different permutations generates a lot of log messages. * Cache the key messages from ThresholdRunner so they can be * played back at the end of the execution. * * @param msg */ public void print(String msg)","7","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"10","print","/** * Trying different permutations generates a lot of log messages. * Cache the key messages from ThresholdRunner so they can be * played back at the end of the execution. * * @param msg */ public void print(String msg)","7","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"10","print","/** * Trying different permutations generates a lot of log messages. * Cache the key messages from ThresholdRunner so they can be * played back at the end of the execution. * * @param msg */ public void print(String msg)","7","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"10","print","/** * Trying different permutations generates a lot of log messages. * Cache the key messages from ThresholdRunner so they can be * played back at the end of the execution. * * @param msg */ public void print(String msg)","7","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"10","print","/** * Trying different permutations generates a lot of log messages. * Cache the key messages from ThresholdRunner so they can be * played back at the end of the execution. * * @param msg */ public void print(String msg)","7","-","see #47 setup parallelization for mvn test running (cuts execution time by 2/3)
","38c2f74caad6982c1cd23cca9fd6b01f65d5a1a5","reid holmes"
"11","doIt","public void doIt() throws Exception","7","Body Change","see #47 update oracle with Shaiful's version and add missing rows to elasticsearch method.
","598e5d4be87b04e181b2e37e09bd4d8e57a686c5","Reid Holmes"
"11","doIt","public void doIt() throws Exception","7","Body Change","see #47 improve messages in thresholdrunner
","cbce007f93b6b15d6e7791d869bbaa4849c9e328","Reid Holmes"
"11","doIt","public void doIt() throws Exception","7","Body Change","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"11","doIt","public void doIt() throws Exception","7","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"11","doIt","public void doIt() throws Exception","7","Body Change","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"11","doIt","public void doIt() throws Exception","7","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"11","doIt","public void doIt() throws Exception","7","-","see #47 setup parallelization for mvn test running (cuts execution time by 2/3)
","38c2f74caad6982c1cd23cca9fd6b01f65d5a1a5","reid holmes"
"12","evaluateConfig","private void evaluateConfig(int count) throws Exception","7","Signature Change, Body Change","see #47 update oracle with Shaiful's version and add missing rows to elasticsearch method.
","598e5d4be87b04e181b2e37e09bd4d8e57a686c5","Reid Holmes"
"12","evaluateConfig","private void evaluateConfig(int count) throws Exception","7","Body Change","see #47 improve messages in thresholdrunner
","cbce007f93b6b15d6e7791d869bbaa4849c9e328","Reid Holmes"
"12","evaluateConfig","private void evaluateConfig(int count) throws Exception","7","Body Change","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"12","evaluateConfig","private void evaluateConfig(int count) throws Exception","7","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"12","evaluateConfig","private void evaluateConfig(int count) throws Exception","7","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"12","evaluateConfig","private void evaluateConfig(int count) throws Exception","7","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"12","evaluateConfig","private void evaluateConfig(int count) throws Exception","7","-","see #47 setup parallelization for mvn test running (cuts execution time by 2/3)
","38c2f74caad6982c1cd23cca9fd6b01f65d5a1a5","reid holmes"
"13","run","public String run() throws Exception","7","Body Change","see #47 update oracle with Shaiful's version and add missing rows to elasticsearch method.
","598e5d4be87b04e181b2e37e09bd4d8e57a686c5","Reid Holmes"
"13","run","public String run() throws Exception","7","Body Change","see #47 improve messages in thresholdrunner
","cbce007f93b6b15d6e7791d869bbaa4849c9e328","Reid Holmes"
"13","run","public String run() throws Exception","7","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"13","run","public String run() throws Exception","7","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"13","run","public String run() throws Exception","7","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"13","run","public String run() throws Exception","7","Body Change","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"13","run","public String run() throws Exception","7","Body Change","see #47 setup parallelization for mvn test running (cuts execution time by 2/3)
","38c2f74caad6982c1cd23cca9fd6b01f65d5a1a5","reid holmes"
"14","main","public static void main(String[] args)","7","-","see #47 update oracle with Shaiful's version and add missing rows to elasticsearch method.
","598e5d4be87b04e181b2e37e09bd4d8e57a686c5","Reid Holmes"
"14","main","public static void main(String[] args)","7","Body Change","see #47 improve messages in thresholdrunner
","cbce007f93b6b15d6e7791d869bbaa4849c9e328","Reid Holmes"
"14","main","public static void main(String[] args)","7","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"14","main","public static void main(String[] args)","7","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"14","main","public static void main(String[] args)","7","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"14","main","public static void main(String[] args)","7","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"14","main","public static void main(String[] args)","7","-","see #47 setup parallelization for mvn test running (cuts execution time by 2/3)
","38c2f74caad6982c1cd23cca9fd6b01f65d5a1a5","reid holmes"
"15","main","public static void main(String[] args) throws Exception","0","-","-","-","-"
"16","execute","public static void execute() throws Exception","0","-","-","-","-"
"17","main","public static void main(String[] args) throws Exception","1","Body Change","improved stats scripts
","1bc957bfacade3475cad435809528dbf1aff5e7a","Felix Grund"
"18","getSubdirectories","private static List<String> getSubdirectories(String repoDir)","1","-","improved stats scripts
","1bc957bfacade3475cad435809528dbf1aff5e7a","Felix Grund"
"19","accept","@Override public boolean accept(File current, String name)","1","-","improved stats scripts
","1bc957bfacade3475cad435809528dbf1aff5e7a","Felix Grund"
"20","log","private static void log(Object object)","1","-","improved stats scripts
","1bc957bfacade3475cad435809528dbf1aff5e7a","Felix Grund"
"21","main","public static void main(String[] args) throws Exception","3","Body Change","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"21","main","public static void main(String[] args) throws Exception","3","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"21","main","public static void main(String[] args) throws Exception","3","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"22","execMining","static void execMining() throws Exception","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"22","execMining","static void execMining() throws Exception","4","Body Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"22","execMining","static void execMining() throws Exception","4","Body Change","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"22","execMining","static void execMining() throws Exception","4","Body Change","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"23","FunctionSimilarity","public FunctionSimilarity(boolean crossFile)","5","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"23","FunctionSimilarity","public FunctionSimilarity(boolean crossFile)","5","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"23","FunctionSimilarity","public FunctionSimilarity(boolean crossFile)","5","Minor Modification","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"23","FunctionSimilarity","public FunctionSimilarity(boolean crossFile)","5","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"23","FunctionSimilarity","public FunctionSimilarity(boolean crossFile)","5","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"24","computeOverallSimilarity","public void computeOverallSimilarity()","5","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"24","computeOverallSimilarity","public void computeOverallSimilarity()","5","Minor Modification","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"24","computeOverallSimilarity","public void computeOverallSimilarity()","5","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"24","computeOverallSimilarity","public void computeOverallSimilarity()","5","Minor Modification","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"24","computeOverallSimilarity","public void computeOverallSimilarity()","5","Body Change","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"25","getScopeSimilarity","public double getScopeSimilarity()","5","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"25","getScopeSimilarity","public double getScopeSimilarity()","5","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"25","getScopeSimilarity","public double getScopeSimilarity()","5","Minor Modification","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"25","getScopeSimilarity","public double getScopeSimilarity()","5","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"25","getScopeSimilarity","public double getScopeSimilarity()","5","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"26","setScopeSimilarity","public void setScopeSimilarity(double scopeSimilarity)","5","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"26","setScopeSimilarity","public void setScopeSimilarity(double scopeSimilarity)","5","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"26","setScopeSimilarity","public void setScopeSimilarity(double scopeSimilarity)","5","Minor Modification","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"26","setScopeSimilarity","public void setScopeSimilarity(double scopeSimilarity)","5","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"26","setScopeSimilarity","public void setScopeSimilarity(double scopeSimilarity)","5","Body Change","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"27","getBodySimilarity","public double getBodySimilarity()","5","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"27","getBodySimilarity","public double getBodySimilarity()","5","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"27","getBodySimilarity","public double getBodySimilarity()","5","Minor Modification","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"27","getBodySimilarity","public double getBodySimilarity()","5","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"27","getBodySimilarity","public double getBodySimilarity()","5","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"28","getLineNumberSimilarity","public double getLineNumberSimilarity()","5","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"28","getLineNumberSimilarity","public double getLineNumberSimilarity()","5","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"28","getLineNumberSimilarity","public double getLineNumberSimilarity()","5","Minor Modification","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"28","getLineNumberSimilarity","public double getLineNumberSimilarity()","5","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"28","getLineNumberSimilarity","public double getLineNumberSimilarity()","5","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"29","setBodySimilarity","public void setBodySimilarity(double bodySimilarity)","5","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"29","setBodySimilarity","public void setBodySimilarity(double bodySimilarity)","5","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"29","setBodySimilarity","public void setBodySimilarity(double bodySimilarity)","5","Minor Modification","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"29","setBodySimilarity","public void setBodySimilarity(double bodySimilarity)","5","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"29","setBodySimilarity","public void setBodySimilarity(double bodySimilarity)","5","Body Change","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"30","setNameSimilarity","public void setNameSimilarity(double nameSimilarity)","5","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"30","setNameSimilarity","public void setNameSimilarity(double nameSimilarity)","5","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"30","setNameSimilarity","public void setNameSimilarity(double nameSimilarity)","5","Minor Modification","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"30","setNameSimilarity","public void setNameSimilarity(double nameSimilarity)","5","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"30","setNameSimilarity","public void setNameSimilarity(double nameSimilarity)","5","Body Change","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"31","getNameSimilarity","public double getNameSimilarity()","5","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"31","getNameSimilarity","public double getNameSimilarity()","5","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"31","getNameSimilarity","public double getNameSimilarity()","5","Minor Modification","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"31","getNameSimilarity","public double getNameSimilarity()","5","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"31","getNameSimilarity","public double getNameSimilarity()","5","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"32","setLineNumberSimilarity","public void setLineNumberSimilarity(double lineNumberSimilarity)","5","Body Change","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"32","setLineNumberSimilarity","public void setLineNumberSimilarity(double lineNumberSimilarity)","5","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"32","setLineNumberSimilarity","public void setLineNumberSimilarity(double lineNumberSimilarity)","5","Minor Modification","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"32","setLineNumberSimilarity","public void setLineNumberSimilarity(double lineNumberSimilarity)","5","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"32","setLineNumberSimilarity","public void setLineNumberSimilarity(double lineNumberSimilarity)","5","Body Change","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"33","getOverallSimilarity","public double getOverallSimilarity()","5","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"33","getOverallSimilarity","public double getOverallSimilarity()","5","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"33","getOverallSimilarity","public double getOverallSimilarity()","5","Minor Modification","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"33","getOverallSimilarity","public double getOverallSimilarity()","5","Body Change","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"33","getOverallSimilarity","public double getOverallSimilarity()","5","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"34","toString","@Override public String toString()","5","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"34","toString","@Override public String toString()","5","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"34","toString","@Override public String toString()","5","Signature Change, Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"34","toString","@Override public String toString()","5","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"34","toString","@Override public String toString()","5","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"35","Commit","public Commit(RevCommit revCommit)","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"35","Commit","public Commit(RevCommit revCommit)","4","Minor Modification","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"35","Commit","public Commit(RevCommit revCommit)","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"35","Commit","public Commit(RevCommit revCommit)","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"36","getId","public ObjectId getId()","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"36","getId","public ObjectId getId()","4","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"36","getId","public ObjectId getId()","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"36","getId","public ObjectId getId()","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"37","getCommitTime","public long getCommitTime()","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"37","getCommitTime","public long getCommitTime()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"37","getCommitTime","public long getCommitTime()","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"37","getCommitTime","public long getCommitTime()","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"38","setCommitTime","public void setCommitTime(RevCommit revCommit)","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"38","setCommitTime","public void setCommitTime(RevCommit revCommit)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"38","setCommitTime","public void setCommitTime(RevCommit revCommit)","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"38","setCommitTime","public void setCommitTime(RevCommit revCommit)","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"39","setCommitDate","public void setCommitDate(RevCommit revCommit)","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"39","setCommitDate","public void setCommitDate(RevCommit revCommit)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"39","setCommitDate","public void setCommitDate(RevCommit revCommit)","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"39","setCommitDate","public void setCommitDate(RevCommit revCommit)","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"40","setAuthorName","public String setAuthorName(RevCommit revCommit)","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"40","setAuthorName","public String setAuthorName(RevCommit revCommit)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"40","setAuthorName","public String setAuthorName(RevCommit revCommit)","4","Minor Modification","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"40","setAuthorName","public String setAuthorName(RevCommit revCommit)","4","Minor Modification","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"41","setAuthorEmail","public String setAuthorEmail(RevCommit revCommit)","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"41","setAuthorEmail","public String setAuthorEmail(RevCommit revCommit)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"41","setAuthorEmail","public String setAuthorEmail(RevCommit revCommit)","4","Minor Modification","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"41","setAuthorEmail","public String setAuthorEmail(RevCommit revCommit)","4","Minor Modification","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"42","setCommitMessage","public void setCommitMessage(RevCommit revCommit)","4","Body Change","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"42","setCommitMessage","public void setCommitMessage(RevCommit revCommit)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"42","setCommitMessage","public void setCommitMessage(RevCommit revCommit)","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"42","setCommitMessage","public void setCommitMessage(RevCommit revCommit)","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"43","setName","public void setName(RevCommit revCommit)","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"43","setName","public void setName(RevCommit revCommit)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"43","setName","public void setName(RevCommit revCommit)","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"43","setName","public void setName(RevCommit revCommit)","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"44","getCommitDateAsString","public String getCommitDateAsString(Commit revCommit)","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"44","getCommitDateAsString","public String getCommitDateAsString(Commit revCommit)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"44","getCommitDateAsString","public String getCommitDateAsString(Commit revCommit)","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"44","getCommitDateAsString","public String getCommitDateAsString(Commit revCommit)","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"45","getAuthorName","public String getAuthorName()","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"45","getAuthorName","public String getAuthorName()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"45","getAuthorName","public String getAuthorName()","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"45","getAuthorName","public String getAuthorName()","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"46","getAuthorEmail","public String getAuthorEmail()","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"46","getAuthorEmail","public String getAuthorEmail()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"46","getAuthorEmail","public String getAuthorEmail()","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"46","getAuthorEmail","public String getAuthorEmail()","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"47","getCommitMessage","public String getCommitMessage()","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"47","getCommitMessage","public String getCommitMessage()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"47","getCommitMessage","public String getCommitMessage()","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"47","getCommitMessage","public String getCommitMessage()","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"48","getName","public String getName()","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"48","getName","public String getName()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"48","getName","public String getName()","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"48","getName","public String getName()","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"49","getCommitDate","public Date getCommitDate()","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"49","getCommitDate","public Date getCommitDate()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"49","getCommitDate","public Date getCommitDate()","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"49","getCommitDate","public Date getCommitDate()","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"50","getCommitNameShort","public String getCommitNameShort()","4","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"50","getCommitNameShort","public String getCommitNameShort()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"50","getCommitNameShort","public String getCommitNameShort()","4","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"50","getCommitNameShort","public String getCommitNameShort()","4","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"51","getEnvOptional","private static String getEnvOptional(String envVar, String defaultVal)","13","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"51","getEnvOptional","private static String getEnvOptional(String envVar, String defaultVal)","13","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"51","getEnvOptional","private static String getEnvOptional(String envVar, String defaultVal)","13","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"51","getEnvOptional","private static String getEnvOptional(String envVar, String defaultVal)","13","-","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"51","getEnvOptional","private static String getEnvOptional(String envVar, String defaultVal)","13","-","hardcoded only baseline temporarily
","6762dc056533f29b954abe2e9c4fc79bfc732753","Felix Grund"
"51","getEnvOptional","private static String getEnvOptional(String envVar, String defaultVal)","13","-","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"51","getEnvOptional","private static String getEnvOptional(String envVar, String defaultVal)","13","Signature Change, Body Change","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"51","getEnvOptional","private static String getEnvOptional(String envVar, String defaultVal)","13","-","see #47; get all suites running (either don't add a ENV_NAME or let it be """").
","09d12d65ff81d7728438215fca820f152cd30bee","Reid Holmes"
"51","getEnvOptional","private static String getEnvOptional(String envVar, String defaultVal)","13","-","see #37: figured out memory problem, not sure how to fix.

Dynamic tests are all queued up (if you run the suite right now you will see the comparisons (aka the actual run of the executor method in the dynamic test case) all running at the end of the suite. _BUT_: these take a Yresult, which contains a Ychange, which contains a RepositoryService which kindly maintains a large cache. This means that the StartEnvironments aren't being cleared out as we go through the tests as they all need to stick around until the end.

This is also why the tests labels don't update as the tests are made; junit doesn't know about the contents of the test array until it's fully built (which is at the end of the whole process).
","380ccf5f4126c22a12bcb0b32539df66d169c1b2","Reid Holmes"
"51","getEnvOptional","private static String getEnvOptional(String envVar, String defaultVal)","13","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"51","getEnvOptional","private static String getEnvOptional(String envVar, String defaultVal)","13","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"51","getEnvOptional","private static String getEnvOptional(String envVar, String defaultVal)","13","-","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"51","getEnvOptional","private static String getEnvOptional(String envVar, String defaultVal)","13","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"52","StartEnvironment","public StartEnvironment(RepositoryService repositoryService)","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"52","StartEnvironment","public StartEnvironment(RepositoryService repositoryService)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"52","StartEnvironment","public StartEnvironment(RepositoryService repositoryService)","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"52","StartEnvironment","public StartEnvironment(RepositoryService repositoryService)","5","Minor Modification","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"52","StartEnvironment","public StartEnvironment(RepositoryService repositoryService)","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"53","getRepositoryService","public RepositoryService getRepositoryService()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"53","getRepositoryService","public RepositoryService getRepositoryService()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"53","getRepositoryService","public RepositoryService getRepositoryService()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"53","getRepositoryService","public RepositoryService getRepositoryService()","5","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"53","getRepositoryService","public RepositoryService getRepositoryService()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"54","getRepositoryPath","public String getRepositoryPath()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"54","getRepositoryPath","public String getRepositoryPath()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"54","getRepositoryPath","public String getRepositoryPath()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"54","getRepositoryPath","public String getRepositoryPath()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"54","getRepositoryPath","public String getRepositoryPath()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"55","getRepositoryName","public String getRepositoryName()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"55","getRepositoryName","public String getRepositoryName()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"55","getRepositoryName","public String getRepositoryName()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"55","getRepositoryName","public String getRepositoryName()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"55","getRepositoryName","public String getRepositoryName()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"56","setRepositoryName","public void setRepositoryName(String repositoryName)","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"56","setRepositoryName","public void setRepositoryName(String repositoryName)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"56","setRepositoryName","public void setRepositoryName(String repositoryName)","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"56","setRepositoryName","public void setRepositoryName(String repositoryName)","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"56","setRepositoryName","public void setRepositoryName(String repositoryName)","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"57","getRepository","public Repository getRepository()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"57","getRepository","public Repository getRepository()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"57","getRepository","public Repository getRepository()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"57","getRepository","public Repository getRepository()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"57","getRepository","public Repository getRepository()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"58","getGit","public Git getGit()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"58","getGit","public Git getGit()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"58","getGit","public Git getGit()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"58","getGit","public Git getGit()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"58","getGit","public Git getGit()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"59","getFilePath","public String getFilePath()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"59","getFilePath","public String getFilePath()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"59","getFilePath","public String getFilePath()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"59","getFilePath","public String getFilePath()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"59","getFilePath","public String getFilePath()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"60","setFilePath","public void setFilePath(String filePath)","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"60","setFilePath","public void setFilePath(String filePath)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"60","setFilePath","public void setFilePath(String filePath)","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"60","setFilePath","public void setFilePath(String filePath)","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"60","setFilePath","public void setFilePath(String filePath)","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"61","getStartCommitName","public String getStartCommitName()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"61","getStartCommitName","public String getStartCommitName()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"61","getStartCommitName","public String getStartCommitName()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"61","getStartCommitName","public String getStartCommitName()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"61","getStartCommitName","public String getStartCommitName()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"62","setStartCommitName","public void setStartCommitName(String startCommitName)","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"62","setStartCommitName","public void setStartCommitName(String startCommitName)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"62","setStartCommitName","public void setStartCommitName(String startCommitName)","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"62","setStartCommitName","public void setStartCommitName(String startCommitName)","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"62","setStartCommitName","public void setStartCommitName(String startCommitName)","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"63","getFunctionName","public String getFunctionName()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"63","getFunctionName","public String getFunctionName()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"63","getFunctionName","public String getFunctionName()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"63","getFunctionName","public String getFunctionName()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"63","getFunctionName","public String getFunctionName()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"64","setFunctionName","public void setFunctionName(String functionName)","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"64","setFunctionName","public void setFunctionName(String functionName)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"64","setFunctionName","public void setFunctionName(String functionName)","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"64","setFunctionName","public void setFunctionName(String functionName)","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"64","setFunctionName","public void setFunctionName(String functionName)","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"65","getStartCommit","public Commit getStartCommit()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"65","getStartCommit","public Commit getStartCommit()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"65","getStartCommit","public Commit getStartCommit()","5","Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"65","getStartCommit","public Commit getStartCommit()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"65","getStartCommit","public Commit getStartCommit()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"66","setStartCommit","public void setStartCommit(Commit startCommit)","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"66","setStartCommit","public void setStartCommit(Commit startCommit)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"66","setStartCommit","public void setStartCommit(Commit startCommit)","5","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"66","setStartCommit","public void setStartCommit(Commit startCommit)","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"66","setStartCommit","public void setStartCommit(Commit startCommit)","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"67","getFunctionStartLine","public int getFunctionStartLine()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"67","getFunctionStartLine","public int getFunctionStartLine()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"67","getFunctionStartLine","public int getFunctionStartLine()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"67","getFunctionStartLine","public int getFunctionStartLine()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"67","getFunctionStartLine","public int getFunctionStartLine()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"68","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"68","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"68","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"68","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"68","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"69","getFileName","public String getFileName()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"69","getFileName","public String getFileName()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"69","getFileName","public String getFileName()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"69","getFileName","public String getFileName()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"69","getFileName","public String getFileName()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"70","getEnvName","public String getEnvName()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"70","getEnvName","public String getEnvName()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"70","getEnvName","public String getEnvName()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"70","getEnvName","public String getEnvName()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"70","getEnvName","public String getEnvName()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"71","setEnvName","public void setEnvName(String envName)","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"71","setEnvName","public void setEnvName(String envName)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"71","setEnvName","public void setEnvName(String envName)","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"71","setEnvName","public void setEnvName(String envName)","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"71","setEnvName","public void setEnvName(String envName)","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"72","getExpectedResult","public LinkedHashMap<String, String> getExpectedResult()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"72","getExpectedResult","public LinkedHashMap<String, String> getExpectedResult()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"72","getExpectedResult","public LinkedHashMap<String, String> getExpectedResult()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"72","getExpectedResult","public LinkedHashMap<String, String> getExpectedResult()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"72","getExpectedResult","public LinkedHashMap<String, String> getExpectedResult()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"73","setExpectedResult","public void setExpectedResult(LinkedHashMap<String, String> expectedResult)","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"73","setExpectedResult","public void setExpectedResult(LinkedHashMap<String, String> expectedResult)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"73","setExpectedResult","public void setExpectedResult(LinkedHashMap<String, String> expectedResult)","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"73","setExpectedResult","public void setExpectedResult(LinkedHashMap<String, String> expectedResult)","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"73","setExpectedResult","public void setExpectedResult(LinkedHashMap<String, String> expectedResult)","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"74","setFileName","public void setFileName(String fileName)","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"74","setFileName","public void setFileName(String fileName)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"74","setFileName","public void setFileName(String fileName)","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"74","setFileName","public void setFileName(String fileName)","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"74","setFileName","public void setFileName(String fileName)","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"75","setBaseline","public void setBaseline(List<String> baseline)","5","Signature Change, Body Change","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"75","setBaseline","public void setBaseline(List<String> baseline)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"75","setBaseline","public void setBaseline(List<String> baseline)","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"75","setBaseline","public void setBaseline(List<String> baseline)","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"75","setBaseline","public void setBaseline(List<String> baseline)","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"76","getBaseline","public List<String> getBaseline()","5","Signature Change, Body Change","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"76","getBaseline","public List<String> getBaseline()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"76","getBaseline","public List<String> getBaseline()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"76","getBaseline","public List<String> getBaseline()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"76","getBaseline","public List<String> getBaseline()","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"77","setRepositoryService","public void setRepositoryService(RepositoryService repositoryService)","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"77","setRepositoryService","public void setRepositoryService(RepositoryService repositoryService)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"77","setRepositoryService","public void setRepositoryService(RepositoryService repositoryService)","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"77","setRepositoryService","public void setRepositoryService(RepositoryService repositoryService)","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"77","setRepositoryService","public void setRepositoryService(RepositoryService repositoryService)","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"78","setRepositoryPath","public void setRepositoryPath(String repositoryPath)","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"78","setRepositoryPath","public void setRepositoryPath(String repositoryPath)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"78","setRepositoryPath","public void setRepositoryPath(String repositoryPath)","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"78","setRepositoryPath","public void setRepositoryPath(String repositoryPath)","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"78","setRepositoryPath","public void setRepositoryPath(String repositoryPath)","5","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"79","setOutputFilePath","public void setOutputFilePath(String outputFilePath)","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"79","setOutputFilePath","public void setOutputFilePath(String outputFilePath)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"79","setOutputFilePath","public void setOutputFilePath(String outputFilePath)","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"79","setOutputFilePath","public void setOutputFilePath(String outputFilePath)","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"79","setOutputFilePath","public void setOutputFilePath(String outputFilePath)","5","Signature Change, Body Change","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"80","getOutputFilePath","public String getOutputFilePath()","5","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"80","getOutputFilePath","public String getOutputFilePath()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"80","getOutputFilePath","public String getOutputFilePath()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"80","getOutputFilePath","public String getOutputFilePath()","5","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"80","getOutputFilePath","public String getOutputFilePath()","5","Signature Change, Body Change","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"81","MethodVisitor","public MethodVisitor(List<Yfunction> allMethods)","0","-","-","-","-"
"82","methodMatches","public abstract boolean methodMatches(Yfunction method);","0","-","-","-","-"
"83","getMatchedNodes","public List<Yfunction> getMatchedNodes()","0","-","-","-","-"
"84","TypeScriptVisitor","public TypeScriptVisitor()","0","-","-","-","-"
"85","visit","public void visit(String source)","0","-","-","-","-"
"86","getSource","protected V8Object getSource(String source)","0","-","-","-","-"
"87","init","private void init()","0","-","-","-","-"
"88","clear","protected void clear()","0","-","-","-","-"
"89","visit","protected void visit(V8Object node)","0","-","-","-","-"
"90","isKind","public boolean isKind(V8Object node, String kind)","0","-","-","-","-"
"91","visitChildren","protected void visitChildren(V8Object node)","0","-","-","-","-"
"92","visitUnknown","protected void visitUnknown(V8Object unknown)","0","-","-","-","-"
"93","visitEndOfFileToken","protected void visitEndOfFileToken(V8Object endOfFileToken)","0","-","-","-","-"
"94","visitSingleLineCommentTrivia","protected void visitSingleLineCommentTrivia(V8Object singleLineCommentTrivia)","0","-","-","-","-"
"95","visitMultiLineCommentTrivia","protected void visitMultiLineCommentTrivia(V8Object multiLineCommentTrivia)","0","-","-","-","-"
"96","visitNewLineTrivia","protected void visitNewLineTrivia(V8Object newLineTrivia)","0","-","-","-","-"
"97","visitWhitespaceTrivia","protected void visitWhitespaceTrivia(V8Object whitespaceTrivia)","0","-","-","-","-"
"98","visitShebangTrivia","protected void visitShebangTrivia(V8Object shebangTrivia)","0","-","-","-","-"
"99","visitConflictMarkerTrivia","protected void visitConflictMarkerTrivia(V8Object conflictMarkerTrivia)","0","-","-","-","-"
"100","visitNumericLiteral","protected void visitNumericLiteral(V8Object numericLiteral)","0","-","-","-","-"
"101","visitBigIntLiteral","protected void visitBigIntLiteral(V8Object bigIntLiteral)","0","-","-","-","-"
"102","visitStringLiteral","protected void visitStringLiteral(V8Object stringLiteral)","0","-","-","-","-"
"103","visitJsxText","protected void visitJsxText(V8Object jsxText)","0","-","-","-","-"
"104","visitJsxTextAllWhiteSpaces","protected void visitJsxTextAllWhiteSpaces(V8Object jsxTextAllWhiteSpaces)","0","-","-","-","-"
"105","visitRegularExpressionLiteral","protected void visitRegularExpressionLiteral(V8Object regularExpressionLiteral)","0","-","-","-","-"
"106","visitNoSubstitutionTemplateLiteral","protected void visitNoSubstitutionTemplateLiteral(V8Object noSubstitutionTemplateLiteral)","0","-","-","-","-"
"107","visitTemplateHead","protected void visitTemplateHead(V8Object templateHead)","0","-","-","-","-"
"108","visitTemplateMiddle","protected void visitTemplateMiddle(V8Object templateMiddle)","0","-","-","-","-"
"109","visitTemplateTail","protected void visitTemplateTail(V8Object templateTail)","0","-","-","-","-"
"110","visitOpenBraceToken","protected void visitOpenBraceToken(V8Object openBraceToken)","0","-","-","-","-"
"111","visitCloseBraceToken","protected void visitCloseBraceToken(V8Object closeBraceToken)","0","-","-","-","-"
"112","visitOpenParenToken","protected void visitOpenParenToken(V8Object openParenToken)","0","-","-","-","-"
"113","visitCloseParenToken","protected void visitCloseParenToken(V8Object closeParenToken)","0","-","-","-","-"
"114","visitOpenBracketToken","protected void visitOpenBracketToken(V8Object openBracketToken)","0","-","-","-","-"
"115","visitCloseBracketToken","protected void visitCloseBracketToken(V8Object closeBracketToken)","0","-","-","-","-"
"116","visitDotToken","protected void visitDotToken(V8Object dotToken)","0","-","-","-","-"
"117","visitDotDotDotToken","protected void visitDotDotDotToken(V8Object dotDotDotToken)","0","-","-","-","-"
"118","visitSemicolonToken","protected void visitSemicolonToken(V8Object semicolonToken)","0","-","-","-","-"
"119","visitCommaToken","protected void visitCommaToken(V8Object commaToken)","0","-","-","-","-"
"120","visitQuestionDotToken","protected void visitQuestionDotToken(V8Object questionDotToken)","0","-","-","-","-"
"121","visitLessThanToken","protected void visitLessThanToken(V8Object lessThanToken)","0","-","-","-","-"
"122","visitLessThanSlashToken","protected void visitLessThanSlashToken(V8Object lessThanSlashToken)","0","-","-","-","-"
"123","visitGreaterThanToken","protected void visitGreaterThanToken(V8Object greaterThanToken)","0","-","-","-","-"
"124","visitLessThanEqualsToken","protected void visitLessThanEqualsToken(V8Object lessThanEqualsToken)","0","-","-","-","-"
"125","visitGreaterThanEqualsToken","protected void visitGreaterThanEqualsToken(V8Object greaterThanEqualsToken)","0","-","-","-","-"
"126","visitEqualsEqualsToken","protected void visitEqualsEqualsToken(V8Object equalsEqualsToken)","0","-","-","-","-"
"127","visitExclamationEqualsToken","protected void visitExclamationEqualsToken(V8Object exclamationEqualsToken)","0","-","-","-","-"
"128","visitEqualsEqualsEqualsToken","protected void visitEqualsEqualsEqualsToken(V8Object equalsEqualsEqualsToken)","0","-","-","-","-"
"129","visitExclamationEqualsEqualsToken","protected void visitExclamationEqualsEqualsToken(V8Object exclamationEqualsEqualsToken)","0","-","-","-","-"
"130","visitEqualsGreaterThanToken","protected void visitEqualsGreaterThanToken(V8Object equalsGreaterThanToken)","0","-","-","-","-"
"131","visitPlusToken","protected void visitPlusToken(V8Object plusToken)","0","-","-","-","-"
"132","visitMinusToken","protected void visitMinusToken(V8Object minusToken)","0","-","-","-","-"
"133","visitAsteriskToken","protected void visitAsteriskToken(V8Object asteriskToken)","0","-","-","-","-"
"134","visitAsteriskAsteriskToken","protected void visitAsteriskAsteriskToken(V8Object asteriskAsteriskToken)","0","-","-","-","-"
"135","visitSlashToken","protected void visitSlashToken(V8Object slashToken)","0","-","-","-","-"
"136","visitPercentToken","protected void visitPercentToken(V8Object percentToken)","0","-","-","-","-"
"137","visitPlusPlusToken","protected void visitPlusPlusToken(V8Object plusPlusToken)","0","-","-","-","-"
"138","visitMinusMinusToken","protected void visitMinusMinusToken(V8Object minusMinusToken)","0","-","-","-","-"
"139","visitLessThanLessThanToken","protected void visitLessThanLessThanToken(V8Object lessThanLessThanToken)","0","-","-","-","-"
"140","visitGreaterThanGreaterThanToken","protected void visitGreaterThanGreaterThanToken(V8Object greaterThanGreaterThanToken)","0","-","-","-","-"
"141","visitGreaterThanGreaterThanGreaterThanToken","protected void visitGreaterThanGreaterThanGreaterThanToken(V8Object greaterThanGreaterThanGreaterThanToken)","0","-","-","-","-"
"142","visitAmpersandToken","protected void visitAmpersandToken(V8Object ampersandToken)","0","-","-","-","-"
"143","visitBarToken","protected void visitBarToken(V8Object barToken)","0","-","-","-","-"
"144","visitCaretToken","protected void visitCaretToken(V8Object caretToken)","0","-","-","-","-"
"145","visitExclamationToken","protected void visitExclamationToken(V8Object exclamationToken)","0","-","-","-","-"
"146","visitTildeToken","protected void visitTildeToken(V8Object tildeToken)","0","-","-","-","-"
"147","visitAmpersandAmpersandToken","protected void visitAmpersandAmpersandToken(V8Object ampersandAmpersandToken)","0","-","-","-","-"
"148","visitBarBarToken","protected void visitBarBarToken(V8Object barBarToken)","0","-","-","-","-"
"149","visitQuestionToken","protected void visitQuestionToken(V8Object questionToken)","0","-","-","-","-"
"150","visitColonToken","protected void visitColonToken(V8Object colonToken)","0","-","-","-","-"
"151","visitAtToken","protected void visitAtToken(V8Object atToken)","0","-","-","-","-"
"152","visitQuestionQuestionToken","protected void visitQuestionQuestionToken(V8Object questionQuestionToken)","0","-","-","-","-"
"153","visitBacktickToken","protected void visitBacktickToken(V8Object backtickToken)","0","-","-","-","-"
"154","visitEqualsToken","protected void visitEqualsToken(V8Object equalsToken)","0","-","-","-","-"
"155","visitPlusEqualsToken","protected void visitPlusEqualsToken(V8Object plusEqualsToken)","0","-","-","-","-"
"156","visitMinusEqualsToken","protected void visitMinusEqualsToken(V8Object minusEqualsToken)","0","-","-","-","-"
"157","visitAsteriskEqualsToken","protected void visitAsteriskEqualsToken(V8Object asteriskEqualsToken)","0","-","-","-","-"
"158","visitAsteriskAsteriskEqualsToken","protected void visitAsteriskAsteriskEqualsToken(V8Object asteriskAsteriskEqualsToken)","0","-","-","-","-"
"159","visitSlashEqualsToken","protected void visitSlashEqualsToken(V8Object slashEqualsToken)","0","-","-","-","-"
"160","visitPercentEqualsToken","protected void visitPercentEqualsToken(V8Object percentEqualsToken)","0","-","-","-","-"
"161","visitLessThanLessThanEqualsToken","protected void visitLessThanLessThanEqualsToken(V8Object lessThanLessThanEqualsToken)","0","-","-","-","-"
"162","visitGreaterThanGreaterThanEqualsToken","protected void visitGreaterThanGreaterThanEqualsToken(V8Object greaterThanGreaterThanEqualsToken)","0","-","-","-","-"
"163","visitGreaterThanGreaterThanGreaterThanEqualsToken","protected void visitGreaterThanGreaterThanGreaterThanEqualsToken(V8Object greaterThanGreaterThanGreaterThanEqualsToken)","0","-","-","-","-"
"164","visitAmpersandEqualsToken","protected void visitAmpersandEqualsToken(V8Object ampersandEqualsToken)","0","-","-","-","-"
"165","visitBarEqualsToken","protected void visitBarEqualsToken(V8Object barEqualsToken)","0","-","-","-","-"
"166","visitBarBarEqualsToken","protected void visitBarBarEqualsToken(V8Object barBarEqualsToken)","0","-","-","-","-"
"167","visitAmpersandAmpersandEqualsToken","protected void visitAmpersandAmpersandEqualsToken(V8Object ampersandAmpersandEqualsToken)","0","-","-","-","-"
"168","visitQuestionQuestionEqualsToken","protected void visitQuestionQuestionEqualsToken(V8Object questionQuestionEqualsToken)","0","-","-","-","-"
"169","visitCaretEqualsToken","protected void visitCaretEqualsToken(V8Object caretEqualsToken)","0","-","-","-","-"
"170","visitIdentifier","protected void visitIdentifier(V8Object identifier)","0","-","-","-","-"
"171","visitPrivateIdentifier","protected void visitPrivateIdentifier(V8Object privateIdentifier)","0","-","-","-","-"
"172","visitBreakKeyword","protected void visitBreakKeyword(V8Object breakKeyword)","0","-","-","-","-"
"173","visitCaseKeyword","protected void visitCaseKeyword(V8Object caseKeyword)","0","-","-","-","-"
"174","visitCatchKeyword","protected void visitCatchKeyword(V8Object catchKeyword)","0","-","-","-","-"
"175","visitClassKeyword","protected void visitClassKeyword(V8Object classKeyword)","0","-","-","-","-"
"176","visitConstKeyword","protected void visitConstKeyword(V8Object constKeyword)","0","-","-","-","-"
"177","visitContinueKeyword","protected void visitContinueKeyword(V8Object continueKeyword)","0","-","-","-","-"
"178","visitDebuggerKeyword","protected void visitDebuggerKeyword(V8Object debuggerKeyword)","0","-","-","-","-"
"179","visitDefaultKeyword","protected void visitDefaultKeyword(V8Object defaultKeyword)","0","-","-","-","-"
"180","visitDeleteKeyword","protected void visitDeleteKeyword(V8Object deleteKeyword)","0","-","-","-","-"
"181","visitDoKeyword","protected void visitDoKeyword(V8Object doKeyword)","0","-","-","-","-"
"182","visitElseKeyword","protected void visitElseKeyword(V8Object elseKeyword)","0","-","-","-","-"
"183","visitEnumKeyword","protected void visitEnumKeyword(V8Object enumKeyword)","0","-","-","-","-"
"184","visitExportKeyword","protected void visitExportKeyword(V8Object exportKeyword)","0","-","-","-","-"
"185","visitExtendsKeyword","protected void visitExtendsKeyword(V8Object extendsKeyword)","0","-","-","-","-"
"186","visitFalseKeyword","protected void visitFalseKeyword(V8Object falseKeyword)","0","-","-","-","-"
"187","visitFinallyKeyword","protected void visitFinallyKeyword(V8Object finallyKeyword)","0","-","-","-","-"
"188","visitForKeyword","protected void visitForKeyword(V8Object forKeyword)","0","-","-","-","-"
"189","visitFunctionKeyword","protected void visitFunctionKeyword(V8Object functionKeyword)","0","-","-","-","-"
"190","visitIfKeyword","protected void visitIfKeyword(V8Object ifKeyword)","0","-","-","-","-"
"191","visitImportKeyword","protected void visitImportKeyword(V8Object importKeyword)","0","-","-","-","-"
"192","visitInKeyword","protected void visitInKeyword(V8Object inKeyword)","0","-","-","-","-"
"193","visitInstanceOfKeyword","protected void visitInstanceOfKeyword(V8Object instanceOfKeyword)","0","-","-","-","-"
"194","visitNewKeyword","protected void visitNewKeyword(V8Object newKeyword)","0","-","-","-","-"
"195","visitNullKeyword","protected void visitNullKeyword(V8Object nullKeyword)","0","-","-","-","-"
"196","visitReturnKeyword","protected void visitReturnKeyword(V8Object returnKeyword)","0","-","-","-","-"
"197","visitSuperKeyword","protected void visitSuperKeyword(V8Object superKeyword)","0","-","-","-","-"
"198","visitSwitchKeyword","protected void visitSwitchKeyword(V8Object switchKeyword)","0","-","-","-","-"
"199","visitThisKeyword","protected void visitThisKeyword(V8Object thisKeyword)","0","-","-","-","-"
"200","visitThrowKeyword","protected void visitThrowKeyword(V8Object throwKeyword)","0","-","-","-","-"
"201","visitTrueKeyword","protected void visitTrueKeyword(V8Object trueKeyword)","0","-","-","-","-"
"202","visitTryKeyword","protected void visitTryKeyword(V8Object tryKeyword)","0","-","-","-","-"
"203","visitTypeOfKeyword","protected void visitTypeOfKeyword(V8Object typeOfKeyword)","0","-","-","-","-"
"204","visitVarKeyword","protected void visitVarKeyword(V8Object varKeyword)","0","-","-","-","-"
"205","visitVoidKeyword","protected void visitVoidKeyword(V8Object voidKeyword)","0","-","-","-","-"
"206","visitWhileKeyword","protected void visitWhileKeyword(V8Object whileKeyword)","0","-","-","-","-"
"207","visitWithKeyword","protected void visitWithKeyword(V8Object withKeyword)","0","-","-","-","-"
"208","visitImplementsKeyword","protected void visitImplementsKeyword(V8Object implementsKeyword)","0","-","-","-","-"
"209","visitInterfaceKeyword","protected void visitInterfaceKeyword(V8Object interfaceKeyword)","0","-","-","-","-"
"210","visitLetKeyword","protected void visitLetKeyword(V8Object letKeyword)","0","-","-","-","-"
"211","visitPackageKeyword","protected void visitPackageKeyword(V8Object packageKeyword)","0","-","-","-","-"
"212","visitPrivateKeyword","protected void visitPrivateKeyword(V8Object privateKeyword)","0","-","-","-","-"
"213","visitProtectedKeyword","protected void visitProtectedKeyword(V8Object protectedKeyword)","0","-","-","-","-"
"214","visitPublicKeyword","protected void visitPublicKeyword(V8Object publicKeyword)","0","-","-","-","-"
"215","visitStaticKeyword","protected void visitStaticKeyword(V8Object staticKeyword)","0","-","-","-","-"
"216","visitYieldKeyword","protected void visitYieldKeyword(V8Object yieldKeyword)","0","-","-","-","-"
"217","visitAbstractKeyword","protected void visitAbstractKeyword(V8Object abstractKeyword)","0","-","-","-","-"
"218","visitAsKeyword","protected void visitAsKeyword(V8Object asKeyword)","0","-","-","-","-"
"219","visitAssertsKeyword","protected void visitAssertsKeyword(V8Object assertsKeyword)","0","-","-","-","-"
"220","visitAnyKeyword","protected void visitAnyKeyword(V8Object anyKeyword)","0","-","-","-","-"
"221","visitAsyncKeyword","protected void visitAsyncKeyword(V8Object asyncKeyword)","0","-","-","-","-"
"222","visitAwaitKeyword","protected void visitAwaitKeyword(V8Object awaitKeyword)","0","-","-","-","-"
"223","visitBooleanKeyword","protected void visitBooleanKeyword(V8Object booleanKeyword)","0","-","-","-","-"
"224","visitConstructorKeyword","protected void visitConstructorKeyword(V8Object constructorKeyword)","0","-","-","-","-"
"225","visitDeclareKeyword","protected void visitDeclareKeyword(V8Object declareKeyword)","0","-","-","-","-"
"226","visitGetKeyword","protected void visitGetKeyword(V8Object getKeyword)","0","-","-","-","-"
"227","visitInferKeyword","protected void visitInferKeyword(V8Object inferKeyword)","0","-","-","-","-"
"228","visitIsKeyword","protected void visitIsKeyword(V8Object isKeyword)","0","-","-","-","-"
"229","visitKeyOfKeyword","protected void visitKeyOfKeyword(V8Object keyOfKeyword)","0","-","-","-","-"
"230","visitModuleKeyword","protected void visitModuleKeyword(V8Object moduleKeyword)","0","-","-","-","-"
"231","visitNamespaceKeyword","protected void visitNamespaceKeyword(V8Object namespaceKeyword)","0","-","-","-","-"
"232","visitNeverKeyword","protected void visitNeverKeyword(V8Object neverKeyword)","0","-","-","-","-"
"233","visitReadonlyKeyword","protected void visitReadonlyKeyword(V8Object readonlyKeyword)","0","-","-","-","-"
"234","visitRequireKeyword","protected void visitRequireKeyword(V8Object requireKeyword)","0","-","-","-","-"
"235","visitNumberKeyword","protected void visitNumberKeyword(V8Object numberKeyword)","0","-","-","-","-"
"236","visitObjectKeyword","protected void visitObjectKeyword(V8Object objectKeyword)","0","-","-","-","-"
"237","visitSetKeyword","protected void visitSetKeyword(V8Object setKeyword)","0","-","-","-","-"
"238","visitStringKeyword","protected void visitStringKeyword(V8Object stringKeyword)","0","-","-","-","-"
"239","visitSymbolKeyword","protected void visitSymbolKeyword(V8Object symbolKeyword)","0","-","-","-","-"
"240","visitTypeKeyword","protected void visitTypeKeyword(V8Object typeKeyword)","0","-","-","-","-"
"241","visitUndefinedKeyword","protected void visitUndefinedKeyword(V8Object undefinedKeyword)","0","-","-","-","-"
"242","visitUniqueKeyword","protected void visitUniqueKeyword(V8Object uniqueKeyword)","0","-","-","-","-"
"243","visitUnknownKeyword","protected void visitUnknownKeyword(V8Object unknownKeyword)","0","-","-","-","-"
"244","visitFromKeyword","protected void visitFromKeyword(V8Object fromKeyword)","0","-","-","-","-"
"245","visitGlobalKeyword","protected void visitGlobalKeyword(V8Object globalKeyword)","0","-","-","-","-"
"246","visitBigIntKeyword","protected void visitBigIntKeyword(V8Object bigIntKeyword)","0","-","-","-","-"
"247","visitOfKeyword","protected void visitOfKeyword(V8Object ofKeyword)","0","-","-","-","-"
"248","visitQualifiedName","protected void visitQualifiedName(V8Object qualifiedName)","0","-","-","-","-"
"249","visitComputedPropertyName","protected void visitComputedPropertyName(V8Object computedPropertyName)","0","-","-","-","-"
"250","visitTypeParameter","protected void visitTypeParameter(V8Object typeParameter)","0","-","-","-","-"
"251","visitParameter","protected void visitParameter(V8Object parameter)","0","-","-","-","-"
"252","visitDecorator","protected void visitDecorator(V8Object decorator)","0","-","-","-","-"
"253","visitPropertySignature","protected void visitPropertySignature(V8Object propertySignature)","0","-","-","-","-"
"254","visitPropertyDeclaration","protected void visitPropertyDeclaration(V8Object propertyDeclaration)","0","-","-","-","-"
"255","visitMethodSignature","protected void visitMethodSignature(V8Object methodSignature)","0","-","-","-","-"
"256","visitMethodDeclaration","protected void visitMethodDeclaration(V8Object methodDeclaration)","0","-","-","-","-"
"257","visitConstructor","protected void visitConstructor(V8Object constructor)","0","-","-","-","-"
"258","visitGetAccessor","protected void visitGetAccessor(V8Object getAccessor)","0","-","-","-","-"
"259","visitSetAccessor","protected void visitSetAccessor(V8Object setAccessor)","0","-","-","-","-"
"260","visitCallSignature","protected void visitCallSignature(V8Object callSignature)","0","-","-","-","-"
"261","visitConstructSignature","protected void visitConstructSignature(V8Object constructSignature)","0","-","-","-","-"
"262","visitIndexSignature","protected void visitIndexSignature(V8Object indexSignature)","0","-","-","-","-"
"263","visitTypePredicate","protected void visitTypePredicate(V8Object typePredicate)","0","-","-","-","-"
"264","visitTypeReference","protected void visitTypeReference(V8Object typeReference)","0","-","-","-","-"
"265","visitFunctionType","protected void visitFunctionType(V8Object functionType)","0","-","-","-","-"
"266","visitConstructorType","protected void visitConstructorType(V8Object constructorType)","0","-","-","-","-"
"267","visitTypeQuery","protected void visitTypeQuery(V8Object typeQuery)","0","-","-","-","-"
"268","visitTypeLiteral","protected void visitTypeLiteral(V8Object typeLiteral)","0","-","-","-","-"
"269","visitArrayType","protected void visitArrayType(V8Object arrayType)","0","-","-","-","-"
"270","visitTupleType","protected void visitTupleType(V8Object tupleType)","0","-","-","-","-"
"271","visitOptionalType","protected void visitOptionalType(V8Object optionalType)","0","-","-","-","-"
"272","visitRestType","protected void visitRestType(V8Object restType)","0","-","-","-","-"
"273","visitUnionType","protected void visitUnionType(V8Object unionType)","0","-","-","-","-"
"274","visitIntersectionType","protected void visitIntersectionType(V8Object intersectionType)","0","-","-","-","-"
"275","visitConditionalType","protected void visitConditionalType(V8Object conditionalType)","0","-","-","-","-"
"276","visitInferType","protected void visitInferType(V8Object inferType)","0","-","-","-","-"
"277","visitParenthesizedType","protected void visitParenthesizedType(V8Object parenthesizedType)","0","-","-","-","-"
"278","visitThisType","protected void visitThisType(V8Object thisType)","0","-","-","-","-"
"279","visitTypeOperator","protected void visitTypeOperator(V8Object typeOperator)","0","-","-","-","-"
"280","visitIndexedAccessType","protected void visitIndexedAccessType(V8Object indexedAccessType)","0","-","-","-","-"
"281","visitMappedType","protected void visitMappedType(V8Object mappedType)","0","-","-","-","-"
"282","visitLiteralType","protected void visitLiteralType(V8Object literalType)","0","-","-","-","-"
"283","visitNamedTupleMember","protected void visitNamedTupleMember(V8Object namedTupleMember)","0","-","-","-","-"
"284","visitImportType","protected void visitImportType(V8Object importType)","0","-","-","-","-"
"285","visitObjectBindingPattern","protected void visitObjectBindingPattern(V8Object objectBindingPattern)","0","-","-","-","-"
"286","visitArrayBindingPattern","protected void visitArrayBindingPattern(V8Object arrayBindingPattern)","0","-","-","-","-"
"287","visitBindingElement","protected void visitBindingElement(V8Object bindingElement)","0","-","-","-","-"
"288","visitArrayLiteralExpression","protected void visitArrayLiteralExpression(V8Object arrayLiteralExpression)","0","-","-","-","-"
"289","visitObjectLiteralExpression","protected void visitObjectLiteralExpression(V8Object objectLiteralExpression)","0","-","-","-","-"
"290","visitPropertyAccessExpression","protected void visitPropertyAccessExpression(V8Object propertyAccessExpression)","0","-","-","-","-"
"291","visitElementAccessExpression","protected void visitElementAccessExpression(V8Object elementAccessExpression)","0","-","-","-","-"
"292","visitCallExpression","protected void visitCallExpression(V8Object callExpression)","0","-","-","-","-"
"293","visitNewExpression","protected void visitNewExpression(V8Object newExpression)","0","-","-","-","-"
"294","visitTaggedTemplateExpression","protected void visitTaggedTemplateExpression(V8Object taggedTemplateExpression)","0","-","-","-","-"
"295","visitTypeAssertionExpression","protected void visitTypeAssertionExpression(V8Object typeAssertionExpression)","0","-","-","-","-"
"296","visitParenthesizedExpression","protected void visitParenthesizedExpression(V8Object parenthesizedExpression)","0","-","-","-","-"
"297","visitFunctionExpression","protected void visitFunctionExpression(V8Object functionExpression)","0","-","-","-","-"
"298","visitArrowFunction","protected void visitArrowFunction(V8Object arrowFunction)","0","-","-","-","-"
"299","visitDeleteExpression","protected void visitDeleteExpression(V8Object deleteExpression)","0","-","-","-","-"
"300","visitTypeOfExpression","protected void visitTypeOfExpression(V8Object typeOfExpression)","0","-","-","-","-"
"301","visitVoidExpression","protected void visitVoidExpression(V8Object voidExpression)","0","-","-","-","-"
"302","visitAwaitExpression","protected void visitAwaitExpression(V8Object awaitExpression)","0","-","-","-","-"
"303","visitPrefixUnaryExpression","protected void visitPrefixUnaryExpression(V8Object prefixUnaryExpression)","0","-","-","-","-"
"304","visitPostfixUnaryExpression","protected void visitPostfixUnaryExpression(V8Object postfixUnaryExpression)","0","-","-","-","-"
"305","visitBinaryExpression","protected void visitBinaryExpression(V8Object binaryExpression)","0","-","-","-","-"
"306","visitConditionalExpression","protected void visitConditionalExpression(V8Object conditionalExpression)","0","-","-","-","-"
"307","visitTemplateExpression","protected void visitTemplateExpression(V8Object templateExpression)","0","-","-","-","-"
"308","visitYieldExpression","protected void visitYieldExpression(V8Object yieldExpression)","0","-","-","-","-"
"309","visitSpreadElement","protected void visitSpreadElement(V8Object spreadElement)","0","-","-","-","-"
"310","visitClassExpression","protected void visitClassExpression(V8Object classExpression)","0","-","-","-","-"
"311","visitOmittedExpression","protected void visitOmittedExpression(V8Object omittedExpression)","0","-","-","-","-"
"312","visitExpressionWithTypeArguments","protected void visitExpressionWithTypeArguments(V8Object expressionWithTypeArguments)","0","-","-","-","-"
"313","visitAsExpression","protected void visitAsExpression(V8Object asExpression)","0","-","-","-","-"
"314","visitNonNullExpression","protected void visitNonNullExpression(V8Object nonNullExpression)","0","-","-","-","-"
"315","visitMetaProperty","protected void visitMetaProperty(V8Object metaProperty)","0","-","-","-","-"
"316","visitSyntheticExpression","protected void visitSyntheticExpression(V8Object syntheticExpression)","0","-","-","-","-"
"317","visitTemplateSpan","protected void visitTemplateSpan(V8Object templateSpan)","0","-","-","-","-"
"318","visitSemicolonClassElement","protected void visitSemicolonClassElement(V8Object semicolonClassElement)","0","-","-","-","-"
"319","visitBlock","protected void visitBlock(V8Object block)","0","-","-","-","-"
"320","visitEmptyStatement","protected void visitEmptyStatement(V8Object emptyStatement)","0","-","-","-","-"
"321","visitVariableStatement","protected void visitVariableStatement(V8Object variableStatement)","0","-","-","-","-"
"322","visitExpressionStatement","protected void visitExpressionStatement(V8Object expressionStatement)","0","-","-","-","-"
"323","visitIfStatement","protected void visitIfStatement(V8Object ifStatement)","0","-","-","-","-"
"324","visitDoStatement","protected void visitDoStatement(V8Object doStatement)","0","-","-","-","-"
"325","visitWhileStatement","protected void visitWhileStatement(V8Object whileStatement)","0","-","-","-","-"
"326","visitForStatement","protected void visitForStatement(V8Object forStatement)","0","-","-","-","-"
"327","visitForInStatement","protected void visitForInStatement(V8Object forInStatement)","0","-","-","-","-"
"328","visitForOfStatement","protected void visitForOfStatement(V8Object forOfStatement)","0","-","-","-","-"
"329","visitContinueStatement","protected void visitContinueStatement(V8Object continueStatement)","0","-","-","-","-"
"330","visitBreakStatement","protected void visitBreakStatement(V8Object breakStatement)","0","-","-","-","-"
"331","visitReturnStatement","protected void visitReturnStatement(V8Object returnStatement)","0","-","-","-","-"
"332","visitWithStatement","protected void visitWithStatement(V8Object withStatement)","0","-","-","-","-"
"333","visitSwitchStatement","protected void visitSwitchStatement(V8Object switchStatement)","0","-","-","-","-"
"334","visitLabeledStatement","protected void visitLabeledStatement(V8Object labeledStatement)","0","-","-","-","-"
"335","visitThrowStatement","protected void visitThrowStatement(V8Object throwStatement)","0","-","-","-","-"
"336","visitTryStatement","protected void visitTryStatement(V8Object tryStatement)","0","-","-","-","-"
"337","visitDebuggerStatement","protected void visitDebuggerStatement(V8Object debuggerStatement)","0","-","-","-","-"
"338","visitVariableDeclaration","protected void visitVariableDeclaration(V8Object variableDeclaration)","0","-","-","-","-"
"339","visitVariableDeclarationList","protected void visitVariableDeclarationList(V8Object variableDeclarationList)","0","-","-","-","-"
"340","visitFunctionDeclaration","protected void visitFunctionDeclaration(V8Object functionDeclaration)","0","-","-","-","-"
"341","visitClassDeclaration","protected void visitClassDeclaration(V8Object classDeclaration)","0","-","-","-","-"
"342","visitInterfaceDeclaration","protected void visitInterfaceDeclaration(V8Object interfaceDeclaration)","0","-","-","-","-"
"343","visitTypeAliasDeclaration","protected void visitTypeAliasDeclaration(V8Object typeAliasDeclaration)","0","-","-","-","-"
"344","visitEnumDeclaration","protected void visitEnumDeclaration(V8Object enumDeclaration)","0","-","-","-","-"
"345","visitModuleDeclaration","protected void visitModuleDeclaration(V8Object moduleDeclaration)","0","-","-","-","-"
"346","visitModuleBlock","protected void visitModuleBlock(V8Object moduleBlock)","0","-","-","-","-"
"347","visitCaseBlock","protected void visitCaseBlock(V8Object caseBlock)","0","-","-","-","-"
"348","visitNamespaceExportDeclaration","protected void visitNamespaceExportDeclaration(V8Object namespaceExportDeclaration)","0","-","-","-","-"
"349","visitImportEqualsDeclaration","protected void visitImportEqualsDeclaration(V8Object importEqualsDeclaration)","0","-","-","-","-"
"350","visitImportDeclaration","protected void visitImportDeclaration(V8Object importDeclaration)","0","-","-","-","-"
"351","visitImportClause","protected void visitImportClause(V8Object importClause)","0","-","-","-","-"
"352","visitNamespaceImport","protected void visitNamespaceImport(V8Object namespaceImport)","0","-","-","-","-"
"353","visitNamedImports","protected void visitNamedImports(V8Object namedImports)","0","-","-","-","-"
"354","visitImportSpecifier","protected void visitImportSpecifier(V8Object importSpecifier)","0","-","-","-","-"
"355","visitExportAssignment","protected void visitExportAssignment(V8Object exportAssignment)","0","-","-","-","-"
"356","visitExportDeclaration","protected void visitExportDeclaration(V8Object exportDeclaration)","0","-","-","-","-"
"357","visitNamedExports","protected void visitNamedExports(V8Object namedExports)","0","-","-","-","-"
"358","visitNamespaceExport","protected void visitNamespaceExport(V8Object namespaceExport)","0","-","-","-","-"
"359","visitExportSpecifier","protected void visitExportSpecifier(V8Object exportSpecifier)","0","-","-","-","-"
"360","visitMissingDeclaration","protected void visitMissingDeclaration(V8Object missingDeclaration)","0","-","-","-","-"
"361","visitExternalModuleReference","protected void visitExternalModuleReference(V8Object externalModuleReference)","0","-","-","-","-"
"362","visitJsxElement","protected void visitJsxElement(V8Object jsxElement)","0","-","-","-","-"
"363","visitJsxSelfClosingElement","protected void visitJsxSelfClosingElement(V8Object jsxSelfClosingElement)","0","-","-","-","-"
"364","visitJsxOpeningElement","protected void visitJsxOpeningElement(V8Object jsxOpeningElement)","0","-","-","-","-"
"365","visitJsxClosingElement","protected void visitJsxClosingElement(V8Object jsxClosingElement)","0","-","-","-","-"
"366","visitJsxFragment","protected void visitJsxFragment(V8Object jsxFragment)","0","-","-","-","-"
"367","visitJsxOpeningFragment","protected void visitJsxOpeningFragment(V8Object jsxOpeningFragment)","0","-","-","-","-"
"368","visitJsxClosingFragment","protected void visitJsxClosingFragment(V8Object jsxClosingFragment)","0","-","-","-","-"
"369","visitJsxAttribute","protected void visitJsxAttribute(V8Object jsxAttribute)","0","-","-","-","-"
"370","visitJsxAttributes","protected void visitJsxAttributes(V8Object jsxAttributes)","0","-","-","-","-"
"371","visitJsxSpreadAttribute","protected void visitJsxSpreadAttribute(V8Object jsxSpreadAttribute)","0","-","-","-","-"
"372","visitJsxExpression","protected void visitJsxExpression(V8Object jsxExpression)","0","-","-","-","-"
"373","visitCaseClause","protected void visitCaseClause(V8Object caseClause)","0","-","-","-","-"
"374","visitDefaultClause","protected void visitDefaultClause(V8Object defaultClause)","0","-","-","-","-"
"375","visitHeritageClause","protected void visitHeritageClause(V8Object heritageClause)","0","-","-","-","-"
"376","visitCatchClause","protected void visitCatchClause(V8Object catchClause)","0","-","-","-","-"
"377","visitPropertyAssignment","protected void visitPropertyAssignment(V8Object propertyAssignment)","0","-","-","-","-"
"378","visitShorthandPropertyAssignment","protected void visitShorthandPropertyAssignment(V8Object shorthandPropertyAssignment)","0","-","-","-","-"
"379","visitSpreadAssignment","protected void visitSpreadAssignment(V8Object spreadAssignment)","0","-","-","-","-"
"380","visitEnumMember","protected void visitEnumMember(V8Object enumMember)","0","-","-","-","-"
"381","visitUnparsedPrologue","protected void visitUnparsedPrologue(V8Object unparsedPrologue)","0","-","-","-","-"
"382","visitUnparsedPrepend","protected void visitUnparsedPrepend(V8Object unparsedPrepend)","0","-","-","-","-"
"383","visitUnparsedText","protected void visitUnparsedText(V8Object unparsedText)","0","-","-","-","-"
"384","visitUnparsedInternalText","protected void visitUnparsedInternalText(V8Object unparsedInternalText)","0","-","-","-","-"
"385","visitUnparsedSyntheticReference","protected void visitUnparsedSyntheticReference(V8Object unparsedSyntheticReference)","0","-","-","-","-"
"386","visitSourceFile","protected void visitSourceFile(V8Object sourceFile)","0","-","-","-","-"
"387","visitBundle","protected void visitBundle(V8Object bundle)","0","-","-","-","-"
"388","visitUnparsedSource","protected void visitUnparsedSource(V8Object unparsedSource)","0","-","-","-","-"
"389","visitInputFiles","protected void visitInputFiles(V8Object inputFiles)","0","-","-","-","-"
"390","visitJSDocTypeExpression","protected void visitJSDocTypeExpression(V8Object jSDocTypeExpression)","0","-","-","-","-"
"391","visitJSDocAllType","protected void visitJSDocAllType(V8Object jSDocAllType)","0","-","-","-","-"
"392","visitJSDocUnknownType","protected void visitJSDocUnknownType(V8Object jSDocUnknownType)","0","-","-","-","-"
"393","visitJSDocNullableType","protected void visitJSDocNullableType(V8Object jSDocNullableType)","0","-","-","-","-"
"394","visitJSDocNonNullableType","protected void visitJSDocNonNullableType(V8Object jSDocNonNullableType)","0","-","-","-","-"
"395","visitJSDocOptionalType","protected void visitJSDocOptionalType(V8Object jSDocOptionalType)","0","-","-","-","-"
"396","visitJSDocFunctionType","protected void visitJSDocFunctionType(V8Object jSDocFunctionType)","0","-","-","-","-"
"397","visitJSDocVariadicType","protected void visitJSDocVariadicType(V8Object jSDocVariadicType)","0","-","-","-","-"
"398","visitJSDocNamepathType","protected void visitJSDocNamepathType(V8Object jSDocNamepathType)","0","-","-","-","-"
"399","visitJSDocComment","protected void visitJSDocComment(V8Object jSDocComment)","0","-","-","-","-"
"400","visitJSDocTypeLiteral","protected void visitJSDocTypeLiteral(V8Object jSDocTypeLiteral)","0","-","-","-","-"
"401","visitJSDocSignature","protected void visitJSDocSignature(V8Object jSDocSignature)","0","-","-","-","-"
"402","visitJSDocTag","protected void visitJSDocTag(V8Object jSDocTag)","0","-","-","-","-"
"403","visitJSDocAugmentsTag","protected void visitJSDocAugmentsTag(V8Object jSDocAugmentsTag)","0","-","-","-","-"
"404","visitJSDocImplementsTag","protected void visitJSDocImplementsTag(V8Object jSDocImplementsTag)","0","-","-","-","-"
"405","visitJSDocAuthorTag","protected void visitJSDocAuthorTag(V8Object jSDocAuthorTag)","0","-","-","-","-"
"406","visitJSDocDeprecatedTag","protected void visitJSDocDeprecatedTag(V8Object jSDocDeprecatedTag)","0","-","-","-","-"
"407","visitJSDocClassTag","protected void visitJSDocClassTag(V8Object jSDocClassTag)","0","-","-","-","-"
"408","visitJSDocPublicTag","protected void visitJSDocPublicTag(V8Object jSDocPublicTag)","0","-","-","-","-"
"409","visitJSDocPrivateTag","protected void visitJSDocPrivateTag(V8Object jSDocPrivateTag)","0","-","-","-","-"
"410","visitJSDocProtectedTag","protected void visitJSDocProtectedTag(V8Object jSDocProtectedTag)","0","-","-","-","-"
"411","visitJSDocReadonlyTag","protected void visitJSDocReadonlyTag(V8Object jSDocReadonlyTag)","0","-","-","-","-"
"412","visitJSDocCallbackTag","protected void visitJSDocCallbackTag(V8Object jSDocCallbackTag)","0","-","-","-","-"
"413","visitJSDocEnumTag","protected void visitJSDocEnumTag(V8Object jSDocEnumTag)","0","-","-","-","-"
"414","visitJSDocParameterTag","protected void visitJSDocParameterTag(V8Object jSDocParameterTag)","0","-","-","-","-"
"415","visitJSDocReturnTag","protected void visitJSDocReturnTag(V8Object jSDocReturnTag)","0","-","-","-","-"
"416","visitJSDocThisTag","protected void visitJSDocThisTag(V8Object jSDocThisTag)","0","-","-","-","-"
"417","visitJSDocTypeTag","protected void visitJSDocTypeTag(V8Object jSDocTypeTag)","0","-","-","-","-"
"418","visitJSDocTemplateTag","protected void visitJSDocTemplateTag(V8Object jSDocTemplateTag)","0","-","-","-","-"
"419","visitJSDocTypedefTag","protected void visitJSDocTypedefTag(V8Object jSDocTypedefTag)","0","-","-","-","-"
"420","visitJSDocPropertyTag","protected void visitJSDocPropertyTag(V8Object jSDocPropertyTag)","0","-","-","-","-"
"421","visitSyntaxList","protected void visitSyntaxList(V8Object syntaxList)","0","-","-","-","-"
"422","visitNotEmittedStatement","protected void visitNotEmittedStatement(V8Object notEmittedStatement)","0","-","-","-","-"
"423","visitPartiallyEmittedExpression","protected void visitPartiallyEmittedExpression(V8Object partiallyEmittedExpression)","0","-","-","-","-"
"424","visitCommaListExpression","protected void visitCommaListExpression(V8Object commaListExpression)","0","-","-","-","-"
"425","visitMergeDeclarationMarker","protected void visitMergeDeclarationMarker(V8Object mergeDeclarationMarker)","0","-","-","-","-"
"426","visitEndOfDeclarationMarker","protected void visitEndOfDeclarationMarker(V8Object endOfDeclarationMarker)","0","-","-","-","-"
"427","visitSyntheticReferenceExpression","protected void visitSyntheticReferenceExpression(V8Object syntheticReferenceExpression)","0","-","-","-","-"
"428","visitCount","protected void visitCount(V8Object count)","0","-","-","-","-"
"429","InFileInterpreter","public InFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"429","InFileInterpreter","public InFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"429","InFileInterpreter","public InFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"429","InFileInterpreter","public InFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","10","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"429","InFileInterpreter","public InFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","10","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"429","InFileInterpreter","public InFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","10","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"429","InFileInterpreter","public InFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","10","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"429","InFileInterpreter","public InFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"429","InFileInterpreter","public InFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","10","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"429","InFileInterpreter","public InFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","10","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"430","interpret","public Ychange interpret() throws Exception","10","Minor Modification","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"430","interpret","public Ychange interpret() throws Exception","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"430","interpret","public Ychange interpret() throws Exception","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"430","interpret","public Ychange interpret() throws Exception","10","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"430","interpret","public Ychange interpret() throws Exception","10","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"430","interpret","public Ychange interpret() throws Exception","10","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"430","interpret","public Ychange interpret() throws Exception","10","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"430","interpret","public Ychange interpret() throws Exception","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"430","interpret","public Ychange interpret() throws Exception","10","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"430","interpret","public Ychange interpret() throws Exception","10","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"431","getCompareFunction","private Yfunction getCompareFunction(Ycommit ycommit) throws Exception","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"431","getCompareFunction","private Yfunction getCompareFunction(Ycommit ycommit) throws Exception","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"431","getCompareFunction","private Yfunction getCompareFunction(Ycommit ycommit) throws Exception","10","Minor Modification","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"431","getCompareFunction","private Yfunction getCompareFunction(Ycommit ycommit) throws Exception","10","Body Change","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"431","getCompareFunction","private Yfunction getCompareFunction(Ycommit ycommit) throws Exception","10","Body Change","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"431","getCompareFunction","private Yfunction getCompareFunction(Ycommit ycommit) throws Exception","10","Body Change","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"431","getCompareFunction","private Yfunction getCompareFunction(Ycommit ycommit) throws Exception","10","Minor Modification","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"431","getCompareFunction","private Yfunction getCompareFunction(Ycommit ycommit) throws Exception","10","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"431","getCompareFunction","private Yfunction getCompareFunction(Ycommit ycommit) throws Exception","10","Minor Modification","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"431","getCompareFunction","private Yfunction getCompareFunction(Ycommit ycommit) throws Exception","10","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"432","isEditInMethod","private boolean isEditInMethod(Yfunction method, Edit edit)","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"432","isEditInMethod","private boolean isEditInMethod(Yfunction method, Edit edit)","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"432","isEditInMethod","private boolean isEditInMethod(Yfunction method, Edit edit)","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"432","isEditInMethod","private boolean isEditInMethod(Yfunction method, Edit edit)","10","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"432","isEditInMethod","private boolean isEditInMethod(Yfunction method, Edit edit)","10","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"432","isEditInMethod","private boolean isEditInMethod(Yfunction method, Edit edit)","10","Signature Change, Body Change","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"432","isEditInMethod","private boolean isEditInMethod(Yfunction method, Edit edit)","10","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"432","isEditInMethod","private boolean isEditInMethod(Yfunction method, Edit edit)","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"432","isEditInMethod","private boolean isEditInMethod(Yfunction method, Edit edit)","10","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"432","isEditInMethod","private boolean isEditInMethod(Yfunction method, Edit edit)","10","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"433","removeDuplicates","private List<Yfunction> removeDuplicates(List<Yfunction> functions)","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"433","removeDuplicates","private List<Yfunction> removeDuplicates(List<Yfunction> functions)","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"433","removeDuplicates","private List<Yfunction> removeDuplicates(List<Yfunction> functions)","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"433","removeDuplicates","private List<Yfunction> removeDuplicates(List<Yfunction> functions)","10","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"433","removeDuplicates","private List<Yfunction> removeDuplicates(List<Yfunction> functions)","10","Signature Change, Body Change","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"433","removeDuplicates","private List<Yfunction> removeDuplicates(List<Yfunction> functions)","10","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"433","removeDuplicates","private List<Yfunction> removeDuplicates(List<Yfunction> functions)","10","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"433","removeDuplicates","private List<Yfunction> removeDuplicates(List<Yfunction> functions)","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"433","removeDuplicates","private List<Yfunction> removeDuplicates(List<Yfunction> functions)","10","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"433","removeDuplicates","private List<Yfunction> removeDuplicates(List<Yfunction> functions)","10","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"434","isFirstFunctionOccurrence","private boolean isFirstFunctionOccurrence()","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"434","isFirstFunctionOccurrence","private boolean isFirstFunctionOccurrence()","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"434","isFirstFunctionOccurrence","private boolean isFirstFunctionOccurrence()","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"434","isFirstFunctionOccurrence","private boolean isFirstFunctionOccurrence()","10","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"434","isFirstFunctionOccurrence","private boolean isFirstFunctionOccurrence()","10","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"434","isFirstFunctionOccurrence","private boolean isFirstFunctionOccurrence()","10","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"434","isFirstFunctionOccurrence","private boolean isFirstFunctionOccurrence()","10","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"434","isFirstFunctionOccurrence","private boolean isFirstFunctionOccurrence()","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"434","isFirstFunctionOccurrence","private boolean isFirstFunctionOccurrence()","10","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"434","isFirstFunctionOccurrence","private boolean isFirstFunctionOccurrence()","10","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"435","CrossFileInterpreter","public CrossFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","12","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"435","CrossFileInterpreter","public CrossFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"435","CrossFileInterpreter","public CrossFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"435","CrossFileInterpreter","public CrossFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"435","CrossFileInterpreter","public CrossFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","12","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"435","CrossFileInterpreter","public CrossFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","12","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"435","CrossFileInterpreter","public CrossFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","12","-","fixed issues for junit5
","2f1c3ca428a57c215e17fa5387382f392f236b08","Felix Grund"
"435","CrossFileInterpreter","public CrossFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","12","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"435","CrossFileInterpreter","public CrossFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","12","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"435","CrossFileInterpreter","public CrossFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","12","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"435","CrossFileInterpreter","public CrossFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","12","-","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"435","CrossFileInterpreter","public CrossFileInterpreter(StartEnvironment startEnv, Ycommit ycommit)","12","-","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"436","interpret","public Ychange interpret() throws Exception","12","Minor Modification","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"436","interpret","public Ychange interpret() throws Exception","12","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"436","interpret","public Ychange interpret() throws Exception","12","Body Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"436","interpret","public Ychange interpret() throws Exception","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"436","interpret","public Ychange interpret() throws Exception","12","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"436","interpret","public Ychange interpret() throws Exception","12","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"436","interpret","public Ychange interpret() throws Exception","12","Body Change","fixed issues for junit5
","2f1c3ca428a57c215e17fa5387382f392f236b08","Felix Grund"
"436","interpret","public Ychange interpret() throws Exception","12","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"436","interpret","public Ychange interpret() throws Exception","12","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"436","interpret","public Ychange interpret() throws Exception","12","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"436","interpret","public Ychange interpret() throws Exception","12","-","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"436","interpret","public Ychange interpret() throws Exception","12","-","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"437","getCompareFunctionFromMultipleFiles","/** * Handles comparing methods that are spread across files. * * e.g., to check if a method was in a previous version of a different file. * * By looking at removed functions this specifically searches for methods * that were moved between files in a revision. * * @param ydiff * @param prevCommit * @return * @throws Exception */ private Yfunction getCompareFunctionFromMultipleFiles(Ydiff ydiff, Commit prevCommit) throws Exception","12","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"437","getCompareFunctionFromMultipleFiles","/** * Handles comparing methods that are spread across files. * * e.g., to check if a method was in a previous version of a different file. * * By looking at removed functions this specifically searches for methods * that were moved between files in a revision. * * @param ydiff * @param prevCommit * @return * @throws Exception */ private Yfunction getCompareFunctionFromMultipleFiles(Ydiff ydiff, Commit prevCommit) throws Exception","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"437","getCompareFunctionFromMultipleFiles","/** * Handles comparing methods that are spread across files. * * e.g., to check if a method was in a previous version of a different file. * * By looking at removed functions this specifically searches for methods * that were moved between files in a revision. * * @param ydiff * @param prevCommit * @return * @throws Exception */ private Yfunction getCompareFunctionFromMultipleFiles(Ydiff ydiff, Commit prevCommit) throws Exception","12","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"437","getCompareFunctionFromMultipleFiles","/** * Handles comparing methods that are spread across files. * * e.g., to check if a method was in a previous version of a different file. * * By looking at removed functions this specifically searches for methods * that were moved between files in a revision. * * @param ydiff * @param prevCommit * @return * @throws Exception */ private Yfunction getCompareFunctionFromMultipleFiles(Ydiff ydiff, Commit prevCommit) throws Exception","12","Body Change","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"437","getCompareFunctionFromMultipleFiles","/** * Handles comparing methods that are spread across files. * * e.g., to check if a method was in a previous version of a different file. * * By looking at removed functions this specifically searches for methods * that were moved between files in a revision. * * @param ydiff * @param prevCommit * @return * @throws Exception */ private Yfunction getCompareFunctionFromMultipleFiles(Ydiff ydiff, Commit prevCommit) throws Exception","12","Minor Modification","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"437","getCompareFunctionFromMultipleFiles","/** * Handles comparing methods that are spread across files. * * e.g., to check if a method was in a previous version of a different file. * * By looking at removed functions this specifically searches for methods * that were moved between files in a revision. * * @param ydiff * @param prevCommit * @return * @throws Exception */ private Yfunction getCompareFunctionFromMultipleFiles(Ydiff ydiff, Commit prevCommit) throws Exception","12","Minor Modification","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"437","getCompareFunctionFromMultipleFiles","/** * Handles comparing methods that are spread across files. * * e.g., to check if a method was in a previous version of a different file. * * By looking at removed functions this specifically searches for methods * that were moved between files in a revision. * * @param ydiff * @param prevCommit * @return * @throws Exception */ private Yfunction getCompareFunctionFromMultipleFiles(Ydiff ydiff, Commit prevCommit) throws Exception","12","-","fixed issues for junit5
","2f1c3ca428a57c215e17fa5387382f392f236b08","Felix Grund"
"437","getCompareFunctionFromMultipleFiles","/** * Handles comparing methods that are spread across files. * * e.g., to check if a method was in a previous version of a different file. * * By looking at removed functions this specifically searches for methods * that were moved between files in a revision. * * @param ydiff * @param prevCommit * @return * @throws Exception */ private Yfunction getCompareFunctionFromMultipleFiles(Ydiff ydiff, Commit prevCommit) throws Exception","12","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"437","getCompareFunctionFromMultipleFiles","/** * Handles comparing methods that are spread across files. * * e.g., to check if a method was in a previous version of a different file. * * By looking at removed functions this specifically searches for methods * that were moved between files in a revision. * * @param ydiff * @param prevCommit * @return * @throws Exception */ private Yfunction getCompareFunctionFromMultipleFiles(Ydiff ydiff, Commit prevCommit) throws Exception","12","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"437","getCompareFunctionFromMultipleFiles","/** * Handles comparing methods that are spread across files. * * e.g., to check if a method was in a previous version of a different file. * * By looking at removed functions this specifically searches for methods * that were moved between files in a revision. * * @param ydiff * @param prevCommit * @return * @throws Exception */ private Yfunction getCompareFunctionFromMultipleFiles(Ydiff ydiff, Commit prevCommit) throws Exception","12","Signature Change","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"437","getCompareFunctionFromMultipleFiles","/** * Handles comparing methods that are spread across files. * * e.g., to check if a method was in a previous version of a different file. * * By looking at removed functions this specifically searches for methods * that were moved between files in a revision. * * @param ydiff * @param prevCommit * @return * @throws Exception */ private Yfunction getCompareFunctionFromMultipleFiles(Ydiff ydiff, Commit prevCommit) throws Exception","12","Signature Change","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"437","getCompareFunctionFromMultipleFiles","/** * Handles comparing methods that are spread across files. * * e.g., to check if a method was in a previous version of a different file. * * By looking at removed functions this specifically searches for methods * that were moved between files in a revision. * * @param ydiff * @param prevCommit * @return * @throws Exception */ private Yfunction getCompareFunctionFromMultipleFiles(Ydiff ydiff, Commit prevCommit) throws Exception","12","Signature Change","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"438","getCompareFunctionFromFile","/** * Handles comparing methods within a file. * * e.g., to check if a method was in the previous version of the same file. * * @param filePath * @param commit * @return * @throws Exception */ private Yfunction getCompareFunctionFromFile(String filePath, Commit commit) throws Exception","12","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"438","getCompareFunctionFromFile","/** * Handles comparing methods within a file. * * e.g., to check if a method was in the previous version of the same file. * * @param filePath * @param commit * @return * @throws Exception */ private Yfunction getCompareFunctionFromFile(String filePath, Commit commit) throws Exception","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"438","getCompareFunctionFromFile","/** * Handles comparing methods within a file. * * e.g., to check if a method was in the previous version of the same file. * * @param filePath * @param commit * @return * @throws Exception */ private Yfunction getCompareFunctionFromFile(String filePath, Commit commit) throws Exception","12","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"438","getCompareFunctionFromFile","/** * Handles comparing methods within a file. * * e.g., to check if a method was in the previous version of the same file. * * @param filePath * @param commit * @return * @throws Exception */ private Yfunction getCompareFunctionFromFile(String filePath, Commit commit) throws Exception","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"438","getCompareFunctionFromFile","/** * Handles comparing methods within a file. * * e.g., to check if a method was in the previous version of the same file. * * @param filePath * @param commit * @return * @throws Exception */ private Yfunction getCompareFunctionFromFile(String filePath, Commit commit) throws Exception","12","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"438","getCompareFunctionFromFile","/** * Handles comparing methods within a file. * * e.g., to check if a method was in the previous version of the same file. * * @param filePath * @param commit * @return * @throws Exception */ private Yfunction getCompareFunctionFromFile(String filePath, Commit commit) throws Exception","12","Minor Modification","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"438","getCompareFunctionFromFile","/** * Handles comparing methods within a file. * * e.g., to check if a method was in the previous version of the same file. * * @param filePath * @param commit * @return * @throws Exception */ private Yfunction getCompareFunctionFromFile(String filePath, Commit commit) throws Exception","12","-","fixed issues for junit5
","2f1c3ca428a57c215e17fa5387382f392f236b08","Felix Grund"
"438","getCompareFunctionFromFile","/** * Handles comparing methods within a file. * * e.g., to check if a method was in the previous version of the same file. * * @param filePath * @param commit * @return * @throws Exception */ private Yfunction getCompareFunctionFromFile(String filePath, Commit commit) throws Exception","12","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"438","getCompareFunctionFromFile","/** * Handles comparing methods within a file. * * e.g., to check if a method was in the previous version of the same file. * * @param filePath * @param commit * @return * @throws Exception */ private Yfunction getCompareFunctionFromFile(String filePath, Commit commit) throws Exception","12","Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"438","getCompareFunctionFromFile","/** * Handles comparing methods within a file. * * e.g., to check if a method was in the previous version of the same file. * * @param filePath * @param commit * @return * @throws Exception */ private Yfunction getCompareFunctionFromFile(String filePath, Commit commit) throws Exception","12","Signature Change","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"438","getCompareFunctionFromFile","/** * Handles comparing methods within a file. * * e.g., to check if a method was in the previous version of the same file. * * @param filePath * @param commit * @return * @throws Exception */ private Yfunction getCompareFunctionFromFile(String filePath, Commit commit) throws Exception","12","Signature Change","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"438","getCompareFunctionFromFile","/** * Handles comparing methods within a file. * * e.g., to check if a method was in the previous version of the same file. * * @param filePath * @param commit * @return * @throws Exception */ private Yfunction getCompareFunctionFromFile(String filePath, Commit commit) throws Exception","12","Signature Change","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"439","interpret","protected abstract Ychange interpret() throws Exception;","8","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"439","interpret","protected abstract Ychange interpret() throws Exception;","8","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"439","interpret","protected abstract Ychange interpret() throws Exception;","8","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"439","interpret","protected abstract Ychange interpret() throws Exception;","8","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"439","interpret","protected abstract Ychange interpret() throws Exception;","8","-","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"439","interpret","protected abstract Ychange interpret() throws Exception;","8","-","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"439","interpret","protected abstract Ychange interpret() throws Exception;","8","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"439","interpret","protected abstract Ychange interpret() throws Exception;","8","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"440","AbstractInterpreter","public AbstractInterpreter(StartEnvironment startEnv, Ycommit ycommit)","8","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"440","AbstractInterpreter","public AbstractInterpreter(StartEnvironment startEnv, Ycommit ycommit)","8","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"440","AbstractInterpreter","public AbstractInterpreter(StartEnvironment startEnv, Ycommit ycommit)","8","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"440","AbstractInterpreter","public AbstractInterpreter(StartEnvironment startEnv, Ycommit ycommit)","8","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"440","AbstractInterpreter","public AbstractInterpreter(StartEnvironment startEnv, Ycommit ycommit)","8","-","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"440","AbstractInterpreter","public AbstractInterpreter(StartEnvironment startEnv, Ycommit ycommit)","8","-","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"440","AbstractInterpreter","public AbstractInterpreter(StartEnvironment startEnv, Ycommit ycommit)","8","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"440","AbstractInterpreter","public AbstractInterpreter(StartEnvironment startEnv, Ycommit ycommit)","8","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"441","createParserForCommitAndFile","protected Yparser createParserForCommitAndFile(Commit commit, String filePath) throws Exception","8","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"441","createParserForCommitAndFile","protected Yparser createParserForCommitAndFile(Commit commit, String filePath) throws Exception","8","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"441","createParserForCommitAndFile","protected Yparser createParserForCommitAndFile(Commit commit, String filePath) throws Exception","8","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"441","createParserForCommitAndFile","protected Yparser createParserForCommitAndFile(Commit commit, String filePath) throws Exception","8","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"441","createParserForCommitAndFile","protected Yparser createParserForCommitAndFile(Commit commit, String filePath) throws Exception","8","Signature Change","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"441","createParserForCommitAndFile","protected Yparser createParserForCommitAndFile(Commit commit, String filePath) throws Exception","8","Signature Change","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"441","createParserForCommitAndFile","protected Yparser createParserForCommitAndFile(Commit commit, String filePath) throws Exception","8","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"441","createParserForCommitAndFile","protected Yparser createParserForCommitAndFile(Commit commit, String filePath) throws Exception","8","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"442","getRemovedFunctions","protected List<Yfunction> getRemovedFunctions(Commit commitNew, Commit commitOld, String oldFilePath, String newFilePath, boolean strictMode) throws Exception","8","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"442","getRemovedFunctions","protected List<Yfunction> getRemovedFunctions(Commit commitNew, Commit commitOld, String oldFilePath, String newFilePath, boolean strictMode) throws Exception","8","Parameter Change, Signature Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"442","getRemovedFunctions","protected List<Yfunction> getRemovedFunctions(Commit commitNew, Commit commitOld, String oldFilePath, String newFilePath, boolean strictMode) throws Exception","8","Parameter Change, Signature Change, Body Change","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"442","getRemovedFunctions","protected List<Yfunction> getRemovedFunctions(Commit commitNew, Commit commitOld, String oldFilePath, String newFilePath, boolean strictMode) throws Exception","8","Parameter Change, Body Change","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"442","getRemovedFunctions","protected List<Yfunction> getRemovedFunctions(Commit commitNew, Commit commitOld, String oldFilePath, String newFilePath, boolean strictMode) throws Exception","8","Body Change","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"442","getRemovedFunctions","protected List<Yfunction> getRemovedFunctions(Commit commitNew, Commit commitOld, String oldFilePath, String newFilePath, boolean strictMode) throws Exception","8","Body Change","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"442","getRemovedFunctions","protected List<Yfunction> getRemovedFunctions(Commit commitNew, Commit commitOld, String oldFilePath, String newFilePath, boolean strictMode) throws Exception","8","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"442","getRemovedFunctions","protected List<Yfunction> getRemovedFunctions(Commit commitNew, Commit commitOld, String oldFilePath, String newFilePath, boolean strictMode) throws Exception","8","Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"443","getFunctionNameCount","private Map<String, Integer> getFunctionNameCount(Map<String, Yfunction> functions)","8","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"443","getFunctionNameCount","private Map<String, Integer> getFunctionNameCount(Map<String, Yfunction> functions)","8","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"443","getFunctionNameCount","private Map<String, Integer> getFunctionNameCount(Map<String, Yfunction> functions)","8","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"443","getFunctionNameCount","private Map<String, Integer> getFunctionNameCount(Map<String, Yfunction> functions)","8","Signature Change, Body Change","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"443","getFunctionNameCount","private Map<String, Integer> getFunctionNameCount(Map<String, Yfunction> functions)","8","-","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"443","getFunctionNameCount","private Map<String, Integer> getFunctionNameCount(Map<String, Yfunction> functions)","8","-","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"443","getFunctionNameCount","private Map<String, Integer> getFunctionNameCount(Map<String, Yfunction> functions)","8","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"443","getFunctionNameCount","private Map<String, Integer> getFunctionNameCount(Map<String, Yfunction> functions)","8","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"444","GitRangeLogTask","public GitRangeLogTask(AnalysisTask startTask, StartEnvironment startEnv)","0","-","-","-","-"
"445","run","public void run() throws Exception","0","-","-","-","-"
"446","getResult","public List<String> getResult()","0","-","-","-","-"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","Body Change","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"447","AnalysisTask","public AnalysisTask(StartEnvironment startEnv)","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","Body Change","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"448","AnalysisTask","public AnalysisTask(StartEnvironment startEnv, Yfunction oldFunction) throws Exception","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"449","build","public void build() throws Exception","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"449","build","public void build() throws Exception","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"449","build","public void build() throws Exception","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"449","build","public void build() throws Exception","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"449","build","public void build() throws Exception","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"449","build","public void build() throws Exception","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"449","build","public void build() throws Exception","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"449","build","public void build() throws Exception","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"449","build","public void build() throws Exception","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"449","build","public void build() throws Exception","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"449","build","public void build() throws Exception","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"449","build","public void build() throws Exception","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"449","build","public void build() throws Exception","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"449","build","public void build() throws Exception","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"449","build","public void build() throws Exception","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"449","build","public void build() throws Exception","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"449","build","public void build() throws Exception","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"449","build","public void build() throws Exception","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"449","build","public void build() throws Exception","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"450","run","public void run() throws Exception","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"450","run","public void run() throws Exception","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"450","run","public void run() throws Exception","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"450","run","public void run() throws Exception","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"450","run","public void run() throws Exception","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"450","run","public void run() throws Exception","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"450","run","public void run() throws Exception","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"450","run","public void run() throws Exception","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"450","run","public void run() throws Exception","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"450","run","public void run() throws Exception","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"450","run","public void run() throws Exception","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"450","run","public void run() throws Exception","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"450","run","public void run() throws Exception","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"450","run","public void run() throws Exception","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"450","run","public void run() throws Exception","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"450","run","public void run() throws Exception","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"450","run","public void run() throws Exception","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"450","run","public void run() throws Exception","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"450","run","public void run() throws Exception","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"451","createResult","private void createResult()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"451","createResult","private void createResult()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"451","createResult","private void createResult()","19","Body Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"451","createResult","private void createResult()","19","Signature Change, Body Change","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"451","createResult","private void createResult()","19","Minor Modification","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"451","createResult","private void createResult()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"451","createResult","private void createResult()","19","Body Change","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"451","createResult","private void createResult()","19","Minor Modification","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"451","createResult","private void createResult()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"451","createResult","private void createResult()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"451","createResult","private void createResult()","19","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"451","createResult","private void createResult()","19","Minor Modification","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"451","createResult","private void createResult()","19","Body Change","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"451","createResult","private void createResult()","19","Minor Modification","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"451","createResult","private void createResult()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"451","createResult","private void createResult()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"451","createResult","private void createResult()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"451","createResult","private void createResult()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"451","createResult","private void createResult()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"452","hasMajorChange","private boolean hasMajorChange(Ychange ychange)","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","Body Change","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","Body Change","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"453","isMajorChange","private boolean isMajorChange(Ychange ychange)","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","Body Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"454","buildAndValidate","private void buildAndValidate() throws Exception","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","Body Change","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","Body Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","Body Change","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","Body Change","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","Minor Modification","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","Minor Modification","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","Body Change","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"455","createCommitCollection","private void createCommitCollection() throws IOException, NoParserFoundException","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","Minor Modification","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","Parameter Change, Signature Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"456","getOrCreateYcommit","private Ycommit getOrCreateYcommit(Commit commit, Ycommit fromChildCommit) throws ParseException, IOException, NoParserFoundException","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"457","createBaseYcommit","private Ycommit createBaseYcommit(Commit commit) throws IOException","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"458","setFilePath","public void setFilePath(String filePath)","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"458","setFilePath","public void setFilePath(String filePath)","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"458","setFilePath","public void setFilePath(String filePath)","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"458","setFilePath","public void setFilePath(String filePath)","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"459","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"460","setFunctionName","public void setFunctionName(String functionName)","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"461","getYresult","public Yresult getYresult()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"461","getYresult","public Yresult getYresult()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"461","getYresult","public Yresult getYresult()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"461","getYresult","public Yresult getYresult()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"462","getLastMajorChange","public Ychange getLastMajorChange()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"463","getFilePath","public String getFilePath()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"463","getFilePath","public String getFilePath()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"463","getFilePath","public String getFilePath()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"463","getFilePath","public String getFilePath()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"464","getFileName","public String getFileName()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"464","getFileName","public String getFileName()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"464","getFileName","public String getFileName()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"464","getFileName","public String getFileName()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"464","getFileName","public String getFileName()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"464","getFileName","public String getFileName()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"464","getFileName","public String getFileName()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"464","getFileName","public String getFileName()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"464","getFileName","public String getFileName()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"464","getFileName","public String getFileName()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"464","getFileName","public String getFileName()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"464","getFileName","public String getFileName()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"464","getFileName","public String getFileName()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"464","getFileName","public String getFileName()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"464","getFileName","public String getFileName()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"464","getFileName","public String getFileName()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"464","getFileName","public String getFileName()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"464","getFileName","public String getFileName()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"464","getFileName","public String getFileName()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"465","getStartCommit","public Ycommit getStartCommit()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"466","getFunctionName","public String getFunctionName()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"466","getFunctionName","public String getFunctionName()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"466","getFunctionName","public String getFunctionName()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"466","getFunctionName","public String getFunctionName()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"467","getFunctionStartLine","public int getFunctionStartLine()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"468","getFunctionEndLine","public int getFunctionEndLine()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"469","setFunctionEndLine","public void setFunctionEndLine(int functionEndLine)","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"470","getStartFunction","public Yfunction getStartFunction()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"471","setStartCommitName","public void setStartCommitName(String startCommitName)","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"472","getStartCommitName","public String getStartCommitName()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"472","getStartCommitName","public String getStartCommitName()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"472","getStartCommitName","public String getStartCommitName()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"472","getStartCommitName","public String getStartCommitName()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"473","getStartEnv","public StartEnvironment getStartEnv()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","Signature Change, Body Change","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"474","getNumCommitsTotal","public int getNumCommitsTotal()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","Signature Change, Body Change","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"475","setFunctionAnnotation","public void setFunctionAnnotation(String annotations)","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","Signature Change, Body Change","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"476","getFunctionAnnotation","public String getFunctionAnnotation()","19","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"477","getFunctionDoc","public String getFunctionDoc()","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"477","getFunctionDoc","public String getFunctionDoc()","19","Signature Change, Body Change","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","Progress on JavaScript parser make-work-again
","780f3bc11d9cc932eb6347bc2261c5203fb7ad60","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"478","setFunctionDoc","public void setFunctionDoc(String functionDoc)","19","Signature Change, Body Change","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"479","RecursiveAnalysisTask","public RecursiveAnalysisTask(StartEnvironment startEnv, AnalysisTask startTask)","1","Body Change","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"480","run","public void run() throws Exception","1","Body Change","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"481","runAndPrintOptionally","private void runAndPrintOptionally(AnalysisTask task) throws Exception","1","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"482","setPrintOutput","public void setPrintOutput(boolean printOutput)","1","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"483","getResult","public Yresult getResult()","1","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"484","getNumAnalyzedCommits","public int getNumAnalyzedCommits()","1","Signature Change, Body Change","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"485","getTimeTaken","public long getTimeTaken()","1","Signature Change, Body Change","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"486","getInstance","public static TypeScript getInstance()","0","-","-","-","-"
"487","TypeScript","public TypeScript() throws IOException","0","-","-","-","-"
"488","getTS","public V8Object getTS()","0","-","-","-","-"
"489","getRuntime","public V8 getRuntime()","0","-","-","-","-"
"490","getLine","public int getLine(V8Object node, V8Object sourceFile)","0","-","-","-","-"
"491","getNodeText","public String getNodeText(V8Object node)","0","-","-","-","-"
"492","getParser","public static Yparser getParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws NoParserFoundException, ParseException","11","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"492","getParser","public static Yparser getParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws NoParserFoundException, ParseException","11","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"492","getParser","public static Yparser getParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws NoParserFoundException, ParseException","11","Body Change","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"492","getParser","public static Yparser getParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws NoParserFoundException, ParseException","11","Body Change","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"492","getParser","public static Yparser getParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws NoParserFoundException, ParseException","11","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"492","getParser","public static Yparser getParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws NoParserFoundException, ParseException","11","Body Change","* Changed handling of Nashorn parse errors
* Some minor refactoring
","e2e41a766ac2d80a2d4cf0502eedd5a51f1e2874","Felix Grund"
"492","getParser","public static Yparser getParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws NoParserFoundException, ParseException","11","Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"492","getParser","public static Yparser getParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws NoParserFoundException, ParseException","11","Body Change","Remove unused dependencies and removed Ruby version for now (is now in separate branch)
","0c6ebff1d489d948c64f69093c8a9dea7660455b","Felix Grund"
"492","getParser","public static Yparser getParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws NoParserFoundException, ParseException","11","Body Change","Remove incomplete/obsolete JavaScript implementation
","7bcc29a9796c0e9dbf5caabfcdcaddc9c8f3416f","fgrund"
"492","getParser","public static Yparser getParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws NoParserFoundException, ParseException","11","Body Change","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"492","getParser","public static Yparser getParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws NoParserFoundException, ParseException","11","Body Change","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"493","createRepository","public static Repository createRepository(String repositoryPath) throws IOException","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"494","checkNotNull","public static void checkNotNull(String field, Object object) throws Exception","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"495","checkPositiveInt","public static void checkPositiveInt(String field, Object object) throws Exception","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"496","projectDir","public static String projectDir()","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"496","projectDir","public static String projectDir()","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"496","projectDir","public static String projectDir()","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"496","projectDir","public static String projectDir()","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"496","projectDir","public static String projectDir()","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"497","getBodySimilarity","public static double getBodySimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"498","getNameSimilarity","public static double getNameSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","Body Change","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"499","printMethodHistory","public static void printMethodHistory(AnalysisTask task)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","Body Change","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"500","printMethodHistory","public static void printMethodHistory(List<String> commitNames)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"501","printAnalysisRun","public static void printAnalysisRun(AnalysisTask task)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","Minor Modification","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","Body Change","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","Body Change","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","Body Change","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","Body Change","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","Body Change","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","Body Change","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","Body Change","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","Minor Modification","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","Body Change","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"502","writeOutputFile","public static void writeOutputFile(String subdir, String commitName, String filePath, String functionId, String repoName, String content, String fileExtension)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","Signature Change, Body Change","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"503","writeOutputFileWithPath","private static final void writeOutputFileWithPath(String filePath, String content) throws IOException","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","Signature Change, Body Change","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"504","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","Signature Change, Body Change","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"505","writeShovelResultFile","public static void writeShovelResultFile(JsonResult jsonResult, String outFilePath) throws IOException","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","Signature Change, Body Change","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"506","writeGitLogFile","public static void writeGitLogFile(JsonResult jsonResult)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","Signature Change, Body Change","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"507","writeJsonOracleToFile","public static void writeJsonOracleToFile(JsonResult jsonResult)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","Body Change","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"508","writeSimilarityToFile","public static void writeSimilarityToFile( JsonSimilarity jsonSimilarity, String functionId, String repoName, String filePath)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","Parameter Change, Signature Change, Body Change","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","Body Change","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"509","writeSemanticDiff","public static void writeSemanticDiff(String baselineName, JsonResult originalJsonResult, JsonChangeHistoryDiff diff)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","Body Change","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"510","writeGitDiff","public static void writeGitDiff(String commitName, String filePath, Repository repository, String repositoryName) throws Exception","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","Body Change","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","Body Change","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"511","writeJsonSimilarity","public static void writeJsonSimilarity(String repoName, String filePath, Yfunction compareFunction, Yfunction mostSimilarFunction, FunctionSimilarity similarity)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","Signature Change, Body Change","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"512","getTextFragment","public static String getTextFragment(String text, int beginLine, int endLine)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"513","getLines","public static List<String> getLines(String string)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","Signature Change, Body Change","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"513","getLines","public static List<String> getLines(String string)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"513","getLines","public static List<String> getLines(String string)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"513","getLines","public static List<String> getLines(String string)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"513","getLines","public static List<String> getLines(String string)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","Body Change","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"514","countLineNumbers","public static int countLineNumbers(String string)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"515","getMsBetweenCommits","public static long getMsBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","Body Change","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"516","getDaysBetweenCommits","public static double getDaysBetweenCommits(Commit oldCommit, Commit newCommit)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"517","getLineNumberDistance","public static int getLineNumberDistance(Yfunction aFunction, Yfunction bFunction)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"518","getLineNumberSimilarity","public static double getLineNumberSimilarity(Yfunction aFunction, Yfunction bFunction)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"519","getFileExtensionWithoutDot","public static String getFileExtensionWithoutDot(String filePath)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"520","getFileName","public static String getFileName(String filePath)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"520","getFileName","public static String getFileName(String filePath)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"520","getFileName","public static String getFileName(String filePath)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"520","getFileName","public static String getFileName(String filePath)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"520","getFileName","public static String getFileName(String filePath)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"521","sanitizeFunctionId","public static String sanitizeFunctionId(String ident)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","Signature Change, Body Change","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"522","resultMapToString","public static String resultMapToString(Map<String, String> result)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","Signature Change, Body Change","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","Body Change","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"523","parametersMetadataEqual","public static boolean parametersMetadataEqual(List<Yparameter> parametersA, List<Yparameter> parametersB)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","Signature Change, Body Change","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","Signature Change, Body Change","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","Signature Change, Body Change","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","Signature Change, Body Change","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","Signature Change, Body Change","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"524","functionsToIdMap","public static Map<String, Yfunction> functionsToIdMap(List<Yfunction> functions)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","Signature Change, Body Change","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"525","parentNamesMatch","public static boolean parentNamesMatch(Yfunction function, Yfunction compareFunction)","27","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Add support for specifying output dir
","5ec0d46147930d22ed85a9dc314d36f8caa40249","Nick Bradley"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Fix output dir path construction
","850faa2a77091658848fe419576022c4c0453c68","Nick Bradley"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Extracted output dir to static field
","c646c886fca713c43c7c4ef34eeabccd7a1c10fa","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Output DIR static
","9bf1e58a6931e80c4ce070e89aa62249360b7e90","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","analysis script improvements
","9e8009beb16532b9412ca4f7d872ec3e94923d7e","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Merge branch 'stats-script' into develop
","82bbc02613fe4d2cd69eed457cc71dca2ed8c794","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Stripping output filenames to max 150 chars
","3a1ddd132ee5600ad88c7e28ed4bf52238df376a","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"526","isFormatChange","/*** * Check for formatting changes * <p> * If indentation, whitespace or any sort of formatting * was performed on a method the function will return true. * Otherwise it will return false. * </p> * @param function current matched function * @param compareFunction previous function to compare with * @return boolean True/False */ public static boolean isFormatChange(Yfunction function, Yfunction compareFunction)","27","Signature Change, Body Change","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"527","gitDiffParent","public static String gitDiffParent(String commitName, String filePath, File repositoryDir) throws Exception","3","Body Change","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"527","gitDiffParent","public static String gitDiffParent(String commitName, String filePath, File repositoryDir) throws Exception","3","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"527","gitDiffParent","public static String gitDiffParent(String commitName, String filePath, File repositoryDir) throws Exception","3","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"528","gitLog","public static BufferedReader gitLog(String startCommitName, File repositoryDir, int rangeStart, int rangeEnd, String filePath) throws Exception","3","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"528","gitLog","public static BufferedReader gitLog(String startCommitName, File repositoryDir, int rangeStart, int rangeEnd, String filePath) throws Exception","3","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"528","gitLog","public static BufferedReader gitLog(String startCommitName, File repositoryDir, int rangeStart, int rangeEnd, String filePath) throws Exception","3","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"529","Yexceptionschange","public Yexceptionschange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"530","getOldValue","@Override protected Object getOldValue()","1","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"531","getNewValue","@Override protected Object getNewValue()","1","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"532","Yparametermetachange","public Yparametermetachange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"533","Ybodychange","public Ybodychange(StartEnvironment startEnv, Yfunction matchedFunction, Yfunction compareFunction)","0","-","-","-","-"
"534","Ymodifierchange","public Ymodifierchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"535","getOldValue","@Override protected Object getOldValue()","1","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"536","getNewValue","@Override protected Object getNewValue()","1","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"537","Ycrossfilechange","public Ycrossfilechange(StartEnvironment startEnv, Yfunction matchedFunction, Yfunction compareFunction)","0","-","-","-","-"
"538","toString","@Override public String toString()","0","-","-","-","-"
"539","Yparameterchange","public Yparameterchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"540","getOldValue","@Override protected Object getOldValue()","1","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"541","getNewValue","@Override protected Object getNewValue()","1","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"542","Ynochange","public Ynochange(StartEnvironment startEnv, Commit commit)","3","Parameter Change, Signature Change","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"542","Ynochange","public Ynochange(StartEnvironment startEnv, Commit commit)","3","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"542","Ynochange","public Ynochange(StartEnvironment startEnv, Commit commit)","3","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"543","Yrename","public Yrename(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","2","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"543","Yrename","public Yrename(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","2","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"544","getOldValue","@Override protected Object getOldValue()","2","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"544","getOldValue","@Override protected Object getOldValue()","2","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"545","getNewValue","@Override protected Object getNewValue()","2","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"545","getNewValue","@Override protected Object getNewValue()","2","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"546","Ymovefromfile","public Ymovefromfile(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","1","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"547","getExtendedDetailsJsonObject","@Override public JsonObject getExtendedDetailsJsonObject()","1","Annotation Change, Signature Change, Body Change","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"548","Ydocchange","public Ydocchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","0","-","-","-","-"
"549","getOldValue","@Override protected Object getOldValue()","0","-","-","-","-"
"550","getNewValue","@Override protected Object getNewValue()","0","-","-","-","-"
"551","Ychange","public Ychange(StartEnvironment startEnv, Commit commit)","7","Parameter Change, Signature Change, Body Change","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"551","Ychange","public Ychange(StartEnvironment startEnv, Commit commit)","7","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"551","Ychange","public Ychange(StartEnvironment startEnv, Commit commit)","7","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"551","Ychange","public Ychange(StartEnvironment startEnv, Commit commit)","7","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"551","Ychange","public Ychange(StartEnvironment startEnv, Commit commit)","7","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"551","Ychange","public Ychange(StartEnvironment startEnv, Commit commit)","7","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"551","Ychange","public Ychange(StartEnvironment startEnv, Commit commit)","7","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"552","getCommit","public Commit getCommit()","7","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"552","getCommit","public Commit getCommit()","7","Signature Change, Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"552","getCommit","public Commit getCommit()","7","Signature Change, Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"552","getCommit","public Commit getCommit()","7","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"552","getCommit","public Commit getCommit()","7","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"552","getCommit","public Commit getCommit()","7","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"552","getCommit","public Commit getCommit()","7","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"553","toString","@Override public String toString()","7","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"553","toString","@Override public String toString()","7","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"553","toString","@Override public String toString()","7","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"553","toString","@Override public String toString()","7","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"553","toString","@Override public String toString()","7","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"553","toString","@Override public String toString()","7","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"553","toString","@Override public String toString()","7","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"554","toJsonObject","public JsonObject toJsonObject()","7","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"554","toJsonObject","public JsonObject toJsonObject()","7","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"554","toJsonObject","public JsonObject toJsonObject()","7","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"554","toJsonObject","public JsonObject toJsonObject()","7","Signature Change, Body Change","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"554","toJsonObject","public JsonObject toJsonObject()","7","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"554","toJsonObject","public JsonObject toJsonObject()","7","Minor Modification","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"554","toJsonObject","public JsonObject toJsonObject()","7","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"555","getTypeAsString","public String getTypeAsString()","7","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"555","getTypeAsString","public String getTypeAsString()","7","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"555","getTypeAsString","public String getTypeAsString()","7","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"555","getTypeAsString","public String getTypeAsString()","7","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"555","getTypeAsString","public String getTypeAsString()","7","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"555","getTypeAsString","public String getTypeAsString()","7","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"555","getTypeAsString","public String getTypeAsString()","7","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"556","getDiffAsString","protected String getDiffAsString(String sourceOldString, String sourceNewString) throws IOException","7","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"556","getDiffAsString","protected String getDiffAsString(String sourceOldString, String sourceNewString) throws IOException","7","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"556","getDiffAsString","protected String getDiffAsString(String sourceOldString, String sourceNewString) throws IOException","7","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"556","getDiffAsString","protected String getDiffAsString(String sourceOldString, String sourceNewString) throws IOException","7","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"556","getDiffAsString","protected String getDiffAsString(String sourceOldString, String sourceNewString) throws IOException","7","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"556","getDiffAsString","protected String getDiffAsString(String sourceOldString, String sourceNewString) throws IOException","7","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"556","getDiffAsString","protected String getDiffAsString(String sourceOldString, String sourceNewString) throws IOException","7","Signature Change, Body Change","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"557","Yintroduced","public Yintroduced(StartEnvironment startEnv, Yfunction newFunction)","6","Minor Modification","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"557","Yintroduced","public Yintroduced(StartEnvironment startEnv, Yfunction newFunction)","6","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"557","Yintroduced","public Yintroduced(StartEnvironment startEnv, Yfunction newFunction)","6","-","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"557","Yintroduced","public Yintroduced(StartEnvironment startEnv, Yfunction newFunction)","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"557","Yintroduced","public Yintroduced(StartEnvironment startEnv, Yfunction newFunction)","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"557","Yintroduced","public Yintroduced(StartEnvironment startEnv, Yfunction newFunction)","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"558","toString","@Override public String toString()","6","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"558","toString","@Override public String toString()","6","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"558","toString","@Override public String toString()","6","-","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"558","toString","@Override public String toString()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"558","toString","@Override public String toString()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"558","toString","@Override public String toString()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"559","toJsonObject","@Override public JsonObject toJsonObject()","6","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"559","toJsonObject","@Override public JsonObject toJsonObject()","6","Annotation Change, Signature Change, Body Change","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"559","toJsonObject","@Override public JsonObject toJsonObject()","6","Body Change","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"559","toJsonObject","@Override public JsonObject toJsonObject()","6","Minor Modification","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"559","toJsonObject","@Override public JsonObject toJsonObject()","6","Minor Modification","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"559","toJsonObject","@Override public JsonObject toJsonObject()","6","Minor Modification","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"560","getDiffAsString","private String getDiffAsString()","6","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"560","getDiffAsString","private String getDiffAsString()","6","Signature Change, Body Change","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"560","getDiffAsString","private String getDiffAsString()","6","-","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"560","getDiffAsString","private String getDiffAsString()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"560","getDiffAsString","private String getDiffAsString()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"560","getDiffAsString","private String getDiffAsString()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"561","Ysignaturechange","public Ysignaturechange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"562","getOldValue","protected abstract Object getOldValue();","1","Signature Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"563","getNewValue","protected abstract Object getNewValue();","1","Signature Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"564","getExtendedDetailsJsonObject","@Override public JsonObject getExtendedDetailsJsonObject()","1","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"565","Ymultichange","public Ymultichange(StartEnvironment startEnv, Commit commit, List<Ychange> changes)","5","Parameter Change, Signature Change, Body Change","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"565","Ymultichange","public Ymultichange(StartEnvironment startEnv, Commit commit, List<Ychange> changes)","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"565","Ymultichange","public Ymultichange(StartEnvironment startEnv, Commit commit, List<Ychange> changes)","5","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"565","Ymultichange","public Ymultichange(StartEnvironment startEnv, Commit commit, List<Ychange> changes)","5","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"565","Ymultichange","public Ymultichange(StartEnvironment startEnv, Commit commit, List<Ychange> changes)","5","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"566","getChanges","public List<Ychange> getChanges()","5","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"566","getChanges","public List<Ychange> getChanges()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"566","getChanges","public List<Ychange> getChanges()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"566","getChanges","public List<Ychange> getChanges()","5","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"566","getChanges","public List<Ychange> getChanges()","5","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"567","toString","@Override public String toString()","5","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"567","toString","@Override public String toString()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"567","toString","@Override public String toString()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"567","toString","@Override public String toString()","5","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"567","toString","@Override public String toString()","5","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"568","toJsonObject","@Override public JsonObject toJsonObject()","5","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"568","toJsonObject","@Override public JsonObject toJsonObject()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"568","toJsonObject","@Override public JsonObject toJsonObject()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"568","toJsonObject","@Override public JsonObject toJsonObject()","5","Annotation Change, Signature Change, Body Change","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"568","toJsonObject","@Override public JsonObject toJsonObject()","5","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"569","getTypeAsString","@Override public String getTypeAsString()","5","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"569","getTypeAsString","@Override public String getTypeAsString()","5","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"569","getTypeAsString","@Override public String getTypeAsString()","5","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"569","getTypeAsString","@Override public String getTypeAsString()","5","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"569","getTypeAsString","@Override public String getTypeAsString()","5","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"570","Yannotationchange","public Yannotationchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","0","-","-","-","-"
"571","getOldValue","@Override protected Object getOldValue()","0","-","-","-","-"
"572","getNewValue","@Override protected Object getNewValue()","0","-","-","-","-"
"573","Yfilerename","public Yfilerename(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","1","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"574","getExtendedDetailsJsonObject","@Override public JsonObject getExtendedDetailsJsonObject()","1","Annotation Change, Signature Change, Body Change","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"575","Ycomparefunctionchange","public Ycomparefunctionchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","12","Body Change","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"575","Ycomparefunctionchange","public Ycomparefunctionchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","12","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"575","Ycomparefunctionchange","public Ycomparefunctionchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"575","Ycomparefunctionchange","public Ycomparefunctionchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"575","Ycomparefunctionchange","public Ycomparefunctionchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","12","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"575","Ycomparefunctionchange","public Ycomparefunctionchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","12","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"575","Ycomparefunctionchange","public Ycomparefunctionchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","12","-","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"575","Ycomparefunctionchange","public Ycomparefunctionchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","12","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"575","Ycomparefunctionchange","public Ycomparefunctionchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","12","-","Merge pull request #1 from ataraxie/reid_icse2021

Reid icse2021","d5e74858b7ae845f83d962d3676c1e68a15672eb","Syed Ishtiaque Ahmad"
"575","Ycomparefunctionchange","public Ycomparefunctionchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","12","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"575","Ycomparefunctionchange","public Ycomparefunctionchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","12","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"575","Ycomparefunctionchange","public Ycomparefunctionchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","12","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"576","toString","@Override public String toString()","12","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"576","toString","@Override public String toString()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"576","toString","@Override public String toString()","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"576","toString","@Override public String toString()","12","Body Change","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"576","toString","@Override public String toString()","12","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"576","toString","@Override public String toString()","12","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"576","toString","@Override public String toString()","12","-","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"576","toString","@Override public String toString()","12","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"576","toString","@Override public String toString()","12","-","Merge pull request #1 from ataraxie/reid_icse2021

Reid icse2021","d5e74858b7ae845f83d962d3676c1e68a15672eb","Syed Ishtiaque Ahmad"
"576","toString","@Override public String toString()","12","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"576","toString","@Override public String toString()","12","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"576","toString","@Override public String toString()","12","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"577","toJsonObject","@Override public JsonObject toJsonObject()","12","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"577","toJsonObject","@Override public JsonObject toJsonObject()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"577","toJsonObject","@Override public JsonObject toJsonObject()","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"577","toJsonObject","@Override public JsonObject toJsonObject()","12","Annotation Change, Signature Change, Body Change","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"577","toJsonObject","@Override public JsonObject toJsonObject()","12","Body Change","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"577","toJsonObject","@Override public JsonObject toJsonObject()","12","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"577","toJsonObject","@Override public JsonObject toJsonObject()","12","Body Change","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"577","toJsonObject","@Override public JsonObject toJsonObject()","12","Body Change","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"577","toJsonObject","@Override public JsonObject toJsonObject()","12","Body Change","Merge pull request #1 from ataraxie/reid_icse2021

Reid icse2021","d5e74858b7ae845f83d962d3676c1e68a15672eb","Syed Ishtiaque Ahmad"
"577","toJsonObject","@Override public JsonObject toJsonObject()","12","Minor Modification","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"577","toJsonObject","@Override public JsonObject toJsonObject()","12","Minor Modification","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"577","toJsonObject","@Override public JsonObject toJsonObject()","12","Minor Modification","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"578","getExtendedDetailsJsonObject","public JsonObject getExtendedDetailsJsonObject()","12","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"578","getExtendedDetailsJsonObject","public JsonObject getExtendedDetailsJsonObject()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"578","getExtendedDetailsJsonObject","public JsonObject getExtendedDetailsJsonObject()","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"578","getExtendedDetailsJsonObject","public JsonObject getExtendedDetailsJsonObject()","12","Signature Change, Body Change","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"578","getExtendedDetailsJsonObject","public JsonObject getExtendedDetailsJsonObject()","12","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"578","getExtendedDetailsJsonObject","public JsonObject getExtendedDetailsJsonObject()","12","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"578","getExtendedDetailsJsonObject","public JsonObject getExtendedDetailsJsonObject()","12","-","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"578","getExtendedDetailsJsonObject","public JsonObject getExtendedDetailsJsonObject()","12","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"578","getExtendedDetailsJsonObject","public JsonObject getExtendedDetailsJsonObject()","12","-","Merge pull request #1 from ataraxie/reid_icse2021

Reid icse2021","d5e74858b7ae845f83d962d3676c1e68a15672eb","Syed Ishtiaque Ahmad"
"578","getExtendedDetailsJsonObject","public JsonObject getExtendedDetailsJsonObject()","12","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"578","getExtendedDetailsJsonObject","public JsonObject getExtendedDetailsJsonObject()","12","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"578","getExtendedDetailsJsonObject","public JsonObject getExtendedDetailsJsonObject()","12","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"579","getNewFunction","public Yfunction getNewFunction()","12","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"579","getNewFunction","public Yfunction getNewFunction()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"579","getNewFunction","public Yfunction getNewFunction()","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"579","getNewFunction","public Yfunction getNewFunction()","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"579","getNewFunction","public Yfunction getNewFunction()","12","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"579","getNewFunction","public Yfunction getNewFunction()","12","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"579","getNewFunction","public Yfunction getNewFunction()","12","-","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"579","getNewFunction","public Yfunction getNewFunction()","12","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"579","getNewFunction","public Yfunction getNewFunction()","12","-","Merge pull request #1 from ataraxie/reid_icse2021

Reid icse2021","d5e74858b7ae845f83d962d3676c1e68a15672eb","Syed Ishtiaque Ahmad"
"579","getNewFunction","public Yfunction getNewFunction()","12","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"579","getNewFunction","public Yfunction getNewFunction()","12","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"579","getNewFunction","public Yfunction getNewFunction()","12","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"580","getOldFunction","public Yfunction getOldFunction()","12","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"580","getOldFunction","public Yfunction getOldFunction()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"580","getOldFunction","public Yfunction getOldFunction()","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"580","getOldFunction","public Yfunction getOldFunction()","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"580","getOldFunction","public Yfunction getOldFunction()","12","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"580","getOldFunction","public Yfunction getOldFunction()","12","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"580","getOldFunction","public Yfunction getOldFunction()","12","-","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"580","getOldFunction","public Yfunction getOldFunction()","12","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"580","getOldFunction","public Yfunction getOldFunction()","12","-","Merge pull request #1 from ataraxie/reid_icse2021

Reid icse2021","d5e74858b7ae845f83d962d3676c1e68a15672eb","Syed Ishtiaque Ahmad"
"580","getOldFunction","public Yfunction getOldFunction()","12","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"580","getOldFunction","public Yfunction getOldFunction()","12","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"580","getOldFunction","public Yfunction getOldFunction()","12","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"581","getDaysBetweenCommits","public double getDaysBetweenCommits()","12","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"581","getDaysBetweenCommits","public double getDaysBetweenCommits()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"581","getDaysBetweenCommits","public double getDaysBetweenCommits()","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"581","getDaysBetweenCommits","public double getDaysBetweenCommits()","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"581","getDaysBetweenCommits","public double getDaysBetweenCommits()","12","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"581","getDaysBetweenCommits","public double getDaysBetweenCommits()","12","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"581","getDaysBetweenCommits","public double getDaysBetweenCommits()","12","-","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"581","getDaysBetweenCommits","public double getDaysBetweenCommits()","12","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"581","getDaysBetweenCommits","public double getDaysBetweenCommits()","12","-","Merge pull request #1 from ataraxie/reid_icse2021

Reid icse2021","d5e74858b7ae845f83d962d3676c1e68a15672eb","Syed Ishtiaque Ahmad"
"581","getDaysBetweenCommits","public double getDaysBetweenCommits()","12","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"581","getDaysBetweenCommits","public double getDaysBetweenCommits()","12","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"581","getDaysBetweenCommits","public double getDaysBetweenCommits()","12","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"582","getCommitsBetweenForRepo","public List<Commit> getCommitsBetweenForRepo()","12","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"582","getCommitsBetweenForRepo","public List<Commit> getCommitsBetweenForRepo()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"582","getCommitsBetweenForRepo","public List<Commit> getCommitsBetweenForRepo()","12","Signature Change, Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"582","getCommitsBetweenForRepo","public List<Commit> getCommitsBetweenForRepo()","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"582","getCommitsBetweenForRepo","public List<Commit> getCommitsBetweenForRepo()","12","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"582","getCommitsBetweenForRepo","public List<Commit> getCommitsBetweenForRepo()","12","Minor Modification","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"582","getCommitsBetweenForRepo","public List<Commit> getCommitsBetweenForRepo()","12","-","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"582","getCommitsBetweenForRepo","public List<Commit> getCommitsBetweenForRepo()","12","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"582","getCommitsBetweenForRepo","public List<Commit> getCommitsBetweenForRepo()","12","-","Merge pull request #1 from ataraxie/reid_icse2021

Reid icse2021","d5e74858b7ae845f83d962d3676c1e68a15672eb","Syed Ishtiaque Ahmad"
"582","getCommitsBetweenForRepo","public List<Commit> getCommitsBetweenForRepo()","12","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"582","getCommitsBetweenForRepo","public List<Commit> getCommitsBetweenForRepo()","12","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"582","getCommitsBetweenForRepo","public List<Commit> getCommitsBetweenForRepo()","12","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"583","getCommitsBetweenForFile","public List<Commit> getCommitsBetweenForFile()","12","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"583","getCommitsBetweenForFile","public List<Commit> getCommitsBetweenForFile()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"583","getCommitsBetweenForFile","public List<Commit> getCommitsBetweenForFile()","12","Signature Change, Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"583","getCommitsBetweenForFile","public List<Commit> getCommitsBetweenForFile()","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"583","getCommitsBetweenForFile","public List<Commit> getCommitsBetweenForFile()","12","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"583","getCommitsBetweenForFile","public List<Commit> getCommitsBetweenForFile()","12","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"583","getCommitsBetweenForFile","public List<Commit> getCommitsBetweenForFile()","12","-","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"583","getCommitsBetweenForFile","public List<Commit> getCommitsBetweenForFile()","12","Body Change","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"583","getCommitsBetweenForFile","public List<Commit> getCommitsBetweenForFile()","12","-","Merge pull request #1 from ataraxie/reid_icse2021

Reid icse2021","d5e74858b7ae845f83d962d3676c1e68a15672eb","Syed Ishtiaque Ahmad"
"583","getCommitsBetweenForFile","public List<Commit> getCommitsBetweenForFile()","12","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"583","getCommitsBetweenForFile","public List<Commit> getCommitsBetweenForFile()","12","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"583","getCommitsBetweenForFile","public List<Commit> getCommitsBetweenForFile()","12","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"584","getDiffAsString","private String getDiffAsString()","12","Signature Change, Body Change","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"584","getDiffAsString","private String getDiffAsString()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"584","getDiffAsString","private String getDiffAsString()","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"584","getDiffAsString","private String getDiffAsString()","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"584","getDiffAsString","private String getDiffAsString()","12","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"584","getDiffAsString","private String getDiffAsString()","12","Modifier Change, Signature Change, Body Change","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"584","getDiffAsString","private String getDiffAsString()","12","-","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"584","getDiffAsString","private String getDiffAsString()","12","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"584","getDiffAsString","private String getDiffAsString()","12","-","Merge pull request #1 from ataraxie/reid_icse2021

Reid icse2021","d5e74858b7ae845f83d962d3676c1e68a15672eb","Syed Ishtiaque Ahmad"
"584","getDiffAsString","private String getDiffAsString()","12","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"584","getDiffAsString","private String getDiffAsString()","12","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"584","getDiffAsString","private String getDiffAsString()","12","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"585","getOldCommit","public Commit getOldCommit()","12","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"585","getOldCommit","public Commit getOldCommit()","12","Signature Change, Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"585","getOldCommit","public Commit getOldCommit()","12","Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"585","getOldCommit","public Commit getOldCommit()","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"585","getOldCommit","public Commit getOldCommit()","12","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"585","getOldCommit","public Commit getOldCommit()","12","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"585","getOldCommit","public Commit getOldCommit()","12","-","Add extra attributes in the JSON result object
- Add filepath of the method
- Add start line of the method
- Add name of the method
- Add actual source code in JSON result
","870bd9e6894c6f03cd6bce969226ee9a0c21de8f","Syed Ishtiaque Ahmad"
"585","getOldCommit","public Commit getOldCommit()","12","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"585","getOldCommit","public Commit getOldCommit()","12","-","Merge pull request #1 from ataraxie/reid_icse2021

Reid icse2021","d5e74858b7ae845f83d962d3676c1e68a15672eb","Syed Ishtiaque Ahmad"
"585","getOldCommit","public Commit getOldCommit()","12","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"585","getOldCommit","public Commit getOldCommit()","12","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"585","getOldCommit","public Commit getOldCommit()","12","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"586","Yformatchange","public Yformatchange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","0","-","-","-","-"
"587","Yreturntypechange","public Yreturntypechange(StartEnvironment startEnv, Yfunction newFunction, Yfunction oldFunction)","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"588","getOldValue","@Override protected Object getOldValue()","1","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"589","getNewValue","@Override protected Object getNewValue()","1","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"590","getBody","/** * @return Method body as string */ String getBody();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"590","getBody","/** * @return Method body as string */ String getBody();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"590","getBody","/** * @return Method body as string */ String getBody();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"590","getBody","/** * @return Method body as string */ String getBody();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"590","getBody","/** * @return Method body as string */ String getBody();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"590","getBody","/** * @return Method body as string */ String getBody();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"590","getBody","/** * @return Method body as string */ String getBody();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"590","getBody","/** * @return Method body as string */ String getBody();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"590","getBody","/** * @return Method body as string */ String getBody();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"590","getBody","/** * @return Method body as string */ String getBody();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"591","getName","/** * @return Method name as string */ String getName();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"591","getName","/** * @return Method name as string */ String getName();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"591","getName","/** * @return Method name as string */ String getName();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"591","getName","/** * @return Method name as string */ String getName();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"591","getName","/** * @return Method name as string */ String getName();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"591","getName","/** * @return Method name as string */ String getName();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"591","getName","/** * @return Method name as string */ String getName();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"591","getName","/** * @return Method name as string */ String getName();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"591","getName","/** * @return Method name as string */ String getName();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"591","getName","/** * @return Method name as string */ String getName();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"592","getParameters","/** * @return List of parameters */ List<Yparameter> getParameters();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"592","getParameters","/** * @return List of parameters */ List<Yparameter> getParameters();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"592","getParameters","/** * @return List of parameters */ List<Yparameter> getParameters();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"592","getParameters","/** * @return List of parameters */ List<Yparameter> getParameters();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"592","getParameters","/** * @return List of parameters */ List<Yparameter> getParameters();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"592","getParameters","/** * @return List of parameters */ List<Yparameter> getParameters();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"592","getParameters","/** * @return List of parameters */ List<Yparameter> getParameters();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"592","getParameters","/** * @return List of parameters */ List<Yparameter> getParameters();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"592","getParameters","/** * @return List of parameters */ List<Yparameter> getParameters();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"592","getParameters","/** * @return List of parameters */ List<Yparameter> getParameters();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"593","getReturnStmt","/** * @return Statement/type of the method. Should be","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"593","getReturnStmt","/** * @return Statement/type of the method. Should be","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"593","getReturnStmt","/** * @return Statement/type of the method. Should be","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"593","getReturnStmt","/** * @return Statement/type of the method. Should be","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"593","getReturnStmt","/** * @return Statement/type of the method. Should be","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"593","getReturnStmt","/** * @return Statement/type of the method. Should be","10","Signature Change, Body Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"593","getReturnStmt","/** * @return Statement/type of the method. Should be","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"593","getReturnStmt","/** * @return Statement/type of the method. Should be","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"593","getReturnStmt","/** * @return Statement/type of the method. Should be","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"593","getReturnStmt","/** * @return Statement/type of the method. Should be","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"594","getModifiers","/** * @return Method modifiers. Should be","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"594","getModifiers","/** * @return Method modifiers. Should be","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"594","getModifiers","/** * @return Method modifiers. Should be","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"594","getModifiers","/** * @return Method modifiers. Should be","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"594","getModifiers","/** * @return Method modifiers. Should be","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"594","getModifiers","/** * @return Method modifiers. Should be","10","Signature Change, Body Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"594","getModifiers","/** * @return Method modifiers. Should be","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"594","getModifiers","/** * @return Method modifiers. Should be","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"594","getModifiers","/** * @return Method modifiers. Should be","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"594","getModifiers","/** * @return Method modifiers. Should be","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"595","getExceptions","/** * @return Thrown exception types. Should be","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"595","getExceptions","/** * @return Thrown exception types. Should be","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"595","getExceptions","/** * @return Thrown exception types. Should be","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"595","getExceptions","/** * @return Thrown exception types. Should be","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"595","getExceptions","/** * @return Thrown exception types. Should be","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"595","getExceptions","/** * @return Thrown exception types. Should be","10","Signature Change, Body Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"595","getExceptions","/** * @return Thrown exception types. Should be","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"595","getExceptions","/** * @return Thrown exception types. Should be","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"595","getExceptions","/** * @return Thrown exception types. Should be","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"595","getExceptions","/** * @return Thrown exception types. Should be","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"596","getNameLineNumber","/** * @return Line number in which the method name appears. */ int getNameLineNumber();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"596","getNameLineNumber","/** * @return Line number in which the method name appears. */ int getNameLineNumber();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"596","getNameLineNumber","/** * @return Line number in which the method name appears. */ int getNameLineNumber();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"596","getNameLineNumber","/** * @return Line number in which the method name appears. */ int getNameLineNumber();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"596","getNameLineNumber","/** * @return Line number in which the method name appears. */ int getNameLineNumber();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"596","getNameLineNumber","/** * @return Line number in which the method name appears. */ int getNameLineNumber();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"596","getNameLineNumber","/** * @return Line number in which the method name appears. */ int getNameLineNumber();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"596","getNameLineNumber","/** * @return Line number in which the method name appears. */ int getNameLineNumber();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"596","getNameLineNumber","/** * @return Line number in which the method name appears. */ int getNameLineNumber();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"596","getNameLineNumber","/** * @return Line number in which the method name appears. */ int getNameLineNumber();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"597","getEndLineNumber","/** * @return Line number in which the method ends (e.g. with `}`) */ int getEndLineNumber();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"597","getEndLineNumber","/** * @return Line number in which the method ends (e.g. with `}`) */ int getEndLineNumber();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"597","getEndLineNumber","/** * @return Line number in which the method ends (e.g. with `}`) */ int getEndLineNumber();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"597","getEndLineNumber","/** * @return Line number in which the method ends (e.g. with `}`) */ int getEndLineNumber();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"597","getEndLineNumber","/** * @return Line number in which the method ends (e.g. with `}`) */ int getEndLineNumber();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"597","getEndLineNumber","/** * @return Line number in which the method ends (e.g. with `}`) */ int getEndLineNumber();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"597","getEndLineNumber","/** * @return Line number in which the method ends (e.g. with `}`) */ int getEndLineNumber();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"597","getEndLineNumber","/** * @return Line number in which the method ends (e.g. with `}`) */ int getEndLineNumber();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"597","getEndLineNumber","/** * @return Line number in which the method ends (e.g. with `}`) */ int getEndLineNumber();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"597","getEndLineNumber","/** * @return Line number in which the method ends (e.g. with `}`) */ int getEndLineNumber();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"598","getCommitName","/** * @return Full commit SHA of the commit that has this method */ String getCommitName();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"598","getCommitName","/** * @return Full commit SHA of the commit that has this method */ String getCommitName();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"598","getCommitName","/** * @return Full commit SHA of the commit that has this method */ String getCommitName();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"598","getCommitName","/** * @return Full commit SHA of the commit that has this method */ String getCommitName();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"598","getCommitName","/** * @return Full commit SHA of the commit that has this method */ String getCommitName();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"598","getCommitName","/** * @return Full commit SHA of the commit that has this method */ String getCommitName();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"598","getCommitName","/** * @return Full commit SHA of the commit that has this method */ String getCommitName();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"598","getCommitName","/** * @return Full commit SHA of the commit that has this method */ String getCommitName();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"598","getCommitName","/** * @return Full commit SHA of the commit that has this method */ String getCommitName();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"598","getCommitName","/** * @return Full commit SHA of the commit that has this method */ String getCommitName();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"599","getCommitNameShort","/** * @return Short 6-digit commit SHA of the commit that has this method */ String getCommitNameShort();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"599","getCommitNameShort","/** * @return Short 6-digit commit SHA of the commit that has this method */ String getCommitNameShort();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"599","getCommitNameShort","/** * @return Short 6-digit commit SHA of the commit that has this method */ String getCommitNameShort();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"599","getCommitNameShort","/** * @return Short 6-digit commit SHA of the commit that has this method */ String getCommitNameShort();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"599","getCommitNameShort","/** * @return Short 6-digit commit SHA of the commit that has this method */ String getCommitNameShort();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"599","getCommitNameShort","/** * @return Short 6-digit commit SHA of the commit that has this method */ String getCommitNameShort();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"599","getCommitNameShort","/** * @return Short 6-digit commit SHA of the commit that has this method */ String getCommitNameShort();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"599","getCommitNameShort","/** * @return Short 6-digit commit SHA of the commit that has this method */ String getCommitNameShort();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"599","getCommitNameShort","/** * @return Short 6-digit commit SHA of the commit that has this method */ String getCommitNameShort();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"599","getCommitNameShort","/** * @return Short 6-digit commit SHA of the commit that has this method */ String getCommitNameShort();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"600","getCommit","/** * @return Commit object that has this method */ Commit getCommit();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"600","getCommit","/** * @return Commit object that has this method */ Commit getCommit();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"600","getCommit","/** * @return Commit object that has this method */ Commit getCommit();","10","Signature Change, Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"600","getCommit","/** * @return Commit object that has this method */ Commit getCommit();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"600","getCommit","/** * @return Commit object that has this method */ Commit getCommit();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"600","getCommit","/** * @return Commit object that has this method */ Commit getCommit();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"600","getCommit","/** * @return Commit object that has this method */ Commit getCommit();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"600","getCommit","/** * @return Commit object that has this method */ Commit getCommit();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"600","getCommit","/** * @return Commit object that has this method */ Commit getCommit();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"600","getCommit","/** * @return Commit object that has this method */ Commit getCommit();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"601","getId","/** * @return Unique identifier for the method within the file */ String getId();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"601","getId","/** * @return Unique identifier for the method within the file */ String getId();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"601","getId","/** * @return Unique identifier for the method within the file */ String getId();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"601","getId","/** * @return Unique identifier for the method within the file */ String getId();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"601","getId","/** * @return Unique identifier for the method within the file */ String getId();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"601","getId","/** * @return Unique identifier for the method within the file */ String getId();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"601","getId","/** * @return Unique identifier for the method within the file */ String getId();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"601","getId","/** * @return Unique identifier for the method within the file */ String getId();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"601","getId","/** * @return Unique identifier for the method within the file */ String getId();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"601","getId","/** * @return Unique identifier for the method within the file */ String getId();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"602","getFunctionPath","/** * Some AST parsers use paths for methods, especially for parent/child scope relationships. If the parser/language * doesn't support this, return null. * * @return Path to the method in the file */ String getFunctionPath();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"602","getFunctionPath","/** * Some AST parsers use paths for methods, especially for parent/child scope relationships. If the parser/language * doesn't support this, return null. * * @return Path to the method in the file */ String getFunctionPath();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"602","getFunctionPath","/** * Some AST parsers use paths for methods, especially for parent/child scope relationships. If the parser/language * doesn't support this, return null. * * @return Path to the method in the file */ String getFunctionPath();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"602","getFunctionPath","/** * Some AST parsers use paths for methods, especially for parent/child scope relationships. If the parser/language * doesn't support this, return null. * * @return Path to the method in the file */ String getFunctionPath();","10","Signature Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"602","getFunctionPath","/** * Some AST parsers use paths for methods, especially for parent/child scope relationships. If the parser/language * doesn't support this, return null. * * @return Path to the method in the file */ String getFunctionPath();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"602","getFunctionPath","/** * Some AST parsers use paths for methods, especially for parent/child scope relationships. If the parser/language * doesn't support this, return null. * * @return Path to the method in the file */ String getFunctionPath();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"602","getFunctionPath","/** * Some AST parsers use paths for methods, especially for parent/child scope relationships. If the parser/language * doesn't support this, return null. * * @return Path to the method in the file */ String getFunctionPath();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"602","getFunctionPath","/** * Some AST parsers use paths for methods, especially for parent/child scope relationships. If the parser/language * doesn't support this, return null. * * @return Path to the method in the file */ String getFunctionPath();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"602","getFunctionPath","/** * Some AST parsers use paths for methods, especially for parent/child scope relationships. If the parser/language * doesn't support this, return null. * * @return Path to the method in the file */ String getFunctionPath();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"602","getFunctionPath","/** * Some AST parsers use paths for methods, especially for parent/child scope relationships. If the parser/language * doesn't support this, return null. * * @return Path to the method in the file */ String getFunctionPath();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"603","getSourceFileContent","/** * @return Content of the source file as string where this method is in */ String getSourceFileContent();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"603","getSourceFileContent","/** * @return Content of the source file as string where this method is in */ String getSourceFileContent();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"603","getSourceFileContent","/** * @return Content of the source file as string where this method is in */ String getSourceFileContent();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"603","getSourceFileContent","/** * @return Content of the source file as string where this method is in */ String getSourceFileContent();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"603","getSourceFileContent","/** * @return Content of the source file as string where this method is in */ String getSourceFileContent();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"603","getSourceFileContent","/** * @return Content of the source file as string where this method is in */ String getSourceFileContent();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"603","getSourceFileContent","/** * @return Content of the source file as string where this method is in */ String getSourceFileContent();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"603","getSourceFileContent","/** * @return Content of the source file as string where this method is in */ String getSourceFileContent();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"603","getSourceFileContent","/** * @return Content of the source file as string where this method is in */ String getSourceFileContent();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"603","getSourceFileContent","/** * @return Content of the source file as string where this method is in */ String getSourceFileContent();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"604","getSourceFilePath","/** * @return File path to the source file relative to the repository root directory */ String getSourceFilePath();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"604","getSourceFilePath","/** * @return File path to the source file relative to the repository root directory */ String getSourceFilePath();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"604","getSourceFilePath","/** * @return File path to the source file relative to the repository root directory */ String getSourceFilePath();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"604","getSourceFilePath","/** * @return File path to the source file relative to the repository root directory */ String getSourceFilePath();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"604","getSourceFilePath","/** * @return File path to the source file relative to the repository root directory */ String getSourceFilePath();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"604","getSourceFilePath","/** * @return File path to the source file relative to the repository root directory */ String getSourceFilePath();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"604","getSourceFilePath","/** * @return File path to the source file relative to the repository root directory */ String getSourceFilePath();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"604","getSourceFilePath","/** * @return File path to the source file relative to the repository root directory */ String getSourceFilePath();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"604","getSourceFilePath","/** * @return File path to the source file relative to the repository root directory */ String getSourceFilePath();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"604","getSourceFilePath","/** * @return File path to the source file relative to the repository root directory */ String getSourceFilePath();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"605","getSourceFragment","/** * @return The source code fragment for this method as string */ String getSourceFragment();","10","Signature Change","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"605","getSourceFragment","/** * @return The source code fragment for this method as string */ String getSourceFragment();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"605","getSourceFragment","/** * @return The source code fragment for this method as string */ String getSourceFragment();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"605","getSourceFragment","/** * @return The source code fragment for this method as string */ String getSourceFragment();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"605","getSourceFragment","/** * @return The source code fragment for this method as string */ String getSourceFragment();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"605","getSourceFragment","/** * @return The source code fragment for this method as string */ String getSourceFragment();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"605","getSourceFragment","/** * @return The source code fragment for this method as string */ String getSourceFragment();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"605","getSourceFragment","/** * @return The source code fragment for this method as string */ String getSourceFragment();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"605","getSourceFragment","/** * @return The source code fragment for this method as string */ String getSourceFragment();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"605","getSourceFragment","/** * @return The source code fragment for this method as string */ String getSourceFragment();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"606","getParentName","/** * @return If this method has some kind of parent (e.g. class, module), return its name. Otherwise return null. */ String getParentName();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"606","getParentName","/** * @return If this method has some kind of parent (e.g. class, module), return its name. Otherwise return null. */ String getParentName();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"606","getParentName","/** * @return If this method has some kind of parent (e.g. class, module), return its name. Otherwise return null. */ String getParentName();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"606","getParentName","/** * @return If this method has some kind of parent (e.g. class, module), return its name. Otherwise return null. */ String getParentName();","10","Signature Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"606","getParentName","/** * @return If this method has some kind of parent (e.g. class, module), return its name. Otherwise return null. */ String getParentName();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"606","getParentName","/** * @return If this method has some kind of parent (e.g. class, module), return its name. Otherwise return null. */ String getParentName();","10","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"606","getParentName","/** * @return If this method has some kind of parent (e.g. class, module), return its name. Otherwise return null. */ String getParentName();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"606","getParentName","/** * @return If this method has some kind of parent (e.g. class, module), return its name. Otherwise return null. */ String getParentName();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"606","getParentName","/** * @return If this method has some kind of parent (e.g. class, module), return its name. Otherwise return null. */ String getParentName();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"606","getParentName","/** * @return If this method has some kind of parent (e.g. class, module), return its name. Otherwise return null. */ String getParentName();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"607","getAnnotation","/** * @return If this method has some kind of annotation (e.g. @Test, @Override), return it. Otherwise return null */ String getAnnotation();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"607","getAnnotation","/** * @return If this method has some kind of annotation (e.g. @Test, @Override), return it. Otherwise return null */ String getAnnotation();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"607","getAnnotation","/** * @return If this method has some kind of annotation (e.g. @Test, @Override), return it. Otherwise return null */ String getAnnotation();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"607","getAnnotation","/** * @return If this method has some kind of annotation (e.g. @Test, @Override), return it. Otherwise return null */ String getAnnotation();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"607","getAnnotation","/** * @return If this method has some kind of annotation (e.g. @Test, @Override), return it. Otherwise return null */ String getAnnotation();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"607","getAnnotation","/** * @return If this method has some kind of annotation (e.g. @Test, @Override), return it. Otherwise return null */ String getAnnotation();","10","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"607","getAnnotation","/** * @return If this method has some kind of annotation (e.g. @Test, @Override), return it. Otherwise return null */ String getAnnotation();","10","Signature Change","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"607","getAnnotation","/** * @return If this method has some kind of annotation (e.g. @Test, @Override), return it. Otherwise return null */ String getAnnotation();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"607","getAnnotation","/** * @return If this method has some kind of annotation (e.g. @Test, @Override), return it. Otherwise return null */ String getAnnotation();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"607","getAnnotation","/** * @return If this method has some kind of annotation (e.g. @Test, @Override), return it. Otherwise return null */ String getAnnotation();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"608","getFunctionDoc","/** * @return java documentation of a method if present * */ String getFunctionDoc();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"608","getFunctionDoc","/** * @return java documentation of a method if present * */ String getFunctionDoc();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"608","getFunctionDoc","/** * @return java documentation of a method if present * */ String getFunctionDoc();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"608","getFunctionDoc","/** * @return java documentation of a method if present * */ String getFunctionDoc();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"608","getFunctionDoc","/** * @return java documentation of a method if present * */ String getFunctionDoc();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"608","getFunctionDoc","/** * @return java documentation of a method if present * */ String getFunctionDoc();","10","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"608","getFunctionDoc","/** * @return java documentation of a method if present * */ String getFunctionDoc();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"608","getFunctionDoc","/** * @return java documentation of a method if present * */ String getFunctionDoc();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"608","getFunctionDoc","/** * @return java documentation of a method if present * */ String getFunctionDoc();","10","Signature Change","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"608","getFunctionDoc","/** * @return java documentation of a method if present * */ String getFunctionDoc();","10","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"609","getUnformattedBody","/*** * @return the unformatted method's body preserving whitespace, indentation and other formatting */ String getUnformattedBody();","10","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"609","getUnformattedBody","/*** * @return the unformatted method's body preserving whitespace, indentation and other formatting */ String getUnformattedBody();","10","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"609","getUnformattedBody","/*** * @return the unformatted method's body preserving whitespace, indentation and other formatting */ String getUnformattedBody();","10","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"609","getUnformattedBody","/*** * @return the unformatted method's body preserving whitespace, indentation and other formatting */ String getUnformattedBody();","10","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"609","getUnformattedBody","/*** * @return the unformatted method's body preserving whitespace, indentation and other formatting */ String getUnformattedBody();","10","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"609","getUnformattedBody","/*** * @return the unformatted method's body preserving whitespace, indentation and other formatting */ String getUnformattedBody();","10","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"609","getUnformattedBody","/*** * @return the unformatted method's body preserving whitespace, indentation and other formatting */ String getUnformattedBody();","10","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"609","getUnformattedBody","/*** * @return the unformatted method's body preserving whitespace, indentation and other formatting */ String getUnformattedBody();","10","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"609","getUnformattedBody","/*** * @return the unformatted method's body preserving whitespace, indentation and other formatting */ String getUnformattedBody();","10","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"609","getUnformattedBody","/*** * @return the unformatted method's body preserving whitespace, indentation and other formatting */ String getUnformattedBody();","10","Signature Change","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"610","TypeScriptFunction","TypeScriptFunction(V8Object function, Commit commit, String sourceFilePath, String sourceFileContent)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"610","TypeScriptFunction","TypeScriptFunction(V8Object function, Commit commit, String sourceFilePath, String sourceFileContent)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"610","TypeScriptFunction","TypeScriptFunction(V8Object function, Commit commit, String sourceFilePath, String sourceFileContent)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"610","TypeScriptFunction","TypeScriptFunction(V8Object function, Commit commit, String sourceFilePath, String sourceFileContent)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"611","getParameter","private Yparameter getParameter(V8Object param)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"611","getParameter","private Yparameter getParameter(V8Object param)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"611","getParameter","private Yparameter getParameter(V8Object param)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"611","getParameter","private Yparameter getParameter(V8Object param)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"612","getModifier","private String getModifier(V8Object modifier)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"612","getModifier","private String getModifier(V8Object modifier)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"612","getModifier","private String getModifier(V8Object modifier)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"612","getModifier","private String getModifier(V8Object modifier)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"613","getInitialName","@Override protected String getInitialName(V8Object function)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"613","getInitialName","@Override protected String getInitialName(V8Object function)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"613","getInitialName","@Override protected String getInitialName(V8Object function)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"613","getInitialName","@Override protected String getInitialName(V8Object function)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"614","getInitialType","@Override protected String getInitialType(V8Object function)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"614","getInitialType","@Override protected String getInitialType(V8Object function)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"614","getInitialType","@Override protected String getInitialType(V8Object function)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"614","getInitialType","@Override protected String getInitialType(V8Object function)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"615","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(V8Object function)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"615","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(V8Object function)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"615","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(V8Object function)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"615","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(V8Object function)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"616","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(V8Object function)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"616","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(V8Object function)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"616","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(V8Object function)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"616","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(V8Object function)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"617","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(V8Object function)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"617","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(V8Object function)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"617","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(V8Object function)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"617","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(V8Object function)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"618","getInitialBody","@Override protected String getInitialBody(V8Object function)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"618","getInitialBody","@Override protected String getInitialBody(V8Object function)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"618","getInitialBody","@Override protected String getInitialBody(V8Object function)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"618","getInitialBody","@Override protected String getInitialBody(V8Object function)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"619","getInitialBeginLine","@Override protected int getInitialBeginLine(V8Object function)","4","Minor Modification","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"619","getInitialBeginLine","@Override protected int getInitialBeginLine(V8Object function)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"619","getInitialBeginLine","@Override protected int getInitialBeginLine(V8Object function)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"619","getInitialBeginLine","@Override protected int getInitialBeginLine(V8Object function)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"620","getInitialEndLine","@Override protected int getInitialEndLine(V8Object function)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"620","getInitialEndLine","@Override protected int getInitialEndLine(V8Object function)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"620","getInitialEndLine","@Override protected int getInitialEndLine(V8Object function)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"620","getInitialEndLine","@Override protected int getInitialEndLine(V8Object function)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"621","getInitialParentName","@Override protected String getInitialParentName(V8Object function)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"621","getInitialParentName","@Override protected String getInitialParentName(V8Object function)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"621","getInitialParentName","@Override protected String getInitialParentName(V8Object function)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"621","getInitialParentName","@Override protected String getInitialParentName(V8Object function)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"622","getInitialFunctionPath","@Override protected String getInitialFunctionPath(V8Object function)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"622","getInitialFunctionPath","@Override protected String getInitialFunctionPath(V8Object function)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"622","getInitialFunctionPath","@Override protected String getInitialFunctionPath(V8Object function)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"622","getInitialFunctionPath","@Override protected String getInitialFunctionPath(V8Object function)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"623","getInitialAnnotation","@Override protected String getInitialAnnotation(V8Object rawMethod)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"623","getInitialAnnotation","@Override protected String getInitialAnnotation(V8Object rawMethod)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"623","getInitialAnnotation","@Override protected String getInitialAnnotation(V8Object rawMethod)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"623","getInitialAnnotation","@Override protected String getInitialAnnotation(V8Object rawMethod)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"624","getInitialDoc","@Override protected String getInitialDoc(V8Object rawMethod)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"624","getInitialDoc","@Override protected String getInitialDoc(V8Object rawMethod)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"624","getInitialDoc","@Override protected String getInitialDoc(V8Object rawMethod)","4","Annotation Change, Signature Change, Body Change","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"624","getInitialDoc","@Override protected String getInitialDoc(V8Object rawMethod)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"625","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(V8Object rawMethod)","4","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"625","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(V8Object rawMethod)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"625","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(V8Object rawMethod)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"625","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(V8Object rawMethod)","4","Annotation Change, Signature Change, Body Change","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"626","getInitialSourceFragment","@Override protected String getInitialSourceFragment(V8Object rawMethod)","4","Annotation Change, Signature Change, Body Change","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"626","getInitialSourceFragment","@Override protected String getInitialSourceFragment(V8Object rawMethod)","4","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"626","getInitialSourceFragment","@Override protected String getInitialSourceFragment(V8Object rawMethod)","4","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"626","getInitialSourceFragment","@Override protected String getInitialSourceFragment(V8Object rawMethod)","4","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"627","TypeScriptParser","public TypeScriptParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"627","TypeScriptParser","public TypeScriptParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"627","TypeScriptParser","public TypeScriptParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"628","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"628","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"628","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"629","methodMatches","@Override public boolean methodMatches(Yfunction method)","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"629","methodMatches","@Override public boolean methodMatches(Yfunction method)","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"629","methodMatches","@Override public boolean methodMatches(Yfunction method)","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"630","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"630","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"630","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"631","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"631","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"631","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"632","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","3","Body Change","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"632","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"632","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","3","Body Change","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"633","transformMethod","private Yfunction transformMethod(V8Object function)","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"633","transformMethod","private Yfunction transformMethod(V8Object function)","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"633","transformMethod","private Yfunction transformMethod(V8Object function)","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"634","methodMatches","public abstract boolean methodMatches(Yfunction method);","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"634","methodMatches","public abstract boolean methodMatches(Yfunction method);","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"634","methodMatches","public abstract boolean methodMatches(Yfunction method);","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"635","visit","@Override public void visit(String source)","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"635","visit","@Override public void visit(String source)","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"635","visit","@Override public void visit(String source)","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"636","visitArrowFunction","@Override public void visitArrowFunction(V8Object arrowFunction)","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"636","visitArrowFunction","@Override public void visitArrowFunction(V8Object arrowFunction)","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"636","visitArrowFunction","@Override public void visitArrowFunction(V8Object arrowFunction)","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"637","visitConstructor","@Override public void visitConstructor(V8Object constructor)","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"637","visitConstructor","@Override public void visitConstructor(V8Object constructor)","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"637","visitConstructor","@Override public void visitConstructor(V8Object constructor)","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"638","visitFunctionDeclaration","@Override public void visitFunctionDeclaration(V8Object function)","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"638","visitFunctionDeclaration","@Override public void visitFunctionDeclaration(V8Object function)","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"638","visitFunctionDeclaration","@Override public void visitFunctionDeclaration(V8Object function)","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"639","visitFunctionExpression","@Override public void visitFunctionExpression(V8Object functionExpression)","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"639","visitFunctionExpression","@Override public void visitFunctionExpression(V8Object functionExpression)","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"639","visitFunctionExpression","@Override public void visitFunctionExpression(V8Object functionExpression)","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"640","visitMethodDeclaration","@Override public void visitMethodDeclaration(V8Object methodDeclaration)","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"640","visitMethodDeclaration","@Override public void visitMethodDeclaration(V8Object methodDeclaration)","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"640","visitMethodDeclaration","@Override public void visitMethodDeclaration(V8Object methodDeclaration)","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"641","getMatchedNodes","List<Yfunction> getMatchedNodes()","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"641","getMatchedNodes","List<Yfunction> getMatchedNodes()","3","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"641","getMatchedNodes","List<Yfunction> getMatchedNodes()","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"642","getLineFrom","private int getLineFrom(V8 runtime, V8Object node, String function)","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"642","getLineFrom","private int getLineFrom(V8 runtime, V8Object node, String function)","3","Signature Change, Body Change","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"642","getLineFrom","private int getLineFrom(V8 runtime, V8Object node, String function)","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"643","addStartAndEndLines","private void addStartAndEndLines(V8Object node)","3","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"643","addStartAndEndLines","private void addStartAndEndLines(V8Object node)","3","Body Change","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"643","addStartAndEndLines","private void addStartAndEndLines(V8Object node)","3","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","Parameter Change, Signature Change, Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","Parameter Change, Body Change","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"644","JavaFunction","public JavaFunction(MethodDeclaration method, Commit commit, String sourceFilePath, String sourceFileContent)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","Signature Change, Body Change","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"645","createParameterMetadataMap","private Map<String,String> createParameterMetadataMap(Parameter parameterElement)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","Signature Change, Body Change","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"646","createParameterModifiersString","private String createParameterModifiersString(Parameter parameterElement)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","Signature Change, Body Change","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"647","createParameterAnnotationsString","private String createParameterAnnotationsString(Parameter parameterElement)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"648","getInitialName","@Override protected String getInitialName(MethodDeclaration method)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"649","getInitialType","@Override protected String getInitialType(MethodDeclaration method)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"650","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(MethodDeclaration method)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"651","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(MethodDeclaration method)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"652","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(MethodDeclaration method)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"653","getInitialBody","@Override protected String getInitialBody(MethodDeclaration method)","17","Body Change","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"654","getInitialBeginLine","@Override protected int getInitialBeginLine(MethodDeclaration method)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"655","getInitialEndLine","@Override protected int getInitialEndLine(MethodDeclaration method)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"656","getInitialParentName","@Override protected String getInitialParentName(MethodDeclaration method)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"657","getInitialFunctionPath","@Override protected String getInitialFunctionPath(MethodDeclaration method)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"658","getInitialId","@Override protected String getInitialId(MethodDeclaration method)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"659","getInitialSourceFragment","@Override protected String getInitialSourceFragment(MethodDeclaration method)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","Annotation Change, Signature Change, Body Change","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","Minor Modification","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"660","getInitialAnnotation","/** * @return all the annotation of a method * Source Code Example: * @Override * @Test * public void foo()","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","Signature Change, Body Change","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","Signature Change, Body Change","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","Signature Change, Body Change","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"661","isNestedMethod","private boolean isNestedMethod(MethodDeclaration method)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"662","getInitialDoc","@Override protected String getInitialDoc(MethodDeclaration method)","17","-","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","Fix test setup such that environment flags work properly again
","23b951ff27902c94861f0aa466bbf66508d39b05","fgrund"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","Merge branch 'integrate-shaifuls-fork' into develop

# Conflicts:
#	src/main/java/com/felixgrund/codeshovel/parser/impl/JavaFunction.java
","00c7764edaa819f7b836cc4dfbbddc5b91d58c8b","fgrund"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","Annotation Change, Signature Change, Body Change","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"663","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(MethodDeclaration method)","17","Body Change","Feature #76 Fix test failures for Yformatchange
- Check if method body is present before getting unformatted body
- Fix all java test failures related to Yformatchange
","272b37ac9cdf0d055d63dc1587fff23c4c23d53a","Syed Ishtiaque Ahmad"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","Fixed parentNameEquals bug
","217fb8daf87b06ba3cdd1395ba2a908fd6ce6e2d","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","Added simple null check
","b40a6bb5358d8a5cdbe2cfcbbf3bbabfddde651a","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","Minor Modification","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","Remove incomplete/obsolete JavaScript implementation
","7bcc29a9796c0e9dbf5caabfcdcaddc9c8f3416f","fgrund"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","Minor Modification","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","Minor Modification","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","Minor Modification","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"664","JavaParser","public JavaParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","26","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","Fixed parentNameEquals bug
","217fb8daf87b06ba3cdd1395ba2a908fd6ce6e2d","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","Added simple null check
","b40a6bb5358d8a5cdbe2cfcbbf3bbabfddde651a","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","Annotation Change, Signature Change, Body Change","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","Body Change","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","Body Change","Remove incomplete/obsolete JavaScript implementation
","7bcc29a9796c0e9dbf5caabfcdcaddc9c8f3416f","fgrund"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","Minor Modification","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","Signature Change, Body Change","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","Signature Change, Body Change","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","Signature Change, Body Change","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"665","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","26","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","Fixed parentNameEquals bug
","217fb8daf87b06ba3cdd1395ba2a908fd6ce6e2d","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","Parameter Change, Signature Change, Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","Added simple null check
","b40a6bb5358d8a5cdbe2cfcbbf3bbabfddde651a","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","Body Change","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","Minor Modification","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","Minor Modification","Remove incomplete/obsolete JavaScript implementation
","7bcc29a9796c0e9dbf5caabfcdcaddc9c8f3416f","fgrund"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","Signature Change","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","Signature Change","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","Signature Change","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"666","methodMatches","@Override public boolean methodMatches(Yfunction method)","26","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","Fixed parentNameEquals bug
","217fb8daf87b06ba3cdd1395ba2a908fd6ce6e2d","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","Body Change","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","Added simple null check
","b40a6bb5358d8a5cdbe2cfcbbf3bbabfddde651a","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","Body Change","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","Minor Modification","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","Remove incomplete/obsolete JavaScript implementation
","7bcc29a9796c0e9dbf5caabfcdcaddc9c8f3416f","fgrund"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","Signature Change","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","Signature Change","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","Signature Change","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"667","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","26","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","Fixed parentNameEquals bug
","217fb8daf87b06ba3cdd1395ba2a908fd6ce6e2d","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","Added simple null check
","b40a6bb5358d8a5cdbe2cfcbbf3bbabfddde651a","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","Minor Modification","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","Remove incomplete/obsolete JavaScript implementation
","7bcc29a9796c0e9dbf5caabfcdcaddc9c8f3416f","fgrund"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","Minor Modification","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","Minor Modification","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","Minor Modification","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"668","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","26","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","Fixed parentNameEquals bug
","217fb8daf87b06ba3cdd1395ba2a908fd6ce6e2d","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","Body Change","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","Added simple null check
","b40a6bb5358d8a5cdbe2cfcbbf3bbabfddde651a","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","Minor Modification","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","Remove incomplete/obsolete JavaScript implementation
","7bcc29a9796c0e9dbf5caabfcdcaddc9c8f3416f","fgrund"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","Signature Change, Body Change","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","Signature Change, Body Change","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","Signature Change, Body Change","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","Body Change","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","Body Change","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"669","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","26","Body Change","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","Fixed parentNameEquals bug
","217fb8daf87b06ba3cdd1395ba2a908fd6ce6e2d","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","Signature Change, Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","Added simple null check
","b40a6bb5358d8a5cdbe2cfcbbf3bbabfddde651a","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","Minor Modification","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","Remove incomplete/obsolete JavaScript implementation
","7bcc29a9796c0e9dbf5caabfcdcaddc9c8f3416f","fgrund"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","Minor Modification","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","Minor Modification","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","Minor Modification","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"670","transformMethod","private Yfunction transformMethod(MethodDeclaration method)","26","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","Fixed parentNameEquals bug
","217fb8daf87b06ba3cdd1395ba2a908fd6ce6e2d","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","Parameter Change, Signature Change, Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","Added simple null check
","b40a6bb5358d8a5cdbe2cfcbbf3bbabfddde651a","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","Body Change","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","Minor Modification","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","Minor Modification","Remove incomplete/obsolete JavaScript implementation
","7bcc29a9796c0e9dbf5caabfcdcaddc9c8f3416f","fgrund"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","Signature Change","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","Signature Change","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","Signature Change","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"671","methodMatches","public abstract boolean methodMatches(Yfunction method);","26","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","Fixed parentNameEquals bug
","217fb8daf87b06ba3cdd1395ba2a908fd6ce6e2d","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","Added simple null check
","b40a6bb5358d8a5cdbe2cfcbbf3bbabfddde651a","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","Minor Modification","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","Remove incomplete/obsolete JavaScript implementation
","7bcc29a9796c0e9dbf5caabfcdcaddc9c8f3416f","fgrund"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","Signature Change, Body Change","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","Signature Change, Body Change","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","Signature Change, Body Change","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"672","visit","@Override public void visit(MethodDeclaration method, Void arg)","26","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","Fixed parentNameEquals bug
","217fb8daf87b06ba3cdd1395ba2a908fd6ce6e2d","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","fix javaparser 0 changes issue
","0e317de0b95568921649c9fc0a2a3d8dd49b6592","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","reverted fix 0 changes issue
","9bb5d705447141be0d990e3473a8145951118a2d","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","Signature Change, Return Type Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","Added simple null check
","b40a6bb5358d8a5cdbe2cfcbbf3bbabfddde651a","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","Minor Modification","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","Remove incomplete/obsolete JavaScript implementation
","7bcc29a9796c0e9dbf5caabfcdcaddc9c8f3416f","fgrund"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","see #47 improve the reporting at a couple of common error messages. update the tests to sort in alph order instead of lex order so the test set runs before the validation set.
","887417f97c67a15eacdb79f4b36585965c0f278e","Reid Holmes"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","Minor Modification","see #47 Intermediate changes while simplifying the algorithim. (This will be a messy commit because a lot of in-progress work was rolled back). 189/200
","934f4e5da70c622d6be56ce309c87853fda3c003","Reid Holmes"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","Minor Modification","Python Support (#49)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Add modifier change to python

* Remove C frontend

* Consistently use regex in ParserFactory

* Resolve conflict in ParserFactory

* Add import statement to ParserFactory

* Add Python repos to clone script","231baf5b72eec6254ba59d9735077a761100d632","Braxton Hall"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","Minor Modification","resolve conflicts bringing develop up-to-date with master

Merge remote-tracking branch 'origin/icse2021' into develop
","e655d3d3d02e9166b50d7da1d83b841b7e3bb141","reid holmes"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"673","getMatchedNodes","public List<Yfunction> getMatchedNodes()","26","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"674","PythonParser","public PythonParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","2","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"674","PythonParser","public PythonParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","2","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"675","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","2","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"675","parseMethods","@Override protected List<Yfunction> parseMethods() throws ParseException","2","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"676","methodMatches","@Override public boolean methodMatches(Yfunction method)","2","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"676","methodMatches","@Override public boolean methodMatches(Yfunction method)","2","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"677","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","2","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"677","getScopeSimilarity","@Override public double getScopeSimilarity(Yfunction function, Yfunction compareFunction)","2","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"678","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","2","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"678","getAcceptedFileExtension","@Override public String getAcceptedFileExtension()","2","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"679","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","2","Body Change","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"679","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","2","Body Change","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"680","transformMethod","private Yfunction transformMethod(PythonParseTree.PythonParser.FuncdefContext function)","2","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"680","transformMethod","private Yfunction transformMethod(PythonParseTree.PythonParser.FuncdefContext function)","2","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"681","methodMatches","public abstract boolean methodMatches(Yfunction method);","2","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"681","methodMatches","public abstract boolean methodMatches(Yfunction method);","2","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"682","visitFuncdef","@Override public Void visitFuncdef(PythonParseTree.PythonParser.FuncdefContext function)","2","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"682","visitFuncdef","@Override public Void visitFuncdef(PythonParseTree.PythonParser.FuncdefContext function)","2","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"683","getMatchedNodes","List<Yfunction> getMatchedNodes()","2","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"683","getMatchedNodes","List<Yfunction> getMatchedNodes()","2","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"684","PythonFunction","PythonFunction(PythonParseTree.PythonParser.FuncdefContext function, Commit commit, String sourceFilePath, String sourceFileContent)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"684","PythonFunction","PythonFunction(PythonParseTree.PythonParser.FuncdefContext function, Commit commit, String sourceFilePath, String sourceFileContent)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"684","PythonFunction","PythonFunction(PythonParseTree.PythonParser.FuncdefContext function, Commit commit, String sourceFilePath, String sourceFileContent)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"684","PythonFunction","PythonFunction(PythonParseTree.PythonParser.FuncdefContext function, Commit commit, String sourceFilePath, String sourceFileContent)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"684","PythonFunction","PythonFunction(PythonParseTree.PythonParser.FuncdefContext function, Commit commit, String sourceFilePath, String sourceFileContent)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"684","PythonFunction","PythonFunction(PythonParseTree.PythonParser.FuncdefContext function, Commit commit, String sourceFilePath, String sourceFileContent)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"684","PythonFunction","PythonFunction(PythonParseTree.PythonParser.FuncdefContext function, Commit commit, String sourceFilePath, String sourceFileContent)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"684","PythonFunction","PythonFunction(PythonParseTree.PythonParser.FuncdefContext function, Commit commit, String sourceFilePath, String sourceFileContent)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"685","getParameter","private Yparameter getParameter(PythonParser.Def_parameterContext param)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"685","getParameter","private Yparameter getParameter(PythonParser.Def_parameterContext param)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"685","getParameter","private Yparameter getParameter(PythonParser.Def_parameterContext param)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"685","getParameter","private Yparameter getParameter(PythonParser.Def_parameterContext param)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"685","getParameter","private Yparameter getParameter(PythonParser.Def_parameterContext param)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"685","getParameter","private Yparameter getParameter(PythonParser.Def_parameterContext param)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"685","getParameter","private Yparameter getParameter(PythonParser.Def_parameterContext param)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"685","getParameter","private Yparameter getParameter(PythonParser.Def_parameterContext param)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"686","getParameter","private Yparameter getParameter(PythonParser.Named_parameterContext param)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"686","getParameter","private Yparameter getParameter(PythonParser.Named_parameterContext param)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"686","getParameter","private Yparameter getParameter(PythonParser.Named_parameterContext param)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"686","getParameter","private Yparameter getParameter(PythonParser.Named_parameterContext param)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"686","getParameter","private Yparameter getParameter(PythonParser.Named_parameterContext param)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"686","getParameter","private Yparameter getParameter(PythonParser.Named_parameterContext param)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"686","getParameter","private Yparameter getParameter(PythonParser.Named_parameterContext param)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"686","getParameter","private Yparameter getParameter(PythonParser.Named_parameterContext param)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"687","getDefaultArguments","private Map<String, String> getDefaultArguments(PythonParser.Def_parameterContext param)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"687","getDefaultArguments","private Map<String, String> getDefaultArguments(PythonParser.Def_parameterContext param)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"687","getDefaultArguments","private Map<String, String> getDefaultArguments(PythonParser.Def_parameterContext param)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"687","getDefaultArguments","private Map<String, String> getDefaultArguments(PythonParser.Def_parameterContext param)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"687","getDefaultArguments","private Map<String, String> getDefaultArguments(PythonParser.Def_parameterContext param)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"687","getDefaultArguments","private Map<String, String> getDefaultArguments(PythonParser.Def_parameterContext param)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"687","getDefaultArguments","private Map<String, String> getDefaultArguments(PythonParser.Def_parameterContext param)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"687","getDefaultArguments","private Map<String, String> getDefaultArguments(PythonParser.Def_parameterContext param)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"688","getDefaultArguments","private Map<String, String> getDefaultArguments(String defaultArgument)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"688","getDefaultArguments","private Map<String, String> getDefaultArguments(String defaultArgument)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"688","getDefaultArguments","private Map<String, String> getDefaultArguments(String defaultArgument)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"688","getDefaultArguments","private Map<String, String> getDefaultArguments(String defaultArgument)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"688","getDefaultArguments","private Map<String, String> getDefaultArguments(String defaultArgument)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"688","getDefaultArguments","private Map<String, String> getDefaultArguments(String defaultArgument)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"688","getDefaultArguments","private Map<String, String> getDefaultArguments(String defaultArgument)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"688","getDefaultArguments","private Map<String, String> getDefaultArguments(String defaultArgument)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"689","getInitialName","@Override protected String getInitialName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"689","getInitialName","@Override protected String getInitialName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"689","getInitialName","@Override protected String getInitialName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"689","getInitialName","@Override protected String getInitialName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"689","getInitialName","@Override protected String getInitialName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"689","getInitialName","@Override protected String getInitialName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"689","getInitialName","@Override protected String getInitialName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"689","getInitialName","@Override protected String getInitialName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"690","getInitialType","@Override protected String getInitialType(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"690","getInitialType","@Override protected String getInitialType(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"690","getInitialType","@Override protected String getInitialType(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"690","getInitialType","@Override protected String getInitialType(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"690","getInitialType","@Override protected String getInitialType(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"690","getInitialType","@Override protected String getInitialType(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"690","getInitialType","@Override protected String getInitialType(PythonParseTree.PythonParser.FuncdefContext function)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"690","getInitialType","@Override protected String getInitialType(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"691","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"691","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"691","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"691","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"691","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"691","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"691","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(PythonParseTree.PythonParser.FuncdefContext function)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"691","getInitialModifiers","@Override protected Ymodifiers getInitialModifiers(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"692","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"692","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"692","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"692","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"692","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"692","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"692","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(PythonParseTree.PythonParser.FuncdefContext function)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"692","getInitialExceptions","@Override protected Yexceptions getInitialExceptions(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"693","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"693","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"693","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"693","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(PythonParseTree.PythonParser.FuncdefContext function)","8","Body Change","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"693","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"693","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"693","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(PythonParseTree.PythonParser.FuncdefContext function)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"693","getInitialParameters","@Override protected List<Yparameter> getInitialParameters(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"694","visitDef_parameter","@Override public Void visitDef_parameter(PythonParser.Def_parameterContext ctx)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"694","visitDef_parameter","@Override public Void visitDef_parameter(PythonParser.Def_parameterContext ctx)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"694","visitDef_parameter","@Override public Void visitDef_parameter(PythonParser.Def_parameterContext ctx)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"694","visitDef_parameter","@Override public Void visitDef_parameter(PythonParser.Def_parameterContext ctx)","8","Body Change","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"694","visitDef_parameter","@Override public Void visitDef_parameter(PythonParser.Def_parameterContext ctx)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"694","visitDef_parameter","@Override public Void visitDef_parameter(PythonParser.Def_parameterContext ctx)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"694","visitDef_parameter","@Override public Void visitDef_parameter(PythonParser.Def_parameterContext ctx)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"694","visitDef_parameter","@Override public Void visitDef_parameter(PythonParser.Def_parameterContext ctx)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"695","visitNamed_parameter","@Override public Void visitNamed_parameter(PythonParser.Named_parameterContext ctx)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"695","visitNamed_parameter","@Override public Void visitNamed_parameter(PythonParser.Named_parameterContext ctx)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"695","visitNamed_parameter","@Override public Void visitNamed_parameter(PythonParser.Named_parameterContext ctx)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"695","visitNamed_parameter","@Override public Void visitNamed_parameter(PythonParser.Named_parameterContext ctx)","8","Body Change","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"695","visitNamed_parameter","@Override public Void visitNamed_parameter(PythonParser.Named_parameterContext ctx)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"695","visitNamed_parameter","@Override public Void visitNamed_parameter(PythonParser.Named_parameterContext ctx)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"695","visitNamed_parameter","@Override public Void visitNamed_parameter(PythonParser.Named_parameterContext ctx)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"695","visitNamed_parameter","@Override public Void visitNamed_parameter(PythonParser.Named_parameterContext ctx)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"696","visitParameterImpl","private Void visitParameterImpl(Yparameter parameter, Map<String, String> metadata)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"696","visitParameterImpl","private Void visitParameterImpl(Yparameter parameter, Map<String, String> metadata)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"696","visitParameterImpl","private Void visitParameterImpl(Yparameter parameter, Map<String, String> metadata)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"696","visitParameterImpl","private Void visitParameterImpl(Yparameter parameter, Map<String, String> metadata)","8","Signature Change, Body Change","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"696","visitParameterImpl","private Void visitParameterImpl(Yparameter parameter, Map<String, String> metadata)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"696","visitParameterImpl","private Void visitParameterImpl(Yparameter parameter, Map<String, String> metadata)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"696","visitParameterImpl","private Void visitParameterImpl(Yparameter parameter, Map<String, String> metadata)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"696","visitParameterImpl","private Void visitParameterImpl(Yparameter parameter, Map<String, String> metadata)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"697","getInitialBody","@Override protected String getInitialBody(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"697","getInitialBody","@Override protected String getInitialBody(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"697","getInitialBody","@Override protected String getInitialBody(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"697","getInitialBody","@Override protected String getInitialBody(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"697","getInitialBody","@Override protected String getInitialBody(PythonParseTree.PythonParser.FuncdefContext function)","8","Body Change","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"697","getInitialBody","@Override protected String getInitialBody(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"697","getInitialBody","@Override protected String getInitialBody(PythonParseTree.PythonParser.FuncdefContext function)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"697","getInitialBody","@Override protected String getInitialBody(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"698","getInitialBeginLine","@Override protected int getInitialBeginLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"698","getInitialBeginLine","@Override protected int getInitialBeginLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"698","getInitialBeginLine","@Override protected int getInitialBeginLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"698","getInitialBeginLine","@Override protected int getInitialBeginLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"698","getInitialBeginLine","@Override protected int getInitialBeginLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"698","getInitialBeginLine","@Override protected int getInitialBeginLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"698","getInitialBeginLine","@Override protected int getInitialBeginLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"698","getInitialBeginLine","@Override protected int getInitialBeginLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"699","getInitialEndLine","@Override protected int getInitialEndLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"699","getInitialEndLine","@Override protected int getInitialEndLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"699","getInitialEndLine","@Override protected int getInitialEndLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"699","getInitialEndLine","@Override protected int getInitialEndLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"699","getInitialEndLine","@Override protected int getInitialEndLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"699","getInitialEndLine","@Override protected int getInitialEndLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"699","getInitialEndLine","@Override protected int getInitialEndLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"699","getInitialEndLine","@Override protected int getInitialEndLine(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"700","getInitialParentName","@Override protected String getInitialParentName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"700","getInitialParentName","@Override protected String getInitialParentName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"700","getInitialParentName","@Override protected String getInitialParentName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"700","getInitialParentName","@Override protected String getInitialParentName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"700","getInitialParentName","@Override protected String getInitialParentName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"700","getInitialParentName","@Override protected String getInitialParentName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"700","getInitialParentName","@Override protected String getInitialParentName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"700","getInitialParentName","@Override protected String getInitialParentName(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"701","getInitialFunctionPath","@Override protected String getInitialFunctionPath(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"701","getInitialFunctionPath","@Override protected String getInitialFunctionPath(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"701","getInitialFunctionPath","@Override protected String getInitialFunctionPath(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"701","getInitialFunctionPath","@Override protected String getInitialFunctionPath(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"701","getInitialFunctionPath","@Override protected String getInitialFunctionPath(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"701","getInitialFunctionPath","@Override protected String getInitialFunctionPath(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"701","getInitialFunctionPath","@Override protected String getInitialFunctionPath(PythonParseTree.PythonParser.FuncdefContext function)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"701","getInitialFunctionPath","@Override protected String getInitialFunctionPath(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"702","getInitialAnnotation","@Override protected String getInitialAnnotation(PythonParser.FuncdefContext rawMethod)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"702","getInitialAnnotation","@Override protected String getInitialAnnotation(PythonParser.FuncdefContext rawMethod)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"702","getInitialAnnotation","@Override protected String getInitialAnnotation(PythonParser.FuncdefContext rawMethod)","8","Annotation Change, Signature Change, Body Change","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"702","getInitialAnnotation","@Override protected String getInitialAnnotation(PythonParser.FuncdefContext rawMethod)","8","Minor Modification","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"702","getInitialAnnotation","@Override protected String getInitialAnnotation(PythonParser.FuncdefContext rawMethod)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"702","getInitialAnnotation","@Override protected String getInitialAnnotation(PythonParser.FuncdefContext rawMethod)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"702","getInitialAnnotation","@Override protected String getInitialAnnotation(PythonParser.FuncdefContext rawMethod)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"702","getInitialAnnotation","@Override protected String getInitialAnnotation(PythonParser.FuncdefContext rawMethod)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"703","getInitialDoc","@Override protected String getInitialDoc(PythonParser.FuncdefContext rawMethod)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"703","getInitialDoc","@Override protected String getInitialDoc(PythonParser.FuncdefContext rawMethod)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"703","getInitialDoc","@Override protected String getInitialDoc(PythonParser.FuncdefContext rawMethod)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"703","getInitialDoc","@Override protected String getInitialDoc(PythonParser.FuncdefContext rawMethod)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"703","getInitialDoc","@Override protected String getInitialDoc(PythonParser.FuncdefContext rawMethod)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"703","getInitialDoc","@Override protected String getInitialDoc(PythonParser.FuncdefContext rawMethod)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"703","getInitialDoc","@Override protected String getInitialDoc(PythonParser.FuncdefContext rawMethod)","8","Annotation Change, Signature Change, Body Change","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"703","getInitialDoc","@Override protected String getInitialDoc(PythonParser.FuncdefContext rawMethod)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"704","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(PythonParser.FuncdefContext rawMethod)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"704","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(PythonParser.FuncdefContext rawMethod)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"704","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(PythonParser.FuncdefContext rawMethod)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"704","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(PythonParser.FuncdefContext rawMethod)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"704","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(PythonParser.FuncdefContext rawMethod)","8","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"704","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(PythonParser.FuncdefContext rawMethod)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"704","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(PythonParser.FuncdefContext rawMethod)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"704","getInitialUnformattedBody","@Override protected String getInitialUnformattedBody(PythonParser.FuncdefContext rawMethod)","8","Annotation Change, Signature Change, Body Change","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"705","getInitialSourceFragment","@Override protected String getInitialSourceFragment(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add in missing PythonFunction method (#53)

","fa7e150110c4c2ef7d99e6697442c0a1542e6ec7","Braxton Hall"
"705","getInitialSourceFragment","@Override protected String getInitialSourceFragment(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"705","getInitialSourceFragment","@Override protected String getInitialSourceFragment(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"705","getInitialSourceFragment","@Override protected String getInitialSourceFragment(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"705","getInitialSourceFragment","@Override protected String getInitialSourceFragment(PythonParseTree.PythonParser.FuncdefContext function)","8","Annotation Change, Signature Change, Body Change","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"705","getInitialSourceFragment","@Override protected String getInitialSourceFragment(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"705","getInitialSourceFragment","@Override protected String getInitialSourceFragment(PythonParseTree.PythonParser.FuncdefContext function)","8","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"705","getInitialSourceFragment","@Override protected String getInitialSourceFragment(PythonParseTree.PythonParser.FuncdefContext function)","8","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","Minor Modification","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"706","AbstractParser","public AbstractParser(StartEnvironment startEnv, String filePath, String fileContent, Commit commit) throws ParseException","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"707","getScopeSimilarity","public abstract double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"708","getAcceptedFileExtension","public abstract String getAcceptedFileExtension();","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","Signature Change","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"709","parseMethods","protected abstract List<Yfunction> parseMethods() throws ParseException;","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","Signature Change, Body Change","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"710","getDocChange","protected Ydocchange getDocChange(Ycommit commit, Yfunction compareFunction)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","Signature Change, Body Change","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"711","getAnnotationChange","protected Yannotationchange getAnnotationChange(Ycommit commit, Yfunction compareFunction)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"712","getFormatChange","protected Yformatchange getFormatChange(Ycommit commit, Yfunction compareFunction)","29","Signature Change, Body Change","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"713","getReturnTypeChange","protected Yreturntypechange getReturnTypeChange(Ycommit commit, Yfunction compareFunction)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"714","getFunctionRename","protected Yrename getFunctionRename(Ycommit commit, Yfunction compareFunction)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"715","getParametersChange","protected Yparameterchange getParametersChange(Ycommit commit, Yfunction compareFunction)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","Signature Change, Body Change","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"716","getParametersMetaChange","protected Yparametermetachange getParametersMetaChange(Ycommit commit, Yfunction compareFunction)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"717","getExceptionsChange","protected Yexceptionschange getExceptionsChange(Ycommit commit, Yfunction compareFunction)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"718","getModifiersChange","protected Ymodifierchange getModifiersChange(Ycommit commit, Yfunction compareFunction)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"719","getBodyChange","protected Ybodychange getBodyChange(Ycommit commit, Yfunction compareFunction)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","Annotation Change, Signature Change, Body Change","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","Signature Change, Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"720","getMinorChanges","@Override public List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","Annotation Change, Signature Change, Body Change","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","Minor Modification","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","Signature Change, Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"721","getMajorChanges","@Override public List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Minor Modification","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Minor Modification","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Minor Modification","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Parameter Change","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Body Change","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Minor Modification","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Minor Modification","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Body Change","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Body Change","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Body Change","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Minor Modification","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Minor Modification","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Signature Change, Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Body Change","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Signature Change, Body Change","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Signature Change, Body Change","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Body Change","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Body Change","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","Body Change","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"722","getMostSimilarFunction","/** * Finds the most similar function to compareFunction from a list of candidates. * <p> * This is used by both: * CrossFileInterpreter * InFileInterpreter * <p> * Making two copies of this function, one for cross-file and one for * within-file would make the code simpler to understand, but might * cause challenges when updating in the future when changes need to be * made to both. * * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return a match, if one is made, otherwise null */ @Override public Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","Signature Change, Body Change","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","Body Change","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"723","isFunctionSimilar","private boolean isFunctionSimilar(Yfunction compareFcn, Yfunction candidateFcn, double simScore)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","Signature Change, Body Change","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"724","isShortFunction","private boolean isShortFunction(Yfunction aFunction, Yfunction bFunction)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","Signature Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"725","getAllMethodsCount","@Override public Map<String, Yfunction> getAllMethodsCount()","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","Signature Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"726","getAllMethods","@Override public List<Yfunction> getAllMethods()","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","Annotation Change, Modifier Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","Signature Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"727","functionNamesConsideredEqual","@Override public boolean functionNamesConsideredEqual(String aName, String bName)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"728","transformMethodsToMap","protected Map<String, Yfunction> transformMethodsToMap(List<Yfunction> methods)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","Signature Change, Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"729","findMethodsByLineRange","@Override public List<Yfunction> findMethodsByLineRange(int beginLine, int endLine)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","Signature Change, Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"730","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"731","findAllMethods","protected List<Yfunction> findAllMethods(MethodVisitor visitor)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"732","findMethod","private Yfunction findMethod(MethodVisitor visitor)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","Signature Change, Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"733","findFunctionByNameAndLine","@Override public Yfunction findFunctionByNameAndLine(String name, int line)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","Signature Change, Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"734","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","Signature Change, Body Change","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"735","getCandidateWithSameParent","private Yfunction getCandidateWithSameParent(List<Yfunction> candidates, Yfunction compareMethod)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","Annotation Change, Signature Change, Body Change","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","Signature Change, Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"736","findFunctionByOtherFunction","@Override public Yfunction findFunctionByOtherFunction(Yfunction otherMethod)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","Signature Change, Body Change","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"737","findFunctionsByNameAndParams","private List<Yfunction> findFunctionsByNameAndParams(Yfunction otherFunction)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Moved getMajorChanges up into AbstractParser
","fa9848601d9a5de07813d841c9989a901c59fb07","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Improved similarity algorithm if there is only one candidate with the same name among removed functions.
Created stubs for flink repository and got JUnit framework to run again.
","1c89ee62dea633ad3323d523e3ad8febbf355d33","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","different fixes and improvements and more stubs
","c1aac955d6b36bbf5e6eba91184707af6e08728e","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","minor tweak on similarity algorithms and more stubs
","6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Revert ""minor tweak on similarity algorithms and more stubs""

This reverts commit 6ea1cb8c957d6ea11a4de86beda4f34bfc4b73b6.
","170dbff31d185708df26634f977bdc69180493f4","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Revert ""different fixes and improvements and more stubs""

This reverts commit c1aac955d6b36bbf5e6eba91184707af6e08728e.
","b714ac75d5e94d8d1f654678b007942b1ce41f50","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","More refactoring
","4549947a4b5637378e6641cc0810fd2f741bacea","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Refactoring of AbstractParsers and individual parsers; created EVAL.md
","0ba182df0560475861f1844648eeed8a82b43dc8","Felix Grund"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","Signature Change, Body Change","see #47 pull out constants into specific Thresholds class.
","6a9967e7a785105d593f80f4316a17b757e19759","Reid Holmes"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47; pull out alg thresholds into single file for better reference and easier modification.
","2a73090df4d4785b16fbdcb378f293a15ebb1815","Reid Holmes"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 Significant cleanup of core similarity matcher (AbstractParser::getMostSimilarFunction). Fixed several edge cases that were working by chance, improve robusness (e.g., if multiple functions have the same name, don't take the first one but the best one). Improve docs and code flow. Will still need to take another pass to better match with the paper, but this is easier to read for sure. No performance improvement (aka returns the exact same result as the ICSE 2021 paper).
","1ae0c869d879b462fb2cee6e9fad985b99e19e4a","Reid Holmes"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 Add documentation to classes so people can actually figure out how to get started.
","80cc1e03ee245777de9f7a987cae5a1137d49179","Reid Holmes"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 more simplification in abstract parser
","f80dc6f58b56d8d9d495cffa0b094b9136bf794b","Reid Holmes"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 add more meaningful output for matches in abstractparser
","1c5d324c39459851e54174892bdf5ca4ef932e98","Reid Holmes"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","see #47 add phase indicators
","df01e3107b60b7d345e1d06803f967b04af627bd","Reid Holmes"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Add annotation change
","dc75fa4bbe336ff9aed725548ae1b249dc17a00b","braxtonhall"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"738","methodMatches","@Override public boolean methodMatches(Yfunction method)","29","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"739","findFunctionByNameAndLine","/** * Find a method by the given name and line number * @param name Method name * @param line Line number * @return Method if found, null otherwise */ Yfunction findFunctionByNameAndLine(String name, int line);","4","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"739","findFunctionByNameAndLine","/** * Find a method by the given name and line number * @param name Method name * @param line Line number * @return Method if found, null otherwise */ Yfunction findFunctionByNameAndLine(String name, int line);","4","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"739","findFunctionByNameAndLine","/** * Find a method by the given name and line number * @param name Method name * @param line Line number * @return Method if found, null otherwise */ Yfunction findFunctionByNameAndLine(String name, int line);","4","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"739","findFunctionByNameAndLine","/** * Find a method by the given name and line number * @param name Method name * @param line Line number * @return Method if found, null otherwise */ Yfunction findFunctionByNameAndLine(String name, int line);","4","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"740","findMethodsByLineRange","/** * Find a method using the given line range * @param beginLine Start line of the line range * @param endLine End line of the line range * @return Method if found, null otherwise */ List<Yfunction> findMethodsByLineRange(int beginLine, int endLine);","4","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"740","findMethodsByLineRange","/** * Find a method using the given line range * @param beginLine Start line of the line range * @param endLine End line of the line range * @return Method if found, null otherwise */ List<Yfunction> findMethodsByLineRange(int beginLine, int endLine);","4","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"740","findMethodsByLineRange","/** * Find a method using the given line range * @param beginLine Start line of the line range * @param endLine End line of the line range * @return Method if found, null otherwise */ List<Yfunction> findMethodsByLineRange(int beginLine, int endLine);","4","Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"740","findMethodsByLineRange","/** * Find a method using the given line range * @param beginLine Start line of the line range * @param endLine End line of the line range * @return Method if found, null otherwise */ List<Yfunction> findMethodsByLineRange(int beginLine, int endLine);","4","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"741","getAllMethods","/** * @return All methods in this file */ List<Yfunction> getAllMethods();","4","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"741","getAllMethods","/** * @return All methods in this file */ List<Yfunction> getAllMethods();","4","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"741","getAllMethods","/** * @return All methods in this file */ List<Yfunction> getAllMethods();","4","Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"741","getAllMethods","/** * @return All methods in this file */ List<Yfunction> getAllMethods();","4","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"742","getAllMethodsCount","/** * @return A mapping MethodName => Method for all methods in this file */ Map<String, Yfunction> getAllMethodsCount();","4","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"742","getAllMethodsCount","/** * @return A mapping MethodName => Method for all methods in this file */ Map<String, Yfunction> getAllMethodsCount();","4","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"742","getAllMethodsCount","/** * @return A mapping MethodName => Method for all methods in this file */ Map<String, Yfunction> getAllMethodsCount();","4","Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"742","getAllMethodsCount","/** * @return A mapping MethodName => Method for all methods in this file */ Map<String, Yfunction> getAllMethodsCount();","4","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"743","findFunctionByOtherFunction","/** * Find a method that is similar to the given other method * @param otherFunction The similar method * @return Method if found, null otherwise */ Yfunction findFunctionByOtherFunction(Yfunction otherFunction);","4","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"743","findFunctionByOtherFunction","/** * Find a method that is similar to the given other method * @param otherFunction The similar method * @return Method if found, null otherwise */ Yfunction findFunctionByOtherFunction(Yfunction otherFunction);","4","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"743","findFunctionByOtherFunction","/** * Find a method that is similar to the given other method * @param otherFunction The similar method * @return Method if found, null otherwise */ Yfunction findFunctionByOtherFunction(Yfunction otherFunction);","4","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"743","findFunctionByOtherFunction","/** * Find a method that is similar to the given other method * @param otherFunction The similar method * @return Method if found, null otherwise */ Yfunction findFunctionByOtherFunction(Yfunction otherFunction);","4","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"744","functionNamesConsideredEqual","/** * Check if the given method names are equal (i.e. == in most languages or .equals in others) * @param aName First method name * @param bName Second method name * @return True if method names are equal, false otherwise */ boolean functionNamesConsideredEqual(String aName, String bName);","4","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"744","functionNamesConsideredEqual","/** * Check if the given method names are equal (i.e. == in most languages or .equals in others) * @param aName First method name * @param bName Second method name * @return True if method names are equal, false otherwise */ boolean functionNamesConsideredEqual(String aName, String bName);","4","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"744","functionNamesConsideredEqual","/** * Check if the given method names are equal (i.e. == in most languages or .equals in others) * @param aName First method name * @param bName Second method name * @return True if method names are equal, false otherwise */ boolean functionNamesConsideredEqual(String aName, String bName);","4","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"744","functionNamesConsideredEqual","/** * Check if the given method names are equal (i.e. == in most languages or .equals in others) * @param aName First method name * @param bName Second method name * @return True if method names are equal, false otherwise */ boolean functionNamesConsideredEqual(String aName, String bName);","4","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"745","getMostSimilarFunction","/** * Find the most similar method as the given compareFunction in the given set of candidate methods * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return Similar method if found, null otherwise */ Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile);","4","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"745","getMostSimilarFunction","/** * Find the most similar method as the given compareFunction in the given set of candidate methods * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return Similar method if found, null otherwise */ Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile);","4","Parameter Change","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"745","getMostSimilarFunction","/** * Find the most similar method as the given compareFunction in the given set of candidate methods * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return Similar method if found, null otherwise */ Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile);","4","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"745","getMostSimilarFunction","/** * Find the most similar method as the given compareFunction in the given set of candidate methods * @param candidates Set of candidate methods * @param compareFunction Similar method * @param crossFile True if other files in commit should be searched, false if only in-file * @return Similar method if found, null otherwise */ Yfunction getMostSimilarFunction(List<Yfunction> candidates, Yfunction compareFunction, boolean crossFile);","4","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"746","getScopeSimilarity","/** * @param function Method 1 * @param compareFunction Method 2 * @return Number between 0 and 1 for the similarity of the scope of the two given methods */ double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","4","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"746","getScopeSimilarity","/** * @param function Method 1 * @param compareFunction Method 2 * @return Number between 0 and 1 for the similarity of the scope of the two given methods */ double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","4","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"746","getScopeSimilarity","/** * @param function Method 1 * @param compareFunction Method 2 * @return Number between 0 and 1 for the similarity of the scope of the two given methods */ double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","4","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"746","getScopeSimilarity","/** * @param function Method 1 * @param compareFunction Method 2 * @return Number between 0 and 1 for the similarity of the scope of the two given methods */ double getScopeSimilarity(Yfunction function, Yfunction compareFunction);","4","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"747","getMajorChanges","/** * Retrieves the set of ""major changes"" (i.e. all derivates of Ysignaturechange as of now) for the given commit * and method. * @param commit Commit * @param compareFunction Method * @return Set of major changes * @throws Exception */ List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction) throws Exception;","4","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"747","getMajorChanges","/** * Retrieves the set of ""major changes"" (i.e. all derivates of Ysignaturechange as of now) for the given commit * and method. * @param commit Commit * @param compareFunction Method * @return Set of major changes * @throws Exception */ List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction) throws Exception;","4","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"747","getMajorChanges","/** * Retrieves the set of ""major changes"" (i.e. all derivates of Ysignaturechange as of now) for the given commit * and method. * @param commit Commit * @param compareFunction Method * @return Set of major changes * @throws Exception */ List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction) throws Exception;","4","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"747","getMajorChanges","/** * Retrieves the set of ""major changes"" (i.e. all derivates of Ysignaturechange as of now) for the given commit * and method. * @param commit Commit * @param compareFunction Method * @return Set of major changes * @throws Exception */ List<Ysignaturechange> getMajorChanges(Ycommit commit, Yfunction compareFunction) throws Exception;","4","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"748","getMinorChanges","/** * Retrieves the set of ""minor changes"" (i.e. all changes that are NOT derivates of Ysignaturechange as of now) * for the given commit and method. * @param commit Commit * @param compareFunction Method * @return Set of minor changes * @throws Exception */ List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction) throws Exception;","4","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"748","getMinorChanges","/** * Retrieves the set of ""minor changes"" (i.e. all changes that are NOT derivates of Ysignaturechange as of now) * for the given commit and method. * @param commit Commit * @param compareFunction Method * @return Set of minor changes * @throws Exception */ List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction) throws Exception;","4","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"748","getMinorChanges","/** * Retrieves the set of ""minor changes"" (i.e. all changes that are NOT derivates of Ysignaturechange as of now) * for the given commit and method. * @param commit Commit * @param compareFunction Method * @return Set of minor changes * @throws Exception */ List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction) throws Exception;","4","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"748","getMinorChanges","/** * Retrieves the set of ""minor changes"" (i.e. all changes that are NOT derivates of Ysignaturechange as of now) * for the given commit and method. * @param commit Commit * @param compareFunction Method * @return Set of minor changes * @throws Exception */ List<Ychange> getMinorChanges(Ycommit commit, Yfunction compareFunction) throws Exception;","4","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"749","getAcceptedFileExtension","/** * @return The accepted file extension for this language as string (e.g. "".js"", "".java"") */ String getAcceptedFileExtension();","4","-","whole range of bugfixes
","d0326e5e302787f00ab03540b4b84cf69077c371","Felix Grund"
"749","getAcceptedFileExtension","/** * @return The accepted file extension for this language as string (e.g. "".js"", "".java"") */ String getAcceptedFileExtension();","4","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"749","getAcceptedFileExtension","/** * @return The accepted file extension for this language as string (e.g. "".js"", "".java"") */ String getAcceptedFileExtension();","4","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"749","getAcceptedFileExtension","/** * @return The accepted file extension for this language as string (e.g. "".js"", "".java"") */ String getAcceptedFileExtension();","4","Signature Change","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"750","getInitialName","protected abstract String getInitialName(E rawMethod);","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"751","getInitialType","protected abstract String getInitialType(E rawMethod);","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"752","getInitialModifiers","protected abstract Ymodifiers getInitialModifiers(E rawMethod);","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"753","getInitialExceptions","protected abstract Yexceptions getInitialExceptions(E rawMethod);","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"754","getInitialParameters","protected abstract List<Yparameter> getInitialParameters(E rawMethod);","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"755","getInitialBody","protected abstract String getInitialBody(E rawMethod);","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"756","getInitialBeginLine","protected abstract int getInitialBeginLine(E rawMethod);","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"757","getInitialEndLine","protected abstract int getInitialEndLine(E rawMethod);","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"758","getInitialParentName","protected abstract String getInitialParentName(E rawMethod);","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"759","getInitialFunctionPath","protected abstract String getInitialFunctionPath(E rawMethod);","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","Signature Change","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"760","getInitialAnnotation","protected abstract String getInitialAnnotation(E rawMethod);","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","Signature Change","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"761","getInitialDoc","protected abstract String getInitialDoc(E rawMethod);","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"762","getInitialUnformattedBody","protected abstract String getInitialUnformattedBody(E rawMethod);","16","Signature Change","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","Parameter Change, Signature Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","Parameter Change, Signature Change, Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","Parameter Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","Minor Modification","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","Minor Modification","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","Minor Modification","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","Minor Modification","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","Minor Modification","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","Minor Modification","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"763","AbstractFunction","public AbstractFunction(E rawMethod, Commit commit, String sourceFilePath, String sourceFileContent)","16","Minor Modification","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"764","getIdParameterString","protected String getIdParameterString()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"764","getIdParameterString","protected String getIdParameterString()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"764","getIdParameterString","protected String getIdParameterString()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"764","getIdParameterString","protected String getIdParameterString()","16","Body Change","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"764","getIdParameterString","protected String getIdParameterString()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"764","getIdParameterString","protected String getIdParameterString()","16","Modifier Change, Signature Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"764","getIdParameterString","protected String getIdParameterString()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"764","getIdParameterString","protected String getIdParameterString()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"764","getIdParameterString","protected String getIdParameterString()","16","Modifier Change, Signature Change","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"764","getIdParameterString","protected String getIdParameterString()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"764","getIdParameterString","protected String getIdParameterString()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"764","getIdParameterString","protected String getIdParameterString()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"764","getIdParameterString","protected String getIdParameterString()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"764","getIdParameterString","protected String getIdParameterString()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"764","getIdParameterString","protected String getIdParameterString()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"764","getIdParameterString","protected String getIdParameterString()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","Body Change","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","Modifier Change, Signature Change, Body Change","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","Modifier Change, Signature Change, Body Change","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"765","getInitialId","protected String getInitialId(E rawMethod)","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"766","getInitialReturnStmt","protected Yreturn getInitialReturnStmt(E rawMethod)","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","Signature Change, Body Change","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"767","getInitialSourceFragment","protected String getInitialSourceFragment(E rawMethod)","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"768","getId","@Override public String getId()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"768","getId","@Override public String getId()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"768","getId","@Override public String getId()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"768","getId","@Override public String getId()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"768","getId","@Override public String getId()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"768","getId","@Override public String getId()","16","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"768","getId","@Override public String getId()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"768","getId","@Override public String getId()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"768","getId","@Override public String getId()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"768","getId","@Override public String getId()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"768","getId","@Override public String getId()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"768","getId","@Override public String getId()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"768","getId","@Override public String getId()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"768","getId","@Override public String getId()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"768","getId","@Override public String getId()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"768","getId","@Override public String getId()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"769","getSourceFragment","@Override public String getSourceFragment()","16","Annotation Change, Signature Change, Body Change","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"769","getSourceFragment","@Override public String getSourceFragment()","16","Body Change","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"769","getSourceFragment","@Override public String getSourceFragment()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"770","getCommitName","@Override public String getCommitName()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"770","getCommitName","@Override public String getCommitName()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"770","getCommitName","@Override public String getCommitName()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"770","getCommitName","@Override public String getCommitName()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"770","getCommitName","@Override public String getCommitName()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"770","getCommitName","@Override public String getCommitName()","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"770","getCommitName","@Override public String getCommitName()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"770","getCommitName","@Override public String getCommitName()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"770","getCommitName","@Override public String getCommitName()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"770","getCommitName","@Override public String getCommitName()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"770","getCommitName","@Override public String getCommitName()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"770","getCommitName","@Override public String getCommitName()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"770","getCommitName","@Override public String getCommitName()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"770","getCommitName","@Override public String getCommitName()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"770","getCommitName","@Override public String getCommitName()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"770","getCommitName","@Override public String getCommitName()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"771","getCommitNameShort","@Override public String getCommitNameShort()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"772","getSourceFilePath","@Override public String getSourceFilePath()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"773","getSourceFileContent","@Override public String getSourceFileContent()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"774","toString","@Override public String toString()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"774","toString","@Override public String toString()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"774","toString","@Override public String toString()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"774","toString","@Override public String toString()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"774","toString","@Override public String toString()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"774","toString","@Override public String toString()","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"774","toString","@Override public String toString()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"774","toString","@Override public String toString()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"774","toString","@Override public String toString()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"774","toString","@Override public String toString()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"774","toString","@Override public String toString()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"774","toString","@Override public String toString()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"774","toString","@Override public String toString()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"774","toString","@Override public String toString()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"774","toString","@Override public String toString()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"774","toString","@Override public String toString()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"775","getCommit","@Override public Commit getCommit()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"775","getCommit","@Override public Commit getCommit()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"775","getCommit","@Override public Commit getCommit()","16","Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"775","getCommit","@Override public Commit getCommit()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"775","getCommit","@Override public Commit getCommit()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"775","getCommit","@Override public Commit getCommit()","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"775","getCommit","@Override public Commit getCommit()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"775","getCommit","@Override public Commit getCommit()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"775","getCommit","@Override public Commit getCommit()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"775","getCommit","@Override public Commit getCommit()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"775","getCommit","@Override public Commit getCommit()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"775","getCommit","@Override public Commit getCommit()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"775","getCommit","@Override public Commit getCommit()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"775","getCommit","@Override public Commit getCommit()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"775","getCommit","@Override public Commit getCommit()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"775","getCommit","@Override public Commit getCommit()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"776","getFunctionPath","@Override public String getFunctionPath()","16","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"776","getFunctionPath","@Override public String getFunctionPath()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"777","getParentName","@Override public String getParentName()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"777","getParentName","@Override public String getParentName()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"777","getParentName","@Override public String getParentName()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"777","getParentName","@Override public String getParentName()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"777","getParentName","@Override public String getParentName()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"777","getParentName","@Override public String getParentName()","16","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"777","getParentName","@Override public String getParentName()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"777","getParentName","@Override public String getParentName()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"777","getParentName","@Override public String getParentName()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"777","getParentName","@Override public String getParentName()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"777","getParentName","@Override public String getParentName()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"777","getParentName","@Override public String getParentName()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"777","getParentName","@Override public String getParentName()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"777","getParentName","@Override public String getParentName()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"777","getParentName","@Override public String getParentName()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"777","getParentName","@Override public String getParentName()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"778","getName","@Override public String getName()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"778","getName","@Override public String getName()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"778","getName","@Override public String getName()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"778","getName","@Override public String getName()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"778","getName","@Override public String getName()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"778","getName","@Override public String getName()","16","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"778","getName","@Override public String getName()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"778","getName","@Override public String getName()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"778","getName","@Override public String getName()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"778","getName","@Override public String getName()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"778","getName","@Override public String getName()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"778","getName","@Override public String getName()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"778","getName","@Override public String getName()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"778","getName","@Override public String getName()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"778","getName","@Override public String getName()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"778","getName","@Override public String getName()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"779","getReturnStmt","@Override public Yreturn getReturnStmt()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"780","getModifiers","@Override public Ymodifiers getModifiers()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"781","getExceptions","@Override public Yexceptions getExceptions()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"782","getBody","@Override public String getBody()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"782","getBody","@Override public String getBody()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"782","getBody","@Override public String getBody()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"782","getBody","@Override public String getBody()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"782","getBody","@Override public String getBody()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"782","getBody","@Override public String getBody()","16","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"782","getBody","@Override public String getBody()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"782","getBody","@Override public String getBody()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"782","getBody","@Override public String getBody()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"782","getBody","@Override public String getBody()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"782","getBody","@Override public String getBody()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"782","getBody","@Override public String getBody()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"782","getBody","@Override public String getBody()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"782","getBody","@Override public String getBody()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"782","getBody","@Override public String getBody()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"782","getBody","@Override public String getBody()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"783","getParameters","@Override public List<Yparameter> getParameters()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"784","getNameLineNumber","@Override public int getNameLineNumber()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","Annotation Change, Signature Change, Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"785","getEndLineNumber","@Override public int getEndLineNumber()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"786","getAnnotation","@Override public String getAnnotation()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"786","getAnnotation","@Override public String getAnnotation()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"786","getAnnotation","@Override public String getAnnotation()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"786","getAnnotation","@Override public String getAnnotation()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"786","getAnnotation","@Override public String getAnnotation()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"786","getAnnotation","@Override public String getAnnotation()","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"786","getAnnotation","@Override public String getAnnotation()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"786","getAnnotation","@Override public String getAnnotation()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"786","getAnnotation","@Override public String getAnnotation()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"786","getAnnotation","@Override public String getAnnotation()","16","Annotation Change, Signature Change, Body Change","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"786","getAnnotation","@Override public String getAnnotation()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"786","getAnnotation","@Override public String getAnnotation()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"786","getAnnotation","@Override public String getAnnotation()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"786","getAnnotation","@Override public String getAnnotation()","16","Minor Modification","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"786","getAnnotation","@Override public String getAnnotation()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"786","getAnnotation","@Override public String getAnnotation()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","Annotation Change, Signature Change, Body Change","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"787","getFunctionDoc","@Override public String getFunctionDoc()","16","-","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","More readme and documentation
","c68b0d741224ad0973a77d178ac04f2ed0338de4","Felix Grund"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","Fix issue with nested class methods resulting in identical IDs with outer methods
","c0491a1192bd4704243e1ac96bae14e94f14d634","fgrund"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","Make function ID not include parent name but only start with '$' if it's a nested method
","f14be5c97a99fdbc4937e35653bad8baa6c99d53","fgrund"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","Add decorators for Python
","c4fb687ea873762c4b2d71ce78e4f21a48384b10","braxtonhall"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","Typescript (#54)

* Python impl (#20)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Started parsing python

* Add first python test

* Regenerated Python Antlr files

* naive impl of PythonParser/Function

* Add asciinema tests

* Added public python tensorflow tests

* complete models and django tests

* Update Z_asciinema-term-read_blocking.json

* PythonParser::parseMethods thows

* Simplified test edge cases

* Remove whitespace/comment changes from tests

* Switch to general Python parser

* Made tests optional, added python returntype test

* Type hints and return types impl

* Disregard annotation changes

* Add parametermetachange to python

* Fix bad flask test

* Also visit nested function definitions

* Lambda function tests

OK I'm not really sure about lambdas, are you can have more than one on the same line

* make accepted file extensions regexes

* Return correct endline

* C impl (#21)

* Naive implementation of C parser

* Get rid of generated code

* Support parameters with no name

* support *args and **kwargs

* replace all external code with mvn commands

* Update .gitignore

* Update pom.xml

* Added Python tests

* Update PythonFunction comments

* Add tests

* Flask
* Rebound
* Keras
* Pandas

* Get parent name properly

* Update Z_scikit-learn-_search-__getitem__.json

* Start TypeScript Function impl

* Use node typescript parser

* Use name of TypeScript file when parsing

* Implement TypeScript function transformers

* Remove some memory leaks

* Update typescript change types

* Add modifier change to python

* Use Yexceptions.NONE for TypeScript

* Momve node_modules to resources

* Add parentName to Typescript

* Add functionPath for TypeScript

* update TODO

* Remove duplicate code in pom from merge

* Ensure resource loading works in jar

* Attempt to suppress runtime errors in linux

* Move NodeJS creation

To fix a thread issue

* Attempt to fix threading issue with typescript import

* NodeJS shouldn't be released while in use

* Use class loader

* Add some logging for debugging

* Use getClassLoader again

* Try to make TypeScript visitor thread safe

* Each TypeScript visitor gets its own V8 runtime

* Remove dead code

* Use built in getText instead of bad substrings

* Add in missing PythonFunction method

* Remove unused C tests

* Refactor TypeScript and Visitor

* Restore accidentally deleted functionality

* Restore TypeScriptFunction performance

* Delete useless code

* Restore missing file

* Add TypeScript oracles

* Move J2V8 artifact ID into configurable properties

* Make function annotations consistent for all languages","0a200c86a673270474a2285bf78df36449b3cb8a","Braxton Hall"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","Function Annotation in Diffs (#62)

* Add annotations to source fragments

* Accept Python functions at EOF","162cea28e50bdb8045b3cc44648fe15236f5f01d","Braxton Hall"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"788","getUnformattedBody","@Override public String getUnformattedBody()","16","Annotation Change, Signature Change, Body Change","Feature #75 Track formatting changes
- Get the unformatted body by preserving the original layout of the source code
- Compare between current and previous unformatted method's body to track these
  kind of formatting changes
- Use Javaparser ""LexicalPreservingPrinter"" to get the unformatted source code
","2e2762e0aa4681ed9c6a21b71bb3aa2f1ca12a71","Syed Ishtiaque Ahmad"
"789","NoParserFoundException","public NoParserFoundException(String message)","0","-","-","-","-"
"790","ParseException","public ParseException(String message, String fileName, String fileContent)","0","-","-","-","-"
"791","getFileName","public String getFileName()","0","-","-","-","-"
"792","getFileContent","public String getFileContent()","0","-","-","-","-"
"793","JsonResult","public JsonResult(String origin, AnalysisTask startTask, List<String> changeHistory, Map<String, Ychange> changeHistoryDetails, Map<String, String> changeHistoryShort)","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"793","JsonResult","public JsonResult(String origin, AnalysisTask startTask, List<String> changeHistory, Map<String, Ychange> changeHistoryDetails, Map<String, String> changeHistoryShort)","6","Body Change","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"793","JsonResult","public JsonResult(String origin, AnalysisTask startTask, List<String> changeHistory, Map<String, Ychange> changeHistoryDetails, Map<String, String> changeHistoryShort)","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"793","JsonResult","public JsonResult(String origin, AnalysisTask startTask, List<String> changeHistory, Map<String, Ychange> changeHistoryDetails, Map<String, String> changeHistoryShort)","6","Body Change","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"793","JsonResult","public JsonResult(String origin, AnalysisTask startTask, List<String> changeHistory, Map<String, Ychange> changeHistoryDetails, Map<String, String> changeHistoryShort)","6","Minor Modification","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"793","JsonResult","public JsonResult(String origin, AnalysisTask startTask, List<String> changeHistory, Map<String, Ychange> changeHistoryDetails, Map<String, String> changeHistoryShort)","6","Minor Modification","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"794","getStartCommitName","public String getStartCommitName()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"794","getStartCommitName","public String getStartCommitName()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"794","getStartCommitName","public String getStartCommitName()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"794","getStartCommitName","public String getStartCommitName()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"794","getStartCommitName","public String getStartCommitName()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"794","getStartCommitName","public String getStartCommitName()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"795","getSourceFileName","public String getSourceFileName()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"795","getSourceFileName","public String getSourceFileName()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"795","getSourceFileName","public String getSourceFileName()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"795","getSourceFileName","public String getSourceFileName()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"795","getSourceFileName","public String getSourceFileName()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"795","getSourceFileName","public String getSourceFileName()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"796","getFunctionName","public String getFunctionName()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"796","getFunctionName","public String getFunctionName()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"796","getFunctionName","public String getFunctionName()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"796","getFunctionName","public String getFunctionName()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"796","getFunctionName","public String getFunctionName()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"796","getFunctionName","public String getFunctionName()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"797","getFunctionStartLine","public int getFunctionStartLine()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"797","getFunctionStartLine","public int getFunctionStartLine()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"797","getFunctionStartLine","public int getFunctionStartLine()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"797","getFunctionStartLine","public int getFunctionStartLine()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"797","getFunctionStartLine","public int getFunctionStartLine()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"797","getFunctionStartLine","public int getFunctionStartLine()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"798","getFunctionEndLine","public int getFunctionEndLine()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"798","getFunctionEndLine","public int getFunctionEndLine()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"798","getFunctionEndLine","public int getFunctionEndLine()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"798","getFunctionEndLine","public int getFunctionEndLine()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"798","getFunctionEndLine","public int getFunctionEndLine()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"798","getFunctionEndLine","public int getFunctionEndLine()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"799","getChangeHistory","public List<String> getChangeHistory()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"799","getChangeHistory","public List<String> getChangeHistory()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"799","getChangeHistory","public List<String> getChangeHistory()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"799","getChangeHistory","public List<String> getChangeHistory()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"799","getChangeHistory","public List<String> getChangeHistory()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"799","getChangeHistory","public List<String> getChangeHistory()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"800","toJson","public String toJson()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"800","toJson","public String toJson()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"800","toJson","public String toJson()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"800","toJson","public String toJson()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"800","toJson","public String toJson()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"800","toJson","public String toJson()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"801","getRepositoryName","public String getRepositoryName()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"801","getRepositoryName","public String getRepositoryName()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"801","getRepositoryName","public String getRepositoryName()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"801","getRepositoryName","public String getRepositoryName()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"801","getRepositoryName","public String getRepositoryName()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"801","getRepositoryName","public String getRepositoryName()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"802","getOrigin","public String getOrigin()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"802","getOrigin","public String getOrigin()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"802","getOrigin","public String getOrigin()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"802","getOrigin","public String getOrigin()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"802","getOrigin","public String getOrigin()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"802","getOrigin","public String getOrigin()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"803","getSourceFilePath","public String getSourceFilePath()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"803","getSourceFilePath","public String getSourceFilePath()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"803","getSourceFilePath","public String getSourceFilePath()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"803","getSourceFilePath","public String getSourceFilePath()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"803","getSourceFilePath","public String getSourceFilePath()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"803","getSourceFilePath","public String getSourceFilePath()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"804","getFunctionId","public String getFunctionId()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"804","getFunctionId","public String getFunctionId()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"804","getFunctionId","public String getFunctionId()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"804","getFunctionId","public String getFunctionId()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"804","getFunctionId","public String getFunctionId()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"804","getFunctionId","public String getFunctionId()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"805","getRepositoryPath","public String getRepositoryPath()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"805","getRepositoryPath","public String getRepositoryPath()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"805","getRepositoryPath","public String getRepositoryPath()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"805","getRepositoryPath","public String getRepositoryPath()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"805","getRepositoryPath","public String getRepositoryPath()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"805","getRepositoryPath","public String getRepositoryPath()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"806","getChangeHistoryDetails","public Map<String, Ychange> getChangeHistoryDetails()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"806","getChangeHistoryDetails","public Map<String, Ychange> getChangeHistoryDetails()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"806","getChangeHistoryDetails","public Map<String, Ychange> getChangeHistoryDetails()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"806","getChangeHistoryDetails","public Map<String, Ychange> getChangeHistoryDetails()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"806","getChangeHistoryDetails","public Map<String, Ychange> getChangeHistoryDetails()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"806","getChangeHistoryDetails","public Map<String, Ychange> getChangeHistoryDetails()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"807","getChangeHistoryShort","public Map<String, String> getChangeHistoryShort()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"807","getChangeHistoryShort","public Map<String, String> getChangeHistoryShort()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"807","getChangeHistoryShort","public Map<String, String> getChangeHistoryShort()","6","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"807","getChangeHistoryShort","public Map<String, String> getChangeHistoryShort()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"807","getChangeHistoryShort","public Map<String, String> getChangeHistoryShort()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"807","getChangeHistoryShort","public Map<String, String> getChangeHistoryShort()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"808","getNumCommitsSeen","public int getNumCommitsSeen()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"808","getNumCommitsSeen","public int getNumCommitsSeen()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"808","getNumCommitsSeen","public int getNumCommitsSeen()","6","Signature Change, Body Change","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"808","getNumCommitsSeen","public int getNumCommitsSeen()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"808","getNumCommitsSeen","public int getNumCommitsSeen()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"808","getNumCommitsSeen","public int getNumCommitsSeen()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"809","getTimeTaken","public long getTimeTaken()","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"809","getTimeTaken","public long getTimeTaken()","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"809","getTimeTaken","public long getTimeTaken()","6","Signature Change, Body Change","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"809","getTimeTaken","public long getTimeTaken()","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"809","getTimeTaken","public long getTimeTaken()","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"809","getTimeTaken","public long getTimeTaken()","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"810","setNumCommitsSeen","public void setNumCommitsSeen(int numCommitsSeen)","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"810","setNumCommitsSeen","public void setNumCommitsSeen(int numCommitsSeen)","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"810","setNumCommitsSeen","public void setNumCommitsSeen(int numCommitsSeen)","6","Signature Change, Body Change","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"810","setNumCommitsSeen","public void setNumCommitsSeen(int numCommitsSeen)","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"810","setNumCommitsSeen","public void setNumCommitsSeen(int numCommitsSeen)","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"810","setNumCommitsSeen","public void setNumCommitsSeen(int numCommitsSeen)","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"811","setTimeTaken","public void setTimeTaken(long timeTaken)","6","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"811","setTimeTaken","public void setTimeTaken(long timeTaken)","6","-","Fixed bug with wrong paths for files written during mining exec
","bc3ffea281854d6e299bba3004db52a9e544a2db","Felix Grund"
"811","setTimeTaken","public void setTimeTaken(long timeTaken)","6","Signature Change, Body Change","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"811","setTimeTaken","public void setTimeTaken(long timeTaken)","6","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"811","setTimeTaken","public void setTimeTaken(long timeTaken)","6","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"811","setTimeTaken","public void setTimeTaken(long timeTaken)","6","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"812","JsonChangeHistoryDiff","public JsonChangeHistoryDiff( List<String> codeshovelHistory, List<String> baselineHistory, List<String> onlyInCodeshovel, List<String> onlyInBaseline)","3","Parameter Change, Signature Change, Body Change","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"812","JsonChangeHistoryDiff","public JsonChangeHistoryDiff( List<String> codeshovelHistory, List<String> baselineHistory, List<String> onlyInCodeshovel, List<String> onlyInBaseline)","3","Parameter Change","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"812","JsonChangeHistoryDiff","public JsonChangeHistoryDiff( List<String> codeshovelHistory, List<String> baselineHistory, List<String> onlyInCodeshovel, List<String> onlyInBaseline)","3","Minor Modification","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"813","toJson","public String toJson()","3","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"813","toJson","public String toJson()","3","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"813","toJson","public String toJson()","3","-","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"814","JsonSimilarity","public JsonSimilarity(FunctionEntry function, FunctionEntry mostSimilarFunction, FunctionSimilarity similarity)","1","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"815","getSimilarity","public FunctionSimilarity getSimilarity()","1","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"816","getFunction","public FunctionEntry getFunction()","1","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"817","getMostSimilarFunction","public FunctionEntry getMostSimilarFunction()","1","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"818","toJson","public String toJson()","1","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"819","getCommitName","public String getCommitName()","1","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"820","FunctionEntry","public FunctionEntry(String commitName, String name, String path, String source)","1","Parameter Change","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"821","getCommitName","public String getCommitName()","1","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"822","getName","public String getName()","1","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"823","getPath","public String getPath()","1","-","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"824","getSource","public String getSource()","1","Signature Change, Body Change","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"825","toString","@Override public String toString()","1","Minor Modification","now differentiating for body similarity depending on body length
","02083c2597e3c752d8e3b47c428e41900bad179d","Felix Grund"
"826","JsonOracle","public JsonOracle(JsonResult jsonResult)","0","-","-","-","-"
"827","getRepositoryName","public String getRepositoryName()","0","-","-","-","-"
"828","setRepositoryName","public void setRepositoryName(String repositoryName)","0","-","-","-","-"
"829","getFilePath","public String getFilePath()","0","-","-","-","-"
"830","setFilePath","public void setFilePath(String filePath)","0","-","-","-","-"
"831","getFunctionName","public String getFunctionName()","0","-","-","-","-"
"832","setFunctionName","public void setFunctionName(String functionName)","0","-","-","-","-"
"833","getFunctionStartLine","public int getFunctionStartLine()","0","-","-","-","-"
"834","setFunctionStartLine","public void setFunctionStartLine(int functionStartLine)","0","-","-","-","-"
"835","getStartCommitName","public String getStartCommitName()","0","-","-","-","-"
"836","setStartCommitName","public void setStartCommitName(String startCommitName)","0","-","-","-","-"
"837","getExpectedResult","public List<String> getExpectedResult()","0","-","-","-","-"
"838","setExpectedResult","public void setExpectedResult(List<String> expectedResult)","0","-","-","-","-"
"839","toJson","public String toJson()","0","-","-","-","-"
"840","serialize","@Override public JsonElement serialize(Ychange change, Type typeOfSrc, JsonSerializationContext context)","4","Body Change","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"840","serialize","@Override public JsonElement serialize(Ychange change, Type typeOfSrc, JsonSerializationContext context)","4","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"840","serialize","@Override public JsonElement serialize(Ychange change, Type typeOfSrc, JsonSerializationContext context)","4","Body Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"840","serialize","@Override public JsonElement serialize(Ychange change, Type typeOfSrc, JsonSerializationContext context)","4","Body Change","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","Body Change","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","Body Change","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Output the date in the log at start, end and on progress updates for simple profiling
","712fa1e7d6be56279d1951a29574601512debe62","Nick Bradley"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","always write semantic diff files, even if baseline and shovel don't differ
","d8bae4c8a940696b4bc5740b7a1905991fcaa195","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","Minor Modification","Added exception handling to ShovelExecution
","c5db40141eeb08ee0ca05c5bfd9f06d3839e7f89","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","hardcoded only baseline temporarily
","6762dc056533f29b954abe2e9c4fc79bfc732753","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","Minor Modification","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"841","runMining","public static Yresult runMining(StartEnvironment startEnv, String acceptedFileExtension) throws Exception","33","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","Parameter Change, Signature Change, Body Change","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","Minor Modification","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","Minor Modification","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","Minor Modification","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Output the date in the log at start, end and on progress updates for simple profiling
","712fa1e7d6be56279d1951a29574601512debe62","Nick Bradley"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","always write semantic diff files, even if baseline and shovel don't differ
","d8bae4c8a940696b4bc5740b7a1905991fcaa195","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","Minor Modification","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Added exception handling to ShovelExecution
","c5db40141eeb08ee0ca05c5bfd9f06d3839e7f89","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","hardcoded only baseline temporarily
","6762dc056533f29b954abe2e9c4fc79bfc732753","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","Body Change","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","Minor Modification","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","Minor Modification","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","Minor Modification","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","Body Change","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"842","runSingle","public static Yresult runSingle(StartEnvironment startEnv, String filePath, boolean accumulateResults) throws Exception","33","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Body Change","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Body Change","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Minor Modification","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","Output the date in the log at start, end and on progress updates for simple profiling
","712fa1e7d6be56279d1951a29574601512debe62","Nick Bradley"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","always write semantic diff files, even if baseline and shovel don't differ
","d8bae4c8a940696b4bc5740b7a1905991fcaa195","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","Added exception handling to ShovelExecution
","c5db40141eeb08ee0ca05c5bfd9f06d3839e7f89","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Minor Modification","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Minor Modification","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Minor Modification","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Body Change","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","hardcoded only baseline temporarily
","6762dc056533f29b954abe2e9c4fc79bfc732753","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Body Change","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Body Change","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Body Change","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Minor Modification","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Minor Modification","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Body Change","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Body Change","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Minor Modification","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Body Change","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Body Change","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"843","runForMethod","private static Yresult runForMethod(StartEnvironment startEnv, String filePath, Yfunction method) throws Exception","33","Minor Modification","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","Signature Change, Body Change","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","Body Change","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Output the date in the log at start, end and on progress updates for simple profiling
","712fa1e7d6be56279d1951a29574601512debe62","Nick Bradley"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","Body Change","always write semantic diff files, even if baseline and shovel don't differ
","d8bae4c8a940696b4bc5740b7a1905991fcaa195","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Added exception handling to ShovelExecution
","c5db40141eeb08ee0ca05c5bfd9f06d3839e7f89","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","hardcoded only baseline temporarily
","6762dc056533f29b954abe2e9c4fc79bfc732753","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","Body Change","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"844","createAndWriteSemanticDiff","private static void createAndWriteSemanticDiff(String baselineName, JsonResult result, List<String> codeshovelHistory, List<String> baselineHistory)","33","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","Signature Change, Body Change","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","Body Change","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Output the date in the log at start, end and on progress updates for simple profiling
","712fa1e7d6be56279d1951a29574601512debe62","Nick Bradley"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","always write semantic diff files, even if baseline and shovel don't differ
","d8bae4c8a940696b4bc5740b7a1905991fcaa195","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Added exception handling to ShovelExecution
","c5db40141eeb08ee0ca05c5bfd9f06d3839e7f89","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","hardcoded only baseline temporarily
","6762dc056533f29b954abe2e9c4fc79bfc732753","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","Body Change","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"845","printAsJson","private static void printAsJson(Map<String, String> changeHistoryShort)","33","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Output the date in the log at start, end and on progress updates for simple profiling
","712fa1e7d6be56279d1951a29574601512debe62","Nick Bradley"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","always write semantic diff files, even if baseline and shovel don't differ
","d8bae4c8a940696b4bc5740b7a1905991fcaa195","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Added exception handling to ShovelExecution
","c5db40141eeb08ee0ca05c5bfd9f06d3839e7f89","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","hardcoded only baseline temporarily
","6762dc056533f29b954abe2e9c4fc79bfc732753","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"846","printFileStart","private static void printFileStart(String filePath)","33","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Output the date in the log at start, end and on progress updates for simple profiling
","712fa1e7d6be56279d1951a29574601512debe62","Nick Bradley"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","always write semantic diff files, even if baseline and shovel don't differ
","d8bae4c8a940696b4bc5740b7a1905991fcaa195","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Added exception handling to ShovelExecution
","c5db40141eeb08ee0ca05c5bfd9f06d3839e7f89","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","hardcoded only baseline temporarily
","6762dc056533f29b954abe2e9c4fc79bfc732753","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"847","printFileEnd","private static void printFileEnd(String filePath)","33","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Output the date in the log at start, end and on progress updates for simple profiling
","712fa1e7d6be56279d1951a29574601512debe62","Nick Bradley"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","always write semantic diff files, even if baseline and shovel don't differ
","d8bae4c8a940696b4bc5740b7a1905991fcaa195","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Added exception handling to ShovelExecution
","c5db40141eeb08ee0ca05c5bfd9f06d3839e7f89","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","hardcoded only baseline temporarily
","6762dc056533f29b954abe2e9c4fc79bfc732753","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"848","printMethodStart","private static void printMethodStart(Yfunction method)","33","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Output the date in the log at start, end and on progress updates for simple profiling
","712fa1e7d6be56279d1951a29574601512debe62","Nick Bradley"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","always write semantic diff files, even if baseline and shovel don't differ
","d8bae4c8a940696b4bc5740b7a1905991fcaa195","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Added exception handling to ShovelExecution
","c5db40141eeb08ee0ca05c5bfd9f06d3839e7f89","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","hardcoded only baseline temporarily
","6762dc056533f29b954abe2e9c4fc79bfc732753","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","Parameter Change, Signature Change, Body Change","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"849","printMethodEnd","private static void printMethodEnd(Yfunction method, String outputFilePath)","33","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","Minor Modification","Output the date in the log at start, end and on progress updates for simple profiling
","712fa1e7d6be56279d1951a29574601512debe62","Nick Bradley"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","always write semantic diff files, even if baseline and shovel don't differ
","d8bae4c8a940696b4bc5740b7a1905991fcaa195","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Added exception handling to ShovelExecution
","c5db40141eeb08ee0ca05c5bfd9f06d3839e7f89","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","hardcoded only baseline temporarily
","6762dc056533f29b954abe2e9c4fc79bfc732753","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"850","printMiningEnd","private static void printMiningEnd(StartEnvironment startEnv)","33","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","Minor Modification","Output the date in the log at start, end and on progress updates for simple profiling
","712fa1e7d6be56279d1951a29574601512debe62","Nick Bradley"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","always write semantic diff files, even if baseline and shovel don't differ
","d8bae4c8a940696b4bc5740b7a1905991fcaa195","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Added exception handling to ShovelExecution
","c5db40141eeb08ee0ca05c5bfd9f06d3839e7f89","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","hardcoded only baseline temporarily
","6762dc056533f29b954abe2e9c4fc79bfc732753","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"851","printMiningStart","private static void printMiningStart(StartEnvironment startEnv)","33","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Moved tasks to own package and fixed git diff issue
","56f99c131fff3656b8d14f81d10da08c8488be24","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","implemented baseline switch feature
","46dcba42687092d6806a4df3b6f12bde1313849a","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Now creating semantic diff files for both git log and custom baselines
","c2d54670c9da7364b6fbdf10f612a47ee2a38245","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","finished other checkstyle examples
","03fdd162e069a13321bef3f40244227a1874df08","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Fixed heap space issue in mining executions
","640af9b185af89ea568d3201f9f7a932c457f694","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","Signature Change, Body Change","Logging more information and nicer
","b7e3f858c6866154fb3b947dd3ecf7424179d1d6","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","Body Change","Output the date in the log at start, end and on progress updates for simple profiling
","712fa1e7d6be56279d1951a29574601512debe62","Nick Bradley"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","always write semantic diff files, even if baseline and shovel don't differ
","d8bae4c8a940696b4bc5740b7a1905991fcaa195","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Further bugfixing during empirical analysis. Checkstyle and Flink stubs work now.
","46ec72105cd8cb1803c14b3bb71576c8e5b5ca35","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Added exception handling to ShovelExecution
","c5db40141eeb08ee0ca05c5bfd9f06d3839e7f89","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Implemented automatic creation of stub files
","29c7cd5e5726b0c937ca6e07e4a298b9f48de8a6","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Implemented GlobalEnv so we have all System.getenv calls in one place
Also cleaned up some stuff
","0444c8a61614b88232efcab4f3fc5e2298deb509","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","added only baseline implementation
","8fbac0bdd46accd745efe6e6d2b0a871b14a1f87","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","hardcoded only baseline temporarily
","6762dc056533f29b954abe2e9c4fc79bfc732753","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","reverted only baseline code
","2a067cb942deffceeb9d43dd91f83ce65d098b1a","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Replaced log.info with log.trace
","fe05abbffc2546b01286bc54a4f5061eae821e52","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Next round of improvements and new stubs
","ce03ac53975f674f2e44b3204494da9fa5fd2884","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Finally all tests are passing
","8cc3323935a9e499a2097f0d6a20bb45559ad114","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","Body Change","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Heavy general refactoring with abstract vs non-abstract + first version of Ruby impl
","6bed7d970e50d4375c6bb48bfa88fbfe587f0642","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Now counting commits seen and time taken in output files
","2f53497b1425b37a0b62bd10b1e2d2b60f6c0457","Felix Grund"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","see #47 refactor from 'stubs' to 'oracles'.
update docs and code references consistently through the repo.
","5ce44987cfd47e007cecca2928f5dcee5abb232a","reid holmes"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Extend CodeShovel to capture method annotations (#51)

* Feature ataraxie/codeshovel#1: Add method annotation to JSON result
- Capture all kinds of annotations such as @Test, @Override, @SuppressWarnings etc.
See more: ataraxie/codeshovel#1

* Remove code written to test annotation feature ataraxie/codeshovel#1

* Add a stub function 'getMethodAnnotation' in PythonFunction.java","aac93a742efed017a2f6ebb4b8336e48ca89cbf9","Syed Ishtiaque Ahmad"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","Feature ataraxie/codeshovel#64: Extend CodeShovel to capture JavaDoc
- Add a json key `functionJavaDoc` which contains the java doc string
TODO: implement ""getInitialJavaDoc"" for python and typescript
- For python implement here: PythonFunction.java
- For typescript implement here: TypeScriptFunction.java
Discussion link: ataraxie/codeshovel#64
","3ce998ee71bc6d03693144ff445ba3140e92faf3","Syed Ishtiaque Ahmad"
"852","printProgress","private static void printProgress(int index, int numFilePaths)","33","-","feature ataraxie/codeshovel#64: Track doc changes (Ydocchange)
- Add a new change type Ydocchange which extends Ysignaturechange
- Rename everywhere reference of *javaDoc* -> Doc to keep things consistent with python
  and typescript implementation
TODO list:
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/PythonFunction.java`
- Implement `getInitialDoc` in `com/felixgrund/codeshovel/parser/impl/TypeScriptFunction.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/TypeScriptParser.java`
- Handle `Ydocchange` in `src/main/java/com/felixgrund/codeshovel/parser/impl/PythonParser.java`
- Get the diff for doc changes
","0d642ebe845f03457617461541d0cf32f18184b4","Syed Ishtiaque Ahmad"
"853","main","public static void main(String[] args) throws Exception","0","-","-","-","-"
"854","execute","private static void execute() throws Exception","0","-","-","-","-"
"855","main","public static void main(String[] args)","1","Body Change","README and some file renaming/moving
","affc36f170798edc90904c3d4d1a7bac14106a24","Felix Grund"
"856","newOption","private static Option newOption(String name, boolean hasArg, String desc, boolean required)","1","-","README and some file renaming/moving
","affc36f170798edc90904c3d4d1a7bac14106a24","Felix Grund"
"857","CachingRepositoryService","public CachingRepositoryService(Git git, Repository repository, String repositoryName, String repositoryPath)","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"857","CachingRepositoryService","public CachingRepositoryService(Git git, Repository repository, String repositoryName, String repositoryPath)","12","Body Change","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"857","CachingRepositoryService","public CachingRepositoryService(Git git, Repository repository, String repositoryName, String repositoryPath)","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"857","CachingRepositoryService","public CachingRepositoryService(Git git, Repository repository, String repositoryName, String repositoryPath)","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"857","CachingRepositoryService","public CachingRepositoryService(Git git, Repository repository, String repositoryName, String repositoryPath)","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"857","CachingRepositoryService","public CachingRepositoryService(Git git, Repository repository, String repositoryName, String repositoryPath)","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"857","CachingRepositoryService","public CachingRepositoryService(Git git, Repository repository, String repositoryName, String repositoryPath)","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"857","CachingRepositoryService","public CachingRepositoryService(Git git, Repository repository, String repositoryName, String repositoryPath)","12","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"857","CachingRepositoryService","public CachingRepositoryService(Git git, Repository repository, String repositoryName, String repositoryPath)","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"857","CachingRepositoryService","public CachingRepositoryService(Git git, Repository repository, String repositoryName, String repositoryPath)","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"857","CachingRepositoryService","public CachingRepositoryService(Git git, Repository repository, String repositoryName, String repositoryPath)","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"857","CachingRepositoryService","public CachingRepositoryService(Git git, Repository repository, String repositoryName, String repositoryPath)","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"858","getGit","@Override public Git getGit()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"858","getGit","@Override public Git getGit()","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"858","getGit","@Override public Git getGit()","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"858","getGit","@Override public Git getGit()","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"858","getGit","@Override public Git getGit()","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"858","getGit","@Override public Git getGit()","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"858","getGit","@Override public Git getGit()","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"858","getGit","@Override public Git getGit()","12","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"858","getGit","@Override public Git getGit()","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"858","getGit","@Override public Git getGit()","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"858","getGit","@Override public Git getGit()","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"858","getGit","@Override public Git getGit()","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"859","getRepository","@Override public Repository getRepository()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"859","getRepository","@Override public Repository getRepository()","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"859","getRepository","@Override public Repository getRepository()","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"859","getRepository","@Override public Repository getRepository()","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"859","getRepository","@Override public Repository getRepository()","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"859","getRepository","@Override public Repository getRepository()","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"859","getRepository","@Override public Repository getRepository()","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"859","getRepository","@Override public Repository getRepository()","12","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"859","getRepository","@Override public Repository getRepository()","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"859","getRepository","@Override public Repository getRepository()","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"859","getRepository","@Override public Repository getRepository()","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"859","getRepository","@Override public Repository getRepository()","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"860","getRepositoryName","@Override public String getRepositoryName()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"860","getRepositoryName","@Override public String getRepositoryName()","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"860","getRepositoryName","@Override public String getRepositoryName()","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"860","getRepositoryName","@Override public String getRepositoryName()","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"860","getRepositoryName","@Override public String getRepositoryName()","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"860","getRepositoryName","@Override public String getRepositoryName()","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"860","getRepositoryName","@Override public String getRepositoryName()","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"860","getRepositoryName","@Override public String getRepositoryName()","12","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"860","getRepositoryName","@Override public String getRepositoryName()","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"860","getRepositoryName","@Override public String getRepositoryName()","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"860","getRepositoryName","@Override public String getRepositoryName()","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"860","getRepositoryName","@Override public String getRepositoryName()","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"861","getRepositoryPath","@Override public String getRepositoryPath()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"861","getRepositoryPath","@Override public String getRepositoryPath()","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"861","getRepositoryPath","@Override public String getRepositoryPath()","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"861","getRepositoryPath","@Override public String getRepositoryPath()","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"861","getRepositoryPath","@Override public String getRepositoryPath()","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"861","getRepositoryPath","@Override public String getRepositoryPath()","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"861","getRepositoryPath","@Override public String getRepositoryPath()","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"861","getRepositoryPath","@Override public String getRepositoryPath()","12","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"861","getRepositoryPath","@Override public String getRepositoryPath()","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"861","getRepositoryPath","@Override public String getRepositoryPath()","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"861","getRepositoryPath","@Override public String getRepositoryPath()","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"861","getRepositoryPath","@Override public String getRepositoryPath()","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"862","getCommitsBetween","@Override public List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath)","12","Minor Modification","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"862","getCommitsBetween","@Override public List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath)","12","Body Change","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"862","getCommitsBetween","@Override public List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath)","12","Parameter Change, Signature Change, Body Change, Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"862","getCommitsBetween","@Override public List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath)","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"862","getCommitsBetween","@Override public List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath)","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"862","getCommitsBetween","@Override public List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath)","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"862","getCommitsBetween","@Override public List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath)","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"862","getCommitsBetween","@Override public List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath)","12","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"862","getCommitsBetween","@Override public List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath)","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"862","getCommitsBetween","@Override public List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath)","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"862","getCommitsBetween","@Override public List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath)","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"862","getCommitsBetween","@Override public List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath)","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"863","getCacheKey","private String getCacheKey(Commit startCommit, String filePath)","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"863","getCacheKey","private String getCacheKey(Commit startCommit, String filePath)","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"863","getCacheKey","private String getCacheKey(Commit startCommit, String filePath)","12","Parameter Change, Signature Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"863","getCacheKey","private String getCacheKey(Commit startCommit, String filePath)","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"863","getCacheKey","private String getCacheKey(Commit startCommit, String filePath)","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"863","getCacheKey","private String getCacheKey(Commit startCommit, String filePath)","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"863","getCacheKey","private String getCacheKey(Commit startCommit, String filePath)","12","Parameter Change","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"863","getCacheKey","private String getCacheKey(Commit startCommit, String filePath)","12","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"863","getCacheKey","private String getCacheKey(Commit startCommit, String filePath)","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"863","getCacheKey","private String getCacheKey(Commit startCommit, String filePath)","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"863","getCacheKey","private String getCacheKey(Commit startCommit, String filePath)","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"863","getCacheKey","private String getCacheKey(Commit startCommit, String filePath)","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"864","getHistory","@Override public Yhistory getHistory(Commit startCommit, String filePath)","12","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"864","getHistory","@Override public Yhistory getHistory(Commit startCommit, String filePath)","12","Signature Change, Body Change, Return Type Change","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"864","getHistory","@Override public Yhistory getHistory(Commit startCommit, String filePath)","12","Parameter Change, Signature Change, Body Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"864","getHistory","@Override public Yhistory getHistory(Commit startCommit, String filePath)","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"864","getHistory","@Override public Yhistory getHistory(Commit startCommit, String filePath)","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"864","getHistory","@Override public Yhistory getHistory(Commit startCommit, String filePath)","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"864","getHistory","@Override public Yhistory getHistory(Commit startCommit, String filePath)","12","Parameter Change","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"864","getHistory","@Override public Yhistory getHistory(Commit startCommit, String filePath)","12","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"864","getHistory","@Override public Yhistory getHistory(Commit startCommit, String filePath)","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"864","getHistory","@Override public Yhistory getHistory(Commit startCommit, String filePath)","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"864","getHistory","@Override public Yhistory getHistory(Commit startCommit, String filePath)","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"864","getHistory","@Override public Yhistory getHistory(Commit startCommit, String filePath)","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"865","findFileContent","@Override public String findFileContent(Commit commit, String filePath) throws IOException","12","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"865","findFileContent","@Override public String findFileContent(Commit commit, String filePath) throws IOException","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"865","findFileContent","@Override public String findFileContent(Commit commit, String filePath) throws IOException","12","Parameter Change, Signature Change, Body Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"865","findFileContent","@Override public String findFileContent(Commit commit, String filePath) throws IOException","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"865","findFileContent","@Override public String findFileContent(Commit commit, String filePath) throws IOException","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"865","findFileContent","@Override public String findFileContent(Commit commit, String filePath) throws IOException","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"865","findFileContent","@Override public String findFileContent(Commit commit, String filePath) throws IOException","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"865","findFileContent","@Override public String findFileContent(Commit commit, String filePath) throws IOException","12","Body Change","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"865","findFileContent","@Override public String findFileContent(Commit commit, String filePath) throws IOException","12","Minor Modification","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"865","findFileContent","@Override public String findFileContent(Commit commit, String filePath) throws IOException","12","Minor Modification","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"865","findFileContent","@Override public String findFileContent(Commit commit, String filePath) throws IOException","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"865","findFileContent","@Override public String findFileContent(Commit commit, String filePath) throws IOException","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"866","handleCacheHits","private void handleCacheHits()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"866","handleCacheHits","private void handleCacheHits()","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"866","handleCacheHits","private void handleCacheHits()","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"866","handleCacheHits","private void handleCacheHits()","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"866","handleCacheHits","private void handleCacheHits()","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"866","handleCacheHits","private void handleCacheHits()","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"866","handleCacheHits","private void handleCacheHits()","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"866","handleCacheHits","private void handleCacheHits()","12","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"866","handleCacheHits","private void handleCacheHits()","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"866","handleCacheHits","private void handleCacheHits()","12","Signature Change, Body Change","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"866","handleCacheHits","private void handleCacheHits()","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"866","handleCacheHits","private void handleCacheHits()","12","Body Change","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"867","handleCacheAdd","private void handleCacheAdd(Map cache, LinkedList<String> cacheKeys, String cacheKey, Object value, int maxSize)","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"867","handleCacheAdd","private void handleCacheAdd(Map cache, LinkedList<String> cacheKeys, String cacheKey, Object value, int maxSize)","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"867","handleCacheAdd","private void handleCacheAdd(Map cache, LinkedList<String> cacheKeys, String cacheKey, Object value, int maxSize)","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"867","handleCacheAdd","private void handleCacheAdd(Map cache, LinkedList<String> cacheKeys, String cacheKey, Object value, int maxSize)","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"867","handleCacheAdd","private void handleCacheAdd(Map cache, LinkedList<String> cacheKeys, String cacheKey, Object value, int maxSize)","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"867","handleCacheAdd","private void handleCacheAdd(Map cache, LinkedList<String> cacheKeys, String cacheKey, Object value, int maxSize)","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"867","handleCacheAdd","private void handleCacheAdd(Map cache, LinkedList<String> cacheKeys, String cacheKey, Object value, int maxSize)","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"867","handleCacheAdd","private void handleCacheAdd(Map cache, LinkedList<String> cacheKeys, String cacheKey, Object value, int maxSize)","12","Signature Change, Body Change","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"867","handleCacheAdd","private void handleCacheAdd(Map cache, LinkedList<String> cacheKeys, String cacheKey, Object value, int maxSize)","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"867","handleCacheAdd","private void handleCacheAdd(Map cache, LinkedList<String> cacheKeys, String cacheKey, Object value, int maxSize)","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"867","handleCacheAdd","private void handleCacheAdd(Map cache, LinkedList<String> cacheKeys, String cacheKey, Object value, int maxSize)","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"867","handleCacheAdd","private void handleCacheAdd(Map cache, LinkedList<String> cacheKeys, String cacheKey, Object value, int maxSize)","12","Body Change","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"868","findFilesByExtension","@Override public List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception","12","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"868","findFilesByExtension","@Override public List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"868","findFilesByExtension","@Override public List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception","12","Parameter Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"868","findFilesByExtension","@Override public List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"868","findFilesByExtension","@Override public List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"868","findFilesByExtension","@Override public List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"868","findFilesByExtension","@Override public List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"868","findFilesByExtension","@Override public List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception","12","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"868","findFilesByExtension","@Override public List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"868","findFilesByExtension","@Override public List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"868","findFilesByExtension","@Override public List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"868","findFilesByExtension","@Override public List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"869","getFileContentByObjectId","@Override public String getFileContentByObjectId(ObjectId objectId) throws IOException","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"869","getFileContentByObjectId","@Override public String getFileContentByObjectId(ObjectId objectId) throws IOException","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"869","getFileContentByObjectId","@Override public String getFileContentByObjectId(ObjectId objectId) throws IOException","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"869","getFileContentByObjectId","@Override public String getFileContentByObjectId(ObjectId objectId) throws IOException","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"869","getFileContentByObjectId","@Override public String getFileContentByObjectId(ObjectId objectId) throws IOException","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"869","getFileContentByObjectId","@Override public String getFileContentByObjectId(ObjectId objectId) throws IOException","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"869","getFileContentByObjectId","@Override public String getFileContentByObjectId(ObjectId objectId) throws IOException","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"869","getFileContentByObjectId","@Override public String getFileContentByObjectId(ObjectId objectId) throws IOException","12","Body Change","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"869","getFileContentByObjectId","@Override public String getFileContentByObjectId(ObjectId objectId) throws IOException","12","Minor Modification","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"869","getFileContentByObjectId","@Override public String getFileContentByObjectId(ObjectId objectId) throws IOException","12","Minor Modification","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"869","getFileContentByObjectId","@Override public String getFileContentByObjectId(ObjectId objectId) throws IOException","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"869","getFileContentByObjectId","@Override public String getFileContentByObjectId(ObjectId objectId) throws IOException","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"870","write","@Override public void write(int b)","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"870","write","@Override public void write(int b)","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"870","write","@Override public void write(int b)","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"870","write","@Override public void write(int b)","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"870","write","@Override public void write(int b)","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"870","write","@Override public void write(int b)","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"870","write","@Override public void write(int b)","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"870","write","@Override public void write(int b)","12","Minor Modification","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"870","write","@Override public void write(int b)","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"870","write","@Override public void write(int b)","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"870","write","@Override public void write(int b)","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"870","write","@Override public void write(int b)","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"871","toString","public String toString()","12","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"871","toString","public String toString()","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"871","toString","public String toString()","12","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"871","toString","public String toString()","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"871","toString","public String toString()","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"871","toString","public String toString()","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"871","toString","public String toString()","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"871","toString","public String toString()","12","Minor Modification","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"871","toString","public String toString()","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"871","toString","public String toString()","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"871","toString","public String toString()","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"871","toString","public String toString()","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"872","getPrevCommitNeglectingFile","@Override public Commit getPrevCommitNeglectingFile(Commit commit) throws IOException","12","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"872","getPrevCommitNeglectingFile","@Override public Commit getPrevCommitNeglectingFile(Commit commit) throws IOException","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"872","getPrevCommitNeglectingFile","@Override public Commit getPrevCommitNeglectingFile(Commit commit) throws IOException","12","Parameter Change, Signature Change, Body Change, Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"872","getPrevCommitNeglectingFile","@Override public Commit getPrevCommitNeglectingFile(Commit commit) throws IOException","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"872","getPrevCommitNeglectingFile","@Override public Commit getPrevCommitNeglectingFile(Commit commit) throws IOException","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"872","getPrevCommitNeglectingFile","@Override public Commit getPrevCommitNeglectingFile(Commit commit) throws IOException","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"872","getPrevCommitNeglectingFile","@Override public Commit getPrevCommitNeglectingFile(Commit commit) throws IOException","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"872","getPrevCommitNeglectingFile","@Override public Commit getPrevCommitNeglectingFile(Commit commit) throws IOException","12","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"872","getPrevCommitNeglectingFile","@Override public Commit getPrevCommitNeglectingFile(Commit commit) throws IOException","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"872","getPrevCommitNeglectingFile","@Override public Commit getPrevCommitNeglectingFile(Commit commit) throws IOException","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"872","getPrevCommitNeglectingFile","@Override public Commit getPrevCommitNeglectingFile(Commit commit) throws IOException","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"872","getPrevCommitNeglectingFile","@Override public Commit getPrevCommitNeglectingFile(Commit commit) throws IOException","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"873","gitLogRange","@Override public List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception","12","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"873","gitLogRange","@Override public List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"873","gitLogRange","@Override public List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception","12","Body Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"873","gitLogRange","@Override public List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"873","gitLogRange","@Override public List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"873","gitLogRange","@Override public List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"873","gitLogRange","@Override public List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"873","gitLogRange","@Override public List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception","12","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"873","gitLogRange","@Override public List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"873","gitLogRange","@Override public List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"873","gitLogRange","@Override public List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"873","gitLogRange","@Override public List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"874","findCommitByName","@Override public Commit findCommitByName(String commitName) throws IOException","12","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"874","findCommitByName","@Override public Commit findCommitByName(String commitName) throws IOException","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"874","findCommitByName","@Override public Commit findCommitByName(String commitName) throws IOException","12","Signature Change, Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"874","findCommitByName","@Override public Commit findCommitByName(String commitName) throws IOException","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"874","findCommitByName","@Override public Commit findCommitByName(String commitName) throws IOException","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"874","findCommitByName","@Override public Commit findCommitByName(String commitName) throws IOException","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"874","findCommitByName","@Override public Commit findCommitByName(String commitName) throws IOException","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"874","findCommitByName","@Override public Commit findCommitByName(String commitName) throws IOException","12","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"874","findCommitByName","@Override public Commit findCommitByName(String commitName) throws IOException","12","-","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"874","findCommitByName","@Override public Commit findCommitByName(String commitName) throws IOException","12","-","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"874","findCommitByName","@Override public Commit findCommitByName(String commitName) throws IOException","12","Body Change","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"874","findCommitByName","@Override public Commit findCommitByName(String commitName) throws IOException","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"875","findRevCommitById","@Override public RevCommit findRevCommitById(ObjectId id) throws IOException","12","Annotation Change, Signature Change, Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"875","findRevCommitById","@Override public RevCommit findRevCommitById(ObjectId id) throws IOException","12","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"875","findRevCommitById","@Override public RevCommit findRevCommitById(ObjectId id) throws IOException","12","Signature Change, Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"875","findRevCommitById","@Override public RevCommit findRevCommitById(ObjectId id) throws IOException","12","-","Use jetbrains Nullable annotation since maven wouldn't compile with com.sun.istack.internal. See https://stackoverflow.com/a/50427240.
","6d192c80c64f917fc498fd700f74ffafabea28c7","Nick Bradley"
"875","findRevCommitById","@Override public RevCommit findRevCommitById(ObjectId id) throws IOException","12","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"875","findRevCommitById","@Override public RevCommit findRevCommitById(ObjectId id) throws IOException","12","-","Removed unused imports; Test configs
","046db2a64df8909751d3676c3595ba2ca62b67aa","Felix Grund"
"875","findRevCommitById","@Override public RevCommit findRevCommitById(ObjectId id) throws IOException","12","-","Remove @Nullable annotation
","a4544092ea97ab392b4d1e74be65e6d2f982ed99","Nick Bradley"
"875","findRevCommitById","@Override public RevCommit findRevCommitById(ObjectId id) throws IOException","12","Body Change","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"875","findRevCommitById","@Override public RevCommit findRevCommitById(ObjectId id) throws IOException","12","Minor Modification","Better time taken logging
","d789bdda56975d7af5d2f0c56db274f3d4834253","Felix Grund"
"875","findRevCommitById","@Override public RevCommit findRevCommitById(ObjectId id) throws IOException","12","Minor Modification","Better cache logging
","d8e6e03014f9117917ecc10c8bf6ffd50ce9049b","Felix Grund"
"875","findRevCommitById","@Override public RevCommit findRevCommitById(ObjectId id) throws IOException","12","-","Major progress implementing CLI
","d87344c9bc233398909967e3e2ed5a91ecaa05c4","Felix Grund"
"875","findRevCommitById","@Override public RevCommit findRevCommitById(ObjectId id) throws IOException","12","-","see #47 make it so envnames and skipnames behave the same (aka can take a list of includes/skips). rename ENV_NAME to ENV_NAMES. Simplify the include/exclude logic in maindynamic test.

More controversially: removed the caching size checks from the CachingRepositoryService. Right now this doesn't seem to matter (runs the whole test suite fine). Might have to revisit if it's a problem in the deployed docker container. Mainly motivated to do this due to the JVM warnings about carrotsearch.sizeof.RamUsageEstimator on every execution.
","84d533e032bf4c17e114f06e950f674b724c9cde","Reid Holmes"
"876","getRepository","Repository getRepository();","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"876","getRepository","Repository getRepository();","4","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"876","getRepository","Repository getRepository();","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"876","getRepository","Repository getRepository();","4","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"877","getRepositoryName","String getRepositoryName();","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"877","getRepositoryName","String getRepositoryName();","4","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"877","getRepositoryName","String getRepositoryName();","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"877","getRepositoryName","String getRepositoryName();","4","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"878","getRepositoryPath","String getRepositoryPath();","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"878","getRepositoryPath","String getRepositoryPath();","4","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"878","getRepositoryPath","String getRepositoryPath();","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"878","getRepositoryPath","String getRepositoryPath();","4","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"879","getGit","Git getGit();","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"879","getGit","Git getGit();","4","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"879","getGit","Git getGit();","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"879","getGit","Git getGit();","4","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"880","getCommitsBetween","List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath);","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"880","getCommitsBetween","List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath);","4","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"880","getCommitsBetween","List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath);","4","Parameter Change, Signature Change, Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"880","getCommitsBetween","List<Commit> getCommitsBetween(Commit oldCommit, Commit newCommit, String filePath);","4","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"881","getHistory","Yhistory getHistory(Commit startCommit, String filePath);","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"881","getHistory","Yhistory getHistory(Commit startCommit, String filePath);","4","Signature Change, Return Type Change","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"881","getHistory","Yhistory getHistory(Commit startCommit, String filePath);","4","Parameter Change, Signature Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"881","getHistory","Yhistory getHistory(Commit startCommit, String filePath);","4","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"882","findFileContent","String findFileContent(Commit commit, String filePath) throws IOException;","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"882","findFileContent","String findFileContent(Commit commit, String filePath) throws IOException;","4","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"882","findFileContent","String findFileContent(Commit commit, String filePath) throws IOException;","4","Parameter Change, Signature Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"882","findFileContent","String findFileContent(Commit commit, String filePath) throws IOException;","4","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"883","findFilesByExtension","List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception;","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"883","findFilesByExtension","List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception;","4","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"883","findFilesByExtension","List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception;","4","Parameter Change, Signature Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"883","findFilesByExtension","List<String> findFilesByExtension(Commit commit, String fileExtension) throws Exception;","4","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"884","getFileContentByObjectId","String getFileContentByObjectId(ObjectId objectId) throws IOException;","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"884","getFileContentByObjectId","String getFileContentByObjectId(ObjectId objectId) throws IOException;","4","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"884","getFileContentByObjectId","String getFileContentByObjectId(ObjectId objectId) throws IOException;","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"884","getFileContentByObjectId","String getFileContentByObjectId(ObjectId objectId) throws IOException;","4","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"885","findCommitByName","Commit findCommitByName(String commitName) throws IOException;","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"885","findCommitByName","Commit findCommitByName(String commitName) throws IOException;","4","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"885","findCommitByName","Commit findCommitByName(String commitName) throws IOException;","4","Signature Change, Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"885","findCommitByName","Commit findCommitByName(String commitName) throws IOException;","4","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"886","getPrevCommitNeglectingFile","Commit getPrevCommitNeglectingFile(Commit commit) throws IOException;","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"886","getPrevCommitNeglectingFile","Commit getPrevCommitNeglectingFile(Commit commit) throws IOException;","4","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"886","getPrevCommitNeglectingFile","Commit getPrevCommitNeglectingFile(Commit commit) throws IOException;","4","Parameter Change, Signature Change, Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"886","getPrevCommitNeglectingFile","Commit getPrevCommitNeglectingFile(Commit commit) throws IOException;","4","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"887","gitLogRange","List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception;","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"887","gitLogRange","List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception;","4","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"887","gitLogRange","List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception;","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"887","gitLogRange","List<String> gitLogRange(String startCommitName, int rangeStart, int rangeEnd, String filePath) throws Exception;","4","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"888","findRevCommitById","RevCommit findRevCommitById(ObjectId id) throws IOException;","4","Signature Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"888","findRevCommitById","RevCommit findRevCommitById(ObjectId id) throws IOException;","4","-","at least partly working now
","c82ee19317d96fc0605491aa313ab67204d2dfe3","Felix Grund"
"888","findRevCommitById","RevCommit findRevCommitById(ObjectId id) throws IOException;","4","Signature Change, Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"888","findRevCommitById","RevCommit findRevCommitById(ObjectId id) throws IOException;","4","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"889","Ymodifiers","public Ymodifiers(List<String> modifiers)","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"890","equals","@Override public boolean equals(Object obj)","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"891","getModifiers","public List<String> getModifiers()","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"892","toString","@Override public String toString()","1","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"893","Yparameter","public Yparameter(String name, String type)","5","Body Change","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"893","Yparameter","public Yparameter(String name, String type)","5","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"893","Yparameter","public Yparameter(String name, String type)","5","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"893","Yparameter","public Yparameter(String name, String type)","5","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"893","Yparameter","public Yparameter(String name, String type)","5","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"894","getName","public String getName()","5","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"894","getName","public String getName()","5","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"894","getName","public String getName()","5","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"894","getName","public String getName()","5","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"894","getName","public String getName()","5","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"895","getType","public String getType()","5","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"895","getType","public String getType()","5","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"895","getType","public String getType()","5","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"895","getType","public String getType()","5","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"895","getType","public String getType()","5","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"896","setMetadata","public void setMetadata(Map<String, String> metadata)","5","Signature Change, Body Change","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"896","setMetadata","public void setMetadata(Map<String, String> metadata)","5","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"896","setMetadata","public void setMetadata(Map<String, String> metadata)","5","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"896","setMetadata","public void setMetadata(Map<String, String> metadata)","5","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"896","setMetadata","public void setMetadata(Map<String, String> metadata)","5","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"897","getMetadataString","public String getMetadataString()","5","Signature Change, Body Change","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"897","getMetadataString","public String getMetadataString()","5","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"897","getMetadataString","public String getMetadataString()","5","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"897","getMetadataString","public String getMetadataString()","5","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"897","getMetadataString","public String getMetadataString()","5","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"898","equals","@Override public boolean equals(Object obj)","5","Body Change","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"898","equals","@Override public boolean equals(Object obj)","5","Body Change","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"898","equals","@Override public boolean equals(Object obj)","5","Body Change","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"898","equals","@Override public boolean equals(Object obj)","5","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"898","equals","@Override public boolean equals(Object obj)","5","-","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"899","getNameTypeString","public String getNameTypeString()","5","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"899","getNameTypeString","public String getNameTypeString()","5","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"899","getNameTypeString","public String getNameTypeString()","5","-","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"899","getNameTypeString","public String getNameTypeString()","5","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"899","getNameTypeString","public String getNameTypeString()","5","Signature Change, Body Change","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"900","toString","@Override public String toString()","5","-","Parameters now include metadata (e.g. annotations, modifiers)
","193d7b395b23e9ff465ceb072c7233516fa72192","Felix Grund"
"900","toString","@Override public String toString()","5","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"900","toString","@Override public String toString()","5","Annotation Change, Signature Change, Body Change","finally got meta changes to work fully as it seems
","96e612d8461035097f815f902f98260fb68e693d","Felix Grund"
"900","toString","@Override public String toString()","5","Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"900","toString","@Override public String toString()","5","Body Change","Better JSON printing in output
","2cb9eabfdc6ed9e740d4999550d71a0792a2bc77","Felix Grund"
"901","Yhistory","public Yhistory(LinkedHashMap<String, Commit> commits, LinkedHashMap<String, RevCommit> revCommits)","0","-","-","-","-"
"902","getCommits","public LinkedHashMap<String, Commit> getCommits()","0","-","-","-","-"
"903","getRevCommits","public LinkedHashMap<String, RevCommit> getRevCommits()","0","-","-","-","-"
"904","Ydiff","public Ydiff(RepositoryService repositoryService, Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","Parameter Change, Signature Change, Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"904","Ydiff","public Ydiff(RepositoryService repositoryService, Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","Parameter Change, Signature Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"904","Ydiff","public Ydiff(RepositoryService repositoryService, Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"904","Ydiff","public Ydiff(RepositoryService repositoryService, Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","-","fixed issues for junit5
","2f1c3ca428a57c215e17fa5387382f392f236b08","Felix Grund"
"904","Ydiff","public Ydiff(RepositoryService repositoryService, Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"904","Ydiff","public Ydiff(RepositoryService repositoryService, Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"904","Ydiff","public Ydiff(RepositoryService repositoryService, Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"904","Ydiff","public Ydiff(RepositoryService repositoryService, Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"905","init","private void init(Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","Parameter Change, Signature Change, Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"905","init","private void init(Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","Parameter Change, Signature Change, Body Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"905","init","private void init(Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"905","init","private void init(Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","-","fixed issues for junit5
","2f1c3ca428a57c215e17fa5387382f392f236b08","Felix Grund"
"905","init","private void init(Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","Body Change","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"905","init","private void init(Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"905","init","private void init(Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"905","init","private void init(Commit commit, Commit prevCommit, boolean detectRenames) throws IOException","8","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"906","getSingleEditList","public EditList getSingleEditList(String filePathEndsWith)","8","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"906","getSingleEditList","public EditList getSingleEditList(String filePathEndsWith)","8","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"906","getSingleEditList","public EditList getSingleEditList(String filePathEndsWith)","8","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"906","getSingleEditList","public EditList getSingleEditList(String filePathEndsWith)","8","-","fixed issues for junit5
","2f1c3ca428a57c215e17fa5387382f392f236b08","Felix Grund"
"906","getSingleEditList","public EditList getSingleEditList(String filePathEndsWith)","8","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"906","getSingleEditList","public EditList getSingleEditList(String filePathEndsWith)","8","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"906","getSingleEditList","public EditList getSingleEditList(String filePathEndsWith)","8","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"906","getSingleEditList","public EditList getSingleEditList(String filePathEndsWith)","8","Minor Modification","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"907","getDiff","public Map<String, DiffEntry> getDiff()","8","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"907","getDiff","public Map<String, DiffEntry> getDiff()","8","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"907","getDiff","public Map<String, DiffEntry> getDiff()","8","-","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"907","getDiff","public Map<String, DiffEntry> getDiff()","8","-","fixed issues for junit5
","2f1c3ca428a57c215e17fa5387382f392f236b08","Felix Grund"
"907","getDiff","public Map<String, DiffEntry> getDiff()","8","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"907","getDiff","public Map<String, DiffEntry> getDiff()","8","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"907","getDiff","public Map<String, DiffEntry> getDiff()","8","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"907","getDiff","public Map<String, DiffEntry> getDiff()","8","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"908","getPathMapping","public Map<String, String> getPathMapping()","8","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"908","getPathMapping","public Map<String, String> getPathMapping()","8","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"908","getPathMapping","public Map<String, String> getPathMapping()","8","Signature Change, Body Change","Different bugfixes and improvements during empirical analysis
","476b403d1c73c8e4d37d82e21b72d2a3d2383f65","Felix Grund"
"908","getPathMapping","public Map<String, String> getPathMapping()","8","-","fixed issues for junit5
","2f1c3ca428a57c215e17fa5387382f392f236b08","Felix Grund"
"908","getPathMapping","public Map<String, String> getPathMapping()","8","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"908","getPathMapping","public Map<String, String> getPathMapping()","8","-","Fixed issue with parent scope check
","c1d26d3f6b54f162a4c4beac8043e4205812e8f6","Felix Grund"
"908","getPathMapping","public Map<String, String> getPathMapping()","8","-","Caching for expensive methods
","3817554bb0129ae267a3315bf9235f500306daab","Felix Grund"
"908","getPathMapping","public Map<String, String> getPathMapping()","8","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"909","Yexceptions","public Yexceptions(List<String> exceptions)","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"910","equals","@Override public boolean equals(Object obj)","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"911","getExceptions","public List<String> getExceptions()","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"912","toString","@Override public String toString()","1","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"913","put","@Override public Ychange put(String commitName, Ychange change)","4","Annotation Change, Signature Change, Body Change","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"913","put","@Override public Ychange put(String commitName, Ychange change)","4","Body Change","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"913","put","@Override public Ychange put(String commitName, Ychange change)","4","Parameter Change, Signature Change, Body Change","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"913","put","@Override public Ychange put(String commitName, Ychange change)","4","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"914","toString","@Override public String toString()","4","Annotation Change, Signature Change, Body Change","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"914","toString","@Override public String toString()","4","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"914","toString","@Override public String toString()","4","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"914","toString","@Override public String toString()","4","-","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"915","toJson","public String toJson()","4","-","Performance improvements (static ast cache), env variable renames, result logging, etc.
","d58bb9f19ffe870b6a3a9c30a359f565b1a71ff4","Felix Grund"
"915","toJson","public String toJson()","4","-","make junit tests work
","fdbec3db356a3f057bd11c59850388cd7342ff75","Felix Grund"
"915","toJson","public String toJson()","4","-","Yresult now has strings as keys
","8962f1dc10374d30e2bec50d3223c74233f4976a","Felix Grund"
"915","toJson","public String toJson()","4","Signature Change, Body Change","Webservice support (#18)

* Add Yresult::toJson()

* Update JavaParser.java

* Update JsParser.java

* Added diff to Yintroduced

* Delete .DS_Store

* Replace stacktrace printing with proper log warnings
","e988c879995c57a972b57d51f61045ee2c6a2dd8","Braxton Hall"
"916","Yreturn","public Yreturn(String type)","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"917","equals","@Override public boolean equals(Object obj)","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"918","getType","public String getType()","1","-","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"919","toString","@Override public String toString()","1","Annotation Change, Signature Change, Body Change","Added json returns for different change types
","c4f895269ef2fe2db7261ac414f6239909c0b2c4","Felix Grund"
"920","Ycommit","public Ycommit()","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"920","Ycommit","public Ycommit()","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"920","Ycommit","public Ycommit()","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"920","Ycommit","public Ycommit()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"921","Ycommit","public Ycommit(Commit commit)","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"921","Ycommit","public Ycommit(Commit commit)","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"921","Ycommit","public Ycommit(Commit commit)","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"921","Ycommit","public Ycommit(Commit commit)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"922","getCommit","public Commit getCommit()","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"922","getCommit","public Commit getCommit()","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"922","getCommit","public Commit getCommit()","4","Signature Change, Return Type Change","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"922","getCommit","public Commit getCommit()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"923","getMatchedFunction","public Yfunction getMatchedFunction()","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"923","getMatchedFunction","public Yfunction getMatchedFunction()","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"923","getMatchedFunction","public Yfunction getMatchedFunction()","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"923","getMatchedFunction","public Yfunction getMatchedFunction()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"924","setMatchedFunction","public void setMatchedFunction(Yfunction matchedFunction)","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"924","setMatchedFunction","public void setMatchedFunction(Yfunction matchedFunction)","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"924","setMatchedFunction","public void setMatchedFunction(Yfunction matchedFunction)","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"924","setMatchedFunction","public void setMatchedFunction(Yfunction matchedFunction)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"925","getFileContent","public String getFileContent()","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"925","getFileContent","public String getFileContent()","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"925","getFileContent","public String getFileContent()","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"925","getFileContent","public String getFileContent()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"926","setFileContent","public void setFileContent(String fileContent)","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"926","setFileContent","public void setFileContent(String fileContent)","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"926","setFileContent","public void setFileContent(String fileContent)","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"926","setFileContent","public void setFileContent(String fileContent)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"927","setFileName","public void setFileName(String fileName)","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"927","setFileName","public void setFileName(String fileName)","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"927","setFileName","public void setFileName(String fileName)","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"927","setFileName","public void setFileName(String fileName)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"928","getFileName","public String getFileName()","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"928","getFileName","public String getFileName()","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"928","getFileName","public String getFileName()","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"928","getFileName","public String getFileName()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"929","getPrev","public Ycommit getPrev()","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"929","getPrev","public Ycommit getPrev()","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"929","getPrev","public Ycommit getPrev()","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"929","getPrev","public Ycommit getPrev()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"930","setPrev","public void setPrev(Ycommit prev)","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"930","setPrev","public void setPrev(Ycommit prev)","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"930","setPrev","public void setPrev(Ycommit prev)","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"930","setPrev","public void setPrev(Ycommit prev)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"931","getFilePath","public String getFilePath()","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"931","getFilePath","public String getFilePath()","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"931","getFilePath","public String getFilePath()","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"931","getFilePath","public String getFilePath()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"932","setFilePath","public void setFilePath(String filePath)","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"932","setFilePath","public void setFilePath(String filePath)","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"932","setFilePath","public void setFilePath(String filePath)","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"932","setFilePath","public void setFilePath(String filePath)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"933","getParser","public Yparser getParser()","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"933","getParser","public Yparser getParser()","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"933","getParser","public Yparser getParser()","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"933","getParser","public Yparser getParser()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"934","setParser","public void setParser(Yparser parser)","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"934","setParser","public void setParser(Yparser parser)","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"934","setParser","public void setParser(Yparser parser)","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"934","setParser","public void setParser(Yparser parser)","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"935","toString","public String toString()","4","Body Change","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"935","toString","public String toString()","4","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"935","toString","public String toString()","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"935","toString","public String toString()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"936","getName","public String getName()","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"936","getName","public String getName()","4","-","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"936","getName","public String getName()","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"936","getName","public String getName()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
"937","getShortName","public String getShortName()","4","-","Started frontend implementation
","102dbe06ed30e49facf5de1d4731c7bb2127944c","Felix Grund"
"937","getShortName","public String getShortName()","4","Body Change","work in progress trying to fix heap space
","5646fc7e193ae6438ea8f2c7738ade99fac06a94","Felix Grund"
"937","getShortName","public String getShortName()","4","-","major refactoring to not keep RevCommits in heap space
","728fa55d27626f9b3d63406626eba14cfac0dd0c","Felix Grund"
"937","getShortName","public String getShortName()","4","-","Performance improvements and memory leak fixing (still not perfect though)
","368deaf1cf33e520fe957c5141f0aad4a602b9e5","Felix Grund"
