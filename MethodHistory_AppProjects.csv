"Index","Method Name","Method Signature","Commit Count","Change Types","Commit Message","Commit ID","Commit Author"
"1","@Override
    public void onSuccess(List<Repo> repos) {
        Log.d(TAG, ""请求成功回调"");
        // 本地数据库缓存对象
        // 本地数据库插入返回值
        if (RepoBoundaryCallback.hasMore) {
            cache.insert(repos);
        }
        // 设置当前页 +1,注意这里设置静态值需要使用 类名.静态值
        // 否则使用new对象，然后调用对象的Setter方法是不管用的，
        // 会导致无法加载下一页
        // 另外，只有当请求的数量够数之后，才让页数 + 1，否则会漏查数据
        if (repos.size() == NETWORK_PAGE_SIZE ) {
            RepoBoundaryCallback.lastRequestedPage = RepoBoundaryCallback.lastRequestedPage + 1;
            Log.d(TAG, ""设置当前页 +1---"" + RepoBoundaryCallback.lastRequestedPage);
        }else{
            RepoBoundaryCallback.hasMore = false;
            Log.d(TAG, ""请求到的数量为："" + repos.size() + "" 不够："" + NETWORK_PAGE_SIZE + "" 没有递增下一页"");
        }
        RepoBoundaryCallback.isRequestInProgress = false;

    }","@Override
    public void onSuccess(List<Repo> repos)","1","Body Change","修复·Paging分页到达底部时疯狂触发请求的问题
","fbef3e6e7d7913906bd8b4925a27bec6577700bf","littlecurl"
"2","@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // 这一句话指定了可以去哪个布局文件中找id
        setContentView(R.layout.activity_main);

        //依靠DatabaseHelper的构造函数创建数据库
        DatabaseHelper dbHelper = new DatabaseHelper(MainActivity.this, ""test_db"", null, 1);
        db = dbHelper.getWritableDatabase();

        initView();
    }","@Override
    public void onCreate(Bundle savedInstanceState)","2","Body Change","迁移SQLiteTest依赖为androidx，更新gradle版本为最新版
","910d49073ab354736e12e6444977873c77f6e278","LittleCurl"
"3","@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // 这一句话指定了可以去哪个布局文件中找id
        setContentView(R.layout.activity_main);

        //依靠DatabaseHelper的构造函数创建数据库
        DatabaseHelper dbHelper = new DatabaseHelper(MainActivity.this, ""test_db"", null, 1);
        db = dbHelper.getWritableDatabase();

        initView();
    }","@Override
    public void onCreate(Bundle savedInstanceState)","2","Body Change","修改·新增实时编辑展示
","16c53a8e18547ff7f59dfa98bf97ab29a0a87790","LittleCurl"
"4","private void initView() {
        // 根据setContentView(R.layout.activity_main)方法指定的布局中的id初始化对象
        // 8个按钮
        Button btInsert = findViewById(R.id.bt_insert);
        Button btClearInsert = findViewById(R.id.bt_clear_insert);
        Button btUpdate = findViewById(R.id.bt_update);
        Button btClearUpdate = findViewById(R.id.bt_clear_update);
        Button btDelete = findViewById(R.id.bt_delete);
        Button btClearDelete = findViewById(R.id.bt_clear_delete);
        Button btQuery = findViewById(R.id.bt_query);
        Button btClearQueryResult = findViewById(R.id.bt_clear_query);

        // 5个输入框（4个输入框需要在下面的onClick()方法中用去获取输入的文本，所以在全局进行声明）

        final EditText etLive = findViewById(R.id.et_live);
        final TextView tvLiveResult = findViewById(R.id.tv_live_result);
        // 实时更新逻辑实现（和数据库操作没关系）
        etLive.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

            // 当检测到etLive中的文本改变时，就进行展示
            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                tvLiveResult.setText(etLive.getText());
            }

            @Override
            public void afterTextChanged(Editable s) {}
        });
        etInsert = findViewById(R.id.et_inset);
        etDelete = findViewById(R.id.et_delete);
        etBeforeUpdate = findViewById(R.id.et_before_update);
        etAfterUpdate = findViewById(R.id.et_after_update);

        // 1个查询结果展示文本
        tvQueryResult = findViewById(R.id.tv_query_result);

        // 为8个按钮对象设置监听器
        btInsert.setOnClickListener(this);
        btClearInsert.setOnClickListener(this);

        btUpdate.setOnClickListener(this);
        btClearUpdate.setOnClickListener(this);

        btDelete.setOnClickListener(this);
        btClearDelete.setOnClickListener(this);

        btQuery.setOnClickListener(this);
        btClearQueryResult.setOnClickListener(this);
    }","private void initView()","1","Signature Change, Body Change","修改·新增实时编辑展示
","16c53a8e18547ff7f59dfa98bf97ab29a0a87790","LittleCurl"
"5","@Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}","@Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after)","1","Annotation Change, Signature Change","修改·新增实时编辑展示
","16c53a8e18547ff7f59dfa98bf97ab29a0a87790","LittleCurl"
"6","@Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                tvLiveResult.setText(etLive.getText());
            }","@Override
            public void onTextChanged(CharSequence s, int start, int before, int count)","1","Annotation Change, Signature Change, Body Change","修改·新增实时编辑展示
","16c53a8e18547ff7f59dfa98bf97ab29a0a87790","LittleCurl"
"7","@Override
            public void afterTextChanged(Editable s) {}","@Override
            public void afterTextChanged(Editable s)","1","Annotation Change, Signature Change","修改·新增实时编辑展示
","16c53a8e18547ff7f59dfa98bf97ab29a0a87790","LittleCurl"
"8","@Override
    public void onClick(View v) {
        // 获取输入框的数据
        String insertData = etInsert.getText().toString();
        String deleteData = etDelete.getText().toString();
        String beforeUpdateData = etBeforeUpdate.getText().toString();
        String afterUpdateData = etAfterUpdate.getText().toString();

        //根据响应Click的按钮id进行选择操作
        switch (v.getId()) {
            //插入数据按钮
            case R.id.bt_insert:
                //创建存放数据的ContentValues对象
                ContentValues values = new ContentValues();
                values.put(""name"", insertData);
                //数据库执行插入命令
                db.insert(""user"", null, values);
                break;
            //插入数据按钮后面的清除按钮
            case R.id.bt_clear_insert:
                etInsert.setText("""");
                break;

            //删除数据按钮
            case R.id.bt_delete:
                db.delete(""user"", ""name=?"", new String[]{deleteData});
                break;
            //删除数据按钮后面的清除按钮
            case R.id.bt_clear_delete:
                etDelete.setText("""");
                break;

            //更新数据按钮
            case R.id.bt_update:
                ContentValues values2 = new ContentValues();
                values2.put(""name"", afterUpdateData);
                db.update(""user"", values2, ""name = ?"", new String[]{beforeUpdateData});
                break;
            //更新数据按钮后面的清除按钮
            case R.id.bt_clear_update:
                etBeforeUpdate.setText("""");
                etAfterUpdate.setText("""");
                break;

            //查询全部按钮
            case R.id.bt_query:
                //创建游标对象
                Cursor cursor = db.query(""user"", new String[]{""name""}, null, null, null, null, null);
                //利用游标遍历所有数据对象（for循环中，建议使用StringBuilder替代String）
                //为了显示全部，把所有对象连接起来，放到TextView中
                StringBuilder tvData = new StringBuilder();
                while (cursor.moveToNext()) {
                    String name = cursor.getString(cursor.getColumnIndex(""name""));
                    tvData.append(""\n"").append(name);
                }
                tvQueryResult.setText(tvData.toString());
                cursor.close(); // 关闭游标，释放资源
                break;
            //查询全部按钮下面的清除查询按钮
            case R.id.bt_clear_query:
                tvQueryResult.setText("""");
                tvQueryResult.setHint(""查询内容为空"");
                break;

            default:
                break;
        }
    }","@Override
    public void onClick(View v)","2","Body Change","迁移SQLiteTest依赖为androidx，更新gradle版本为最新版
","910d49073ab354736e12e6444977873c77f6e278","LittleCurl"
"9","@Override
    public void onClick(View v) {
        // 获取输入框的数据
        String insertData = etInsert.getText().toString();
        String deleteData = etDelete.getText().toString();
        String beforeUpdateData = etBeforeUpdate.getText().toString();
        String afterUpdateData = etAfterUpdate.getText().toString();

        //根据响应Click的按钮id进行选择操作
        switch (v.getId()) {
            //插入数据按钮
            case R.id.bt_insert:
                //创建存放数据的ContentValues对象
                ContentValues values = new ContentValues();
                values.put(""name"", insertData);
                //数据库执行插入命令
                db.insert(""user"", null, values);
                break;
            //插入数据按钮后面的清除按钮
            case R.id.bt_clear_insert:
                etInsert.setText("""");
                break;

            //删除数据按钮
            case R.id.bt_delete:
                db.delete(""user"", ""name=?"", new String[]{deleteData});
                break;
            //删除数据按钮后面的清除按钮
            case R.id.bt_clear_delete:
                etDelete.setText("""");
                break;

            //更新数据按钮
            case R.id.bt_update:
                ContentValues values2 = new ContentValues();
                values2.put(""name"", afterUpdateData);
                db.update(""user"", values2, ""name = ?"", new String[]{beforeUpdateData});
                break;
            //更新数据按钮后面的清除按钮
            case R.id.bt_clear_update:
                etBeforeUpdate.setText("""");
                etAfterUpdate.setText("""");
                break;

            //查询全部按钮
            case R.id.bt_query:
                //创建游标对象
                Cursor cursor = db.query(""user"", new String[]{""name""}, null, null, null, null, null);
                //利用游标遍历所有数据对象（for循环中，建议使用StringBuilder替代String）
                //为了显示全部，把所有对象连接起来，放到TextView中
                StringBuilder tvData = new StringBuilder();
                while (cursor.moveToNext()) {
                    String name = cursor.getString(cursor.getColumnIndex(""name""));
                    tvData.append(""\n"").append(name);
                }
                tvQueryResult.setText(tvData.toString());
                cursor.close(); // 关闭游标，释放资源
                break;
            //查询全部按钮下面的清除查询按钮
            case R.id.bt_clear_query:
                tvQueryResult.setText("""");
                tvQueryResult.setHint(""查询内容为空"");
                break;

            default:
                break;
        }
    }","@Override
    public void onClick(View v)","2","Body Change","修改·新增实时编辑展示
","16c53a8e18547ff7f59dfa98bf97ab29a0a87790","LittleCurl"
"10","public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
			String[] split = value.toString().split(""\t"");
			String Sno = split[0];
			int Score = Integer.parseInt(split[2]);
			context.write(new Text(Sno), new IntWritable(Score));
		}","public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException","1","Signature Change, Body Change","更新
","1e5340ba9b81cf1395b5d801bdfde7d036154146","littlecurl"
"11","public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
			int sum = 0;
			int count = 0;
			for (IntWritable score : values) {
				sum += score.get();
				count++;
			}
			int average = sum / count;
			context.write(key, new IntWritable(average));
		}","public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException","1","Signature Change, Body Change","更新
","1e5340ba9b81cf1395b5d801bdfde7d036154146","littlecurl"
"12","public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration conf = new Configuration();
		String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
		if (otherArgs.length != 2) {
			System.err.println(""Usage: Score Average<int><out>"");
			System.exit(2);
		}
		Job job = Job.getInstance(conf, ""score"");
		job.setJar(""avgscore2.jar"");
		job.setJarByClass(AvgScore.class);
		job.setMapperClass(Map.class);
		job.setReducerClass(Reduce.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);
		FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
		FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));
		System.exit(job.waitForCompletion(true) ? 0 : 1);
		System.out.println(""Over!"");
	}","public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException","1","Signature Change, Body Change","更新
","1e5340ba9b81cf1395b5d801bdfde7d036154146","littlecurl"
